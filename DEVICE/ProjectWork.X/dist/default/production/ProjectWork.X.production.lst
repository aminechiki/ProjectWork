

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri May 26 15:36:36 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45     0000                     
    46                           ; Version 2.40
    47                           ; Generated 17/11/2021 GMT
    48                           ; 
    49                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution. Publication is not required when
    63                           ;        this file is used in an embedded application.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F877A Definitions
    79                           ; 
    80                           ; SFR Addresses
    81     0000                     	;# 
    82     0001                     	;# 
    83     0002                     	;# 
    84     0003                     	;# 
    85     0004                     	;# 
    86     0005                     	;# 
    87     0006                     	;# 
    88     0007                     	;# 
    89     0008                     	;# 
    90     0009                     	;# 
    91     000A                     	;# 
    92     000B                     	;# 
    93     000C                     	;# 
    94     000D                     	;# 
    95     000E                     	;# 
    96     000E                     	;# 
    97     000F                     	;# 
    98     0010                     	;# 
    99     0011                     	;# 
   100     0012                     	;# 
   101     0013                     	;# 
   102     0014                     	;# 
   103     0015                     	;# 
   104     0015                     	;# 
   105     0016                     	;# 
   106     0017                     	;# 
   107     0018                     	;# 
   108     0019                     	;# 
   109     001A                     	;# 
   110     001B                     	;# 
   111     001B                     	;# 
   112     001C                     	;# 
   113     001D                     	;# 
   114     001E                     	;# 
   115     001F                     	;# 
   116     0081                     	;# 
   117     0085                     	;# 
   118     0086                     	;# 
   119     0087                     	;# 
   120     0088                     	;# 
   121     0089                     	;# 
   122     008C                     	;# 
   123     008D                     	;# 
   124     008E                     	;# 
   125     0091                     	;# 
   126     0092                     	;# 
   127     0093                     	;# 
   128     0094                     	;# 
   129     0098                     	;# 
   130     0099                     	;# 
   131     009C                     	;# 
   132     009D                     	;# 
   133     009E                     	;# 
   134     009F                     	;# 
   135     010C                     	;# 
   136     010D                     	;# 
   137     010E                     	;# 
   138     010F                     	;# 
   139     018C                     	;# 
   140     018D                     	;# 
   141     0000                     	;# 
   142     0001                     	;# 
   143     0002                     	;# 
   144     0003                     	;# 
   145     0004                     	;# 
   146     0005                     	;# 
   147     0006                     	;# 
   148     0007                     	;# 
   149     0008                     	;# 
   150     0009                     	;# 
   151     000A                     	;# 
   152     000B                     	;# 
   153     000C                     	;# 
   154     000D                     	;# 
   155     000E                     	;# 
   156     000E                     	;# 
   157     000F                     	;# 
   158     0010                     	;# 
   159     0011                     	;# 
   160     0012                     	;# 
   161     0013                     	;# 
   162     0014                     	;# 
   163     0015                     	;# 
   164     0015                     	;# 
   165     0016                     	;# 
   166     0017                     	;# 
   167     0018                     	;# 
   168     0019                     	;# 
   169     001A                     	;# 
   170     001B                     	;# 
   171     001B                     	;# 
   172     001C                     	;# 
   173     001D                     	;# 
   174     001E                     	;# 
   175     001F                     	;# 
   176     0081                     	;# 
   177     0085                     	;# 
   178     0086                     	;# 
   179     0087                     	;# 
   180     0088                     	;# 
   181     0089                     	;# 
   182     008C                     	;# 
   183     008D                     	;# 
   184     008E                     	;# 
   185     0091                     	;# 
   186     0092                     	;# 
   187     0093                     	;# 
   188     0094                     	;# 
   189     0098                     	;# 
   190     0099                     	;# 
   191     009C                     	;# 
   192     009D                     	;# 
   193     009E                     	;# 
   194     009F                     	;# 
   195     010C                     	;# 
   196     010D                     	;# 
   197     010E                     	;# 
   198     010F                     	;# 
   199     018C                     	;# 
   200     018D                     	;# 
   201                           
   202                           	psect	idataCOMMON
   203     077B                     __pidataCOMMON:
   204                           
   205                           ;initializer for _keypressed
   206     077B  3463               	retlw	99
   207                           
   208                           	psect	idataBANK0
   209     0777                     __pidataBANK0:
   210                           
   211                           ;initializer for _randx
   212     0777  3401               	retlw	1
   213     0778  3400               	retlw	0
   214     0779  3400               	retlw	0
   215     077A  3400               	retlw	0
   216                           
   217                           	psect	strings
   218     0675                     __pstrings:
   219     0675                     stringtab:
   220     0675                     __stringtab:
   221                           
   222                           ;	String table - string pointers are 1 byte each
   223     0675  1BFF               	btfsc	btemp+1,7
   224     0676  2E7F               	ljmp	stringcode
   225     0677  1383               	bcf	3,7
   226     0678  187F               	btfsc	btemp+1,0
   227     0679  1783               	bsf	3,7
   228     067A  0800               	movf	0,w
   229     067B  0A84               	incf	4,f
   230     067C  1903               	skipnz
   231     067D  0AFF               	incf	btemp+1,f
   232     067E  0008               	return
   233     067F                     stringcode:
   234     067F                     stringdir:
   235     067F  3006               	movlw	high stringdir
   236     0680  008A               	movwf	10
   237     0681  0804               	movf	4,w
   238     0682  0A84               	incf	4,f
   239     0683  0782               	addwf	2,f
   240     0684                     __stringbase:
   241     0684  3400               	retlw	0
   242     0685                     __end_of__stringtab:
   243     0685                     _keys:
   244     0685  342A               	retlw	42
   245     0686  3407               	retlw	7
   246     0687  3404               	retlw	4
   247     0688  3401               	retlw	1
   248     0689  3400               	retlw	0
   249     068A  3408               	retlw	8
   250     068B  3405               	retlw	5
   251     068C  3402               	retlw	2
   252     068D  3423               	retlw	35
   253     068E  3409               	retlw	9
   254     068F  3406               	retlw	6
   255     0690  3403               	retlw	3
   256     0691                     __end_of_keys:
   257     0691                     _rowMask:
   258     0691  3401               	retlw	1
   259     0692  3402               	retlw	2
   260     0693  3404               	retlw	4
   261     0694  3408               	retlw	8
   262     0695                     __end_of_rowMask:
   263     0695                     _colMask:
   264     0695  34FE               	retlw	254
   265     0696  34FD               	retlw	253
   266     0697  34FB               	retlw	251
   267     0698                     __end_of_colMask:
   268     001A                     _RCREG	set	26
   269     0019                     _TXREG	set	25
   270     000C                     _PIR1	set	12
   271     0018                     _RCSTA	set	24
   272     0006                     _PORTB	set	6
   273     0008                     _PORTD	set	8
   274     0009                     _PORTEbits	set	9
   275     0001                     _TMR0	set	1
   276     000B                     _INTCON	set	11
   277     005A                     _T0IF	set	90
   278     0065                     _RCIF	set	101
   279     008C                     _PIE1	set	140
   280     0099                     _SPBRG	set	153
   281     0098                     _TXSTA	set	152
   282     0087                     _TRISC	set	135
   283     0086                     _TRISB	set	134
   284     0089                     _TRISEbits	set	137
   285     0088                     _TRISD	set	136
   286     0081                     _OPTION_REG	set	129
   287     0698                     STR_1:
   288     0698  3450               	retlw	80	;'P'
   289     0699  3449               	retlw	73	;'I'
   290     069A  3443               	retlw	67	;'C'
   291     069B  345F               	retlw	95	;'_'
   292     069C  3430               	retlw	48	;'0'
   293     069D  3430               	retlw	48	;'0'
   294     069E  3430               	retlw	48	;'0'
   295     069F  3431               	retlw	49	;'1'
   296     06A0  3400               	retlw	0
   297     06A1  3400               	retlw	0
   298                           
   299                           	psect	cinit
   300     0011                     start_initialization:	
   301                           ; #config settings
   302                           
   303     0011                     __initialization:
   304                           
   305                           ; Initialize objects allocated to BANK0
   306     0011  120A  118A  2777  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   307     0016  00CD               	movwf	__pdataBANK0& (0+127)
   308     0017  120A  118A  2778  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   309     001C  00CE               	movwf	(__pdataBANK0+1)& (0+127)
   310     001D  120A  118A  2779  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   311     0022  00CF               	movwf	(__pdataBANK0+2)& (0+127)
   312     0023  120A  118A  277A  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   313     0028  00D0               	movwf	(__pdataBANK0+3)& (0+127)
   314                           
   315                           ; Initialize objects allocated to COMMON
   316     0029  120A  118A  277B  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   317     002E  00F9               	movwf	__pdataCOMMON& (0+127)
   318                           
   319                           ; Clear objects allocated to BANK3
   320     002F  1783               	bsf	3,7	;select IRP bank2
   321     0030  3090               	movlw	low __pbssBANK3
   322     0031  0084               	movwf	4
   323     0032  30C2               	movlw	low (__pbssBANK3+50)
   324     0033  120A  118A  276F  120A  118A  	fcall	clear_ram0
   325                           
   326                           ; Clear objects allocated to BANK1
   327     0038  1683               	bsf	3,5	;RP0=1, select bank1
   328     0039  1303               	bcf	3,6	;RP1=0, select bank1
   329     003A  01E2               	clrf	__pbssBANK1& (0+127)
   330     003B  01E3               	clrf	(__pbssBANK1+1)& (0+127)
   331     003C  01E4               	clrf	(__pbssBANK1+2)& (0+127)
   332     003D  01E5               	clrf	(__pbssBANK1+3)& (0+127)
   333     003E  01E6               	clrf	(__pbssBANK1+4)& (0+127)
   334     003F  01E7               	clrf	(__pbssBANK1+5)& (0+127)
   335                           
   336                           ; Clear objects allocated to BANK0
   337     0040  1283               	bcf	3,5	;RP0=0, select bank0
   338     0041  1303               	bcf	3,6	;RP1=0, select bank0
   339     0042  01C9               	clrf	__pbssBANK0& (0+127)
   340     0043  01CA               	clrf	(__pbssBANK0+1)& (0+127)
   341     0044  01CB               	clrf	(__pbssBANK0+2)& (0+127)
   342     0045  01CC               	clrf	(__pbssBANK0+3)& (0+127)
   343                           
   344                           ; Clear objects allocated to COMMON
   345     0046  01F6               	clrf	__pbssCOMMON& (0+127)
   346     0047  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   347     0048  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   348     0049                     end_of_initialization:	
   349                           ;End of C runtime variable initialization code
   350                           
   351     0049                     __end_of__initialization:
   352     0049  0183               	clrf	3
   353     004A  120A  118A  2A70   	ljmp	_main	;jump to C main() function
   354                           
   355                           	psect	bssCOMMON
   356     0076                     __pbssCOMMON:
   357     0076                     _keyf:
   358     0076                     	ds	1
   359     0077                     _rowScan:
   360     0077                     	ds	1
   361     0078                     _colScan:
   362     0078                     	ds	1
   363                           
   364                           	psect	dataCOMMON
   365     0079                     __pdataCOMMON:
   366     0079                     _keypressed:
   367     0079                     	ds	1
   368                           
   369                           	psect	bssBANK0
   370     0049                     __pbssBANK0:
   371     0049                     _milliseconds:
   372     0049                     	ds	4
   373                           
   374                           	psect	dataBANK0
   375     004D                     __pdataBANK0:
   376     004D                     _randx:
   377     004D                     	ds	4
   378                           
   379                           	psect	bssBANK1
   380     00E2                     __pbssBANK1:
   381     00E2                     _old_num_rand:
   382     00E2                     	ds	2
   383     00E4                     _num_rand:
   384     00E4                     	ds	2
   385     00E6                     _recieved:
   386     00E6                     	ds	1
   387     00E7                     _i:
   388     00E7                     	ds	1
   389                           
   390                           	psect	bssBANK3
   391     0190                     __pbssBANK3:
   392     0190                     _dato:
   393     0190                     	ds	50
   394                           
   395                           	psect	clrtext
   396     076F                     clear_ram0:	
   397                           ;	Called with FSR containing the base address, and
   398                           ;	W with the last address+1
   399                           
   400     076F  0064               	clrwdt	;clear the watchdog before getting into this loop
   401     0770                     clrloop0:
   402     0770  0180               	clrf	0	;clear RAM location pointed to by FSR
   403     0771  0A84               	incf	4,f	;increment pointer
   404     0772  0604               	xorwf	4,w	;XOR with final address
   405     0773  1903               	btfsc	3,2	;have we reached the end yet?
   406     0774  3400               	retlw	0	;all done for this memory range, return
   407     0775  0604               	xorwf	4,w	;XOR again to restore value
   408     0776  2F70               	goto	clrloop0	;do the next byte
   409                           
   410                           	psect	cstackBANK1
   411     00A0                     __pcstackBANK1:
   412     00A0                     main@packet:
   413                           
   414                           ; 50 bytes @ 0x0
   415     00A0                     	ds	50
   416     00D2                     main@num_rand_s:
   417                           
   418                           ; 16 bytes @ 0x32
   419     00D2                     	ds	16
   420                           
   421                           	psect	cstackCOMMON
   422     0070                     __pcstackCOMMON:
   423     0070                     ?_init_PIC:
   424     0070                     ?_read_NumPad:	
   425                           ; 1 bytes @ 0x0
   426                           
   427     0070                     ?_UART_TxString:	
   428                           ; 1 bytes @ 0x0
   429                           
   430     0070                     ?_init_LCD:	
   431                           ; 1 bytes @ 0x0
   432                           
   433     0070                     ?_init_NumPad:	
   434                           ; 1 bytes @ 0x0
   435                           
   436     0070                     ?_init_Timer0:	
   437                           ; 1 bytes @ 0x0
   438                           
   439     0070                     ?_main:	
   440                           ; 1 bytes @ 0x0
   441                           
   442     0070                     ?_UART_TxChar:	
   443                           ; 1 bytes @ 0x0
   444                           
   445     0070                     ?_IRS:	
   446                           ; 1 bytes @ 0x0
   447                           
   448     0070                     ??_IRS:	
   449                           ; 1 bytes @ 0x0
   450                           
   451                           
   452                           ; 1 bytes @ 0x0
   453     0070                     	ds	4
   454     0074                     ?_lcdSend:
   455     0074                     ??_init_NumPad:	
   456                           ; 1 bytes @ 0x4
   457                           
   458     0074                     ??_init_Timer0:	
   459                           ; 1 bytes @ 0x4
   460                           
   461     0074                     ?_srand:	
   462                           ; 1 bytes @ 0x4
   463                           
   464     0074                     ??_UART_TxChar:	
   465                           ; 1 bytes @ 0x4
   466                           
   467     0074                     ??___wmul:	
   468                           ; 1 bytes @ 0x4
   469                           
   470     0074                     ??___lmul:	
   471                           ; 1 bytes @ 0x4
   472                           
   473     0074                     ??___almod:	
   474                           ; 1 bytes @ 0x4
   475                           
   476     0074                     ?_strcat:	
   477                           ; 1 bytes @ 0x4
   478                           
   479     0074                     lcdSend@tipo:	
   480                           ; 2 bytes @ 0x4
   481                           
   482     0074                     strcat@str2:	
   483                           ; 1 bytes @ 0x4
   484                           
   485     0074                     ___wmul@product:	
   486                           ; 2 bytes @ 0x4
   487                           
   488     0074                     srand@x:	
   489                           ; 2 bytes @ 0x4
   490                           
   491                           
   492                           ; 2 bytes @ 0x4
   493     0074                     	ds	1
   494     0075                     ??___awmod:
   495     0075                     lcdSend@dato:	
   496                           ; 1 bytes @ 0x5
   497                           
   498     0075                     UART_TxChar@ch:	
   499                           ; 1 bytes @ 0x5
   500                           
   501                           
   502                           ; 1 bytes @ 0x5
   503     0075                     	ds	1
   504     0076                     ??_init_PIC:
   505     0076                     ??_srand:	
   506                           ; 1 bytes @ 0x6
   507                           
   508     0076                     ??_main:	
   509                           ; 1 bytes @ 0x6
   510                           
   511                           
   512                           	psect	cstackBANK0
   513     0020                     __pcstackBANK0:	
   514                           ; 1 bytes @ 0x6
   515                           
   516     0020                     ??_lcdSend:
   517     0020                     ??_UART_TxString:	
   518                           ; 1 bytes @ 0x0
   519                           
   520     0020                     ??_strcat:	
   521                           ; 1 bytes @ 0x0
   522                           
   523     0020                     ?___wmul:	
   524                           ; 1 bytes @ 0x0
   525                           
   526     0020                     ?___lmul:	
   527                           ; 2 bytes @ 0x0
   528                           
   529     0020                     ?___almod:	
   530                           ; 4 bytes @ 0x0
   531                           
   532     0020                     ___wmul@multiplier:	
   533                           ; 4 bytes @ 0x0
   534                           
   535     0020                     ___lmul@multiplier:	
   536                           ; 2 bytes @ 0x0
   537                           
   538     0020                     ___almod@divisor:	
   539                           ; 4 bytes @ 0x0
   540                           
   541                           
   542                           ; 4 bytes @ 0x0
   543     0020                     	ds	1
   544     0021                     UART_TxString@str:
   545                           
   546                           ; 1 bytes @ 0x1
   547     0021                     	ds	1
   548     0022                     ?_lcdPrint:
   549     0022                     ??_init_LCD:	
   550                           ; 1 bytes @ 0x2
   551                           
   552     0022                     lcdPrint@str:	
   553                           ; 1 bytes @ 0x2
   554                           
   555     0022                     UART_TxString@n:	
   556                           ; 2 bytes @ 0x2
   557                           
   558     0022                     ___wmul@multiplicand:	
   559                           ; 2 bytes @ 0x2
   560                           
   561                           
   562                           ; 2 bytes @ 0x2
   563     0022                     	ds	2
   564     0024                     ??_lcdPrint:
   565     0024                     ?_pow:	
   566                           ; 1 bytes @ 0x4
   567                           
   568     0024                     pow@exp:	
   569                           ; 2 bytes @ 0x4
   570                           
   571     0024                     ___lmul@multiplicand:	
   572                           ; 1 bytes @ 0x4
   573                           
   574     0024                     ___almod@dividend:	
   575                           ; 4 bytes @ 0x4
   576                           
   577                           
   578                           ; 4 bytes @ 0x4
   579     0024                     	ds	1
   580     0025                     strcat@n:
   581                           
   582                           ; 2 bytes @ 0x5
   583     0025                     	ds	1
   584     0026                     ??_pow:
   585                           
   586                           ; 1 bytes @ 0x6
   587     0026                     	ds	1
   588     0027                     strcat@str1:
   589     0027                     lcdPrint@n:	
   590                           ; 1 bytes @ 0x7
   591                           
   592                           
   593                           ; 2 bytes @ 0x7
   594     0027                     	ds	1
   595     0028                     pow@b:
   596     0028                     ___almod@counter:	
   597                           ; 1 bytes @ 0x8
   598                           
   599     0028                     strcat@length_str1:	
   600                           ; 1 bytes @ 0x8
   601                           
   602     0028                     ___lmul@product:	
   603                           ; 2 bytes @ 0x8
   604                           
   605                           
   606                           ; 4 bytes @ 0x8
   607     0028                     	ds	1
   608     0029                     ___almod@sign:
   609     0029                     pow@i:	
   610                           ; 1 bytes @ 0x9
   611                           
   612                           
   613                           ; 2 bytes @ 0x9
   614     0029                     	ds	1
   615     002A                     ?_ConcatToPacket:
   616     002A                     ConcatToPacket@str:	
   617                           ; 1 bytes @ 0xA
   618                           
   619                           
   620                           ; 2 bytes @ 0xA
   621     002A                     	ds	1
   622     002B                     pow@n:
   623                           
   624                           ; 2 bytes @ 0xB
   625     002B                     	ds	1
   626     002C                     ?_rand:
   627     002C                     ConcatToPacket@delim:	
   628                           ; 2 bytes @ 0xC
   629                           
   630                           
   631                           ; 1 bytes @ 0xC
   632     002C                     	ds	1
   633     002D                     ??_ConcatToPacket:
   634     002D                     ?___aldiv:	
   635                           ; 1 bytes @ 0xD
   636                           
   637     002D                     ___aldiv@divisor:	
   638                           ; 4 bytes @ 0xD
   639                           
   640                           
   641                           ; 4 bytes @ 0xD
   642     002D                     	ds	1
   643     002E                     ??_rand:
   644     002E                     ConcatToPacket@packet_length:	
   645                           ; 1 bytes @ 0xE
   646                           
   647                           
   648                           ; 2 bytes @ 0xE
   649     002E                     	ds	2
   650     0030                     ConcatToPacket@pkt:
   651                           
   652                           ; 1 bytes @ 0x10
   653     0030                     	ds	1
   654     0031                     ___aldiv@dividend:
   655                           
   656                           ; 4 bytes @ 0x11
   657     0031                     	ds	2
   658     0033                     ?___awmod:
   659     0033                     ___awmod@divisor:	
   660                           ; 2 bytes @ 0x13
   661                           
   662                           
   663                           ; 2 bytes @ 0x13
   664     0033                     	ds	2
   665     0035                     ??___aldiv:
   666     0035                     ___awmod@dividend:	
   667                           ; 1 bytes @ 0x15
   668                           
   669                           
   670                           ; 2 bytes @ 0x15
   671     0035                     	ds	1
   672     0036                     ___aldiv@counter:
   673                           
   674                           ; 1 bytes @ 0x16
   675     0036                     	ds	1
   676     0037                     ___aldiv@sign:
   677     0037                     ___awmod@counter:	
   678                           ; 1 bytes @ 0x17
   679                           
   680                           
   681                           ; 1 bytes @ 0x17
   682     0037                     	ds	1
   683     0038                     ___awmod@sign:
   684     0038                     ___aldiv@quotient:	
   685                           ; 1 bytes @ 0x18
   686                           
   687                           
   688                           ; 4 bytes @ 0x18
   689     0038                     	ds	1
   690     0039                     ??_read_NumPad:
   691                           
   692                           ; 1 bytes @ 0x19
   693     0039                     	ds	3
   694     003C                     ?_ConvertToString:
   695     003C                     ?_UART_init:	
   696                           ; 1 bytes @ 0x1C
   697                           
   698     003C                     ConvertToString@n:	
   699                           ; 1 bytes @ 0x1C
   700                           
   701     003C                     UART_init@baudrate:	
   702                           ; 4 bytes @ 0x1C
   703                           
   704                           
   705                           ; 4 bytes @ 0x1C
   706     003C                     	ds	4
   707     0040                     ??_UART_init:
   708     0040                     ConvertToString@str:	
   709                           ; 1 bytes @ 0x20
   710                           
   711                           
   712                           ; 1 bytes @ 0x20
   713     0040                     	ds	1
   714     0041                     ??_ConvertToString:
   715                           
   716                           ; 1 bytes @ 0x21
   717     0041                     	ds	1
   718     0042                     ConvertToString@temp:
   719                           
   720                           ; 2 bytes @ 0x22
   721     0042                     	ds	2
   722     0044                     ConvertToString@j:
   723                           
   724                           ; 2 bytes @ 0x24
   725     0044                     	ds	2
   726     0046                     ConvertToString@i:
   727                           
   728                           ; 2 bytes @ 0x26
   729     0046                     	ds	2
   730     0048                     ConvertToString@n_cifre:
   731                           
   732                           ; 1 bytes @ 0x28
   733     0048                     	ds	1
   734                           
   735                           	psect	maintext
   736     0270                     __pmaintext:	
   737 ;;
   738 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   739 ;;
   740 ;; *************** function _main *****************
   741 ;; Defined at:
   742 ;;		line 99 in file "main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  packet         50    0[BANK1 ] unsigned char [50]
   747 ;;  num_rand_s     16   50[BANK1 ] unsigned char [16]
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : B00/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   757 ;;      Params:         0       0       0       0       0
   758 ;;      Locals:         0       0      66       0       0
   759 ;;      Temps:          0       0       0       0       0
   760 ;;      Totals:         0       0      66       0       0
   761 ;;Total ram usage:       66 bytes
   762 ;; Hardware stack levels required when called: 4
   763 ;; This function calls:
   764 ;;		_ConcatToPacket
   765 ;;		_ConvertToString
   766 ;;		_UART_TxString
   767 ;;		_init_PIC
   768 ;;		_lcdPrint
   769 ;;		_lcdSend
   770 ;;		_read_NumPad
   771 ;; This function is called by:
   772 ;;		Startup code after reset
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776     0270                     _main:	
   777                           ;psect for function _main
   778                           
   779     0270                     l1855:	
   780                           ;incstack = 0
   781                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   782                           
   783                           
   784                           ;main.c: 101:     init_PIC();
   785     0270  120A  118A  2719  120A  118A  	fcall	_init_PIC
   786     0275                     l1857:
   787                           
   788                           ;main.c: 104:     {;main.c: 105:         read_NumPad();
   789     0275  120A  118A  2127  120A  118A  	fcall	_read_NumPad
   790     027A                     l1859:
   791                           
   792                           ;main.c: 109:         if(num_rand != old_num_rand)
   793     027A  1683               	bsf	3,5	;RP0=1, select bank1
   794     027B  1303               	bcf	3,6	;RP1=0, select bank1
   795     027C  0863               	movf	(_old_num_rand+1)^(0+128),w
   796     027D  0665               	xorwf	(_num_rand+1)^(0+128),w
   797     027E  1D03               	skipz
   798     027F  2A82               	goto	u1665
   799     0280  0862               	movf	_old_num_rand^(0+128),w
   800     0281  0664               	xorwf	_num_rand^(0+128),w
   801     0282                     u1665:
   802     0282  1903               	skipnz
   803     0283  2A85               	goto	u1661
   804     0284  2A86               	goto	u1660
   805     0285                     u1661:
   806     0285  2AD5               	goto	l1875
   807     0286                     u1660:
   808     0286                     l1861:
   809                           
   810                           ;main.c: 110:         {;main.c: 112:             lcdSend(0x01, 0);
   811     0286  01F4               	clrf	lcdSend@tipo
   812     0287  3001               	movlw	1
   813     0288  120A  118A  26A2  120A  118A  	fcall	_lcdSend
   814     028D                     l1863:
   815                           
   816                           ;main.c: 114:             char num_rand_s[16];;main.c: 115:             ConvertToString(
      +                          num_rand, num_rand_s);
   817     028D  1683               	bsf	3,5	;RP0=1, select bank1
   818     028E  1303               	bcf	3,6	;RP1=0, select bank1
   819     028F  0864               	movf	_num_rand^(0+128),w
   820     0290  1283               	bcf	3,5	;RP0=0, select bank0
   821     0291  1303               	bcf	3,6	;RP1=0, select bank0
   822     0292  00BC               	movwf	ConvertToString@n
   823     0293  1683               	bsf	3,5	;RP0=1, select bank1
   824     0294  1303               	bcf	3,6	;RP1=0, select bank1
   825     0295  0865               	movf	(_num_rand+1)^(0+128),w
   826     0296  1283               	bcf	3,5	;RP0=0, select bank0
   827     0297  1303               	bcf	3,6	;RP1=0, select bank0
   828     0298  00BD               	movwf	ConvertToString@n+1
   829     0299  3000               	movlw	0
   830     029A  1BBD               	btfsc	ConvertToString@n+1,7
   831     029B  30FF               	movlw	255
   832     029C  00BE               	movwf	ConvertToString@n+2
   833     029D  00BF               	movwf	ConvertToString@n+3
   834     029E  30D2               	movlw	(low (main@num_rand_s| 0))& (0+255)
   835     029F  00C0               	movwf	ConvertToString@str
   836     02A0  120A  118A  204D  120A  118A  	fcall	_ConvertToString
   837     02A5                     l1865:
   838                           
   839                           ;main.c: 116:             lcdPrint(num_rand_s);
   840     02A5  30D2               	movlw	(low (main@num_rand_s| 0))& (0+255)
   841     02A6  1283               	bcf	3,5	;RP0=0, select bank0
   842     02A7  1303               	bcf	3,6	;RP1=0, select bank0
   843     02A8  00A2               	movwf	lcdPrint@str
   844     02A9  3000               	movlw	0
   845     02AA  00A3               	movwf	lcdPrint@str+1
   846     02AB  120A  118A  25BB  120A  118A  	fcall	_lcdPrint
   847     02B0                     l1867:
   848                           
   849                           ;main.c: 119:             char packet[50];;main.c: 120:             packet[0] = '\0';
   850     02B0  1683               	bsf	3,5	;RP0=1, select bank1
   851     02B1  1303               	bcf	3,6	;RP1=0, select bank1
   852     02B2  01A0               	clrf	main@packet^(0+128)
   853     02B3                     l1869:
   854                           
   855                           ;main.c: 121:             ConcatToPacket(packet, "PIC_0001\0", '/');
   856     02B3  3014               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   857     02B4  1283               	bcf	3,5	;RP0=0, select bank0
   858     02B5  1303               	bcf	3,6	;RP1=0, select bank0
   859     02B6  00AA               	movwf	ConcatToPacket@str
   860     02B7  3080               	movlw	128
   861     02B8  00AB               	movwf	ConcatToPacket@str+1
   862     02B9  302F               	movlw	47
   863     02BA  00AC               	movwf	ConcatToPacket@delim
   864     02BB  30A0               	movlw	(low (main@packet| 0))& (0+255)
   865     02BC  120A  118A  249C  120A  118A  	fcall	_ConcatToPacket
   866     02C1                     l1871:
   867                           
   868                           ;main.c: 122:             ConcatToPacket(packet, num_rand_s, ' ');
   869     02C1  30D2               	movlw	(low (main@num_rand_s| 0))& (0+255)
   870     02C2  1283               	bcf	3,5	;RP0=0, select bank0
   871     02C3  1303               	bcf	3,6	;RP1=0, select bank0
   872     02C4  00AA               	movwf	ConcatToPacket@str
   873     02C5  3000               	movlw	0
   874     02C6  00AB               	movwf	ConcatToPacket@str+1
   875     02C7  3020               	movlw	32
   876     02C8  00AC               	movwf	ConcatToPacket@delim
   877     02C9  30A0               	movlw	(low (main@packet| 0))& (0+255)
   878     02CA  120A  118A  249C  120A  118A  	fcall	_ConcatToPacket
   879     02CF                     l1873:
   880                           
   881                           ;main.c: 124:             UART_TxString(packet);
   882     02CF  30A0               	movlw	(low (main@packet| 0))& (0+255)
   883     02D0  120A  118A  26F4  120A  118A  	fcall	_UART_TxString
   884     02D5                     l1875:
   885                           
   886                           ;main.c: 126:         old_num_rand = num_rand;
   887     02D5  1683               	bsf	3,5	;RP0=1, select bank1
   888     02D6  1303               	bcf	3,6	;RP1=0, select bank1
   889     02D7  0865               	movf	(_num_rand+1)^(0+128),w
   890     02D8  00E3               	movwf	(_old_num_rand+1)^(0+128)
   891     02D9  0864               	movf	_num_rand^(0+128),w
   892     02DA  00E2               	movwf	_old_num_rand^(0+128)
   893     02DB                     l1877:
   894                           
   895                           ;main.c: 129:         if(recieved)
   896     02DB  0866               	movf	_recieved^(0+128),w
   897     02DC  1903               	btfsc	3,2
   898     02DD  2ADF               	goto	u1671
   899     02DE  2AE0               	goto	u1670
   900     02DF                     u1671:
   901     02DF  2A75               	goto	l1857
   902     02E0                     u1670:
   903     02E0                     l1879:
   904                           
   905                           ;main.c: 130:         {;main.c: 132:             lcdSend(0x01, 0);
   906     02E0  01F4               	clrf	lcdSend@tipo
   907     02E1  3001               	movlw	1
   908     02E2  120A  118A  26A2  120A  118A  	fcall	_lcdSend
   909     02E7                     l1881:
   910                           
   911                           ;main.c: 133:             lcdPrint(dato);
   912     02E7  3090               	movlw	(low (_dato| (0+256)))& (0+255)
   913     02E8  1283               	bcf	3,5	;RP0=0, select bank0
   914     02E9  1303               	bcf	3,6	;RP1=0, select bank0
   915     02EA  00A2               	movwf	lcdPrint@str
   916     02EB  3001               	movlw	1
   917     02EC  00A3               	movwf	lcdPrint@str+1
   918     02ED  120A  118A  25BB  120A  118A  	fcall	_lcdPrint
   919     02F2                     l1883:
   920                           
   921                           ;main.c: 134:             recieved = 0;
   922     02F2  1683               	bsf	3,5	;RP0=1, select bank1
   923     02F3  1303               	bcf	3,6	;RP1=0, select bank1
   924     02F4  01E6               	clrf	_recieved^(0+128)
   925     02F5                     l1885:
   926                           
   927                           ;main.c: 135:             i = 0;
   928     02F5  01E7               	clrf	_i^(0+128)
   929     02F6  2A75               	goto	l1857
   930     02F7  120A  118A  280E   	ljmp	start
   931     02FA                     __end_of_main:
   932                           
   933                           	psect	text1
   934     0127                     __ptext1:	
   935 ;; *************** function _read_NumPad *****************
   936 ;; Defined at:
   937 ;;		line 325 in file "main.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   951 ;;      Params:         0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0
   953 ;;      Temps:          0       2       0       0       0
   954 ;;      Totals:         0       2       0       0       0
   955 ;;Total ram usage:        2 bytes
   956 ;; Hardware stack levels used: 1
   957 ;; Hardware stack levels required when called: 3
   958 ;; This function calls:
   959 ;;		___awmod
   960 ;;		_rand
   961 ;;		_srand
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967     0127                     _read_NumPad:	
   968                           ;psect for function _read_NumPad
   969                           
   970     0127                     l1747:	
   971                           ;incstack = 0
   972                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   973                           
   974                           
   975                           ;main.c: 328:     TRISD |= 0x0F;
   976     0127  300F               	movlw	15
   977     0128  1283               	bcf	3,5	;RP0=0, select bank0
   978     0129  1303               	bcf	3,6	;RP1=0, select bank0
   979     012A  00B9               	movwf	??_read_NumPad
   980     012B  0839               	movf	??_read_NumPad,w
   981     012C  1683               	bsf	3,5	;RP0=1, select bank1
   982     012D  1303               	bcf	3,6	;RP1=0, select bank1
   983     012E  0488               	iorwf	8,f	;volatile
   984     012F                     l1749:
   985                           
   986                           ;main.c: 329:     for(colScan = 0; colScan < 3; colScan++)
   987     012F  01F8               	clrf	_colScan
   988     0130                     l1755:
   989                           
   990                           ;main.c: 330:     {;main.c: 333:         PORTB |= 0x07;
   991     0130  3007               	movlw	7
   992     0131  1283               	bcf	3,5	;RP0=0, select bank0
   993     0132  00B9               	movwf	??_read_NumPad
   994     0133  0839               	movf	??_read_NumPad,w
   995     0134  0486               	iorwf	6,f	;volatile
   996     0135                     l1757:
   997                           
   998                           ;main.c: 335:         PORTB &= colMask[colScan];
   999     0135  0878               	movf	_colScan,w
  1000     0136  3E11               	addlw	low ((_colMask-__stringbase)| (0+32768))
  1001     0137  0084               	movwf	4
  1002     0138  120A  118A  267F  120A  118A  	fcall	stringdir
  1003     013D  00B9               	movwf	??_read_NumPad
  1004     013E  0839               	movf	??_read_NumPad,w
  1005     013F  0586               	andwf	6,f	;volatile
  1006     0140                     l1759:
  1007                           
  1008                           ;main.c: 337:         for(rowScan = 0; rowScan < 4; rowScan++)
  1009     0140  01F7               	clrf	_rowScan
  1010     0141                     l1765:
  1011                           
  1012                           ;main.c: 338:         {;main.c: 340:             if(!(PORTD & rowMask[rowScan]))
  1013     0141  0877               	movf	_rowScan,w
  1014     0142  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  1015     0143  0084               	movwf	4
  1016     0144  120A  118A  267F  120A  118A  	fcall	stringdir
  1017     0149  0508               	andwf	8,w	;volatile
  1018     014A  1D03               	btfss	3,2
  1019     014B  294D               	goto	u1501
  1020     014C  294E               	goto	u1500
  1021     014D                     u1501:
  1022     014D  2975               	goto	l162
  1023     014E                     u1500:
  1024     014E                     l1767:
  1025                           
  1026                           ;main.c: 341:             {;main.c: 343:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  1027     014E  3021               	movlw	33
  1028     014F  1283               	bcf	3,5	;RP0=0, select bank0
  1029     0150  1303               	bcf	3,6	;RP1=0, select bank0
  1030     0151  00BA               	movwf	??_read_NumPad+1
  1031     0152  3075               	movlw	117
  1032     0153  00B9               	movwf	??_read_NumPad
  1033     0154                     u1687:
  1034     0154  0BB9               	decfsz	??_read_NumPad,f
  1035     0155  2954               	goto	u1687
  1036     0156  0BBA               	decfsz	??_read_NumPad+1,f
  1037     0157  2954               	goto	u1687
  1038     0158  2959               	nop2
  1039     0159                     l1769:
  1040                           
  1041                           ;main.c: 344:                 if(!(PORTD & rowMask[rowScan]))
  1042     0159  0877               	movf	_rowScan,w
  1043     015A  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  1044     015B  0084               	movwf	4
  1045     015C  120A  118A  267F  120A  118A  	fcall	stringdir
  1046     0161  1283               	bcf	3,5	;RP0=0, select bank0
  1047     0162  1303               	bcf	3,6	;RP1=0, select bank0
  1048     0163  0508               	andwf	8,w	;volatile
  1049     0164  1D03               	btfss	3,2
  1050     0165  2967               	goto	u1511
  1051     0166  2968               	goto	u1510
  1052     0167                     u1511:
  1053     0167  2975               	goto	l162
  1054     0168                     u1510:
  1055     0168                     l1771:
  1056                           
  1057                           ;main.c: 345:                 {;main.c: 349:                     keypressed = rowScan+(4
      +                          *colScan);
  1058     0168  0878               	movf	_colScan,w
  1059     0169  00B9               	movwf	??_read_NumPad
  1060     016A  3002               	movlw	2
  1061     016B                     u1525:
  1062     016B  1003               	clrc
  1063     016C  0DB9               	rlf	??_read_NumPad,f
  1064     016D  3EFF               	addlw	-1
  1065     016E  1D03               	skipz
  1066     016F  296B               	goto	u1525
  1067     0170  0877               	movf	_rowScan,w
  1068     0171  0739               	addwf	??_read_NumPad,w
  1069     0172  00F9               	movwf	_keypressed
  1070     0173                     l1773:
  1071                           
  1072                           ;main.c: 351:                     keyf = 1;
  1073     0173  01F6               	clrf	_keyf
  1074     0174  0AF6               	incf	_keyf,f
  1075     0175                     l162:	
  1076                           ;main.c: 353:             }
  1077                           
  1078                           
  1079                           ;main.c: 354:         }
  1080     0175  3001               	movlw	1
  1081     0176  00B9               	movwf	??_read_NumPad
  1082     0177  0839               	movf	??_read_NumPad,w
  1083     0178  07F7               	addwf	_rowScan,f
  1084     0179                     l1775:
  1085     0179  3004               	movlw	4
  1086     017A  0277               	subwf	_rowScan,w
  1087     017B  1C03               	skipc
  1088     017C  297E               	goto	u1531
  1089     017D  297F               	goto	u1530
  1090     017E                     u1531:
  1091     017E  2941               	goto	l1765
  1092     017F                     u1530:
  1093     017F                     l1777:
  1094                           
  1095                           ;main.c: 356:         if(keyf)
  1096     017F  0876               	movf	_keyf,w
  1097     0180  1903               	btfsc	3,2
  1098     0181  2983               	goto	u1541
  1099     0182  2984               	goto	u1540
  1100     0183                     u1541:
  1101     0183  29C8               	goto	l1789
  1102     0184                     u1540:
  1103     0184                     l1779:
  1104                           
  1105                           ;main.c: 357:         {;main.c: 358:             keyf = 0;
  1106     0184  01F6               	clrf	_keyf
  1107     0185                     l1781:
  1108                           
  1109                           ;main.c: 361:             if(keypressed == 8)
  1110     0185  3008               	movlw	8
  1111     0186  0679               	xorwf	_keypressed,w
  1112     0187  1D03               	btfss	3,2
  1113     0188  298A               	goto	u1551
  1114     0189  298B               	goto	u1550
  1115     018A                     u1551:
  1116     018A  29BA               	goto	l1785
  1117     018B                     u1550:
  1118     018B                     l1783:
  1119                           
  1120                           ;main.c: 362:             {;main.c: 364:                 srand(milliseconds);
  1121     018B  084A               	movf	_milliseconds+1,w
  1122     018C  00F5               	movwf	srand@x+1
  1123     018D  0849               	movf	_milliseconds,w
  1124     018E  00F4               	movwf	srand@x
  1125     018F  120A  118A  2766  120A  118A  	fcall	_srand
  1126                           
  1127                           ;main.c: 366:                 num_rand = ((rand()%8999)+1000);
  1128     0194  3027               	movlw	39
  1129     0195  1283               	bcf	3,5	;RP0=0, select bank0
  1130     0196  1303               	bcf	3,6	;RP1=0, select bank0
  1131     0197  00B3               	movwf	___awmod@divisor
  1132     0198  3023               	movlw	35
  1133     0199  00B4               	movwf	___awmod@divisor+1
  1134     019A  120A  118A  252E  120A  118A  	fcall	_rand
  1135     019F  1283               	bcf	3,5	;RP0=0, select bank0
  1136     01A0  1303               	bcf	3,6	;RP1=0, select bank0
  1137     01A1  082D               	movf	?_rand+1,w
  1138     01A2  00B6               	movwf	___awmod@dividend+1
  1139     01A3  082C               	movf	?_rand,w
  1140     01A4  00B5               	movwf	___awmod@dividend
  1141     01A5  120A  118A  23E8  120A  118A  	fcall	___awmod
  1142     01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1143     01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1144     01AC  0833               	movf	?___awmod,w
  1145     01AD  3EE8               	addlw	232
  1146     01AE  1683               	bsf	3,5	;RP0=1, select bank1
  1147     01AF  1303               	bcf	3,6	;RP1=0, select bank1
  1148     01B0  00E4               	movwf	_num_rand^(0+128)
  1149     01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1150     01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1151     01B3  0834               	movf	?___awmod+1,w
  1152     01B4  1803               	skipnc
  1153     01B5  3E01               	addlw	1
  1154     01B6  3E03               	addlw	3
  1155     01B7  1683               	bsf	3,5	;RP0=1, select bank1
  1156     01B8  1303               	bcf	3,6	;RP1=0, select bank1
  1157     01B9  00E5               	movwf	(_num_rand+1)^(0+128)
  1158     01BA                     l1785:
  1159                           
  1160                           ;main.c: 369:             PORTD |= 0x0F;
  1161     01BA  300F               	movlw	15
  1162     01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1163     01BC  00B9               	movwf	??_read_NumPad
  1164     01BD  0839               	movf	??_read_NumPad,w
  1165     01BE  0488               	iorwf	8,f	;volatile
  1166     01BF                     l1787:	
  1167                           ;main.c: 371:             while(((PORTD & 0x0F) != 0x0F))
  1168                           
  1169                           
  1170                           ;main.c: 371:             while(((PORTD & 0x0F) != 0x0F))
  1171     01BF  300F               	movlw	15
  1172     01C0  0508               	andwf	8,w	;volatile
  1173     01C1  00B9               	movwf	??_read_NumPad
  1174     01C2  300F               	movlw	15
  1175     01C3  0639               	xorwf	??_read_NumPad,w
  1176     01C4  1D03               	btfss	3,2
  1177     01C5  29C7               	goto	u1561
  1178     01C6  29C8               	goto	u1560
  1179     01C7                     u1561:
  1180     01C7  29BF               	goto	l1787
  1181     01C8                     u1560:
  1182     01C8                     l1789:
  1183                           
  1184                           ;main.c: 376:     }
  1185     01C8  3001               	movlw	1
  1186     01C9  00B9               	movwf	??_read_NumPad
  1187     01CA  0839               	movf	??_read_NumPad,w
  1188     01CB  07F8               	addwf	_colScan,f
  1189     01CC                     l1791:
  1190     01CC  3003               	movlw	3
  1191     01CD  0278               	subwf	_colScan,w
  1192     01CE  1C03               	skipc
  1193     01CF  29D1               	goto	u1571
  1194     01D0  29D2               	goto	u1570
  1195     01D1                     u1571:
  1196     01D1  2930               	goto	l1755
  1197     01D2                     u1570:
  1198     01D2                     l169:
  1199     01D2  0008               	return
  1200     01D3                     __end_of_read_NumPad:
  1201                           
  1202                           	psect	text2
  1203     0766                     __ptext2:	
  1204 ;; *************** function _srand *****************
  1205 ;; Defined at:
  1206 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  x               2    4[COMMON] unsigned int 
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;		None
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		wreg
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         2       0       0       0       0
  1221 ;;      Locals:         0       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0
  1223 ;;      Totals:         2       0       0       0       0
  1224 ;;Total ram usage:        2 bytes
  1225 ;; Hardware stack levels used: 1
  1226 ;; Hardware stack levels required when called: 1
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_read_NumPad
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234     0766                     _srand:	
  1235                           ;psect for function _srand
  1236                           
  1237     0766                     l1369:	
  1238                           ;incstack = 0
  1239                           ; Regs used in _srand: [wreg]
  1240                           
  1241     0766  0874               	movf	srand@x,w
  1242     0767  1283               	bcf	3,5	;RP0=0, select bank0
  1243     0768  1303               	bcf	3,6	;RP1=0, select bank0
  1244     0769  00CD               	movwf	_randx
  1245     076A  0875               	movf	srand@x+1,w
  1246     076B  00CE               	movwf	_randx+1
  1247     076C  01CF               	clrf	_randx+2
  1248     076D  01D0               	clrf	_randx+3
  1249     076E                     l730:
  1250     076E  0008               	return
  1251     076F                     __end_of_srand:
  1252                           
  1253                           	psect	text3
  1254     052E                     __ptext3:	
  1255 ;; *************** function _rand *****************
  1256 ;; Defined at:
  1257 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;		None
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  2   12[BANK0 ] int 
  1264 ;; Registers used:
  1265 ;;		wreg, status,2, status,0, pclath, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1271 ;;      Params:         0       2       0       0       0
  1272 ;;      Locals:         0       0       0       0       0
  1273 ;;      Temps:          0       5       0       0       0
  1274 ;;      Totals:         0       7       0       0       0
  1275 ;;Total ram usage:        7 bytes
  1276 ;; Hardware stack levels used: 1
  1277 ;; Hardware stack levels required when called: 2
  1278 ;; This function calls:
  1279 ;;		___lmul
  1280 ;; This function is called by:
  1281 ;;		_read_NumPad
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285     052E                     _rand:	
  1286                           ;psect for function _rand
  1287                           
  1288     052E                     l1699:	
  1289                           ;incstack = 0
  1290                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1291                           
  1292     052E  1283               	bcf	3,5	;RP0=0, select bank0
  1293     052F  1303               	bcf	3,6	;RP1=0, select bank0
  1294     0530  0850               	movf	_randx+3,w
  1295     0531  00A3               	movwf	___lmul@multiplier+3
  1296     0532  084F               	movf	_randx+2,w
  1297     0533  00A2               	movwf	___lmul@multiplier+2
  1298     0534  084E               	movf	_randx+1,w
  1299     0535  00A1               	movwf	___lmul@multiplier+1
  1300     0536  084D               	movf	_randx,w
  1301     0537  00A0               	movwf	___lmul@multiplier
  1302     0538  3041               	movlw	65
  1303     0539  00A7               	movwf	___lmul@multiplicand+3
  1304     053A  30C6               	movlw	198
  1305     053B  00A6               	movwf	___lmul@multiplicand+2
  1306     053C  304E               	movlw	78
  1307     053D  00A5               	movwf	___lmul@multiplicand+1
  1308     053E  306D               	movlw	109
  1309     053F  00A4               	movwf	___lmul@multiplicand
  1310     0540  120A  118A  24E6  120A  118A  	fcall	___lmul
  1311     0545  1283               	bcf	3,5	;RP0=0, select bank0
  1312     0546  1303               	bcf	3,6	;RP1=0, select bank0
  1313     0547  0823               	movf	?___lmul+3,w
  1314     0548  00D0               	movwf	_randx+3
  1315     0549  0822               	movf	?___lmul+2,w
  1316     054A  00CF               	movwf	_randx+2
  1317     054B  0821               	movf	?___lmul+1,w
  1318     054C  00CE               	movwf	_randx+1
  1319     054D  0820               	movf	?___lmul,w
  1320     054E  00CD               	movwf	_randx
  1321     054F                     l1701:
  1322     054F  3039               	movlw	57
  1323     0550  07CD               	addwf	_randx,f
  1324     0551  3030               	movlw	48
  1325     0552  1803               	skipnc
  1326     0553  3031               	movlw	49
  1327     0554  07CE               	addwf	_randx+1,f
  1328     0555  3000               	movlw	0
  1329     0556  1803               	skipnc
  1330     0557  3001               	movlw	1
  1331     0558  07CF               	addwf	_randx+2,f
  1332     0559  3000               	movlw	0
  1333     055A  1803               	skipnc
  1334     055B  3001               	movlw	1
  1335     055C  07D0               	addwf	_randx+3,f
  1336     055D                     l1703:
  1337     055D  084D               	movf	_randx,w
  1338     055E  00AE               	movwf	??_rand
  1339     055F  084E               	movf	_randx+1,w
  1340     0560  00AF               	movwf	??_rand+1
  1341     0561  084F               	movf	_randx+2,w
  1342     0562  00B0               	movwf	??_rand+2
  1343     0563  0850               	movf	_randx+3,w
  1344     0564  00B1               	movwf	??_rand+3
  1345     0565  3010               	movlw	16
  1346     0566  00B2               	movwf	??_rand+4
  1347     0567                     u1395:
  1348     0567  0D31               	rlf	??_rand+3,w
  1349     0568  0CB1               	rrf	??_rand+3,f
  1350     0569  0CB0               	rrf	??_rand+2,f
  1351     056A  0CAF               	rrf	??_rand+1,f
  1352     056B  0CAE               	rrf	??_rand,f
  1353     056C                     u1390:
  1354     056C  0BB2               	decfsz	??_rand+4,f
  1355     056D  2D67               	goto	u1395
  1356     056E  30FF               	movlw	255
  1357     056F  052E               	andwf	??_rand,w
  1358     0570  00AC               	movwf	?_rand
  1359     0571  307F               	movlw	127
  1360     0572  052F               	andwf	??_rand+1,w
  1361     0573  00AD               	movwf	?_rand+1
  1362     0574                     l733:
  1363     0574  0008               	return
  1364     0575                     __end_of_rand:
  1365                           
  1366                           	psect	text4
  1367     03E8                     __ptext4:	
  1368 ;; *************** function ___awmod *****************
  1369 ;; Defined at:
  1370 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  divisor         2   19[BANK0 ] int 
  1373 ;;  dividend        2   21[BANK0 ] int 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  sign            1   24[BANK0 ] unsigned char 
  1376 ;;  counter         1   23[BANK0 ] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  2   19[BANK0 ] int 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2, status,0
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1386 ;;      Params:         0       4       0       0       0
  1387 ;;      Locals:         0       2       0       0       0
  1388 ;;      Temps:          1       0       0       0       0
  1389 ;;      Totals:         1       6       0       0       0
  1390 ;;Total ram usage:        7 bytes
  1391 ;; Hardware stack levels used: 1
  1392 ;; Hardware stack levels required when called: 1
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_read_NumPad
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400     03E8                     ___awmod:	
  1401                           ;psect for function ___awmod
  1402                           
  1403     03E8                     l1417:	
  1404                           ;incstack = 0
  1405                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1406                           
  1407     03E8  1283               	bcf	3,5	;RP0=0, select bank0
  1408     03E9  1303               	bcf	3,6	;RP1=0, select bank0
  1409     03EA  01B8               	clrf	___awmod@sign
  1410     03EB                     l1419:
  1411     03EB  1FB6               	btfss	___awmod@dividend+1,7
  1412     03EC  2BEE               	goto	u1001
  1413     03ED  2BEF               	goto	u1000
  1414     03EE                     u1001:
  1415     03EE  2BF6               	goto	l1425
  1416     03EF                     u1000:
  1417     03EF                     l1421:
  1418     03EF  09B5               	comf	___awmod@dividend,f
  1419     03F0  09B6               	comf	___awmod@dividend+1,f
  1420     03F1  0AB5               	incf	___awmod@dividend,f
  1421     03F2  1903               	skipnz
  1422     03F3  0AB6               	incf	___awmod@dividend+1,f
  1423     03F4                     l1423:
  1424     03F4  01B8               	clrf	___awmod@sign
  1425     03F5  0AB8               	incf	___awmod@sign,f
  1426     03F6                     l1425:
  1427     03F6  1FB4               	btfss	___awmod@divisor+1,7
  1428     03F7  2BF9               	goto	u1011
  1429     03F8  2BFA               	goto	u1010
  1430     03F9                     u1011:
  1431     03F9  2BFF               	goto	l1429
  1432     03FA                     u1010:
  1433     03FA                     l1427:
  1434     03FA  09B3               	comf	___awmod@divisor,f
  1435     03FB  09B4               	comf	___awmod@divisor+1,f
  1436     03FC  0AB3               	incf	___awmod@divisor,f
  1437     03FD  1903               	skipnz
  1438     03FE  0AB4               	incf	___awmod@divisor+1,f
  1439     03FF                     l1429:
  1440     03FF  0833               	movf	___awmod@divisor,w
  1441     0400  0434               	iorwf	___awmod@divisor+1,w
  1442     0401  1903               	btfsc	3,2
  1443     0402  2C04               	goto	u1021
  1444     0403  2C05               	goto	u1020
  1445     0404                     u1021:
  1446     0404  2C34               	goto	l1447
  1447     0405                     u1020:
  1448     0405                     l1431:
  1449     0405  01B7               	clrf	___awmod@counter
  1450     0406  0AB7               	incf	___awmod@counter,f
  1451     0407  2C13               	goto	l1437
  1452     0408                     l1433:
  1453     0408  3001               	movlw	1
  1454     0409                     u1035:
  1455     0409  1003               	clrc
  1456     040A  0DB3               	rlf	___awmod@divisor,f
  1457     040B  0DB4               	rlf	___awmod@divisor+1,f
  1458     040C  3EFF               	addlw	-1
  1459     040D  1D03               	skipz
  1460     040E  2C09               	goto	u1035
  1461     040F                     l1435:
  1462     040F  3001               	movlw	1
  1463     0410  00F5               	movwf	??___awmod
  1464     0411  0875               	movf	??___awmod,w
  1465     0412  07B7               	addwf	___awmod@counter,f
  1466     0413                     l1437:
  1467     0413  1FB4               	btfss	___awmod@divisor+1,7
  1468     0414  2C16               	goto	u1041
  1469     0415  2C17               	goto	u1040
  1470     0416                     u1041:
  1471     0416  2C08               	goto	l1433
  1472     0417                     u1040:
  1473     0417                     l1439:
  1474     0417  0834               	movf	___awmod@divisor+1,w
  1475     0418  0236               	subwf	___awmod@dividend+1,w
  1476     0419  1D03               	skipz
  1477     041A  2C1D               	goto	u1055
  1478     041B  0833               	movf	___awmod@divisor,w
  1479     041C  0235               	subwf	___awmod@dividend,w
  1480     041D                     u1055:
  1481     041D  1C03               	skipc
  1482     041E  2C20               	goto	u1051
  1483     041F  2C21               	goto	u1050
  1484     0420                     u1051:
  1485     0420  2C27               	goto	l1443
  1486     0421                     u1050:
  1487     0421                     l1441:
  1488     0421  0833               	movf	___awmod@divisor,w
  1489     0422  02B5               	subwf	___awmod@dividend,f
  1490     0423  0834               	movf	___awmod@divisor+1,w
  1491     0424  1C03               	skipc
  1492     0425  03B6               	decf	___awmod@dividend+1,f
  1493     0426  02B6               	subwf	___awmod@dividend+1,f
  1494     0427                     l1443:
  1495     0427  3001               	movlw	1
  1496     0428                     u1065:
  1497     0428  1003               	clrc
  1498     0429  0CB4               	rrf	___awmod@divisor+1,f
  1499     042A  0CB3               	rrf	___awmod@divisor,f
  1500     042B  3EFF               	addlw	-1
  1501     042C  1D03               	skipz
  1502     042D  2C28               	goto	u1065
  1503     042E                     l1445:
  1504     042E  3001               	movlw	1
  1505     042F  02B7               	subwf	___awmod@counter,f
  1506     0430  1D03               	btfss	3,2
  1507     0431  2C33               	goto	u1071
  1508     0432  2C34               	goto	u1070
  1509     0433                     u1071:
  1510     0433  2C17               	goto	l1439
  1511     0434                     u1070:
  1512     0434                     l1447:
  1513     0434  0838               	movf	___awmod@sign,w
  1514     0435  1903               	btfsc	3,2
  1515     0436  2C38               	goto	u1081
  1516     0437  2C39               	goto	u1080
  1517     0438                     u1081:
  1518     0438  2C3E               	goto	l1451
  1519     0439                     u1080:
  1520     0439                     l1449:
  1521     0439  09B5               	comf	___awmod@dividend,f
  1522     043A  09B6               	comf	___awmod@dividend+1,f
  1523     043B  0AB5               	incf	___awmod@dividend,f
  1524     043C  1903               	skipnz
  1525     043D  0AB6               	incf	___awmod@dividend+1,f
  1526     043E                     l1451:
  1527     043E  0836               	movf	___awmod@dividend+1,w
  1528     043F  00B4               	movwf	?___awmod+1
  1529     0440  0835               	movf	___awmod@dividend,w
  1530     0441  00B3               	movwf	?___awmod
  1531     0442                     l443:
  1532     0442  0008               	return
  1533     0443                     __end_of___awmod:
  1534                           
  1535                           	psect	text5
  1536     05BB                     __ptext5:	
  1537 ;; *************** function _lcdPrint *****************
  1538 ;; Defined at:
  1539 ;;		line 198 in file "main.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  str             2    2[BANK0 ] PTR unsigned char 
  1542 ;;		 -> dato(50), main@num_rand_s(16), 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  n               2    7[BANK0 ] int 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1554 ;;      Params:         0       2       0       0       0
  1555 ;;      Locals:         0       2       0       0       0
  1556 ;;      Temps:          0       3       0       0       0
  1557 ;;      Totals:         0       7       0       0       0
  1558 ;;Total ram usage:        7 bytes
  1559 ;; Hardware stack levels used: 1
  1560 ;; Hardware stack levels required when called: 2
  1561 ;; This function calls:
  1562 ;;		_lcdSend
  1563 ;; This function is called by:
  1564 ;;		_main
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568     05BB                     _lcdPrint:	
  1569                           ;psect for function _lcdPrint
  1570                           
  1571     05BB                     l1823:	
  1572                           ;incstack = 0
  1573                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1574                           
  1575                           
  1576                           ;main.c: 198: void lcdPrint(char *str);main.c: 199: {;main.c: 200:     int n = 0;
  1577     05BB  1283               	bcf	3,5	;RP0=0, select bank0
  1578     05BC  1303               	bcf	3,6	;RP1=0, select bank0
  1579     05BD  01A7               	clrf	lcdPrint@n
  1580     05BE  01A8               	clrf	lcdPrint@n+1
  1581                           
  1582                           ;main.c: 202:     while(str[n] != '\0')
  1583     05BF  2DE3               	goto	l1829
  1584     05C0                     l1825:
  1585                           
  1586                           ;main.c: 203:     {;main.c: 205:         lcdSend(str[n++], 1);
  1587     05C0  01F4               	clrf	lcdSend@tipo
  1588     05C1  0AF4               	incf	lcdSend@tipo,f
  1589     05C2  0827               	movf	lcdPrint@n,w
  1590     05C3  0722               	addwf	lcdPrint@str,w
  1591     05C4  00A5               	movwf	??_lcdPrint+1
  1592     05C5  0823               	movf	lcdPrint@str+1,w
  1593     05C6  00A4               	movwf	??_lcdPrint
  1594     05C7  1803               	skipnc
  1595     05C8  0AA4               	incf	??_lcdPrint,f
  1596     05C9  1FA7               	btfss	lcdPrint@n,7
  1597     05CA  2DCC               	goto	u1610
  1598     05CB  03A4               	decf	??_lcdPrint,f
  1599     05CC                     u1610:
  1600     05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1601     05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1602     05CE  0824               	movf	??_lcdPrint,w
  1603     05CF  00A6               	movwf	??_lcdPrint+2
  1604     05D0  0825               	movf	??_lcdPrint+1,w
  1605     05D1  0084               	movwf	4
  1606     05D2  1783               	bsf	3,7
  1607     05D3  1C26               	btfss	??_lcdPrint+2,0
  1608     05D4  1383               	bcf	3,7
  1609     05D5  0800               	movf	0,w
  1610     05D6  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1611     05DB                     l1827:
  1612     05DB  3001               	movlw	1
  1613     05DC  1283               	bcf	3,5	;RP0=0, select bank0
  1614     05DD  1303               	bcf	3,6	;RP1=0, select bank0
  1615     05DE  07A7               	addwf	lcdPrint@n,f
  1616     05DF  1803               	skipnc
  1617     05E0  0AA8               	incf	lcdPrint@n+1,f
  1618     05E1  3000               	movlw	0
  1619     05E2  07A8               	addwf	lcdPrint@n+1,f
  1620     05E3                     l1829:
  1621                           
  1622                           ;main.c: 202:     while(str[n] != '\0')
  1623     05E3  0827               	movf	lcdPrint@n,w
  1624     05E4  0722               	addwf	lcdPrint@str,w
  1625     05E5  00A5               	movwf	??_lcdPrint+1
  1626     05E6  0823               	movf	lcdPrint@str+1,w
  1627     05E7  00A4               	movwf	??_lcdPrint
  1628     05E8  1803               	skipnc
  1629     05E9  0AA4               	incf	??_lcdPrint,f
  1630     05EA  1FA7               	btfss	lcdPrint@n,7
  1631     05EB  2DED               	goto	u1620
  1632     05EC  03A4               	decf	??_lcdPrint,f
  1633     05ED                     u1620:
  1634     05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1635     05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1636     05EF  0824               	movf	??_lcdPrint,w
  1637     05F0  00A6               	movwf	??_lcdPrint+2
  1638     05F1  0825               	movf	??_lcdPrint+1,w
  1639     05F2  0084               	movwf	4
  1640     05F3  1783               	bsf	3,7
  1641     05F4  1C26               	btfss	??_lcdPrint+2,0
  1642     05F5  1383               	bcf	3,7
  1643     05F6  0800               	movf	0,w
  1644     05F7  1D03               	btfss	3,2
  1645     05F8  2DFA               	goto	u1631
  1646     05F9  2DFB               	goto	u1630
  1647     05FA                     u1631:
  1648     05FA  2DC0               	goto	l1825
  1649     05FB                     u1630:
  1650     05FB                     l122:
  1651     05FB  0008               	return
  1652     05FC                     __end_of_lcdPrint:
  1653                           
  1654                           	psect	text6
  1655     0719                     __ptext6:	
  1656 ;; *************** function _init_PIC *****************
  1657 ;; Defined at:
  1658 ;;		line 142 in file "main.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0, pclath, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1672 ;;      Params:         0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0
  1674 ;;      Temps:          0       0       0       0       0
  1675 ;;      Totals:         0       0       0       0       0
  1676 ;;Total ram usage:        0 bytes
  1677 ;; Hardware stack levels used: 1
  1678 ;; Hardware stack levels required when called: 3
  1679 ;; This function calls:
  1680 ;;		_UART_init
  1681 ;;		_init_LCD
  1682 ;;		_init_NumPad
  1683 ;;		_init_Timer0
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689     0719                     _init_PIC:	
  1690                           ;psect for function _init_PIC
  1691                           
  1692     0719                     l1745:	
  1693                           ;incstack = 0
  1694                           ; Regs used in _init_PIC: [wreg+status,2+status,0+pclath+cstack]
  1695                           
  1696                           
  1697                           ;main.c: 144:     UART_init(115200);
  1698     0719  3000               	movlw	0
  1699     071A  1283               	bcf	3,5	;RP0=0, select bank0
  1700     071B  1303               	bcf	3,6	;RP1=0, select bank0
  1701     071C  00BF               	movwf	UART_init@baudrate+3
  1702     071D  3001               	movlw	1
  1703     071E  00BE               	movwf	UART_init@baudrate+2
  1704     071F  30C2               	movlw	194
  1705     0720  00BD               	movwf	UART_init@baudrate+1
  1706     0721  3000               	movlw	0
  1707     0722  00BC               	movwf	UART_init@baudrate
  1708     0723  120A  118A  2575  120A  118A  	fcall	_UART_init
  1709                           
  1710                           ;main.c: 145:     init_LCD();
  1711     0728  120A  118A  2443  120A  118A  	fcall	_init_LCD
  1712                           
  1713                           ;main.c: 146:     init_NumPad();
  1714     072D  120A  118A  275B  120A  118A  	fcall	_init_NumPad
  1715                           
  1716                           ;main.c: 148:     init_Timer0();
  1717     0732  120A  118A  2738  120A  118A  	fcall	_init_Timer0
  1718     0737                     l107:
  1719     0737  0008               	return
  1720     0738                     __end_of_init_PIC:
  1721                           
  1722                           	psect	text7
  1723     0738                     __ptext7:	
  1724 ;; *************** function _init_Timer0 *****************
  1725 ;; Defined at:
  1726 ;;		line 151 in file "main.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		wreg, status,2, status,0
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1740 ;;      Params:         0       0       0       0       0
  1741 ;;      Locals:         0       0       0       0       0
  1742 ;;      Temps:          1       0       0       0       0
  1743 ;;      Totals:         1       0       0       0       0
  1744 ;;Total ram usage:        1 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; Hardware stack levels required when called: 1
  1747 ;; This function calls:
  1748 ;;		Nothing
  1749 ;; This function is called by:
  1750 ;;		_init_PIC
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754     0738                     _init_Timer0:	
  1755                           ;psect for function _init_Timer0
  1756                           
  1757     0738                     l1331:	
  1758                           ;incstack = 0
  1759                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  1760                           
  1761                           
  1762                           ;main.c: 154:     INTCON |= 0xA0;
  1763     0738  30A0               	movlw	160
  1764     0739  00F4               	movwf	??_init_Timer0
  1765     073A  0874               	movf	??_init_Timer0,w
  1766     073B  048B               	iorwf	11,f	;volatile
  1767     073C                     l1333:
  1768                           
  1769                           ;main.c: 155:     OPTION_REG = 0x06;
  1770     073C  3006               	movlw	6
  1771     073D  1683               	bsf	3,5	;RP0=1, select bank1
  1772     073E  1303               	bcf	3,6	;RP1=0, select bank1
  1773     073F  0081               	movwf	1	;volatile
  1774     0740                     l1335:
  1775                           
  1776                           ;main.c: 156:     TMR0 = 131;
  1777     0740  3083               	movlw	131
  1778     0741  1283               	bcf	3,5	;RP0=0, select bank0
  1779     0742  1303               	bcf	3,6	;RP1=0, select bank0
  1780     0743  0081               	movwf	1	;volatile
  1781     0744                     l1337:
  1782                           
  1783                           ;main.c: 157:     milliseconds = 0;
  1784     0744  3000               	movlw	0
  1785     0745  00CC               	movwf	_milliseconds+3
  1786     0746  3000               	movlw	0
  1787     0747  00CB               	movwf	_milliseconds+2
  1788     0748  3000               	movlw	0
  1789     0749  00CA               	movwf	_milliseconds+1
  1790     074A  3000               	movlw	0
  1791     074B  00C9               	movwf	_milliseconds
  1792     074C                     l110:
  1793     074C  0008               	return
  1794     074D                     __end_of_init_Timer0:
  1795                           
  1796                           	psect	text8
  1797     075B                     __ptext8:	
  1798 ;; *************** function _init_NumPad *****************
  1799 ;; Defined at:
  1800 ;;		line 319 in file "main.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;		None
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1814 ;;      Params:         0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0
  1816 ;;      Temps:          1       0       0       0       0
  1817 ;;      Totals:         1       0       0       0       0
  1818 ;;Total ram usage:        1 bytes
  1819 ;; Hardware stack levels used: 1
  1820 ;; Hardware stack levels required when called: 1
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_init_PIC
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828     075B                     _init_NumPad:	
  1829                           ;psect for function _init_NumPad
  1830                           
  1831     075B                     l1329:	
  1832                           ;incstack = 0
  1833                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  1834                           
  1835                           
  1836                           ;main.c: 321:     TRISD |= 0x0F;
  1837     075B  300F               	movlw	15
  1838     075C  00F4               	movwf	??_init_NumPad
  1839     075D  0874               	movf	??_init_NumPad,w
  1840     075E  1683               	bsf	3,5	;RP0=1, select bank1
  1841     075F  1303               	bcf	3,6	;RP1=0, select bank1
  1842     0760  0488               	iorwf	8,f	;volatile
  1843                           
  1844                           ;main.c: 322:     TRISB &= 0xF0;
  1845     0761  30F0               	movlw	240
  1846     0762  00F4               	movwf	??_init_NumPad
  1847     0763  0874               	movf	??_init_NumPad,w
  1848     0764  0586               	andwf	6,f	;volatile
  1849     0765                     l155:
  1850     0765  0008               	return
  1851     0766                     __end_of_init_NumPad:
  1852                           
  1853                           	psect	text9
  1854     0443                     __ptext9:	
  1855 ;; *************** function _init_LCD *****************
  1856 ;; Defined at:
  1857 ;;		line 160 in file "main.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;                  1    wreg      void 
  1864 ;; Registers used:
  1865 ;;		wreg, status,2, status,0, pclath, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1871 ;;      Params:         0       0       0       0       0
  1872 ;;      Locals:         0       0       0       0       0
  1873 ;;      Temps:          0       2       0       0       0
  1874 ;;      Totals:         0       2       0       0       0
  1875 ;;Total ram usage:        2 bytes
  1876 ;; Hardware stack levels used: 1
  1877 ;; Hardware stack levels required when called: 2
  1878 ;; This function calls:
  1879 ;;		_lcdSend
  1880 ;; This function is called by:
  1881 ;;		_init_PIC
  1882 ;; This function uses a non-reentrant model
  1883 ;;
  1884                           
  1885     0443                     _init_LCD:	
  1886                           ;psect for function _init_LCD
  1887                           
  1888     0443                     l1663:	
  1889                           ;incstack = 0
  1890                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  1891                           
  1892                           
  1893                           ;main.c: 164:     PORTEbits.RE2 = 0;
  1894     0443  1283               	bcf	3,5	;RP0=0, select bank0
  1895     0444  1303               	bcf	3,6	;RP1=0, select bank0
  1896     0445  1109               	bcf	9,2	;volatile
  1897                           
  1898                           ;main.c: 165:     PORTEbits.RE1 = 0;
  1899     0446  1089               	bcf	9,1	;volatile
  1900     0447                     l1665:
  1901                           
  1902                           ;main.c: 166:     _delay((unsigned long)((20)*(20000000/4000.0)));
  1903     0447  3082               	movlw	130
  1904     0448  1283               	bcf	3,5	;RP0=0, select bank0
  1905     0449  1303               	bcf	3,6	;RP1=0, select bank0
  1906     044A  00A3               	movwf	??_init_LCD+1
  1907     044B  30DD               	movlw	221
  1908     044C  00A2               	movwf	??_init_LCD
  1909     044D                     u1697:
  1910     044D  0BA2               	decfsz	??_init_LCD,f
  1911     044E  2C4D               	goto	u1697
  1912     044F  0BA3               	decfsz	??_init_LCD+1,f
  1913     0450  2C4D               	goto	u1697
  1914     0451                     l1667:
  1915                           
  1916                           ;main.c: 167:     PORTEbits.RE1 = 1;
  1917     0451  1283               	bcf	3,5	;RP0=0, select bank0
  1918     0452  1303               	bcf	3,6	;RP1=0, select bank0
  1919     0453  1489               	bsf	9,1	;volatile
  1920     0454                     l1669:
  1921                           
  1922                           ;main.c: 169:     lcdSend(0x38, 0);
  1923     0454  01F4               	clrf	lcdSend@tipo
  1924     0455  3038               	movlw	56
  1925     0456  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1926     045B                     l1671:
  1927                           
  1928                           ;main.c: 170:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1929     045B  3021               	movlw	33
  1930     045C  1283               	bcf	3,5	;RP0=0, select bank0
  1931     045D  1303               	bcf	3,6	;RP1=0, select bank0
  1932     045E  00A3               	movwf	??_init_LCD+1
  1933     045F  3075               	movlw	117
  1934     0460  00A2               	movwf	??_init_LCD
  1935     0461                     u1707:
  1936     0461  0BA2               	decfsz	??_init_LCD,f
  1937     0462  2C61               	goto	u1707
  1938     0463  0BA3               	decfsz	??_init_LCD+1,f
  1939     0464  2C61               	goto	u1707
  1940     0465  2C66               	nop2
  1941                           
  1942                           ;main.c: 171:     lcdSend(0x38, 0);
  1943     0466  01F4               	clrf	lcdSend@tipo
  1944     0467  3038               	movlw	56
  1945     0468  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1946     046D                     l1673:
  1947                           
  1948                           ;main.c: 172:     _delay((unsigned long)((1)*(20000000/4000.0)));
  1949     046D  3007               	movlw	7
  1950     046E  1283               	bcf	3,5	;RP0=0, select bank0
  1951     046F  1303               	bcf	3,6	;RP1=0, select bank0
  1952     0470  00A3               	movwf	??_init_LCD+1
  1953     0471  307C               	movlw	124
  1954     0472  00A2               	movwf	??_init_LCD
  1955     0473                     u1717:
  1956     0473  0BA2               	decfsz	??_init_LCD,f
  1957     0474  2C73               	goto	u1717
  1958     0475  0BA3               	decfsz	??_init_LCD+1,f
  1959     0476  2C73               	goto	u1717
  1960     0477  0000               	nop
  1961     0478                     l1675:
  1962                           
  1963                           ;main.c: 173:     lcdSend(0x38, 0);
  1964     0478  01F4               	clrf	lcdSend@tipo
  1965     0479  3038               	movlw	56
  1966     047A  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1967     047F                     l1677:
  1968                           
  1969                           ;main.c: 174:     lcdSend(0x08, 0);
  1970     047F  01F4               	clrf	lcdSend@tipo
  1971     0480  3008               	movlw	8
  1972     0481  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1973     0486                     l1679:
  1974                           
  1975                           ;main.c: 175:     lcdSend(0x0F, 0);
  1976     0486  01F4               	clrf	lcdSend@tipo
  1977     0487  300F               	movlw	15
  1978     0488  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1979     048D                     l1681:
  1980                           
  1981                           ;main.c: 176:     lcdSend(0x01, 0);
  1982     048D  01F4               	clrf	lcdSend@tipo
  1983     048E  3001               	movlw	1
  1984     048F  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1985     0494                     l1683:
  1986                           
  1987                           ;main.c: 178:     lcdSend(0x0C, 0);
  1988     0494  01F4               	clrf	lcdSend@tipo
  1989     0495  300C               	movlw	12
  1990     0496  120A  118A  26A2  120A  118A  	fcall	_lcdSend
  1991     049B                     l113:
  1992     049B  0008               	return
  1993     049C                     __end_of_init_LCD:
  1994                           
  1995                           	psect	text10
  1996     06A2                     __ptext10:	
  1997 ;; *************** function _lcdSend *****************
  1998 ;; Defined at:
  1999 ;;		line 181 in file "main.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  dato            1    wreg     unsigned char 
  2002 ;;  tipo            1    4[COMMON] unsigned char 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  dato            1    5[COMMON] unsigned char 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2014 ;;      Params:         1       0       0       0       0
  2015 ;;      Locals:         1       0       0       0       0
  2016 ;;      Temps:          0       2       0       0       0
  2017 ;;      Totals:         2       2       0       0       0
  2018 ;;Total ram usage:        4 bytes
  2019 ;; Hardware stack levels used: 1
  2020 ;; Hardware stack levels required when called: 1
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;;		_init_LCD
  2026 ;;		_lcdPrint
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030     06A2                     _lcdSend:	
  2031                           ;psect for function _lcdSend
  2032                           
  2033                           
  2034                           ;incstack = 0
  2035                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  2036                           ;lcdSend@dato stored from wreg
  2037     06A2  00F5               	movwf	lcdSend@dato
  2038     06A3                     l1615:
  2039                           
  2040                           ;main.c: 181: void lcdSend(char dato, char tipo);main.c: 182: {;main.c: 185:     TRISD =
      +                           0x00;
  2041     06A3  1683               	bsf	3,5	;RP0=1, select bank1
  2042     06A4  1303               	bcf	3,6	;RP1=0, select bank1
  2043     06A5  0188               	clrf	8	;volatile
  2044     06A6                     l1617:
  2045                           
  2046                           ;main.c: 186:     TRISEbits.TRISE1 = 0;
  2047     06A6  1089               	bcf	9,1	;volatile
  2048     06A7                     l1619:
  2049                           
  2050                           ;main.c: 187:     TRISEbits.TRISE2 = 0;
  2051     06A7  1109               	bcf	9,2	;volatile
  2052     06A8                     l1621:
  2053                           
  2054                           ;main.c: 189:     PORTEbits.RE1 = 1;
  2055     06A8  1283               	bcf	3,5	;RP0=0, select bank0
  2056     06A9  1303               	bcf	3,6	;RP1=0, select bank0
  2057     06AA  1489               	bsf	9,1	;volatile
  2058     06AB                     l1623:
  2059                           
  2060                           ;main.c: 190:     PORTD = dato;
  2061     06AB  0875               	movf	lcdSend@dato,w
  2062     06AC  0088               	movwf	8	;volatile
  2063     06AD                     l1625:
  2064                           
  2065                           ;main.c: 191:     PORTEbits.RE2 = tipo;
  2066     06AD  0C74               	rrf	lcdSend@tipo,w
  2067     06AE  1C03               	skipc
  2068     06AF  1109               	bcf	9,2	;volatile
  2069     06B0  1803               	skipnc
  2070     06B1  1509               	bsf	9,2	;volatile
  2071     06B2                     l1627:
  2072                           
  2073                           ;main.c: 192:     _delay((unsigned long)((3)*(20000000/4000.0)));
  2074     06B2  3014               	movlw	20
  2075     06B3  1283               	bcf	3,5	;RP0=0, select bank0
  2076     06B4  1303               	bcf	3,6	;RP1=0, select bank0
  2077     06B5  00A1               	movwf	??_lcdSend+1
  2078     06B6  3079               	movlw	121
  2079     06B7  00A0               	movwf	??_lcdSend
  2080     06B8                     u1727:
  2081     06B8  0BA0               	decfsz	??_lcdSend,f
  2082     06B9  2EB8               	goto	u1727
  2083     06BA  0BA1               	decfsz	??_lcdSend+1,f
  2084     06BB  2EB8               	goto	u1727
  2085     06BC                     l1629:
  2086                           
  2087                           ;main.c: 193:     PORTEbits.RE1 = 0;
  2088     06BC  1283               	bcf	3,5	;RP0=0, select bank0
  2089     06BD  1303               	bcf	3,6	;RP1=0, select bank0
  2090     06BE  1089               	bcf	9,1	;volatile
  2091     06BF                     l1631:
  2092                           
  2093                           ;main.c: 194:     _delay((unsigned long)((3)*(20000000/4000.0)));
  2094     06BF  3014               	movlw	20
  2095     06C0  1283               	bcf	3,5	;RP0=0, select bank0
  2096     06C1  1303               	bcf	3,6	;RP1=0, select bank0
  2097     06C2  00A1               	movwf	??_lcdSend+1
  2098     06C3  3079               	movlw	121
  2099     06C4  00A0               	movwf	??_lcdSend
  2100     06C5                     u1737:
  2101     06C5  0BA0               	decfsz	??_lcdSend,f
  2102     06C6  2EC5               	goto	u1737
  2103     06C7  0BA1               	decfsz	??_lcdSend+1,f
  2104     06C8  2EC5               	goto	u1737
  2105     06C9                     l1633:
  2106                           
  2107                           ;main.c: 195:     PORTEbits.RE1 = 1;
  2108     06C9  1283               	bcf	3,5	;RP0=0, select bank0
  2109     06CA  1303               	bcf	3,6	;RP1=0, select bank0
  2110     06CB  1489               	bsf	9,1	;volatile
  2111     06CC                     l116:
  2112     06CC  0008               	return
  2113     06CD                     __end_of_lcdSend:
  2114                           
  2115                           	psect	text11
  2116     0575                     __ptext11:	
  2117 ;; *************** function _UART_init *****************
  2118 ;; Defined at:
  2119 ;;		line 379 in file "main.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;  baudrate        4   28[BANK0 ] long 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0, pclath, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2133 ;;      Params:         0       4       0       0       0
  2134 ;;      Locals:         0       0       0       0       0
  2135 ;;      Temps:          0       4       0       0       0
  2136 ;;      Totals:         0       8       0       0       0
  2137 ;;Total ram usage:        8 bytes
  2138 ;; Hardware stack levels used: 1
  2139 ;; Hardware stack levels required when called: 2
  2140 ;; This function calls:
  2141 ;;		___aldiv
  2142 ;; This function is called by:
  2143 ;;		_init_PIC
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147     0575                     _UART_init:	
  2148                           ;psect for function _UART_init
  2149                           
  2150     0575                     l1291:	
  2151                           ;incstack = 0
  2152                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  2153                           
  2154                           
  2155                           ;main.c: 379: void UART_init(long int baudrate);main.c: 380: {;main.c: 382:     TRISC &=
      +                           ~0x40;
  2156     0575  30BF               	movlw	191
  2157     0576  1283               	bcf	3,5	;RP0=0, select bank0
  2158     0577  1303               	bcf	3,6	;RP1=0, select bank0
  2159     0578  00C0               	movwf	??_UART_init
  2160     0579  0840               	movf	??_UART_init,w
  2161     057A  1683               	bsf	3,5	;RP0=1, select bank1
  2162     057B  1303               	bcf	3,6	;RP1=0, select bank1
  2163     057C  0587               	andwf	7,f	;volatile
  2164     057D                     l1293:
  2165                           
  2166                           ;main.c: 383:     TRISC |= 0x80;
  2167     057D  1787               	bsf	7,7	;volatile
  2168                           
  2169                           ;main.c: 384:     TXSTA |= 0x24;
  2170     057E  3024               	movlw	36
  2171     057F  1283               	bcf	3,5	;RP0=0, select bank0
  2172     0580  1303               	bcf	3,6	;RP1=0, select bank0
  2173     0581  00C0               	movwf	??_UART_init
  2174     0582  0840               	movf	??_UART_init,w
  2175     0583  1683               	bsf	3,5	;RP0=1, select bank1
  2176     0584  1303               	bcf	3,6	;RP1=0, select bank1
  2177     0585  0498               	iorwf	24,f	;volatile
  2178     0586                     l1295:
  2179                           
  2180                           ;main.c: 385:     RCSTA |= 0x80;
  2181     0586  1283               	bcf	3,5	;RP0=0, select bank0
  2182     0587  1303               	bcf	3,6	;RP1=0, select bank0
  2183     0588  1798               	bsf	24,7	;volatile
  2184     0589                     l1297:
  2185                           
  2186                           ;main.c: 386:     RCSTA |= 0x10;
  2187     0589  1618               	bsf	24,4	;volatile
  2188     058A                     l1299:
  2189                           
  2190                           ;main.c: 389:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  2191     058A  083C               	movf	UART_init@baudrate,w
  2192     058B  00C0               	movwf	??_UART_init
  2193     058C  083D               	movf	UART_init@baudrate+1,w
  2194     058D  00C1               	movwf	??_UART_init+1
  2195     058E  083E               	movf	UART_init@baudrate+2,w
  2196     058F  00C2               	movwf	??_UART_init+2
  2197     0590  083F               	movf	UART_init@baudrate+3,w
  2198     0591  00C3               	movwf	??_UART_init+3
  2199     0592  3006               	movlw	6
  2200     0593                     u835:
  2201     0593  1003               	clrc
  2202     0594  0DC0               	rlf	??_UART_init,f
  2203     0595  0DC1               	rlf	??_UART_init+1,f
  2204     0596  0DC2               	rlf	??_UART_init+2,f
  2205     0597  0DC3               	rlf	??_UART_init+3,f
  2206     0598                     u830:
  2207     0598  3EFF               	addlw	-1
  2208     0599  1D03               	skipz
  2209     059A  2D93               	goto	u835
  2210     059B  0843               	movf	??_UART_init+3,w
  2211     059C  00B0               	movwf	___aldiv@divisor+3
  2212     059D  0842               	movf	??_UART_init+2,w
  2213     059E  00AF               	movwf	___aldiv@divisor+2
  2214     059F  0841               	movf	??_UART_init+1,w
  2215     05A0  00AE               	movwf	___aldiv@divisor+1
  2216     05A1  0840               	movf	??_UART_init,w
  2217     05A2  00AD               	movwf	___aldiv@divisor
  2218     05A3  3001               	movlw	1
  2219     05A4  00B4               	movwf	___aldiv@dividend+3
  2220     05A5  3031               	movlw	49
  2221     05A6  00B3               	movwf	___aldiv@dividend+2
  2222     05A7  302D               	movlw	45
  2223     05A8  00B2               	movwf	___aldiv@dividend+1
  2224     05A9  3000               	movlw	0
  2225     05AA  00B1               	movwf	___aldiv@dividend
  2226     05AB  120A  118A  21D3  120A  118A  	fcall	___aldiv
  2227     05B0  1283               	bcf	3,5	;RP0=0, select bank0
  2228     05B1  1303               	bcf	3,6	;RP1=0, select bank0
  2229     05B2  082D               	movf	?___aldiv,w
  2230     05B3  3EFF               	addlw	255
  2231     05B4  1683               	bsf	3,5	;RP0=1, select bank1
  2232     05B5  1303               	bcf	3,6	;RP1=0, select bank1
  2233     05B6  0099               	movwf	25	;volatile
  2234     05B7                     l1301:
  2235                           
  2236                           ;main.c: 392:     INTCON |= 0x80;
  2237     05B7  178B               	bsf	11,7	;volatile
  2238     05B8                     l1303:
  2239                           
  2240                           ;main.c: 394:     INTCON |= 0x40;
  2241     05B8  170B               	bsf	11,6	;volatile
  2242     05B9                     l1305:
  2243                           
  2244                           ;main.c: 396:     PIE1 |= 0x20;
  2245     05B9  168C               	bsf	12,5	;volatile
  2246     05BA                     l172:
  2247     05BA  0008               	return
  2248     05BB                     __end_of_UART_init:
  2249                           
  2250                           	psect	text12
  2251     06F4                     __ptext12:	
  2252 ;; *************** function _UART_TxString *****************
  2253 ;; Defined at:
  2254 ;;		line 409 in file "main.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  str             1    wreg     PTR const unsigned char 
  2257 ;;		 -> main@packet(50), 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  str             1    1[BANK0 ] PTR const unsigned char 
  2260 ;;		 -> main@packet(50), 
  2261 ;;  n               2    2[BANK0 ] unsigned int 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2271 ;;      Params:         0       0       0       0       0
  2272 ;;      Locals:         0       3       0       0       0
  2273 ;;      Temps:          0       1       0       0       0
  2274 ;;      Totals:         0       4       0       0       0
  2275 ;;Total ram usage:        4 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; Hardware stack levels required when called: 2
  2278 ;; This function calls:
  2279 ;;		_UART_TxChar
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285     06F4                     _UART_TxString:	
  2286                           ;psect for function _UART_TxString
  2287                           
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2291                           ;UART_TxString@str stored from wreg
  2292     06F4  1283               	bcf	3,5	;RP0=0, select bank0
  2293     06F5  1303               	bcf	3,6	;RP1=0, select bank0
  2294     06F6  00A1               	movwf	UART_TxString@str
  2295     06F7                     l1847:
  2296                           
  2297                           ;main.c: 409: void UART_TxString(const char *str);main.c: 410: {;main.c: 411:     unsign
      +                          ed int n = 0;
  2298     06F7  01A2               	clrf	UART_TxString@n
  2299     06F8  01A3               	clrf	UART_TxString@n+1
  2300                           
  2301                           ;main.c: 413:     while(str[n] != '\0')
  2302     06F9  2F0D               	goto	l1853
  2303     06FA                     l1849:
  2304                           
  2305                           ;main.c: 414:     {;main.c: 415:         UART_TxChar(str[n]);
  2306     06FA  0822               	movf	UART_TxString@n,w
  2307     06FB  0721               	addwf	UART_TxString@str,w
  2308     06FC  00A0               	movwf	??_UART_TxString
  2309     06FD  0820               	movf	??_UART_TxString,w
  2310     06FE  0084               	movwf	4
  2311     06FF  0800               	movf	0,w
  2312     0700  120A  118A  274D  120A  118A  	fcall	_UART_TxChar
  2313     0705                     l1851:
  2314                           
  2315                           ;main.c: 416:         n++;
  2316     0705  3001               	movlw	1
  2317     0706  1283               	bcf	3,5	;RP0=0, select bank0
  2318     0707  1303               	bcf	3,6	;RP1=0, select bank0
  2319     0708  07A2               	addwf	UART_TxString@n,f
  2320     0709  1803               	skipnc
  2321     070A  0AA3               	incf	UART_TxString@n+1,f
  2322     070B  3000               	movlw	0
  2323     070C  07A3               	addwf	UART_TxString@n+1,f
  2324     070D                     l1853:
  2325                           
  2326                           ;main.c: 413:     while(str[n] != '\0')
  2327     070D  0822               	movf	UART_TxString@n,w
  2328     070E  0721               	addwf	UART_TxString@str,w
  2329     070F  00A0               	movwf	??_UART_TxString
  2330     0710  0820               	movf	??_UART_TxString,w
  2331     0711  0084               	movwf	4
  2332     0712  1383               	bcf	3,7	;select IRP bank0
  2333     0713  0800               	movf	0,w
  2334     0714  1D03               	btfss	3,2
  2335     0715  2F17               	goto	u1651
  2336     0716  2F18               	goto	u1650
  2337     0717                     u1651:
  2338     0717  2EFA               	goto	l1849
  2339     0718                     u1650:
  2340     0718                     l184:
  2341     0718  0008               	return
  2342     0719                     __end_of_UART_TxString:
  2343                           
  2344                           	psect	text13
  2345     074D                     __ptext13:	
  2346 ;; *************** function _UART_TxChar *****************
  2347 ;; Defined at:
  2348 ;;		line 399 in file "main.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  ch              1    wreg     unsigned char 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  ch              1    5[COMMON] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2362 ;;      Params:         0       0       0       0       0
  2363 ;;      Locals:         1       0       0       0       0
  2364 ;;      Temps:          1       0       0       0       0
  2365 ;;      Totals:         2       0       0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used: 1
  2368 ;; Hardware stack levels required when called: 1
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_UART_TxString
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376     074D                     _UART_TxChar:	
  2377                           ;psect for function _UART_TxChar
  2378                           
  2379                           
  2380                           ;incstack = 0
  2381                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  2382                           ;UART_TxChar@ch stored from wreg
  2383     074D  00F5               	movwf	UART_TxChar@ch
  2384     074E                     l1707:
  2385     074E                     l175:	
  2386                           ;main.c: 399: void UART_TxChar(char ch);main.c: 400: {;main.c: 402:     while(!(PIR1 & 0
      +                          x10));
  2387                           
  2388     074E  1283               	bcf	3,5	;RP0=0, select bank0
  2389     074F  1303               	bcf	3,6	;RP1=0, select bank0
  2390     0750  1E0C               	btfss	12,4	;volatile
  2391     0751  2F53               	goto	u1401
  2392     0752  2F54               	goto	u1400
  2393     0753                     u1401:
  2394     0753  2F4E               	goto	l175
  2395     0754                     u1400:
  2396     0754                     l1709:
  2397                           
  2398                           ;main.c: 404:     PIR1 &= ~0x10;
  2399     0754  30EF               	movlw	239
  2400     0755  00F4               	movwf	??_UART_TxChar
  2401     0756  0874               	movf	??_UART_TxChar,w
  2402     0757  058C               	andwf	12,f	;volatile
  2403     0758                     l1711:
  2404                           
  2405                           ;main.c: 406:     TXREG = ch;
  2406     0758  0875               	movf	UART_TxChar@ch,w
  2407     0759  0099               	movwf	25	;volatile
  2408     075A                     l178:
  2409     075A  0008               	return
  2410     075B                     __end_of_UART_TxChar:
  2411                           
  2412                           	psect	text14
  2413     004D                     __ptext14:	
  2414 ;; *************** function _ConvertToString *****************
  2415 ;; Defined at:
  2416 ;;		line 220 in file "main.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  n               4   28[BANK0 ] long 
  2419 ;;  str             1   32[BANK0 ] PTR unsigned char 
  2420 ;;		 -> main@num_rand_s(16), 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  temp            2   34[BANK0 ] int 
  2423 ;;  i               2   38[BANK0 ] int 
  2424 ;;  j               2   36[BANK0 ] int 
  2425 ;;  n_cifre         1   40[BANK0 ] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      void 
  2428 ;; Registers used:
  2429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2435 ;;      Params:         0       5       0       0       0
  2436 ;;      Locals:         0       7       0       0       0
  2437 ;;      Temps:          0       1       0       0       0
  2438 ;;      Totals:         0      13       0       0       0
  2439 ;;Total ram usage:       13 bytes
  2440 ;; Hardware stack levels used: 1
  2441 ;; Hardware stack levels required when called: 3
  2442 ;; This function calls:
  2443 ;;		___aldiv
  2444 ;;		___almod
  2445 ;;		___lmul
  2446 ;;		_pow
  2447 ;; This function is called by:
  2448 ;;		_main
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452     004D                     _ConvertToString:	
  2453                           ;psect for function _ConvertToString
  2454                           
  2455     004D                     l1793:	
  2456                           ;incstack = 0
  2457                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2458                           
  2459                           
  2460                           ;main.c: 220: void ConvertToString(long n, char* str);main.c: 221: {;main.c: 224:     in
      +                          t i = 0, j = 0;
  2461     004D  1283               	bcf	3,5	;RP0=0, select bank0
  2462     004E  1303               	bcf	3,6	;RP1=0, select bank0
  2463     004F  01C6               	clrf	ConvertToString@i
  2464     0050  01C7               	clrf	ConvertToString@i+1
  2465     0051  01C4               	clrf	ConvertToString@j
  2466     0052  01C5               	clrf	ConvertToString@j+1
  2467     0053                     l1795:
  2468                           
  2469                           ;main.c: 225:     if(n < 0)
  2470     0053  1FBF               	btfss	ConvertToString@n+3,7
  2471     0054  2856               	goto	u1581
  2472     0055  2857               	goto	u1580
  2473     0056                     u1581:
  2474     0056  287F               	goto	l1803
  2475     0057                     u1580:
  2476     0057                     l1797:
  2477                           
  2478                           ;main.c: 226:     {;main.c: 227:         i = 1;
  2479     0057  3001               	movlw	1
  2480     0058  00C6               	movwf	ConvertToString@i
  2481     0059  3000               	movlw	0
  2482     005A  00C7               	movwf	ConvertToString@i+1
  2483     005B                     l1799:
  2484                           
  2485                           ;main.c: 228:         str[0] = '-';
  2486     005B  0840               	movf	ConvertToString@str,w
  2487     005C  0084               	movwf	4
  2488     005D  302D               	movlw	45
  2489     005E  1383               	bcf	3,7	;select IRP bank0
  2490     005F  0080               	movwf	0
  2491     0060                     l1801:
  2492                           
  2493                           ;main.c: 229:         n *= -1;
  2494     0060  30FF               	movlw	255
  2495     0061  00A3               	movwf	___lmul@multiplier+3
  2496     0062  30FF               	movlw	255
  2497     0063  00A2               	movwf	___lmul@multiplier+2
  2498     0064  30FF               	movlw	255
  2499     0065  00A1               	movwf	___lmul@multiplier+1
  2500     0066  30FF               	movlw	255
  2501     0067  00A0               	movwf	___lmul@multiplier
  2502     0068  083F               	movf	ConvertToString@n+3,w
  2503     0069  00A7               	movwf	___lmul@multiplicand+3
  2504     006A  083E               	movf	ConvertToString@n+2,w
  2505     006B  00A6               	movwf	___lmul@multiplicand+2
  2506     006C  083D               	movf	ConvertToString@n+1,w
  2507     006D  00A5               	movwf	___lmul@multiplicand+1
  2508     006E  083C               	movf	ConvertToString@n,w
  2509     006F  00A4               	movwf	___lmul@multiplicand
  2510     0070  120A  118A  24E6  120A  118A  	fcall	___lmul
  2511     0075  1283               	bcf	3,5	;RP0=0, select bank0
  2512     0076  1303               	bcf	3,6	;RP1=0, select bank0
  2513     0077  0823               	movf	?___lmul+3,w
  2514     0078  00BF               	movwf	ConvertToString@n+3
  2515     0079  0822               	movf	?___lmul+2,w
  2516     007A  00BE               	movwf	ConvertToString@n+2
  2517     007B  0821               	movf	?___lmul+1,w
  2518     007C  00BD               	movwf	ConvertToString@n+1
  2519     007D  0820               	movf	?___lmul,w
  2520     007E  00BC               	movwf	ConvertToString@n
  2521     007F                     l1803:
  2522                           
  2523                           ;main.c: 232:     char n_cifre = 1;
  2524     007F  01C8               	clrf	ConvertToString@n_cifre
  2525     0080  0AC8               	incf	ConvertToString@n_cifre,f
  2526                           
  2527                           ;main.c: 234:     while(n / pow(10, n_cifre))
  2528     0081  2886               	goto	l1807
  2529     0082                     l1805:
  2530                           
  2531                           ;main.c: 235:         n_cifre++;
  2532     0082  3001               	movlw	1
  2533     0083  00C1               	movwf	??_ConvertToString
  2534     0084  0841               	movf	??_ConvertToString,w
  2535     0085  07C8               	addwf	ConvertToString@n_cifre,f
  2536     0086                     l1807:
  2537                           
  2538                           ;main.c: 234:     while(n / pow(10, n_cifre))
  2539     0086  0848               	movf	ConvertToString@n_cifre,w
  2540     0087  00A4               	movwf	pow@exp
  2541     0088  300A               	movlw	10
  2542     0089  120A  118A  2639  120A  118A  	fcall	_pow
  2543     008E  1283               	bcf	3,5	;RP0=0, select bank0
  2544     008F  1303               	bcf	3,6	;RP1=0, select bank0
  2545     0090  0824               	movf	?_pow,w
  2546     0091  00AD               	movwf	___aldiv@divisor
  2547     0092  0825               	movf	?_pow+1,w
  2548     0093  00AE               	movwf	___aldiv@divisor+1
  2549     0094  3000               	movlw	0
  2550     0095  1BAE               	btfsc	___aldiv@divisor+1,7
  2551     0096  30FF               	movlw	255
  2552     0097  00AF               	movwf	___aldiv@divisor+2
  2553     0098  00B0               	movwf	___aldiv@divisor+3
  2554     0099  083F               	movf	ConvertToString@n+3,w
  2555     009A  00B4               	movwf	___aldiv@dividend+3
  2556     009B  083E               	movf	ConvertToString@n+2,w
  2557     009C  00B3               	movwf	___aldiv@dividend+2
  2558     009D  083D               	movf	ConvertToString@n+1,w
  2559     009E  00B2               	movwf	___aldiv@dividend+1
  2560     009F  083C               	movf	ConvertToString@n,w
  2561     00A0  00B1               	movwf	___aldiv@dividend
  2562     00A1  120A  118A  21D3  120A  118A  	fcall	___aldiv
  2563     00A6  1283               	bcf	3,5	;RP0=0, select bank0
  2564     00A7  1303               	bcf	3,6	;RP1=0, select bank0
  2565     00A8  0830               	movf	?___aldiv+3,w
  2566     00A9  042F               	iorwf	?___aldiv+2,w
  2567     00AA  042E               	iorwf	?___aldiv+1,w
  2568     00AB  042D               	iorwf	?___aldiv,w
  2569     00AC  1D03               	skipz
  2570     00AD  28AF               	goto	u1591
  2571     00AE  28B0               	goto	u1590
  2572     00AF                     u1591:
  2573     00AF  2882               	goto	l1805
  2574     00B0                     u1590:
  2575     00B0  2910               	goto	l1819
  2576     00B1                     l1809:
  2577                           
  2578                           ;main.c: 238:     {;main.c: 239:         int temp = pow(10, (char)(n_cifre - 1 - j));
  2579     00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2580     00B2  1303               	bcf	3,6	;RP1=0, select bank0
  2581     00B3  0844               	movf	ConvertToString@j,w
  2582     00B4  0248               	subwf	ConvertToString@n_cifre,w
  2583     00B5  3EFF               	addlw	255
  2584     00B6  00A4               	movwf	pow@exp
  2585     00B7  300A               	movlw	10
  2586     00B8  120A  118A  2639  120A  118A  	fcall	_pow
  2587     00BD  1283               	bcf	3,5	;RP0=0, select bank0
  2588     00BE  1303               	bcf	3,6	;RP1=0, select bank0
  2589     00BF  0825               	movf	?_pow+1,w
  2590     00C0  00C3               	movwf	ConvertToString@temp+1
  2591     00C1  0824               	movf	?_pow,w
  2592     00C2  00C2               	movwf	ConvertToString@temp
  2593     00C3                     l1811:
  2594                           
  2595                           ;main.c: 241:         str[i] = (char)(n/temp) + '0';
  2596     00C3  0846               	movf	ConvertToString@i,w
  2597     00C4  0740               	addwf	ConvertToString@str,w
  2598     00C5  00C1               	movwf	??_ConvertToString
  2599     00C6  0841               	movf	??_ConvertToString,w
  2600     00C7  0084               	movwf	4
  2601     00C8  0842               	movf	ConvertToString@temp,w
  2602     00C9  00AD               	movwf	___aldiv@divisor
  2603     00CA  0843               	movf	ConvertToString@temp+1,w
  2604     00CB  00AE               	movwf	___aldiv@divisor+1
  2605     00CC  3000               	movlw	0
  2606     00CD  1BAE               	btfsc	___aldiv@divisor+1,7
  2607     00CE  30FF               	movlw	255
  2608     00CF  00AF               	movwf	___aldiv@divisor+2
  2609     00D0  00B0               	movwf	___aldiv@divisor+3
  2610     00D1  083F               	movf	ConvertToString@n+3,w
  2611     00D2  00B4               	movwf	___aldiv@dividend+3
  2612     00D3  083E               	movf	ConvertToString@n+2,w
  2613     00D4  00B3               	movwf	___aldiv@dividend+2
  2614     00D5  083D               	movf	ConvertToString@n+1,w
  2615     00D6  00B2               	movwf	___aldiv@dividend+1
  2616     00D7  083C               	movf	ConvertToString@n,w
  2617     00D8  00B1               	movwf	___aldiv@dividend
  2618     00D9  120A  118A  21D3  120A  118A  	fcall	___aldiv
  2619     00DE  1283               	bcf	3,5	;RP0=0, select bank0
  2620     00DF  1303               	bcf	3,6	;RP1=0, select bank0
  2621     00E0  082D               	movf	?___aldiv,w
  2622     00E1  3E30               	addlw	48
  2623     00E2  1383               	bcf	3,7	;select IRP bank0
  2624     00E3  0080               	movwf	0
  2625     00E4                     l1813:
  2626                           
  2627                           ;main.c: 243:         n = n % temp;
  2628     00E4  0842               	movf	ConvertToString@temp,w
  2629     00E5  00A0               	movwf	___almod@divisor
  2630     00E6  0843               	movf	ConvertToString@temp+1,w
  2631     00E7  00A1               	movwf	___almod@divisor+1
  2632     00E8  3000               	movlw	0
  2633     00E9  1BA1               	btfsc	___almod@divisor+1,7
  2634     00EA  30FF               	movlw	255
  2635     00EB  00A2               	movwf	___almod@divisor+2
  2636     00EC  00A3               	movwf	___almod@divisor+3
  2637     00ED  083F               	movf	ConvertToString@n+3,w
  2638     00EE  00A7               	movwf	___almod@dividend+3
  2639     00EF  083E               	movf	ConvertToString@n+2,w
  2640     00F0  00A6               	movwf	___almod@dividend+2
  2641     00F1  083D               	movf	ConvertToString@n+1,w
  2642     00F2  00A5               	movwf	___almod@dividend+1
  2643     00F3  083C               	movf	ConvertToString@n,w
  2644     00F4  00A4               	movwf	___almod@dividend
  2645     00F5  120A  118A  22FA  120A  118A  	fcall	___almod
  2646     00FA  1283               	bcf	3,5	;RP0=0, select bank0
  2647     00FB  1303               	bcf	3,6	;RP1=0, select bank0
  2648     00FC  0823               	movf	?___almod+3,w
  2649     00FD  00BF               	movwf	ConvertToString@n+3
  2650     00FE  0822               	movf	?___almod+2,w
  2651     00FF  00BE               	movwf	ConvertToString@n+2
  2652     0100  0821               	movf	?___almod+1,w
  2653     0101  00BD               	movwf	ConvertToString@n+1
  2654     0102  0820               	movf	?___almod,w
  2655     0103  00BC               	movwf	ConvertToString@n
  2656     0104                     l1815:
  2657                           
  2658                           ;main.c: 244:         i++;
  2659     0104  3001               	movlw	1
  2660     0105  07C6               	addwf	ConvertToString@i,f
  2661     0106  1803               	skipnc
  2662     0107  0AC7               	incf	ConvertToString@i+1,f
  2663     0108  3000               	movlw	0
  2664     0109  07C7               	addwf	ConvertToString@i+1,f
  2665     010A                     l1817:
  2666                           
  2667                           ;main.c: 245:         j++;
  2668     010A  3001               	movlw	1
  2669     010B  07C4               	addwf	ConvertToString@j,f
  2670     010C  1803               	skipnc
  2671     010D  0AC5               	incf	ConvertToString@j+1,f
  2672     010E  3000               	movlw	0
  2673     010F  07C5               	addwf	ConvertToString@j+1,f
  2674     0110                     l1819:
  2675                           
  2676                           ;main.c: 237:     while(j < n_cifre)
  2677     0110  0845               	movf	ConvertToString@j+1,w
  2678     0111  3A80               	xorlw	128
  2679     0112  00C1               	movwf	??_ConvertToString
  2680     0113  3080               	movlw	128
  2681     0114  0241               	subwf	??_ConvertToString,w
  2682     0115  1D03               	skipz
  2683     0116  2919               	goto	u1605
  2684     0117  0848               	movf	ConvertToString@n_cifre,w
  2685     0118  0244               	subwf	ConvertToString@j,w
  2686     0119                     u1605:
  2687     0119  1C03               	skipc
  2688     011A  291C               	goto	u1601
  2689     011B  291D               	goto	u1600
  2690     011C                     u1601:
  2691     011C  28B1               	goto	l1809
  2692     011D                     u1600:
  2693     011D                     l1821:
  2694                           
  2695                           ;main.c: 248:     str[i] = '\0';
  2696     011D  1283               	bcf	3,5	;RP0=0, select bank0
  2697     011E  1303               	bcf	3,6	;RP1=0, select bank0
  2698     011F  0846               	movf	ConvertToString@i,w
  2699     0120  0740               	addwf	ConvertToString@str,w
  2700     0121  00C1               	movwf	??_ConvertToString
  2701     0122  0841               	movf	??_ConvertToString,w
  2702     0123  0084               	movwf	4
  2703     0124  1383               	bcf	3,7	;select IRP bank0
  2704     0125  0180               	clrf	0
  2705     0126                     l138:
  2706     0126  0008               	return
  2707     0127                     __end_of_ConvertToString:
  2708                           
  2709                           	psect	text15
  2710     0639                     __ptext15:	
  2711 ;; *************** function _pow *****************
  2712 ;; Defined at:
  2713 ;;		line 209 in file "main.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  b               1    wreg     unsigned char 
  2716 ;;  exp             1    4[BANK0 ] unsigned char 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  b               1    8[BANK0 ] unsigned char 
  2719 ;;  i               2    9[BANK0 ] int 
  2720 ;;  n               2   11[BANK0 ] int 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  2    4[BANK0 ] int 
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2730 ;;      Params:         0       2       0       0       0
  2731 ;;      Locals:         0       5       0       0       0
  2732 ;;      Temps:          0       2       0       0       0
  2733 ;;      Totals:         0       9       0       0       0
  2734 ;;Total ram usage:        9 bytes
  2735 ;; Hardware stack levels used: 1
  2736 ;; Hardware stack levels required when called: 2
  2737 ;; This function calls:
  2738 ;;		___wmul
  2739 ;; This function is called by:
  2740 ;;		_ConvertToString
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744     0639                     _pow:	
  2745                           ;psect for function _pow
  2746                           
  2747                           
  2748                           ;incstack = 0
  2749                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  2750                           ;pow@b stored from wreg
  2751     0639  1283               	bcf	3,5	;RP0=0, select bank0
  2752     063A  1303               	bcf	3,6	;RP1=0, select bank0
  2753     063B  00A8               	movwf	pow@b
  2754     063C                     l1685:
  2755                           
  2756                           ;main.c: 209: int pow(char b, char exp);main.c: 210: {;main.c: 211:     int n = 1;
  2757     063C  3001               	movlw	1
  2758     063D  00AB               	movwf	pow@n
  2759     063E  3000               	movlw	0
  2760     063F  00AC               	movwf	pow@n+1
  2761     0640                     l1687:
  2762                           
  2763                           ;main.c: 212:     for(int i = 0; i < exp; i++)
  2764     0640  01A9               	clrf	pow@i
  2765     0641  01AA               	clrf	pow@i+1
  2766     0642  2E61               	goto	l1693
  2767     0643                     l1689:
  2768                           
  2769                           ;main.c: 213:     {;main.c: 214:         n *= b;
  2770     0643  1283               	bcf	3,5	;RP0=0, select bank0
  2771     0644  1303               	bcf	3,6	;RP1=0, select bank0
  2772     0645  0828               	movf	pow@b,w
  2773     0646  00A6               	movwf	??_pow
  2774     0647  01A7               	clrf	??_pow+1
  2775     0648  0826               	movf	??_pow,w
  2776     0649  00A0               	movwf	___wmul@multiplier
  2777     064A  0827               	movf	??_pow+1,w
  2778     064B  00A1               	movwf	___wmul@multiplier+1
  2779     064C  082C               	movf	pow@n+1,w
  2780     064D  00A3               	movwf	___wmul@multiplicand+1
  2781     064E  082B               	movf	pow@n,w
  2782     064F  00A2               	movwf	___wmul@multiplicand
  2783     0650  120A  118A  26CD  120A  118A  	fcall	___wmul
  2784     0655  1283               	bcf	3,5	;RP0=0, select bank0
  2785     0656  1303               	bcf	3,6	;RP1=0, select bank0
  2786     0657  0821               	movf	?___wmul+1,w
  2787     0658  00AC               	movwf	pow@n+1
  2788     0659  0820               	movf	?___wmul,w
  2789     065A  00AB               	movwf	pow@n
  2790     065B                     l1691:
  2791                           
  2792                           ;main.c: 215:     }
  2793     065B  3001               	movlw	1
  2794     065C  07A9               	addwf	pow@i,f
  2795     065D  1803               	skipnc
  2796     065E  0AAA               	incf	pow@i+1,f
  2797     065F  3000               	movlw	0
  2798     0660  07AA               	addwf	pow@i+1,f
  2799     0661                     l1693:
  2800     0661  082A               	movf	pow@i+1,w
  2801     0662  3A80               	xorlw	128
  2802     0663  00A6               	movwf	??_pow
  2803     0664  3080               	movlw	128
  2804     0665  0226               	subwf	??_pow,w
  2805     0666  1D03               	skipz
  2806     0667  2E6A               	goto	u1385
  2807     0668  0824               	movf	pow@exp,w
  2808     0669  0229               	subwf	pow@i,w
  2809     066A                     u1385:
  2810     066A  1C03               	skipc
  2811     066B  2E6D               	goto	u1381
  2812     066C  2E6E               	goto	u1380
  2813     066D                     u1381:
  2814     066D  2E43               	goto	l1689
  2815     066E                     u1380:
  2816     066E                     l1695:
  2817                           
  2818                           ;main.c: 216:     return n;
  2819     066E  1283               	bcf	3,5	;RP0=0, select bank0
  2820     066F  1303               	bcf	3,6	;RP1=0, select bank0
  2821     0670  082C               	movf	pow@n+1,w
  2822     0671  00A5               	movwf	?_pow+1
  2823     0672  082B               	movf	pow@n,w
  2824     0673  00A4               	movwf	?_pow
  2825     0674                     l128:
  2826     0674  0008               	return
  2827     0675                     __end_of_pow:
  2828                           
  2829                           	psect	text16
  2830     06CD                     __ptext16:	
  2831 ;; *************** function ___wmul *****************
  2832 ;; Defined at:
  2833 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2836 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  product         2    4[COMMON] unsigned int 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  2    0[BANK0 ] unsigned int 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2848 ;;      Params:         0       4       0       0       0
  2849 ;;      Locals:         2       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0
  2851 ;;      Totals:         2       4       0       0       0
  2852 ;;Total ram usage:        6 bytes
  2853 ;; Hardware stack levels used: 1
  2854 ;; Hardware stack levels required when called: 1
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_pow
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862     06CD                     ___wmul:	
  2863                           ;psect for function ___wmul
  2864                           
  2865     06CD                     l1635:	
  2866                           ;incstack = 0
  2867                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2868                           
  2869     06CD  01F4               	clrf	___wmul@product
  2870     06CE  01F5               	clrf	___wmul@product+1
  2871     06CF                     l1637:
  2872     06CF  1283               	bcf	3,5	;RP0=0, select bank0
  2873     06D0  1303               	bcf	3,6	;RP1=0, select bank0
  2874     06D1  1C20               	btfss	___wmul@multiplier,0
  2875     06D2  2ED4               	goto	u1291
  2876     06D3  2ED5               	goto	u1290
  2877     06D4                     u1291:
  2878     06D4  2EDB               	goto	l277
  2879     06D5                     u1290:
  2880     06D5                     l1639:
  2881     06D5  0822               	movf	___wmul@multiplicand,w
  2882     06D6  07F4               	addwf	___wmul@product,f
  2883     06D7  1803               	skipnc
  2884     06D8  0AF5               	incf	___wmul@product+1,f
  2885     06D9  0823               	movf	___wmul@multiplicand+1,w
  2886     06DA  07F5               	addwf	___wmul@product+1,f
  2887     06DB                     l277:
  2888     06DB  3001               	movlw	1
  2889     06DC                     u1305:
  2890     06DC  1003               	clrc
  2891     06DD  0DA2               	rlf	___wmul@multiplicand,f
  2892     06DE  0DA3               	rlf	___wmul@multiplicand+1,f
  2893     06DF  3EFF               	addlw	-1
  2894     06E0  1D03               	skipz
  2895     06E1  2EDC               	goto	u1305
  2896     06E2                     l1641:
  2897     06E2  3001               	movlw	1
  2898     06E3                     u1315:
  2899     06E3  1003               	clrc
  2900     06E4  0CA1               	rrf	___wmul@multiplier+1,f
  2901     06E5  0CA0               	rrf	___wmul@multiplier,f
  2902     06E6  3EFF               	addlw	-1
  2903     06E7  1D03               	skipz
  2904     06E8  2EE3               	goto	u1315
  2905     06E9                     l1643:
  2906     06E9  0820               	movf	___wmul@multiplier,w
  2907     06EA  0421               	iorwf	___wmul@multiplier+1,w
  2908     06EB  1D03               	btfss	3,2
  2909     06EC  2EEE               	goto	u1321
  2910     06ED  2EEF               	goto	u1320
  2911     06EE                     u1321:
  2912     06EE  2ECF               	goto	l1637
  2913     06EF                     u1320:
  2914     06EF                     l1645:
  2915     06EF  0875               	movf	___wmul@product+1,w
  2916     06F0  00A1               	movwf	?___wmul+1
  2917     06F1  0874               	movf	___wmul@product,w
  2918     06F2  00A0               	movwf	?___wmul
  2919     06F3                     l279:
  2920     06F3  0008               	return
  2921     06F4                     __end_of___wmul:
  2922                           
  2923                           	psect	text17
  2924     04E6                     __ptext17:	
  2925 ;; *************** function ___lmul *****************
  2926 ;; Defined at:
  2927 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2930 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;  product         4    8[BANK0 ] unsigned long 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  4    0[BANK0 ] unsigned long 
  2935 ;; Registers used:
  2936 ;;		wreg, status,2, status,0
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2942 ;;      Params:         0       8       0       0       0
  2943 ;;      Locals:         0       4       0       0       0
  2944 ;;      Temps:          1       0       0       0       0
  2945 ;;      Totals:         1      12       0       0       0
  2946 ;;Total ram usage:       13 bytes
  2947 ;; Hardware stack levels used: 1
  2948 ;; Hardware stack levels required when called: 1
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_ConvertToString
  2953 ;;		_rand
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957     04E6                     ___lmul:	
  2958                           ;psect for function ___lmul
  2959                           
  2960     04E6                     l1649:	
  2961                           ;incstack = 0
  2962                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2963                           
  2964     04E6  3000               	movlw	0
  2965     04E7  1283               	bcf	3,5	;RP0=0, select bank0
  2966     04E8  1303               	bcf	3,6	;RP1=0, select bank0
  2967     04E9  00AB               	movwf	___lmul@product+3
  2968     04EA  3000               	movlw	0
  2969     04EB  00AA               	movwf	___lmul@product+2
  2970     04EC  3000               	movlw	0
  2971     04ED  00A9               	movwf	___lmul@product+1
  2972     04EE  3000               	movlw	0
  2973     04EF  00A8               	movwf	___lmul@product
  2974     04F0                     l1651:
  2975     04F0  1C20               	btfss	___lmul@multiplier,0
  2976     04F1  2CF3               	goto	u1331
  2977     04F2  2CF4               	goto	u1330
  2978     04F3                     u1331:
  2979     04F3  2D0B               	goto	l1655
  2980     04F4                     u1330:
  2981     04F4                     l1653:
  2982     04F4  0824               	movf	___lmul@multiplicand,w
  2983     04F5  07A8               	addwf	___lmul@product,f
  2984     04F6  0825               	movf	___lmul@multiplicand+1,w
  2985     04F7  1103               	clrz
  2986     04F8  1803               	skipnc
  2987     04F9  3E01               	addlw	1
  2988     04FA  1903               	skipnz
  2989     04FB  2CFD               	goto	u1341
  2990     04FC  07A9               	addwf	___lmul@product+1,f
  2991     04FD                     u1341:
  2992     04FD  0826               	movf	___lmul@multiplicand+2,w
  2993     04FE  1103               	clrz
  2994     04FF  1803               	skipnc
  2995     0500  3E01               	addlw	1
  2996     0501  1903               	skipnz
  2997     0502  2D04               	goto	u1342
  2998     0503  07AA               	addwf	___lmul@product+2,f
  2999     0504                     u1342:
  3000     0504  0827               	movf	___lmul@multiplicand+3,w
  3001     0505  1103               	clrz
  3002     0506  1803               	skipnc
  3003     0507  3E01               	addlw	1
  3004     0508  1903               	skipnz
  3005     0509  2D0B               	goto	u1343
  3006     050A  07AB               	addwf	___lmul@product+3,f
  3007     050B                     u1343:
  3008     050B                     l1655:
  3009     050B  3001               	movlw	1
  3010     050C  00F4               	movwf	??___lmul
  3011     050D                     u1355:
  3012     050D  1003               	clrc
  3013     050E  0DA4               	rlf	___lmul@multiplicand,f
  3014     050F  0DA5               	rlf	___lmul@multiplicand+1,f
  3015     0510  0DA6               	rlf	___lmul@multiplicand+2,f
  3016     0511  0DA7               	rlf	___lmul@multiplicand+3,f
  3017     0512  0BF4               	decfsz	??___lmul,f
  3018     0513  2D0D               	goto	u1355
  3019     0514                     l1657:
  3020     0514  3001               	movlw	1
  3021     0515                     u1365:
  3022     0515  1003               	clrc
  3023     0516  0CA3               	rrf	___lmul@multiplier+3,f
  3024     0517  0CA2               	rrf	___lmul@multiplier+2,f
  3025     0518  0CA1               	rrf	___lmul@multiplier+1,f
  3026     0519  0CA0               	rrf	___lmul@multiplier,f
  3027     051A  3EFF               	addlw	-1
  3028     051B  1D03               	skipz
  3029     051C  2D15               	goto	u1365
  3030     051D  0823               	movf	___lmul@multiplier+3,w
  3031     051E  0422               	iorwf	___lmul@multiplier+2,w
  3032     051F  0421               	iorwf	___lmul@multiplier+1,w
  3033     0520  0420               	iorwf	___lmul@multiplier,w
  3034     0521  1D03               	skipz
  3035     0522  2D24               	goto	u1371
  3036     0523  2D25               	goto	u1370
  3037     0524                     u1371:
  3038     0524  2CF0               	goto	l1651
  3039     0525                     u1370:
  3040     0525                     l1659:
  3041     0525  082B               	movf	___lmul@product+3,w
  3042     0526  00A3               	movwf	?___lmul+3
  3043     0527  082A               	movf	___lmul@product+2,w
  3044     0528  00A2               	movwf	?___lmul+2
  3045     0529  0829               	movf	___lmul@product+1,w
  3046     052A  00A1               	movwf	?___lmul+1
  3047     052B  0828               	movf	___lmul@product,w
  3048     052C  00A0               	movwf	?___lmul
  3049     052D                     l291:
  3050     052D  0008               	return
  3051     052E                     __end_of___lmul:
  3052                           
  3053                           	psect	text18
  3054     02FA                     __ptext18:	
  3055 ;; *************** function ___almod *****************
  3056 ;; Defined at:
  3057 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  divisor         4    0[BANK0 ] long 
  3060 ;;  dividend        4    4[BANK0 ] long 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  sign            1    9[BANK0 ] unsigned char 
  3063 ;;  counter         1    8[BANK0 ] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  4    0[BANK0 ] long 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3073 ;;      Params:         0       8       0       0       0
  3074 ;;      Locals:         0       2       0       0       0
  3075 ;;      Temps:          1       0       0       0       0
  3076 ;;      Totals:         1      10       0       0       0
  3077 ;;Total ram usage:       11 bytes
  3078 ;; Hardware stack levels used: 1
  3079 ;; Hardware stack levels required when called: 1
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_ConvertToString
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087     02FA                     ___almod:	
  3088                           ;psect for function ___almod
  3089                           
  3090     02FA                     l1713:	
  3091                           ;incstack = 0
  3092                           ; Regs used in ___almod: [wreg+status,2+status,0]
  3093                           
  3094     02FA  1283               	bcf	3,5	;RP0=0, select bank0
  3095     02FB  1303               	bcf	3,6	;RP1=0, select bank0
  3096     02FC  01A9               	clrf	___almod@sign
  3097     02FD                     l1715:
  3098     02FD  1FA7               	btfss	___almod@dividend+3,7
  3099     02FE  2B00               	goto	u1411
  3100     02FF  2B01               	goto	u1410
  3101     0300                     u1411:
  3102     0300  2B0E               	goto	l355
  3103     0301                     u1410:
  3104     0301                     l1717:
  3105     0301  09A4               	comf	___almod@dividend,f
  3106     0302  09A5               	comf	___almod@dividend+1,f
  3107     0303  09A6               	comf	___almod@dividend+2,f
  3108     0304  09A7               	comf	___almod@dividend+3,f
  3109     0305  0AA4               	incf	___almod@dividend,f
  3110     0306  1903               	skipnz
  3111     0307  0AA5               	incf	___almod@dividend+1,f
  3112     0308  1903               	skipnz
  3113     0309  0AA6               	incf	___almod@dividend+2,f
  3114     030A  1903               	skipnz
  3115     030B  0AA7               	incf	___almod@dividend+3,f
  3116     030C  01A9               	clrf	___almod@sign
  3117     030D  0AA9               	incf	___almod@sign,f
  3118     030E                     l355:
  3119     030E  1FA3               	btfss	___almod@divisor+3,7
  3120     030F  2B11               	goto	u1421
  3121     0310  2B12               	goto	u1420
  3122     0311                     u1421:
  3123     0311  2B1D               	goto	l1721
  3124     0312                     u1420:
  3125     0312                     l1719:
  3126     0312  09A0               	comf	___almod@divisor,f
  3127     0313  09A1               	comf	___almod@divisor+1,f
  3128     0314  09A2               	comf	___almod@divisor+2,f
  3129     0315  09A3               	comf	___almod@divisor+3,f
  3130     0316  0AA0               	incf	___almod@divisor,f
  3131     0317  1903               	skipnz
  3132     0318  0AA1               	incf	___almod@divisor+1,f
  3133     0319  1903               	skipnz
  3134     031A  0AA2               	incf	___almod@divisor+2,f
  3135     031B  1903               	skipnz
  3136     031C  0AA3               	incf	___almod@divisor+3,f
  3137     031D                     l1721:
  3138     031D  0823               	movf	___almod@divisor+3,w
  3139     031E  0422               	iorwf	___almod@divisor+2,w
  3140     031F  0421               	iorwf	___almod@divisor+1,w
  3141     0320  0420               	iorwf	___almod@divisor,w
  3142     0321  1903               	skipnz
  3143     0322  2B24               	goto	u1431
  3144     0323  2B25               	goto	u1430
  3145     0324                     u1431:
  3146     0324  2B68               	goto	l1737
  3147     0325                     u1430:
  3148     0325                     l1723:
  3149     0325  01A8               	clrf	___almod@counter
  3150     0326  0AA8               	incf	___almod@counter,f
  3151     0327  2B35               	goto	l1727
  3152     0328                     l1725:
  3153     0328  3001               	movlw	1
  3154     0329  00F4               	movwf	??___almod
  3155     032A                     u1445:
  3156     032A  1003               	clrc
  3157     032B  0DA0               	rlf	___almod@divisor,f
  3158     032C  0DA1               	rlf	___almod@divisor+1,f
  3159     032D  0DA2               	rlf	___almod@divisor+2,f
  3160     032E  0DA3               	rlf	___almod@divisor+3,f
  3161     032F  0BF4               	decfsz	??___almod,f
  3162     0330  2B2A               	goto	u1445
  3163     0331  3001               	movlw	1
  3164     0332  00F4               	movwf	??___almod
  3165     0333  0874               	movf	??___almod,w
  3166     0334  07A8               	addwf	___almod@counter,f
  3167     0335                     l1727:
  3168     0335  1FA3               	btfss	___almod@divisor+3,7
  3169     0336  2B38               	goto	u1451
  3170     0337  2B39               	goto	u1450
  3171     0338                     u1451:
  3172     0338  2B28               	goto	l1725
  3173     0339                     u1450:
  3174     0339                     l1729:
  3175     0339  0823               	movf	___almod@divisor+3,w
  3176     033A  0227               	subwf	___almod@dividend+3,w
  3177     033B  1D03               	skipz
  3178     033C  2B47               	goto	u1465
  3179     033D  0822               	movf	___almod@divisor+2,w
  3180     033E  0226               	subwf	___almod@dividend+2,w
  3181     033F  1D03               	skipz
  3182     0340  2B47               	goto	u1465
  3183     0341  0821               	movf	___almod@divisor+1,w
  3184     0342  0225               	subwf	___almod@dividend+1,w
  3185     0343  1D03               	skipz
  3186     0344  2B47               	goto	u1465
  3187     0345  0820               	movf	___almod@divisor,w
  3188     0346  0224               	subwf	___almod@dividend,w
  3189     0347                     u1465:
  3190     0347  1C03               	skipc
  3191     0348  2B4A               	goto	u1461
  3192     0349  2B4B               	goto	u1460
  3193     034A                     u1461:
  3194     034A  2B59               	goto	l1733
  3195     034B                     u1460:
  3196     034B                     l1731:
  3197     034B  0820               	movf	___almod@divisor,w
  3198     034C  02A4               	subwf	___almod@dividend,f
  3199     034D  0821               	movf	___almod@divisor+1,w
  3200     034E  1C03               	skipc
  3201     034F  0F21               	incfsz	___almod@divisor+1,w
  3202     0350  02A5               	subwf	___almod@dividend+1,f
  3203     0351  0822               	movf	___almod@divisor+2,w
  3204     0352  1C03               	skipc
  3205     0353  0F22               	incfsz	___almod@divisor+2,w
  3206     0354  02A6               	subwf	___almod@dividend+2,f
  3207     0355  0823               	movf	___almod@divisor+3,w
  3208     0356  1C03               	skipc
  3209     0357  0F23               	incfsz	___almod@divisor+3,w
  3210     0358  02A7               	subwf	___almod@dividend+3,f
  3211     0359                     l1733:
  3212     0359  3001               	movlw	1
  3213     035A                     u1475:
  3214     035A  1003               	clrc
  3215     035B  0CA3               	rrf	___almod@divisor+3,f
  3216     035C  0CA2               	rrf	___almod@divisor+2,f
  3217     035D  0CA1               	rrf	___almod@divisor+1,f
  3218     035E  0CA0               	rrf	___almod@divisor,f
  3219     035F  3EFF               	addlw	-1
  3220     0360  1D03               	skipz
  3221     0361  2B5A               	goto	u1475
  3222     0362                     l1735:
  3223     0362  3001               	movlw	1
  3224     0363  02A8               	subwf	___almod@counter,f
  3225     0364  1D03               	btfss	3,2
  3226     0365  2B67               	goto	u1481
  3227     0366  2B68               	goto	u1480
  3228     0367                     u1481:
  3229     0367  2B39               	goto	l1729
  3230     0368                     u1480:
  3231     0368                     l1737:
  3232     0368  0829               	movf	___almod@sign,w
  3233     0369  1903               	btfsc	3,2
  3234     036A  2B6C               	goto	u1491
  3235     036B  2B6D               	goto	u1490
  3236     036C                     u1491:
  3237     036C  2B78               	goto	l1741
  3238     036D                     u1490:
  3239     036D                     l1739:
  3240     036D  09A4               	comf	___almod@dividend,f
  3241     036E  09A5               	comf	___almod@dividend+1,f
  3242     036F  09A6               	comf	___almod@dividend+2,f
  3243     0370  09A7               	comf	___almod@dividend+3,f
  3244     0371  0AA4               	incf	___almod@dividend,f
  3245     0372  1903               	skipnz
  3246     0373  0AA5               	incf	___almod@dividend+1,f
  3247     0374  1903               	skipnz
  3248     0375  0AA6               	incf	___almod@dividend+2,f
  3249     0376  1903               	skipnz
  3250     0377  0AA7               	incf	___almod@dividend+3,f
  3251     0378                     l1741:
  3252     0378  0827               	movf	___almod@dividend+3,w
  3253     0379  00A3               	movwf	?___almod+3
  3254     037A  0826               	movf	___almod@dividend+2,w
  3255     037B  00A2               	movwf	?___almod+2
  3256     037C  0825               	movf	___almod@dividend+1,w
  3257     037D  00A1               	movwf	?___almod+1
  3258     037E  0824               	movf	___almod@dividend,w
  3259     037F  00A0               	movwf	?___almod
  3260     0380                     l365:
  3261     0380  0008               	return
  3262     0381                     __end_of___almod:
  3263                           
  3264                           	psect	text19
  3265     01D3                     __ptext19:	
  3266 ;; *************** function ___aldiv *****************
  3267 ;; Defined at:
  3268 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  divisor         4   13[BANK0 ] long 
  3271 ;;  dividend        4   17[BANK0 ] long 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  quotient        4   24[BANK0 ] long 
  3274 ;;  sign            1   23[BANK0 ] unsigned char 
  3275 ;;  counter         1   22[BANK0 ] unsigned char 
  3276 ;; Return value:  Size  Location     Type
  3277 ;;                  4   13[BANK0 ] long 
  3278 ;; Registers used:
  3279 ;;		wreg, status,2, status,0
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3285 ;;      Params:         0       8       0       0       0
  3286 ;;      Locals:         0       6       0       0       0
  3287 ;;      Temps:          0       1       0       0       0
  3288 ;;      Totals:         0      15       0       0       0
  3289 ;;Total ram usage:       15 bytes
  3290 ;; Hardware stack levels used: 1
  3291 ;; Hardware stack levels required when called: 1
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_ConvertToString
  3296 ;;		_UART_init
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300     01D3                     ___aldiv:	
  3301                           ;psect for function ___aldiv
  3302                           
  3303     01D3                     l1251:	
  3304                           ;incstack = 0
  3305                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3306                           
  3307     01D3  1283               	bcf	3,5	;RP0=0, select bank0
  3308     01D4  1303               	bcf	3,6	;RP1=0, select bank0
  3309     01D5  01B7               	clrf	___aldiv@sign
  3310     01D6                     l1253:
  3311     01D6  1FB0               	btfss	___aldiv@divisor+3,7
  3312     01D7  29D9               	goto	u731
  3313     01D8  29DA               	goto	u730
  3314     01D9                     u731:
  3315     01D9  29E7               	goto	l342
  3316     01DA                     u730:
  3317     01DA                     l1255:
  3318     01DA  09AD               	comf	___aldiv@divisor,f
  3319     01DB  09AE               	comf	___aldiv@divisor+1,f
  3320     01DC  09AF               	comf	___aldiv@divisor+2,f
  3321     01DD  09B0               	comf	___aldiv@divisor+3,f
  3322     01DE  0AAD               	incf	___aldiv@divisor,f
  3323     01DF  1903               	skipnz
  3324     01E0  0AAE               	incf	___aldiv@divisor+1,f
  3325     01E1  1903               	skipnz
  3326     01E2  0AAF               	incf	___aldiv@divisor+2,f
  3327     01E3  1903               	skipnz
  3328     01E4  0AB0               	incf	___aldiv@divisor+3,f
  3329     01E5  01B7               	clrf	___aldiv@sign
  3330     01E6  0AB7               	incf	___aldiv@sign,f
  3331     01E7                     l342:
  3332     01E7  1FB4               	btfss	___aldiv@dividend+3,7
  3333     01E8  29EA               	goto	u741
  3334     01E9  29EB               	goto	u740
  3335     01EA                     u741:
  3336     01EA  29FA               	goto	l1261
  3337     01EB                     u740:
  3338     01EB                     l1257:
  3339     01EB  09B1               	comf	___aldiv@dividend,f
  3340     01EC  09B2               	comf	___aldiv@dividend+1,f
  3341     01ED  09B3               	comf	___aldiv@dividend+2,f
  3342     01EE  09B4               	comf	___aldiv@dividend+3,f
  3343     01EF  0AB1               	incf	___aldiv@dividend,f
  3344     01F0  1903               	skipnz
  3345     01F1  0AB2               	incf	___aldiv@dividend+1,f
  3346     01F2  1903               	skipnz
  3347     01F3  0AB3               	incf	___aldiv@dividend+2,f
  3348     01F4  1903               	skipnz
  3349     01F5  0AB4               	incf	___aldiv@dividend+3,f
  3350     01F6                     l1259:
  3351     01F6  3001               	movlw	1
  3352     01F7  00B5               	movwf	??___aldiv
  3353     01F8  0835               	movf	??___aldiv,w
  3354     01F9  06B7               	xorwf	___aldiv@sign,f
  3355     01FA                     l1261:
  3356     01FA  3000               	movlw	0
  3357     01FB  00BB               	movwf	___aldiv@quotient+3
  3358     01FC  3000               	movlw	0
  3359     01FD  00BA               	movwf	___aldiv@quotient+2
  3360     01FE  3000               	movlw	0
  3361     01FF  00B9               	movwf	___aldiv@quotient+1
  3362     0200  3000               	movlw	0
  3363     0201  00B8               	movwf	___aldiv@quotient
  3364     0202                     l1263:
  3365     0202  0830               	movf	___aldiv@divisor+3,w
  3366     0203  042F               	iorwf	___aldiv@divisor+2,w
  3367     0204  042E               	iorwf	___aldiv@divisor+1,w
  3368     0205  042D               	iorwf	___aldiv@divisor,w
  3369     0206  1903               	skipnz
  3370     0207  2A09               	goto	u751
  3371     0208  2A0A               	goto	u750
  3372     0209                     u751:
  3373     0209  2A57               	goto	l1283
  3374     020A                     u750:
  3375     020A                     l1265:
  3376     020A  01B6               	clrf	___aldiv@counter
  3377     020B  0AB6               	incf	___aldiv@counter,f
  3378     020C  2A1A               	goto	l1269
  3379     020D                     l1267:
  3380     020D  3001               	movlw	1
  3381     020E  00B5               	movwf	??___aldiv
  3382     020F                     u765:
  3383     020F  1003               	clrc
  3384     0210  0DAD               	rlf	___aldiv@divisor,f
  3385     0211  0DAE               	rlf	___aldiv@divisor+1,f
  3386     0212  0DAF               	rlf	___aldiv@divisor+2,f
  3387     0213  0DB0               	rlf	___aldiv@divisor+3,f
  3388     0214  0BB5               	decfsz	??___aldiv,f
  3389     0215  2A0F               	goto	u765
  3390     0216  3001               	movlw	1
  3391     0217  00B5               	movwf	??___aldiv
  3392     0218  0835               	movf	??___aldiv,w
  3393     0219  07B6               	addwf	___aldiv@counter,f
  3394     021A                     l1269:
  3395     021A  1FB0               	btfss	___aldiv@divisor+3,7
  3396     021B  2A1D               	goto	u771
  3397     021C  2A1E               	goto	u770
  3398     021D                     u771:
  3399     021D  2A0D               	goto	l1267
  3400     021E                     u770:
  3401     021E                     l1271:
  3402     021E  3001               	movlw	1
  3403     021F  00B5               	movwf	??___aldiv
  3404     0220                     u785:
  3405     0220  1003               	clrc
  3406     0221  0DB8               	rlf	___aldiv@quotient,f
  3407     0222  0DB9               	rlf	___aldiv@quotient+1,f
  3408     0223  0DBA               	rlf	___aldiv@quotient+2,f
  3409     0224  0DBB               	rlf	___aldiv@quotient+3,f
  3410     0225  0BB5               	decfsz	??___aldiv,f
  3411     0226  2A20               	goto	u785
  3412     0227                     l1273:
  3413     0227  0830               	movf	___aldiv@divisor+3,w
  3414     0228  0234               	subwf	___aldiv@dividend+3,w
  3415     0229  1D03               	skipz
  3416     022A  2A35               	goto	u795
  3417     022B  082F               	movf	___aldiv@divisor+2,w
  3418     022C  0233               	subwf	___aldiv@dividend+2,w
  3419     022D  1D03               	skipz
  3420     022E  2A35               	goto	u795
  3421     022F  082E               	movf	___aldiv@divisor+1,w
  3422     0230  0232               	subwf	___aldiv@dividend+1,w
  3423     0231  1D03               	skipz
  3424     0232  2A35               	goto	u795
  3425     0233  082D               	movf	___aldiv@divisor,w
  3426     0234  0231               	subwf	___aldiv@dividend,w
  3427     0235                     u795:
  3428     0235  1C03               	skipc
  3429     0236  2A38               	goto	u791
  3430     0237  2A39               	goto	u790
  3431     0238                     u791:
  3432     0238  2A48               	goto	l1279
  3433     0239                     u790:
  3434     0239                     l1275:
  3435     0239  082D               	movf	___aldiv@divisor,w
  3436     023A  02B1               	subwf	___aldiv@dividend,f
  3437     023B  082E               	movf	___aldiv@divisor+1,w
  3438     023C  1C03               	skipc
  3439     023D  0F2E               	incfsz	___aldiv@divisor+1,w
  3440     023E  02B2               	subwf	___aldiv@dividend+1,f
  3441     023F  082F               	movf	___aldiv@divisor+2,w
  3442     0240  1C03               	skipc
  3443     0241  0F2F               	incfsz	___aldiv@divisor+2,w
  3444     0242  02B3               	subwf	___aldiv@dividend+2,f
  3445     0243  0830               	movf	___aldiv@divisor+3,w
  3446     0244  1C03               	skipc
  3447     0245  0F30               	incfsz	___aldiv@divisor+3,w
  3448     0246  02B4               	subwf	___aldiv@dividend+3,f
  3449     0247                     l1277:
  3450     0247  1438               	bsf	___aldiv@quotient,0
  3451     0248                     l1279:
  3452     0248  3001               	movlw	1
  3453     0249                     u805:
  3454     0249  1003               	clrc
  3455     024A  0CB0               	rrf	___aldiv@divisor+3,f
  3456     024B  0CAF               	rrf	___aldiv@divisor+2,f
  3457     024C  0CAE               	rrf	___aldiv@divisor+1,f
  3458     024D  0CAD               	rrf	___aldiv@divisor,f
  3459     024E  3EFF               	addlw	-1
  3460     024F  1D03               	skipz
  3461     0250  2A49               	goto	u805
  3462     0251                     l1281:
  3463     0251  3001               	movlw	1
  3464     0252  02B6               	subwf	___aldiv@counter,f
  3465     0253  1D03               	btfss	3,2
  3466     0254  2A56               	goto	u811
  3467     0255  2A57               	goto	u810
  3468     0256                     u811:
  3469     0256  2A1E               	goto	l1271
  3470     0257                     u810:
  3471     0257                     l1283:
  3472     0257  0837               	movf	___aldiv@sign,w
  3473     0258  1903               	btfsc	3,2
  3474     0259  2A5B               	goto	u821
  3475     025A  2A5C               	goto	u820
  3476     025B                     u821:
  3477     025B  2A67               	goto	l1287
  3478     025C                     u820:
  3479     025C                     l1285:
  3480     025C  09B8               	comf	___aldiv@quotient,f
  3481     025D  09B9               	comf	___aldiv@quotient+1,f
  3482     025E  09BA               	comf	___aldiv@quotient+2,f
  3483     025F  09BB               	comf	___aldiv@quotient+3,f
  3484     0260  0AB8               	incf	___aldiv@quotient,f
  3485     0261  1903               	skipnz
  3486     0262  0AB9               	incf	___aldiv@quotient+1,f
  3487     0263  1903               	skipnz
  3488     0264  0ABA               	incf	___aldiv@quotient+2,f
  3489     0265  1903               	skipnz
  3490     0266  0ABB               	incf	___aldiv@quotient+3,f
  3491     0267                     l1287:
  3492     0267  083B               	movf	___aldiv@quotient+3,w
  3493     0268  00B0               	movwf	?___aldiv+3
  3494     0269  083A               	movf	___aldiv@quotient+2,w
  3495     026A  00AF               	movwf	?___aldiv+2
  3496     026B  0839               	movf	___aldiv@quotient+1,w
  3497     026C  00AE               	movwf	?___aldiv+1
  3498     026D  0838               	movf	___aldiv@quotient,w
  3499     026E  00AD               	movwf	?___aldiv
  3500     026F                     l352:
  3501     026F  0008               	return
  3502     0270                     __end_of___aldiv:
  3503                           
  3504                           	psect	text20
  3505     049C                     __ptext20:	
  3506 ;; *************** function _ConcatToPacket *****************
  3507 ;; Defined at:
  3508 ;;		line 252 in file "main.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  pkt             1    wreg     PTR unsigned char 
  3511 ;;		 -> main@packet(50), 
  3512 ;;  str             2   10[BANK0 ] PTR unsigned char 
  3513 ;;		 -> STR_1(10), main@num_rand_s(16), 
  3514 ;;  delim           1   12[BANK0 ] unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  pkt             1   16[BANK0 ] PTR unsigned char 
  3517 ;;		 -> main@packet(50), 
  3518 ;;  packet_lengt    2   14[BANK0 ] int 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3528 ;;      Params:         0       3       0       0       0
  3529 ;;      Locals:         0       3       0       0       0
  3530 ;;      Temps:          0       1       0       0       0
  3531 ;;      Totals:         0       7       0       0       0
  3532 ;;Total ram usage:        7 bytes
  3533 ;; Hardware stack levels used: 1
  3534 ;; Hardware stack levels required when called: 3
  3535 ;; This function calls:
  3536 ;;		_strcat
  3537 ;; This function is called by:
  3538 ;;		_main
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542     049C                     _ConcatToPacket:	
  3543                           ;psect for function _ConcatToPacket
  3544                           
  3545                           
  3546                           ;incstack = 0
  3547                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3548                           ;ConcatToPacket@pkt stored from wreg
  3549     049C  1283               	bcf	3,5	;RP0=0, select bank0
  3550     049D  1303               	bcf	3,6	;RP1=0, select bank0
  3551     049E  00B0               	movwf	ConcatToPacket@pkt
  3552     049F                     l1831:
  3553                           
  3554                           ;main.c: 252: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 253: {;main.
      +                          c: 254:     int packet_length = strcat(pkt, str);
  3555     049F  082A               	movf	ConcatToPacket@str,w
  3556     04A0  00F4               	movwf	strcat@str2
  3557     04A1  082B               	movf	ConcatToPacket@str+1,w
  3558     04A2  00F5               	movwf	strcat@str2+1
  3559     04A3  0830               	movf	ConcatToPacket@pkt,w
  3560     04A4  120A  118A  2381  120A  118A  	fcall	_strcat
  3561     04A9  0875               	movf	?_strcat+1,w
  3562     04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3563     04AB  1303               	bcf	3,6	;RP1=0, select bank0
  3564     04AC  00AF               	movwf	ConcatToPacket@packet_length+1
  3565     04AD  0874               	movf	?_strcat,w
  3566     04AE  00AE               	movwf	ConcatToPacket@packet_length
  3567     04AF                     l1833:
  3568                           
  3569                           ;main.c: 255:     if(delim != ' ')
  3570     04AF  3020               	movlw	32
  3571     04B0  062C               	xorwf	ConcatToPacket@delim,w
  3572     04B1  1903               	btfsc	3,2
  3573     04B2  2CB4               	goto	u1641
  3574     04B3  2CB5               	goto	u1640
  3575     04B4                     u1641:
  3576     04B4  2CC4               	goto	l1839
  3577     04B5                     u1640:
  3578     04B5                     l1835:
  3579                           
  3580                           ;main.c: 256:     {;main.c: 257:         pkt[packet_length] = delim;
  3581     04B5  082E               	movf	ConcatToPacket@packet_length,w
  3582     04B6  0730               	addwf	ConcatToPacket@pkt,w
  3583     04B7  00AD               	movwf	??_ConcatToPacket
  3584     04B8  082D               	movf	??_ConcatToPacket,w
  3585     04B9  0084               	movwf	4
  3586     04BA  082C               	movf	ConcatToPacket@delim,w
  3587     04BB  1383               	bcf	3,7	;select IRP bank0
  3588     04BC  0080               	movwf	0
  3589     04BD                     l1837:
  3590                           
  3591                           ;main.c: 258:         packet_length++;
  3592     04BD  3001               	movlw	1
  3593     04BE  07AE               	addwf	ConcatToPacket@packet_length,f
  3594     04BF  1803               	skipnc
  3595     04C0  0AAF               	incf	ConcatToPacket@packet_length+1,f
  3596     04C1  3000               	movlw	0
  3597     04C2  07AF               	addwf	ConcatToPacket@packet_length+1,f
  3598                           
  3599                           ;main.c: 259:     }
  3600     04C3  2CDF               	goto	l1845
  3601     04C4                     l1839:
  3602                           
  3603                           ;main.c: 261:     {;main.c: 262:         pkt[packet_length] = '\r';
  3604     04C4  082E               	movf	ConcatToPacket@packet_length,w
  3605     04C5  0730               	addwf	ConcatToPacket@pkt,w
  3606     04C6  00AD               	movwf	??_ConcatToPacket
  3607     04C7  082D               	movf	??_ConcatToPacket,w
  3608     04C8  0084               	movwf	4
  3609     04C9  300D               	movlw	13
  3610     04CA  1383               	bcf	3,7	;select IRP bank0
  3611     04CB  0080               	movwf	0
  3612     04CC                     l1841:
  3613                           
  3614                           ;main.c: 263:         packet_length++;
  3615     04CC  3001               	movlw	1
  3616     04CD  07AE               	addwf	ConcatToPacket@packet_length,f
  3617     04CE  1803               	skipnc
  3618     04CF  0AAF               	incf	ConcatToPacket@packet_length+1,f
  3619     04D0  3000               	movlw	0
  3620     04D1  07AF               	addwf	ConcatToPacket@packet_length+1,f
  3621     04D2                     l1843:
  3622                           
  3623                           ;main.c: 264:         pkt[packet_length] = '\n';
  3624     04D2  082E               	movf	ConcatToPacket@packet_length,w
  3625     04D3  0730               	addwf	ConcatToPacket@pkt,w
  3626     04D4  00AD               	movwf	??_ConcatToPacket
  3627     04D5  082D               	movf	??_ConcatToPacket,w
  3628     04D6  0084               	movwf	4
  3629     04D7  300A               	movlw	10
  3630     04D8  0080               	movwf	0
  3631                           
  3632                           ;main.c: 265:         packet_length++;
  3633     04D9  3001               	movlw	1
  3634     04DA  07AE               	addwf	ConcatToPacket@packet_length,f
  3635     04DB  1803               	skipnc
  3636     04DC  0AAF               	incf	ConcatToPacket@packet_length+1,f
  3637     04DD  3000               	movlw	0
  3638     04DE  07AF               	addwf	ConcatToPacket@packet_length+1,f
  3639     04DF                     l1845:
  3640                           
  3641                           ;main.c: 267:     pkt[packet_length] = '\0';
  3642     04DF  082E               	movf	ConcatToPacket@packet_length,w
  3643     04E0  0730               	addwf	ConcatToPacket@pkt,w
  3644     04E1  00AD               	movwf	??_ConcatToPacket
  3645     04E2  082D               	movf	??_ConcatToPacket,w
  3646     04E3  0084               	movwf	4
  3647     04E4  0180               	clrf	0
  3648     04E5                     l143:
  3649     04E5  0008               	return
  3650     04E6                     __end_of_ConcatToPacket:
  3651                           
  3652                           	psect	text21
  3653     0381                     __ptext21:	
  3654 ;; *************** function _strcat *****************
  3655 ;; Defined at:
  3656 ;;		line 270 in file "main.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  str1            1    wreg     PTR unsigned char 
  3659 ;;		 -> main@packet(50), 
  3660 ;;  str2            2    4[COMMON] PTR unsigned char 
  3661 ;;		 -> STR_1(10), main@num_rand_s(16), 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;  str1            1    7[BANK0 ] PTR unsigned char 
  3664 ;;		 -> main@packet(50), 
  3665 ;;  length_str1     2    8[BANK0 ] int 
  3666 ;;  n               2    5[BANK0 ] int 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  2    4[COMMON] int 
  3669 ;; Registers used:
  3670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3676 ;;      Params:         2       0       0       0       0
  3677 ;;      Locals:         0       5       0       0       0
  3678 ;;      Temps:          0       5       0       0       0
  3679 ;;      Totals:         2      10       0       0       0
  3680 ;;Total ram usage:       12 bytes
  3681 ;; Hardware stack levels used: 2
  3682 ;; Hardware stack levels required when called: 1
  3683 ;; This function calls:
  3684 ;;		Nothing
  3685 ;; This function is called by:
  3686 ;;		_ConcatToPacket
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690     0381                     _strcat:	
  3691                           ;psect for function _strcat
  3692                           
  3693                           
  3694                           ;incstack = 0
  3695                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3696                           ;strcat@str1 stored from wreg
  3697     0381  1283               	bcf	3,5	;RP0=0, select bank0
  3698     0382  1303               	bcf	3,6	;RP1=0, select bank0
  3699     0383  00A7               	movwf	strcat@str1
  3700     0384                     l1353:
  3701                           
  3702                           ;main.c: 270: int strcat(char* str1, char* str2);main.c: 271: {;main.c: 272:     int n =
      +                           0, length_str1 = 0;
  3703     0384  01A5               	clrf	strcat@n
  3704     0385  01A6               	clrf	strcat@n+1
  3705     0386  01A8               	clrf	strcat@length_str1
  3706     0387  01A9               	clrf	strcat@length_str1+1
  3707                           
  3708                           ;main.c: 275:     while(str1[length_str1] != '\0')
  3709     0388  2B8F               	goto	l1357
  3710     0389                     l1355:
  3711                           
  3712                           ;main.c: 276:         length_str1++;
  3713     0389  3001               	movlw	1
  3714     038A  07A8               	addwf	strcat@length_str1,f
  3715     038B  1803               	skipnc
  3716     038C  0AA9               	incf	strcat@length_str1+1,f
  3717     038D  3000               	movlw	0
  3718     038E  07A9               	addwf	strcat@length_str1+1,f
  3719     038F                     l1357:
  3720                           
  3721                           ;main.c: 275:     while(str1[length_str1] != '\0')
  3722     038F  0828               	movf	strcat@length_str1,w
  3723     0390  0727               	addwf	strcat@str1,w
  3724     0391  00A0               	movwf	??_strcat
  3725     0392  0820               	movf	??_strcat,w
  3726     0393  0084               	movwf	4
  3727     0394  1383               	bcf	3,7	;select IRP bank0
  3728     0395  0800               	movf	0,w
  3729     0396  1D03               	btfss	3,2
  3730     0397  2B99               	goto	u851
  3731     0398  2B9A               	goto	u850
  3732     0399                     u851:
  3733     0399  2B89               	goto	l1355
  3734     039A                     u850:
  3735     039A  2BC7               	goto	l149
  3736     039B                     l1359:
  3737                           
  3738                           ;main.c: 280:     {;main.c: 281:         str1[length_str1] = str2[n];
  3739     039B  0825               	movf	strcat@n,w
  3740     039C  0774               	addwf	strcat@str2,w
  3741     039D  00A1               	movwf	??_strcat+1
  3742     039E  0875               	movf	strcat@str2+1,w
  3743     039F  00A0               	movwf	??_strcat
  3744     03A0  1803               	skipnc
  3745     03A1  0AA0               	incf	??_strcat,f
  3746     03A2  1FA5               	btfss	strcat@n,7
  3747     03A3  2BA5               	goto	u860
  3748     03A4  03A0               	decf	??_strcat,f
  3749     03A5                     u860:
  3750     03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3751     03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3752     03A7  0820               	movf	??_strcat,w
  3753     03A8  00A2               	movwf	??_strcat+2
  3754     03A9  0822               	movf	??_strcat+2,w
  3755     03AA  00FF               	movwf	btemp+1
  3756     03AB  0821               	movf	??_strcat+1,w
  3757     03AC  0084               	movwf	4
  3758     03AD  120A  118A  2675  120A  118A  	fcall	stringtab
  3759     03B2  00A3               	movwf	??_strcat+3
  3760     03B3  0828               	movf	strcat@length_str1,w
  3761     03B4  0727               	addwf	strcat@str1,w
  3762     03B5  00A4               	movwf	??_strcat+4
  3763     03B6  0824               	movf	??_strcat+4,w
  3764     03B7  0084               	movwf	4
  3765     03B8  0823               	movf	??_strcat+3,w
  3766     03B9  1383               	bcf	3,7	;select IRP bank0
  3767     03BA  0080               	movwf	0
  3768     03BB                     l1361:
  3769                           
  3770                           ;main.c: 282:         n++;
  3771     03BB  3001               	movlw	1
  3772     03BC  07A5               	addwf	strcat@n,f
  3773     03BD  1803               	skipnc
  3774     03BE  0AA6               	incf	strcat@n+1,f
  3775     03BF  3000               	movlw	0
  3776     03C0  07A6               	addwf	strcat@n+1,f
  3777     03C1                     l1363:
  3778                           
  3779                           ;main.c: 283:         length_str1++;
  3780     03C1  3001               	movlw	1
  3781     03C2  07A8               	addwf	strcat@length_str1,f
  3782     03C3  1803               	skipnc
  3783     03C4  0AA9               	incf	strcat@length_str1+1,f
  3784     03C5  3000               	movlw	0
  3785     03C6  07A9               	addwf	strcat@length_str1+1,f
  3786     03C7                     l149:	
  3787                           ;main.c: 284:     }
  3788                           
  3789                           
  3790                           ;main.c: 279:     while(str2[n] != '\0')
  3791     03C7  0825               	movf	strcat@n,w
  3792     03C8  0774               	addwf	strcat@str2,w
  3793     03C9  00A1               	movwf	??_strcat+1
  3794     03CA  0875               	movf	strcat@str2+1,w
  3795     03CB  00A0               	movwf	??_strcat
  3796     03CC  1803               	skipnc
  3797     03CD  0AA0               	incf	??_strcat,f
  3798     03CE  1FA5               	btfss	strcat@n,7
  3799     03CF  2BD1               	goto	u870
  3800     03D0  03A0               	decf	??_strcat,f
  3801     03D1                     u870:
  3802     03D1  1283               	bcf	3,5	;RP0=0, select bank0
  3803     03D2  1303               	bcf	3,6	;RP1=0, select bank0
  3804     03D3  0820               	movf	??_strcat,w
  3805     03D4  00A2               	movwf	??_strcat+2
  3806     03D5  0822               	movf	??_strcat+2,w
  3807     03D6  00FF               	movwf	btemp+1
  3808     03D7  0821               	movf	??_strcat+1,w
  3809     03D8  0084               	movwf	4
  3810     03D9  120A  118A  2675  120A  118A  	fcall	stringtab
  3811     03DE  3A00               	xorlw	0
  3812     03DF  1D03               	skipz
  3813     03E0  2BE2               	goto	u881
  3814     03E1  2BE3               	goto	u880
  3815     03E2                     u881:
  3816     03E2  2B9B               	goto	l1359
  3817     03E3                     u880:
  3818     03E3                     l1365:
  3819                           
  3820                           ;main.c: 287:     return length_str1;
  3821     03E3  0829               	movf	strcat@length_str1+1,w
  3822     03E4  00F5               	movwf	?_strcat+1
  3823     03E5  0828               	movf	strcat@length_str1,w
  3824     03E6  00F4               	movwf	?_strcat
  3825     03E7                     l152:
  3826     03E7  0008               	return
  3827     03E8                     __end_of_strcat:
  3828                           
  3829                           	psect	text22
  3830     05FC                     __ptext22:	
  3831 ;; *************** function _IRS *****************
  3832 ;; Defined at:
  3833 ;;		line 420 in file "main.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;		None
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;		None
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  1    wreg      void 
  3840 ;; Registers used:
  3841 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3847 ;;      Params:         0       0       0       0       0
  3848 ;;      Locals:         0       0       0       0       0
  3849 ;;      Temps:          4       0       0       0       0
  3850 ;;      Totals:         4       0       0       0       0
  3851 ;;Total ram usage:        4 bytes
  3852 ;; Hardware stack levels used: 1
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		Interrupt level 1
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860     05FC                     _IRS:	
  3861                           ;psect for function _IRS
  3862                           
  3863     05FC                     i1l1597:
  3864                           
  3865                           ;main.c: 423:     if(RCIF)
  3866     05FC  1283               	bcf	3,5	;RP0=0, select bank0
  3867     05FD  1303               	bcf	3,6	;RP1=0, select bank0
  3868     05FE  1E8C               	btfss	12,5	;volatile
  3869     05FF  2E01               	goto	u127_21
  3870     0600  2E02               	goto	u127_20
  3871     0601                     u127_21:
  3872     0601  2E1B               	goto	i1l1609
  3873     0602                     u127_20:
  3874     0602                     i1l1599:
  3875                           
  3876                           ;main.c: 424:     {;main.c: 425:         dato[i++] = RCREG;
  3877     0602  1683               	bsf	3,5	;RP0=1, select bank1
  3878     0603  1303               	bcf	3,6	;RP1=0, select bank1
  3879     0604  0867               	movf	_i^(0+128),w
  3880     0605  3E90               	addlw	(low (_dato| (0+256)))& (0+255)
  3881     0606  0084               	movwf	4
  3882     0607  1283               	bcf	3,5	;RP0=0, select bank0
  3883     0608  1303               	bcf	3,6	;RP1=0, select bank0
  3884     0609  081A               	movf	26,w	;volatile
  3885     060A  1783               	bsf	3,7	;select IRP bank3
  3886     060B  0080               	movwf	0
  3887     060C                     i1l1601:
  3888     060C  3001               	movlw	1
  3889     060D  00F0               	movwf	??_IRS
  3890     060E  0870               	movf	??_IRS,w
  3891     060F  1683               	bsf	3,5	;RP0=1, select bank1
  3892     0610  1303               	bcf	3,6	;RP1=0, select bank1
  3893     0611  07E7               	addwf	_i^(0+128),f
  3894     0612                     i1l1603:
  3895                           
  3896                           ;main.c: 426:         dato[i] = '\0';
  3897     0612  0867               	movf	_i^(0+128),w
  3898     0613  3E90               	addlw	(low (_dato| (0+256)))& (0+255)
  3899     0614  0084               	movwf	4
  3900     0615  0180               	clrf	0
  3901     0616                     i1l1605:
  3902                           
  3903                           ;main.c: 427:         recieved = 1;
  3904     0616  01E6               	clrf	_recieved^(0+128)
  3905     0617  0AE6               	incf	_recieved^(0+128),f
  3906     0618                     i1l1607:
  3907                           
  3908                           ;main.c: 428:         RCIF = 0;
  3909     0618  1283               	bcf	3,5	;RP0=0, select bank0
  3910     0619  1303               	bcf	3,6	;RP1=0, select bank0
  3911     061A  128C               	bcf	12,5	;volatile
  3912     061B                     i1l1609:
  3913                           
  3914                           ;main.c: 431:     if(T0IF)
  3915     061B  1D0B               	btfss	11,2	;volatile
  3916     061C  2E1E               	goto	u128_21
  3917     061D  2E1F               	goto	u128_20
  3918     061E                     u128_21:
  3919     061E  2E30               	goto	i1l191
  3920     061F                     u128_20:
  3921     061F                     i1l1611:
  3922                           
  3923                           ;main.c: 432:     {;main.c: 433:         TMR0 = 131;
  3924     061F  3083               	movlw	131
  3925     0620  0081               	movwf	1	;volatile
  3926                           
  3927                           ;main.c: 434:         milliseconds++;
  3928     0621  3001               	movlw	1
  3929     0622  07C9               	addwf	_milliseconds,f
  3930     0623  3000               	movlw	0
  3931     0624  1803               	skipnc
  3932     0625  3001               	movlw	1
  3933     0626  07CA               	addwf	_milliseconds+1,f
  3934     0627  3000               	movlw	0
  3935     0628  1803               	skipnc
  3936     0629  3001               	movlw	1
  3937     062A  07CB               	addwf	_milliseconds+2,f
  3938     062B  3000               	movlw	0
  3939     062C  1803               	skipnc
  3940     062D  3001               	movlw	1
  3941     062E  07CC               	addwf	_milliseconds+3,f
  3942     062F                     i1l1613:
  3943                           
  3944                           ;main.c: 435:         T0IF = 0;
  3945     062F  110B               	bcf	11,2	;volatile
  3946     0630                     i1l191:
  3947     0630  0873               	movf	??_IRS+3,w
  3948     0631  008A               	movwf	10
  3949     0632  0872               	movf	??_IRS+2,w
  3950     0633  0084               	movwf	4
  3951     0634  0E71               	swapf	??_IRS+1,w
  3952     0635  0083               	movwf	3
  3953     0636  0EFE               	swapf	btemp,f
  3954     0637  0E7E               	swapf	btemp,w
  3955     0638  0009               	retfie
  3956     0639                     __end_of_IRS:
  3957     007E                     btemp	set	126	;btemp
  3958     007E                     wtemp0	set	126
  3959                           
  3960                           	psect	intentry
  3961     0004                     __pintentry:	
  3962                           ;incstack = 0
  3963                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0]
  3964                           
  3965     0004                     interrupt_function:
  3966     007E                     saved_w	set	btemp
  3967     0004  00FE               	movwf	btemp
  3968     0005  0E03               	swapf	3,w
  3969     0006  00F1               	movwf	??_IRS+1
  3970     0007  0804               	movf	4,w
  3971     0008  00F2               	movwf	??_IRS+2
  3972     0009  080A               	movf	10,w
  3973     000A  00F3               	movwf	??_IRS+3
  3974     000B  120A  118A  2DFC   	ljmp	_IRS
  3975                           
  3976                           	psect	idloc
  3977                           
  3978                           ;Config register IDLOC0 @ 0x2000
  3979                           ;	unspecified, using default values
  3980     2000                     	org	8192
  3981     2000  3FFF               	dw	16383
  3982                           
  3983                           ;Config register IDLOC1 @ 0x2001
  3984                           ;	unspecified, using default values
  3985     2001                     	org	8193
  3986     2001  3FFF               	dw	16383
  3987                           
  3988                           ;Config register IDLOC2 @ 0x2002
  3989                           ;	unspecified, using default values
  3990     2002                     	org	8194
  3991     2002  3FFF               	dw	16383
  3992                           
  3993                           ;Config register IDLOC3 @ 0x2003
  3994                           ;	unspecified, using default values
  3995     2003                     	org	8195
  3996     2003  3FFF               	dw	16383
  3997                           
  3998                           	psect	config
  3999                           
  4000                           ;Config register CONFIG @ 0x2007
  4001                           ;	Oscillator Selection bits
  4002                           ;	FOSC = HS, HS oscillator
  4003                           ;	Watchdog Timer Enable bit
  4004                           ;	WDTE = OFF, WDT disabled
  4005                           ;	Power-up Timer Enable bit
  4006                           ;	PWRTE = ON, PWRT enabled
  4007                           ;	Brown-out Reset Enable bit
  4008                           ;	BOREN = ON, BOR enabled
  4009                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4010                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  4011                           ;	Data EEPROM Memory Code Protection bit
  4012                           ;	CPD = OFF, Data EEPROM code protection off
  4013                           ;	Flash Program Memory Write Enable bits
  4014                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4015                           ;	In-Circuit Debugger Mode bit
  4016                           ;	DEBUG = 0x1, unprogrammed default
  4017                           ;	Flash Program Memory Code Protection bit
  4018                           ;	CP = OFF, Code protection off
  4019     2007                     	org	8199
  4020     2007  3FF2               	dw	16370

Data Sizes:
    Strings     10
    Constant    19
    Data        5
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     41      49
    BANK1            80     66      72
    BANK3            96      0      50
    BANK2            96      0       0

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 50
		 -> main@packet(BANK1[50]), 

    strcat@str2	PTR unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[10]), main@num_rand_s(BANK1[16]), 

    strcat@str1	PTR unsigned char  size(1) Largest target is 50
		 -> main@packet(BANK1[50]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[10]), main@num_rand_s(BANK1[16]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> main@packet(BANK1[50]), 

    ConvertToString@str	PTR unsigned char  size(1) Largest target is 16
		 -> main@num_rand_s(BANK1[16]), 

    lcdPrint@str	PTR unsigned char  size(2) Largest target is 50
		 -> dato(BANK3[50]), main@num_rand_s(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_lcdSend
    _read_NumPad->___awmod
    _read_NumPad->_srand
    _rand->___lmul
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_TxString->_UART_TxChar
    _pow->___wmul
    _ConcatToPacket->_strcat

Critical Paths under _IRS in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ConvertToString
    _read_NumPad->___awmod
    _rand->___lmul
    ___awmod->_rand
    _lcdPrint->_lcdSend
    _init_PIC->_UART_init
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _ConcatToPacket->_strcat

Critical Paths under _IRS in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                66    66      0    9840
                                              0 BANK1     66    66      0
                     _ConcatToPacket
                    _ConvertToString
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                          2     2      0    1042
                                             25 BANK0      2     2      0
                            ___awmod
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             12 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              5 COMMON     1     1      0
                                             19 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2    1172
                                              2 BANK0      7     5      2
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             0     0      0    1816
                          _UART_init
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0     962
                                              2 BANK0      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1     962
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4     854
                                             28 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        4     4      0     197
                                              0 BANK0      4     4      0
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ConvertToString                                     13     8      5    3265
                                             28 BANK0     13     8      5
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                  9     7      2     663
                                              4 BANK0      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     316
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                              4 COMMON     1     1      0
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___almod                                             11     3      8     613
                                              4 COMMON     1     1      0
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     756
                                             13 BANK0     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    1128
                                             10 BANK0      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                              12    10      2     312
                                              4 COMMON     2     0      2
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _IRS                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConcatToPacket
     _strcat
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
     ___almod
     ___lmul
     _pow
   _UART_TxString
     _UART_TxChar
   _init_PIC
     _UART_init
       ___aldiv
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
   _lcdPrint
     _lcdSend
   _lcdSend
   _read_NumPad
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
     _srand

 _IRS (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      32       9       52.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     42      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     29      31       5       61.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B5      12        0.0%
ABS                  0      0      B5       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri May 26 15:36:36 2023

                          _i 00E7                            pc 0002                           fsr 0004  
        ___wmul@multiplicand 0022                          l110 074C                          l113 049B  
                        l122 05FB                          l107 0737                          l116 06CC  
                        l143 04E5                          l152 03E7                          l128 0674  
                        l138 0126                          l162 0175                          l155 0765  
                        l172 05BA                          l149 03C7                          l342 01E7  
                        l175 074E                          l352 026F                          l184 0718  
                        l169 01D2                          l178 075A                          l355 030E  
                        l291 052D                          l443 0442                          l365 0380  
                        l277 06DB                          l279 06F3                          l730 076E  
                        l733 0574                          _IRS 05FC                          u810 0257  
                        u730 01DA                          u811 0256                          u731 01D9  
                        u820 025C                          u740 01EB                          u821 025B  
                        u805 0249                          u741 01EA                          u750 020A  
                        u830 0598                          u751 0209                          u850 039A  
                        u770 021E                          u851 0399                          u771 021D  
                        u835 0593                          u860 03A5                          u765 020F  
                        u870 03D1                          u790 0239                          u791 0238  
                        u880 03E3                          u881 03E2                          u785 0220  
                        u795 0235                          _pow 0639                          fsr0 0004  
                        indf 0000                 ___awmod@sign 0038                         ?_IRS 0070  
                       l1301 05B7                         l1303 05B8                         l1305 05B9  
                       l1251 01D3                         l1331 0738                         l1261 01FA  
                       l1253 01D6                         l1333 073C                         l1421 03EF  
                       l1271 021E                         l1263 0202                         l1255 01DA  
                       l1335 0740                         l1431 0405                         l1423 03F4  
                       l1361 03BB                         l1353 0384                         l1281 0251  
                       l1273 0227                         l1265 020A                         l1257 01EB  
                       l1329 075B                         l1337 0744                         l1441 0421  
                       l1433 0408                         l1425 03F6                         l1417 03E8  
                       l1363 03C1                         l1355 0389                         l1275 0239  
                       l1267 020D                         l1283 0257                         l1259 01F6  
                       l1291 0575                         l1451 043E                         l1443 0427  
                       l1435 040F                         l1427 03FA                         l1419 03EB  
                       l1365 03E3                         l1357 038F                         l1285 025C  
                       l1277 0247                         l1269 021A                         l1293 057D  
                       l1621 06A8                         l1445 042E                         l1437 0413  
                       l1429 03FF                         l1701 054F                         l1359 039B  
                       l1287 0267                         l1279 0248                         l1711 0758  
                       l1295 0586                         l1631 06BF                         l1623 06AB  
                       l1615 06A3                         l1439 0417                         l1447 0434  
                       l1703 055D                         l1721 031D                         l1713 02FA  
                       l1641 06E2                         l1801 0060                         l1297 0589  
                       l1633 06C9                         l1625 06AD                         l1617 06A6  
                       l1449 0439                         l1369 0766                         l1731 034B  
                       l1723 0325                         l1715 02FD                         l1651 04F0  
                       l1643 06E9                         l1635 06CD                         l1811 00C3  
                       l1803 007F                         l1707 074E                         l1299 058A  
                       l1627 06B2                         l1619 06A7                         l1741 0378  
                       l1733 0359                         l1725 0328                         l1717 0301  
                       l1653 04F4                         l1645 06EF                         l1637 06CF  
                       l1821 011D                         l1813 00E4                         l1805 0082  
                       l1709 0754                         l1629 06BC                         l1831 049F  
                       l1735 0362                         l1727 0335                         l1719 0312  
                       l1655 050B                         l1639 06D5                         l1815 0104  
                       l1807 0086                         l1671 045B                         l1663 0443  
                       l1823 05BB                         l1841 04CC                         l1833 04AF  
                       l1729 0339                         l1737 0368                         l1657 0514  
                       l1649 04E6                         l1817 010A                         l1809 00B1  
                       l1681 048D                         l1673 046D                         l1665 0447  
                       l1745 0719                         l1825 05C0                         l1843 04D2  
                       l1835 04B5                         l1739 036D                         l1659 0525  
                       l1691 065B                         l1819 0110                         l1851 0705  
                       l1683 0494                         l1675 0478                         l1667 0451  
                       l1827 05DB                         l1771 0168                         l1755 0130  
                       l1747 0127                         l1845 04DF                         l1837 04BD  
                       l1693 0661                         l1685 063C                         l1853 070D  
                       l1677 047F                         l1669 0454                         l1829 05E3  
                       l1781 0185                         l1773 0173                         l1765 0141  
                       l1757 0135                         l1749 012F                         l1861 0286  
                       l1839 04C4                         l1695 066E                         l1687 0640  
                       l1847 06F7                         l1679 0486                         l1791 01CC  
                       l1783 018B                         l1775 0179                         l1767 014E  
                       l1759 0140                         l1871 02C1                         l1863 028D  
                       l1855 0270                         l1689 0643                         l1793 004D  
                       l1849 06FA                         l1785 01BA                         l1777 017F  
                       l1769 0159                         l1881 02E7                         l1873 02CF  
                       l1865 02A5                         l1857 0275                         l1795 0053  
                       l1699 052E                         l1787 01BF                         l1779 0184  
                       l1883 02F2                         l1867 02B0                         l1875 02D5  
                       l1859 027A                         l1797 0057                         l1789 01C8  
                       l1885 02F5                         l1877 02DB                         l1869 02B3  
                       l1799 005B                         l1879 02E0                         ?_pow 0024  
                       STR_1 0698                         u1000 03EF                         _T0IF 005A  
                       u1001 03EE                         u1010 03FA                         u1011 03F9  
                       u1020 0405                         u1021 0404                         u1040 0417  
                       u1041 0416                         u1050 0421                         u1051 0420  
                       u1035 0409                         u1070 0434                         u1071 0433  
                       u1055 041D                         u1320 06EF                         u1400 0754  
                       u1080 0439                         u1321 06EE                         u1305 06DC  
                       u1401 0753                         u1081 0438                         u1065 0428  
                       u1410 0301                         u1330 04F4                         u1411 0300  
                       u1331 04F3                         u1315 06E3                         u1420 0312  
                       u1500 014E                         u1421 0311                         u1341 04FD  
                       u1501 014D                         u1430 0325                         u1342 0504  
                       u1510 0168                         u1431 0324                         u1343 050B  
                       u1511 0167                         u1600 011D                         u1601 011C  
                       u1450 0339                         u1370 0525                         u1290 06D5  
                       u1610 05CC                         u1530 017F                         u1451 0338  
                       u1371 0524                         u1355 050D                         u1291 06D4  
                       u1531 017E                         u1460 034B                         u1380 066E  
                       u1620 05ED                         u1540 0184                         u1461 034A  
                       u1445 032A                         u1365 0515                         u1381 066D  
                       u1605 0119                         u1541 0183                         u1525 016B  
                       u1630 05FB                         u1390 056C                         u1550 018B  
                       u1631 05FA                         u1551 018A                         u1640 04B5  
                       u1480 0368                         u1560 01C8                         u1641 04B4  
                       u1481 0367                         u1465 0347                         u1385 066A  
                       u1561 01C7                         u1490 036D                         u1650 0718  
                       u1570 01D2                         u1491 036C                         u1475 035A  
                       u1651 0717                         u1707 0461                         u1395 0567  
                       u1571 01D1                         u1580 0057                         u1660 0286  
                       u1581 0056                         u1717 0473                         u1661 0285  
                       u1590 00B0                         u1670 02E0                         u1591 00AF  
                       u1727 06B8                         u1671 02DF                         _PIE1 008C  
                       u1737 06C5                         u1665 0282                         u1687 0154  
                       u1697 044D                         _RCIF 0065                         _PIR1 000C  
                       _TMR0 0001                         _dato 0190                         _main 0270  
          ConcatToPacket@pkt 0030                         _keyf 0076                         _keys 0685  
                       _rand 052E            ConcatToPacket@str 002A                         btemp 007E  
                       pow@b 0028                         pow@i 0029                         pow@n 002B  
                       start 000E                        ??_IRS 0070                        ??_pow 0026  
               ?_init_NumPad 0070                 ?_init_Timer0 0070              __end_of___aldiv 0270  
            __end_of___almod 0381                        ?_main 0070                        ?_rand 002C  
            __end_of___awmod 0443                 ?_read_NumPad 0070                        i1l191 0630  
                      _RCREG 001A                        _RCSTA 0018                        _SPBRG 0099  
                      _PORTB 0006                        _PORTD 0008                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _TXREG 0019  
                      _TXSTA 0098              __end_of_colMask 0698          ___lmul@multiplicand 0024  
            __end_of_lcdSend 06CD                        _randx 004D                        _srand 0766  
                      pclath 000A              __end_of_rowMask 0695                        status 0003  
                      wtemp0 007E              __initialization 0011                 __end_of_main 02FA  
               __end_of_keys 0691                 __end_of_rand 0575                       ??_main 0076  
                     ??_rand 002E            strcat@length_str1 0028                       ?_srand 0074  
                     i1l1601 060C                       i1l1611 061F                       i1l1603 0612  
                     i1l1613 062F                       i1l1605 0616                       i1l1607 0618  
                     i1l1609 061B                       i1l1597 05FC                       i1l1599 0602  
                     u127_20 0602                       u127_21 0601                       u128_20 061F  
                     u128_21 061E                       _INTCON 000B                 ?_UART_TxChar 0070  
           __end_of_lcdPrint 05FC                       ___lmul 04E6                    ??___aldiv 0035  
                  ??___almod 0074                       ___wmul 06CD            __end_of_UART_init 05BB  
                  ??___awmod 0075          ConcatToPacket@delim 002C             __end_of_init_LCD 049C  
           __end_of_init_PIC 0738              ___awmod@divisor 0033              ___awmod@counter 0037  
                  ??_lcdSend 0020                       _strcat 0381                 __pdataCOMMON 0079  
                     saved_w 007E                       pow@exp 0024                       srand@x 0074  
    __end_of__initialization 0049        __end_of_UART_TxString 0719               __pcstackCOMMON 0070  
               __pidataBANK0 0777                __end_of_srand 076F                      ??_srand 0076  
                 __pbssBANK0 0049                   __pbssBANK1 00E2                   __pbssBANK3 0190  
                 __pmaintext 0270                      ?___lmul 0020                      ?___wmul 0020  
                 __pintentry 0004               ___lmul@product 0028                      ?_strcat 0074  
                  ?_lcdPrint 0022       ConvertToString@n_cifre 0048                   __stringtab 0675  
                  ?_init_LCD 0070                    ?_init_PIC 0070            ??_ConvertToString 0041  
                    ___aldiv 01D3                      ___almod 02FA                      ___awmod 03E8  
                    _colMask 0695                      _colScan 0078                      _lcdSend 06A2  
                    __ptext1 0127                      __ptext2 0766                      __ptext3 052E  
                    __ptext4 03E8                      __ptext5 05BB                      __ptext6 0719  
                    __ptext7 0738                      __ptext8 075B                      __ptext9 0443  
             _ConcatToPacket 049C             ___awmod@dividend 0035             ___aldiv@dividend 0031  
                 _keypressed 0079                      _rowMask 0691                      _rowScan 0077  
                 ??_lcdPrint 0024                      clrloop0 0770         end_of_initialization 0049  
             main@num_rand_s 00D2                   ??_init_LCD 0022                   ??_init_PIC 0076  
             UART_TxString@n 0022             ___aldiv@quotient 0038                      strcat@n 0025  
     __end_of_ConcatToPacket 04E6                    _UART_init 0575                    _PORTEbits 0009  
                  _TRISEbits 0089                   main@packet 00A0               __end_of___lmul 052E  
             __end_of___wmul 06F4              ?_ConcatToPacket 002A                __pidataCOMMON 077B  
                 ?_UART_init 003C               __end_of_strcat 03E8          start_initialization 0011  
                __end_of_IRS 0639                  __end_of_pow 0675                     ??___lmul 0074  
                   ??___wmul 0074                ??_init_NumPad 0074                  __pdataBANK0 004D  
              ??_init_Timer0 0074                ??_read_NumPad 0039                     ??_strcat 0020  
                __pbssCOMMON 0076                    ___latbits 0002                __pcstackBANK0 0020  
              __pcstackBANK1 00A0              _ConvertToString 004D                     ?___aldiv 002D  
                   ?___almod 0020                     ?___awmod 0033             ___almod@dividend 0024  
                  __pstrings 0675                  ??_UART_init 0040                     ?_lcdSend 0074  
        __end_of_init_NumPad 0766          __end_of_init_Timer0 074D                UART_TxChar@ch 0075  
        __end_of_read_NumPad 01D3              ___aldiv@divisor 002D            interrupt_function 0004  
            ___aldiv@counter 0036               ___wmul@product 0074                 _milliseconds 0049  
                  clear_ram0 076F                ??_UART_TxChar 0074                _UART_TxString 06F4  
               _old_num_rand 00E2             ConvertToString@i 0046             ConvertToString@j 0044  
           ConvertToString@n 003C                    lcdPrint@n 0027                  __stringbase 0684  
          ___wmul@multiplier 0020      __end_of_ConvertToString 0127            ___lmul@multiplier 0020  
             ?_UART_TxString 0070             ??_ConcatToPacket 002D          __end_of_UART_TxChar 075B  
                _init_NumPad 075B                  _init_Timer0 0738           __end_of__stringtab 0685  
                _read_NumPad 0127                   strcat@str1 0027                   strcat@str2 0074  
                   __ptext10 06A2                     __ptext11 0575                     __ptext20 049C  
                   __ptext12 06F4                     __ptext21 0381                     __ptext13 074D  
                   __ptext22 05FC                     __ptext14 004D                     __ptext15 0639  
                   __ptext16 06CD                     __ptext17 04E6                     __ptext18 02FA  
                   __ptext19 01D3                     _lcdPrint 05BB             UART_TxString@str 0021  
            ___almod@divisor 0020  ConcatToPacket@packet_length 002E              ___almod@counter 0028  
                   _init_LCD 0443                     _init_PIC 0719                     _recieved 00E6  
                   _num_rand 00E4             ?_ConvertToString 003C                     intlevel1 0000  
          UART_init@baudrate 003C              ??_UART_TxString 0020          ConvertToString@temp 0042  
                  stringcode 067F                  _UART_TxChar 074D                   _OPTION_REG 0081  
                lcdSend@dato 0075                  lcdSend@tipo 0074           ConvertToString@str 0040  
                   stringdir 067F                     stringtab 0675                 ___aldiv@sign 0037  
                lcdPrint@str 0022                 ___almod@sign 0029  
