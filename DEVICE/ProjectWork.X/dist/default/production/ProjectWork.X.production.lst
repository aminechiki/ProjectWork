

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jul 05 12:23:49 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    62                           	dabs	1,0x7E,2
    63     0000                     
    64                           ; Version 2.40
    65                           ; Generated 17/11/2021 GMT
    66                           ; 
    67                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC16F877A Definitions
    97                           ; 
    98                           ; SFR Addresses
    99     0000                     	;# 
   100     0001                     	;# 
   101     0002                     	;# 
   102     0003                     	;# 
   103     0004                     	;# 
   104     0005                     	;# 
   105     0006                     	;# 
   106     0007                     	;# 
   107     0008                     	;# 
   108     0009                     	;# 
   109     000A                     	;# 
   110     000B                     	;# 
   111     000C                     	;# 
   112     000D                     	;# 
   113     000E                     	;# 
   114     000E                     	;# 
   115     000F                     	;# 
   116     0010                     	;# 
   117     0011                     	;# 
   118     0012                     	;# 
   119     0013                     	;# 
   120     0014                     	;# 
   121     0015                     	;# 
   122     0015                     	;# 
   123     0016                     	;# 
   124     0017                     	;# 
   125     0018                     	;# 
   126     0019                     	;# 
   127     001A                     	;# 
   128     001B                     	;# 
   129     001B                     	;# 
   130     001C                     	;# 
   131     001D                     	;# 
   132     001E                     	;# 
   133     001F                     	;# 
   134     0081                     	;# 
   135     0085                     	;# 
   136     0086                     	;# 
   137     0087                     	;# 
   138     0088                     	;# 
   139     0089                     	;# 
   140     008C                     	;# 
   141     008D                     	;# 
   142     008E                     	;# 
   143     0091                     	;# 
   144     0092                     	;# 
   145     0093                     	;# 
   146     0094                     	;# 
   147     0098                     	;# 
   148     0099                     	;# 
   149     009C                     	;# 
   150     009D                     	;# 
   151     009E                     	;# 
   152     009F                     	;# 
   153     010C                     	;# 
   154     010D                     	;# 
   155     010E                     	;# 
   156     010F                     	;# 
   157     018C                     	;# 
   158     018D                     	;# 
   159     0000                     	;# 
   160     0001                     	;# 
   161     0002                     	;# 
   162     0003                     	;# 
   163     0004                     	;# 
   164     0005                     	;# 
   165     0006                     	;# 
   166     0007                     	;# 
   167     0008                     	;# 
   168     0009                     	;# 
   169     000A                     	;# 
   170     000B                     	;# 
   171     000C                     	;# 
   172     000D                     	;# 
   173     000E                     	;# 
   174     000E                     	;# 
   175     000F                     	;# 
   176     0010                     	;# 
   177     0011                     	;# 
   178     0012                     	;# 
   179     0013                     	;# 
   180     0014                     	;# 
   181     0015                     	;# 
   182     0015                     	;# 
   183     0016                     	;# 
   184     0017                     	;# 
   185     0018                     	;# 
   186     0019                     	;# 
   187     001A                     	;# 
   188     001B                     	;# 
   189     001B                     	;# 
   190     001C                     	;# 
   191     001D                     	;# 
   192     001E                     	;# 
   193     001F                     	;# 
   194     0081                     	;# 
   195     0085                     	;# 
   196     0086                     	;# 
   197     0087                     	;# 
   198     0088                     	;# 
   199     0089                     	;# 
   200     008C                     	;# 
   201     008D                     	;# 
   202     008E                     	;# 
   203     0091                     	;# 
   204     0092                     	;# 
   205     0093                     	;# 
   206     0094                     	;# 
   207     0098                     	;# 
   208     0099                     	;# 
   209     009C                     	;# 
   210     009D                     	;# 
   211     009E                     	;# 
   212     009F                     	;# 
   213     010C                     	;# 
   214     010D                     	;# 
   215     010E                     	;# 
   216     010F                     	;# 
   217     018C                     	;# 
   218     018D                     	;# 
   219     0000                     	;# 
   220     0001                     	;# 
   221     0002                     	;# 
   222     0003                     	;# 
   223     0004                     	;# 
   224     0005                     	;# 
   225     0006                     	;# 
   226     0007                     	;# 
   227     0008                     	;# 
   228     0009                     	;# 
   229     000A                     	;# 
   230     000B                     	;# 
   231     000C                     	;# 
   232     000D                     	;# 
   233     000E                     	;# 
   234     000E                     	;# 
   235     000F                     	;# 
   236     0010                     	;# 
   237     0011                     	;# 
   238     0012                     	;# 
   239     0013                     	;# 
   240     0014                     	;# 
   241     0015                     	;# 
   242     0015                     	;# 
   243     0016                     	;# 
   244     0017                     	;# 
   245     0018                     	;# 
   246     0019                     	;# 
   247     001A                     	;# 
   248     001B                     	;# 
   249     001B                     	;# 
   250     001C                     	;# 
   251     001D                     	;# 
   252     001E                     	;# 
   253     001F                     	;# 
   254     0081                     	;# 
   255     0085                     	;# 
   256     0086                     	;# 
   257     0087                     	;# 
   258     0088                     	;# 
   259     0089                     	;# 
   260     008C                     	;# 
   261     008D                     	;# 
   262     008E                     	;# 
   263     0091                     	;# 
   264     0092                     	;# 
   265     0093                     	;# 
   266     0094                     	;# 
   267     0098                     	;# 
   268     0099                     	;# 
   269     009C                     	;# 
   270     009D                     	;# 
   271     009E                     	;# 
   272     009F                     	;# 
   273     010C                     	;# 
   274     010D                     	;# 
   275     010E                     	;# 
   276     010F                     	;# 
   277     018C                     	;# 
   278     018D                     	;# 
   279     0000                     	;# 
   280     0001                     	;# 
   281     0002                     	;# 
   282     0003                     	;# 
   283     0004                     	;# 
   284     0005                     	;# 
   285     0006                     	;# 
   286     0007                     	;# 
   287     0008                     	;# 
   288     0009                     	;# 
   289     000A                     	;# 
   290     000B                     	;# 
   291     000C                     	;# 
   292     000D                     	;# 
   293     000E                     	;# 
   294     000E                     	;# 
   295     000F                     	;# 
   296     0010                     	;# 
   297     0011                     	;# 
   298     0012                     	;# 
   299     0013                     	;# 
   300     0014                     	;# 
   301     0015                     	;# 
   302     0015                     	;# 
   303     0016                     	;# 
   304     0017                     	;# 
   305     0018                     	;# 
   306     0019                     	;# 
   307     001A                     	;# 
   308     001B                     	;# 
   309     001B                     	;# 
   310     001C                     	;# 
   311     001D                     	;# 
   312     001E                     	;# 
   313     001F                     	;# 
   314     0081                     	;# 
   315     0085                     	;# 
   316     0086                     	;# 
   317     0087                     	;# 
   318     0088                     	;# 
   319     0089                     	;# 
   320     008C                     	;# 
   321     008D                     	;# 
   322     008E                     	;# 
   323     0091                     	;# 
   324     0092                     	;# 
   325     0093                     	;# 
   326     0094                     	;# 
   327     0098                     	;# 
   328     0099                     	;# 
   329     009C                     	;# 
   330     009D                     	;# 
   331     009E                     	;# 
   332     009F                     	;# 
   333     010C                     	;# 
   334     010D                     	;# 
   335     010E                     	;# 
   336     010F                     	;# 
   337     018C                     	;# 
   338     018D                     	;# 
   339                           
   340                           	psect	idataBANK0
   341     1511                     __pidataBANK0:
   342                           
   343                           ;initializer for _randx
   344     1511  3401               	retlw	1
   345     1512  3400               	retlw	0
   346     1513  3400               	retlw	0
   347     1514  3400               	retlw	0
   348                           
   349                           	psect	idataBANK1
   350     0003                     __pidataBANK1:
   351                           
   352                           ;initializer for _keypressed
   353     0003  3463               	retlw	99
   354                           
   355                           	psect	idataBANK3
   356     081A                     __pidataBANK3:
   357                           
   358                           ;initializer for _maxFail
   359     081A  3403               	retlw	3
   360                           
   361                           ;initializer for _initialize
   362     081B  3401               	retlw	1
   363                           
   364                           	psect	stringtext
   365     0700                     __pstringtext:
   366     0700                     stringtab:
   367     0700                     __stringtab:
   368                           
   369                           ;	String table - string pointers are 2 bytes each
   370     0700  1BFF               	btfsc	btemp+1,7
   371     0701  2F0A               	ljmp	stringcode
   372     0702  1383               	bcf	3,7
   373     0703  187F               	btfsc	btemp+1,0
   374     0704  1783               	bsf	3,7
   375     0705  0800               	movf	0,w
   376     0706  0A84               	incf	4,f
   377     0707  1903               	skipnz
   378     0708  0AFF               	incf	btemp+1,f
   379     0709  0008               	return
   380     070A                     stringcode:
   381     070A  087F               	movf	btemp+1,w
   382     070B  397F               	andlw	127
   383     070C  008A               	movwf	10
   384     070D  0804               	movf	4,w
   385     070E  0A84               	incf	4,f
   386     070F  1903               	skipnz
   387     0710  0AFF               	incf	btemp+1,f
   388     0711  0082               	movwf	2
   389     0712                     __stringbase:
   390     0712                     __end_of__stringtab:
   391     0712                     _keys:
   392     0712  342A               	retlw	42
   393     0713  3437               	retlw	55
   394     0714  3434               	retlw	52
   395     0715  3431               	retlw	49
   396     0716  3430               	retlw	48
   397     0717  3438               	retlw	56
   398     0718  3435               	retlw	53
   399     0719  3432               	retlw	50
   400     071A  3423               	retlw	35
   401     071B  3439               	retlw	57
   402     071C  3436               	retlw	54
   403     071D  3433               	retlw	51
   404     071E                     __end_of_keys:
   405     071E                     _rowMask:
   406     071E  3401               	retlw	1
   407     071F  3402               	retlw	2
   408     0720  3404               	retlw	4
   409     0721  3408               	retlw	8
   410     0722                     __end_of_rowMask:
   411     0722                     _colMask:
   412     0722  34FE               	retlw	254
   413     0723  34FD               	retlw	253
   414     0724  34FB               	retlw	251
   415     0725                     __end_of_colMask:
   416     000B                     _INTCONbits	set	11
   417     0003                     _STATUSbits	set	3
   418     001A                     _RCREG	set	26
   419     0019                     _TXREG	set	25
   420     000C                     _PIR1	set	12
   421     0018                     _RCSTA	set	24
   422     0006                     _PORTB	set	6
   423     0008                     _PORTD	set	8
   424     0009                     _PORTEbits	set	9
   425     0001                     _TMR0	set	1
   426     000B                     _INTCON	set	11
   427     005A                     _T0IF	set	90
   428     0065                     _RCIF	set	101
   429     008C                     _PIE1	set	140
   430     0099                     _SPBRG	set	153
   431     0098                     _TXSTA	set	152
   432     0087                     _TRISC	set	135
   433     0086                     _TRISB	set	134
   434     0089                     _TRISEbits	set	137
   435     0088                     _TRISD	set	136
   436     0081                     _OPTION_REG	set	129
   437     010C                     _EEDATA	set	268
   438     010D                     _EEADR	set	269
   439     018D                     _EECON2	set	397
   440     018C                     _EECON1	set	396
   441     018C                     _EECON1bits	set	396
   442     0725                     STR_9:
   443     0725  3423               	retlw	35	;'#'
   444     0726  3420               	retlw	32	;' '
   445     0727  3470               	retlw	112	;'p'
   446     0728  3465               	retlw	101	;'e'
   447     0729  3472               	retlw	114	;'r'
   448     072A  3420               	retlw	32	;' '
   449     072B  3461               	retlw	97	;'a'
   450     072C  346C               	retlw	108	;'l'
   451     072D  3474               	retlw	116	;'t'
   452     072E  3472               	retlw	114	;'r'
   453     072F  346F               	retlw	111	;'o'
   454     0730  3420               	retlw	32	;' '
   455     0731  3463               	retlw	99	;'c'
   456     0732  346F               	retlw	111	;'o'
   457     0733  3464               	retlw	100	;'d'
   458     0734  342E               	retlw	46	;'.'
   459     0735  3400               	retlw	0
   460     0736  3400               	retlw	0
   461     0737                     STR_14:
   462     0737  3449               	retlw	73	;'I'
   463     0738  346E               	retlw	110	;'n'
   464     0739  3473               	retlw	115	;'s'
   465     073A  3465               	retlw	101	;'e'
   466     073B  3472               	retlw	114	;'r'
   467     073C  3469               	retlw	105	;'i'
   468     073D  3473               	retlw	115	;'s'
   469     073E  3463               	retlw	99	;'c'
   470     073F  3469               	retlw	105	;'i'
   471     0740  3420               	retlw	32	;' '
   472     0741  3463               	retlw	99	;'c'
   473     0742  346F               	retlw	111	;'o'
   474     0743  3464               	retlw	100	;'d'
   475     0744  3469               	retlw	105	;'i'
   476     0745  3463               	retlw	99	;'c'
   477     0746  3465               	retlw	101	;'e'
   478     0747  3400               	retlw	0
   479     0748  3400               	retlw	0
   480     0749                     STR_10:
   481     0749  3423               	retlw	35	;'#'
   482     074A  343D               	retlw	61	;'='
   483     074B  3463               	retlw	99	;'c'
   484     074C  346F               	retlw	111	;'o'
   485     074D  346E               	retlw	110	;'n'
   486     074E  3466               	retlw	102	;'f'
   487     074F  342E               	retlw	46	;'.'
   488     0750  3420               	retlw	32	;' '
   489     0751  342A               	retlw	42	;'*'
   490     0752  343D               	retlw	61	;'='
   491     0753  3463               	retlw	99	;'c'
   492     0754  3461               	retlw	97	;'a'
   493     0755  346E               	retlw	110	;'n'
   494     0756  3463               	retlw	99	;'c'
   495     0757  342E               	retlw	46	;'.'
   496     0758  3400               	retlw	0
   497     0759  3400               	retlw	0
   498     075A                     STR_2:
   499     075A  3470               	retlw	112	;'p'
   500     075B  3465               	retlw	101	;'e'
   501     075C  3472               	retlw	114	;'r'
   502     075D  3420               	retlw	32	;' '
   503     075E  3467               	retlw	103	;'g'
   504     075F  3465               	retlw	101	;'e'
   505     0760  346E               	retlw	110	;'n'
   506     0761  342E               	retlw	46	;'.'
   507     0762  3420               	retlw	32	;' '
   508     0763  3463               	retlw	99	;'c'
   509     0764  346F               	retlw	111	;'o'
   510     0765  3464               	retlw	100	;'d'
   511     0766  3469               	retlw	105	;'i'
   512     0767  3463               	retlw	99	;'c'
   513     0768  3465               	retlw	101	;'e'
   514     0769  3400               	retlw	0
   515     076A  3400               	retlw	0
   516     076B                     STR_12:
   517     076B  3441               	retlw	65	;'A'
   518     076C  3474               	retlw	116	;'t'
   519     076D  3474               	retlw	116	;'t'
   520     076E  3465               	retlw	101	;'e'
   521     076F  346E               	retlw	110	;'n'
   522     0770  3464               	retlw	100	;'d'
   523     0771  3469               	retlw	105	;'i'
   524     0772  3420               	retlw	32	;' '
   525     0773  3433               	retlw	51	;'3'
   526     0774  3430               	retlw	48	;'0'
   527     0775  3473               	retlw	115	;'s'
   528     0776  342E               	retlw	46	;'.'
   529     0777  342E               	retlw	46	;'.'
   530     0778  342E               	retlw	46	;'.'
   531     0779  3400               	retlw	0
   532     077A  3400               	retlw	0
   533     077B                     STR_23:
   534     077B  3449               	retlw	73	;'I'
   535     077C  346E               	retlw	110	;'n'
   536     077D  3473               	retlw	115	;'s'
   537     077E  3465               	retlw	101	;'e'
   538     077F  3472               	retlw	114	;'r'
   539     0780  342E               	retlw	46	;'.'
   540     0781  3420               	retlw	32	;' '
   541     0782  3449               	retlw	73	;'I'
   542     0783  3444               	retlw	68	;'D'
   543     0784  3420               	retlw	32	;' '
   544     0785  3450               	retlw	80	;'P'
   545     0786  3449               	retlw	73	;'I'
   546     0787  3443               	retlw	67	;'C'
   547     0788  343A               	retlw	58	;':'
   548     0789  3400               	retlw	0
   549     078A  3400               	retlw	0
   550     078B                     STR_20:
   551     078B  3454               	retlw	84	;'T'
   552     078C  3465               	retlw	101	;'e'
   553     078D  346E               	retlw	110	;'n'
   554     078E  3474               	retlw	116	;'t'
   555     078F  342E               	retlw	46	;'.'
   556     0790  3420               	retlw	32	;' '
   557     0791  3465               	retlw	101	;'e'
   558     0792  3473               	retlw	115	;'s'
   559     0793  3461               	retlw	97	;'a'
   560     0794  3475               	retlw	117	;'u'
   561     0795  3472               	retlw	114	;'r'
   562     0796  3469               	retlw	105	;'i'
   563     0797  3474               	retlw	116	;'t'
   564     0798  3469               	retlw	105	;'i'
   565     0799  3400               	retlw	0
   566     079A  3400               	retlw	0
   567     079B                     STR_24:
   568     079B  344D               	retlw	77	;'M'
   569     079C  3449               	retlw	73	;'I'
   570     079D  344E               	retlw	78	;'N'
   571     079E  343D               	retlw	61	;'='
   572     079F  3430               	retlw	48	;'0'
   573     07A0  342C               	retlw	44	;','
   574     07A1  344D               	retlw	77	;'M'
   575     07A2  3441               	retlw	65	;'A'
   576     07A3  3458               	retlw	88	;'X'
   577     07A4  343D               	retlw	61	;'='
   578     07A5  3432               	retlw	50	;'2'
   579     07A6  3435               	retlw	53	;'5'
   580     07A7  3430               	retlw	48	;'0'
   581     07A8  3400               	retlw	0
   582     07A9  3400               	retlw	0
   583     07AA                     STR_18:
   584     07AA  3443               	retlw	67	;'C'
   585     07AB  346F               	retlw	111	;'o'
   586     07AC  3464               	retlw	100	;'d'
   587     07AD  3469               	retlw	105	;'i'
   588     07AE  3463               	retlw	99	;'c'
   589     07AF  3465               	retlw	101	;'e'
   590     07B0  3420               	retlw	32	;' '
   591     07B1  3465               	retlw	101	;'e'
   592     07B2  3472               	retlw	114	;'r'
   593     07B3  3472               	retlw	114	;'r'
   594     07B4  3461               	retlw	97	;'a'
   595     07B5  3474               	retlw	116	;'t'
   596     07B6  346F               	retlw	111	;'o'
   597     07B7  3400               	retlw	0
   598     07B8  3400               	retlw	0
   599     07B9                     STR_15:
   600     07B9  3454               	retlw	84	;'T'
   601     07BA  3465               	retlw	101	;'e'
   602     07BB  346E               	retlw	110	;'n'
   603     07BC  3474               	retlw	116	;'t'
   604     07BD  3461               	retlw	97	;'a'
   605     07BE  3474               	retlw	116	;'t'
   606     07BF  3469               	retlw	105	;'i'
   607     07C0  3476               	retlw	118	;'v'
   608     07C1  3469               	retlw	105	;'i'
   609     07C2  343A               	retlw	58	;':'
   610     07C3  3420               	retlw	32	;' '
   611     07C4  3400               	retlw	0
   612     07C5  3400               	retlw	0
   613     07C6                     STR_16:
   614     07C6  3442               	retlw	66	;'B'
   615     07C7  3465               	retlw	101	;'e'
   616     07C8  346E               	retlw	110	;'n'
   617     07C9  3476               	retlw	118	;'v'
   618     07CA  3465               	retlw	101	;'e'
   619     07CB  346E               	retlw	110	;'n'
   620     07CC  3475               	retlw	117	;'u'
   621     07CD  3474               	retlw	116	;'t'
   622     07CE  346F               	retlw	111	;'o'
   623     07CF  3421               	retlw	33	;'!'
   624     07D0  3400               	retlw	0
   625     07D1  3400               	retlw	0
   626     07D2                     STR_7:
   627     07D2  3449               	retlw	73	;'I'
   628     07D3  3444               	retlw	68	;'D'
   629     07D4  3420               	retlw	32	;' '
   630     07D5  3453               	retlw	83	;'S'
   631     07D6  3461               	retlw	97	;'a'
   632     07D7  346C               	retlw	108	;'l'
   633     07D8  3476               	retlw	118	;'v'
   634     07D9  3461               	retlw	97	;'a'
   635     07DA  3474               	retlw	116	;'t'
   636     07DB  346F               	retlw	111	;'o'
   637     07DC  3400               	retlw	0
   638     07DD  3400               	retlw	0
   639     07DE                     STR_1:
   640     07DE  3450               	retlw	80	;'P'
   641     07DF  3472               	retlw	114	;'r'
   642     07E0  3465               	retlw	101	;'e'
   643     07E1  346D               	retlw	109	;'m'
   644     07E2  3469               	retlw	105	;'i'
   645     07E3  3420               	retlw	32	;' '
   646     07E4  3427               	retlw	39	;'''
   647     07E5  3423               	retlw	35	;'#'
   648     07E6  3427               	retlw	39	;'''
   649     07E7  3400               	retlw	0
   650     07E8  3400               	retlw	0
   651     07E9                     STR_8:
   652     07E9  3443               	retlw	67	;'C'
   653     07EA  346F               	retlw	111	;'o'
   654     07EB  3464               	retlw	100	;'d'
   655     07EC  3469               	retlw	105	;'i'
   656     07ED  3463               	retlw	99	;'c'
   657     07EE  3465               	retlw	101	;'e'
   658     07EF  343A               	retlw	58	;':'
   659     07F0  3420               	retlw	32	;' '
   660     07F1  3400               	retlw	0
   661     07F2  3400               	retlw	0
   662     07F3                     STR_4:
   663     07F3  3449               	retlw	73	;'I'
   664     07F4  3444               	retlw	68	;'D'
   665     07F5  3420               	retlw	32	;' '
   666     07F6  343E               	retlw	62	;'>'
   667     07F7  3420               	retlw	32	;' '
   668     07F8  3432               	retlw	50	;'2'
   669     07F9  3435               	retlw	53	;'5'
   670     07FA  3430               	retlw	48	;'0'
   671     07FB  3400               	retlw	0
   672     07FC  3400               	retlw	0
   673     07FD                     STR_6:
   674     07FD  3449               	retlw	73	;'I'
   675     07FE  3444               	retlw	68	;'D'
   676     07FF  3420               	retlw	32	;' '
   677     0800  3456               	retlw	86	;'V'
   678     0801  3455               	retlw	85	;'U'
   679     0802  344F               	retlw	79	;'O'
   680     0803  3454               	retlw	84	;'T'
   681     0804  344F               	retlw	79	;'O'
   682     0805  3400               	retlw	0
   683     0806  3400               	retlw	0
   684     0807                     STR_3:
   685     0807  3445               	retlw	69	;'E'
   686     0808  3452               	retlw	82	;'R'
   687     0809  3452               	retlw	82	;'R'
   688     080A  344F               	retlw	79	;'O'
   689     080B  3452               	retlw	82	;'R'
   690     080C  3445               	retlw	69	;'E'
   691     080D  3400               	retlw	0
   692     080E  3400               	retlw	0
   693     080F                     STR_21:
   694     080F  3431               	retlw	49	;'1'
   695     0810  342F               	retlw	47	;'/'
   696     0811  3430               	retlw	48	;'0'
   697     0812  3400               	retlw	0
   698     0813                     STR_17:
   699     0813  3431               	retlw	49	;'1'
   700     0814  342F               	retlw	47	;'/'
   701     0815  3431               	retlw	49	;'1'
   702     0816  3400               	retlw	0
   703     0817                     STR_13:
   704     0817  3432               	retlw	50	;'2'
   705     0818  3400               	retlw	0
   706     07E9                     
   707                           	psect	cinit
   708     0013                     start_initialization:	
   709                           ; #config settings
   710                           
   711     0013                     __initialization:
   712                           
   713                           ; Initialize objects allocated to BANK3
   714     0013  1683               	bsf	3,5	;RP0=1, select bank3
   715     0014  1703               	bsf	3,6	;RP1=1, select bank3
   716     0015  120A  158A  201A  120A  118A  	fcall	__pidataBANK3	;fetch initializer
   717     001A  00CF               	movwf	__pdataBANK3& (0+127)
   718     001B  120A  158A  201B  120A  118A  	fcall	__pidataBANK3+1	;fetch initializer
   719     0020  00D0               	movwf	(__pdataBANK3+1)& (0+127)
   720                           
   721                           ; Initialize objects allocated to BANK1
   722     0021  1683               	bsf	3,5	;RP0=1, select bank1
   723     0022  1303               	bcf	3,6	;RP1=0, select bank1
   724     0023  120A  118A  2003  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   725     0028  00EF               	movwf	__pdataBANK1& (0+127)
   726                           
   727                           ; Initialize objects allocated to BANK0
   728     0029  1283               	bcf	3,5	;RP0=0, select bank0
   729     002A  1303               	bcf	3,6	;RP1=0, select bank0
   730     002B  160A  118A  2511  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   731     0030  00D0               	movwf	__pdataBANK0& (0+127)
   732     0031  160A  118A  2512  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   733     0036  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   734     0037  160A  118A  2513  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   735     003C  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   736     003D  160A  118A  2514  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   737     0042  00D3               	movwf	(__pdataBANK0+3)& (0+127)
   738                           
   739                           ; Clear objects allocated to BANK3
   740     0043  1783               	bsf	3,7	;select IRP bank2
   741     0044  3090               	movlw	low __pbssBANK3
   742     0045  0084               	movwf	4
   743     0046  30CB               	movlw	low (__pbssBANK3+59)
   744     0047  160A  118A  2515  120A  118A  	fcall	clear_ram0
   745                           
   746                           ; Clear objects allocated to BANK2
   747     004C  3010               	movlw	low __pbssBANK2
   748     004D  0084               	movwf	4
   749     004E  3042               	movlw	low (__pbssBANK2+50)
   750     004F  160A  118A  2515  120A  118A  	fcall	clear_ram0
   751                           
   752                           ; Clear objects allocated to BANK1
   753     0054  1383               	bcf	3,7	;select IRP bank0
   754     0055  30E4               	movlw	low __pbssBANK1
   755     0056  0084               	movwf	4
   756     0057  30EF               	movlw	low (__pbssBANK1+11)
   757     0058  160A  118A  2515  120A  118A  	fcall	clear_ram0
   758                           
   759                           ; Clear objects allocated to BANK0
   760     005D  303E               	movlw	low __pbssBANK0
   761     005E  0084               	movwf	4
   762     005F  3050               	movlw	low (__pbssBANK0+18)
   763     0060  160A  118A  2515  120A  118A  	fcall	clear_ram0
   764     0065                     end_of_initialization:	
   765                           ;End of C runtime variable initialization code
   766                           
   767     0065                     __end_of__initialization:
   768     0065  0183               	clrf	3
   769     0066  120A  118A  2869   	ljmp	_main	;jump to C main() function
   770                           
   771                           	psect	bssBANK0
   772     003E                     __pbssBANK0:
   773     003E                     _iS:
   774     003E                     	ds	1
   775     003F                     _datoSeriale:
   776     003F                     	ds	17
   777                           
   778                           	psect	dataBANK0
   779     0050                     __pdataBANK0:
   780     0050                     _randx:
   781     0050                     	ds	4
   782                           
   783                           	psect	bssBANK1
   784     00E4                     __pbssBANK1:
   785     00E4                     _seconds:
   786     00E4                     	ds	4
   787     00E8                     _milliseconds:
   788     00E8                     	ds	4
   789     00EC                     _keyf:
   790     00EC                     	ds	1
   791     00ED                     _rowScan:
   792     00ED                     	ds	1
   793     00EE                     _colScan:
   794     00EE                     	ds	1
   795                           
   796                           	psect	dataBANK1
   797     00EF                     __pdataBANK1:
   798     00EF                     _keypressed:
   799     00EF                     	ds	1
   800                           
   801                           	psect	bssBANK3
   802     0190                     __pbssBANK3:
   803     0190                     _old_num_rand:
   804     0190                     	ds	2
   805     0192                     _num_rand:
   806     0192                     	ds	2
   807     0194                     _pr_countdown:
   808     0194                     	ds	1
   809     0195                     _pr_succ:
   810     0195                     	ds	1
   811     0196                     _pr_empty:
   812     0196                     	ds	1
   813     0197                     _pr_err_max:
   814     0197                     	ds	1
   815     0198                     _pr_start:
   816     0198                     	ds	1
   817     0199                     _fail:
   818     0199                     	ds	1
   819     019A                     _success:
   820     019A                     	ds	1
   821     019B                     _compare:
   822     019B                     	ds	1
   823     019C                     _recieved:
   824     019C                     	ds	1
   825     019D                     _old_iT:
   826     019D                     	ds	1
   827     019E                     _iT:
   828     019E                     	ds	1
   829     019F                     _type:
   830     019F                     	ds	1
   831     01A0                     _source:
   832     01A0                     	ds	1
   833     01A1                     _old_i_id:
   834     01A1                     	ds	1
   835     01A2                     _i_id:
   836     01A2                     	ds	1
   837     01A3                     _datoTastierino:
   838     01A3                     	ds	17
   839     01B4                     _packet:
   840     01B4                     	ds	15
   841     01C3                     _id_dest:
   842     01C3                     	ds	4
   843     01C7                     _PIC_ID:
   844     01C7                     	ds	4
   845                           
   846                           	psect	dataBANK3
   847     01CF                     __pdataBANK3:
   848     01CF                     _maxFail:
   849     01CF                     	ds	1
   850     01D0                     _initialize:
   851     01D0                     	ds	1
   852                           
   853                           	psect	bssBANK2
   854     0110                     __pbssBANK2:
   855     0110                     _dato:
   856     0110                     	ds	50
   857                           
   858                           	psect	clrtext
   859     1515                     clear_ram0:	
   860                           ;	Called with FSR containing the base address, and
   861                           ;	W with the last address+1
   862                           
   863     1515  0064               	clrwdt	;clear the watchdog before getting into this loop
   864     1516                     clrloop0:
   865     1516  0180               	clrf	0	;clear RAM location pointed to by FSR
   866     1517  0A84               	incf	4,f	;increment pointer
   867     1518  0604               	xorwf	4,w	;XOR with final address
   868     1519  1903               	btfsc	3,2	;have we reached the end yet?
   869     151A  3400               	retlw	0	;all done for this memory range, return
   870     151B  0604               	xorwf	4,w	;XOR again to restore value
   871     151C  2D16               	goto	clrloop0	;do the next byte
   872                           
   873                           	psect	cstackBANK3
   874     01CB                     __pcstackBANK3:
   875     01CB                     ??_init_PIC:
   876                           
   877                           ; 1 bytes @ 0x0
   878     01CB                     	ds	2
   879     01CD                     init_PIC@id:
   880                           
   881                           ; 2 bytes @ 0x2
   882     01CD                     	ds	2
   883                           
   884                           	psect	cstackBANK2
   885     0142                     __pcstackBANK2:
   886     0142                     main@num_rand_s:
   887                           
   888                           ; 16 bytes @ 0x0
   889     0142                     	ds	16
   890     0152                     main@num_rand_s_231:
   891                           
   892                           ; 16 bytes @ 0x10
   893     0152                     	ds	16
   894                           
   895                           	psect	cstackBANK1
   896     00A0                     __pcstackBANK1:
   897     00A0                     ??_lcdSend:
   898     00A0                     ?_strcopy:	
   899                           ; 1 bytes @ 0x0
   900                           
   901     00A0                     ??_Length:	
   902                           ; 1 bytes @ 0x0
   903                           
   904     00A0                     ?___lmul:	
   905                           ; 1 bytes @ 0x0
   906                           
   907     00A0                     ?___almod:	
   908                           ; 4 bytes @ 0x0
   909                           
   910     00A0                     eeprom_write@addr:	
   911                           ; 4 bytes @ 0x0
   912                           
   913     00A0                     strcopy@dest:	
   914                           ; 1 bytes @ 0x0
   915                           
   916     00A0                     ___lmul@multiplier:	
   917                           ; 2 bytes @ 0x0
   918                           
   919     00A0                     ___almod@divisor:	
   920                           ; 4 bytes @ 0x0
   921                           
   922                           
   923                           ; 4 bytes @ 0x0
   924     00A0                     	ds	2
   925     00A2                     ?_lcdPrint:
   926     00A2                     ??_init_LCD:	
   927                           ; 1 bytes @ 0x2
   928                           
   929     00A2                     strcopy@source:	
   930                           ; 1 bytes @ 0x2
   931                           
   932     00A2                     lcdPrint@str:	
   933                           ; 1 bytes @ 0x2
   934                           
   935                           
   936                           ; 2 bytes @ 0x2
   937     00A2                     	ds	1
   938     00A3                     ??_strcopy:
   939     00A3                     Length@len:	
   940                           ; 1 bytes @ 0x3
   941                           
   942                           
   943                           ; 2 bytes @ 0x3
   944     00A3                     	ds	1
   945     00A4                     ??_lcdPrint:
   946     00A4                     ___lmul@multiplicand:	
   947                           ; 1 bytes @ 0x4
   948                           
   949     00A4                     ___almod@dividend:	
   950                           ; 4 bytes @ 0x4
   951                           
   952                           
   953                           ; 4 bytes @ 0x4
   954     00A4                     	ds	1
   955     00A5                     ?_CompareStrings:
   956     00A5                     ??_Fill:	
   957                           ; 1 bytes @ 0x5
   958                           
   959     00A5                     ?_strcat:	
   960                           ; 1 bytes @ 0x5
   961                           
   962     00A5                     strcat@source:	
   963                           ; 2 bytes @ 0x5
   964                           
   965     00A5                     CompareStrings@str1:	
   966                           ; 2 bytes @ 0x5
   967                           
   968                           
   969                           ; 2 bytes @ 0x5
   970     00A5                     	ds	1
   971     00A6                     Fill@length:
   972                           
   973                           ; 2 bytes @ 0x6
   974     00A6                     	ds	1
   975     00A7                     ??_strcat:
   976     00A7                     CompareStrings@str2:	
   977                           ; 1 bytes @ 0x7
   978                           
   979     00A7                     lcdPrint@n:	
   980                           ; 1 bytes @ 0x7
   981                           
   982                           
   983                           ; 2 bytes @ 0x7
   984     00A7                     	ds	1
   985     00A8                     ??_SplitPacket:
   986     00A8                     ??_CompareStrings:	
   987                           ; 1 bytes @ 0x8
   988                           
   989     00A8                     Fill@id:	
   990                           ; 1 bytes @ 0x8
   991                           
   992     00A8                     ___almod@counter:	
   993                           ; 1 bytes @ 0x8
   994                           
   995     00A8                     ___lmul@product:	
   996                           ; 1 bytes @ 0x8
   997                           
   998                           
   999                           ; 4 bytes @ 0x8
  1000     00A8                     	ds	1
  1001     00A9                     ___almod@sign:
  1002                           
  1003                           ; 1 bytes @ 0x9
  1004     00A9                     	ds	2
  1005     00AB                     SplitPacket@len:
  1006                           
  1007                           ; 2 bytes @ 0xB
  1008     00AB                     	ds	1
  1009     00AC                     ?_rand:
  1010     00AC                     strcat@dest:	
  1011                           ; 2 bytes @ 0xC
  1012                           
  1013     00AC                     CompareStrings@i:	
  1014                           ; 1 bytes @ 0xC
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0xC
  1018     00AC                     	ds	1
  1019     00AD                     strcat@n:
  1020     00AD                     SplitPacket@part:	
  1021                           ; 2 bytes @ 0xD
  1022                           
  1023                           
  1024                           ; 5 bytes @ 0xD
  1025     00AD                     	ds	1
  1026     00AE                     ??_rand:
  1027                           
  1028                           ; 1 bytes @ 0xE
  1029     00AE                     	ds	1
  1030     00AF                     strcat@length_dest:
  1031                           
  1032                           ; 2 bytes @ 0xF
  1033     00AF                     	ds	2
  1034     00B1                     ?_ConcatToPacket:
  1035     00B1                     ConcatToPacket@str:	
  1036                           ; 1 bytes @ 0x11
  1037                           
  1038                           
  1039                           ; 2 bytes @ 0x11
  1040     00B1                     	ds	1
  1041     00B2                     SplitPacket@section:
  1042                           
  1043                           ; 2 bytes @ 0x12
  1044     00B2                     	ds	1
  1045     00B3                     ?___awmod:
  1046     00B3                     ConcatToPacket@delim:	
  1047                           ; 2 bytes @ 0x13
  1048                           
  1049     00B3                     ___awmod@divisor:	
  1050                           ; 1 bytes @ 0x13
  1051                           
  1052                           
  1053                           ; 2 bytes @ 0x13
  1054     00B3                     	ds	1
  1055     00B4                     ??_ConcatToPacket:
  1056     00B4                     SplitPacket@i_part:	
  1057                           ; 1 bytes @ 0x14
  1058                           
  1059                           
  1060                           ; 2 bytes @ 0x14
  1061     00B4                     	ds	1
  1062     00B5                     ConcatToPacket@packet_length:
  1063     00B5                     ___awmod@dividend:	
  1064                           ; 2 bytes @ 0x15
  1065                           
  1066                           
  1067                           ; 2 bytes @ 0x15
  1068     00B5                     	ds	1
  1069     00B6                     SplitPacket@pkt:
  1070                           
  1071                           ; 1 bytes @ 0x16
  1072     00B6                     	ds	1
  1073     00B7                     ConcatToPacket@pkt:
  1074     00B7                     ___awmod@counter:	
  1075                           ; 1 bytes @ 0x17
  1076                           
  1077     00B7                     SplitPacket@i:	
  1078                           ; 1 bytes @ 0x17
  1079                           
  1080                           
  1081                           ; 2 bytes @ 0x17
  1082     00B7                     	ds	1
  1083     00B8                     ___awmod@sign:
  1084                           
  1085                           ; 1 bytes @ 0x18
  1086     00B8                     	ds	1
  1087     00B9                     ?___wmul:
  1088     00B9                     ___wmul@multiplier:	
  1089                           ; 2 bytes @ 0x19
  1090                           
  1091                           
  1092                           ; 2 bytes @ 0x19
  1093     00B9                     	ds	2
  1094     00BB                     ___wmul@multiplicand:
  1095                           
  1096                           ; 2 bytes @ 0x1B
  1097     00BB                     	ds	2
  1098     00BD                     ___wmul@product:
  1099                           
  1100                           ; 2 bytes @ 0x1D
  1101     00BD                     	ds	2
  1102     00BF                     ??_read_NumPad:
  1103     00BF                     ?_UART_TxString:	
  1104                           ; 1 bytes @ 0x1F
  1105                           
  1106     00BF                     ?_pow:	
  1107                           ; 1 bytes @ 0x1F
  1108                           
  1109     00BF                     pow@exp:	
  1110                           ; 2 bytes @ 0x1F
  1111                           
  1112     00BF                     UART_TxString@is_ACK:	
  1113                           ; 1 bytes @ 0x1F
  1114                           
  1115                           
  1116                           ; 1 bytes @ 0x1F
  1117     00BF                     	ds	1
  1118     00C0                     ??_UART_TxString:
  1119                           
  1120                           ; 1 bytes @ 0x20
  1121     00C0                     	ds	1
  1122     00C1                     ??_pow:
  1123     00C1                     UART_TxString@n:	
  1124                           ; 1 bytes @ 0x21
  1125                           
  1126                           
  1127                           ; 2 bytes @ 0x21
  1128     00C1                     	ds	2
  1129     00C3                     pow@b:
  1130     00C3                     UART_TxString@str:	
  1131                           ; 1 bytes @ 0x23
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x23
  1135     00C3                     	ds	1
  1136     00C4                     pow@i:
  1137                           
  1138                           ; 2 bytes @ 0x24
  1139     00C4                     	ds	2
  1140     00C6                     pow@n:
  1141                           
  1142                           ; 2 bytes @ 0x26
  1143     00C6                     	ds	2
  1144     00C8                     ?___aldiv:
  1145     00C8                     ___aldiv@divisor:	
  1146                           ; 4 bytes @ 0x28
  1147                           
  1148                           
  1149                           ; 4 bytes @ 0x28
  1150     00C8                     	ds	1
  1151     00C9                     read_NumPad@id:
  1152                           
  1153                           ; 2 bytes @ 0x29
  1154     00C9                     	ds	3
  1155     00CC                     ___aldiv@dividend:
  1156                           
  1157                           ; 4 bytes @ 0x2C
  1158     00CC                     	ds	4
  1159     00D0                     ??___aldiv:
  1160                           
  1161                           ; 1 bytes @ 0x30
  1162     00D0                     	ds	1
  1163     00D1                     ___aldiv@counter:
  1164                           
  1165                           ; 1 bytes @ 0x31
  1166     00D1                     	ds	1
  1167     00D2                     ___aldiv@sign:
  1168                           
  1169                           ; 1 bytes @ 0x32
  1170     00D2                     	ds	1
  1171     00D3                     ___aldiv@quotient:
  1172                           
  1173                           ; 4 bytes @ 0x33
  1174     00D3                     	ds	4
  1175     00D7                     ?_ConvertToString:
  1176     00D7                     ?_UART_init:	
  1177                           ; 1 bytes @ 0x37
  1178                           
  1179     00D7                     ConvertToString@n:	
  1180                           ; 1 bytes @ 0x37
  1181                           
  1182     00D7                     UART_init@baudrate:	
  1183                           ; 4 bytes @ 0x37
  1184                           
  1185                           
  1186                           ; 4 bytes @ 0x37
  1187     00D7                     	ds	4
  1188     00DB                     ??_UART_init:
  1189     00DB                     ConvertToString@str:	
  1190                           ; 1 bytes @ 0x3B
  1191                           
  1192                           
  1193                           ; 1 bytes @ 0x3B
  1194     00DB                     	ds	1
  1195     00DC                     ??_ConvertToString:
  1196                           
  1197                           ; 1 bytes @ 0x3C
  1198     00DC                     	ds	1
  1199     00DD                     ConvertToString@temp:
  1200                           
  1201                           ; 2 bytes @ 0x3D
  1202     00DD                     	ds	2
  1203     00DF                     ConvertToString@j:
  1204                           
  1205                           ; 2 bytes @ 0x3F
  1206     00DF                     	ds	2
  1207     00E1                     ConvertToString@i:
  1208                           
  1209                           ; 2 bytes @ 0x41
  1210     00E1                     	ds	2
  1211     00E3                     ConvertToString@n_cifre:
  1212                           
  1213                           ; 1 bytes @ 0x43
  1214     00E3                     	ds	1
  1215                           
  1216                           	psect	cstackCOMMON
  1217     0070                     __pcstackCOMMON:
  1218     0070                     ?_init_PIC:
  1219     0070                     ?_read_NumPad:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222     0070                     ?_SplitPacket:	
  1223                           ; 1 bytes @ 0x0
  1224                           
  1225     0070                     ?_init_LCD:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228     0070                     ?_init_NumPad:	
  1229                           ; 1 bytes @ 0x0
  1230                           
  1231     0070                     ?_init_Timer0:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234     0070                     ?_eeprom_read:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237     0070                     ?_Fill:	
  1238                           ; 1 bytes @ 0x0
  1239                           
  1240     0070                     ?_main:	
  1241                           ; 1 bytes @ 0x0
  1242                           
  1243     0070                     ?_UART_TxChar:	
  1244                           ; 1 bytes @ 0x0
  1245                           
  1246     0070                     ?_IRS:	
  1247                           ; 1 bytes @ 0x0
  1248                           
  1249     0070                     ?i1_UART_TxChar:	
  1250                           ; 1 bytes @ 0x0
  1251                           
  1252     0070                     ??i1_UART_TxChar:	
  1253                           ; 1 bytes @ 0x0
  1254                           
  1255     0070                     ?i1_srand:	
  1256                           ; 1 bytes @ 0x0
  1257                           
  1258     0070                     ?i1___lmul:	
  1259                           ; 1 bytes @ 0x0
  1260                           
  1261     0070                     i1srand@x:	
  1262                           ; 4 bytes @ 0x0
  1263                           
  1264     0070                     i1___lmul@multiplier:	
  1265                           ; 2 bytes @ 0x0
  1266                           
  1267                           
  1268                           ; 4 bytes @ 0x0
  1269     0070                     	ds	1
  1270     0071                     i1UART_TxChar@ch:
  1271                           
  1272                           ; 1 bytes @ 0x1
  1273     0071                     	ds	1
  1274     0072                     ??i1_srand:
  1275                           
  1276                           ; 1 bytes @ 0x2
  1277     0072                     	ds	2
  1278     0074                     i1___lmul@multiplicand:
  1279                           
  1280                           ; 4 bytes @ 0x4
  1281     0074                     	ds	4
  1282     0078                     ??i1___lmul:
  1283                           
  1284                           ; 1 bytes @ 0x8
  1285     0078                     	ds	1
  1286     0079                     i1___lmul@product:
  1287                           
  1288                           ; 4 bytes @ 0x9
  1289     0079                     	ds	4
  1290     007D                     ??i1___awmod:
  1291                           
  1292                           ; 1 bytes @ 0xD
  1293     007D                     	ds	1
  1294     007E                     ??i1___wmul:
  1295                           
  1296                           	psect	cstackBANK0
  1297     0020                     __pcstackBANK0:	
  1298                           ; 1 bytes @ 0xE
  1299                           
  1300     0020                     ?i1_rand:
  1301                           
  1302                           ; 2 bytes @ 0x0
  1303     0020                     	ds	2
  1304     0022                     ??i1_rand:
  1305                           
  1306                           ; 1 bytes @ 0x2
  1307     0022                     	ds	5
  1308     0027                     ?i1___awmod:
  1309     0027                     i1___awmod@divisor:	
  1310                           ; 2 bytes @ 0x7
  1311                           
  1312                           
  1313                           ; 2 bytes @ 0x7
  1314     0027                     	ds	2
  1315     0029                     i1___awmod@dividend:
  1316                           
  1317                           ; 2 bytes @ 0x9
  1318     0029                     	ds	2
  1319     002B                     i1___awmod@counter:
  1320                           
  1321                           ; 1 bytes @ 0xB
  1322     002B                     	ds	1
  1323     002C                     i1___awmod@sign:
  1324                           
  1325                           ; 1 bytes @ 0xC
  1326     002C                     	ds	1
  1327     002D                     ?i1___wmul:
  1328     002D                     i1___wmul@multiplier:	
  1329                           ; 2 bytes @ 0xD
  1330                           
  1331                           
  1332                           ; 2 bytes @ 0xD
  1333     002D                     	ds	2
  1334     002F                     i1___wmul@multiplicand:
  1335                           
  1336                           ; 2 bytes @ 0xF
  1337     002F                     	ds	2
  1338     0031                     i1___wmul@product:
  1339                           
  1340                           ; 2 bytes @ 0x11
  1341     0031                     	ds	2
  1342     0033                     ?i1_UART_TxString:
  1343     0033                     i1UART_TxString@is_ACK:	
  1344                           ; 1 bytes @ 0x13
  1345                           
  1346                           
  1347                           ; 1 bytes @ 0x13
  1348     0033                     	ds	1
  1349     0034                     ??i1_UART_TxString:
  1350                           
  1351                           ; 1 bytes @ 0x14
  1352     0034                     	ds	1
  1353     0035                     i1UART_TxString@str:
  1354                           
  1355                           ; 1 bytes @ 0x15
  1356     0035                     	ds	1
  1357     0036                     i1UART_TxString@n:
  1358                           
  1359                           ; 2 bytes @ 0x16
  1360     0036                     	ds	2
  1361     0038                     ??_IRS:
  1362                           
  1363                           ; 1 bytes @ 0x18
  1364     0038                     	ds	4
  1365     003C                     ?_lcdSend:
  1366     003C                     ??_init_NumPad:	
  1367                           ; 1 bytes @ 0x1C
  1368                           
  1369     003C                     ??_init_Timer0:	
  1370                           ; 1 bytes @ 0x1C
  1371                           
  1372     003C                     ??_eeprom_read:	
  1373                           ; 1 bytes @ 0x1C
  1374                           
  1375     003C                     ?_eeprom_write:	
  1376                           ; 1 bytes @ 0x1C
  1377                           
  1378     003C                     ?_srand:	
  1379                           ; 1 bytes @ 0x1C
  1380                           
  1381     003C                     ??_UART_TxChar:	
  1382                           ; 1 bytes @ 0x1C
  1383                           
  1384     003C                     ??___lmul:	
  1385                           ; 1 bytes @ 0x1C
  1386                           
  1387     003C                     ??___almod:	
  1388                           ; 1 bytes @ 0x1C
  1389                           
  1390     003C                     ?_Length:	
  1391                           ; 1 bytes @ 0x1C
  1392                           
  1393     003C                     lcdSend@tipo:	
  1394                           ; 2 bytes @ 0x1C
  1395                           
  1396     003C                     eeprom_write@value:	
  1397                           ; 1 bytes @ 0x1C
  1398                           
  1399     003C                     Length@str:	
  1400                           ; 1 bytes @ 0x1C
  1401                           
  1402     003C                     strcopy@n:	
  1403                           ; 2 bytes @ 0x1C
  1404                           
  1405     003C                     srand@x:	
  1406                           ; 2 bytes @ 0x1C
  1407                           
  1408                           
  1409                           ; 2 bytes @ 0x1C
  1410     003C                     	ds	1
  1411     003D                     ??_eeprom_write:
  1412     003D                     ??___awmod:	
  1413                           ; 1 bytes @ 0x1D
  1414                           
  1415     003D                     lcdSend@dato:	
  1416                           ; 1 bytes @ 0x1D
  1417                           
  1418     003D                     UART_TxChar@ch:	
  1419                           ; 1 bytes @ 0x1D
  1420                           
  1421     003D                     eeprom_read@addr:	
  1422                           ; 1 bytes @ 0x1D
  1423                           
  1424                           
  1425                           ; 1 bytes @ 0x1D
  1426     003D                     	ds	1
  1427     003E                     ??_srand:
  1428     003E                     ??_main:	
  1429                           ; 1 bytes @ 0x1E
  1430                           
  1431     003E                     ??___wmul:	
  1432                           ; 1 bytes @ 0x1E
  1433                           
  1434                           
  1435                           	psect	maintext
  1436     0069                     __pmaintext:	
  1437                           ; 1 bytes @ 0x1E
  1438 ;;
  1439 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1440 ;;
  1441 ;; *************** function _main *****************
  1442 ;; Defined at:
  1443 ;;		line 127 in file "main.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  num_rand_s     16   16[BANK2 ] unsigned char [16]
  1448 ;;  num_rand_s     16    0[BANK2 ] unsigned char [16]
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      void 
  1451 ;; Registers used:
  1452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1453 ;; Tracked objects:
  1454 ;;		On entry : B00/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1458 ;;      Params:         0       0       0       0       0
  1459 ;;      Locals:         0       0       0       0      32
  1460 ;;      Temps:          0       0       0       0       0
  1461 ;;      Totals:         0       0       0       0      32
  1462 ;;Total ram usage:       32 bytes
  1463 ;; Hardware stack levels required when called: 8
  1464 ;; This function calls:
  1465 ;;		_CompareStrings
  1466 ;;		_ConcatToPacket
  1467 ;;		_ConvertToString
  1468 ;;		_SplitPacket
  1469 ;;		_UART_TxString
  1470 ;;		_init_PIC
  1471 ;;		_lcdPrint
  1472 ;;		_lcdSend
  1473 ;;		_read_NumPad
  1474 ;; This function is called by:
  1475 ;;		Startup code after reset
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479     0069                     _main:	
  1480                           ;psect for function _main
  1481                           
  1482     0069                     l3613:	
  1483                           ;incstack = 0
  1484                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1485                           
  1486                           
  1487                           ;main.c: 130:     init_PIC();
  1488     0069  120A  158A  22E5  120A  118A  	fcall	_init_PIC
  1489     006E                     l3615:
  1490                           
  1491                           ;main.c: 133:     {;main.c: 134:         if(pr_start)
  1492     006E  1683               	bsf	3,5	;RP0=1, select bank3
  1493     006F  1703               	bsf	3,6	;RP1=1, select bank3
  1494     0070  0818               	movf	_pr_start^(0+384),w
  1495     0071  1903               	btfsc	3,2
  1496     0072  2874               	goto	u3881
  1497     0073  2875               	goto	u3880
  1498     0074                     u3881:
  1499     0074  28A0               	goto	l3625
  1500     0075                     u3880:
  1501     0075                     l3617:
  1502                           
  1503                           ;main.c: 135:         {;main.c: 136:             lcdSend(0x01, 0);
  1504     0075  1283               	bcf	3,5	;RP0=0, select bank0
  1505     0076  1303               	bcf	3,6	;RP1=0, select bank0
  1506     0077  01BC               	clrf	lcdSend@tipo
  1507     0078  3001               	movlw	1
  1508     0079  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1509     007E                     l3619:
  1510                           
  1511                           ;main.c: 137:             lcdPrint("Premi '#'\0");
  1512     007E  30DE               	movlw	low (STR_1| (0+32768))
  1513     007F  1683               	bsf	3,5	;RP0=1, select bank1
  1514     0080  1303               	bcf	3,6	;RP1=0, select bank1
  1515     0081  00A2               	movwf	lcdPrint@str^(0+128)
  1516     0082  3087               	movlw	high (STR_1| (0+32768))
  1517     0083  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1518     0084  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1519     0089                     l3621:
  1520                           
  1521                           ;main.c: 138:             lcdSend(0xC0, 0);
  1522     0089  1283               	bcf	3,5	;RP0=0, select bank0
  1523     008A  1303               	bcf	3,6	;RP1=0, select bank0
  1524     008B  01BC               	clrf	lcdSend@tipo
  1525     008C  30C0               	movlw	192
  1526     008D  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1527                           
  1528                           ;main.c: 139:             lcdPrint("per gen. codice\0");
  1529     0092  305A               	movlw	low (STR_2| (0+32768))
  1530     0093  1683               	bsf	3,5	;RP0=1, select bank1
  1531     0094  1303               	bcf	3,6	;RP1=0, select bank1
  1532     0095  00A2               	movwf	lcdPrint@str^(0+128)
  1533     0096  3087               	movlw	high (STR_2| (0+32768))
  1534     0097  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1535     0098  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1536     009D                     l3623:
  1537                           
  1538                           ;main.c: 140:             pr_start = 0;
  1539     009D  1683               	bsf	3,5	;RP0=1, select bank3
  1540     009E  1703               	bsf	3,6	;RP1=1, select bank3
  1541     009F  0198               	clrf	_pr_start^(0+384)
  1542     00A0                     l3625:
  1543                           
  1544                           ;main.c: 142:         if(pr_err_max)
  1545     00A0  0817               	movf	_pr_err_max^(0+384),w
  1546     00A1  1903               	btfsc	3,2
  1547     00A2  28A4               	goto	u3891
  1548     00A3  28A5               	goto	u3890
  1549     00A4                     u3891:
  1550     00A4  28D0               	goto	l3635
  1551     00A5                     u3890:
  1552     00A5                     l3627:
  1553                           
  1554                           ;main.c: 143:         {;main.c: 145:             lcdSend(0x01, 0);
  1555     00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1556     00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1557     00A7  01BC               	clrf	lcdSend@tipo
  1558     00A8  3001               	movlw	1
  1559     00A9  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1560     00AE                     l3629:
  1561                           
  1562                           ;main.c: 146:             lcdPrint("ERRORE\0");
  1563     00AE  3007               	movlw	low (STR_3| (0+32768))
  1564     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  1565     00B0  1303               	bcf	3,6	;RP1=0, select bank1
  1566     00B1  00A2               	movwf	lcdPrint@str^(0+128)
  1567     00B2  3088               	movlw	high (STR_3| (0+32768))
  1568     00B3  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1569     00B4  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1570     00B9                     l3631:
  1571                           
  1572                           ;main.c: 147:             lcdSend(0xC0, 0);
  1573     00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1574     00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1575     00BB  01BC               	clrf	lcdSend@tipo
  1576     00BC  30C0               	movlw	192
  1577     00BD  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1578                           
  1579                           ;main.c: 148:             lcdPrint("ID > 250\0");
  1580     00C2  30F3               	movlw	low (STR_4| (0+32768))
  1581     00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1582     00C4  1303               	bcf	3,6	;RP1=0, select bank1
  1583     00C5  00A2               	movwf	lcdPrint@str^(0+128)
  1584     00C6  3087               	movlw	high (STR_4| (0+32768))
  1585     00C7  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1586     00C8  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1587     00CD                     l3633:
  1588                           
  1589                           ;main.c: 149:             pr_err_max = 0;
  1590     00CD  1683               	bsf	3,5	;RP0=1, select bank3
  1591     00CE  1703               	bsf	3,6	;RP1=1, select bank3
  1592     00CF  0197               	clrf	_pr_err_max^(0+384)
  1593     00D0                     l3635:
  1594                           
  1595                           ;main.c: 151:         if(pr_empty)
  1596     00D0  0816               	movf	_pr_empty^(0+384),w
  1597     00D1  1903               	btfsc	3,2
  1598     00D2  28D4               	goto	u3901
  1599     00D3  28D5               	goto	u3900
  1600     00D4                     u3901:
  1601     00D4  2900               	goto	l3645
  1602     00D5                     u3900:
  1603     00D5                     l3637:
  1604                           
  1605                           ;main.c: 152:         {;main.c: 154:             lcdSend(0x01, 0);
  1606     00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1607     00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1608     00D7  01BC               	clrf	lcdSend@tipo
  1609     00D8  3001               	movlw	1
  1610     00D9  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1611     00DE                     l3639:
  1612                           
  1613                           ;main.c: 155:             lcdPrint("ERRORE\0");
  1614     00DE  3007               	movlw	low (STR_3| (0+32768))
  1615     00DF  1683               	bsf	3,5	;RP0=1, select bank1
  1616     00E0  1303               	bcf	3,6	;RP1=0, select bank1
  1617     00E1  00A2               	movwf	lcdPrint@str^(0+128)
  1618     00E2  3088               	movlw	high (STR_3| (0+32768))
  1619     00E3  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1620     00E4  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1621     00E9                     l3641:
  1622                           
  1623                           ;main.c: 156:             lcdSend(0xC0, 0);
  1624     00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1625     00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1626     00EB  01BC               	clrf	lcdSend@tipo
  1627     00EC  30C0               	movlw	192
  1628     00ED  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1629                           
  1630                           ;main.c: 157:             lcdPrint("ID VUOTO\0");
  1631     00F2  30FD               	movlw	low (STR_6| (0+32768))
  1632     00F3  1683               	bsf	3,5	;RP0=1, select bank1
  1633     00F4  1303               	bcf	3,6	;RP1=0, select bank1
  1634     00F5  00A2               	movwf	lcdPrint@str^(0+128)
  1635     00F6  3087               	movlw	high (STR_6| (0+32768))
  1636     00F7  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1637     00F8  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1638     00FD                     l3643:
  1639                           
  1640                           ;main.c: 158:             pr_empty = 0;
  1641     00FD  1683               	bsf	3,5	;RP0=1, select bank3
  1642     00FE  1703               	bsf	3,6	;RP1=1, select bank3
  1643     00FF  0196               	clrf	_pr_empty^(0+384)
  1644     0100                     l3645:
  1645                           
  1646                           ;main.c: 160:         if(pr_succ)
  1647     0100  0815               	movf	_pr_succ^(0+384),w
  1648     0101  1903               	btfsc	3,2
  1649     0102  2904               	goto	u3911
  1650     0103  2905               	goto	u3910
  1651     0104                     u3911:
  1652     0104  292E               	goto	l3657
  1653     0105                     u3910:
  1654     0105                     l3647:
  1655                           
  1656                           ;main.c: 161:         {;main.c: 163:             lcdSend(0x01, 0);
  1657     0105  1283               	bcf	3,5	;RP0=0, select bank0
  1658     0106  1303               	bcf	3,6	;RP1=0, select bank0
  1659     0107  01BC               	clrf	lcdSend@tipo
  1660     0108  3001               	movlw	1
  1661     0109  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1662     010E                     l3649:
  1663                           
  1664                           ;main.c: 164:             lcdPrint("ID Salvato\0");
  1665     010E  30D2               	movlw	low (STR_7| (0+32768))
  1666     010F  1683               	bsf	3,5	;RP0=1, select bank1
  1667     0110  1303               	bcf	3,6	;RP1=0, select bank1
  1668     0111  00A2               	movwf	lcdPrint@str^(0+128)
  1669     0112  3087               	movlw	high (STR_7| (0+32768))
  1670     0113  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1671     0114  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1672     0119                     l3651:
  1673                           
  1674                           ;main.c: 166:             milliseconds = 0;
  1675     0119  3000               	movlw	0
  1676     011A  1683               	bsf	3,5	;RP0=1, select bank1
  1677     011B  1303               	bcf	3,6	;RP1=0, select bank1
  1678     011C  00EB               	movwf	(_milliseconds+3)^(0+128)
  1679     011D  3000               	movlw	0
  1680     011E  00EA               	movwf	(_milliseconds+2)^(0+128)
  1681     011F  3000               	movlw	0
  1682     0120  00E9               	movwf	(_milliseconds+1)^(0+128)
  1683     0121  3000               	movlw	0
  1684     0122  00E8               	movwf	_milliseconds^(0+128)
  1685     0123                     l3653:
  1686                           
  1687                           ;main.c: 167:             seconds = 1000;
  1688     0123  3000               	movlw	0
  1689     0124  00E7               	movwf	(_seconds+3)^(0+128)
  1690     0125  3000               	movlw	0
  1691     0126  00E6               	movwf	(_seconds+2)^(0+128)
  1692     0127  3003               	movlw	3
  1693     0128  00E5               	movwf	(_seconds+1)^(0+128)
  1694     0129  30E8               	movlw	232
  1695     012A  00E4               	movwf	_seconds^(0+128)
  1696     012B                     l3655:
  1697                           
  1698                           ;main.c: 168:             pr_succ = 0;
  1699     012B  1683               	bsf	3,5	;RP0=1, select bank3
  1700     012C  1703               	bsf	3,6	;RP1=1, select bank3
  1701     012D  0195               	clrf	_pr_succ^(0+384)
  1702     012E                     l3657:
  1703                           
  1704                           ;main.c: 170:         if(pr_countdown)
  1705     012E  0814               	movf	_pr_countdown^(0+384),w
  1706     012F  1903               	btfsc	3,2
  1707     0130  2932               	goto	u3921
  1708     0131  2933               	goto	u3920
  1709     0132                     u3921:
  1710     0132  2981               	goto	l3673
  1711     0133                     u3920:
  1712     0133                     l3659:
  1713                           
  1714                           ;main.c: 171:         {;main.c: 172:             lcdSend(0x01, 0);
  1715     0133  1283               	bcf	3,5	;RP0=0, select bank0
  1716     0134  1303               	bcf	3,6	;RP1=0, select bank0
  1717     0135  01BC               	clrf	lcdSend@tipo
  1718     0136  3001               	movlw	1
  1719     0137  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1720     013C                     l3661:
  1721                           
  1722                           ;main.c: 174:             char num_rand_s[16];;main.c: 175:             ConvertToString(
      +                          num_rand, num_rand_s);
  1723     013C  1683               	bsf	3,5	;RP0=1, select bank3
  1724     013D  1703               	bsf	3,6	;RP1=1, select bank3
  1725     013E  0812               	movf	_num_rand^(0+384),w
  1726     013F  1683               	bsf	3,5	;RP0=1, select bank1
  1727     0140  1303               	bcf	3,6	;RP1=0, select bank1
  1728     0141  00D7               	movwf	ConvertToString@n^(0+128)
  1729     0142  1683               	bsf	3,5	;RP0=1, select bank3
  1730     0143  1703               	bsf	3,6	;RP1=1, select bank3
  1731     0144  0813               	movf	(_num_rand+1)^(0+384),w
  1732     0145  1683               	bsf	3,5	;RP0=1, select bank1
  1733     0146  1303               	bcf	3,6	;RP1=0, select bank1
  1734     0147  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  1735     0148  3000               	movlw	0
  1736     0149  1BD8               	btfsc	(ConvertToString@n+1)^(0+128),7
  1737     014A  30FF               	movlw	255
  1738     014B  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  1739     014C  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  1740     014D  3042               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1741     014E  00DB               	movwf	ConvertToString@str^(0+128)
  1742     014F  120A  158A  2726  120A  118A  	fcall	_ConvertToString
  1743     0154                     l3663:
  1744                           
  1745                           ;main.c: 176:             lcdPrint("Codice: \0");
  1746     0154  30E9               	movlw	low (STR_8| (0+32768))
  1747     0155  1683               	bsf	3,5	;RP0=1, select bank1
  1748     0156  1303               	bcf	3,6	;RP1=0, select bank1
  1749     0157  00A2               	movwf	lcdPrint@str^(0+128)
  1750     0158  3087               	movlw	high (STR_8| (0+32768))
  1751     0159  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1752     015A  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1753     015F                     l3665:
  1754                           
  1755                           ;main.c: 177:             lcdPrint(num_rand_s);
  1756     015F  3042               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1757     0160  1683               	bsf	3,5	;RP0=1, select bank1
  1758     0161  1303               	bcf	3,6	;RP1=0, select bank1
  1759     0162  00A2               	movwf	lcdPrint@str^(0+128)
  1760     0163  3001               	movlw	1
  1761     0164  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  1762     0165  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1763     016A                     l3667:
  1764                           
  1765                           ;main.c: 178:             lcdSend(0xC0, 0);
  1766     016A  1283               	bcf	3,5	;RP0=0, select bank0
  1767     016B  1303               	bcf	3,6	;RP1=0, select bank0
  1768     016C  01BC               	clrf	lcdSend@tipo
  1769     016D  30C0               	movlw	192
  1770     016E  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1771     0173                     l3669:
  1772                           
  1773                           ;main.c: 179:             lcdPrint("# per altro cod.\0");
  1774     0173  3025               	movlw	low (STR_9| (0+32768))
  1775     0174  1683               	bsf	3,5	;RP0=1, select bank1
  1776     0175  1303               	bcf	3,6	;RP1=0, select bank1
  1777     0176  00A2               	movwf	lcdPrint@str^(0+128)
  1778     0177  3087               	movlw	high (STR_9| (0+32768))
  1779     0178  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1780     0179  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1781     017E                     l3671:
  1782                           
  1783                           ;main.c: 180:             pr_countdown = 0;
  1784     017E  1683               	bsf	3,5	;RP0=1, select bank3
  1785     017F  1703               	bsf	3,6	;RP1=1, select bank3
  1786     0180  0194               	clrf	_pr_countdown^(0+384)
  1787     0181                     l3673:
  1788                           
  1789                           ;main.c: 184:         read_NumPad();
  1790     0181  120A  118A  2459  120A  118A  	fcall	_read_NumPad
  1791     0186                     l3675:
  1792                           
  1793                           ;main.c: 187:         if(i_id != old_i_id && initialize)
  1794     0186  1683               	bsf	3,5	;RP0=1, select bank3
  1795     0187  1703               	bsf	3,6	;RP1=1, select bank3
  1796     0188  0822               	movf	_i_id^(0+384),w
  1797     0189  0621               	xorwf	_old_i_id^(0+384),w
  1798     018A  1903               	skipnz
  1799     018B  298D               	goto	u3931
  1800     018C  298E               	goto	u3930
  1801     018D                     u3931:
  1802     018D  29BB               	goto	l3685
  1803     018E                     u3930:
  1804     018E                     l3677:
  1805     018E  0850               	movf	_initialize^(0+384),w
  1806     018F  1903               	btfsc	3,2
  1807     0190  2992               	goto	u3941
  1808     0191  2993               	goto	u3940
  1809     0192                     u3941:
  1810     0192  29BB               	goto	l3685
  1811     0193                     u3940:
  1812     0193                     l3679:
  1813                           
  1814                           ;main.c: 188:         {;main.c: 190:             lcdSend(0x01, 0);
  1815     0193  1283               	bcf	3,5	;RP0=0, select bank0
  1816     0194  1303               	bcf	3,6	;RP1=0, select bank0
  1817     0195  01BC               	clrf	lcdSend@tipo
  1818     0196  3001               	movlw	1
  1819     0197  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1820     019C                     l3681:
  1821                           
  1822                           ;main.c: 191:             lcdPrint("#=conf. *=canc.\0");
  1823     019C  3049               	movlw	low (STR_10| (0+32768))
  1824     019D  1683               	bsf	3,5	;RP0=1, select bank1
  1825     019E  1303               	bcf	3,6	;RP1=0, select bank1
  1826     019F  00A2               	movwf	lcdPrint@str^(0+128)
  1827     01A0  3087               	movlw	high (STR_10| (0+32768))
  1828     01A1  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1829     01A2  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1830     01A7                     l3683:
  1831                           
  1832                           ;main.c: 192:             lcdSend(0xC0, 0);
  1833     01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1834     01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1835     01A9  01BC               	clrf	lcdSend@tipo
  1836     01AA  30C0               	movlw	192
  1837     01AB  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1838                           
  1839                           ;main.c: 193:             lcdPrint(PIC_ID);
  1840     01B0  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  1841     01B1  1683               	bsf	3,5	;RP0=1, select bank1
  1842     01B2  1303               	bcf	3,6	;RP1=0, select bank1
  1843     01B3  00A2               	movwf	lcdPrint@str^(0+128)
  1844     01B4  3001               	movlw	1
  1845     01B5  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  1846     01B6  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1847     01BB                     l3685:
  1848                           
  1849                           ;main.c: 196:         old_i_id = i_id;
  1850     01BB  1683               	bsf	3,5	;RP0=1, select bank3
  1851     01BC  1703               	bsf	3,6	;RP1=1, select bank3
  1852     01BD  0822               	movf	_i_id^(0+384),w
  1853     01BE  00A1               	movwf	_old_i_id^(0+384)
  1854     01BF                     l3687:
  1855                           
  1856                           ;main.c: 200:         if(num_rand != old_num_rand)
  1857     01BF  0811               	movf	(_old_num_rand+1)^(0+384),w
  1858     01C0  0613               	xorwf	(_num_rand+1)^(0+384),w
  1859     01C1  1D03               	skipz
  1860     01C2  29C5               	goto	u3955
  1861     01C3  0810               	movf	_old_num_rand^(0+384),w
  1862     01C4  0612               	xorwf	_num_rand^(0+384),w
  1863     01C5                     u3955:
  1864     01C5  1903               	skipnz
  1865     01C6  29C8               	goto	u3951
  1866     01C7  29C9               	goto	u3950
  1867     01C8                     u3951:
  1868     01C8  2A47               	goto	l3719
  1869     01C9                     u3950:
  1870     01C9                     l3689:
  1871                           
  1872                           ;main.c: 201:         {;main.c: 203:             lcdSend(0x01, 0);
  1873     01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1874     01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1875     01CB  01BC               	clrf	lcdSend@tipo
  1876     01CC  3001               	movlw	1
  1877     01CD  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1878     01D2                     l3691:
  1879                           
  1880                           ;main.c: 205:             char num_rand_s[16];;main.c: 206:             ConvertToString(
      +                          num_rand, num_rand_s);
  1881     01D2  1683               	bsf	3,5	;RP0=1, select bank3
  1882     01D3  1703               	bsf	3,6	;RP1=1, select bank3
  1883     01D4  0812               	movf	_num_rand^(0+384),w
  1884     01D5  1683               	bsf	3,5	;RP0=1, select bank1
  1885     01D6  1303               	bcf	3,6	;RP1=0, select bank1
  1886     01D7  00D7               	movwf	ConvertToString@n^(0+128)
  1887     01D8  1683               	bsf	3,5	;RP0=1, select bank3
  1888     01D9  1703               	bsf	3,6	;RP1=1, select bank3
  1889     01DA  0813               	movf	(_num_rand+1)^(0+384),w
  1890     01DB  1683               	bsf	3,5	;RP0=1, select bank1
  1891     01DC  1303               	bcf	3,6	;RP1=0, select bank1
  1892     01DD  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  1893     01DE  3000               	movlw	0
  1894     01DF  1BD8               	btfsc	(ConvertToString@n+1)^(0+128),7
  1895     01E0  30FF               	movlw	255
  1896     01E1  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  1897     01E2  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  1898     01E3  3052               	movlw	(low (main@num_rand_s_231| (0+256)))& (0+255)
  1899     01E4  00DB               	movwf	ConvertToString@str^(0+128)
  1900     01E5  120A  158A  2726  120A  118A  	fcall	_ConvertToString
  1901     01EA                     l3693:
  1902                           
  1903                           ;main.c: 207:             lcdPrint("Codice: \0");
  1904     01EA  30E9               	movlw	low (STR_8| (0+32768))
  1905     01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1906     01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1907     01ED  00A2               	movwf	lcdPrint@str^(0+128)
  1908     01EE  3087               	movlw	high (STR_8| (0+32768))
  1909     01EF  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1910     01F0  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1911     01F5                     l3695:
  1912                           
  1913                           ;main.c: 208:             lcdPrint(num_rand_s);
  1914     01F5  3052               	movlw	(low (main@num_rand_s_231| (0+256)))& (0+255)
  1915     01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1916     01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1917     01F8  00A2               	movwf	lcdPrint@str^(0+128)
  1918     01F9  3001               	movlw	1
  1919     01FA  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  1920     01FB  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1921     0200                     l3697:
  1922                           
  1923                           ;main.c: 209:             lcdSend(0xC0, 0);
  1924     0200  1283               	bcf	3,5	;RP0=0, select bank0
  1925     0201  1303               	bcf	3,6	;RP1=0, select bank0
  1926     0202  01BC               	clrf	lcdSend@tipo
  1927     0203  30C0               	movlw	192
  1928     0204  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  1929     0209                     l3699:
  1930                           
  1931                           ;main.c: 210:             lcdPrint("Attendi 30s...\0");
  1932     0209  306B               	movlw	low (STR_12| (0+32768))
  1933     020A  1683               	bsf	3,5	;RP0=1, select bank1
  1934     020B  1303               	bcf	3,6	;RP1=0, select bank1
  1935     020C  00A2               	movwf	lcdPrint@str^(0+128)
  1936     020D  3087               	movlw	high (STR_12| (0+32768))
  1937     020E  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1938     020F  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  1939     0214                     l3701:
  1940                           
  1941                           ;main.c: 222:             packet[0] = '0';
  1942     0214  3030               	movlw	48
  1943     0215  1683               	bsf	3,5	;RP0=1, select bank3
  1944     0216  1703               	bsf	3,6	;RP1=1, select bank3
  1945     0217  00B4               	movwf	_packet^(0+384)
  1946     0218                     l3703:
  1947                           
  1948                           ;main.c: 223:             packet[1] = '/';
  1949     0218  302F               	movlw	47
  1950     0219  00B5               	movwf	(_packet^(0+384)+1)
  1951     021A                     l3705:
  1952                           
  1953                           ;main.c: 224:             packet[2] = '\0';
  1954     021A  01B6               	clrf	(_packet^(0+384)+2)
  1955     021B                     l3707:
  1956                           
  1957                           ;main.c: 226:             ConcatToPacket(packet, PIC_ID, '/');
  1958     021B  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  1959     021C  1683               	bsf	3,5	;RP0=1, select bank1
  1960     021D  1303               	bcf	3,6	;RP1=0, select bank1
  1961     021E  00B1               	movwf	ConcatToPacket@str^(0+128)
  1962     021F  3001               	movlw	1
  1963     0220  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  1964     0221  302F               	movlw	47
  1965     0222  00B3               	movwf	ConcatToPacket@delim^(0+128)
  1966     0223  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1967     0224  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  1968     0229                     l3709:
  1969                           
  1970                           ;main.c: 228:             packet[6] = '0';
  1971     0229  3030               	movlw	48
  1972     022A  1683               	bsf	3,5	;RP0=1, select bank3
  1973     022B  1703               	bsf	3,6	;RP1=1, select bank3
  1974     022C  00BA               	movwf	(_packet^(0+384)+6)
  1975     022D                     l3711:
  1976                           
  1977                           ;main.c: 229:             packet[7] = '/';
  1978     022D  302F               	movlw	47
  1979     022E  00BB               	movwf	(_packet^(0+384)+7)
  1980     022F                     l3713:
  1981                           
  1982                           ;main.c: 230:             packet[8] = '\0';
  1983     022F  01BC               	clrf	(_packet^(0+384)+8)
  1984     0230                     l3715:
  1985                           
  1986                           ;main.c: 232:             ConcatToPacket(packet, num_rand_s, ' ');
  1987     0230  3052               	movlw	(low (main@num_rand_s_231| (0+256)))& (0+255)
  1988     0231  1683               	bsf	3,5	;RP0=1, select bank1
  1989     0232  1303               	bcf	3,6	;RP1=0, select bank1
  1990     0233  00B1               	movwf	ConcatToPacket@str^(0+128)
  1991     0234  3001               	movlw	1
  1992     0235  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  1993     0236  3020               	movlw	32
  1994     0237  00B3               	movwf	ConcatToPacket@delim^(0+128)
  1995     0238  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1996     0239  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  1997     023E                     l3717:
  1998                           
  1999                           ;main.c: 234:             UART_TxString(packet, 0);
  2000     023E  1683               	bsf	3,5	;RP0=1, select bank1
  2001     023F  1303               	bcf	3,6	;RP1=0, select bank1
  2002     0240  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  2003     0241  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2004     0242  120A  158A  2359  120A  118A  	fcall	_UART_TxString
  2005     0247                     l3719:
  2006                           
  2007                           ;main.c: 237:         old_num_rand = num_rand;
  2008     0247  1683               	bsf	3,5	;RP0=1, select bank3
  2009     0248  1703               	bsf	3,6	;RP1=1, select bank3
  2010     0249  0813               	movf	(_num_rand+1)^(0+384),w
  2011     024A  0091               	movwf	(_old_num_rand+1)^(0+384)
  2012     024B  0812               	movf	_num_rand^(0+384),w
  2013     024C  0090               	movwf	_old_num_rand^(0+384)
  2014     024D                     l3721:
  2015                           
  2016                           ;main.c: 240:         if(recieved)
  2017     024D  081C               	movf	_recieved^(0+384),w
  2018     024E  1903               	btfsc	3,2
  2019     024F  2A51               	goto	u3961
  2020     0250  2A52               	goto	u3960
  2021     0251                     u3961:
  2022     0251  2B39               	goto	l3775
  2023     0252                     u3960:
  2024     0252                     l3723:
  2025                           
  2026                           ;main.c: 241:         {;main.c: 242:             SplitPacket(dato);
  2027     0252  3010               	movlw	(low (_dato| (0+256)))& (0+255)
  2028     0253  120A  158A  2679  120A  118A  	fcall	_SplitPacket
  2029     0258                     l3725:
  2030                           
  2031                           ;main.c: 244:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '0')
  2032     0258  3031               	movlw	49
  2033     0259  1683               	bsf	3,5	;RP0=1, select bank3
  2034     025A  1703               	bsf	3,6	;RP1=1, select bank3
  2035     025B  0620               	xorwf	_source^(0+384),w
  2036     025C  1D03               	btfss	3,2
  2037     025D  2A5F               	goto	u3971
  2038     025E  2A60               	goto	u3970
  2039     025F                     u3971:
  2040     025F  2AEE               	goto	l3759
  2041     0260                     u3970:
  2042     0260                     l3727:
  2043     0260  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  2044     0261  1683               	bsf	3,5	;RP0=1, select bank1
  2045     0262  1303               	bcf	3,6	;RP1=0, select bank1
  2046     0263  00A5               	movwf	CompareStrings@str1^(0+128)
  2047     0264  3001               	movlw	1
  2048     0265  00A6               	movwf	(CompareStrings@str1+1)^(0+128)
  2049     0266  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2050     0267  00A7               	movwf	CompareStrings@str2^(0+128)
  2051     0268  120A  158A  2275  120A  118A  	fcall	_CompareStrings
  2052     026D  3A00               	xorlw	0
  2053     026E  1903               	skipnz
  2054     026F  2A71               	goto	u3981
  2055     0270  2A72               	goto	u3980
  2056     0271                     u3981:
  2057     0271  2AEE               	goto	l3759
  2058     0272                     u3980:
  2059     0272                     l3729:
  2060     0272  3030               	movlw	48
  2061     0273  1683               	bsf	3,5	;RP0=1, select bank3
  2062     0274  1703               	bsf	3,6	;RP1=1, select bank3
  2063     0275  061F               	xorwf	_type^(0+384),w
  2064     0276  1D03               	btfss	3,2
  2065     0277  2A79               	goto	u3991
  2066     0278  2A7A               	goto	u3990
  2067     0279                     u3991:
  2068     0279  2AEE               	goto	l3759
  2069     027A                     u3990:
  2070     027A                     l3731:
  2071                           
  2072                           ;main.c: 245:             {;main.c: 247:                 packet[0] = '0';
  2073     027A  3030               	movlw	48
  2074     027B  00B4               	movwf	_packet^(0+384)
  2075                           
  2076                           ;main.c: 248:                 packet[1] = '/';
  2077     027C  302F               	movlw	47
  2078     027D  00B5               	movwf	(_packet^(0+384)+1)
  2079     027E                     l3733:
  2080                           
  2081                           ;main.c: 249:                 packet[2] = '\0';
  2082     027E  01B6               	clrf	(_packet^(0+384)+2)
  2083     027F                     l3735:
  2084                           
  2085                           ;main.c: 250:                 ConcatToPacket(packet, PIC_ID, '/');
  2086     027F  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2087     0280  1683               	bsf	3,5	;RP0=1, select bank1
  2088     0281  1303               	bcf	3,6	;RP1=0, select bank1
  2089     0282  00B1               	movwf	ConcatToPacket@str^(0+128)
  2090     0283  3001               	movlw	1
  2091     0284  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  2092     0285  302F               	movlw	47
  2093     0286  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2094     0287  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2095     0288  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  2096     028D                     l3737:
  2097                           
  2098                           ;main.c: 251:                 ConcatToPacket(packet, "2", ' ');
  2099     028D  3017               	movlw	low (STR_13| (0+32768))
  2100     028E  1683               	bsf	3,5	;RP0=1, select bank1
  2101     028F  1303               	bcf	3,6	;RP1=0, select bank1
  2102     0290  00B1               	movwf	ConcatToPacket@str^(0+128)
  2103     0291  3088               	movlw	high (STR_13| (0+32768))
  2104     0292  00B2               	movwf	(ConcatToPacket@str^(0+128)+1)
  2105     0293  3020               	movlw	32
  2106     0294  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2107     0295  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2108     0296  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  2109     029B                     l3739:
  2110                           
  2111                           ;main.c: 252:                 UART_TxString(packet, 1);
  2112     029B  1683               	bsf	3,5	;RP0=1, select bank1
  2113     029C  1303               	bcf	3,6	;RP1=0, select bank1
  2114     029D  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  2115     029E  0ABF               	incf	UART_TxString@is_ACK^(0+128),f
  2116     029F  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2117     02A0  120A  158A  2359  120A  118A  	fcall	_UART_TxString
  2118     02A5                     l3741:
  2119                           
  2120                           ;main.c: 254:                 compare = 1;
  2121     02A5  1683               	bsf	3,5	;RP0=1, select bank3
  2122     02A6  1703               	bsf	3,6	;RP1=1, select bank3
  2123     02A7  019B               	clrf	_compare^(0+384)
  2124     02A8  0A9B               	incf	_compare^(0+384),f
  2125     02A9                     l3743:
  2126                           
  2127                           ;main.c: 256:                 old_num_rand = num_rand = 0;
  2128     02A9  0192               	clrf	_num_rand^(0+384)
  2129     02AA  0193               	clrf	(_num_rand+1)^(0+384)
  2130     02AB  0190               	clrf	_old_num_rand^(0+384)
  2131     02AC  0191               	clrf	(_old_num_rand+1)^(0+384)
  2132     02AD                     l3745:
  2133                           
  2134                           ;main.c: 258:                 maxFail = 3;
  2135     02AD  3003               	movlw	3
  2136     02AE  00CF               	movwf	_maxFail^(0+384)
  2137     02AF                     l3747:
  2138                           
  2139                           ;main.c: 260:                 lcdSend(0x01, 0);
  2140     02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2141     02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2142     02B1  01BC               	clrf	lcdSend@tipo
  2143     02B2  3001               	movlw	1
  2144     02B3  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2145     02B8                     l3749:
  2146                           
  2147                           ;main.c: 261:                 lcdPrint("Inserisci codice\0");
  2148     02B8  3037               	movlw	low (STR_14| (0+32768))
  2149     02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2150     02BA  1303               	bcf	3,6	;RP1=0, select bank1
  2151     02BB  00A2               	movwf	lcdPrint@str^(0+128)
  2152     02BC  3087               	movlw	high (STR_14| (0+32768))
  2153     02BD  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2154     02BE  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2155     02C3                     l3751:
  2156                           
  2157                           ;main.c: 262:                 lcdSend(0xC0, 0);
  2158     02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2159     02C4  1303               	bcf	3,6	;RP1=0, select bank0
  2160     02C5  01BC               	clrf	lcdSend@tipo
  2161     02C6  30C0               	movlw	192
  2162     02C7  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2163     02CC                     l3753:
  2164                           
  2165                           ;main.c: 263:                 lcdPrint("Tentativi: \0");
  2166     02CC  30B9               	movlw	low (STR_15| (0+32768))
  2167     02CD  1683               	bsf	3,5	;RP0=1, select bank1
  2168     02CE  1303               	bcf	3,6	;RP1=0, select bank1
  2169     02CF  00A2               	movwf	lcdPrint@str^(0+128)
  2170     02D0  3087               	movlw	high (STR_15| (0+32768))
  2171     02D1  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2172     02D2  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2173     02D7                     l3755:
  2174                           
  2175                           ;main.c: 264:                 lcdSend(maxFail + '0', 1);
  2176     02D7  1283               	bcf	3,5	;RP0=0, select bank0
  2177     02D8  1303               	bcf	3,6	;RP1=0, select bank0
  2178     02D9  01BC               	clrf	lcdSend@tipo
  2179     02DA  0ABC               	incf	lcdSend@tipo,f
  2180     02DB  1683               	bsf	3,5	;RP0=1, select bank3
  2181     02DC  1703               	bsf	3,6	;RP1=1, select bank3
  2182     02DD  084F               	movf	_maxFail^(0+384),w
  2183     02DE  3E30               	addlw	48
  2184     02DF  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2185     02E4                     l3757:
  2186                           
  2187                           ;main.c: 266:                 seconds = 0;
  2188     02E4  3000               	movlw	0
  2189     02E5  1683               	bsf	3,5	;RP0=1, select bank1
  2190     02E6  1303               	bcf	3,6	;RP1=0, select bank1
  2191     02E7  00E7               	movwf	(_seconds+3)^(0+128)
  2192     02E8  3000               	movlw	0
  2193     02E9  00E6               	movwf	(_seconds+2)^(0+128)
  2194     02EA  3000               	movlw	0
  2195     02EB  00E5               	movwf	(_seconds+1)^(0+128)
  2196     02EC  3000               	movlw	0
  2197     02ED  00E4               	movwf	_seconds^(0+128)
  2198     02EE                     l3759:
  2199                           
  2200                           ;main.c: 269:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '2')
  2201     02EE  3031               	movlw	49
  2202     02EF  1683               	bsf	3,5	;RP0=1, select bank3
  2203     02F0  1703               	bsf	3,6	;RP1=1, select bank3
  2204     02F1  0620               	xorwf	_source^(0+384),w
  2205     02F2  1D03               	btfss	3,2
  2206     02F3  2AF5               	goto	u4001
  2207     02F4  2AF6               	goto	u4000
  2208     02F5                     u4001:
  2209     02F5  2B33               	goto	l3771
  2210     02F6                     u4000:
  2211     02F6                     l3761:
  2212     02F6  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  2213     02F7  1683               	bsf	3,5	;RP0=1, select bank1
  2214     02F8  1303               	bcf	3,6	;RP1=0, select bank1
  2215     02F9  00A5               	movwf	CompareStrings@str1^(0+128)
  2216     02FA  3001               	movlw	1
  2217     02FB  00A6               	movwf	(CompareStrings@str1+1)^(0+128)
  2218     02FC  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2219     02FD  00A7               	movwf	CompareStrings@str2^(0+128)
  2220     02FE  120A  158A  2275  120A  118A  	fcall	_CompareStrings
  2221     0303  3A00               	xorlw	0
  2222     0304  1903               	skipnz
  2223     0305  2B07               	goto	u4011
  2224     0306  2B08               	goto	u4010
  2225     0307                     u4011:
  2226     0307  2B33               	goto	l3771
  2227     0308                     u4010:
  2228     0308                     l3763:
  2229     0308  3032               	movlw	50
  2230     0309  1683               	bsf	3,5	;RP0=1, select bank3
  2231     030A  1703               	bsf	3,6	;RP1=1, select bank3
  2232     030B  061F               	xorwf	_type^(0+384),w
  2233     030C  1D03               	btfss	3,2
  2234     030D  2B0F               	goto	u4021
  2235     030E  2B10               	goto	u4020
  2236     030F                     u4021:
  2237     030F  2B33               	goto	l3771
  2238     0310                     u4020:
  2239     0310                     l3765:
  2240                           
  2241                           ;main.c: 270:             {;main.c: 273:                 if(num_rand != 0)
  2242     0310  0812               	movf	_num_rand^(0+384),w
  2243     0311  0413               	iorwf	(_num_rand+1)^(0+384),w
  2244     0312  1903               	btfsc	3,2
  2245     0313  2B15               	goto	u4031
  2246     0314  2B16               	goto	u4030
  2247     0315                     u4031:
  2248     0315  2B21               	goto	l3769
  2249     0316                     u4030:
  2250     0316                     l3767:
  2251                           
  2252                           ;main.c: 274:                     seconds = 7500;
  2253     0316  3000               	movlw	0
  2254     0317  1683               	bsf	3,5	;RP0=1, select bank1
  2255     0318  1303               	bcf	3,6	;RP1=0, select bank1
  2256     0319  00E7               	movwf	(_seconds+3)^(0+128)
  2257     031A  3000               	movlw	0
  2258     031B  00E6               	movwf	(_seconds+2)^(0+128)
  2259     031C  301D               	movlw	29
  2260     031D  00E5               	movwf	(_seconds+1)^(0+128)
  2261     031E  304C               	movlw	76
  2262     031F  00E4               	movwf	_seconds^(0+128)
  2263     0320  2B33               	goto	l3771
  2264     0321                     l3769:
  2265                           
  2266                           ;main.c: 277:                 {;main.c: 278:                     milliseconds = 0;
  2267     0321  3000               	movlw	0
  2268     0322  1683               	bsf	3,5	;RP0=1, select bank1
  2269     0323  1303               	bcf	3,6	;RP1=0, select bank1
  2270     0324  00EB               	movwf	(_milliseconds+3)^(0+128)
  2271     0325  3000               	movlw	0
  2272     0326  00EA               	movwf	(_milliseconds+2)^(0+128)
  2273     0327  3000               	movlw	0
  2274     0328  00E9               	movwf	(_milliseconds+1)^(0+128)
  2275     0329  3000               	movlw	0
  2276     032A  00E8               	movwf	_milliseconds^(0+128)
  2277                           
  2278                           ;main.c: 279:                     seconds = 1000;
  2279     032B  3000               	movlw	0
  2280     032C  00E7               	movwf	(_seconds+3)^(0+128)
  2281     032D  3000               	movlw	0
  2282     032E  00E6               	movwf	(_seconds+2)^(0+128)
  2283     032F  3003               	movlw	3
  2284     0330  00E5               	movwf	(_seconds+1)^(0+128)
  2285     0331  30E8               	movlw	232
  2286     0332  00E4               	movwf	_seconds^(0+128)
  2287     0333                     l3771:
  2288                           
  2289                           ;main.c: 282:             recieved = 0;
  2290     0333  1683               	bsf	3,5	;RP0=1, select bank3
  2291     0334  1703               	bsf	3,6	;RP1=1, select bank3
  2292     0335  019C               	clrf	_recieved^(0+384)
  2293     0336                     l3773:
  2294                           
  2295                           ;main.c: 283:             iS = 0;
  2296     0336  1283               	bcf	3,5	;RP0=0, select bank0
  2297     0337  1303               	bcf	3,6	;RP1=0, select bank0
  2298     0338  01BE               	clrf	_iS
  2299     0339                     l3775:
  2300                           
  2301                           ;main.c: 288:         if(success)
  2302     0339  1683               	bsf	3,5	;RP0=1, select bank3
  2303     033A  1703               	bsf	3,6	;RP1=1, select bank3
  2304     033B  081A               	movf	_success^(0+384),w
  2305     033C  1903               	btfsc	3,2
  2306     033D  2B3F               	goto	u4041
  2307     033E  2B40               	goto	u4040
  2308     033F                     u4041:
  2309     033F  2B87               	goto	l3801
  2310     0340                     u4040:
  2311     0340                     l3777:
  2312                           
  2313                           ;main.c: 289:         {;main.c: 291:             lcdSend(0x01, 0);
  2314     0340  1283               	bcf	3,5	;RP0=0, select bank0
  2315     0341  1303               	bcf	3,6	;RP1=0, select bank0
  2316     0342  01BC               	clrf	lcdSend@tipo
  2317     0343  3001               	movlw	1
  2318     0344  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2319     0349                     l3779:
  2320                           
  2321                           ;main.c: 292:             lcdPrint("Benvenuto!\0");
  2322     0349  30C6               	movlw	low (STR_16| (0+32768))
  2323     034A  1683               	bsf	3,5	;RP0=1, select bank1
  2324     034B  1303               	bcf	3,6	;RP1=0, select bank1
  2325     034C  00A2               	movwf	lcdPrint@str^(0+128)
  2326     034D  3087               	movlw	high (STR_16| (0+32768))
  2327     034E  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2328     034F  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2329     0354                     l3781:
  2330                           
  2331                           ;main.c: 293:             iT = old_iT = 0;
  2332     0354  1683               	bsf	3,5	;RP0=1, select bank3
  2333     0355  1703               	bsf	3,6	;RP1=1, select bank3
  2334     0356  019D               	clrf	_old_iT^(0+384)
  2335     0357  019E               	clrf	_iT^(0+384)
  2336     0358                     l3783:
  2337                           
  2338                           ;main.c: 294:             success = 0;
  2339     0358  019A               	clrf	_success^(0+384)
  2340     0359                     l3785:
  2341                           
  2342                           ;main.c: 296:             compare = 0;
  2343     0359  019B               	clrf	_compare^(0+384)
  2344     035A                     l3787:
  2345                           
  2346                           ;main.c: 297:             maxFail = 3;
  2347     035A  3003               	movlw	3
  2348     035B  00CF               	movwf	_maxFail^(0+384)
  2349     035C                     l3789:
  2350                           
  2351                           ;main.c: 299:             packet[0] = '0';
  2352     035C  3030               	movlw	48
  2353     035D  00B4               	movwf	_packet^(0+384)
  2354     035E                     l3791:
  2355                           
  2356                           ;main.c: 300:             packet[1] = '/';
  2357     035E  302F               	movlw	47
  2358     035F  00B5               	movwf	(_packet^(0+384)+1)
  2359     0360                     l3793:
  2360                           
  2361                           ;main.c: 301:             packet[2] = '\0';
  2362     0360  01B6               	clrf	(_packet^(0+384)+2)
  2363     0361                     l3795:
  2364                           
  2365                           ;main.c: 302:             ConcatToPacket(packet, PIC_ID, '/');
  2366     0361  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2367     0362  1683               	bsf	3,5	;RP0=1, select bank1
  2368     0363  1303               	bcf	3,6	;RP1=0, select bank1
  2369     0364  00B1               	movwf	ConcatToPacket@str^(0+128)
  2370     0365  3001               	movlw	1
  2371     0366  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  2372     0367  302F               	movlw	47
  2373     0368  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2374     0369  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2375     036A  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  2376     036F                     l3797:
  2377                           
  2378                           ;main.c: 303:             ConcatToPacket(packet, "1/1", ' ');
  2379     036F  3013               	movlw	low (STR_17| (0+32768))
  2380     0370  1683               	bsf	3,5	;RP0=1, select bank1
  2381     0371  1303               	bcf	3,6	;RP1=0, select bank1
  2382     0372  00B1               	movwf	ConcatToPacket@str^(0+128)
  2383     0373  3088               	movlw	high (STR_17| (0+32768))
  2384     0374  00B2               	movwf	(ConcatToPacket@str^(0+128)+1)
  2385     0375  3020               	movlw	32
  2386     0376  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2387     0377  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2388     0378  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  2389     037D                     l3799:
  2390                           
  2391                           ;main.c: 304:             UART_TxString(packet, 0);
  2392     037D  1683               	bsf	3,5	;RP0=1, select bank1
  2393     037E  1303               	bcf	3,6	;RP1=0, select bank1
  2394     037F  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  2395     0380  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2396     0381  120A  158A  2359  120A  118A  	fcall	_UART_TxString
  2397                           
  2398                           ;main.c: 305:         }
  2399     0386  2C1C               	goto	l3843
  2400     0387                     l3801:
  2401     0387  084F               	movf	_maxFail^(0+384),w
  2402     0388  1903               	btfsc	3,2
  2403     0389  2B8B               	goto	u4051
  2404     038A  2B8C               	goto	u4050
  2405     038B                     u4051:
  2406     038B  2BD2               	goto	l3819
  2407     038C                     u4050:
  2408     038C                     l3803:
  2409     038C  3003               	movlw	3
  2410     038D  024F               	subwf	_maxFail^(0+384),w
  2411     038E  1803               	skipnc
  2412     038F  2B91               	goto	u4061
  2413     0390  2B92               	goto	u4060
  2414     0391                     u4061:
  2415     0391  2BD2               	goto	l3819
  2416     0392                     u4060:
  2417     0392                     l3805:
  2418     0392  0819               	movf	_fail^(0+384),w
  2419     0393  1903               	btfsc	3,2
  2420     0394  2B96               	goto	u4071
  2421     0395  2B97               	goto	u4070
  2422     0396                     u4071:
  2423     0396  2BD2               	goto	l3819
  2424     0397                     u4070:
  2425     0397                     l3807:
  2426                           
  2427                           ;main.c: 308:         {;main.c: 310:             lcdSend(0x01, 0);
  2428     0397  1283               	bcf	3,5	;RP0=0, select bank0
  2429     0398  1303               	bcf	3,6	;RP1=0, select bank0
  2430     0399  01BC               	clrf	lcdSend@tipo
  2431     039A  3001               	movlw	1
  2432     039B  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2433     03A0                     l3809:
  2434                           
  2435                           ;main.c: 311:             lcdPrint("Codice errato\0");
  2436     03A0  30AA               	movlw	low (STR_18| (0+32768))
  2437     03A1  1683               	bsf	3,5	;RP0=1, select bank1
  2438     03A2  1303               	bcf	3,6	;RP1=0, select bank1
  2439     03A3  00A2               	movwf	lcdPrint@str^(0+128)
  2440     03A4  3087               	movlw	high (STR_18| (0+32768))
  2441     03A5  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2442     03A6  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2443     03AB                     l3811:
  2444                           
  2445                           ;main.c: 312:             lcdSend(0xC0, 0);
  2446     03AB  1283               	bcf	3,5	;RP0=0, select bank0
  2447     03AC  1303               	bcf	3,6	;RP1=0, select bank0
  2448     03AD  01BC               	clrf	lcdSend@tipo
  2449     03AE  30C0               	movlw	192
  2450     03AF  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2451                           
  2452                           ;main.c: 313:             lcdPrint("Tentativi: \0");
  2453     03B4  30B9               	movlw	low (STR_15| (0+32768))
  2454     03B5  1683               	bsf	3,5	;RP0=1, select bank1
  2455     03B6  1303               	bcf	3,6	;RP1=0, select bank1
  2456     03B7  00A2               	movwf	lcdPrint@str^(0+128)
  2457     03B8  3087               	movlw	high (STR_15| (0+32768))
  2458     03B9  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2459     03BA  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2460     03BF                     l3813:
  2461                           
  2462                           ;main.c: 314:             lcdSend(maxFail + '0', 1);
  2463     03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2464     03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2465     03C1  01BC               	clrf	lcdSend@tipo
  2466     03C2  0ABC               	incf	lcdSend@tipo,f
  2467     03C3  1683               	bsf	3,5	;RP0=1, select bank3
  2468     03C4  1703               	bsf	3,6	;RP1=1, select bank3
  2469     03C5  084F               	movf	_maxFail^(0+384),w
  2470     03C6  3E30               	addlw	48
  2471     03C7  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2472     03CC                     l3815:
  2473                           
  2474                           ;main.c: 315:             iT = old_iT = 0;
  2475     03CC  1683               	bsf	3,5	;RP0=1, select bank3
  2476     03CD  1703               	bsf	3,6	;RP1=1, select bank3
  2477     03CE  019D               	clrf	_old_iT^(0+384)
  2478     03CF  019E               	clrf	_iT^(0+384)
  2479     03D0                     l3817:
  2480                           
  2481                           ;main.c: 316:             fail = 0;
  2482     03D0  0199               	clrf	_fail^(0+384)
  2483                           
  2484                           ;main.c: 317:         }
  2485     03D1  2C1C               	goto	l3843
  2486     03D2                     l3819:
  2487     03D2  084F               	movf	_maxFail^(0+384),w
  2488     03D3  1D03               	btfss	3,2
  2489     03D4  2BD6               	goto	u4081
  2490     03D5  2BD7               	goto	u4080
  2491     03D6                     u4081:
  2492     03D6  2C1C               	goto	l3843
  2493     03D7                     u4080:
  2494     03D7                     l3821:
  2495                           
  2496                           ;main.c: 320:         {;main.c: 322:             lcdSend(0x01, 0);
  2497     03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2498     03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2499     03D9  01BC               	clrf	lcdSend@tipo
  2500     03DA  3001               	movlw	1
  2501     03DB  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2502     03E0                     l3823:
  2503                           
  2504                           ;main.c: 323:             lcdPrint("Tent. esauriti\0");
  2505     03E0  308B               	movlw	low (STR_20| (0+32768))
  2506     03E1  1683               	bsf	3,5	;RP0=1, select bank1
  2507     03E2  1303               	bcf	3,6	;RP1=0, select bank1
  2508     03E3  00A2               	movwf	lcdPrint@str^(0+128)
  2509     03E4  3087               	movlw	high (STR_20| (0+32768))
  2510     03E5  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2511     03E6  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2512     03EB                     l3825:
  2513                           
  2514                           ;main.c: 325:             maxFail = 3;
  2515     03EB  3003               	movlw	3
  2516     03EC  1683               	bsf	3,5	;RP0=1, select bank3
  2517     03ED  1703               	bsf	3,6	;RP1=1, select bank3
  2518     03EE  00CF               	movwf	_maxFail^(0+384)
  2519     03EF                     l3827:
  2520                           
  2521                           ;main.c: 326:             iT = old_iT = 0;
  2522     03EF  019D               	clrf	_old_iT^(0+384)
  2523     03F0  019E               	clrf	_iT^(0+384)
  2524     03F1                     l3829:
  2525                           
  2526                           ;main.c: 327:             compare = 0;
  2527     03F1  019B               	clrf	_compare^(0+384)
  2528     03F2                     l3831:
  2529                           
  2530                           ;main.c: 329:             packet[0] = '0';
  2531     03F2  3030               	movlw	48
  2532     03F3  00B4               	movwf	_packet^(0+384)
  2533     03F4                     l3833:
  2534                           
  2535                           ;main.c: 330:             packet[1] = '/';
  2536     03F4  302F               	movlw	47
  2537     03F5  00B5               	movwf	(_packet^(0+384)+1)
  2538     03F6                     l3835:
  2539                           
  2540                           ;main.c: 331:             packet[2] = '\0';
  2541     03F6  01B6               	clrf	(_packet^(0+384)+2)
  2542     03F7                     l3837:
  2543                           
  2544                           ;main.c: 332:             ConcatToPacket(packet, PIC_ID, '/');
  2545     03F7  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2546     03F8  1683               	bsf	3,5	;RP0=1, select bank1
  2547     03F9  1303               	bcf	3,6	;RP1=0, select bank1
  2548     03FA  00B1               	movwf	ConcatToPacket@str^(0+128)
  2549     03FB  3001               	movlw	1
  2550     03FC  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  2551     03FD  302F               	movlw	47
  2552     03FE  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2553     03FF  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2554     0400  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  2555     0405                     l3839:
  2556                           
  2557                           ;main.c: 333:             ConcatToPacket(packet, "1/0", ' ');
  2558     0405  300F               	movlw	low (STR_21| (0+32768))
  2559     0406  1683               	bsf	3,5	;RP0=1, select bank1
  2560     0407  1303               	bcf	3,6	;RP1=0, select bank1
  2561     0408  00B1               	movwf	ConcatToPacket@str^(0+128)
  2562     0409  3088               	movlw	high (STR_21| (0+32768))
  2563     040A  00B2               	movwf	(ConcatToPacket@str^(0+128)+1)
  2564     040B  3020               	movlw	32
  2565     040C  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2566     040D  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2567     040E  160A  118A  2766  120A  118A  	fcall	_ConcatToPacket
  2568     0413                     l3841:
  2569                           
  2570                           ;main.c: 334:             UART_TxString(packet, 0);
  2571     0413  1683               	bsf	3,5	;RP0=1, select bank1
  2572     0414  1303               	bcf	3,6	;RP1=0, select bank1
  2573     0415  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  2574     0416  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2575     0417  120A  158A  2359  120A  118A  	fcall	_UART_TxString
  2576     041C                     l3843:
  2577                           
  2578                           ;main.c: 338:         if(iT != old_iT && compare)
  2579     041C  1683               	bsf	3,5	;RP0=1, select bank3
  2580     041D  1703               	bsf	3,6	;RP1=1, select bank3
  2581     041E  081E               	movf	_iT^(0+384),w
  2582     041F  061D               	xorwf	_old_iT^(0+384),w
  2583     0420  1903               	skipnz
  2584     0421  2C23               	goto	u4091
  2585     0422  2C24               	goto	u4090
  2586     0423                     u4091:
  2587     0423  2C51               	goto	l3853
  2588     0424                     u4090:
  2589     0424                     l3845:
  2590     0424  081B               	movf	_compare^(0+384),w
  2591     0425  1903               	btfsc	3,2
  2592     0426  2C28               	goto	u4101
  2593     0427  2C29               	goto	u4100
  2594     0428                     u4101:
  2595     0428  2C51               	goto	l3853
  2596     0429                     u4100:
  2597     0429                     l3847:
  2598                           
  2599                           ;main.c: 339:         {;main.c: 341:             lcdSend(0x01, 0);
  2600     0429  1283               	bcf	3,5	;RP0=0, select bank0
  2601     042A  1303               	bcf	3,6	;RP1=0, select bank0
  2602     042B  01BC               	clrf	lcdSend@tipo
  2603     042C  3001               	movlw	1
  2604     042D  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2605     0432                     l3849:
  2606                           
  2607                           ;main.c: 342:             lcdPrint("#=conf. *=canc.\0"),
  2608     0432  3049               	movlw	low (STR_10| (0+32768))
  2609     0433  1683               	bsf	3,5	;RP0=1, select bank1
  2610     0434  1303               	bcf	3,6	;RP1=0, select bank1
  2611     0435  00A2               	movwf	lcdPrint@str^(0+128)
  2612     0436  3087               	movlw	high (STR_10| (0+32768))
  2613     0437  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2614     0438  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2615     043D                     l3851:
  2616     043D  1283               	bcf	3,5	;RP0=0, select bank0
  2617     043E  1303               	bcf	3,6	;RP1=0, select bank0
  2618     043F  01BC               	clrf	lcdSend@tipo
  2619     0440  30C0               	movlw	192
  2620     0441  160A  118A  25C3  120A  118A  	fcall	_lcdSend
  2621                           
  2622                           ;main.c: 344:             lcdPrint(datoTastierino);
  2623     0446  30A3               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2624     0447  1683               	bsf	3,5	;RP0=1, select bank1
  2625     0448  1303               	bcf	3,6	;RP1=0, select bank1
  2626     0449  00A2               	movwf	lcdPrint@str^(0+128)
  2627     044A  3001               	movlw	1
  2628     044B  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  2629     044C  120A  158A  203B  120A  118A  	fcall	_lcdPrint
  2630     0451                     l3853:
  2631                           
  2632                           ;main.c: 347:         old_iT = iT;
  2633     0451  1683               	bsf	3,5	;RP0=1, select bank3
  2634     0452  1703               	bsf	3,6	;RP1=1, select bank3
  2635     0453  081E               	movf	_iT^(0+384),w
  2636     0454  009D               	movwf	_old_iT^(0+384)
  2637     0455  286E               	goto	l3615
  2638     0456  120A  118A  2810   	ljmp	start
  2639     0459                     __end_of_main:
  2640                           
  2641                           	psect	text1
  2642     0459                     __ptext1:	
  2643 ;; *************** function _read_NumPad *****************
  2644 ;; Defined at:
  2645 ;;		line 652 in file "main.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  id              2   41[BANK1 ] int 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2659 ;;      Params:         0       0       0       0       0
  2660 ;;      Locals:         0       0       2       0       0
  2661 ;;      Temps:          0       0      10       0       0
  2662 ;;      Totals:         0       0      12       0       0
  2663 ;;Total ram usage:       12 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 6
  2666 ;; This function calls:
  2667 ;;		_CompareStrings
  2668 ;;		_Fill
  2669 ;;		___awmod
  2670 ;;		___wmul
  2671 ;;		_eeprom_write
  2672 ;;		_rand
  2673 ;;		_srand
  2674 ;; This function is called by:
  2675 ;;		_main
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679     0459                     _read_NumPad:	
  2680                           ;psect for function _read_NumPad
  2681                           
  2682     0459                     l3415:	
  2683                           ;incstack = 0
  2684                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2685                           
  2686                           
  2687                           ;main.c: 655:     TRISD |= 0x0F;
  2688     0459  300F               	movlw	15
  2689     045A  1683               	bsf	3,5	;RP0=1, select bank1
  2690     045B  1303               	bcf	3,6	;RP1=0, select bank1
  2691     045C  00BF               	movwf	??_read_NumPad^(0+128)
  2692     045D  083F               	movf	??_read_NumPad^(0+128),w
  2693     045E  0488               	iorwf	8,f	;volatile
  2694     045F                     l3417:
  2695                           
  2696                           ;main.c: 656:     for(colScan = 0; colScan < 3; colScan++)
  2697     045F  01EE               	clrf	_colScan^(0+128)
  2698     0460                     l3423:
  2699                           
  2700                           ;main.c: 657:     {;main.c: 660:         PORTB |= 0x07;
  2701     0460  3007               	movlw	7
  2702     0461  00BF               	movwf	??_read_NumPad^(0+128)
  2703     0462  083F               	movf	??_read_NumPad^(0+128),w
  2704     0463  1283               	bcf	3,5	;RP0=0, select bank0
  2705     0464  1303               	bcf	3,6	;RP1=0, select bank0
  2706     0465  0486               	iorwf	6,f	;volatile
  2707     0466                     l3425:
  2708                           
  2709                           ;main.c: 662:         PORTB &= colMask[colScan];
  2710     0466  1683               	bsf	3,5	;RP0=1, select bank1
  2711     0467  1303               	bcf	3,6	;RP1=0, select bank1
  2712     0468  086E               	movf	_colScan^(0+128),w
  2713     0469  3E22               	addlw	low (_colMask| (0+32768))
  2714     046A  0084               	movwf	4
  2715     046B  3087               	movlw	high (_colMask| (0+32768))
  2716     046C  1803               	skipnc
  2717     046D  3E01               	addlw	1
  2718     046E  1283               	bcf	3,5	;RP0=0, select bank0
  2719     046F  1303               	bcf	3,6	;RP1=0, select bank0
  2720     0470  00FF               	movwf	btemp+1
  2721     0471  120A  118A  2700  120A  118A  	fcall	stringtab
  2722     0476  1683               	bsf	3,5	;RP0=1, select bank1
  2723     0477  1303               	bcf	3,6	;RP1=0, select bank1
  2724     0478  00BF               	movwf	??_read_NumPad^(0+128)
  2725     0479  083F               	movf	??_read_NumPad^(0+128),w
  2726     047A  1283               	bcf	3,5	;RP0=0, select bank0
  2727     047B  1303               	bcf	3,6	;RP1=0, select bank0
  2728     047C  0586               	andwf	6,f	;volatile
  2729     047D                     l3427:
  2730                           
  2731                           ;main.c: 664:         for(rowScan = 0; rowScan < 4; rowScan++)
  2732     047D  1683               	bsf	3,5	;RP0=1, select bank1
  2733     047E  1303               	bcf	3,6	;RP1=0, select bank1
  2734     047F  01ED               	clrf	_rowScan^(0+128)
  2735     0480                     l3433:
  2736                           
  2737                           ;main.c: 665:         {;main.c: 667:             if(!(PORTD & rowMask[rowScan]))
  2738     0480  086D               	movf	_rowScan^(0+128),w
  2739     0481  3E1E               	addlw	low (_rowMask| (0+32768))
  2740     0482  0084               	movwf	4
  2741     0483  3087               	movlw	high (_rowMask| (0+32768))
  2742     0484  1803               	skipnc
  2743     0485  3E01               	addlw	1
  2744     0486  1283               	bcf	3,5	;RP0=0, select bank0
  2745     0487  1303               	bcf	3,6	;RP1=0, select bank0
  2746     0488  00FF               	movwf	btemp+1
  2747     0489  120A  118A  2700  120A  118A  	fcall	stringtab
  2748     048E  0508               	andwf	8,w	;volatile
  2749     048F  1D03               	btfss	3,2
  2750     0490  2C92               	goto	u3561
  2751     0491  2C93               	goto	u3560
  2752     0492                     u3561:
  2753     0492  2CC2               	goto	l278
  2754     0493                     u3560:
  2755     0493                     l3435:
  2756                           
  2757                           ;main.c: 668:             {;main.c: 670:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  2758     0493  3021               	movlw	33
  2759     0494  1683               	bsf	3,5	;RP0=1, select bank1
  2760     0495  1303               	bcf	3,6	;RP1=0, select bank1
  2761     0496  00C0               	movwf	(??_read_NumPad^(0+128)+1)
  2762     0497  3075               	movlw	117
  2763     0498  00BF               	movwf	??_read_NumPad^(0+128)
  2764     0499                     u4117:
  2765     0499  0BBF               	decfsz	??_read_NumPad^(0+128),f
  2766     049A  2C99               	goto	u4117
  2767     049B  0BC0               	decfsz	(??_read_NumPad^(0+128)+1),f
  2768     049C  2C99               	goto	u4117
  2769     049D  2C9E               	nop2
  2770     049E                     l3437:
  2771                           
  2772                           ;main.c: 671:                 if(!(PORTD & rowMask[rowScan]))
  2773     049E  1683               	bsf	3,5	;RP0=1, select bank1
  2774     049F  1303               	bcf	3,6	;RP1=0, select bank1
  2775     04A0  086D               	movf	_rowScan^(0+128),w
  2776     04A1  3E1E               	addlw	low (_rowMask| (0+32768))
  2777     04A2  0084               	movwf	4
  2778     04A3  3087               	movlw	high (_rowMask| (0+32768))
  2779     04A4  1803               	skipnc
  2780     04A5  3E01               	addlw	1
  2781     04A6  1283               	bcf	3,5	;RP0=0, select bank0
  2782     04A7  1303               	bcf	3,6	;RP1=0, select bank0
  2783     04A8  00FF               	movwf	btemp+1
  2784     04A9  120A  118A  2700  120A  118A  	fcall	stringtab
  2785     04AE  0508               	andwf	8,w	;volatile
  2786     04AF  1D03               	btfss	3,2
  2787     04B0  2CB2               	goto	u3571
  2788     04B1  2CB3               	goto	u3570
  2789     04B2                     u3571:
  2790     04B2  2CC2               	goto	l278
  2791     04B3                     u3570:
  2792     04B3                     l3439:
  2793                           
  2794                           ;main.c: 672:                 {;main.c: 676:                     keypressed = rowScan+(4
      +                          *colScan);
  2795     04B3  1683               	bsf	3,5	;RP0=1, select bank1
  2796     04B4  1303               	bcf	3,6	;RP1=0, select bank1
  2797     04B5  086E               	movf	_colScan^(0+128),w
  2798     04B6  00BF               	movwf	??_read_NumPad^(0+128)
  2799     04B7  3002               	movlw	2
  2800     04B8                     u3585:
  2801     04B8  1003               	clrc
  2802     04B9  0DBF               	rlf	??_read_NumPad^(0+128),f
  2803     04BA  3EFF               	addlw	-1
  2804     04BB  1D03               	skipz
  2805     04BC  2CB8               	goto	u3585
  2806     04BD  086D               	movf	_rowScan^(0+128),w
  2807     04BE  073F               	addwf	??_read_NumPad^(0+128),w
  2808     04BF  00EF               	movwf	_keypressed^(0+128)
  2809     04C0                     l3441:
  2810                           
  2811                           ;main.c: 678:                     keyf = 1;
  2812     04C0  01EC               	clrf	_keyf^(0+128)
  2813     04C1  0AEC               	incf	_keyf^(0+128),f
  2814     04C2                     l278:	
  2815                           ;main.c: 680:             }
  2816                           
  2817                           
  2818                           ;main.c: 681:         }
  2819     04C2  3001               	movlw	1
  2820     04C3  1683               	bsf	3,5	;RP0=1, select bank1
  2821     04C4  1303               	bcf	3,6	;RP1=0, select bank1
  2822     04C5  00BF               	movwf	??_read_NumPad^(0+128)
  2823     04C6  083F               	movf	??_read_NumPad^(0+128),w
  2824     04C7  07ED               	addwf	_rowScan^(0+128),f
  2825     04C8                     l3443:
  2826     04C8  3004               	movlw	4
  2827     04C9  026D               	subwf	_rowScan^(0+128),w
  2828     04CA  1C03               	skipc
  2829     04CB  2CCD               	goto	u3591
  2830     04CC  2CCE               	goto	u3590
  2831     04CD                     u3591:
  2832     04CD  2C80               	goto	l3433
  2833     04CE                     u3590:
  2834     04CE                     l3445:
  2835                           
  2836                           ;main.c: 683:         if(keyf)
  2837     04CE  086C               	movf	_keyf^(0+128),w
  2838     04CF  1903               	btfsc	3,2
  2839     04D0  2CD2               	goto	u3601
  2840     04D1  2CD3               	goto	u3600
  2841     04D2                     u3601:
  2842     04D2  2E84               	goto	l3535
  2843     04D3                     u3600:
  2844     04D3                     l3447:
  2845                           
  2846                           ;main.c: 684:         {;main.c: 685:             keyf = 0;
  2847     04D3  01EC               	clrf	_keyf^(0+128)
  2848     04D4                     l3449:
  2849                           
  2850                           ;main.c: 688:             if(keypressed == 8)
  2851     04D4  3008               	movlw	8
  2852     04D5  066F               	xorwf	_keypressed^(0+128),w
  2853     04D6  1D03               	btfss	3,2
  2854     04D7  2CD9               	goto	u3611
  2855     04D8  2CDA               	goto	u3610
  2856     04D9                     u3611:
  2857     04D9  2DEC               	goto	l3495
  2858     04DA                     u3610:
  2859     04DA                     l3451:
  2860                           
  2861                           ;main.c: 689:             {;main.c: 691:                 if(initialize && i_id > 0)
  2862     04DA  1683               	bsf	3,5	;RP0=1, select bank3
  2863     04DB  1703               	bsf	3,6	;RP1=1, select bank3
  2864     04DC  0850               	movf	_initialize^(0+384),w
  2865     04DD  1903               	btfsc	3,2
  2866     04DE  2CE0               	goto	u3621
  2867     04DF  2CE1               	goto	u3620
  2868     04E0                     u3621:
  2869     04E0  2D66               	goto	l3471
  2870     04E1                     u3620:
  2871     04E1                     l3453:
  2872     04E1  0822               	movf	_i_id^(0+384),w
  2873     04E2  1903               	btfsc	3,2
  2874     04E3  2CE5               	goto	u3631
  2875     04E4  2CE6               	goto	u3630
  2876     04E5                     u3631:
  2877     04E5  2D66               	goto	l3471
  2878     04E6                     u3630:
  2879     04E6                     l3455:
  2880                           
  2881                           ;main.c: 692:                 {;main.c: 694:                     if(i_id < 3)
  2882     04E6  3003               	movlw	3
  2883     04E7  0222               	subwf	_i_id^(0+384),w
  2884     04E8  1803               	skipnc
  2885     04E9  2CEB               	goto	u3641
  2886     04EA  2CEC               	goto	u3640
  2887     04EB                     u3641:
  2888     04EB  2CF2               	goto	l3459
  2889     04EC                     u3640:
  2890     04EC                     l3457:
  2891                           
  2892                           ;main.c: 695:                     {;main.c: 697:                         Fill(PIC_ID);
  2893     04EC  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2894     04ED  120A  158A  220F  120A  118A  	fcall	_Fill
  2895     04F2                     l3459:
  2896                           
  2897                           ;main.c: 700:                     int id = (PIC_ID[0] - '0') * 100 + (PIC_ID[1] - '0') *
      +                           10 + (PIC_ID[2] - '0');
  2898     04F2  1683               	bsf	3,5	;RP0=1, select bank3
  2899     04F3  1703               	bsf	3,6	;RP1=1, select bank3
  2900     04F4  0847               	movf	_PIC_ID^(0+384),w
  2901     04F5  1683               	bsf	3,5	;RP0=1, select bank1
  2902     04F6  1303               	bcf	3,6	;RP1=0, select bank1
  2903     04F7  00BF               	movwf	??_read_NumPad^(0+128)
  2904     04F8  01C0               	clrf	(??_read_NumPad^(0+128)+1)
  2905     04F9  083F               	movf	??_read_NumPad^(0+128),w
  2906     04FA  00B9               	movwf	___wmul@multiplier^(0+128)
  2907     04FB  0840               	movf	(??_read_NumPad+1)^(0+128),w
  2908     04FC  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  2909     04FD  3064               	movlw	100
  2910     04FE  00BB               	movwf	___wmul@multiplicand^(0+128)
  2911     04FF  3000               	movlw	0
  2912     0500  00BC               	movwf	(___wmul@multiplicand^(0+128)+1)
  2913     0501  160A  118A  259C  120A  118A  	fcall	___wmul
  2914     0506  1683               	bsf	3,5	;RP0=1, select bank1
  2915     0507  1303               	bcf	3,6	;RP1=0, select bank1
  2916     0508  0839               	movf	?___wmul^(0+128),w
  2917     0509  00C1               	movwf	(??_read_NumPad+2)^(0+128)
  2918     050A  083A               	movf	(?___wmul+1)^(0+128),w
  2919     050B  00C2               	movwf	((??_read_NumPad+2)^(0+128)+1)
  2920     050C  1683               	bsf	3,5	;RP0=1, select bank3
  2921     050D  1703               	bsf	3,6	;RP1=1, select bank3
  2922     050E  0848               	movf	(_PIC_ID^(0+384)+1),w
  2923     050F  1683               	bsf	3,5	;RP0=1, select bank1
  2924     0510  1303               	bcf	3,6	;RP1=0, select bank1
  2925     0511  00C3               	movwf	(??_read_NumPad+4)^(0+128)
  2926     0512  01C4               	clrf	((??_read_NumPad+4)^(0+128)+1)
  2927     0513  0843               	movf	(??_read_NumPad+4)^(0+128),w
  2928     0514  00B9               	movwf	___wmul@multiplier^(0+128)
  2929     0515  0844               	movf	(??_read_NumPad+5)^(0+128),w
  2930     0516  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  2931     0517  300A               	movlw	10
  2932     0518  00BB               	movwf	___wmul@multiplicand^(0+128)
  2933     0519  3000               	movlw	0
  2934     051A  00BC               	movwf	(___wmul@multiplicand^(0+128)+1)
  2935     051B  160A  118A  259C  120A  118A  	fcall	___wmul
  2936     0520  1683               	bsf	3,5	;RP0=1, select bank1
  2937     0521  1303               	bcf	3,6	;RP1=0, select bank1
  2938     0522  0839               	movf	?___wmul^(0+128),w
  2939     0523  0741               	addwf	(??_read_NumPad+2)^(0+128),w
  2940     0524  00C5               	movwf	(??_read_NumPad+6)^(0+128)
  2941     0525  083A               	movf	(?___wmul+1)^(0+128),w
  2942     0526  1803               	skipnc
  2943     0527  0A3A               	incf	(?___wmul+1)^(0+128),w
  2944     0528  0742               	addwf	(??_read_NumPad+3)^(0+128),w
  2945     0529  00C6               	movwf	(??_read_NumPad+7)^(0+128)
  2946     052A  1683               	bsf	3,5	;RP0=1, select bank3
  2947     052B  1703               	bsf	3,6	;RP1=1, select bank3
  2948     052C  0849               	movf	(_PIC_ID^(0+384)+2),w
  2949     052D  1683               	bsf	3,5	;RP0=1, select bank1
  2950     052E  1303               	bcf	3,6	;RP1=0, select bank1
  2951     052F  0745               	addwf	(??_read_NumPad+6)^(0+128),w
  2952     0530  00C7               	movwf	(??_read_NumPad+8)^(0+128)
  2953     0531  3000               	movlw	0
  2954     0532  1803               	skipnc
  2955     0533  3001               	movlw	1
  2956     0534  0746               	addwf	(??_read_NumPad+7)^(0+128),w
  2957     0535  00C8               	movwf	(??_read_NumPad+9)^(0+128)
  2958     0536  0847               	movf	(??_read_NumPad+8)^(0+128),w
  2959     0537  3E30               	addlw	48
  2960     0538  00C9               	movwf	read_NumPad@id^(0+128)
  2961     0539  0848               	movf	(??_read_NumPad+9)^(0+128),w
  2962     053A  1803               	skipnc
  2963     053B  3E01               	addlw	1
  2964     053C  3EEB               	addlw	235
  2965     053D  00CA               	movwf	(read_NumPad@id+1)^(0+128)
  2966     053E                     l3461:
  2967                           
  2968                           ;main.c: 702:                     if(id <= 250)
  2969     053E  084A               	movf	(read_NumPad@id+1)^(0+128),w
  2970     053F  3A80               	xorlw	128
  2971     0540  00FF               	movwf	btemp+1
  2972     0541  3080               	movlw	128
  2973     0542  027F               	subwf	btemp+1,w
  2974     0543  1D03               	skipz
  2975     0544  2D47               	goto	u3655
  2976     0545  30FB               	movlw	251
  2977     0546  0249               	subwf	read_NumPad@id^(0+128),w
  2978     0547                     u3655:
  2979     0547  1803               	skipnc
  2980     0548  2D4A               	goto	u3651
  2981     0549  2D4B               	goto	u3650
  2982     054A                     u3651:
  2983     054A  2D5D               	goto	l284
  2984     054B                     u3650:
  2985     054B                     l3463:
  2986                           
  2987                           ;main.c: 703:                     {;main.c: 705:                         eeprom_write(0,
      +                           id);
  2988     054B  1683               	bsf	3,5	;RP0=1, select bank1
  2989     054C  1303               	bcf	3,6	;RP1=0, select bank1
  2990     054D  0849               	movf	read_NumPad@id^(0+128),w
  2991     054E  1283               	bcf	3,5	;RP0=0, select bank0
  2992     054F  1303               	bcf	3,6	;RP1=0, select bank0
  2993     0550  00BC               	movwf	eeprom_write@value
  2994     0551  3000               	movlw	0
  2995     0552  160A  118A  2626  120A  118A  	fcall	_eeprom_write
  2996     0557                     l3465:
  2997                           
  2998                           ;main.c: 706:                         pr_succ = 1;
  2999     0557  1683               	bsf	3,5	;RP0=1, select bank3
  3000     0558  1703               	bsf	3,6	;RP1=1, select bank3
  3001     0559  0195               	clrf	_pr_succ^(0+384)
  3002     055A  0A95               	incf	_pr_succ^(0+384),f
  3003     055B                     l3467:
  3004                           
  3005                           ;main.c: 708:                         initialize = 0;
  3006     055B  01D0               	clrf	_initialize^(0+384)
  3007                           
  3008                           ;main.c: 709:                     }
  3009     055C  2E71               	goto	l3531
  3010     055D                     l284:	
  3011                           ;main.c: 711:                     else
  3012                           
  3013                           
  3014                           ;main.c: 712:                     {;main.c: 713:                         pr_err_max = 1;
  3015     055D  1683               	bsf	3,5	;RP0=1, select bank3
  3016     055E  1703               	bsf	3,6	;RP1=1, select bank3
  3017     055F  0197               	clrf	_pr_err_max^(0+384)
  3018     0560  0A97               	incf	_pr_err_max^(0+384),f
  3019     0561                     l3469:
  3020                           
  3021                           ;main.c: 715:                         PIC_ID[0] = '\0';
  3022     0561  01C7               	clrf	_PIC_ID^(0+384)
  3023                           
  3024                           ;main.c: 716:                         i_id = old_i_id = 0;
  3025     0562  01A1               	clrf	_old_i_id^(0+384)
  3026     0563  01A2               	clrf	_i_id^(0+384)
  3027     0564  2E71               	goto	l3531
  3028     0565                     l285:	
  3029                           ;main.c: 717:                     }
  3030                           
  3031                           
  3032                           ;main.c: 718:                 }
  3033     0565  2E71               	goto	l3531
  3034     0566                     l3471:
  3035     0566  0850               	movf	_initialize^(0+384),w
  3036     0567  1903               	btfsc	3,2
  3037     0568  2D6A               	goto	u3661
  3038     0569  2D6B               	goto	u3660
  3039     056A                     u3661:
  3040     056A  2D6E               	goto	l3475
  3041     056B                     u3660:
  3042     056B                     l3473:
  3043                           
  3044                           ;main.c: 721:                     pr_empty = 1;
  3045     056B  0196               	clrf	_pr_empty^(0+384)
  3046     056C  0A96               	incf	_pr_empty^(0+384),f
  3047     056D  2E71               	goto	l3531
  3048     056E                     l3475:
  3049     056E  081B               	movf	_compare^(0+384),w
  3050     056F  1D03               	btfss	3,2
  3051     0570  2D72               	goto	u3671
  3052     0571  2D73               	goto	u3670
  3053     0572                     u3671:
  3054     0572  2DC2               	goto	l3483
  3055     0573                     u3670:
  3056     0573                     l3477:
  3057     0573  304C               	movlw	76
  3058     0574  1683               	bsf	3,5	;RP0=1, select bank1
  3059     0575  1303               	bcf	3,6	;RP1=0, select bank1
  3060     0576  0664               	xorwf	_seconds^(0+128),w
  3061     0577  301D               	movlw	29
  3062     0578  1903               	skipnz
  3063     0579  0665               	xorwf	(_seconds+1)^(0+128),w
  3064     057A  0466               	iorwf	(_seconds+2)^(0+128),w
  3065     057B  0467               	iorwf	(_seconds+3)^(0+128),w
  3066     057C  1903               	btfsc	3,2
  3067     057D  2D7F               	goto	u3681
  3068     057E  2D80               	goto	u3680
  3069     057F                     u3681:
  3070     057F  2DC2               	goto	l3483
  3071     0580                     u3680:
  3072     0580                     l3479:
  3073                           
  3074                           ;main.c: 724:                 {;main.c: 726:                     srand(milliseconds);
  3075     0580  1683               	bsf	3,5	;RP0=1, select bank1
  3076     0581  1303               	bcf	3,6	;RP1=0, select bank1
  3077     0582  0869               	movf	(_milliseconds+1)^(0+128),w
  3078     0583  1283               	bcf	3,5	;RP0=0, select bank0
  3079     0584  1303               	bcf	3,6	;RP1=0, select bank0
  3080     0585  00BD               	movwf	srand@x+1
  3081     0586  1683               	bsf	3,5	;RP0=1, select bank1
  3082     0587  1303               	bcf	3,6	;RP1=0, select bank1
  3083     0588  0868               	movf	_milliseconds^(0+128),w
  3084     0589  1283               	bcf	3,5	;RP0=0, select bank0
  3085     058A  1303               	bcf	3,6	;RP1=0, select bank0
  3086     058B  00BC               	movwf	srand@x
  3087     058C  160A  118A  2526  120A  118A  	fcall	_srand
  3088                           
  3089                           ;main.c: 728:                     num_rand = ((rand()%8999)+1000);
  3090     0591  3027               	movlw	39
  3091     0592  1683               	bsf	3,5	;RP0=1, select bank1
  3092     0593  1303               	bcf	3,6	;RP1=0, select bank1
  3093     0594  00B3               	movwf	___awmod@divisor^(0+128)
  3094     0595  3023               	movlw	35
  3095     0596  00B4               	movwf	(___awmod@divisor^(0+128)+1)
  3096     0597  120A  118A  268F  120A  118A  	fcall	_rand
  3097     059C  1683               	bsf	3,5	;RP0=1, select bank1
  3098     059D  1303               	bcf	3,6	;RP1=0, select bank1
  3099     059E  082D               	movf	(?_rand+1)^(0+128),w
  3100     059F  00B6               	movwf	(___awmod@dividend+1)^(0+128)
  3101     05A0  082C               	movf	?_rand^(0+128),w
  3102     05A1  00B5               	movwf	___awmod@dividend^(0+128)
  3103     05A2  120A  158A  214B  120A  118A  	fcall	___awmod
  3104     05A7  1683               	bsf	3,5	;RP0=1, select bank1
  3105     05A8  1303               	bcf	3,6	;RP1=0, select bank1
  3106     05A9  0833               	movf	?___awmod^(0+128),w
  3107     05AA  3EE8               	addlw	232
  3108     05AB  1683               	bsf	3,5	;RP0=1, select bank3
  3109     05AC  1703               	bsf	3,6	;RP1=1, select bank3
  3110     05AD  0092               	movwf	_num_rand^(0+384)
  3111     05AE  1683               	bsf	3,5	;RP0=1, select bank1
  3112     05AF  1303               	bcf	3,6	;RP1=0, select bank1
  3113     05B0  0834               	movf	(?___awmod+1)^(0+128),w
  3114     05B1  1803               	skipnc
  3115     05B2  3E01               	addlw	1
  3116     05B3  3E03               	addlw	3
  3117     05B4  1683               	bsf	3,5	;RP0=1, select bank3
  3118     05B5  1703               	bsf	3,6	;RP1=1, select bank3
  3119     05B6  0093               	movwf	(_num_rand+1)^(0+384)
  3120     05B7                     l3481:
  3121                           
  3122                           ;main.c: 730:                     seconds = 0;
  3123     05B7  3000               	movlw	0
  3124     05B8  1683               	bsf	3,5	;RP0=1, select bank1
  3125     05B9  1303               	bcf	3,6	;RP1=0, select bank1
  3126     05BA  00E7               	movwf	(_seconds+3)^(0+128)
  3127     05BB  3000               	movlw	0
  3128     05BC  00E6               	movwf	(_seconds+2)^(0+128)
  3129     05BD  3000               	movlw	0
  3130     05BE  00E5               	movwf	(_seconds+1)^(0+128)
  3131     05BF  3000               	movlw	0
  3132     05C0  00E4               	movwf	_seconds^(0+128)
  3133                           
  3134                           ;main.c: 731:                 }
  3135     05C1  2E71               	goto	l3531
  3136     05C2                     l3483:
  3137     05C2  1683               	bsf	3,5	;RP0=1, select bank3
  3138     05C3  1703               	bsf	3,6	;RP1=1, select bank3
  3139     05C4  081B               	movf	_compare^(0+384),w
  3140     05C5  1903               	btfsc	3,2
  3141     05C6  2DC8               	goto	u3691
  3142     05C7  2DC9               	goto	u3690
  3143     05C8                     u3691:
  3144     05C8  2DE0               	goto	l3489
  3145     05C9                     u3690:
  3146     05C9                     l3485:
  3147     05C9  303F               	movlw	(low (_datoSeriale| 0))& (0+255)
  3148     05CA  1683               	bsf	3,5	;RP0=1, select bank1
  3149     05CB  1303               	bcf	3,6	;RP1=0, select bank1
  3150     05CC  00A5               	movwf	CompareStrings@str1^(0+128)
  3151     05CD  3000               	movlw	0
  3152     05CE  00A6               	movwf	(CompareStrings@str1+1)^(0+128)
  3153     05CF  30A3               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  3154     05D0  00A7               	movwf	CompareStrings@str2^(0+128)
  3155     05D1  120A  158A  2275  120A  118A  	fcall	_CompareStrings
  3156     05D6  3A00               	xorlw	0
  3157     05D7  1903               	skipnz
  3158     05D8  2DDA               	goto	u3701
  3159     05D9  2DDB               	goto	u3700
  3160     05DA                     u3701:
  3161     05DA  2DE0               	goto	l3489
  3162     05DB                     u3700:
  3163     05DB                     l3487:
  3164                           
  3165                           ;main.c: 734:                 {;main.c: 735:                     success = 1;
  3166     05DB  1683               	bsf	3,5	;RP0=1, select bank3
  3167     05DC  1703               	bsf	3,6	;RP1=1, select bank3
  3168     05DD  019A               	clrf	_success^(0+384)
  3169     05DE  0A9A               	incf	_success^(0+384),f
  3170                           
  3171                           ;main.c: 736:                 }
  3172     05DF  2E71               	goto	l3531
  3173     05E0                     l3489:
  3174     05E0  1683               	bsf	3,5	;RP0=1, select bank3
  3175     05E1  1703               	bsf	3,6	;RP1=1, select bank3
  3176     05E2  081B               	movf	_compare^(0+384),w
  3177     05E3  1903               	btfsc	3,2
  3178     05E4  2DE6               	goto	u3711
  3179     05E5  2DE7               	goto	u3710
  3180     05E6                     u3711:
  3181     05E6  2D65               	goto	l285
  3182     05E7                     u3710:
  3183     05E7                     l3491:
  3184                           
  3185                           ;main.c: 739:                 {;main.c: 740:                     maxFail--;
  3186     05E7  3001               	movlw	1
  3187     05E8  02CF               	subwf	_maxFail^(0+384),f
  3188     05E9                     l3493:
  3189                           
  3190                           ;main.c: 741:                     fail = 1;
  3191     05E9  0199               	clrf	_fail^(0+384)
  3192     05EA  0A99               	incf	_fail^(0+384),f
  3193     05EB  2E71               	goto	l3531
  3194     05EC                     l3495:
  3195     05EC  086F               	movf	_keypressed^(0+128),w
  3196     05ED  1D03               	btfss	3,2
  3197     05EE  2DF0               	goto	u3721
  3198     05EF  2DF1               	goto	u3720
  3199     05F0                     u3721:
  3200     05F0  2E17               	goto	l3513
  3201     05F1                     u3720:
  3202     05F1                     l3497:
  3203                           
  3204                           ;main.c: 746:             {;main.c: 748:                 if(compare && iT > 0)
  3205     05F1  1683               	bsf	3,5	;RP0=1, select bank3
  3206     05F2  1703               	bsf	3,6	;RP1=1, select bank3
  3207     05F3  081B               	movf	_compare^(0+384),w
  3208     05F4  1903               	btfsc	3,2
  3209     05F5  2DF7               	goto	u3731
  3210     05F6  2DF8               	goto	u3730
  3211     05F7                     u3731:
  3212     05F7  2E05               	goto	l3505
  3213     05F8                     u3730:
  3214     05F8                     l3499:
  3215     05F8  081E               	movf	_iT^(0+384),w
  3216     05F9  1903               	btfsc	3,2
  3217     05FA  2DFC               	goto	u3741
  3218     05FB  2DFD               	goto	u3740
  3219     05FC                     u3741:
  3220     05FC  2E05               	goto	l3505
  3221     05FD                     u3740:
  3222     05FD                     l3501:
  3223                           
  3224                           ;main.c: 749:                 {;main.c: 751:                     iT--;
  3225     05FD  3001               	movlw	1
  3226     05FE  029E               	subwf	_iT^(0+384),f
  3227     05FF                     l3503:
  3228                           
  3229                           ;main.c: 752:                     datoTastierino[iT] = '\0';
  3230     05FF  081E               	movf	_iT^(0+384),w
  3231     0600  3EA3               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3232     0601  0084               	movwf	4
  3233     0602  1783               	bsf	3,7	;select IRP bank3
  3234     0603  0180               	clrf	0
  3235                           
  3236                           ;main.c: 753:                 }
  3237     0604  2E71               	goto	l3531
  3238     0605                     l3505:
  3239     0605  0850               	movf	_initialize^(0+384),w
  3240     0606  1903               	btfsc	3,2
  3241     0607  2E09               	goto	u3751
  3242     0608  2E0A               	goto	u3750
  3243     0609                     u3751:
  3244     0609  2E71               	goto	l3531
  3245     060A                     u3750:
  3246     060A                     l3507:
  3247     060A  0822               	movf	_i_id^(0+384),w
  3248     060B  1903               	btfsc	3,2
  3249     060C  2E0E               	goto	u3761
  3250     060D  2E0F               	goto	u3760
  3251     060E                     u3761:
  3252     060E  2E71               	goto	l3531
  3253     060F                     u3760:
  3254     060F                     l3509:
  3255                           
  3256                           ;main.c: 756:                 {;main.c: 758:                     i_id--;
  3257     060F  3001               	movlw	1
  3258     0610  02A2               	subwf	_i_id^(0+384),f
  3259     0611                     l3511:
  3260                           
  3261                           ;main.c: 759:                     PIC_ID[i_id] = '\0';
  3262     0611  0822               	movf	_i_id^(0+384),w
  3263     0612  3EC7               	addlw	(low (_PIC_ID| (0+256)))& (0+255)
  3264     0613  0084               	movwf	4
  3265     0614  1783               	bsf	3,7	;select IRP bank3
  3266     0615  0180               	clrf	0
  3267     0616  2E71               	goto	l3531
  3268     0617                     l3513:
  3269     0617  1683               	bsf	3,5	;RP0=1, select bank3
  3270     0618  1703               	bsf	3,6	;RP1=1, select bank3
  3271     0619  081B               	movf	_compare^(0+384),w
  3272     061A  1903               	btfsc	3,2
  3273     061B  2E1D               	goto	u3771
  3274     061C  2E1E               	goto	u3770
  3275     061D                     u3771:
  3276     061D  2E42               	goto	l3521
  3277     061E                     u3770:
  3278     061E                     l3515:
  3279                           
  3280                           ;main.c: 764:             {;main.c: 766:                 datoTastierino[iT++] = keys[key
      +                          pressed];
  3281     061E  1683               	bsf	3,5	;RP0=1, select bank1
  3282     061F  1303               	bcf	3,6	;RP1=0, select bank1
  3283     0620  086F               	movf	_keypressed^(0+128),w
  3284     0621  3E12               	addlw	low (_keys| (0+32768))
  3285     0622  0084               	movwf	4
  3286     0623  3087               	movlw	high (_keys| (0+32768))
  3287     0624  1803               	skipnc
  3288     0625  3E01               	addlw	1
  3289     0626  1283               	bcf	3,5	;RP0=0, select bank0
  3290     0627  1303               	bcf	3,6	;RP1=0, select bank0
  3291     0628  00FF               	movwf	btemp+1
  3292     0629  120A  118A  2700  120A  118A  	fcall	stringtab
  3293     062E  1683               	bsf	3,5	;RP0=1, select bank1
  3294     062F  1303               	bcf	3,6	;RP1=0, select bank1
  3295     0630  00BF               	movwf	??_read_NumPad^(0+128)
  3296     0631  1683               	bsf	3,5	;RP0=1, select bank3
  3297     0632  1703               	bsf	3,6	;RP1=1, select bank3
  3298     0633  081E               	movf	_iT^(0+384),w
  3299     0634  3EA3               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3300     0635  0084               	movwf	4
  3301     0636  1683               	bsf	3,5	;RP0=1, select bank1
  3302     0637  1303               	bcf	3,6	;RP1=0, select bank1
  3303     0638  083F               	movf	??_read_NumPad^(0+128),w
  3304     0639  1783               	bsf	3,7	;select IRP bank3
  3305     063A  0080               	movwf	0
  3306     063B                     l3517:
  3307     063B  3001               	movlw	1
  3308     063C  00BF               	movwf	??_read_NumPad^(0+128)
  3309     063D  083F               	movf	??_read_NumPad^(0+128),w
  3310     063E  1683               	bsf	3,5	;RP0=1, select bank3
  3311     063F  1703               	bsf	3,6	;RP1=1, select bank3
  3312     0640  079E               	addwf	_iT^(0+384),f
  3313     0641  2DFF               	goto	l3503
  3314     0642                     l3521:
  3315     0642  0850               	movf	_initialize^(0+384),w
  3316     0643  1903               	btfsc	3,2
  3317     0644  2E46               	goto	u3781
  3318     0645  2E47               	goto	u3780
  3319     0646                     u3781:
  3320     0646  2E71               	goto	l3531
  3321     0647                     u3780:
  3322     0647                     l3523:
  3323     0647  3003               	movlw	3
  3324     0648  0222               	subwf	_i_id^(0+384),w
  3325     0649  1803               	skipnc
  3326     064A  2E4C               	goto	u3791
  3327     064B  2E4D               	goto	u3790
  3328     064C                     u3791:
  3329     064C  2E71               	goto	l3531
  3330     064D                     u3790:
  3331     064D                     l3525:
  3332                           
  3333                           ;main.c: 771:             {;main.c: 773:                 PIC_ID[i_id++] = keys[keypresse
      +                          d];
  3334     064D  1683               	bsf	3,5	;RP0=1, select bank1
  3335     064E  1303               	bcf	3,6	;RP1=0, select bank1
  3336     064F  086F               	movf	_keypressed^(0+128),w
  3337     0650  3E12               	addlw	low (_keys| (0+32768))
  3338     0651  0084               	movwf	4
  3339     0652  3087               	movlw	high (_keys| (0+32768))
  3340     0653  1803               	skipnc
  3341     0654  3E01               	addlw	1
  3342     0655  1283               	bcf	3,5	;RP0=0, select bank0
  3343     0656  1303               	bcf	3,6	;RP1=0, select bank0
  3344     0657  00FF               	movwf	btemp+1
  3345     0658  120A  118A  2700  120A  118A  	fcall	stringtab
  3346     065D  1683               	bsf	3,5	;RP0=1, select bank1
  3347     065E  1303               	bcf	3,6	;RP1=0, select bank1
  3348     065F  00BF               	movwf	??_read_NumPad^(0+128)
  3349     0660  1683               	bsf	3,5	;RP0=1, select bank3
  3350     0661  1703               	bsf	3,6	;RP1=1, select bank3
  3351     0662  0822               	movf	_i_id^(0+384),w
  3352     0663  3EC7               	addlw	(low (_PIC_ID| (0+256)))& (0+255)
  3353     0664  0084               	movwf	4
  3354     0665  1683               	bsf	3,5	;RP0=1, select bank1
  3355     0666  1303               	bcf	3,6	;RP1=0, select bank1
  3356     0667  083F               	movf	??_read_NumPad^(0+128),w
  3357     0668  1783               	bsf	3,7	;select IRP bank3
  3358     0669  0080               	movwf	0
  3359     066A                     l3527:
  3360     066A  3001               	movlw	1
  3361     066B  00BF               	movwf	??_read_NumPad^(0+128)
  3362     066C  083F               	movf	??_read_NumPad^(0+128),w
  3363     066D  1683               	bsf	3,5	;RP0=1, select bank3
  3364     066E  1703               	bsf	3,6	;RP1=1, select bank3
  3365     066F  07A2               	addwf	_i_id^(0+384),f
  3366     0670  2E11               	goto	l3511
  3367     0671                     l3531:
  3368                           
  3369                           ;main.c: 777:             PORTD |= 0x0F;
  3370     0671  300F               	movlw	15
  3371     0672  1303               	bcf	3,6	;RP1=0, select bank1
  3372     0673  00BF               	movwf	??_read_NumPad^(0+128)
  3373     0674  083F               	movf	??_read_NumPad^(0+128),w
  3374     0675  1283               	bcf	3,5	;RP0=0, select bank0
  3375     0676  1303               	bcf	3,6	;RP1=0, select bank0
  3376     0677  0488               	iorwf	8,f	;volatile
  3377     0678                     l3533:	
  3378                           ;main.c: 780:             while(((PORTD & 0x0F) != 0x0F))
  3379                           
  3380                           
  3381                           ;main.c: 780:             while(((PORTD & 0x0F) != 0x0F))
  3382     0678  300F               	movlw	15
  3383     0679  1283               	bcf	3,5	;RP0=0, select bank0
  3384     067A  0508               	andwf	8,w	;volatile
  3385     067B  1683               	bsf	3,5	;RP0=1, select bank1
  3386     067C  1303               	bcf	3,6	;RP1=0, select bank1
  3387     067D  00BF               	movwf	??_read_NumPad^(0+128)
  3388     067E  300F               	movlw	15
  3389     067F  063F               	xorwf	??_read_NumPad^(0+128),w
  3390     0680  1D03               	btfss	3,2
  3391     0681  2E83               	goto	u3801
  3392     0682  2E84               	goto	u3800
  3393     0683                     u3801:
  3394     0683  2E78               	goto	l3533
  3395     0684                     u3800:
  3396     0684                     l3535:
  3397                           
  3398                           ;main.c: 785:     }
  3399     0684  3001               	movlw	1
  3400     0685  00BF               	movwf	??_read_NumPad^(0+128)
  3401     0686  083F               	movf	??_read_NumPad^(0+128),w
  3402     0687  07EE               	addwf	_colScan^(0+128),f
  3403     0688                     l3537:
  3404     0688  3003               	movlw	3
  3405     0689  026E               	subwf	_colScan^(0+128),w
  3406     068A  1C03               	skipc
  3407     068B  2E8D               	goto	u3811
  3408     068C  2E8E               	goto	u3810
  3409     068D                     u3811:
  3410     068D  2C60               	goto	l3423
  3411     068E                     u3810:
  3412     068E                     l306:
  3413     068E  0008               	return
  3414     068F                     __end_of_read_NumPad:
  3415                           
  3416                           	psect	text2
  3417     1626                     __ptext2:	
  3418 ;; *************** function _eeprom_write *****************
  3419 ;; Defined at:
  3420 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  addr            1    wreg     unsigned char 
  3423 ;;  value           1   28[BANK0 ] unsigned char 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;  addr            1    0[BANK1 ] unsigned char 
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3435 ;;      Params:         0       1       0       0       0
  3436 ;;      Locals:         0       0       1       0       0
  3437 ;;      Temps:          0       1       0       0       0
  3438 ;;      Totals:         0       2       1       0       0
  3439 ;;Total ram usage:        3 bytes
  3440 ;; Hardware stack levels used: 1
  3441 ;; Hardware stack levels required when called: 4
  3442 ;; This function calls:
  3443 ;;		Nothing
  3444 ;; This function is called by:
  3445 ;;		_read_NumPad
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449     1626                     _eeprom_write:	
  3450                           ;psect for function _eeprom_write
  3451                           
  3452                           
  3453                           ;incstack = 0
  3454                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3455                           ;eeprom_write@addr stored from wreg
  3456     1626  1683               	bsf	3,5	;RP0=1, select bank1
  3457     1627  1303               	bcf	3,6	;RP1=0, select bank1
  3458     1628  00A0               	movwf	eeprom_write@addr^(0+128)
  3459     1629                     l446:	
  3460                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  3461                           
  3462     1629                     l447:
  3463     1629  1683               	bsf	3,5	;RP0=1, select bank3
  3464     162A  1703               	bsf	3,6	;RP1=1, select bank3
  3465     162B  188C               	btfsc	12,1	;volsfr
  3466     162C  2E2E               	goto	u3411
  3467     162D  2E2F               	goto	u3410
  3468     162E                     u3411:
  3469     162E  2E29               	goto	l447
  3470     162F                     u3410:
  3471     162F                     l3323:
  3472     162F  1683               	bsf	3,5	;RP0=1, select bank1
  3473     1630  1303               	bcf	3,6	;RP1=0, select bank1
  3474     1631  0820               	movf	eeprom_write@addr^(0+128),w
  3475     1632  1283               	bcf	3,5	;RP0=0, select bank2
  3476     1633  1703               	bsf	3,6	;RP1=1, select bank2
  3477     1634  008D               	movwf	13	;volatile
  3478     1635  1283               	bcf	3,5	;RP0=0, select bank0
  3479     1636  1303               	bcf	3,6	;RP1=0, select bank0
  3480     1637  083C               	movf	eeprom_write@value,w
  3481     1638  1283               	bcf	3,5	;RP0=0, select bank2
  3482     1639  1703               	bsf	3,6	;RP1=1, select bank2
  3483     163A  008C               	movwf	12	;volatile
  3484     163B                     l3325:
  3485     163B  303F               	movlw	63
  3486     163C  1283               	bcf	3,5	;RP0=0, select bank0
  3487     163D  1303               	bcf	3,6	;RP1=0, select bank0
  3488     163E  00BD               	movwf	??_eeprom_write
  3489     163F  083D               	movf	??_eeprom_write,w
  3490     1640  1683               	bsf	3,5	;RP0=1, select bank3
  3491     1641  1703               	bsf	3,6	;RP1=1, select bank3
  3492     1642  058C               	andwf	12,f	;volsfr
  3493     1643                     l3327:
  3494     1643  1283               	bcf	3,5	;RP0=0, select bank0
  3495     1644  1303               	bcf	3,6	;RP1=0, select bank0
  3496     1645  1003               	bcf	3,0	;volatile
  3497     1646                     l3329:
  3498     1646  1F8B               	btfss	11,7	;volatile
  3499     1647  2E49               	goto	u3421
  3500     1648  2E4A               	goto	u3420
  3501     1649                     u3421:
  3502     1649  2E4B               	goto	l450
  3503     164A                     u3420:
  3504     164A                     l3331:
  3505     164A  1403               	bsf	3,0	;volatile
  3506     164B                     l450:
  3507     164B  138B               	bcf	11,7	;volatile
  3508     164C  1683               	bsf	3,5	;RP0=1, select bank3
  3509     164D  1703               	bsf	3,6	;RP1=1, select bank3
  3510     164E  150C               	bsf	12,2	;volsfr
  3511     164F                     l3333:
  3512     164F  3055               	movlw	85
  3513     1650  008D               	movwf	13	;volsfr
  3514     1651  30AA               	movlw	170
  3515     1652  008D               	movwf	13	;volsfr
  3516     1653                     l3335:
  3517     1653  148C               	bsf	12,1	;volsfr
  3518     1654                     l3337:
  3519     1654  110C               	bcf	12,2	;volsfr
  3520     1655                     l3339:
  3521     1655  1283               	bcf	3,5	;RP0=0, select bank0
  3522     1656  1303               	bcf	3,6	;RP1=0, select bank0
  3523     1657  1C03               	btfss	3,0	;volatile
  3524     1658  2E5A               	goto	u3431
  3525     1659  2E5B               	goto	u3430
  3526     165A                     u3431:
  3527     165A  2E5C               	goto	l453
  3528     165B                     u3430:
  3529     165B                     l3341:
  3530     165B  178B               	bsf	11,7	;volatile
  3531     165C                     l453:
  3532     165C  0008               	return
  3533     165D                     __end_of_eeprom_write:
  3534                           
  3535                           	psect	text3
  3536     0A75                     __ptext3:	
  3537 ;; *************** function _CompareStrings *****************
  3538 ;; Defined at:
  3539 ;;		line 596 in file "main.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  str1            2    5[BANK1 ] PTR unsigned char 
  3542 ;;		 -> datoSeriale(17), id_dest(4), 
  3543 ;;  str2            1    7[BANK1 ] PTR unsigned char 
  3544 ;;		 -> datoTastierino(17), PIC_ID(4), 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  i               1   12[BANK1 ] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      unsigned char 
  3549 ;; Registers used:
  3550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3556 ;;      Params:         0       0       3       0       0
  3557 ;;      Locals:         0       0       1       0       0
  3558 ;;      Temps:          0       0       4       0       0
  3559 ;;      Totals:         0       0       8       0       0
  3560 ;;Total ram usage:        8 bytes
  3561 ;; Hardware stack levels used: 1
  3562 ;; Hardware stack levels required when called: 5
  3563 ;; This function calls:
  3564 ;;		_Length
  3565 ;; This function is called by:
  3566 ;;		_main
  3567 ;;		_read_NumPad
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571     0A75                     _CompareStrings:	
  3572                           ;psect for function _CompareStrings
  3573                           
  3574     0A75                     l3197:	
  3575                           ;incstack = 0
  3576                           ; Regs used in _CompareStrings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3577                           
  3578                           
  3579                           ;main.c: 596: char CompareStrings(char *str1, char *str2);main.c: 597: {;main.c: 599:   
      +                            if(Length(str1) != Length(str2))
  3580     0A75  1683               	bsf	3,5	;RP0=1, select bank1
  3581     0A76  1303               	bcf	3,6	;RP1=0, select bank1
  3582     0A77  0825               	movf	CompareStrings@str1^(0+128),w
  3583     0A78  1283               	bcf	3,5	;RP0=0, select bank0
  3584     0A79  1303               	bcf	3,6	;RP1=0, select bank0
  3585     0A7A  00BC               	movwf	Length@str
  3586     0A7B  1683               	bsf	3,5	;RP0=1, select bank1
  3587     0A7C  1303               	bcf	3,6	;RP1=0, select bank1
  3588     0A7D  0826               	movf	(CompareStrings@str1+1)^(0+128),w
  3589     0A7E  1283               	bcf	3,5	;RP0=0, select bank0
  3590     0A7F  1303               	bcf	3,6	;RP1=0, select bank0
  3591     0A80  00BD               	movwf	Length@str+1
  3592     0A81  160A  118A  25F0  120A  158A  	fcall	_Length
  3593     0A86  1283               	bcf	3,5	;RP0=0, select bank0
  3594     0A87  1303               	bcf	3,6	;RP1=0, select bank0
  3595     0A88  083C               	movf	?_Length,w
  3596     0A89  1683               	bsf	3,5	;RP0=1, select bank1
  3597     0A8A  1303               	bcf	3,6	;RP1=0, select bank1
  3598     0A8B  00A8               	movwf	??_CompareStrings^(0+128)
  3599     0A8C  1283               	bcf	3,5	;RP0=0, select bank0
  3600     0A8D  1303               	bcf	3,6	;RP1=0, select bank0
  3601     0A8E  083D               	movf	?_Length+1,w
  3602     0A8F  1683               	bsf	3,5	;RP0=1, select bank1
  3603     0A90  1303               	bcf	3,6	;RP1=0, select bank1
  3604     0A91  00A9               	movwf	(??_CompareStrings^(0+128)+1)
  3605     0A92  0827               	movf	CompareStrings@str2^(0+128),w
  3606     0A93  1283               	bcf	3,5	;RP0=0, select bank0
  3607     0A94  1303               	bcf	3,6	;RP1=0, select bank0
  3608     0A95  00BC               	movwf	Length@str
  3609     0A96  3001               	movlw	1
  3610     0A97  00BD               	movwf	Length@str+1
  3611     0A98  160A  118A  25F0  120A  158A  	fcall	_Length
  3612     0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  3613     0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  3614     0A9F  083D               	movf	?_Length+1,w
  3615     0AA0  1683               	bsf	3,5	;RP0=1, select bank1
  3616     0AA1  1303               	bcf	3,6	;RP1=0, select bank1
  3617     0AA2  0629               	xorwf	(??_CompareStrings+1)^(0+128),w
  3618     0AA3  1D03               	skipz
  3619     0AA4  2AAB               	goto	u3295
  3620     0AA5  1283               	bcf	3,5	;RP0=0, select bank0
  3621     0AA6  1303               	bcf	3,6	;RP1=0, select bank0
  3622     0AA7  083C               	movf	?_Length,w
  3623     0AA8  1683               	bsf	3,5	;RP0=1, select bank1
  3624     0AA9  1303               	bcf	3,6	;RP1=0, select bank1
  3625     0AAA  0628               	xorwf	??_CompareStrings^(0+128),w
  3626     0AAB                     u3295:
  3627     0AAB  1903               	skipnz
  3628     0AAC  2AAE               	goto	u3291
  3629     0AAD  2AAF               	goto	u3290
  3630     0AAE                     u3291:
  3631     0AAE  2AB1               	goto	l3205
  3632     0AAF                     u3290:
  3633     0AAF                     l3199:
  3634                           
  3635                           ;main.c: 600:         return 0;
  3636     0AAF  3000               	movlw	0
  3637     0AB0  2AE4               	goto	l254
  3638     0AB1                     l3205:
  3639                           
  3640                           ;main.c: 602:     {;main.c: 603:         char i = 0;
  3641     0AB1  01AC               	clrf	CompareStrings@i^(0+128)
  3642                           
  3643                           ;main.c: 606:         while(str1[i] != '\0')
  3644     0AB2  2AD2               	goto	l3215
  3645     0AB3                     l3207:
  3646                           
  3647                           ;main.c: 607:         {;main.c: 608:             if(str1[i] != str2[i])
  3648     0AB3  082C               	movf	CompareStrings@i^(0+128),w
  3649     0AB4  0727               	addwf	CompareStrings@str2^(0+128),w
  3650     0AB5  00A8               	movwf	??_CompareStrings^(0+128)
  3651     0AB6  0828               	movf	??_CompareStrings^(0+128),w
  3652     0AB7  0084               	movwf	4
  3653     0AB8  1783               	bsf	3,7	;select IRP bank2
  3654     0AB9  0800               	movf	0,w
  3655     0ABA  00A9               	movwf	(??_CompareStrings+1)^(0+128)
  3656     0ABB  082C               	movf	CompareStrings@i^(0+128),w
  3657     0ABC  0725               	addwf	CompareStrings@str1^(0+128),w
  3658     0ABD  00AA               	movwf	(??_CompareStrings+2)^(0+128)
  3659     0ABE  0826               	movf	(CompareStrings@str1+1)^(0+128),w
  3660     0ABF  1803               	skipnc
  3661     0AC0  3E01               	addlw	1
  3662     0AC1  00AB               	movwf	((??_CompareStrings+2)^(0+128)+1)
  3663     0AC2  082A               	movf	(??_CompareStrings+2)^(0+128),w
  3664     0AC3  0084               	movwf	4
  3665     0AC4  1783               	bsf	3,7
  3666     0AC5  1C2B               	btfss	(??_CompareStrings+3)^(0+128),0
  3667     0AC6  1383               	bcf	3,7
  3668     0AC7  0800               	movf	0,w
  3669     0AC8  0629               	xorwf	(??_CompareStrings+1)^(0+128),w
  3670     0AC9  1903               	skipnz
  3671     0ACA  2ACC               	goto	u3301
  3672     0ACB  2ACD               	goto	u3300
  3673     0ACC                     u3301:
  3674     0ACC  2ACE               	goto	l3213
  3675     0ACD                     u3300:
  3676     0ACD  2AAF               	goto	l3199
  3677     0ACE                     l3213:
  3678                           
  3679                           ;main.c: 611:             i++;
  3680     0ACE  3001               	movlw	1
  3681     0ACF  00A8               	movwf	??_CompareStrings^(0+128)
  3682     0AD0  0828               	movf	??_CompareStrings^(0+128),w
  3683     0AD1  07AC               	addwf	CompareStrings@i^(0+128),f
  3684     0AD2                     l3215:
  3685                           
  3686                           ;main.c: 606:         while(str1[i] != '\0')
  3687     0AD2  082C               	movf	CompareStrings@i^(0+128),w
  3688     0AD3  0725               	addwf	CompareStrings@str1^(0+128),w
  3689     0AD4  00A8               	movwf	??_CompareStrings^(0+128)
  3690     0AD5  0826               	movf	(CompareStrings@str1+1)^(0+128),w
  3691     0AD6  1803               	skipnc
  3692     0AD7  3E01               	addlw	1
  3693     0AD8  00A9               	movwf	(??_CompareStrings^(0+128)+1)
  3694     0AD9  0828               	movf	??_CompareStrings^(0+128),w
  3695     0ADA  0084               	movwf	4
  3696     0ADB  1783               	bsf	3,7
  3697     0ADC  1C29               	btfss	(??_CompareStrings+1)^(0+128),0
  3698     0ADD  1383               	bcf	3,7
  3699     0ADE  0800               	movf	0,w
  3700     0ADF  1D03               	btfss	3,2
  3701     0AE0  2AE2               	goto	u3311
  3702     0AE1  2AE3               	goto	u3310
  3703     0AE2                     u3311:
  3704     0AE2  2AB3               	goto	l3207
  3705     0AE3                     u3310:
  3706     0AE3                     l3217:
  3707                           
  3708                           ;main.c: 614:         return 1;
  3709     0AE3  3001               	movlw	1
  3710     0AE4                     l254:
  3711     0AE4  0008               	return
  3712     0AE5                     __end_of_CompareStrings:
  3713                           
  3714                           	psect	text4
  3715     0AE5                     __ptext4:	
  3716 ;; *************** function _init_PIC *****************
  3717 ;; Defined at:
  3718 ;;		line 353 in file "main.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  id              2    2[BANK3 ] int 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      void 
  3725 ;; Registers used:
  3726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3732 ;;      Params:         0       0       0       0       0
  3733 ;;      Locals:         0       0       0       2       0
  3734 ;;      Temps:          0       0       0       2       0
  3735 ;;      Totals:         0       0       0       4       0
  3736 ;;Total ram usage:        4 bytes
  3737 ;; Hardware stack levels used: 1
  3738 ;; Hardware stack levels required when called: 7
  3739 ;; This function calls:
  3740 ;;		_ConvertToString
  3741 ;;		_Fill
  3742 ;;		_UART_init
  3743 ;;		_eeprom_read
  3744 ;;		_init_LCD
  3745 ;;		_init_NumPad
  3746 ;;		_init_Timer0
  3747 ;;		_lcdPrint
  3748 ;;		_lcdSend
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754     0AE5                     _init_PIC:	
  3755                           ;psect for function _init_PIC
  3756                           
  3757     0AE5                     l3397:	
  3758                           ;incstack = 0
  3759                           ; Regs used in _init_PIC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3760                           
  3761                           
  3762                           ;main.c: 356:     UART_init(115200);
  3763     0AE5  3000               	movlw	0
  3764     0AE6  1683               	bsf	3,5	;RP0=1, select bank1
  3765     0AE7  1303               	bcf	3,6	;RP1=0, select bank1
  3766     0AE8  00DA               	movwf	(UART_init@baudrate+3)^(0+128)
  3767     0AE9  3001               	movlw	1
  3768     0AEA  00D9               	movwf	(UART_init@baudrate+2)^(0+128)
  3769     0AEB  30C2               	movlw	194
  3770     0AEC  00D8               	movwf	(UART_init@baudrate+1)^(0+128)
  3771     0AED  3000               	movlw	0
  3772     0AEE  00D7               	movwf	UART_init@baudrate^(0+128)
  3773     0AEF  160A  118A  2699  120A  158A  	fcall	_UART_init
  3774                           
  3775                           ;main.c: 357:     init_LCD();
  3776     0AF4  120A  158A  21AA  120A  158A  	fcall	_init_LCD
  3777                           
  3778                           ;main.c: 358:     init_NumPad();
  3779     0AF9  160A  118A  254B  120A  158A  	fcall	_init_NumPad
  3780                           
  3781                           ;main.c: 359:     init_Timer0();
  3782     0AFE  160A  118A  255C  120A  158A  	fcall	_init_Timer0
  3783                           
  3784                           ;main.c: 362:     int id = (int)eeprom_read(0);
  3785     0B03  3000               	movlw	0
  3786     0B04  120A  158A  201C  120A  158A  	fcall	_eeprom_read
  3787     0B09  1683               	bsf	3,5	;RP0=1, select bank3
  3788     0B0A  1703               	bsf	3,6	;RP1=1, select bank3
  3789     0B0B  00CB               	movwf	??_init_PIC^(0+384)
  3790     0B0C  01CC               	clrf	(??_init_PIC^(0+384)+1)
  3791     0B0D  084B               	movf	??_init_PIC^(0+384),w
  3792     0B0E  00CD               	movwf	init_PIC@id^(0+384)
  3793     0B0F  084C               	movf	(??_init_PIC+1)^(0+384),w
  3794     0B10  00CE               	movwf	(init_PIC@id+1)^(0+384)
  3795     0B11                     l3399:
  3796                           
  3797                           ;main.c: 364:     if(id == 255)
  3798     0B11  0A4D               	incf	init_PIC@id^(0+384),w
  3799     0B12  044E               	iorwf	(init_PIC@id+1)^(0+384),w
  3800     0B13  1D03               	btfss	3,2
  3801     0B14  2B16               	goto	u3551
  3802     0B15  2B17               	goto	u3550
  3803     0B16                     u3551:
  3804     0B16  2B37               	goto	l3407
  3805     0B17                     u3550:
  3806     0B17                     l3401:
  3807                           
  3808                           ;main.c: 365:     {;main.c: 366:         lcdPrint("Inser. ID PIC:\0");
  3809     0B17  307B               	movlw	low (STR_23| (0+32768))
  3810     0B18  1683               	bsf	3,5	;RP0=1, select bank1
  3811     0B19  1303               	bcf	3,6	;RP1=0, select bank1
  3812     0B1A  00A2               	movwf	lcdPrint@str^(0+128)
  3813     0B1B  3087               	movlw	high (STR_23| (0+32768))
  3814     0B1C  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  3815     0B1D  120A  158A  203B  120A  158A  	fcall	_lcdPrint
  3816     0B22                     l3403:
  3817                           
  3818                           ;main.c: 367:         lcdSend(0xC0, 0);
  3819     0B22  1283               	bcf	3,5	;RP0=0, select bank0
  3820     0B23  1303               	bcf	3,6	;RP1=0, select bank0
  3821     0B24  01BC               	clrf	lcdSend@tipo
  3822     0B25  30C0               	movlw	192
  3823     0B26  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  3824     0B2B                     l3405:
  3825                           
  3826                           ;main.c: 368:         lcdPrint("MIN=0,MAX=250\0");
  3827     0B2B  309B               	movlw	low (STR_24| (0+32768))
  3828     0B2C  1683               	bsf	3,5	;RP0=1, select bank1
  3829     0B2D  1303               	bcf	3,6	;RP1=0, select bank1
  3830     0B2E  00A2               	movwf	lcdPrint@str^(0+128)
  3831     0B2F  3087               	movlw	high (STR_24| (0+32768))
  3832     0B30  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  3833     0B31  120A  158A  203B  120A  158A  	fcall	_lcdPrint
  3834                           
  3835                           ;main.c: 369:     }
  3836     0B36  2B58               	goto	l181
  3837     0B37                     l3407:
  3838                           
  3839                           ;main.c: 372:     {;main.c: 373:         ConvertToString(id, PIC_ID);
  3840     0B37  084D               	movf	init_PIC@id^(0+384),w
  3841     0B38  1683               	bsf	3,5	;RP0=1, select bank1
  3842     0B39  1303               	bcf	3,6	;RP1=0, select bank1
  3843     0B3A  00D7               	movwf	ConvertToString@n^(0+128)
  3844     0B3B  1683               	bsf	3,5	;RP0=1, select bank3
  3845     0B3C  1703               	bsf	3,6	;RP1=1, select bank3
  3846     0B3D  084E               	movf	(init_PIC@id+1)^(0+384),w
  3847     0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  3848     0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  3849     0B40  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  3850     0B41  3000               	movlw	0
  3851     0B42  1BD8               	btfsc	(ConvertToString@n+1)^(0+128),7
  3852     0B43  30FF               	movlw	255
  3853     0B44  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  3854     0B45  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  3855     0B46  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  3856     0B47  00DB               	movwf	ConvertToString@str^(0+128)
  3857     0B48  120A  158A  2726  120A  158A  	fcall	_ConvertToString
  3858     0B4D                     l3409:
  3859                           
  3860                           ;main.c: 375:         Fill(PIC_ID);
  3861     0B4D  30C7               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  3862     0B4E  120A  158A  220F  120A  158A  	fcall	_Fill
  3863     0B53                     l3411:
  3864                           
  3865                           ;main.c: 376:         initialize = 0;
  3866     0B53  1683               	bsf	3,5	;RP0=1, select bank3
  3867     0B54  1703               	bsf	3,6	;RP1=1, select bank3
  3868     0B55  01D0               	clrf	_initialize^(0+384)
  3869     0B56                     l3413:
  3870                           
  3871                           ;main.c: 377:         pr_start = 1;
  3872     0B56  0198               	clrf	_pr_start^(0+384)
  3873     0B57  0A98               	incf	_pr_start^(0+384),f
  3874     0B58                     l181:
  3875     0B58  0008               	return
  3876     0B59                     __end_of_init_PIC:
  3877                           
  3878                           	psect	text5
  3879     083B                     __ptext5:	
  3880 ;; *************** function _lcdPrint *****************
  3881 ;; Defined at:
  3882 ;;		line 429 in file "main.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;  str             2    2[BANK1 ] PTR unsigned char 
  3885 ;;		 -> STR_24(15), STR_23(16), datoTastierino(17), STR_22(17), 
  3886 ;;		 -> STR_20(16), STR_19(13), STR_18(15), STR_16(12), 
  3887 ;;		 -> STR_15(13), STR_14(18), STR_12(16), STR_11(10), 
  3888 ;;		 -> main@num_rand_s_231(16), PIC_ID(4), STR_10(17), STR_9(18), 
  3889 ;;		 -> STR_8(10), main@num_rand_s(16), STR_7(12), STR_6(10), 
  3890 ;;		 -> STR_5(8), STR_4(10), STR_3(8), STR_2(17), 
  3891 ;;		 -> STR_1(11), 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  n               2    7[BANK1 ] int 
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3903 ;;      Params:         0       0       2       0       0
  3904 ;;      Locals:         0       0       2       0       0
  3905 ;;      Temps:          0       0       3       0       0
  3906 ;;      Totals:         0       0       7       0       0
  3907 ;;Total ram usage:        7 bytes
  3908 ;; Hardware stack levels used: 1
  3909 ;; Hardware stack levels required when called: 5
  3910 ;; This function calls:
  3911 ;;		_lcdSend
  3912 ;; This function is called by:
  3913 ;;		_main
  3914 ;;		_init_PIC
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918     083B                     _lcdPrint:	
  3919                           ;psect for function _lcdPrint
  3920                           
  3921     083B                     l3159:	
  3922                           ;incstack = 0
  3923                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3924                           
  3925                           
  3926                           ;main.c: 429: void lcdPrint(char *str);main.c: 430: {;main.c: 431:     int n = 0;
  3927     083B  1683               	bsf	3,5	;RP0=1, select bank1
  3928     083C  1303               	bcf	3,6	;RP1=0, select bank1
  3929     083D  01A7               	clrf	lcdPrint@n^(0+128)
  3930     083E  01A8               	clrf	(lcdPrint@n+1)^(0+128)
  3931                           
  3932                           ;main.c: 433:     while(str[n] != '\0')
  3933     083F  286E               	goto	l3165
  3934     0840                     l3161:
  3935                           
  3936                           ;main.c: 434:     {;main.c: 436:         lcdSend(str[n++], 1);
  3937     0840  01BC               	clrf	lcdSend@tipo
  3938     0841  0ABC               	incf	lcdSend@tipo,f
  3939     0842  1683               	bsf	3,5	;RP0=1, select bank1
  3940     0843  1303               	bcf	3,6	;RP1=0, select bank1
  3941     0844  0827               	movf	lcdPrint@n^(0+128),w
  3942     0845  0722               	addwf	lcdPrint@str^(0+128),w
  3943     0846  00A5               	movwf	(??_lcdPrint+1)^(0+128)
  3944     0847  0823               	movf	(lcdPrint@str+1)^(0+128),w
  3945     0848  00A4               	movwf	??_lcdPrint^(0+128)
  3946     0849  1803               	skipnc
  3947     084A  0AA4               	incf	??_lcdPrint^(0+128),f
  3948     084B  1FA7               	btfss	lcdPrint@n^(0+128),7
  3949     084C  284E               	goto	u3230
  3950     084D  03A4               	decf	??_lcdPrint^(0+128),f
  3951     084E                     u3230:
  3952     084E  1683               	bsf	3,5	;RP0=1, select bank1
  3953     084F  1303               	bcf	3,6	;RP1=0, select bank1
  3954     0850  0824               	movf	??_lcdPrint^(0+128),w
  3955     0851  00A6               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3956     0852  0826               	movf	(??_lcdPrint+2)^(0+128),w
  3957     0853  1283               	bcf	3,5	;RP0=0, select bank0
  3958     0854  1303               	bcf	3,6	;RP1=0, select bank0
  3959     0855  00FF               	movwf	btemp+1
  3960     0856  1683               	bsf	3,5	;RP0=1, select bank1
  3961     0857  1303               	bcf	3,6	;RP1=0, select bank1
  3962     0858  0825               	movf	(??_lcdPrint+1)^(0+128),w
  3963     0859  0084               	movwf	4
  3964     085A  1283               	bcf	3,5	;RP0=0, select bank0
  3965     085B  1303               	bcf	3,6	;RP1=0, select bank0
  3966     085C  120A  118A  2700  120A  158A  	fcall	stringtab
  3967     0861  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  3968     0866                     l3163:
  3969     0866  3001               	movlw	1
  3970     0867  1683               	bsf	3,5	;RP0=1, select bank1
  3971     0868  1303               	bcf	3,6	;RP1=0, select bank1
  3972     0869  07A7               	addwf	lcdPrint@n^(0+128),f
  3973     086A  1803               	skipnc
  3974     086B  0AA8               	incf	(lcdPrint@n+1)^(0+128),f
  3975     086C  3000               	movlw	0
  3976     086D  07A8               	addwf	(lcdPrint@n+1)^(0+128),f
  3977     086E                     l3165:
  3978                           
  3979                           ;main.c: 433:     while(str[n] != '\0')
  3980     086E  0827               	movf	lcdPrint@n^(0+128),w
  3981     086F  0722               	addwf	lcdPrint@str^(0+128),w
  3982     0870  00A5               	movwf	(??_lcdPrint+1)^(0+128)
  3983     0871  0823               	movf	(lcdPrint@str+1)^(0+128),w
  3984     0872  00A4               	movwf	??_lcdPrint^(0+128)
  3985     0873  1803               	skipnc
  3986     0874  0AA4               	incf	??_lcdPrint^(0+128),f
  3987     0875  1FA7               	btfss	lcdPrint@n^(0+128),7
  3988     0876  2878               	goto	u3240
  3989     0877  03A4               	decf	??_lcdPrint^(0+128),f
  3990     0878                     u3240:
  3991     0878  1683               	bsf	3,5	;RP0=1, select bank1
  3992     0879  1303               	bcf	3,6	;RP1=0, select bank1
  3993     087A  0824               	movf	??_lcdPrint^(0+128),w
  3994     087B  00A6               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3995     087C  0826               	movf	(??_lcdPrint+2)^(0+128),w
  3996     087D  1283               	bcf	3,5	;RP0=0, select bank0
  3997     087E  1303               	bcf	3,6	;RP1=0, select bank0
  3998     087F  00FF               	movwf	btemp+1
  3999     0880  1683               	bsf	3,5	;RP0=1, select bank1
  4000     0881  1303               	bcf	3,6	;RP1=0, select bank1
  4001     0882  0825               	movf	(??_lcdPrint+1)^(0+128),w
  4002     0883  0084               	movwf	4
  4003     0884  1283               	bcf	3,5	;RP0=0, select bank0
  4004     0885  1303               	bcf	3,6	;RP1=0, select bank0
  4005     0886  120A  118A  2700  120A  158A  	fcall	stringtab
  4006     088B  3A00               	xorlw	0
  4007     088C  1D03               	skipz
  4008     088D  288F               	goto	u3251
  4009     088E  2890               	goto	u3250
  4010     088F                     u3251:
  4011     088F  2840               	goto	l3161
  4012     0890                     u3250:
  4013     0890                     l196:
  4014     0890  0008               	return
  4015     0891                     __end_of_lcdPrint:
  4016                           
  4017                           	psect	text6
  4018     155C                     __ptext6:	
  4019 ;; *************** function _init_Timer0 *****************
  4020 ;; Defined at:
  4021 ;;		line 381 in file "main.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4035 ;;      Params:         0       0       0       0       0
  4036 ;;      Locals:         0       0       0       0       0
  4037 ;;      Temps:          0       1       0       0       0
  4038 ;;      Totals:         0       1       0       0       0
  4039 ;;Total ram usage:        1 bytes
  4040 ;; Hardware stack levels used: 1
  4041 ;; Hardware stack levels required when called: 4
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_init_PIC
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049     155C                     _init_Timer0:	
  4050                           ;psect for function _init_Timer0
  4051                           
  4052     155C                     l3261:	
  4053                           ;incstack = 0
  4054                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  4055                           
  4056                           
  4057                           ;main.c: 384:     INTCON |= 0xA0;
  4058     155C  30A0               	movlw	160
  4059     155D  1283               	bcf	3,5	;RP0=0, select bank0
  4060     155E  1303               	bcf	3,6	;RP1=0, select bank0
  4061     155F  00BC               	movwf	??_init_Timer0
  4062     1560  083C               	movf	??_init_Timer0,w
  4063     1561  048B               	iorwf	11,f	;volatile
  4064     1562                     l3263:
  4065                           
  4066                           ;main.c: 385:     OPTION_REG = 0x06;
  4067     1562  3006               	movlw	6
  4068     1563  1683               	bsf	3,5	;RP0=1, select bank1
  4069     1564  1303               	bcf	3,6	;RP1=0, select bank1
  4070     1565  0081               	movwf	1	;volatile
  4071     1566                     l3265:
  4072                           
  4073                           ;main.c: 386:     TMR0 = 131;
  4074     1566  3083               	movlw	131
  4075     1567  1283               	bcf	3,5	;RP0=0, select bank0
  4076     1568  1303               	bcf	3,6	;RP1=0, select bank0
  4077     1569  0081               	movwf	1	;volatile
  4078     156A                     l3267:
  4079                           
  4080                           ;main.c: 388:     milliseconds = 0;
  4081     156A  3000               	movlw	0
  4082     156B  1683               	bsf	3,5	;RP0=1, select bank1
  4083     156C  1303               	bcf	3,6	;RP1=0, select bank1
  4084     156D  00EB               	movwf	(_milliseconds+3)^(0+128)
  4085     156E  3000               	movlw	0
  4086     156F  00EA               	movwf	(_milliseconds+2)^(0+128)
  4087     1570  3000               	movlw	0
  4088     1571  00E9               	movwf	(_milliseconds+1)^(0+128)
  4089     1572  3000               	movlw	0
  4090     1573  00E8               	movwf	_milliseconds^(0+128)
  4091     1574                     l184:
  4092     1574  0008               	return
  4093     1575                     __end_of_init_Timer0:
  4094                           
  4095                           	psect	text7
  4096     154B                     __ptext7:	
  4097 ;; *************** function _init_NumPad *****************
  4098 ;; Defined at:
  4099 ;;		line 645 in file "main.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;		None
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;		None
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4113 ;;      Params:         0       0       0       0       0
  4114 ;;      Locals:         0       0       0       0       0
  4115 ;;      Temps:          0       1       0       0       0
  4116 ;;      Totals:         0       1       0       0       0
  4117 ;;Total ram usage:        1 bytes
  4118 ;; Hardware stack levels used: 1
  4119 ;; Hardware stack levels required when called: 4
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_init_PIC
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127     154B                     _init_NumPad:	
  4128                           ;psect for function _init_NumPad
  4129                           
  4130     154B                     l3259:	
  4131                           ;incstack = 0
  4132                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  4133                           
  4134                           
  4135                           ;main.c: 648:     TRISD |= 0x0F;
  4136     154B  300F               	movlw	15
  4137     154C  1283               	bcf	3,5	;RP0=0, select bank0
  4138     154D  1303               	bcf	3,6	;RP1=0, select bank0
  4139     154E  00BC               	movwf	??_init_NumPad
  4140     154F  083C               	movf	??_init_NumPad,w
  4141     1550  1683               	bsf	3,5	;RP0=1, select bank1
  4142     1551  1303               	bcf	3,6	;RP1=0, select bank1
  4143     1552  0488               	iorwf	8,f	;volatile
  4144                           
  4145                           ;main.c: 649:     TRISB &= 0xF0;
  4146     1553  30F0               	movlw	240
  4147     1554  1283               	bcf	3,5	;RP0=0, select bank0
  4148     1555  1303               	bcf	3,6	;RP1=0, select bank0
  4149     1556  00BC               	movwf	??_init_NumPad
  4150     1557  083C               	movf	??_init_NumPad,w
  4151     1558  1683               	bsf	3,5	;RP0=1, select bank1
  4152     1559  1303               	bcf	3,6	;RP1=0, select bank1
  4153     155A  0586               	andwf	6,f	;volatile
  4154     155B                     l271:
  4155     155B  0008               	return
  4156     155C                     __end_of_init_NumPad:
  4157                           
  4158                           	psect	text8
  4159     09AA                     __ptext8:	
  4160 ;; *************** function _init_LCD *****************
  4161 ;; Defined at:
  4162 ;;		line 391 in file "main.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0, pclath, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4176 ;;      Params:         0       0       0       0       0
  4177 ;;      Locals:         0       0       0       0       0
  4178 ;;      Temps:          0       0       2       0       0
  4179 ;;      Totals:         0       0       2       0       0
  4180 ;;Total ram usage:        2 bytes
  4181 ;; Hardware stack levels used: 1
  4182 ;; Hardware stack levels required when called: 5
  4183 ;; This function calls:
  4184 ;;		_lcdSend
  4185 ;; This function is called by:
  4186 ;;		_init_PIC
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190     09AA                     _init_LCD:	
  4191                           ;psect for function _init_LCD
  4192                           
  4193     09AA                     l3237:	
  4194                           ;incstack = 0
  4195                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  4196                           
  4197                           
  4198                           ;main.c: 395:     PORTEbits.RE2 = 0;
  4199     09AA  1283               	bcf	3,5	;RP0=0, select bank0
  4200     09AB  1303               	bcf	3,6	;RP1=0, select bank0
  4201     09AC  1109               	bcf	9,2	;volatile
  4202                           
  4203                           ;main.c: 396:     PORTEbits.RE1 = 0;
  4204     09AD  1089               	bcf	9,1	;volatile
  4205     09AE                     l3239:
  4206                           
  4207                           ;main.c: 397:     _delay((unsigned long)((20)*(20000000/4000.0)));
  4208     09AE  3082               	movlw	130
  4209     09AF  1683               	bsf	3,5	;RP0=1, select bank1
  4210     09B0  1303               	bcf	3,6	;RP1=0, select bank1
  4211     09B1  00A3               	movwf	(??_init_LCD^(0+128)+1)
  4212     09B2  30DD               	movlw	221
  4213     09B3  00A2               	movwf	??_init_LCD^(0+128)
  4214     09B4                     u4127:
  4215     09B4  0BA2               	decfsz	??_init_LCD^(0+128),f
  4216     09B5  29B4               	goto	u4127
  4217     09B6  0BA3               	decfsz	(??_init_LCD^(0+128)+1),f
  4218     09B7  29B4               	goto	u4127
  4219     09B8                     l3241:
  4220                           
  4221                           ;main.c: 398:     PORTEbits.RE1 = 1;
  4222     09B8  1283               	bcf	3,5	;RP0=0, select bank0
  4223     09B9  1303               	bcf	3,6	;RP1=0, select bank0
  4224     09BA  1489               	bsf	9,1	;volatile
  4225     09BB                     l3243:
  4226                           
  4227                           ;main.c: 400:     lcdSend(0x38, 0);
  4228     09BB  01BC               	clrf	lcdSend@tipo
  4229     09BC  3038               	movlw	56
  4230     09BD  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  4231     09C2                     l3245:
  4232                           
  4233                           ;main.c: 401:     _delay((unsigned long)((5)*(20000000/4000.0)));
  4234     09C2  3021               	movlw	33
  4235     09C3  1683               	bsf	3,5	;RP0=1, select bank1
  4236     09C4  1303               	bcf	3,6	;RP1=0, select bank1
  4237     09C5  00A3               	movwf	(??_init_LCD^(0+128)+1)
  4238     09C6  3075               	movlw	117
  4239     09C7  00A2               	movwf	??_init_LCD^(0+128)
  4240     09C8                     u4137:
  4241     09C8  0BA2               	decfsz	??_init_LCD^(0+128),f
  4242     09C9  29C8               	goto	u4137
  4243     09CA  0BA3               	decfsz	(??_init_LCD^(0+128)+1),f
  4244     09CB  29C8               	goto	u4137
  4245     09CC  29CD               	nop2
  4246                           
  4247                           ;main.c: 402:     lcdSend(0x38, 0);
  4248     09CD  1283               	bcf	3,5	;RP0=0, select bank0
  4249     09CE  1303               	bcf	3,6	;RP1=0, select bank0
  4250     09CF  01BC               	clrf	lcdSend@tipo
  4251     09D0  3038               	movlw	56
  4252     09D1  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  4253     09D6                     l3247:
  4254                           
  4255                           ;main.c: 403:     _delay((unsigned long)((1)*(20000000/4000.0)));
  4256     09D6  3007               	movlw	7
  4257     09D7  1683               	bsf	3,5	;RP0=1, select bank1
  4258     09D8  1303               	bcf	3,6	;RP1=0, select bank1
  4259     09D9  00A3               	movwf	(??_init_LCD^(0+128)+1)
  4260     09DA  307C               	movlw	124
  4261     09DB  00A2               	movwf	??_init_LCD^(0+128)
  4262     09DC                     u4147:
  4263     09DC  0BA2               	decfsz	??_init_LCD^(0+128),f
  4264     09DD  29DC               	goto	u4147
  4265     09DE  0BA3               	decfsz	(??_init_LCD^(0+128)+1),f
  4266     09DF  29DC               	goto	u4147
  4267     09E0  0000               	nop
  4268     09E1                     l3249:
  4269                           
  4270                           ;main.c: 404:     lcdSend(0x38, 0);
  4271     09E1  1283               	bcf	3,5	;RP0=0, select bank0
  4272     09E2  1303               	bcf	3,6	;RP1=0, select bank0
  4273     09E3  01BC               	clrf	lcdSend@tipo
  4274     09E4  3038               	movlw	56
  4275     09E5  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  4276     09EA                     l3251:
  4277                           
  4278                           ;main.c: 405:     lcdSend(0x08, 0);
  4279     09EA  1283               	bcf	3,5	;RP0=0, select bank0
  4280     09EB  1303               	bcf	3,6	;RP1=0, select bank0
  4281     09EC  01BC               	clrf	lcdSend@tipo
  4282     09ED  3008               	movlw	8
  4283     09EE  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  4284     09F3                     l3253:
  4285                           
  4286                           ;main.c: 406:     lcdSend(0x0F, 0);
  4287     09F3  1283               	bcf	3,5	;RP0=0, select bank0
  4288     09F4  1303               	bcf	3,6	;RP1=0, select bank0
  4289     09F5  01BC               	clrf	lcdSend@tipo
  4290     09F6  300F               	movlw	15
  4291     09F7  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  4292     09FC                     l3255:
  4293                           
  4294                           ;main.c: 407:     lcdSend(0x01, 0);
  4295     09FC  1283               	bcf	3,5	;RP0=0, select bank0
  4296     09FD  1303               	bcf	3,6	;RP1=0, select bank0
  4297     09FE  01BC               	clrf	lcdSend@tipo
  4298     09FF  3001               	movlw	1
  4299     0A00  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  4300     0A05                     l3257:
  4301                           
  4302                           ;main.c: 409:     lcdSend(0x0C, 0);
  4303     0A05  1283               	bcf	3,5	;RP0=0, select bank0
  4304     0A06  1303               	bcf	3,6	;RP1=0, select bank0
  4305     0A07  01BC               	clrf	lcdSend@tipo
  4306     0A08  300C               	movlw	12
  4307     0A09  160A  118A  25C3  120A  158A  	fcall	_lcdSend
  4308     0A0E                     l187:
  4309     0A0E  0008               	return
  4310     0A0F                     __end_of_init_LCD:
  4311                           
  4312                           	psect	text9
  4313     15C3                     __ptext9:	
  4314 ;; *************** function _lcdSend *****************
  4315 ;; Defined at:
  4316 ;;		line 412 in file "main.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  dato            1    wreg     unsigned char 
  4319 ;;  tipo            1   28[BANK0 ] unsigned char 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  dato            1   29[BANK0 ] unsigned char 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4331 ;;      Params:         0       1       0       0       0
  4332 ;;      Locals:         0       1       0       0       0
  4333 ;;      Temps:          0       0       2       0       0
  4334 ;;      Totals:         0       2       2       0       0
  4335 ;;Total ram usage:        4 bytes
  4336 ;; Hardware stack levels used: 1
  4337 ;; Hardware stack levels required when called: 4
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_main
  4342 ;;		_init_PIC
  4343 ;;		_init_LCD
  4344 ;;		_lcdPrint
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348     15C3                     _lcdSend:	
  4349                           ;psect for function _lcdSend
  4350                           
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  4354                           ;lcdSend@dato stored from wreg
  4355     15C3  1283               	bcf	3,5	;RP0=0, select bank0
  4356     15C4  1303               	bcf	3,6	;RP1=0, select bank0
  4357     15C5  00BD               	movwf	lcdSend@dato
  4358     15C6                     l3029:
  4359                           
  4360                           ;main.c: 412: void lcdSend(char dato, char tipo);main.c: 413: {;main.c: 416:     TRISD =
      +                           0x00;
  4361     15C6  1683               	bsf	3,5	;RP0=1, select bank1
  4362     15C7  1303               	bcf	3,6	;RP1=0, select bank1
  4363     15C8  0188               	clrf	8	;volatile
  4364     15C9                     l3031:
  4365                           
  4366                           ;main.c: 417:     TRISEbits.TRISE1 = 0;
  4367     15C9  1089               	bcf	9,1	;volatile
  4368     15CA                     l3033:
  4369                           
  4370                           ;main.c: 418:     TRISEbits.TRISE2 = 0;
  4371     15CA  1109               	bcf	9,2	;volatile
  4372     15CB                     l3035:
  4373                           
  4374                           ;main.c: 420:     PORTEbits.RE1 = 1;
  4375     15CB  1283               	bcf	3,5	;RP0=0, select bank0
  4376     15CC  1303               	bcf	3,6	;RP1=0, select bank0
  4377     15CD  1489               	bsf	9,1	;volatile
  4378     15CE                     l3037:
  4379                           
  4380                           ;main.c: 421:     PORTD = dato;
  4381     15CE  083D               	movf	lcdSend@dato,w
  4382     15CF  0088               	movwf	8	;volatile
  4383     15D0                     l3039:
  4384                           
  4385                           ;main.c: 422:     PORTEbits.RE2 = tipo;
  4386     15D0  0C3C               	rrf	lcdSend@tipo,w
  4387     15D1  1C03               	skipc
  4388     15D2  1109               	bcf	9,2	;volatile
  4389     15D3  1803               	skipnc
  4390     15D4  1509               	bsf	9,2	;volatile
  4391     15D5                     l3041:
  4392                           
  4393                           ;main.c: 423:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4394     15D5  3014               	movlw	20
  4395     15D6  1683               	bsf	3,5	;RP0=1, select bank1
  4396     15D7  1303               	bcf	3,6	;RP1=0, select bank1
  4397     15D8  00A1               	movwf	(??_lcdSend^(0+128)+1)
  4398     15D9  3079               	movlw	121
  4399     15DA  00A0               	movwf	??_lcdSend^(0+128)
  4400     15DB                     u4157:
  4401     15DB  0BA0               	decfsz	??_lcdSend^(0+128),f
  4402     15DC  2DDB               	goto	u4157
  4403     15DD  0BA1               	decfsz	(??_lcdSend^(0+128)+1),f
  4404     15DE  2DDB               	goto	u4157
  4405     15DF                     l3043:
  4406                           
  4407                           ;main.c: 424:     PORTEbits.RE1 = 0;
  4408     15DF  1283               	bcf	3,5	;RP0=0, select bank0
  4409     15E0  1303               	bcf	3,6	;RP1=0, select bank0
  4410     15E1  1089               	bcf	9,1	;volatile
  4411     15E2                     l3045:
  4412                           
  4413                           ;main.c: 425:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4414     15E2  3014               	movlw	20
  4415     15E3  1683               	bsf	3,5	;RP0=1, select bank1
  4416     15E4  1303               	bcf	3,6	;RP1=0, select bank1
  4417     15E5  00A1               	movwf	(??_lcdSend^(0+128)+1)
  4418     15E6  3079               	movlw	121
  4419     15E7  00A0               	movwf	??_lcdSend^(0+128)
  4420     15E8                     u4167:
  4421     15E8  0BA0               	decfsz	??_lcdSend^(0+128),f
  4422     15E9  2DE8               	goto	u4167
  4423     15EA  0BA1               	decfsz	(??_lcdSend^(0+128)+1),f
  4424     15EB  2DE8               	goto	u4167
  4425     15EC                     l3047:
  4426                           
  4427                           ;main.c: 426:     PORTEbits.RE1 = 1;
  4428     15EC  1283               	bcf	3,5	;RP0=0, select bank0
  4429     15ED  1303               	bcf	3,6	;RP1=0, select bank0
  4430     15EE  1489               	bsf	9,1	;volatile
  4431     15EF                     l190:
  4432     15EF  0008               	return
  4433     15F0                     __end_of_lcdSend:
  4434                           
  4435                           	psect	text10
  4436     081C                     __ptext10:	
  4437 ;; *************** function _eeprom_read *****************
  4438 ;; Defined at:
  4439 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  addr            1    wreg     unsigned char 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  addr            1   29[BANK0 ] unsigned char 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      unsigned char 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4453 ;;      Params:         0       0       0       0       0
  4454 ;;      Locals:         0       1       0       0       0
  4455 ;;      Temps:          0       1       0       0       0
  4456 ;;      Totals:         0       2       0       0       0
  4457 ;;Total ram usage:        2 bytes
  4458 ;; Hardware stack levels used: 1
  4459 ;; Hardware stack levels required when called: 4
  4460 ;; This function calls:
  4461 ;;		Nothing
  4462 ;; This function is called by:
  4463 ;;		_init_PIC
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467     081C                     _eeprom_read:	
  4468                           ;psect for function _eeprom_read
  4469                           
  4470                           
  4471                           ;incstack = 0
  4472                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4473                           ;eeprom_read@addr stored from wreg
  4474     081C  1283               	bcf	3,5	;RP0=0, select bank0
  4475     081D  1303               	bcf	3,6	;RP1=0, select bank0
  4476     081E  00BD               	movwf	eeprom_read@addr
  4477     081F                     l427:	
  4478                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 8:  do
  4479                           
  4480     081F  0064               	clrwdt	;# 
  4481     0820  1683               	bsf	3,5	;RP0=1, select bank3
  4482     0821  1703               	bsf	3,6	;RP1=1, select bank3
  4483     0822  188C               	btfsc	12,1	;volsfr
  4484     0823  2825               	goto	u3331
  4485     0824  2828               	goto	u3330
  4486     0825                     u3331:
  4487     0825  1283               	bcf	3,5	;RP0=0, select bank0
  4488     0826  1303               	bcf	3,6	;RP1=0, select bank0
  4489     0827  281F               	goto	l427
  4490     0828                     u3330:
  4491     0828                     l3269:
  4492                           
  4493                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4494     0828  1283               	bcf	3,5	;RP0=0, select bank0
  4495     0829  1303               	bcf	3,6	;RP1=0, select bank0
  4496     082A  083D               	movf	eeprom_read@addr,w
  4497     082B  1283               	bcf	3,5	;RP0=0, select bank2
  4498     082C  1703               	bsf	3,6	;RP1=1, select bank2
  4499     082D  008D               	movwf	13	;volatile
  4500     082E  303F               	movlw	63
  4501     082F  1283               	bcf	3,5	;RP0=0, select bank0
  4502     0830  1303               	bcf	3,6	;RP1=0, select bank0
  4503     0831  00BC               	movwf	??_eeprom_read
  4504     0832  083C               	movf	??_eeprom_read,w
  4505     0833  1683               	bsf	3,5	;RP0=1, select bank3
  4506     0834  1703               	bsf	3,6	;RP1=1, select bank3
  4507     0835  058C               	andwf	12,f	;volsfr
  4508     0836  140C               	bsf	12,0	;volsfr
  4509     0837  1283               	bcf	3,5	;RP0=0, select bank2
  4510     0838  1703               	bsf	3,6	;RP1=1, select bank2
  4511     0839  080C               	movf	12,w	;volatile
  4512     083A                     l429:
  4513     083A  0008               	return
  4514     083B                     __end_of_eeprom_read:
  4515                           
  4516                           	psect	text11
  4517     1699                     __ptext11:	
  4518 ;; *************** function _UART_init *****************
  4519 ;; Defined at:
  4520 ;;		line 788 in file "main.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  baudrate        4   55[BANK1 ] long 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;		None
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      void 
  4527 ;; Registers used:
  4528 ;;		wreg, status,2, status,0, pclath, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4534 ;;      Params:         0       0       4       0       0
  4535 ;;      Locals:         0       0       0       0       0
  4536 ;;      Temps:          0       0       4       0       0
  4537 ;;      Totals:         0       0       8       0       0
  4538 ;;Total ram usage:        8 bytes
  4539 ;; Hardware stack levels used: 1
  4540 ;; Hardware stack levels required when called: 5
  4541 ;; This function calls:
  4542 ;;		___aldiv
  4543 ;; This function is called by:
  4544 ;;		_init_PIC
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548     1699                     _UART_init:	
  4549                           ;psect for function _UART_init
  4550                           
  4551     1699                     l3221:	
  4552                           ;incstack = 0
  4553                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  4554                           
  4555                           
  4556                           ;main.c: 788: void UART_init(long int baudrate);main.c: 789: {;main.c: 791:     TRISC &=
      +                           ~0x40;
  4557     1699  30BF               	movlw	191
  4558     169A  1683               	bsf	3,5	;RP0=1, select bank1
  4559     169B  1303               	bcf	3,6	;RP1=0, select bank1
  4560     169C  00DB               	movwf	??_UART_init^(0+128)
  4561     169D  085B               	movf	??_UART_init^(0+128),w
  4562     169E  0587               	andwf	7,f	;volatile
  4563     169F                     l3223:
  4564                           
  4565                           ;main.c: 792:     TRISC |= 0x80;
  4566     169F  1787               	bsf	7,7	;volatile
  4567                           
  4568                           ;main.c: 793:     TXSTA |= 0x24;
  4569     16A0  3024               	movlw	36
  4570     16A1  00DB               	movwf	??_UART_init^(0+128)
  4571     16A2  085B               	movf	??_UART_init^(0+128),w
  4572     16A3  0498               	iorwf	24,f	;volatile
  4573     16A4                     l3225:
  4574                           
  4575                           ;main.c: 794:     RCSTA |= 0x80;
  4576     16A4  1283               	bcf	3,5	;RP0=0, select bank0
  4577     16A5  1303               	bcf	3,6	;RP1=0, select bank0
  4578     16A6  1798               	bsf	24,7	;volatile
  4579     16A7                     l3227:
  4580                           
  4581                           ;main.c: 795:     RCSTA |= 0x10;
  4582     16A7  1618               	bsf	24,4	;volatile
  4583     16A8                     l3229:
  4584                           
  4585                           ;main.c: 798:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  4586     16A8  1683               	bsf	3,5	;RP0=1, select bank1
  4587     16A9  1303               	bcf	3,6	;RP1=0, select bank1
  4588     16AA  0857               	movf	UART_init@baudrate^(0+128),w
  4589     16AB  00DB               	movwf	??_UART_init^(0+128)
  4590     16AC  0858               	movf	(UART_init@baudrate+1)^(0+128),w
  4591     16AD  00DC               	movwf	(??_UART_init^(0+128)+1)
  4592     16AE  0859               	movf	(UART_init@baudrate+2)^(0+128),w
  4593     16AF  00DD               	movwf	(??_UART_init^(0+128)+2)
  4594     16B0  085A               	movf	(UART_init@baudrate+3)^(0+128),w
  4595     16B1  00DE               	movwf	(??_UART_init^(0+128)+3)
  4596     16B2  3006               	movlw	6
  4597     16B3                     u3325:
  4598     16B3  1003               	clrc
  4599     16B4  0DDB               	rlf	??_UART_init^(0+128),f
  4600     16B5  0DDC               	rlf	(??_UART_init^(0+128)+1),f
  4601     16B6  0DDD               	rlf	(??_UART_init^(0+128)+2),f
  4602     16B7  0DDE               	rlf	(??_UART_init^(0+128)+3),f
  4603     16B8                     u3320:
  4604     16B8  3EFF               	addlw	-1
  4605     16B9  1D03               	skipz
  4606     16BA  2EB3               	goto	u3325
  4607     16BB  085E               	movf	(??_UART_init+3)^(0+128),w
  4608     16BC  00CB               	movwf	(___aldiv@divisor+3)^(0+128)
  4609     16BD  085D               	movf	(??_UART_init+2)^(0+128),w
  4610     16BE  00CA               	movwf	(___aldiv@divisor+2)^(0+128)
  4611     16BF  085C               	movf	(??_UART_init+1)^(0+128),w
  4612     16C0  00C9               	movwf	(___aldiv@divisor+1)^(0+128)
  4613     16C1  085B               	movf	??_UART_init^(0+128),w
  4614     16C2  00C8               	movwf	___aldiv@divisor^(0+128)
  4615     16C3  3001               	movlw	1
  4616     16C4  00CF               	movwf	(___aldiv@dividend+3)^(0+128)
  4617     16C5  3031               	movlw	49
  4618     16C6  00CE               	movwf	(___aldiv@dividend+2)^(0+128)
  4619     16C7  302D               	movlw	45
  4620     16C8  00CD               	movwf	(___aldiv@dividend+1)^(0+128)
  4621     16C9  3000               	movlw	0
  4622     16CA  00CC               	movwf	___aldiv@dividend^(0+128)
  4623     16CB  120A  158A  25DC  160A  118A  	fcall	___aldiv
  4624     16D0  1683               	bsf	3,5	;RP0=1, select bank1
  4625     16D1  1303               	bcf	3,6	;RP1=0, select bank1
  4626     16D2  0848               	movf	?___aldiv^(0+128),w
  4627     16D3  3EFF               	addlw	255
  4628     16D4  0099               	movwf	25	;volatile
  4629     16D5                     l3231:
  4630                           
  4631                           ;main.c: 801:     INTCON |= 0x80;
  4632     16D5  178B               	bsf	11,7	;volatile
  4633     16D6                     l3233:
  4634                           
  4635                           ;main.c: 803:     INTCON |= 0x40;
  4636     16D6  170B               	bsf	11,6	;volatile
  4637     16D7                     l3235:
  4638                           
  4639                           ;main.c: 805:     PIE1 |= 0x20;
  4640     16D7  168C               	bsf	12,5	;volatile
  4641     16D8                     l309:
  4642     16D8  0008               	return
  4643     16D9                     __end_of_UART_init:
  4644                           
  4645                           	psect	text12
  4646     0A0F                     __ptext12:	
  4647 ;; *************** function _Fill *****************
  4648 ;; Defined at:
  4649 ;;		line 618 in file "main.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  id              1    wreg     PTR unsigned char 
  4652 ;;		 -> PIC_ID(4), 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  id              1    8[BANK1 ] PTR unsigned char 
  4655 ;;		 -> PIC_ID(4), 
  4656 ;;  length          2    6[BANK1 ] int 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4666 ;;      Params:         0       0       0       0       0
  4667 ;;      Locals:         0       0       3       0       0
  4668 ;;      Temps:          0       0       1       0       0
  4669 ;;      Totals:         0       0       4       0       0
  4670 ;;Total ram usage:        4 bytes
  4671 ;; Hardware stack levels used: 1
  4672 ;; Hardware stack levels required when called: 5
  4673 ;; This function calls:
  4674 ;;		_Length
  4675 ;; This function is called by:
  4676 ;;		_init_PIC
  4677 ;;		_read_NumPad
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681     0A0F                     _Fill:	
  4682                           ;psect for function _Fill
  4683                           
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _Fill: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4687                           ;Fill@id stored from wreg
  4688     0A0F  1683               	bsf	3,5	;RP0=1, select bank1
  4689     0A10  1303               	bcf	3,6	;RP1=0, select bank1
  4690     0A11  00A8               	movwf	Fill@id^(0+128)
  4691     0A12                     l3273:
  4692                           
  4693                           ;main.c: 618: void Fill(char* id);main.c: 619: {;main.c: 620:     int length = Length(id
      +                          );
  4694     0A12  0828               	movf	Fill@id^(0+128),w
  4695     0A13  1283               	bcf	3,5	;RP0=0, select bank0
  4696     0A14  1303               	bcf	3,6	;RP1=0, select bank0
  4697     0A15  00BC               	movwf	Length@str
  4698     0A16  3001               	movlw	1
  4699     0A17  00BD               	movwf	Length@str+1
  4700     0A18  160A  118A  25F0  120A  158A  	fcall	_Length
  4701     0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  4702     0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  4703     0A1F  083D               	movf	?_Length+1,w
  4704     0A20  1683               	bsf	3,5	;RP0=1, select bank1
  4705     0A21  1303               	bcf	3,6	;RP1=0, select bank1
  4706     0A22  00A7               	movwf	(Fill@length+1)^(0+128)
  4707     0A23  1283               	bcf	3,5	;RP0=0, select bank0
  4708     0A24  1303               	bcf	3,6	;RP1=0, select bank0
  4709     0A25  083C               	movf	?_Length,w
  4710     0A26  1683               	bsf	3,5	;RP0=1, select bank1
  4711     0A27  1303               	bcf	3,6	;RP1=0, select bank1
  4712     0A28  00A6               	movwf	Fill@length^(0+128)
  4713     0A29                     l3275:
  4714                           
  4715                           ;main.c: 622:     if(length < 3)
  4716     0A29  0827               	movf	(Fill@length+1)^(0+128),w
  4717     0A2A  3A80               	xorlw	128
  4718     0A2B  00FF               	movwf	btemp+1
  4719     0A2C  3080               	movlw	128
  4720     0A2D  027F               	subwf	btemp+1,w
  4721     0A2E  1D03               	skipz
  4722     0A2F  2A32               	goto	u3345
  4723     0A30  3003               	movlw	3
  4724     0A31  0226               	subwf	Fill@length^(0+128),w
  4725     0A32                     u3345:
  4726     0A32  1803               	skipnc
  4727     0A33  2A35               	goto	u3341
  4728     0A34  2A36               	goto	u3340
  4729     0A35                     u3341:
  4730     0A35  2A74               	goto	l268
  4731     0A36                     u3340:
  4732     0A36  2A65               	goto	l3293
  4733     0A37                     l3279:
  4734                           
  4735                           ;main.c: 627:                 id[3] = '\0';
  4736     0A37  0828               	movf	Fill@id^(0+128),w
  4737     0A38  3E03               	addlw	3
  4738     0A39  0084               	movwf	4
  4739     0A3A  1783               	bsf	3,7	;select IRP bank2
  4740     0A3B  0180               	clrf	0
  4741                           
  4742                           ;main.c: 628:                 id[2] = id[0];
  4743     0A3C  0828               	movf	Fill@id^(0+128),w
  4744     0A3D  0084               	movwf	4
  4745     0A3E  0800               	movf	0,w
  4746     0A3F  00A5               	movwf	??_Fill^(0+128)
  4747     0A40  0828               	movf	Fill@id^(0+128),w
  4748     0A41  3E02               	addlw	2
  4749     0A42  0084               	movwf	4
  4750     0A43  0825               	movf	??_Fill^(0+128),w
  4751     0A44  0080               	movwf	0
  4752     0A45                     l3281:
  4753                           
  4754                           ;main.c: 629:                 id[1] = '0';
  4755     0A45  0A28               	incf	Fill@id^(0+128),w
  4756     0A46  0084               	movwf	4
  4757     0A47  3030               	movlw	48
  4758     0A48  0080               	movwf	0
  4759     0A49                     l3283:
  4760                           
  4761                           ;main.c: 630:                 id[0] = '0';
  4762     0A49  0828               	movf	Fill@id^(0+128),w
  4763     0A4A  0084               	movwf	4
  4764     0A4B  3030               	movlw	48
  4765     0A4C  0080               	movwf	0
  4766                           
  4767                           ;main.c: 631:                 break;
  4768     0A4D  2A74               	goto	l268
  4769     0A4E                     l3285:
  4770                           
  4771                           ;main.c: 633:                 id[3] = '\0';
  4772     0A4E  0828               	movf	Fill@id^(0+128),w
  4773     0A4F  3E03               	addlw	3
  4774     0A50  0084               	movwf	4
  4775     0A51  1783               	bsf	3,7	;select IRP bank2
  4776     0A52  0180               	clrf	0
  4777                           
  4778                           ;main.c: 634:                 id[2] = id[1];
  4779     0A53  0A28               	incf	Fill@id^(0+128),w
  4780     0A54  0084               	movwf	4
  4781     0A55  0800               	movf	0,w
  4782     0A56  00A5               	movwf	??_Fill^(0+128)
  4783     0A57  0828               	movf	Fill@id^(0+128),w
  4784     0A58  3E02               	addlw	2
  4785     0A59  0084               	movwf	4
  4786     0A5A  0825               	movf	??_Fill^(0+128),w
  4787     0A5B  0080               	movwf	0
  4788     0A5C                     l3287:
  4789                           
  4790                           ;main.c: 635:                 id[1] = id[0];
  4791     0A5C  0828               	movf	Fill@id^(0+128),w
  4792     0A5D  0084               	movwf	4
  4793     0A5E  0800               	movf	0,w
  4794     0A5F  00A5               	movwf	??_Fill^(0+128)
  4795     0A60  0A28               	incf	Fill@id^(0+128),w
  4796     0A61  0084               	movwf	4
  4797     0A62  0825               	movf	??_Fill^(0+128),w
  4798     0A63  0080               	movwf	0
  4799     0A64  2A49               	goto	l3283
  4800     0A65                     l3293:
  4801                           
  4802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4803                           ; Switch size 1, requested type "simple"
  4804                           ; Number of cases is 1, Range of values is 0 to 0
  4805                           ; switch strategies available:
  4806                           ; Name         Instructions Cycles
  4807                           ; simple_byte            4     3 (average)
  4808                           ; direct_byte           11     8 (fixed)
  4809                           ; jumptable            260     6 (fixed)
  4810                           ;	Chosen strategy is simple_byte
  4811     0A65  1683               	bsf	3,5	;RP0=1, select bank1
  4812     0A66  1303               	bcf	3,6	;RP1=0, select bank1
  4813     0A67  0827               	movf	(Fill@length+1)^(0+128),w
  4814     0A68  3A00               	xorlw	0	; case 0
  4815     0A69  1903               	skipnz
  4816     0A6A  2A6C               	goto	l3905
  4817     0A6B  2A74               	goto	l268
  4818     0A6C                     l3905:
  4819                           
  4820                           ; Switch size 1, requested type "simple"
  4821                           ; Number of cases is 2, Range of values is 1 to 2
  4822                           ; switch strategies available:
  4823                           ; Name         Instructions Cycles
  4824                           ; simple_byte            7     4 (average)
  4825                           ; direct_byte           17    11 (fixed)
  4826                           ; jumptable            263     9 (fixed)
  4827                           ;	Chosen strategy is simple_byte
  4828     0A6C  0826               	movf	Fill@length^(0+128),w
  4829     0A6D  3A01               	xorlw	1	; case 1
  4830     0A6E  1903               	skipnz
  4831     0A6F  2A37               	goto	l3279
  4832     0A70  3A03               	xorlw	3	; case 2
  4833     0A71  1903               	skipnz
  4834     0A72  2A4E               	goto	l3285
  4835     0A73  2A74               	goto	l268
  4836     0A74                     l268:
  4837     0A74  0008               	return
  4838     0A75                     __end_of_Fill:
  4839                           
  4840                           	psect	text13
  4841     0F26                     __ptext13:	
  4842 ;; *************** function _ConvertToString *****************
  4843 ;; Defined at:
  4844 ;;		line 451 in file "main.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  n               4   55[BANK1 ] long 
  4847 ;;  str             1   59[BANK1 ] PTR unsigned char 
  4848 ;;		 -> main@num_rand_s_231(16), PIC_ID(4), main@num_rand_s(16), 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  temp            2   61[BANK1 ] int 
  4851 ;;  i               2   65[BANK1 ] int 
  4852 ;;  j               2   63[BANK1 ] int 
  4853 ;;  n_cifre         1   67[BANK1 ] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  1    wreg      void 
  4856 ;; Registers used:
  4857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4863 ;;      Params:         0       0       5       0       0
  4864 ;;      Locals:         0       0       7       0       0
  4865 ;;      Temps:          0       0       1       0       0
  4866 ;;      Totals:         0       0      13       0       0
  4867 ;;Total ram usage:       13 bytes
  4868 ;; Hardware stack levels used: 1
  4869 ;; Hardware stack levels required when called: 6
  4870 ;; This function calls:
  4871 ;;		___aldiv
  4872 ;;		___almod
  4873 ;;		___lmul
  4874 ;;		_pow
  4875 ;; This function is called by:
  4876 ;;		_main
  4877 ;;		_init_PIC
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881     0F26                     _ConvertToString:	
  4882                           ;psect for function _ConvertToString
  4883                           
  4884     0F26                     l3167:	
  4885                           ;incstack = 0
  4886                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4887                           
  4888                           
  4889                           ;main.c: 451: void ConvertToString(long n, char* str);main.c: 452: {;main.c: 455:     in
      +                          t i = 0, j = 0;
  4890     0F26  1683               	bsf	3,5	;RP0=1, select bank1
  4891     0F27  1303               	bcf	3,6	;RP1=0, select bank1
  4892     0F28  01E1               	clrf	ConvertToString@i^(0+128)
  4893     0F29  01E2               	clrf	(ConvertToString@i+1)^(0+128)
  4894     0F2A  01DF               	clrf	ConvertToString@j^(0+128)
  4895     0F2B  01E0               	clrf	(ConvertToString@j+1)^(0+128)
  4896     0F2C                     l3169:
  4897                           
  4898                           ;main.c: 456:     if(n < 0)
  4899     0F2C  1FDA               	btfss	(ConvertToString@n+3)^(0+128),7
  4900     0F2D  2F2F               	goto	u3261
  4901     0F2E  2F30               	goto	u3260
  4902     0F2F                     u3261:
  4903     0F2F  2F58               	goto	l3177
  4904     0F30                     u3260:
  4905     0F30                     l3171:
  4906                           
  4907                           ;main.c: 457:     {;main.c: 458:         i = 1;
  4908     0F30  3001               	movlw	1
  4909     0F31  00E1               	movwf	ConvertToString@i^(0+128)
  4910     0F32  3000               	movlw	0
  4911     0F33  00E2               	movwf	(ConvertToString@i^(0+128)+1)
  4912     0F34                     l3173:
  4913                           
  4914                           ;main.c: 459:         str[0] = '-';
  4915     0F34  085B               	movf	ConvertToString@str^(0+128),w
  4916     0F35  0084               	movwf	4
  4917     0F36  302D               	movlw	45
  4918     0F37  1783               	bsf	3,7	;select IRP bank2
  4919     0F38  0080               	movwf	0
  4920     0F39                     l3175:
  4921                           
  4922                           ;main.c: 460:         n *= -1;
  4923     0F39  30FF               	movlw	255
  4924     0F3A  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  4925     0F3B  30FF               	movlw	255
  4926     0F3C  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  4927     0F3D  30FF               	movlw	255
  4928     0F3E  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  4929     0F3F  30FF               	movlw	255
  4930     0F40  00A0               	movwf	___lmul@multiplier^(0+128)
  4931     0F41  085A               	movf	(ConvertToString@n+3)^(0+128),w
  4932     0F42  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4933     0F43  0859               	movf	(ConvertToString@n+2)^(0+128),w
  4934     0F44  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4935     0F45  0858               	movf	(ConvertToString@n+1)^(0+128),w
  4936     0F46  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4937     0F47  0857               	movf	ConvertToString@n^(0+128),w
  4938     0F48  00A4               	movwf	___lmul@multiplicand^(0+128)
  4939     0F49  160A  118A  27B0  120A  158A  	fcall	___lmul
  4940     0F4E  1683               	bsf	3,5	;RP0=1, select bank1
  4941     0F4F  1303               	bcf	3,6	;RP1=0, select bank1
  4942     0F50  0823               	movf	(?___lmul+3)^(0+128),w
  4943     0F51  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  4944     0F52  0822               	movf	(?___lmul+2)^(0+128),w
  4945     0F53  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  4946     0F54  0821               	movf	(?___lmul+1)^(0+128),w
  4947     0F55  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  4948     0F56  0820               	movf	?___lmul^(0+128),w
  4949     0F57  00D7               	movwf	ConvertToString@n^(0+128)
  4950     0F58                     l3177:
  4951                           
  4952                           ;main.c: 463:     char n_cifre = 1;
  4953     0F58  01E3               	clrf	ConvertToString@n_cifre^(0+128)
  4954     0F59  0AE3               	incf	ConvertToString@n_cifre^(0+128),f
  4955                           
  4956                           ;main.c: 465:     while(n / pow(10, n_cifre))
  4957     0F5A  2F5F               	goto	l3181
  4958     0F5B                     l3179:
  4959                           
  4960                           ;main.c: 466:         n_cifre++;
  4961     0F5B  3001               	movlw	1
  4962     0F5C  00DC               	movwf	??_ConvertToString^(0+128)
  4963     0F5D  085C               	movf	??_ConvertToString^(0+128),w
  4964     0F5E  07E3               	addwf	ConvertToString@n_cifre^(0+128),f
  4965     0F5F                     l3181:
  4966                           
  4967                           ;main.c: 465:     while(n / pow(10, n_cifre))
  4968     0F5F  0863               	movf	ConvertToString@n_cifre^(0+128),w
  4969     0F60  00BF               	movwf	pow@exp^(0+128)
  4970     0F61  300A               	movlw	10
  4971     0F62  160A  118A  265D  120A  158A  	fcall	_pow
  4972     0F67  1683               	bsf	3,5	;RP0=1, select bank1
  4973     0F68  1303               	bcf	3,6	;RP1=0, select bank1
  4974     0F69  083F               	movf	?_pow^(0+128),w
  4975     0F6A  00C8               	movwf	___aldiv@divisor^(0+128)
  4976     0F6B  0840               	movf	(?_pow+1)^(0+128),w
  4977     0F6C  00C9               	movwf	(___aldiv@divisor+1)^(0+128)
  4978     0F6D  3000               	movlw	0
  4979     0F6E  1BC9               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4980     0F6F  30FF               	movlw	255
  4981     0F70  00CA               	movwf	(___aldiv@divisor+2)^(0+128)
  4982     0F71  00CB               	movwf	(___aldiv@divisor+3)^(0+128)
  4983     0F72  085A               	movf	(ConvertToString@n+3)^(0+128),w
  4984     0F73  00CF               	movwf	(___aldiv@dividend+3)^(0+128)
  4985     0F74  0859               	movf	(ConvertToString@n+2)^(0+128),w
  4986     0F75  00CE               	movwf	(___aldiv@dividend+2)^(0+128)
  4987     0F76  0858               	movf	(ConvertToString@n+1)^(0+128),w
  4988     0F77  00CD               	movwf	(___aldiv@dividend+1)^(0+128)
  4989     0F78  0857               	movf	ConvertToString@n^(0+128),w
  4990     0F79  00CC               	movwf	___aldiv@dividend^(0+128)
  4991     0F7A  120A  158A  25DC  120A  158A  	fcall	___aldiv
  4992     0F7F  1683               	bsf	3,5	;RP0=1, select bank1
  4993     0F80  1303               	bcf	3,6	;RP1=0, select bank1
  4994     0F81  084B               	movf	(?___aldiv+3)^(0+128),w
  4995     0F82  044A               	iorwf	(?___aldiv+2)^(0+128),w
  4996     0F83  0449               	iorwf	(?___aldiv+1)^(0+128),w
  4997     0F84  0448               	iorwf	?___aldiv^(0+128),w
  4998     0F85  1D03               	skipz
  4999     0F86  2F88               	goto	u3271
  5000     0F87  2F89               	goto	u3270
  5001     0F88                     u3271:
  5002     0F88  2F5B               	goto	l3179
  5003     0F89                     u3270:
  5004     0F89  2FE9               	goto	l3193
  5005     0F8A                     l3183:
  5006                           
  5007                           ;main.c: 469:     {;main.c: 470:         int temp = pow(10, (char)(n_cifre - 1 - j));
  5008     0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  5009     0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  5010     0F8C  085F               	movf	ConvertToString@j^(0+128),w
  5011     0F8D  0263               	subwf	ConvertToString@n_cifre^(0+128),w
  5012     0F8E  3EFF               	addlw	255
  5013     0F8F  00BF               	movwf	pow@exp^(0+128)
  5014     0F90  300A               	movlw	10
  5015     0F91  160A  118A  265D  120A  158A  	fcall	_pow
  5016     0F96  1683               	bsf	3,5	;RP0=1, select bank1
  5017     0F97  1303               	bcf	3,6	;RP1=0, select bank1
  5018     0F98  0840               	movf	(?_pow+1)^(0+128),w
  5019     0F99  00DE               	movwf	(ConvertToString@temp+1)^(0+128)
  5020     0F9A  083F               	movf	?_pow^(0+128),w
  5021     0F9B  00DD               	movwf	ConvertToString@temp^(0+128)
  5022     0F9C                     l3185:
  5023                           
  5024                           ;main.c: 472:         str[i] = (char)(n/temp) + '0';
  5025     0F9C  0861               	movf	ConvertToString@i^(0+128),w
  5026     0F9D  075B               	addwf	ConvertToString@str^(0+128),w
  5027     0F9E  00DC               	movwf	??_ConvertToString^(0+128)
  5028     0F9F  085C               	movf	??_ConvertToString^(0+128),w
  5029     0FA0  0084               	movwf	4
  5030     0FA1  085D               	movf	ConvertToString@temp^(0+128),w
  5031     0FA2  00C8               	movwf	___aldiv@divisor^(0+128)
  5032     0FA3  085E               	movf	(ConvertToString@temp+1)^(0+128),w
  5033     0FA4  00C9               	movwf	(___aldiv@divisor+1)^(0+128)
  5034     0FA5  3000               	movlw	0
  5035     0FA6  1BC9               	btfsc	(___aldiv@divisor+1)^(0+128),7
  5036     0FA7  30FF               	movlw	255
  5037     0FA8  00CA               	movwf	(___aldiv@divisor+2)^(0+128)
  5038     0FA9  00CB               	movwf	(___aldiv@divisor+3)^(0+128)
  5039     0FAA  085A               	movf	(ConvertToString@n+3)^(0+128),w
  5040     0FAB  00CF               	movwf	(___aldiv@dividend+3)^(0+128)
  5041     0FAC  0859               	movf	(ConvertToString@n+2)^(0+128),w
  5042     0FAD  00CE               	movwf	(___aldiv@dividend+2)^(0+128)
  5043     0FAE  0858               	movf	(ConvertToString@n+1)^(0+128),w
  5044     0FAF  00CD               	movwf	(___aldiv@dividend+1)^(0+128)
  5045     0FB0  0857               	movf	ConvertToString@n^(0+128),w
  5046     0FB1  00CC               	movwf	___aldiv@dividend^(0+128)
  5047     0FB2  120A  158A  25DC  120A  158A  	fcall	___aldiv
  5048     0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  5049     0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  5050     0FB9  0848               	movf	?___aldiv^(0+128),w
  5051     0FBA  3E30               	addlw	48
  5052     0FBB  1783               	bsf	3,7	;select IRP bank2
  5053     0FBC  0080               	movwf	0
  5054     0FBD                     l3187:
  5055                           
  5056                           ;main.c: 474:         n = n % temp;
  5057     0FBD  085D               	movf	ConvertToString@temp^(0+128),w
  5058     0FBE  00A0               	movwf	___almod@divisor^(0+128)
  5059     0FBF  085E               	movf	(ConvertToString@temp+1)^(0+128),w
  5060     0FC0  00A1               	movwf	(___almod@divisor+1)^(0+128)
  5061     0FC1  3000               	movlw	0
  5062     0FC2  1BA1               	btfsc	(___almod@divisor+1)^(0+128),7
  5063     0FC3  30FF               	movlw	255
  5064     0FC4  00A2               	movwf	(___almod@divisor+2)^(0+128)
  5065     0FC5  00A3               	movwf	(___almod@divisor+3)^(0+128)
  5066     0FC6  085A               	movf	(ConvertToString@n+3)^(0+128),w
  5067     0FC7  00A7               	movwf	(___almod@dividend+3)^(0+128)
  5068     0FC8  0859               	movf	(ConvertToString@n+2)^(0+128),w
  5069     0FC9  00A6               	movwf	(___almod@dividend+2)^(0+128)
  5070     0FCA  0858               	movf	(ConvertToString@n+1)^(0+128),w
  5071     0FCB  00A5               	movwf	(___almod@dividend+1)^(0+128)
  5072     0FCC  0857               	movf	ConvertToString@n^(0+128),w
  5073     0FCD  00A4               	movwf	___almod@dividend^(0+128)
  5074     0FCE  120A  158A  254D  120A  158A  	fcall	___almod
  5075     0FD3  1683               	bsf	3,5	;RP0=1, select bank1
  5076     0FD4  1303               	bcf	3,6	;RP1=0, select bank1
  5077     0FD5  0823               	movf	(?___almod+3)^(0+128),w
  5078     0FD6  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  5079     0FD7  0822               	movf	(?___almod+2)^(0+128),w
  5080     0FD8  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  5081     0FD9  0821               	movf	(?___almod+1)^(0+128),w
  5082     0FDA  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  5083     0FDB  0820               	movf	?___almod^(0+128),w
  5084     0FDC  00D7               	movwf	ConvertToString@n^(0+128)
  5085     0FDD                     l3189:
  5086                           
  5087                           ;main.c: 475:         i++;
  5088     0FDD  3001               	movlw	1
  5089     0FDE  07E1               	addwf	ConvertToString@i^(0+128),f
  5090     0FDF  1803               	skipnc
  5091     0FE0  0AE2               	incf	(ConvertToString@i+1)^(0+128),f
  5092     0FE1  3000               	movlw	0
  5093     0FE2  07E2               	addwf	(ConvertToString@i+1)^(0+128),f
  5094     0FE3                     l3191:
  5095                           
  5096                           ;main.c: 476:         j++;
  5097     0FE3  3001               	movlw	1
  5098     0FE4  07DF               	addwf	ConvertToString@j^(0+128),f
  5099     0FE5  1803               	skipnc
  5100     0FE6  0AE0               	incf	(ConvertToString@j+1)^(0+128),f
  5101     0FE7  3000               	movlw	0
  5102     0FE8  07E0               	addwf	(ConvertToString@j+1)^(0+128),f
  5103     0FE9                     l3193:
  5104                           
  5105                           ;main.c: 468:     while(j < n_cifre)
  5106     0FE9  0860               	movf	(ConvertToString@j+1)^(0+128),w
  5107     0FEA  3A80               	xorlw	128
  5108     0FEB  00DC               	movwf	??_ConvertToString^(0+128)
  5109     0FEC  3080               	movlw	128
  5110     0FED  025C               	subwf	??_ConvertToString^(0+128),w
  5111     0FEE  1D03               	skipz
  5112     0FEF  2FF2               	goto	u3285
  5113     0FF0  0863               	movf	ConvertToString@n_cifre^(0+128),w
  5114     0FF1  025F               	subwf	ConvertToString@j^(0+128),w
  5115     0FF2                     u3285:
  5116     0FF2  1C03               	skipc
  5117     0FF3  2FF5               	goto	u3281
  5118     0FF4  2FF6               	goto	u3280
  5119     0FF5                     u3281:
  5120     0FF5  2F8A               	goto	l3183
  5121     0FF6                     u3280:
  5122     0FF6                     l3195:
  5123                           
  5124                           ;main.c: 479:     str[i] = '\0';
  5125     0FF6  1683               	bsf	3,5	;RP0=1, select bank1
  5126     0FF7  1303               	bcf	3,6	;RP1=0, select bank1
  5127     0FF8  0861               	movf	ConvertToString@i^(0+128),w
  5128     0FF9  075B               	addwf	ConvertToString@str^(0+128),w
  5129     0FFA  00DC               	movwf	??_ConvertToString^(0+128)
  5130     0FFB  085C               	movf	??_ConvertToString^(0+128),w
  5131     0FFC  0084               	movwf	4
  5132     0FFD  1783               	bsf	3,7	;select IRP bank2
  5133     0FFE  0180               	clrf	0
  5134     0FFF                     l212:
  5135     0FFF  0008               	return
  5136     1000                     __end_of_ConvertToString:
  5137                           
  5138                           	psect	text14
  5139     165D                     __ptext14:	
  5140 ;; *************** function _pow *****************
  5141 ;; Defined at:
  5142 ;;		line 440 in file "main.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  b               1    wreg     unsigned char 
  5145 ;;  exp             1   31[BANK1 ] unsigned char 
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;  b               1   35[BANK1 ] unsigned char 
  5148 ;;  i               2   36[BANK1 ] int 
  5149 ;;  n               2   38[BANK1 ] int 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  2   31[BANK1 ] int 
  5152 ;; Registers used:
  5153 ;;		wreg, status,2, status,0, pclath, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         0       0       2       0       0
  5160 ;;      Locals:         0       0       5       0       0
  5161 ;;      Temps:          0       0       2       0       0
  5162 ;;      Totals:         0       0       9       0       0
  5163 ;;Total ram usage:        9 bytes
  5164 ;; Hardware stack levels used: 1
  5165 ;; Hardware stack levels required when called: 5
  5166 ;; This function calls:
  5167 ;;		___wmul
  5168 ;; This function is called by:
  5169 ;;		_ConvertToString
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173     165D                     _pow:	
  5174                           ;psect for function _pow
  5175                           
  5176                           
  5177                           ;incstack = 0
  5178                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  5179                           ;pow@b stored from wreg
  5180     165D  1683               	bsf	3,5	;RP0=1, select bank1
  5181     165E  1303               	bcf	3,6	;RP1=0, select bank1
  5182     165F  00C3               	movwf	pow@b^(0+128)
  5183     1660                     l3049:
  5184                           
  5185                           ;main.c: 440: int pow(char b, char exp);main.c: 441: {;main.c: 442:     int n = 1;
  5186     1660  3001               	movlw	1
  5187     1661  00C6               	movwf	pow@n^(0+128)
  5188     1662  3000               	movlw	0
  5189     1663  00C7               	movwf	(pow@n^(0+128)+1)
  5190     1664                     l3051:
  5191                           
  5192                           ;main.c: 443:     for(int i = 0; i < exp; i++)
  5193     1664  01C4               	clrf	pow@i^(0+128)
  5194     1665  01C5               	clrf	(pow@i+1)^(0+128)
  5195     1666  2E85               	goto	l3057
  5196     1667                     l3053:
  5197                           
  5198                           ;main.c: 444:     {;main.c: 445:         n *= b;
  5199     1667  1683               	bsf	3,5	;RP0=1, select bank1
  5200     1668  1303               	bcf	3,6	;RP1=0, select bank1
  5201     1669  0843               	movf	pow@b^(0+128),w
  5202     166A  00C1               	movwf	??_pow^(0+128)
  5203     166B  01C2               	clrf	(??_pow^(0+128)+1)
  5204     166C  0841               	movf	??_pow^(0+128),w
  5205     166D  00B9               	movwf	___wmul@multiplier^(0+128)
  5206     166E  0842               	movf	(??_pow+1)^(0+128),w
  5207     166F  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  5208     1670  0847               	movf	(pow@n+1)^(0+128),w
  5209     1671  00BC               	movwf	(___wmul@multiplicand+1)^(0+128)
  5210     1672  0846               	movf	pow@n^(0+128),w
  5211     1673  00BB               	movwf	___wmul@multiplicand^(0+128)
  5212     1674  160A  118A  259C  160A  118A  	fcall	___wmul
  5213     1679  1683               	bsf	3,5	;RP0=1, select bank1
  5214     167A  1303               	bcf	3,6	;RP1=0, select bank1
  5215     167B  083A               	movf	(?___wmul+1)^(0+128),w
  5216     167C  00C7               	movwf	(pow@n+1)^(0+128)
  5217     167D  0839               	movf	?___wmul^(0+128),w
  5218     167E  00C6               	movwf	pow@n^(0+128)
  5219     167F                     l3055:
  5220                           
  5221                           ;main.c: 446:     }
  5222     167F  3001               	movlw	1
  5223     1680  07C4               	addwf	pow@i^(0+128),f
  5224     1681  1803               	skipnc
  5225     1682  0AC5               	incf	(pow@i+1)^(0+128),f
  5226     1683  3000               	movlw	0
  5227     1684  07C5               	addwf	(pow@i+1)^(0+128),f
  5228     1685                     l3057:
  5229     1685  0845               	movf	(pow@i+1)^(0+128),w
  5230     1686  3A80               	xorlw	128
  5231     1687  00C1               	movwf	??_pow^(0+128)
  5232     1688  3080               	movlw	128
  5233     1689  0241               	subwf	??_pow^(0+128),w
  5234     168A  1D03               	skipz
  5235     168B  2E8E               	goto	u2965
  5236     168C  083F               	movf	pow@exp^(0+128),w
  5237     168D  0244               	subwf	pow@i^(0+128),w
  5238     168E                     u2965:
  5239     168E  1C03               	skipc
  5240     168F  2E91               	goto	u2961
  5241     1690  2E92               	goto	u2960
  5242     1691                     u2961:
  5243     1691  2E67               	goto	l3053
  5244     1692                     u2960:
  5245     1692                     l3059:
  5246                           
  5247                           ;main.c: 447:     return n;
  5248     1692  1683               	bsf	3,5	;RP0=1, select bank1
  5249     1693  1303               	bcf	3,6	;RP1=0, select bank1
  5250     1694  0847               	movf	(pow@n+1)^(0+128),w
  5251     1695  00C0               	movwf	(?_pow+1)^(0+128)
  5252     1696  0846               	movf	pow@n^(0+128),w
  5253     1697  00BF               	movwf	?_pow^(0+128)
  5254     1698                     l202:
  5255     1698  0008               	return
  5256     1699                     __end_of_pow:
  5257                           
  5258                           	psect	text15
  5259     0D4D                     __ptext15:	
  5260 ;; *************** function ___almod *****************
  5261 ;; Defined at:
  5262 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  divisor         4    0[BANK1 ] long 
  5265 ;;  dividend        4    4[BANK1 ] long 
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;  sign            1    9[BANK1 ] unsigned char 
  5268 ;;  counter         1    8[BANK1 ] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  4    0[BANK1 ] long 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5278 ;;      Params:         0       0       8       0       0
  5279 ;;      Locals:         0       0       2       0       0
  5280 ;;      Temps:          0       1       0       0       0
  5281 ;;      Totals:         0       1      10       0       0
  5282 ;;Total ram usage:       11 bytes
  5283 ;; Hardware stack levels used: 1
  5284 ;; Hardware stack levels required when called: 4
  5285 ;; This function calls:
  5286 ;;		Nothing
  5287 ;; This function is called by:
  5288 ;;		_ConvertToString
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292     0D4D                     ___almod:	
  5293                           ;psect for function ___almod
  5294                           
  5295     0D4D                     l3127:	
  5296                           ;incstack = 0
  5297                           ; Regs used in ___almod: [wreg+status,2+status,0]
  5298                           
  5299     0D4D  1683               	bsf	3,5	;RP0=1, select bank1
  5300     0D4E  1303               	bcf	3,6	;RP1=0, select bank1
  5301     0D4F  01A9               	clrf	___almod@sign^(0+128)
  5302     0D50                     l3129:
  5303     0D50  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  5304     0D51  2D53               	goto	u3141
  5305     0D52  2D54               	goto	u3140
  5306     0D53                     u3141:
  5307     0D53  2D61               	goto	l535
  5308     0D54                     u3140:
  5309     0D54                     l3131:
  5310     0D54  09A4               	comf	___almod@dividend^(0+128),f
  5311     0D55  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5312     0D56  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5313     0D57  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5314     0D58  0AA4               	incf	___almod@dividend^(0+128),f
  5315     0D59  1903               	skipnz
  5316     0D5A  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5317     0D5B  1903               	skipnz
  5318     0D5C  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5319     0D5D  1903               	skipnz
  5320     0D5E  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5321     0D5F  01A9               	clrf	___almod@sign^(0+128)
  5322     0D60  0AA9               	incf	___almod@sign^(0+128),f
  5323     0D61                     l535:
  5324     0D61  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5325     0D62  2D64               	goto	u3151
  5326     0D63  2D65               	goto	u3150
  5327     0D64                     u3151:
  5328     0D64  2D70               	goto	l3135
  5329     0D65                     u3150:
  5330     0D65                     l3133:
  5331     0D65  09A0               	comf	___almod@divisor^(0+128),f
  5332     0D66  09A1               	comf	(___almod@divisor+1)^(0+128),f
  5333     0D67  09A2               	comf	(___almod@divisor+2)^(0+128),f
  5334     0D68  09A3               	comf	(___almod@divisor+3)^(0+128),f
  5335     0D69  0AA0               	incf	___almod@divisor^(0+128),f
  5336     0D6A  1903               	skipnz
  5337     0D6B  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  5338     0D6C  1903               	skipnz
  5339     0D6D  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  5340     0D6E  1903               	skipnz
  5341     0D6F  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  5342     0D70                     l3135:
  5343     0D70  0823               	movf	(___almod@divisor+3)^(0+128),w
  5344     0D71  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  5345     0D72  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  5346     0D73  0420               	iorwf	___almod@divisor^(0+128),w
  5347     0D74  1903               	skipnz
  5348     0D75  2D77               	goto	u3161
  5349     0D76  2D78               	goto	u3160
  5350     0D77                     u3161:
  5351     0D77  2DC3               	goto	l3151
  5352     0D78                     u3160:
  5353     0D78                     l3137:
  5354     0D78  01A8               	clrf	___almod@counter^(0+128)
  5355     0D79  0AA8               	incf	___almod@counter^(0+128),f
  5356     0D7A  2D90               	goto	l3141
  5357     0D7B                     l3139:
  5358     0D7B  3001               	movlw	1
  5359     0D7C  1283               	bcf	3,5	;RP0=0, select bank0
  5360     0D7D  1303               	bcf	3,6	;RP1=0, select bank0
  5361     0D7E  00BC               	movwf	??___almod
  5362     0D7F                     u3175:
  5363     0D7F  1003               	clrc
  5364     0D80  1683               	bsf	3,5	;RP0=1, select bank1
  5365     0D81  1303               	bcf	3,6	;RP1=0, select bank1
  5366     0D82  0DA0               	rlf	___almod@divisor^(0+128),f
  5367     0D83  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  5368     0D84  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  5369     0D85  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  5370     0D86  1283               	bcf	3,5	;RP0=0, select bank0
  5371     0D87  1303               	bcf	3,6	;RP1=0, select bank0
  5372     0D88  0BBC               	decfsz	??___almod,f
  5373     0D89  2D7F               	goto	u3175
  5374     0D8A  3001               	movlw	1
  5375     0D8B  00BC               	movwf	??___almod
  5376     0D8C  083C               	movf	??___almod,w
  5377     0D8D  1683               	bsf	3,5	;RP0=1, select bank1
  5378     0D8E  1303               	bcf	3,6	;RP1=0, select bank1
  5379     0D8F  07A8               	addwf	___almod@counter^(0+128),f
  5380     0D90                     l3141:
  5381     0D90  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5382     0D91  2D93               	goto	u3181
  5383     0D92  2D94               	goto	u3180
  5384     0D93                     u3181:
  5385     0D93  2D7B               	goto	l3139
  5386     0D94                     u3180:
  5387     0D94                     l3143:
  5388     0D94  0823               	movf	(___almod@divisor+3)^(0+128),w
  5389     0D95  0227               	subwf	(___almod@dividend+3)^(0+128),w
  5390     0D96  1D03               	skipz
  5391     0D97  2DA2               	goto	u3195
  5392     0D98  0822               	movf	(___almod@divisor+2)^(0+128),w
  5393     0D99  0226               	subwf	(___almod@dividend+2)^(0+128),w
  5394     0D9A  1D03               	skipz
  5395     0D9B  2DA2               	goto	u3195
  5396     0D9C  0821               	movf	(___almod@divisor+1)^(0+128),w
  5397     0D9D  0225               	subwf	(___almod@dividend+1)^(0+128),w
  5398     0D9E  1D03               	skipz
  5399     0D9F  2DA2               	goto	u3195
  5400     0DA0  0820               	movf	___almod@divisor^(0+128),w
  5401     0DA1  0224               	subwf	___almod@dividend^(0+128),w
  5402     0DA2                     u3195:
  5403     0DA2  1C03               	skipc
  5404     0DA3  2DA5               	goto	u3191
  5405     0DA4  2DA6               	goto	u3190
  5406     0DA5                     u3191:
  5407     0DA5  2DB4               	goto	l3147
  5408     0DA6                     u3190:
  5409     0DA6                     l3145:
  5410     0DA6  0820               	movf	___almod@divisor^(0+128),w
  5411     0DA7  02A4               	subwf	___almod@dividend^(0+128),f
  5412     0DA8  0821               	movf	(___almod@divisor+1)^(0+128),w
  5413     0DA9  1C03               	skipc
  5414     0DAA  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  5415     0DAB  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  5416     0DAC  0822               	movf	(___almod@divisor+2)^(0+128),w
  5417     0DAD  1C03               	skipc
  5418     0DAE  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  5419     0DAF  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  5420     0DB0  0823               	movf	(___almod@divisor+3)^(0+128),w
  5421     0DB1  1C03               	skipc
  5422     0DB2  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  5423     0DB3  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  5424     0DB4                     l3147:
  5425     0DB4  3001               	movlw	1
  5426     0DB5                     u3205:
  5427     0DB5  1003               	clrc
  5428     0DB6  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  5429     0DB7  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  5430     0DB8  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  5431     0DB9  0CA0               	rrf	___almod@divisor^(0+128),f
  5432     0DBA  3EFF               	addlw	-1
  5433     0DBB  1D03               	skipz
  5434     0DBC  2DB5               	goto	u3205
  5435     0DBD                     l3149:
  5436     0DBD  3001               	movlw	1
  5437     0DBE  02A8               	subwf	___almod@counter^(0+128),f
  5438     0DBF  1D03               	btfss	3,2
  5439     0DC0  2DC2               	goto	u3211
  5440     0DC1  2DC3               	goto	u3210
  5441     0DC2                     u3211:
  5442     0DC2  2D94               	goto	l3143
  5443     0DC3                     u3210:
  5444     0DC3                     l3151:
  5445     0DC3  0829               	movf	___almod@sign^(0+128),w
  5446     0DC4  1903               	btfsc	3,2
  5447     0DC5  2DC7               	goto	u3221
  5448     0DC6  2DC8               	goto	u3220
  5449     0DC7                     u3221:
  5450     0DC7  2DD3               	goto	l3155
  5451     0DC8                     u3220:
  5452     0DC8                     l3153:
  5453     0DC8  09A4               	comf	___almod@dividend^(0+128),f
  5454     0DC9  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5455     0DCA  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5456     0DCB  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5457     0DCC  0AA4               	incf	___almod@dividend^(0+128),f
  5458     0DCD  1903               	skipnz
  5459     0DCE  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5460     0DCF  1903               	skipnz
  5461     0DD0  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5462     0DD1  1903               	skipnz
  5463     0DD2  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5464     0DD3                     l3155:
  5465     0DD3  0827               	movf	(___almod@dividend+3)^(0+128),w
  5466     0DD4  00A3               	movwf	(?___almod+3)^(0+128)
  5467     0DD5  0826               	movf	(___almod@dividend+2)^(0+128),w
  5468     0DD6  00A2               	movwf	(?___almod+2)^(0+128)
  5469     0DD7  0825               	movf	(___almod@dividend+1)^(0+128),w
  5470     0DD8  00A1               	movwf	(?___almod+1)^(0+128)
  5471     0DD9  0824               	movf	___almod@dividend^(0+128),w
  5472     0DDA  00A0               	movwf	?___almod^(0+128)
  5473     0DDB                     l545:
  5474     0DDB  0008               	return
  5475     0DDC                     __end_of___almod:
  5476                           
  5477                           	psect	text16
  5478     0DDC                     __ptext16:	
  5479 ;; *************** function ___aldiv *****************
  5480 ;; Defined at:
  5481 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  divisor         4   40[BANK1 ] long 
  5484 ;;  dividend        4   44[BANK1 ] long 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  quotient        4   51[BANK1 ] long 
  5487 ;;  sign            1   50[BANK1 ] unsigned char 
  5488 ;;  counter         1   49[BANK1 ] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  4   40[BANK1 ] long 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5498 ;;      Params:         0       0       8       0       0
  5499 ;;      Locals:         0       0       6       0       0
  5500 ;;      Temps:          0       0       1       0       0
  5501 ;;      Totals:         0       0      15       0       0
  5502 ;;Total ram usage:       15 bytes
  5503 ;; Hardware stack levels used: 1
  5504 ;; Hardware stack levels required when called: 4
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_ConvertToString
  5509 ;;		_UART_init
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513     0DDC                     ___aldiv:	
  5514                           ;psect for function ___aldiv
  5515                           
  5516     0DDC                     l3087:	
  5517                           ;incstack = 0
  5518                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5519                           
  5520     0DDC  1683               	bsf	3,5	;RP0=1, select bank1
  5521     0DDD  1303               	bcf	3,6	;RP1=0, select bank1
  5522     0DDE  01D2               	clrf	___aldiv@sign^(0+128)
  5523     0DDF                     l3089:
  5524     0DDF  1FCB               	btfss	(___aldiv@divisor+3)^(0+128),7
  5525     0DE0  2DE2               	goto	u3041
  5526     0DE1  2DE3               	goto	u3040
  5527     0DE2                     u3041:
  5528     0DE2  2DF0               	goto	l522
  5529     0DE3                     u3040:
  5530     0DE3                     l3091:
  5531     0DE3  09C8               	comf	___aldiv@divisor^(0+128),f
  5532     0DE4  09C9               	comf	(___aldiv@divisor+1)^(0+128),f
  5533     0DE5  09CA               	comf	(___aldiv@divisor+2)^(0+128),f
  5534     0DE6  09CB               	comf	(___aldiv@divisor+3)^(0+128),f
  5535     0DE7  0AC8               	incf	___aldiv@divisor^(0+128),f
  5536     0DE8  1903               	skipnz
  5537     0DE9  0AC9               	incf	(___aldiv@divisor+1)^(0+128),f
  5538     0DEA  1903               	skipnz
  5539     0DEB  0ACA               	incf	(___aldiv@divisor+2)^(0+128),f
  5540     0DEC  1903               	skipnz
  5541     0DED  0ACB               	incf	(___aldiv@divisor+3)^(0+128),f
  5542     0DEE  01D2               	clrf	___aldiv@sign^(0+128)
  5543     0DEF  0AD2               	incf	___aldiv@sign^(0+128),f
  5544     0DF0                     l522:
  5545     0DF0  1FCF               	btfss	(___aldiv@dividend+3)^(0+128),7
  5546     0DF1  2DF3               	goto	u3051
  5547     0DF2  2DF4               	goto	u3050
  5548     0DF3                     u3051:
  5549     0DF3  2E03               	goto	l3097
  5550     0DF4                     u3050:
  5551     0DF4                     l3093:
  5552     0DF4  09CC               	comf	___aldiv@dividend^(0+128),f
  5553     0DF5  09CD               	comf	(___aldiv@dividend+1)^(0+128),f
  5554     0DF6  09CE               	comf	(___aldiv@dividend+2)^(0+128),f
  5555     0DF7  09CF               	comf	(___aldiv@dividend+3)^(0+128),f
  5556     0DF8  0ACC               	incf	___aldiv@dividend^(0+128),f
  5557     0DF9  1903               	skipnz
  5558     0DFA  0ACD               	incf	(___aldiv@dividend+1)^(0+128),f
  5559     0DFB  1903               	skipnz
  5560     0DFC  0ACE               	incf	(___aldiv@dividend+2)^(0+128),f
  5561     0DFD  1903               	skipnz
  5562     0DFE  0ACF               	incf	(___aldiv@dividend+3)^(0+128),f
  5563     0DFF                     l3095:
  5564     0DFF  3001               	movlw	1
  5565     0E00  00D0               	movwf	??___aldiv^(0+128)
  5566     0E01  0850               	movf	??___aldiv^(0+128),w
  5567     0E02  06D2               	xorwf	___aldiv@sign^(0+128),f
  5568     0E03                     l3097:
  5569     0E03  3000               	movlw	0
  5570     0E04  00D6               	movwf	(___aldiv@quotient+3)^(0+128)
  5571     0E05  3000               	movlw	0
  5572     0E06  00D5               	movwf	(___aldiv@quotient+2)^(0+128)
  5573     0E07  3000               	movlw	0
  5574     0E08  00D4               	movwf	(___aldiv@quotient+1)^(0+128)
  5575     0E09  3000               	movlw	0
  5576     0E0A  00D3               	movwf	___aldiv@quotient^(0+128)
  5577     0E0B                     l3099:
  5578     0E0B  084B               	movf	(___aldiv@divisor+3)^(0+128),w
  5579     0E0C  044A               	iorwf	(___aldiv@divisor+2)^(0+128),w
  5580     0E0D  0449               	iorwf	(___aldiv@divisor+1)^(0+128),w
  5581     0E0E  0448               	iorwf	___aldiv@divisor^(0+128),w
  5582     0E0F  1903               	skipnz
  5583     0E10  2E12               	goto	u3061
  5584     0E11  2E13               	goto	u3060
  5585     0E12                     u3061:
  5586     0E12  2E60               	goto	l3119
  5587     0E13                     u3060:
  5588     0E13                     l3101:
  5589     0E13  01D1               	clrf	___aldiv@counter^(0+128)
  5590     0E14  0AD1               	incf	___aldiv@counter^(0+128),f
  5591     0E15  2E23               	goto	l3105
  5592     0E16                     l3103:
  5593     0E16  3001               	movlw	1
  5594     0E17  00D0               	movwf	??___aldiv^(0+128)
  5595     0E18                     u3075:
  5596     0E18  1003               	clrc
  5597     0E19  0DC8               	rlf	___aldiv@divisor^(0+128),f
  5598     0E1A  0DC9               	rlf	(___aldiv@divisor+1)^(0+128),f
  5599     0E1B  0DCA               	rlf	(___aldiv@divisor+2)^(0+128),f
  5600     0E1C  0DCB               	rlf	(___aldiv@divisor+3)^(0+128),f
  5601     0E1D  0BD0               	decfsz	??___aldiv^(0+128),f
  5602     0E1E  2E18               	goto	u3075
  5603     0E1F  3001               	movlw	1
  5604     0E20  00D0               	movwf	??___aldiv^(0+128)
  5605     0E21  0850               	movf	??___aldiv^(0+128),w
  5606     0E22  07D1               	addwf	___aldiv@counter^(0+128),f
  5607     0E23                     l3105:
  5608     0E23  1FCB               	btfss	(___aldiv@divisor+3)^(0+128),7
  5609     0E24  2E26               	goto	u3081
  5610     0E25  2E27               	goto	u3080
  5611     0E26                     u3081:
  5612     0E26  2E16               	goto	l3103
  5613     0E27                     u3080:
  5614     0E27                     l3107:
  5615     0E27  3001               	movlw	1
  5616     0E28  00D0               	movwf	??___aldiv^(0+128)
  5617     0E29                     u3095:
  5618     0E29  1003               	clrc
  5619     0E2A  0DD3               	rlf	___aldiv@quotient^(0+128),f
  5620     0E2B  0DD4               	rlf	(___aldiv@quotient+1)^(0+128),f
  5621     0E2C  0DD5               	rlf	(___aldiv@quotient+2)^(0+128),f
  5622     0E2D  0DD6               	rlf	(___aldiv@quotient+3)^(0+128),f
  5623     0E2E  0BD0               	decfsz	??___aldiv^(0+128),f
  5624     0E2F  2E29               	goto	u3095
  5625     0E30                     l3109:
  5626     0E30  084B               	movf	(___aldiv@divisor+3)^(0+128),w
  5627     0E31  024F               	subwf	(___aldiv@dividend+3)^(0+128),w
  5628     0E32  1D03               	skipz
  5629     0E33  2E3E               	goto	u3105
  5630     0E34  084A               	movf	(___aldiv@divisor+2)^(0+128),w
  5631     0E35  024E               	subwf	(___aldiv@dividend+2)^(0+128),w
  5632     0E36  1D03               	skipz
  5633     0E37  2E3E               	goto	u3105
  5634     0E38  0849               	movf	(___aldiv@divisor+1)^(0+128),w
  5635     0E39  024D               	subwf	(___aldiv@dividend+1)^(0+128),w
  5636     0E3A  1D03               	skipz
  5637     0E3B  2E3E               	goto	u3105
  5638     0E3C  0848               	movf	___aldiv@divisor^(0+128),w
  5639     0E3D  024C               	subwf	___aldiv@dividend^(0+128),w
  5640     0E3E                     u3105:
  5641     0E3E  1C03               	skipc
  5642     0E3F  2E41               	goto	u3101
  5643     0E40  2E42               	goto	u3100
  5644     0E41                     u3101:
  5645     0E41  2E51               	goto	l3115
  5646     0E42                     u3100:
  5647     0E42                     l3111:
  5648     0E42  0848               	movf	___aldiv@divisor^(0+128),w
  5649     0E43  02CC               	subwf	___aldiv@dividend^(0+128),f
  5650     0E44  0849               	movf	(___aldiv@divisor+1)^(0+128),w
  5651     0E45  1C03               	skipc
  5652     0E46  0F49               	incfsz	(___aldiv@divisor+1)^(0+128),w
  5653     0E47  02CD               	subwf	(___aldiv@dividend+1)^(0+128),f
  5654     0E48  084A               	movf	(___aldiv@divisor+2)^(0+128),w
  5655     0E49  1C03               	skipc
  5656     0E4A  0F4A               	incfsz	(___aldiv@divisor+2)^(0+128),w
  5657     0E4B  02CE               	subwf	(___aldiv@dividend+2)^(0+128),f
  5658     0E4C  084B               	movf	(___aldiv@divisor+3)^(0+128),w
  5659     0E4D  1C03               	skipc
  5660     0E4E  0F4B               	incfsz	(___aldiv@divisor+3)^(0+128),w
  5661     0E4F  02CF               	subwf	(___aldiv@dividend+3)^(0+128),f
  5662     0E50                     l3113:
  5663     0E50  1453               	bsf	___aldiv@quotient^(0+128),0
  5664     0E51                     l3115:
  5665     0E51  3001               	movlw	1
  5666     0E52                     u3115:
  5667     0E52  1003               	clrc
  5668     0E53  0CCB               	rrf	(___aldiv@divisor+3)^(0+128),f
  5669     0E54  0CCA               	rrf	(___aldiv@divisor+2)^(0+128),f
  5670     0E55  0CC9               	rrf	(___aldiv@divisor+1)^(0+128),f
  5671     0E56  0CC8               	rrf	___aldiv@divisor^(0+128),f
  5672     0E57  3EFF               	addlw	-1
  5673     0E58  1D03               	skipz
  5674     0E59  2E52               	goto	u3115
  5675     0E5A                     l3117:
  5676     0E5A  3001               	movlw	1
  5677     0E5B  02D1               	subwf	___aldiv@counter^(0+128),f
  5678     0E5C  1D03               	btfss	3,2
  5679     0E5D  2E5F               	goto	u3121
  5680     0E5E  2E60               	goto	u3120
  5681     0E5F                     u3121:
  5682     0E5F  2E27               	goto	l3107
  5683     0E60                     u3120:
  5684     0E60                     l3119:
  5685     0E60  0852               	movf	___aldiv@sign^(0+128),w
  5686     0E61  1903               	btfsc	3,2
  5687     0E62  2E64               	goto	u3131
  5688     0E63  2E65               	goto	u3130
  5689     0E64                     u3131:
  5690     0E64  2E70               	goto	l3123
  5691     0E65                     u3130:
  5692     0E65                     l3121:
  5693     0E65  09D3               	comf	___aldiv@quotient^(0+128),f
  5694     0E66  09D4               	comf	(___aldiv@quotient+1)^(0+128),f
  5695     0E67  09D5               	comf	(___aldiv@quotient+2)^(0+128),f
  5696     0E68  09D6               	comf	(___aldiv@quotient+3)^(0+128),f
  5697     0E69  0AD3               	incf	___aldiv@quotient^(0+128),f
  5698     0E6A  1903               	skipnz
  5699     0E6B  0AD4               	incf	(___aldiv@quotient+1)^(0+128),f
  5700     0E6C  1903               	skipnz
  5701     0E6D  0AD5               	incf	(___aldiv@quotient+2)^(0+128),f
  5702     0E6E  1903               	skipnz
  5703     0E6F  0AD6               	incf	(___aldiv@quotient+3)^(0+128),f
  5704     0E70                     l3123:
  5705     0E70  0856               	movf	(___aldiv@quotient+3)^(0+128),w
  5706     0E71  00CB               	movwf	(?___aldiv+3)^(0+128)
  5707     0E72  0855               	movf	(___aldiv@quotient+2)^(0+128),w
  5708     0E73  00CA               	movwf	(?___aldiv+2)^(0+128)
  5709     0E74  0854               	movf	(___aldiv@quotient+1)^(0+128),w
  5710     0E75  00C9               	movwf	(?___aldiv+1)^(0+128)
  5711     0E76  0853               	movf	___aldiv@quotient^(0+128),w
  5712     0E77  00C8               	movwf	?___aldiv^(0+128)
  5713     0E78                     l532:
  5714     0E78  0008               	return
  5715     0E79                     __end_of___aldiv:
  5716                           
  5717                           	psect	text17
  5718     0B59                     __ptext17:	
  5719 ;; *************** function _UART_TxString *****************
  5720 ;; Defined at:
  5721 ;;		line 818 in file "main.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  str             1    wreg     PTR const unsigned char 
  5724 ;;		 -> packet(15), 
  5725 ;;  is_ACK          1   31[BANK1 ] unsigned char 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  str             1   35[BANK1 ] PTR const unsigned char 
  5728 ;;		 -> packet(15), 
  5729 ;;  n               2   33[BANK1 ] unsigned int 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5739 ;;      Params:         0       0       1       0       0
  5740 ;;      Locals:         0       0       3       0       0
  5741 ;;      Temps:          0       0       1       0       0
  5742 ;;      Totals:         0       0       5       0       0
  5743 ;;Total ram usage:        5 bytes
  5744 ;; Hardware stack levels used: 1
  5745 ;; Hardware stack levels required when called: 6
  5746 ;; This function calls:
  5747 ;;		_UART_TxChar
  5748 ;;		___awmod
  5749 ;;		___wmul
  5750 ;;		_rand
  5751 ;;		_srand
  5752 ;; This function is called by:
  5753 ;;		_main
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757     0B59                     _UART_TxString:	
  5758                           ;psect for function _UART_TxString
  5759                           
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5763                           ;UART_TxString@str stored from wreg
  5764     0B59  1683               	bsf	3,5	;RP0=1, select bank1
  5765     0B5A  1303               	bcf	3,6	;RP1=0, select bank1
  5766     0B5B  00C3               	movwf	UART_TxString@str^(0+128)
  5767     0B5C                     l3555:
  5768                           
  5769                           ;main.c: 818: void UART_TxString(const char *str, char is_ACK);main.c: 819: {;main.c: 82
      +                          0:     unsigned int n = 0;
  5770     0B5C  01C1               	clrf	UART_TxString@n^(0+128)
  5771     0B5D  01C2               	clrf	(UART_TxString@n+1)^(0+128)
  5772                           
  5773                           ;main.c: 822:     while(str[n] != '\0')
  5774     0B5E  2B72               	goto	l3561
  5775     0B5F                     l3557:
  5776                           
  5777                           ;main.c: 823:     {;main.c: 824:         UART_TxChar(str[n]);
  5778     0B5F  0841               	movf	UART_TxString@n^(0+128),w
  5779     0B60  0743               	addwf	UART_TxString@str^(0+128),w
  5780     0B61  00C0               	movwf	??_UART_TxString^(0+128)
  5781     0B62  0840               	movf	??_UART_TxString^(0+128),w
  5782     0B63  0084               	movwf	4
  5783     0B64  0800               	movf	0,w
  5784     0B65  160A  118A  253D  120A  158A  	fcall	_UART_TxChar
  5785     0B6A                     l3559:
  5786                           
  5787                           ;main.c: 825:         n++;
  5788     0B6A  3001               	movlw	1
  5789     0B6B  1683               	bsf	3,5	;RP0=1, select bank1
  5790     0B6C  1303               	bcf	3,6	;RP1=0, select bank1
  5791     0B6D  07C1               	addwf	UART_TxString@n^(0+128),f
  5792     0B6E  1803               	skipnc
  5793     0B6F  0AC2               	incf	(UART_TxString@n+1)^(0+128),f
  5794     0B70  3000               	movlw	0
  5795     0B71  07C2               	addwf	(UART_TxString@n+1)^(0+128),f
  5796     0B72                     l3561:
  5797                           
  5798                           ;main.c: 822:     while(str[n] != '\0')
  5799     0B72  0841               	movf	UART_TxString@n^(0+128),w
  5800     0B73  0743               	addwf	UART_TxString@str^(0+128),w
  5801     0B74  00C0               	movwf	??_UART_TxString^(0+128)
  5802     0B75  0840               	movf	??_UART_TxString^(0+128),w
  5803     0B76  0084               	movwf	4
  5804     0B77  1783               	bsf	3,7	;select IRP bank2
  5805     0B78  0800               	movf	0,w
  5806     0B79  1D03               	btfss	3,2
  5807     0B7A  2B7C               	goto	u3831
  5808     0B7B  2B7D               	goto	u3830
  5809     0B7C                     u3831:
  5810     0B7C  2B5F               	goto	l3557
  5811     0B7D                     u3830:
  5812     0B7D                     l3563:
  5813                           
  5814                           ;main.c: 828:     if(is_ACK == 0)
  5815     0B7D  083F               	movf	UART_TxString@is_ACK^(0+128),w
  5816     0B7E  1D03               	btfss	3,2
  5817     0B7F  2B81               	goto	u3841
  5818     0B80  2B82               	goto	u3840
  5819     0B81                     u3841:
  5820     0B81  2BCD               	goto	l322
  5821     0B82                     u3840:
  5822     0B82                     l3565:
  5823                           
  5824                           ;main.c: 829:     {;main.c: 832:         srand(milliseconds);
  5825     0B82  0869               	movf	(_milliseconds+1)^(0+128),w
  5826     0B83  1283               	bcf	3,5	;RP0=0, select bank0
  5827     0B84  1303               	bcf	3,6	;RP1=0, select bank0
  5828     0B85  00BD               	movwf	srand@x+1
  5829     0B86  1683               	bsf	3,5	;RP0=1, select bank1
  5830     0B87  1303               	bcf	3,6	;RP1=0, select bank1
  5831     0B88  0868               	movf	_milliseconds^(0+128),w
  5832     0B89  1283               	bcf	3,5	;RP0=0, select bank0
  5833     0B8A  1303               	bcf	3,6	;RP1=0, select bank0
  5834     0B8B  00BC               	movwf	srand@x
  5835     0B8C  160A  118A  2526  120A  158A  	fcall	_srand
  5836     0B91                     l3567:
  5837                           
  5838                           ;main.c: 833:         milliseconds = 0;
  5839     0B91  3000               	movlw	0
  5840     0B92  1683               	bsf	3,5	;RP0=1, select bank1
  5841     0B93  1303               	bcf	3,6	;RP1=0, select bank1
  5842     0B94  00EB               	movwf	(_milliseconds+3)^(0+128)
  5843     0B95  3000               	movlw	0
  5844     0B96  00EA               	movwf	(_milliseconds+2)^(0+128)
  5845     0B97  3000               	movlw	0
  5846     0B98  00E9               	movwf	(_milliseconds+1)^(0+128)
  5847     0B99  3000               	movlw	0
  5848     0B9A  00E8               	movwf	_milliseconds^(0+128)
  5849     0B9B                     l3569:
  5850                           
  5851                           ;main.c: 835:         seconds = ((rand()%10)+5) * 250;
  5852     0B9B  300A               	movlw	10
  5853     0B9C  00B3               	movwf	___awmod@divisor^(0+128)
  5854     0B9D  3000               	movlw	0
  5855     0B9E  00B4               	movwf	(___awmod@divisor^(0+128)+1)
  5856     0B9F  120A  118A  268F  120A  158A  	fcall	_rand
  5857     0BA4  1683               	bsf	3,5	;RP0=1, select bank1
  5858     0BA5  1303               	bcf	3,6	;RP1=0, select bank1
  5859     0BA6  082D               	movf	(?_rand+1)^(0+128),w
  5860     0BA7  00B6               	movwf	(___awmod@dividend+1)^(0+128)
  5861     0BA8  082C               	movf	?_rand^(0+128),w
  5862     0BA9  00B5               	movwf	___awmod@dividend^(0+128)
  5863     0BAA  120A  158A  214B  120A  158A  	fcall	___awmod
  5864     0BAF  1683               	bsf	3,5	;RP0=1, select bank1
  5865     0BB0  1303               	bcf	3,6	;RP1=0, select bank1
  5866     0BB1  0833               	movf	?___awmod^(0+128),w
  5867     0BB2  3E05               	addlw	5
  5868     0BB3  00B9               	movwf	___wmul@multiplier^(0+128)
  5869     0BB4  0834               	movf	(?___awmod+1)^(0+128),w
  5870     0BB5  1803               	skipnc
  5871     0BB6  3E01               	addlw	1
  5872     0BB7  3E00               	addlw	0
  5873     0BB8  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  5874     0BB9  30FA               	movlw	250
  5875     0BBA  00BB               	movwf	___wmul@multiplicand^(0+128)
  5876     0BBB  3000               	movlw	0
  5877     0BBC  00BC               	movwf	(___wmul@multiplicand^(0+128)+1)
  5878     0BBD  160A  118A  259C  120A  158A  	fcall	___wmul
  5879     0BC2  1683               	bsf	3,5	;RP0=1, select bank1
  5880     0BC3  1303               	bcf	3,6	;RP1=0, select bank1
  5881     0BC4  0839               	movf	?___wmul^(0+128),w
  5882     0BC5  00E4               	movwf	_seconds^(0+128)
  5883     0BC6  083A               	movf	(?___wmul+1)^(0+128),w
  5884     0BC7  00E5               	movwf	(_seconds+1)^(0+128)
  5885     0BC8  3000               	movlw	0
  5886     0BC9  1BE5               	btfsc	(_seconds+1)^(0+128),7
  5887     0BCA  30FF               	movlw	255
  5888     0BCB  00E6               	movwf	(_seconds+2)^(0+128)
  5889     0BCC  00E7               	movwf	(_seconds+3)^(0+128)
  5890     0BCD                     l322:
  5891     0BCD  0008               	return
  5892     0BCE                     __end_of_UART_TxString:
  5893                           
  5894                           	psect	text18
  5895     1526                     __ptext18:	
  5896 ;; *************** function _srand *****************
  5897 ;; Defined at:
  5898 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  x               2   28[BANK0 ] unsigned int 
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;		None
  5903 ;; Return value:  Size  Location     Type
  5904 ;;                  1    wreg      void 
  5905 ;; Registers used:
  5906 ;;		wreg
  5907 ;; Tracked objects:
  5908 ;;		On entry : 0/0
  5909 ;;		On exit  : 0/0
  5910 ;;		Unchanged: 0/0
  5911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5912 ;;      Params:         0       2       0       0       0
  5913 ;;      Locals:         0       0       0       0       0
  5914 ;;      Temps:          0       0       0       0       0
  5915 ;;      Totals:         0       2       0       0       0
  5916 ;;Total ram usage:        2 bytes
  5917 ;; Hardware stack levels used: 1
  5918 ;; Hardware stack levels required when called: 4
  5919 ;; This function calls:
  5920 ;;		Nothing
  5921 ;; This function is called by:
  5922 ;;		_read_NumPad
  5923 ;;		_UART_TxString
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927     1526                     _srand:	
  5928                           ;psect for function _srand
  5929                           
  5930     1526                     l3343:	
  5931                           ;incstack = 0
  5932                           ; Regs used in _srand: [wreg]
  5933                           
  5934     1526  1283               	bcf	3,5	;RP0=0, select bank0
  5935     1527  1303               	bcf	3,6	;RP1=0, select bank0
  5936     1528  083C               	movf	srand@x,w
  5937     1529  00D0               	movwf	_randx
  5938     152A  083D               	movf	srand@x+1,w
  5939     152B  00D1               	movwf	_randx+1
  5940     152C  01D2               	clrf	_randx+2
  5941     152D  01D3               	clrf	_randx+3
  5942     152E                     l910:
  5943     152E  0008               	return
  5944     152F                     __end_of_srand:
  5945                           
  5946                           	psect	text19
  5947     068F                     __ptext19:	
  5948 ;; *************** function _rand *****************
  5949 ;; Defined at:
  5950 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;		None
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  2   12[BANK1 ] int 
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, status,0, pclath, cstack
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5964 ;;      Params:         0       0       2       0       0
  5965 ;;      Locals:         0       0       0       0       0
  5966 ;;      Temps:          0       0       5       0       0
  5967 ;;      Totals:         0       0       7       0       0
  5968 ;;Total ram usage:        7 bytes
  5969 ;; Hardware stack levels used: 1
  5970 ;; Hardware stack levels required when called: 5
  5971 ;; This function calls:
  5972 ;;		___lmul
  5973 ;; This function is called by:
  5974 ;;		_read_NumPad
  5975 ;;		_UART_TxString
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979     068F                     _rand:	
  5980                           ;psect for function _rand
  5981                           
  5982     068F                     l3345:	
  5983                           ;incstack = 0
  5984                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  5985                           
  5986     068F  1283               	bcf	3,5	;RP0=0, select bank0
  5987     0690  1303               	bcf	3,6	;RP1=0, select bank0
  5988     0691  0853               	movf	_randx+3,w
  5989     0692  1683               	bsf	3,5	;RP0=1, select bank1
  5990     0693  1303               	bcf	3,6	;RP1=0, select bank1
  5991     0694  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  5992     0695  1283               	bcf	3,5	;RP0=0, select bank0
  5993     0696  1303               	bcf	3,6	;RP1=0, select bank0
  5994     0697  0852               	movf	_randx+2,w
  5995     0698  1683               	bsf	3,5	;RP0=1, select bank1
  5996     0699  1303               	bcf	3,6	;RP1=0, select bank1
  5997     069A  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  5998     069B  1283               	bcf	3,5	;RP0=0, select bank0
  5999     069C  1303               	bcf	3,6	;RP1=0, select bank0
  6000     069D  0851               	movf	_randx+1,w
  6001     069E  1683               	bsf	3,5	;RP0=1, select bank1
  6002     069F  1303               	bcf	3,6	;RP1=0, select bank1
  6003     06A0  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  6004     06A1  1283               	bcf	3,5	;RP0=0, select bank0
  6005     06A2  1303               	bcf	3,6	;RP1=0, select bank0
  6006     06A3  0850               	movf	_randx,w
  6007     06A4  1683               	bsf	3,5	;RP0=1, select bank1
  6008     06A5  1303               	bcf	3,6	;RP1=0, select bank1
  6009     06A6  00A0               	movwf	___lmul@multiplier^(0+128)
  6010     06A7  3041               	movlw	65
  6011     06A8  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  6012     06A9  30C6               	movlw	198
  6013     06AA  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  6014     06AB  304E               	movlw	78
  6015     06AC  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  6016     06AD  306D               	movlw	109
  6017     06AE  00A4               	movwf	___lmul@multiplicand^(0+128)
  6018     06AF  160A  118A  27B0  120A  118A  	fcall	___lmul
  6019     06B4  1683               	bsf	3,5	;RP0=1, select bank1
  6020     06B5  1303               	bcf	3,6	;RP1=0, select bank1
  6021     06B6  0823               	movf	(?___lmul+3)^(0+128),w
  6022     06B7  1283               	bcf	3,5	;RP0=0, select bank0
  6023     06B8  1303               	bcf	3,6	;RP1=0, select bank0
  6024     06B9  00D3               	movwf	_randx+3
  6025     06BA  1683               	bsf	3,5	;RP0=1, select bank1
  6026     06BB  1303               	bcf	3,6	;RP1=0, select bank1
  6027     06BC  0822               	movf	(?___lmul+2)^(0+128),w
  6028     06BD  1283               	bcf	3,5	;RP0=0, select bank0
  6029     06BE  1303               	bcf	3,6	;RP1=0, select bank0
  6030     06BF  00D2               	movwf	_randx+2
  6031     06C0  1683               	bsf	3,5	;RP0=1, select bank1
  6032     06C1  1303               	bcf	3,6	;RP1=0, select bank1
  6033     06C2  0821               	movf	(?___lmul+1)^(0+128),w
  6034     06C3  1283               	bcf	3,5	;RP0=0, select bank0
  6035     06C4  1303               	bcf	3,6	;RP1=0, select bank0
  6036     06C5  00D1               	movwf	_randx+1
  6037     06C6  1683               	bsf	3,5	;RP0=1, select bank1
  6038     06C7  1303               	bcf	3,6	;RP1=0, select bank1
  6039     06C8  0820               	movf	?___lmul^(0+128),w
  6040     06C9  1283               	bcf	3,5	;RP0=0, select bank0
  6041     06CA  1303               	bcf	3,6	;RP1=0, select bank0
  6042     06CB  00D0               	movwf	_randx
  6043     06CC                     l3347:
  6044     06CC  3039               	movlw	57
  6045     06CD  07D0               	addwf	_randx,f
  6046     06CE  3030               	movlw	48
  6047     06CF  1803               	skipnc
  6048     06D0  3031               	movlw	49
  6049     06D1  07D1               	addwf	_randx+1,f
  6050     06D2  3000               	movlw	0
  6051     06D3  1803               	skipnc
  6052     06D4  3001               	movlw	1
  6053     06D5  07D2               	addwf	_randx+2,f
  6054     06D6  3000               	movlw	0
  6055     06D7  1803               	skipnc
  6056     06D8  3001               	movlw	1
  6057     06D9  07D3               	addwf	_randx+3,f
  6058     06DA                     l3349:
  6059     06DA  0850               	movf	_randx,w
  6060     06DB  1683               	bsf	3,5	;RP0=1, select bank1
  6061     06DC  1303               	bcf	3,6	;RP1=0, select bank1
  6062     06DD  00AE               	movwf	??_rand^(0+128)
  6063     06DE  1283               	bcf	3,5	;RP0=0, select bank0
  6064     06DF  1303               	bcf	3,6	;RP1=0, select bank0
  6065     06E0  0851               	movf	_randx+1,w
  6066     06E1  1683               	bsf	3,5	;RP0=1, select bank1
  6067     06E2  1303               	bcf	3,6	;RP1=0, select bank1
  6068     06E3  00AF               	movwf	(??_rand^(0+128)+1)
  6069     06E4  1283               	bcf	3,5	;RP0=0, select bank0
  6070     06E5  1303               	bcf	3,6	;RP1=0, select bank0
  6071     06E6  0852               	movf	_randx+2,w
  6072     06E7  1683               	bsf	3,5	;RP0=1, select bank1
  6073     06E8  1303               	bcf	3,6	;RP1=0, select bank1
  6074     06E9  00B0               	movwf	(??_rand^(0+128)+2)
  6075     06EA  1283               	bcf	3,5	;RP0=0, select bank0
  6076     06EB  1303               	bcf	3,6	;RP1=0, select bank0
  6077     06EC  0853               	movf	_randx+3,w
  6078     06ED  1683               	bsf	3,5	;RP0=1, select bank1
  6079     06EE  1303               	bcf	3,6	;RP1=0, select bank1
  6080     06EF  00B1               	movwf	(??_rand^(0+128)+3)
  6081     06F0  3010               	movlw	16
  6082     06F1  00B2               	movwf	(??_rand+4)^(0+128)
  6083     06F2                     u3445:
  6084     06F2  0D31               	rlf	(??_rand^(0+128)+3),w
  6085     06F3  0CB1               	rrf	(??_rand^(0+128)+3),f
  6086     06F4  0CB0               	rrf	(??_rand^(0+128)+2),f
  6087     06F5  0CAF               	rrf	(??_rand^(0+128)+1),f
  6088     06F6  0CAE               	rrf	??_rand^(0+128),f
  6089     06F7                     u3440:
  6090     06F7  0BB2               	decfsz	(??_rand+4)^(0+128),f
  6091     06F8  2EF2               	goto	u3445
  6092     06F9  30FF               	movlw	255
  6093     06FA  052E               	andwf	??_rand^(0+128),w
  6094     06FB  00AC               	movwf	?_rand^(0+128)
  6095     06FC  307F               	movlw	127
  6096     06FD  052F               	andwf	(??_rand+1)^(0+128),w
  6097     06FE  00AD               	movwf	(?_rand+1)^(0+128)
  6098     06FF                     l913:
  6099     06FF  0008               	return
  6100     0700                     __end_of_rand:
  6101                           
  6102                           	psect	text20
  6103     17B0                     __ptext20:	
  6104 ;; *************** function ___lmul *****************
  6105 ;; Defined at:
  6106 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  multiplier      4    0[BANK1 ] unsigned long 
  6109 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  product         4    8[BANK1 ] unsigned long 
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  4    0[BANK1 ] unsigned long 
  6114 ;; Registers used:
  6115 ;;		wreg, status,2, status,0
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6121 ;;      Params:         0       0       8       0       0
  6122 ;;      Locals:         0       0       4       0       0
  6123 ;;      Temps:          0       1       0       0       0
  6124 ;;      Totals:         0       1      12       0       0
  6125 ;;Total ram usage:       13 bytes
  6126 ;; Hardware stack levels used: 1
  6127 ;; Hardware stack levels required when called: 4
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_ConvertToString
  6132 ;;		_rand
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136     17B0                     ___lmul:	
  6137                           ;psect for function ___lmul
  6138                           
  6139     17B0                     l3073:	
  6140                           ;incstack = 0
  6141                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6142                           
  6143     17B0  3000               	movlw	0
  6144     17B1  1683               	bsf	3,5	;RP0=1, select bank1
  6145     17B2  1303               	bcf	3,6	;RP1=0, select bank1
  6146     17B3  00AB               	movwf	(___lmul@product+3)^(0+128)
  6147     17B4  3000               	movlw	0
  6148     17B5  00AA               	movwf	(___lmul@product+2)^(0+128)
  6149     17B6  3000               	movlw	0
  6150     17B7  00A9               	movwf	(___lmul@product+1)^(0+128)
  6151     17B8  3000               	movlw	0
  6152     17B9  00A8               	movwf	___lmul@product^(0+128)
  6153     17BA                     l3075:
  6154     17BA  1C20               	btfss	___lmul@multiplier^(0+128),0
  6155     17BB  2FBD               	goto	u2991
  6156     17BC  2FBE               	goto	u2990
  6157     17BD                     u2991:
  6158     17BD  2FD5               	goto	l3079
  6159     17BE                     u2990:
  6160     17BE                     l3077:
  6161     17BE  0824               	movf	___lmul@multiplicand^(0+128),w
  6162     17BF  07A8               	addwf	___lmul@product^(0+128),f
  6163     17C0  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  6164     17C1  1103               	clrz
  6165     17C2  1803               	skipnc
  6166     17C3  3E01               	addlw	1
  6167     17C4  1903               	skipnz
  6168     17C5  2FC7               	goto	u3001
  6169     17C6  07A9               	addwf	(___lmul@product+1)^(0+128),f
  6170     17C7                     u3001:
  6171     17C7  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  6172     17C8  1103               	clrz
  6173     17C9  1803               	skipnc
  6174     17CA  3E01               	addlw	1
  6175     17CB  1903               	skipnz
  6176     17CC  2FCE               	goto	u3002
  6177     17CD  07AA               	addwf	(___lmul@product+2)^(0+128),f
  6178     17CE                     u3002:
  6179     17CE  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  6180     17CF  1103               	clrz
  6181     17D0  1803               	skipnc
  6182     17D1  3E01               	addlw	1
  6183     17D2  1903               	skipnz
  6184     17D3  2FD5               	goto	u3003
  6185     17D4  07AB               	addwf	(___lmul@product+3)^(0+128),f
  6186     17D5                     u3003:
  6187     17D5                     l3079:
  6188     17D5  3001               	movlw	1
  6189     17D6  1283               	bcf	3,5	;RP0=0, select bank0
  6190     17D7  1303               	bcf	3,6	;RP1=0, select bank0
  6191     17D8  00BC               	movwf	??___lmul
  6192     17D9                     u3015:
  6193     17D9  1003               	clrc
  6194     17DA  1683               	bsf	3,5	;RP0=1, select bank1
  6195     17DB  1303               	bcf	3,6	;RP1=0, select bank1
  6196     17DC  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  6197     17DD  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  6198     17DE  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  6199     17DF  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  6200     17E0  1283               	bcf	3,5	;RP0=0, select bank0
  6201     17E1  1303               	bcf	3,6	;RP1=0, select bank0
  6202     17E2  0BBC               	decfsz	??___lmul,f
  6203     17E3  2FD9               	goto	u3015
  6204     17E4                     l3081:
  6205     17E4  3001               	movlw	1
  6206     17E5                     u3025:
  6207     17E5  1003               	clrc
  6208     17E6  1683               	bsf	3,5	;RP0=1, select bank1
  6209     17E7  1303               	bcf	3,6	;RP1=0, select bank1
  6210     17E8  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  6211     17E9  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  6212     17EA  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  6213     17EB  0CA0               	rrf	___lmul@multiplier^(0+128),f
  6214     17EC  3EFF               	addlw	-1
  6215     17ED  1D03               	skipz
  6216     17EE  2FE5               	goto	u3025
  6217     17EF  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  6218     17F0  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  6219     17F1  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  6220     17F2  0420               	iorwf	___lmul@multiplier^(0+128),w
  6221     17F3  1D03               	skipz
  6222     17F4  2FF6               	goto	u3031
  6223     17F5  2FF7               	goto	u3030
  6224     17F6                     u3031:
  6225     17F6  2FBA               	goto	l3075
  6226     17F7                     u3030:
  6227     17F7                     l3083:
  6228     17F7  082B               	movf	(___lmul@product+3)^(0+128),w
  6229     17F8  00A3               	movwf	(?___lmul+3)^(0+128)
  6230     17F9  082A               	movf	(___lmul@product+2)^(0+128),w
  6231     17FA  00A2               	movwf	(?___lmul+2)^(0+128)
  6232     17FB  0829               	movf	(___lmul@product+1)^(0+128),w
  6233     17FC  00A1               	movwf	(?___lmul+1)^(0+128)
  6234     17FD  0828               	movf	___lmul@product^(0+128),w
  6235     17FE  00A0               	movwf	?___lmul^(0+128)
  6236     17FF                     l471:
  6237     17FF  0008               	return
  6238     1800                     __end_of___lmul:
  6239                           
  6240                           	psect	text21
  6241     159C                     __ptext21:	
  6242 ;; *************** function ___wmul *****************
  6243 ;; Defined at:
  6244 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  multiplier      2   25[BANK1 ] unsigned int 
  6247 ;;  multiplicand    2   27[BANK1 ] unsigned int 
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;  product         2   29[BANK1 ] unsigned int 
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  2   25[BANK1 ] unsigned int 
  6252 ;; Registers used:
  6253 ;;		wreg, status,2, status,0
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6259 ;;      Params:         0       0       4       0       0
  6260 ;;      Locals:         0       0       2       0       0
  6261 ;;      Temps:          0       0       0       0       0
  6262 ;;      Totals:         0       0       6       0       0
  6263 ;;Total ram usage:        6 bytes
  6264 ;; Hardware stack levels used: 1
  6265 ;; Hardware stack levels required when called: 4
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_pow
  6270 ;;		_read_NumPad
  6271 ;;		_UART_TxString
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275     159C                     ___wmul:	
  6276                           ;psect for function ___wmul
  6277                           
  6278     159C                     l3015:	
  6279                           ;incstack = 0
  6280                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6281                           
  6282     159C  1683               	bsf	3,5	;RP0=1, select bank1
  6283     159D  1303               	bcf	3,6	;RP1=0, select bank1
  6284     159E  01BD               	clrf	___wmul@product^(0+128)
  6285     159F  01BE               	clrf	(___wmul@product+1)^(0+128)
  6286     15A0                     l3017:
  6287     15A0  1C39               	btfss	___wmul@multiplier^(0+128),0
  6288     15A1  2DA3               	goto	u2921
  6289     15A2  2DA4               	goto	u2920
  6290     15A3                     u2921:
  6291     15A3  2DAA               	goto	l457
  6292     15A4                     u2920:
  6293     15A4                     l3019:
  6294     15A4  083B               	movf	___wmul@multiplicand^(0+128),w
  6295     15A5  07BD               	addwf	___wmul@product^(0+128),f
  6296     15A6  1803               	skipnc
  6297     15A7  0ABE               	incf	(___wmul@product+1)^(0+128),f
  6298     15A8  083C               	movf	(___wmul@multiplicand+1)^(0+128),w
  6299     15A9  07BE               	addwf	(___wmul@product+1)^(0+128),f
  6300     15AA                     l457:
  6301     15AA  3001               	movlw	1
  6302     15AB                     u2935:
  6303     15AB  1003               	clrc
  6304     15AC  0DBB               	rlf	___wmul@multiplicand^(0+128),f
  6305     15AD  0DBC               	rlf	(___wmul@multiplicand+1)^(0+128),f
  6306     15AE  3EFF               	addlw	-1
  6307     15AF  1D03               	skipz
  6308     15B0  2DAB               	goto	u2935
  6309     15B1                     l3021:
  6310     15B1  3001               	movlw	1
  6311     15B2                     u2945:
  6312     15B2  1003               	clrc
  6313     15B3  0CBA               	rrf	(___wmul@multiplier+1)^(0+128),f
  6314     15B4  0CB9               	rrf	___wmul@multiplier^(0+128),f
  6315     15B5  3EFF               	addlw	-1
  6316     15B6  1D03               	skipz
  6317     15B7  2DB2               	goto	u2945
  6318     15B8                     l3023:
  6319     15B8  0839               	movf	___wmul@multiplier^(0+128),w
  6320     15B9  043A               	iorwf	(___wmul@multiplier+1)^(0+128),w
  6321     15BA  1D03               	btfss	3,2
  6322     15BB  2DBD               	goto	u2951
  6323     15BC  2DBE               	goto	u2950
  6324     15BD                     u2951:
  6325     15BD  2DA0               	goto	l3017
  6326     15BE                     u2950:
  6327     15BE                     l3025:
  6328     15BE  083E               	movf	(___wmul@product+1)^(0+128),w
  6329     15BF  00BA               	movwf	(?___wmul+1)^(0+128)
  6330     15C0  083D               	movf	___wmul@product^(0+128),w
  6331     15C1  00B9               	movwf	?___wmul^(0+128)
  6332     15C2                     l459:
  6333     15C2  0008               	return
  6334     15C3                     __end_of___wmul:
  6335                           
  6336                           	psect	text22
  6337     094B                     __ptext22:	
  6338 ;; *************** function ___awmod *****************
  6339 ;; Defined at:
  6340 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  divisor         2   19[BANK1 ] int 
  6343 ;;  dividend        2   21[BANK1 ] int 
  6344 ;; Auto vars:     Size  Location     Type
  6345 ;;  sign            1   24[BANK1 ] unsigned char 
  6346 ;;  counter         1   23[BANK1 ] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  2   19[BANK1 ] int 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6356 ;;      Params:         0       0       4       0       0
  6357 ;;      Locals:         0       0       2       0       0
  6358 ;;      Temps:          0       1       0       0       0
  6359 ;;      Totals:         0       1       6       0       0
  6360 ;;Total ram usage:        7 bytes
  6361 ;; Hardware stack levels used: 1
  6362 ;; Hardware stack levels required when called: 4
  6363 ;; This function calls:
  6364 ;;		Nothing
  6365 ;; This function is called by:
  6366 ;;		_read_NumPad
  6367 ;;		_UART_TxString
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371     094B                     ___awmod:	
  6372                           ;psect for function ___awmod
  6373                           
  6374     094B                     l3359:	
  6375                           ;incstack = 0
  6376                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6377                           
  6378     094B  1683               	bsf	3,5	;RP0=1, select bank1
  6379     094C  1303               	bcf	3,6	;RP1=0, select bank1
  6380     094D  01B8               	clrf	___awmod@sign^(0+128)
  6381     094E                     l3361:
  6382     094E  1FB6               	btfss	(___awmod@dividend+1)^(0+128),7
  6383     094F  2951               	goto	u3461
  6384     0950  2952               	goto	u3460
  6385     0951                     u3461:
  6386     0951  2959               	goto	l3367
  6387     0952                     u3460:
  6388     0952                     l3363:
  6389     0952  09B5               	comf	___awmod@dividend^(0+128),f
  6390     0953  09B6               	comf	(___awmod@dividend+1)^(0+128),f
  6391     0954  0AB5               	incf	___awmod@dividend^(0+128),f
  6392     0955  1903               	skipnz
  6393     0956  0AB6               	incf	(___awmod@dividend+1)^(0+128),f
  6394     0957                     l3365:
  6395     0957  01B8               	clrf	___awmod@sign^(0+128)
  6396     0958  0AB8               	incf	___awmod@sign^(0+128),f
  6397     0959                     l3367:
  6398     0959  1FB4               	btfss	(___awmod@divisor+1)^(0+128),7
  6399     095A  295C               	goto	u3471
  6400     095B  295D               	goto	u3470
  6401     095C                     u3471:
  6402     095C  2962               	goto	l3371
  6403     095D                     u3470:
  6404     095D                     l3369:
  6405     095D  09B3               	comf	___awmod@divisor^(0+128),f
  6406     095E  09B4               	comf	(___awmod@divisor+1)^(0+128),f
  6407     095F  0AB3               	incf	___awmod@divisor^(0+128),f
  6408     0960  1903               	skipnz
  6409     0961  0AB4               	incf	(___awmod@divisor+1)^(0+128),f
  6410     0962                     l3371:
  6411     0962  0833               	movf	___awmod@divisor^(0+128),w
  6412     0963  0434               	iorwf	(___awmod@divisor+1)^(0+128),w
  6413     0964  1903               	btfsc	3,2
  6414     0965  2967               	goto	u3481
  6415     0966  2968               	goto	u3480
  6416     0967                     u3481:
  6417     0967  299B               	goto	l3389
  6418     0968                     u3480:
  6419     0968                     l3373:
  6420     0968  01B7               	clrf	___awmod@counter^(0+128)
  6421     0969  0AB7               	incf	___awmod@counter^(0+128),f
  6422     096A  297A               	goto	l3379
  6423     096B                     l3375:
  6424     096B  3001               	movlw	1
  6425     096C                     u3495:
  6426     096C  1003               	clrc
  6427     096D  0DB3               	rlf	___awmod@divisor^(0+128),f
  6428     096E  0DB4               	rlf	(___awmod@divisor+1)^(0+128),f
  6429     096F  3EFF               	addlw	-1
  6430     0970  1D03               	skipz
  6431     0971  296C               	goto	u3495
  6432     0972                     l3377:
  6433     0972  3001               	movlw	1
  6434     0973  1283               	bcf	3,5	;RP0=0, select bank0
  6435     0974  1303               	bcf	3,6	;RP1=0, select bank0
  6436     0975  00BD               	movwf	??___awmod
  6437     0976  083D               	movf	??___awmod,w
  6438     0977  1683               	bsf	3,5	;RP0=1, select bank1
  6439     0978  1303               	bcf	3,6	;RP1=0, select bank1
  6440     0979  07B7               	addwf	___awmod@counter^(0+128),f
  6441     097A                     l3379:
  6442     097A  1FB4               	btfss	(___awmod@divisor+1)^(0+128),7
  6443     097B  297D               	goto	u3501
  6444     097C  297E               	goto	u3500
  6445     097D                     u3501:
  6446     097D  296B               	goto	l3375
  6447     097E                     u3500:
  6448     097E                     l3381:
  6449     097E  0834               	movf	(___awmod@divisor+1)^(0+128),w
  6450     097F  0236               	subwf	(___awmod@dividend+1)^(0+128),w
  6451     0980  1D03               	skipz
  6452     0981  2984               	goto	u3515
  6453     0982  0833               	movf	___awmod@divisor^(0+128),w
  6454     0983  0235               	subwf	___awmod@dividend^(0+128),w
  6455     0984                     u3515:
  6456     0984  1C03               	skipc
  6457     0985  2987               	goto	u3511
  6458     0986  2988               	goto	u3510
  6459     0987                     u3511:
  6460     0987  298E               	goto	l3385
  6461     0988                     u3510:
  6462     0988                     l3383:
  6463     0988  0833               	movf	___awmod@divisor^(0+128),w
  6464     0989  02B5               	subwf	___awmod@dividend^(0+128),f
  6465     098A  0834               	movf	(___awmod@divisor+1)^(0+128),w
  6466     098B  1C03               	skipc
  6467     098C  03B6               	decf	(___awmod@dividend+1)^(0+128),f
  6468     098D  02B6               	subwf	(___awmod@dividend+1)^(0+128),f
  6469     098E                     l3385:
  6470     098E  3001               	movlw	1
  6471     098F                     u3525:
  6472     098F  1003               	clrc
  6473     0990  0CB4               	rrf	(___awmod@divisor+1)^(0+128),f
  6474     0991  0CB3               	rrf	___awmod@divisor^(0+128),f
  6475     0992  3EFF               	addlw	-1
  6476     0993  1D03               	skipz
  6477     0994  298F               	goto	u3525
  6478     0995                     l3387:
  6479     0995  3001               	movlw	1
  6480     0996  02B7               	subwf	___awmod@counter^(0+128),f
  6481     0997  1D03               	btfss	3,2
  6482     0998  299A               	goto	u3531
  6483     0999  299B               	goto	u3530
  6484     099A                     u3531:
  6485     099A  297E               	goto	l3381
  6486     099B                     u3530:
  6487     099B                     l3389:
  6488     099B  0838               	movf	___awmod@sign^(0+128),w
  6489     099C  1903               	btfsc	3,2
  6490     099D  299F               	goto	u3541
  6491     099E  29A0               	goto	u3540
  6492     099F                     u3541:
  6493     099F  29A5               	goto	l3393
  6494     09A0                     u3540:
  6495     09A0                     l3391:
  6496     09A0  09B5               	comf	___awmod@dividend^(0+128),f
  6497     09A1  09B6               	comf	(___awmod@dividend+1)^(0+128),f
  6498     09A2  0AB5               	incf	___awmod@dividend^(0+128),f
  6499     09A3  1903               	skipnz
  6500     09A4  0AB6               	incf	(___awmod@dividend+1)^(0+128),f
  6501     09A5                     l3393:
  6502     09A5  0836               	movf	(___awmod@dividend+1)^(0+128),w
  6503     09A6  00B4               	movwf	(?___awmod+1)^(0+128)
  6504     09A7  0835               	movf	___awmod@dividend^(0+128),w
  6505     09A8  00B3               	movwf	?___awmod^(0+128)
  6506     09A9                     l623:
  6507     09A9  0008               	return
  6508     09AA                     __end_of___awmod:
  6509                           
  6510                           	psect	text23
  6511     153D                     __ptext23:	
  6512 ;; *************** function _UART_TxChar *****************
  6513 ;; Defined at:
  6514 ;;		line 808 in file "main.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  ch              1    wreg     unsigned char 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  ch              1   29[BANK0 ] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      void 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6528 ;;      Params:         0       0       0       0       0
  6529 ;;      Locals:         0       1       0       0       0
  6530 ;;      Temps:          0       1       0       0       0
  6531 ;;      Totals:         0       2       0       0       0
  6532 ;;Total ram usage:        2 bytes
  6533 ;; Hardware stack levels used: 1
  6534 ;; Hardware stack levels required when called: 4
  6535 ;; This function calls:
  6536 ;;		Nothing
  6537 ;; This function is called by:
  6538 ;;		_UART_TxString
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542     153D                     _UART_TxChar:	
  6543                           ;psect for function _UART_TxChar
  6544                           
  6545                           
  6546                           ;incstack = 0
  6547                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  6548                           ;UART_TxChar@ch stored from wreg
  6549     153D  1283               	bcf	3,5	;RP0=0, select bank0
  6550     153E  1303               	bcf	3,6	;RP1=0, select bank0
  6551     153F  00BD               	movwf	UART_TxChar@ch
  6552     1540                     l3353:
  6553     1540                     l312:	
  6554                           ;main.c: 808: void UART_TxChar(char ch);main.c: 809: {;main.c: 811:     while(!(PIR1 & 0
      +                          x10));
  6555                           
  6556     1540  1E0C               	btfss	12,4	;volatile
  6557     1541  2D43               	goto	u3451
  6558     1542  2D44               	goto	u3450
  6559     1543                     u3451:
  6560     1543  2D40               	goto	l312
  6561     1544                     u3450:
  6562     1544                     l3355:
  6563                           
  6564                           ;main.c: 813:     PIR1 &= ~0x10;
  6565     1544  30EF               	movlw	239
  6566     1545  00BC               	movwf	??_UART_TxChar
  6567     1546  083C               	movf	??_UART_TxChar,w
  6568     1547  058C               	andwf	12,f	;volatile
  6569     1548                     l3357:
  6570                           
  6571                           ;main.c: 815:     TXREG = ch;
  6572     1548  083D               	movf	UART_TxChar@ch,w
  6573     1549  0099               	movwf	25	;volatile
  6574     154A                     l315:
  6575     154A  0008               	return
  6576     154B                     __end_of_UART_TxChar:
  6577                           
  6578                           	psect	text24
  6579     0E79                     __ptext24:	
  6580 ;; *************** function _SplitPacket *****************
  6581 ;; Defined at:
  6582 ;;		line 533 in file "main.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  pkt             1    wreg     PTR unsigned char 
  6585 ;;		 -> dato(50), 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  pkt             1   22[BANK1 ] PTR unsigned char 
  6588 ;;		 -> dato(50), 
  6589 ;;  i               2   23[BANK1 ] int 
  6590 ;;  part            5   13[BANK1 ] unsigned char [5]
  6591 ;;  i_part          2   20[BANK1 ] int 
  6592 ;;  section         2   18[BANK1 ] int 
  6593 ;;  len             2   11[BANK1 ] int 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;                  1    wreg      void 
  6596 ;; Registers used:
  6597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6603 ;;      Params:         0       0       0       0       0
  6604 ;;      Locals:         0       0      14       0       0
  6605 ;;      Temps:          0       0       3       0       0
  6606 ;;      Totals:         0       0      17       0       0
  6607 ;;Total ram usage:       17 bytes
  6608 ;; Hardware stack levels used: 1
  6609 ;; Hardware stack levels required when called: 5
  6610 ;; This function calls:
  6611 ;;		_Length
  6612 ;;		_strcopy
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618     0E79                     _SplitPacket:	
  6619                           ;psect for function _SplitPacket
  6620                           
  6621                           
  6622                           ;incstack = 0
  6623                           ; Regs used in _SplitPacket: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6624                           ;SplitPacket@pkt stored from wreg
  6625     0E79  1683               	bsf	3,5	;RP0=1, select bank1
  6626     0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  6627     0E7B  00B6               	movwf	SplitPacket@pkt^(0+128)
  6628     0E7C                     l3571:
  6629                           
  6630                           ;main.c: 533: void SplitPacket(char* pkt);main.c: 534: {;main.c: 536:     char part[5];;
      +                          main.c: 539:     int i_part = 0, section = 0, len = Length(pkt);
  6631     0E7C  01B4               	clrf	SplitPacket@i_part^(0+128)
  6632     0E7D  01B5               	clrf	(SplitPacket@i_part+1)^(0+128)
  6633     0E7E  01B2               	clrf	SplitPacket@section^(0+128)
  6634     0E7F  01B3               	clrf	(SplitPacket@section+1)^(0+128)
  6635     0E80                     l3573:
  6636     0E80  0836               	movf	SplitPacket@pkt^(0+128),w
  6637     0E81  1283               	bcf	3,5	;RP0=0, select bank0
  6638     0E82  1303               	bcf	3,6	;RP1=0, select bank0
  6639     0E83  00BC               	movwf	Length@str
  6640     0E84  3001               	movlw	1
  6641     0E85  00BD               	movwf	Length@str+1
  6642     0E86  160A  118A  25F0  120A  158A  	fcall	_Length
  6643     0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  6644     0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  6645     0E8D  083D               	movf	?_Length+1,w
  6646     0E8E  1683               	bsf	3,5	;RP0=1, select bank1
  6647     0E8F  1303               	bcf	3,6	;RP1=0, select bank1
  6648     0E90  00AC               	movwf	(SplitPacket@len+1)^(0+128)
  6649     0E91  1283               	bcf	3,5	;RP0=0, select bank0
  6650     0E92  1303               	bcf	3,6	;RP1=0, select bank0
  6651     0E93  083C               	movf	?_Length,w
  6652     0E94  1683               	bsf	3,5	;RP0=1, select bank1
  6653     0E95  1303               	bcf	3,6	;RP1=0, select bank1
  6654     0E96  00AB               	movwf	SplitPacket@len^(0+128)
  6655     0E97                     l3575:
  6656                           
  6657                           ;main.c: 542:     for(int i = 0; i < len + 1; i++)
  6658     0E97  01B7               	clrf	SplitPacket@i^(0+128)
  6659     0E98  01B8               	clrf	(SplitPacket@i+1)^(0+128)
  6660     0E99  2F0F               	goto	l3605
  6661     0E9A                     l3577:
  6662                           
  6663                           ;main.c: 543:     {;main.c: 545:         if(pkt[i] != '/' && pkt[i] != '\0')
  6664     0E9A  1683               	bsf	3,5	;RP0=1, select bank1
  6665     0E9B  1303               	bcf	3,6	;RP1=0, select bank1
  6666     0E9C  0837               	movf	SplitPacket@i^(0+128),w
  6667     0E9D  0736               	addwf	SplitPacket@pkt^(0+128),w
  6668     0E9E  00A8               	movwf	??_SplitPacket^(0+128)
  6669     0E9F  0828               	movf	??_SplitPacket^(0+128),w
  6670     0EA0  0084               	movwf	4
  6671     0EA1  302F               	movlw	47
  6672     0EA2  1783               	bsf	3,7	;select IRP bank2
  6673     0EA3  0600               	xorwf	0,w
  6674     0EA4  1903               	btfsc	3,2
  6675     0EA5  2EA7               	goto	u3851
  6676     0EA6  2EA8               	goto	u3850
  6677     0EA7                     u3851:
  6678     0EA7  2EEC               	goto	l3597
  6679     0EA8                     u3850:
  6680     0EA8                     l3579:
  6681     0EA8  0837               	movf	SplitPacket@i^(0+128),w
  6682     0EA9  0736               	addwf	SplitPacket@pkt^(0+128),w
  6683     0EAA  00A8               	movwf	??_SplitPacket^(0+128)
  6684     0EAB  0828               	movf	??_SplitPacket^(0+128),w
  6685     0EAC  0084               	movwf	4
  6686     0EAD  0800               	movf	0,w
  6687     0EAE  1903               	btfsc	3,2
  6688     0EAF  2EB1               	goto	u3861
  6689     0EB0  2EB2               	goto	u3860
  6690     0EB1                     u3861:
  6691     0EB1  2EEC               	goto	l3597
  6692     0EB2                     u3860:
  6693     0EB2                     l3581:
  6694                           
  6695                           ;main.c: 546:         {;main.c: 548:             part[i_part] = pkt[i];
  6696     0EB2  0837               	movf	SplitPacket@i^(0+128),w
  6697     0EB3  0736               	addwf	SplitPacket@pkt^(0+128),w
  6698     0EB4  00A8               	movwf	??_SplitPacket^(0+128)
  6699     0EB5  0828               	movf	??_SplitPacket^(0+128),w
  6700     0EB6  0084               	movwf	4
  6701     0EB7  0800               	movf	0,w
  6702     0EB8  00A9               	movwf	(??_SplitPacket+1)^(0+128)
  6703     0EB9  0834               	movf	SplitPacket@i_part^(0+128),w
  6704     0EBA  3EAD               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6705     0EBB  0084               	movwf	4
  6706     0EBC  0829               	movf	(??_SplitPacket+1)^(0+128),w
  6707     0EBD  1383               	bcf	3,7	;select IRP bank1
  6708     0EBE  0080               	movwf	0
  6709     0EBF                     l3583:
  6710                           
  6711                           ;main.c: 549:             i_part++;
  6712     0EBF  3001               	movlw	1
  6713     0EC0  07B4               	addwf	SplitPacket@i_part^(0+128),f
  6714     0EC1  1803               	skipnc
  6715     0EC2  0AB5               	incf	(SplitPacket@i_part+1)^(0+128),f
  6716     0EC3  3000               	movlw	0
  6717     0EC4  07B5               	addwf	(SplitPacket@i_part+1)^(0+128),f
  6718     0EC5                     l3585:
  6719                           
  6720                           ;main.c: 550:             part[i_part] = '\0';
  6721     0EC5  0834               	movf	SplitPacket@i_part^(0+128),w
  6722     0EC6  3EAD               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6723     0EC7  0084               	movwf	4
  6724     0EC8  0180               	clrf	0
  6725                           
  6726                           ;main.c: 551:         }
  6727     0EC9  2F09               	goto	l3603
  6728     0ECA                     l3587:
  6729                           
  6730                           ;main.c: 559:                     source = part[0];
  6731     0ECA  082D               	movf	SplitPacket@part^(0+128),w
  6732     0ECB  1683               	bsf	3,5	;RP0=1, select bank3
  6733     0ECC  1703               	bsf	3,6	;RP1=1, select bank3
  6734     0ECD  00A0               	movwf	_source^(0+384)
  6735                           
  6736                           ;main.c: 560:                     break;
  6737     0ECE  2EFF               	goto	l3599
  6738     0ECF                     l3589:
  6739                           
  6740                           ;main.c: 562:                     strcopy(id_dest, part);
  6741     0ECF  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  6742     0ED0  00A0               	movwf	strcopy@dest^(0+128)
  6743     0ED1  3001               	movlw	1
  6744     0ED2  00A1               	movwf	(strcopy@dest+1)^(0+128)
  6745     0ED3  30AD               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6746     0ED4  00A2               	movwf	strcopy@source^(0+128)
  6747     0ED5  120A  158A  20EC  120A  158A  	fcall	_strcopy
  6748                           
  6749                           ;main.c: 563:                     break;
  6750     0EDA  2EFF               	goto	l3599
  6751     0EDB                     l3591:
  6752                           
  6753                           ;main.c: 565:                     type = part[0];
  6754     0EDB  082D               	movf	SplitPacket@part^(0+128),w
  6755     0EDC  1683               	bsf	3,5	;RP0=1, select bank3
  6756     0EDD  1703               	bsf	3,6	;RP1=1, select bank3
  6757     0EDE  009F               	movwf	_type^(0+384)
  6758                           
  6759                           ;main.c: 566:                     break;
  6760     0EDF  2EFF               	goto	l3599
  6761     0EE0                     l3593:
  6762                           
  6763                           ;main.c: 568:                     strcopy(datoSeriale, part);
  6764     0EE0  303F               	movlw	(low (_datoSeriale| 0))& (0+255)
  6765     0EE1  00A0               	movwf	strcopy@dest^(0+128)
  6766     0EE2  3000               	movlw	0
  6767     0EE3  00A1               	movwf	(strcopy@dest+1)^(0+128)
  6768     0EE4  30AD               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6769     0EE5  00A2               	movwf	strcopy@source^(0+128)
  6770     0EE6  120A  158A  20EC  120A  158A  	fcall	_strcopy
  6771                           
  6772                           ;main.c: 569:                     break;
  6773     0EEB  2EFF               	goto	l3599
  6774     0EEC                     l3597:
  6775                           
  6776                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6777                           ; Switch size 1, requested type "simple"
  6778                           ; Number of cases is 1, Range of values is 0 to 0
  6779                           ; switch strategies available:
  6780                           ; Name         Instructions Cycles
  6781                           ; simple_byte            4     3 (average)
  6782                           ; direct_byte           11     8 (fixed)
  6783                           ; jumptable            260     6 (fixed)
  6784                           ;	Chosen strategy is simple_byte
  6785     0EEC  0833               	movf	(SplitPacket@section+1)^(0+128),w
  6786     0EED  3A00               	xorlw	0	; case 0
  6787     0EEE  1903               	skipnz
  6788     0EEF  2EF1               	goto	l3907
  6789     0EF0  2EFF               	goto	l3599
  6790     0EF1                     l3907:
  6791                           
  6792                           ; Switch size 1, requested type "simple"
  6793                           ; Number of cases is 4, Range of values is 0 to 3
  6794                           ; switch strategies available:
  6795                           ; Name         Instructions Cycles
  6796                           ; simple_byte           13     7 (average)
  6797                           ; direct_byte           20     8 (fixed)
  6798                           ; jumptable            260     6 (fixed)
  6799                           ;	Chosen strategy is simple_byte
  6800     0EF1  0832               	movf	SplitPacket@section^(0+128),w
  6801     0EF2  3A00               	xorlw	0	; case 0
  6802     0EF3  1903               	skipnz
  6803     0EF4  2ECA               	goto	l3587
  6804     0EF5  3A01               	xorlw	1	; case 1
  6805     0EF6  1903               	skipnz
  6806     0EF7  2ECF               	goto	l3589
  6807     0EF8  3A03               	xorlw	3	; case 2
  6808     0EF9  1903               	skipnz
  6809     0EFA  2EDB               	goto	l3591
  6810     0EFB  3A01               	xorlw	1	; case 3
  6811     0EFC  1903               	skipnz
  6812     0EFD  2EE0               	goto	l3593
  6813     0EFE  2EFF               	goto	l3599
  6814     0EFF                     l3599:
  6815                           
  6816                           ;main.c: 574:             section++;
  6817     0EFF  3001               	movlw	1
  6818     0F00  1683               	bsf	3,5	;RP0=1, select bank1
  6819     0F01  1303               	bcf	3,6	;RP1=0, select bank1
  6820     0F02  07B2               	addwf	SplitPacket@section^(0+128),f
  6821     0F03  1803               	skipnc
  6822     0F04  0AB3               	incf	(SplitPacket@section+1)^(0+128),f
  6823     0F05  3000               	movlw	0
  6824     0F06  07B3               	addwf	(SplitPacket@section+1)^(0+128),f
  6825     0F07                     l3601:
  6826                           
  6827                           ;main.c: 576:             i_part = 0;
  6828     0F07  01B4               	clrf	SplitPacket@i_part^(0+128)
  6829     0F08  01B5               	clrf	(SplitPacket@i_part+1)^(0+128)
  6830     0F09                     l3603:
  6831                           
  6832                           ;main.c: 578:     }
  6833     0F09  3001               	movlw	1
  6834     0F0A  07B7               	addwf	SplitPacket@i^(0+128),f
  6835     0F0B  1803               	skipnc
  6836     0F0C  0AB8               	incf	(SplitPacket@i+1)^(0+128),f
  6837     0F0D  3000               	movlw	0
  6838     0F0E  07B8               	addwf	(SplitPacket@i+1)^(0+128),f
  6839     0F0F                     l3605:
  6840     0F0F  082B               	movf	SplitPacket@len^(0+128),w
  6841     0F10  3E01               	addlw	1
  6842     0F11  00A8               	movwf	??_SplitPacket^(0+128)
  6843     0F12  082C               	movf	(SplitPacket@len+1)^(0+128),w
  6844     0F13  1803               	skipnc
  6845     0F14  3E01               	addlw	1
  6846     0F15  3E00               	addlw	0
  6847     0F16  00A9               	movwf	(??_SplitPacket+1)^(0+128)
  6848     0F17  0838               	movf	(SplitPacket@i+1)^(0+128),w
  6849     0F18  3A80               	xorlw	128
  6850     0F19  00AA               	movwf	(??_SplitPacket+2)^(0+128)
  6851     0F1A  0829               	movf	(??_SplitPacket+1)^(0+128),w
  6852     0F1B  3A80               	xorlw	128
  6853     0F1C  022A               	subwf	(??_SplitPacket+2)^(0+128),w
  6854     0F1D  1D03               	skipz
  6855     0F1E  2F21               	goto	u3875
  6856     0F1F  0828               	movf	??_SplitPacket^(0+128),w
  6857     0F20  0237               	subwf	SplitPacket@i^(0+128),w
  6858     0F21                     u3875:
  6859     0F21  1C03               	skipc
  6860     0F22  2F24               	goto	u3871
  6861     0F23  2F25               	goto	u3870
  6862     0F24                     u3871:
  6863     0F24  2E9A               	goto	l3577
  6864     0F25                     u3870:
  6865     0F25                     l244:
  6866     0F25  0008               	return
  6867     0F26                     __end_of_SplitPacket:
  6868                           
  6869                           	psect	text25
  6870     08EC                     __ptext25:	
  6871 ;; *************** function _strcopy *****************
  6872 ;; Defined at:
  6873 ;;		line 581 in file "main.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  dest            2    0[BANK1 ] PTR unsigned char 
  6876 ;;		 -> datoSeriale(17), id_dest(4), 
  6877 ;;  source          1    2[BANK1 ] PTR unsigned char 
  6878 ;;		 -> SplitPacket@part(5), 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;  n               2   28[BANK0 ] int 
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      void 
  6883 ;; Registers used:
  6884 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6890 ;;      Params:         0       0       3       0       0
  6891 ;;      Locals:         0       2       0       0       0
  6892 ;;      Temps:          0       0       5       0       0
  6893 ;;      Totals:         0       2       8       0       0
  6894 ;;Total ram usage:       10 bytes
  6895 ;; Hardware stack levels used: 1
  6896 ;; Hardware stack levels required when called: 4
  6897 ;; This function calls:
  6898 ;;		Nothing
  6899 ;; This function is called by:
  6900 ;;		_SplitPacket
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904     08EC                     _strcopy:	
  6905                           ;psect for function _strcopy
  6906                           
  6907     08EC                     l3313:	
  6908                           ;incstack = 0
  6909                           ; Regs used in _strcopy: [wreg-fsr0h+status,2+status,0]
  6910                           
  6911                           
  6912                           ;main.c: 581: void strcopy(char* dest, char* source);main.c: 582: {;main.c: 583:     int
      +                           n = 0;
  6913     08EC  1283               	bcf	3,5	;RP0=0, select bank0
  6914     08ED  1303               	bcf	3,6	;RP1=0, select bank0
  6915     08EE  01BC               	clrf	strcopy@n
  6916     08EF  01BD               	clrf	strcopy@n+1
  6917                           
  6918                           ;main.c: 586:     while(source[n] != '\0')
  6919     08F0  2921               	goto	l3319
  6920     08F1                     l3315:
  6921                           
  6922                           ;main.c: 587:     {;main.c: 588:         dest[n] = source[n];
  6923     08F1  1283               	bcf	3,5	;RP0=0, select bank0
  6924     08F2  1303               	bcf	3,6	;RP1=0, select bank0
  6925     08F3  083C               	movf	strcopy@n,w
  6926     08F4  1683               	bsf	3,5	;RP0=1, select bank1
  6927     08F5  1303               	bcf	3,6	;RP1=0, select bank1
  6928     08F6  0722               	addwf	strcopy@source^(0+128),w
  6929     08F7  00A3               	movwf	??_strcopy^(0+128)
  6930     08F8  0823               	movf	??_strcopy^(0+128),w
  6931     08F9  0084               	movwf	4
  6932     08FA  0800               	movf	0,w
  6933     08FB  00A4               	movwf	(??_strcopy+1)^(0+128)
  6934     08FC  1283               	bcf	3,5	;RP0=0, select bank0
  6935     08FD  1303               	bcf	3,6	;RP1=0, select bank0
  6936     08FE  083C               	movf	strcopy@n,w
  6937     08FF  1683               	bsf	3,5	;RP0=1, select bank1
  6938     0900  1303               	bcf	3,6	;RP1=0, select bank1
  6939     0901  0720               	addwf	strcopy@dest^(0+128),w
  6940     0902  00A6               	movwf	(??_strcopy+3)^(0+128)
  6941     0903  0821               	movf	(strcopy@dest+1)^(0+128),w
  6942     0904  00A5               	movwf	(??_strcopy+2)^(0+128)
  6943     0905  1803               	skipnc
  6944     0906  0AA5               	incf	(??_strcopy+2)^(0+128),f
  6945     0907  1283               	bcf	3,5	;RP0=0, select bank0
  6946     0908  1303               	bcf	3,6	;RP1=0, select bank0
  6947     0909  1FBC               	btfss	strcopy@n,7
  6948     090A  290E               	goto	u3380
  6949     090B  1683               	bsf	3,5	;RP0=1, select bank1
  6950     090C  1303               	bcf	3,6	;RP1=0, select bank1
  6951     090D  03A5               	decf	(??_strcopy+2)^(0+128),f
  6952     090E                     u3380:
  6953     090E  1683               	bsf	3,5	;RP0=1, select bank1
  6954     090F  1303               	bcf	3,6	;RP1=0, select bank1
  6955     0910  0825               	movf	(??_strcopy+2)^(0+128),w
  6956     0911  00A7               	movwf	((??_strcopy+3)^(0+128)+1)
  6957     0912  0826               	movf	(??_strcopy+3)^(0+128),w
  6958     0913  0084               	movwf	4
  6959     0914  1783               	bsf	3,7
  6960     0915  1C27               	btfss	(??_strcopy+4)^(0+128),0
  6961     0916  1383               	bcf	3,7
  6962     0917  0824               	movf	(??_strcopy+1)^(0+128),w
  6963     0918  0080               	movwf	0
  6964     0919                     l3317:
  6965                           
  6966                           ;main.c: 589:         n++;
  6967     0919  3001               	movlw	1
  6968     091A  1283               	bcf	3,5	;RP0=0, select bank0
  6969     091B  1303               	bcf	3,6	;RP1=0, select bank0
  6970     091C  07BC               	addwf	strcopy@n,f
  6971     091D  1803               	skipnc
  6972     091E  0ABD               	incf	strcopy@n+1,f
  6973     091F  3000               	movlw	0
  6974     0920  07BD               	addwf	strcopy@n+1,f
  6975     0921                     l3319:
  6976                           
  6977                           ;main.c: 586:     while(source[n] != '\0')
  6978     0921  083C               	movf	strcopy@n,w
  6979     0922  1683               	bsf	3,5	;RP0=1, select bank1
  6980     0923  1303               	bcf	3,6	;RP1=0, select bank1
  6981     0924  0722               	addwf	strcopy@source^(0+128),w
  6982     0925  00A3               	movwf	??_strcopy^(0+128)
  6983     0926  0823               	movf	??_strcopy^(0+128),w
  6984     0927  0084               	movwf	4
  6985     0928  1383               	bcf	3,7	;select IRP bank0
  6986     0929  0800               	movf	0,w
  6987     092A  1D03               	btfss	3,2
  6988     092B  292D               	goto	u3391
  6989     092C  292E               	goto	u3390
  6990     092D                     u3391:
  6991     092D  28F1               	goto	l3315
  6992     092E                     u3390:
  6993     092E                     l3321:
  6994                           
  6995                           ;main.c: 593:     dest[n] = '\0';
  6996     092E  1283               	bcf	3,5	;RP0=0, select bank0
  6997     092F  1303               	bcf	3,6	;RP1=0, select bank0
  6998     0930  083C               	movf	strcopy@n,w
  6999     0931  1683               	bsf	3,5	;RP0=1, select bank1
  7000     0932  1303               	bcf	3,6	;RP1=0, select bank1
  7001     0933  0720               	addwf	strcopy@dest^(0+128),w
  7002     0934  00A4               	movwf	(??_strcopy+1)^(0+128)
  7003     0935  0821               	movf	(strcopy@dest+1)^(0+128),w
  7004     0936  00A3               	movwf	??_strcopy^(0+128)
  7005     0937  1803               	skipnc
  7006     0938  0AA3               	incf	??_strcopy^(0+128),f
  7007     0939  1283               	bcf	3,5	;RP0=0, select bank0
  7008     093A  1303               	bcf	3,6	;RP1=0, select bank0
  7009     093B  1FBC               	btfss	strcopy@n,7
  7010     093C  2940               	goto	u3400
  7011     093D  1683               	bsf	3,5	;RP0=1, select bank1
  7012     093E  1303               	bcf	3,6	;RP1=0, select bank1
  7013     093F  03A3               	decf	??_strcopy^(0+128),f
  7014     0940                     u3400:
  7015     0940  1683               	bsf	3,5	;RP0=1, select bank1
  7016     0941  1303               	bcf	3,6	;RP1=0, select bank1
  7017     0942  0823               	movf	??_strcopy^(0+128),w
  7018     0943  00A5               	movwf	((??_strcopy+1)^(0+128)+1)
  7019     0944  0824               	movf	(??_strcopy+1)^(0+128),w
  7020     0945  0084               	movwf	4
  7021     0946  1783               	bsf	3,7
  7022     0947  1C25               	btfss	(??_strcopy+2)^(0+128),0
  7023     0948  1383               	bcf	3,7
  7024     0949  0180               	clrf	0
  7025     094A                     l250:
  7026     094A  0008               	return
  7027     094B                     __end_of_strcopy:
  7028                           
  7029                           	psect	text26
  7030     1766                     __ptext26:	
  7031 ;; *************** function _ConcatToPacket *****************
  7032 ;; Defined at:
  7033 ;;		line 483 in file "main.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  pkt             1    wreg     PTR unsigned char 
  7036 ;;		 -> packet(15), 
  7037 ;;  str             2   17[BANK1 ] PTR unsigned char 
  7038 ;;		 -> STR_21(4), STR_17(4), STR_13(2), main@num_rand_s_231(16), 
  7039 ;;		 -> PIC_ID(4), 
  7040 ;;  delim           1   19[BANK1 ] unsigned char 
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;  pkt             1   23[BANK1 ] PTR unsigned char 
  7043 ;;		 -> packet(15), 
  7044 ;;  packet_lengt    2   21[BANK1 ] int 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7054 ;;      Params:         0       0       3       0       0
  7055 ;;      Locals:         0       0       3       0       0
  7056 ;;      Temps:          0       0       1       0       0
  7057 ;;      Totals:         0       0       7       0       0
  7058 ;;Total ram usage:        7 bytes
  7059 ;; Hardware stack levels used: 1
  7060 ;; Hardware stack levels required when called: 6
  7061 ;; This function calls:
  7062 ;;		_strcat
  7063 ;; This function is called by:
  7064 ;;		_main
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068     1766                     _ConcatToPacket:	
  7069                           ;psect for function _ConcatToPacket
  7070                           
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7074                           ;ConcatToPacket@pkt stored from wreg
  7075     1766  1683               	bsf	3,5	;RP0=1, select bank1
  7076     1767  1303               	bcf	3,6	;RP1=0, select bank1
  7077     1768  00B7               	movwf	ConcatToPacket@pkt^(0+128)
  7078     1769                     l3539:
  7079                           
  7080                           ;main.c: 483: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 484: {;main.
      +                          c: 486:     int packet_length = strcat(pkt, str);
  7081     1769  0831               	movf	ConcatToPacket@str^(0+128),w
  7082     176A  00A5               	movwf	strcat@source^(0+128)
  7083     176B  0832               	movf	(ConcatToPacket@str+1)^(0+128),w
  7084     176C  00A6               	movwf	(strcat@source+1)^(0+128)
  7085     176D  0837               	movf	ConcatToPacket@pkt^(0+128),w
  7086     176E  120A  158A  2447  160A  118A  	fcall	_strcat
  7087     1773  1683               	bsf	3,5	;RP0=1, select bank1
  7088     1774  1303               	bcf	3,6	;RP1=0, select bank1
  7089     1775  0826               	movf	(?_strcat+1)^(0+128),w
  7090     1776  00B6               	movwf	(ConcatToPacket@packet_length+1)^(0+128)
  7091     1777  0825               	movf	?_strcat^(0+128),w
  7092     1778  00B5               	movwf	ConcatToPacket@packet_length^(0+128)
  7093     1779                     l3541:
  7094                           
  7095                           ;main.c: 488:     if(delim != ' ')
  7096     1779  3020               	movlw	32
  7097     177A  0633               	xorwf	ConcatToPacket@delim^(0+128),w
  7098     177B  1903               	btfsc	3,2
  7099     177C  2F7E               	goto	u3821
  7100     177D  2F7F               	goto	u3820
  7101     177E                     u3821:
  7102     177E  2F8E               	goto	l3547
  7103     177F                     u3820:
  7104     177F                     l3543:
  7105                           
  7106                           ;main.c: 489:     {;main.c: 491:         pkt[packet_length] = delim;
  7107     177F  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7108     1780  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7109     1781  00B4               	movwf	??_ConcatToPacket^(0+128)
  7110     1782  0834               	movf	??_ConcatToPacket^(0+128),w
  7111     1783  0084               	movwf	4
  7112     1784  0833               	movf	ConcatToPacket@delim^(0+128),w
  7113     1785  1783               	bsf	3,7	;select IRP bank2
  7114     1786  0080               	movwf	0
  7115     1787                     l3545:
  7116                           
  7117                           ;main.c: 492:         packet_length++;
  7118     1787  3001               	movlw	1
  7119     1788  07B5               	addwf	ConcatToPacket@packet_length^(0+128),f
  7120     1789  1803               	skipnc
  7121     178A  0AB6               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  7122     178B  3000               	movlw	0
  7123     178C  07B6               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7124                           
  7125                           ;main.c: 493:     }
  7126     178D  2FA9               	goto	l3553
  7127     178E                     l3547:
  7128                           
  7129                           ;main.c: 496:     {;main.c: 498:         pkt[packet_length] = '\r';
  7130     178E  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7131     178F  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7132     1790  00B4               	movwf	??_ConcatToPacket^(0+128)
  7133     1791  0834               	movf	??_ConcatToPacket^(0+128),w
  7134     1792  0084               	movwf	4
  7135     1793  300D               	movlw	13
  7136     1794  1783               	bsf	3,7	;select IRP bank2
  7137     1795  0080               	movwf	0
  7138     1796                     l3549:
  7139                           
  7140                           ;main.c: 499:         packet_length++;
  7141     1796  3001               	movlw	1
  7142     1797  07B5               	addwf	ConcatToPacket@packet_length^(0+128),f
  7143     1798  1803               	skipnc
  7144     1799  0AB6               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  7145     179A  3000               	movlw	0
  7146     179B  07B6               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7147     179C                     l3551:
  7148                           
  7149                           ;main.c: 500:         pkt[packet_length] = '\n';
  7150     179C  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7151     179D  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7152     179E  00B4               	movwf	??_ConcatToPacket^(0+128)
  7153     179F  0834               	movf	??_ConcatToPacket^(0+128),w
  7154     17A0  0084               	movwf	4
  7155     17A1  300A               	movlw	10
  7156     17A2  0080               	movwf	0
  7157                           
  7158                           ;main.c: 501:         packet_length++;
  7159     17A3  3001               	movlw	1
  7160     17A4  07B5               	addwf	ConcatToPacket@packet_length^(0+128),f
  7161     17A5  1803               	skipnc
  7162     17A6  0AB6               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  7163     17A7  3000               	movlw	0
  7164     17A8  07B6               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7165     17A9                     l3553:
  7166                           
  7167                           ;main.c: 504:     pkt[packet_length] = '\0';
  7168     17A9  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7169     17AA  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7170     17AB  00B4               	movwf	??_ConcatToPacket^(0+128)
  7171     17AC  0834               	movf	??_ConcatToPacket^(0+128),w
  7172     17AD  0084               	movwf	4
  7173     17AE  0180               	clrf	0
  7174     17AF                     l217:
  7175     17AF  0008               	return
  7176     17B0                     __end_of_ConcatToPacket:
  7177                           
  7178                           	psect	text27
  7179     0C47                     __ptext27:	
  7180 ;; *************** function _strcat *****************
  7181 ;; Defined at:
  7182 ;;		line 516 in file "main.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  dest            1    wreg     PTR unsigned char 
  7185 ;;		 -> packet(15), 
  7186 ;;  source          2    5[BANK1 ] PTR unsigned char 
  7187 ;;		 -> STR_21(4), STR_17(4), STR_13(2), main@num_rand_s_231(16), 
  7188 ;;		 -> PIC_ID(4), 
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;  dest            1   12[BANK1 ] PTR unsigned char 
  7191 ;;		 -> packet(15), 
  7192 ;;  length_dest     2   15[BANK1 ] int 
  7193 ;;  n               2   13[BANK1 ] int 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  2    5[BANK1 ] int 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7203 ;;      Params:         0       0       2       0       0
  7204 ;;      Locals:         0       0       5       0       0
  7205 ;;      Temps:          0       0       5       0       0
  7206 ;;      Totals:         0       0      12       0       0
  7207 ;;Total ram usage:       12 bytes
  7208 ;; Hardware stack levels used: 1
  7209 ;; Hardware stack levels required when called: 5
  7210 ;; This function calls:
  7211 ;;		_Length
  7212 ;; This function is called by:
  7213 ;;		_ConcatToPacket
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217     0C47                     _strcat:	
  7218                           ;psect for function _strcat
  7219                           
  7220                           
  7221                           ;incstack = 0
  7222                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7223                           ;strcat@dest stored from wreg
  7224     0C47  1683               	bsf	3,5	;RP0=1, select bank1
  7225     0C48  1303               	bcf	3,6	;RP1=0, select bank1
  7226     0C49  00AC               	movwf	strcat@dest^(0+128)
  7227     0C4A                     l3299:
  7228                           
  7229                           ;main.c: 516: int strcat(char* dest, char* source);main.c: 517: {;main.c: 519:     int n
      +                           = 0, length_dest = Length(dest);
  7230     0C4A  01AD               	clrf	strcat@n^(0+128)
  7231     0C4B  01AE               	clrf	(strcat@n+1)^(0+128)
  7232     0C4C                     l3301:
  7233     0C4C  082C               	movf	strcat@dest^(0+128),w
  7234     0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  7235     0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  7236     0C4F  00BC               	movwf	Length@str
  7237     0C50  3001               	movlw	1
  7238     0C51  00BD               	movwf	Length@str+1
  7239     0C52  160A  118A  25F0  120A  158A  	fcall	_Length
  7240     0C57  1283               	bcf	3,5	;RP0=0, select bank0
  7241     0C58  1303               	bcf	3,6	;RP1=0, select bank0
  7242     0C59  083D               	movf	?_Length+1,w
  7243     0C5A  1683               	bsf	3,5	;RP0=1, select bank1
  7244     0C5B  1303               	bcf	3,6	;RP1=0, select bank1
  7245     0C5C  00B0               	movwf	(strcat@length_dest+1)^(0+128)
  7246     0C5D  1283               	bcf	3,5	;RP0=0, select bank0
  7247     0C5E  1303               	bcf	3,6	;RP1=0, select bank0
  7248     0C5F  083C               	movf	?_Length,w
  7249     0C60  1683               	bsf	3,5	;RP0=1, select bank1
  7250     0C61  1303               	bcf	3,6	;RP1=0, select bank1
  7251     0C62  00AF               	movwf	strcat@length_dest^(0+128)
  7252                           
  7253                           ;main.c: 522:     while(source[n] != '\0')
  7254     0C63  2C9A               	goto	l226
  7255     0C64                     l3303:
  7256                           
  7257                           ;main.c: 523:     {;main.c: 524:         dest[length_dest] = source[n];
  7258     0C64  1683               	bsf	3,5	;RP0=1, select bank1
  7259     0C65  1303               	bcf	3,6	;RP1=0, select bank1
  7260     0C66  082D               	movf	strcat@n^(0+128),w
  7261     0C67  0725               	addwf	strcat@source^(0+128),w
  7262     0C68  00A8               	movwf	(??_strcat+1)^(0+128)
  7263     0C69  0826               	movf	(strcat@source+1)^(0+128),w
  7264     0C6A  00A7               	movwf	??_strcat^(0+128)
  7265     0C6B  1803               	skipnc
  7266     0C6C  0AA7               	incf	??_strcat^(0+128),f
  7267     0C6D  1FAD               	btfss	strcat@n^(0+128),7
  7268     0C6E  2C70               	goto	u3350
  7269     0C6F  03A7               	decf	??_strcat^(0+128),f
  7270     0C70                     u3350:
  7271     0C70  1683               	bsf	3,5	;RP0=1, select bank1
  7272     0C71  1303               	bcf	3,6	;RP1=0, select bank1
  7273     0C72  0827               	movf	??_strcat^(0+128),w
  7274     0C73  00A9               	movwf	((??_strcat+1)^(0+128)+1)
  7275     0C74  0829               	movf	(??_strcat+2)^(0+128),w
  7276     0C75  1283               	bcf	3,5	;RP0=0, select bank0
  7277     0C76  1303               	bcf	3,6	;RP1=0, select bank0
  7278     0C77  00FF               	movwf	btemp+1
  7279     0C78  1683               	bsf	3,5	;RP0=1, select bank1
  7280     0C79  1303               	bcf	3,6	;RP1=0, select bank1
  7281     0C7A  0828               	movf	(??_strcat+1)^(0+128),w
  7282     0C7B  0084               	movwf	4
  7283     0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  7284     0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  7285     0C7E  120A  118A  2700  120A  158A  	fcall	stringtab
  7286     0C83  1683               	bsf	3,5	;RP0=1, select bank1
  7287     0C84  1303               	bcf	3,6	;RP1=0, select bank1
  7288     0C85  00AA               	movwf	(??_strcat+3)^(0+128)
  7289     0C86  082F               	movf	strcat@length_dest^(0+128),w
  7290     0C87  072C               	addwf	strcat@dest^(0+128),w
  7291     0C88  00AB               	movwf	(??_strcat+4)^(0+128)
  7292     0C89  082B               	movf	(??_strcat+4)^(0+128),w
  7293     0C8A  0084               	movwf	4
  7294     0C8B  082A               	movf	(??_strcat+3)^(0+128),w
  7295     0C8C  1783               	bsf	3,7	;select IRP bank2
  7296     0C8D  0080               	movwf	0
  7297     0C8E                     l3305:
  7298                           
  7299                           ;main.c: 525:         n++;
  7300     0C8E  3001               	movlw	1
  7301     0C8F  07AD               	addwf	strcat@n^(0+128),f
  7302     0C90  1803               	skipnc
  7303     0C91  0AAE               	incf	(strcat@n+1)^(0+128),f
  7304     0C92  3000               	movlw	0
  7305     0C93  07AE               	addwf	(strcat@n+1)^(0+128),f
  7306     0C94                     l3307:
  7307                           
  7308                           ;main.c: 526:         length_dest++;
  7309     0C94  3001               	movlw	1
  7310     0C95  07AF               	addwf	strcat@length_dest^(0+128),f
  7311     0C96  1803               	skipnc
  7312     0C97  0AB0               	incf	(strcat@length_dest+1)^(0+128),f
  7313     0C98  3000               	movlw	0
  7314     0C99  07B0               	addwf	(strcat@length_dest+1)^(0+128),f
  7315     0C9A                     l226:	
  7316                           ;main.c: 527:     }
  7317                           
  7318                           
  7319                           ;main.c: 522:     while(source[n] != '\0')
  7320     0C9A  082D               	movf	strcat@n^(0+128),w
  7321     0C9B  0725               	addwf	strcat@source^(0+128),w
  7322     0C9C  00A8               	movwf	(??_strcat+1)^(0+128)
  7323     0C9D  0826               	movf	(strcat@source+1)^(0+128),w
  7324     0C9E  00A7               	movwf	??_strcat^(0+128)
  7325     0C9F  1803               	skipnc
  7326     0CA0  0AA7               	incf	??_strcat^(0+128),f
  7327     0CA1  1FAD               	btfss	strcat@n^(0+128),7
  7328     0CA2  2CA4               	goto	u3360
  7329     0CA3  03A7               	decf	??_strcat^(0+128),f
  7330     0CA4                     u3360:
  7331     0CA4  1683               	bsf	3,5	;RP0=1, select bank1
  7332     0CA5  1303               	bcf	3,6	;RP1=0, select bank1
  7333     0CA6  0827               	movf	??_strcat^(0+128),w
  7334     0CA7  00A9               	movwf	((??_strcat+1)^(0+128)+1)
  7335     0CA8  0829               	movf	(??_strcat+2)^(0+128),w
  7336     0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  7337     0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  7338     0CAB  00FF               	movwf	btemp+1
  7339     0CAC  1683               	bsf	3,5	;RP0=1, select bank1
  7340     0CAD  1303               	bcf	3,6	;RP1=0, select bank1
  7341     0CAE  0828               	movf	(??_strcat+1)^(0+128),w
  7342     0CAF  0084               	movwf	4
  7343     0CB0  1283               	bcf	3,5	;RP0=0, select bank0
  7344     0CB1  1303               	bcf	3,6	;RP1=0, select bank0
  7345     0CB2  120A  118A  2700  120A  158A  	fcall	stringtab
  7346     0CB7  3A00               	xorlw	0
  7347     0CB8  1D03               	skipz
  7348     0CB9  2CBB               	goto	u3371
  7349     0CBA  2CBC               	goto	u3370
  7350     0CBB                     u3371:
  7351     0CBB  2C64               	goto	l3303
  7352     0CBC                     u3370:
  7353     0CBC                     l3309:
  7354                           
  7355                           ;main.c: 530:     return length_dest;
  7356     0CBC  1683               	bsf	3,5	;RP0=1, select bank1
  7357     0CBD  1303               	bcf	3,6	;RP1=0, select bank1
  7358     0CBE  0830               	movf	(strcat@length_dest+1)^(0+128),w
  7359     0CBF  00A6               	movwf	(?_strcat+1)^(0+128)
  7360     0CC0  082F               	movf	strcat@length_dest^(0+128),w
  7361     0CC1  00A5               	movwf	?_strcat^(0+128)
  7362     0CC2                     l229:
  7363     0CC2  0008               	return
  7364     0CC3                     __end_of_strcat:
  7365                           
  7366                           	psect	text28
  7367     15F0                     __ptext28:	
  7368 ;; *************** function _Length *****************
  7369 ;; Defined at:
  7370 ;;		line 507 in file "main.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  str             2   28[BANK0 ] PTR unsigned char 
  7373 ;;		 -> datoSeriale(17), datoTastierino(17), id_dest(4), dato(50), 
  7374 ;;		 -> packet(15), PIC_ID(4), 
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;  len             2    3[BANK1 ] int 
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  2   28[BANK0 ] int 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7386 ;;      Params:         0       2       0       0       0
  7387 ;;      Locals:         0       0       2       0       0
  7388 ;;      Temps:          0       0       3       0       0
  7389 ;;      Totals:         0       2       5       0       0
  7390 ;;Total ram usage:        7 bytes
  7391 ;; Hardware stack levels used: 1
  7392 ;; Hardware stack levels required when called: 4
  7393 ;; This function calls:
  7394 ;;		Nothing
  7395 ;; This function is called by:
  7396 ;;		_strcat
  7397 ;;		_SplitPacket
  7398 ;;		_CompareStrings
  7399 ;;		_Fill
  7400 ;; This function uses a non-reentrant model
  7401 ;;
  7402                           
  7403     15F0                     _Length:	
  7404                           ;psect for function _Length
  7405                           
  7406     15F0                     l3063:	
  7407                           ;incstack = 0
  7408                           ; Regs used in _Length: [wreg-fsr0h+status,2+status,0]
  7409                           
  7410                           
  7411                           ;main.c: 507: int Length(char *str);main.c: 508: {;main.c: 509:     int len = 0;
  7412     15F0  1683               	bsf	3,5	;RP0=1, select bank1
  7413     15F1  1303               	bcf	3,6	;RP1=0, select bank1
  7414     15F2  01A3               	clrf	Length@len^(0+128)
  7415     15F3  01A4               	clrf	(Length@len+1)^(0+128)
  7416                           
  7417                           ;main.c: 511:     while(str[len] != '\0') { len++; }
  7418     15F4  2DFB               	goto	l3067
  7419     15F5                     l3065:
  7420     15F5  3001               	movlw	1
  7421     15F6  07A3               	addwf	Length@len^(0+128),f
  7422     15F7  1803               	skipnc
  7423     15F8  0AA4               	incf	(Length@len+1)^(0+128),f
  7424     15F9  3000               	movlw	0
  7425     15FA  07A4               	addwf	(Length@len+1)^(0+128),f
  7426     15FB                     l3067:
  7427     15FB  0823               	movf	Length@len^(0+128),w
  7428     15FC  1283               	bcf	3,5	;RP0=0, select bank0
  7429     15FD  1303               	bcf	3,6	;RP1=0, select bank0
  7430     15FE  073C               	addwf	Length@str,w
  7431     15FF  1683               	bsf	3,5	;RP0=1, select bank1
  7432     1600  1303               	bcf	3,6	;RP1=0, select bank1
  7433     1601  00A1               	movwf	(??_Length+1)^(0+128)
  7434     1602  1283               	bcf	3,5	;RP0=0, select bank0
  7435     1603  1303               	bcf	3,6	;RP1=0, select bank0
  7436     1604  083D               	movf	Length@str+1,w
  7437     1605  1683               	bsf	3,5	;RP0=1, select bank1
  7438     1606  1303               	bcf	3,6	;RP1=0, select bank1
  7439     1607  00A0               	movwf	??_Length^(0+128)
  7440     1608  1803               	skipnc
  7441     1609  0AA0               	incf	??_Length^(0+128),f
  7442     160A  1FA3               	btfss	Length@len^(0+128),7
  7443     160B  2E0D               	goto	u2970
  7444     160C  03A0               	decf	??_Length^(0+128),f
  7445     160D                     u2970:
  7446     160D  1683               	bsf	3,5	;RP0=1, select bank1
  7447     160E  1303               	bcf	3,6	;RP1=0, select bank1
  7448     160F  0820               	movf	??_Length^(0+128),w
  7449     1610  00A2               	movwf	((??_Length+1)^(0+128)+1)
  7450     1611  0821               	movf	(??_Length+1)^(0+128),w
  7451     1612  0084               	movwf	4
  7452     1613  1783               	bsf	3,7
  7453     1614  1C22               	btfss	(??_Length+2)^(0+128),0
  7454     1615  1383               	bcf	3,7
  7455     1616  0800               	movf	0,w
  7456     1617  1D03               	btfss	3,2
  7457     1618  2E1A               	goto	u2981
  7458     1619  2E1B               	goto	u2980
  7459     161A                     u2981:
  7460     161A  2DF5               	goto	l3065
  7461     161B                     u2980:
  7462     161B                     l3069:
  7463                           
  7464                           ;main.c: 513:     return len;
  7465     161B  0824               	movf	(Length@len+1)^(0+128),w
  7466     161C  1283               	bcf	3,5	;RP0=0, select bank0
  7467     161D  1303               	bcf	3,6	;RP1=0, select bank0
  7468     161E  00BD               	movwf	?_Length+1
  7469     161F  1683               	bsf	3,5	;RP0=1, select bank1
  7470     1620  1303               	bcf	3,6	;RP1=0, select bank1
  7471     1621  0823               	movf	Length@len^(0+128),w
  7472     1622  1283               	bcf	3,5	;RP0=0, select bank0
  7473     1623  1303               	bcf	3,6	;RP1=0, select bank0
  7474     1624  00BC               	movwf	?_Length
  7475     1625                     l223:
  7476     1625  0008               	return
  7477     1626                     __end_of_Length:
  7478                           
  7479                           	psect	text29
  7480     0CC3                     __ptext29:	
  7481 ;; *************** function _IRS *****************
  7482 ;; Defined at:
  7483 ;;		line 839 in file "main.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;		None
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;		None
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  1    wreg      void 
  7490 ;; Registers used:
  7491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7497 ;;      Params:         0       0       0       0       0
  7498 ;;      Locals:         0       0       0       0       0
  7499 ;;      Temps:          0       4       0       0       0
  7500 ;;      Totals:         0       4       0       0       0
  7501 ;;Total ram usage:        4 bytes
  7502 ;; Hardware stack levels used: 1
  7503 ;; Hardware stack levels required when called: 3
  7504 ;; This function calls:
  7505 ;;		i1_UART_TxString
  7506 ;; This function is called by:
  7507 ;;		Interrupt level 1
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511     0CC3                     _IRS:	
  7512                           ;psect for function _IRS
  7513                           
  7514     0CC3                     i1l2931:
  7515                           
  7516                           ;main.c: 842:     if(RCIF)
  7517     0CC3  1E8C               	btfss	12,5	;volatile
  7518     0CC4  2CC6               	goto	u286_21
  7519     0CC5  2CC7               	goto	u286_20
  7520     0CC6                     u286_21:
  7521     0CC6  2CDC               	goto	i1l2943
  7522     0CC7                     u286_20:
  7523     0CC7                     i1l2933:
  7524                           
  7525                           ;main.c: 843:     {;main.c: 844:         dato[iS++] = RCREG;
  7526     0CC7  083E               	movf	_iS,w
  7527     0CC8  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7528     0CC9  0084               	movwf	4
  7529     0CCA  081A               	movf	26,w	;volatile
  7530     0CCB  1783               	bsf	3,7	;select IRP bank2
  7531     0CCC  0080               	movwf	0
  7532     0CCD                     i1l2935:
  7533     0CCD  3001               	movlw	1
  7534     0CCE  00B8               	movwf	??_IRS
  7535     0CCF  0838               	movf	??_IRS,w
  7536     0CD0  07BE               	addwf	_iS,f
  7537     0CD1                     i1l2937:
  7538                           
  7539                           ;main.c: 845:         dato[iS] = '\0';
  7540     0CD1  083E               	movf	_iS,w
  7541     0CD2  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7542     0CD3  0084               	movwf	4
  7543     0CD4  0180               	clrf	0
  7544     0CD5                     i1l2939:
  7545                           
  7546                           ;main.c: 846:         recieved = 1;
  7547     0CD5  1683               	bsf	3,5	;RP0=1, select bank3
  7548     0CD6  1703               	bsf	3,6	;RP1=1, select bank3
  7549     0CD7  019C               	clrf	_recieved^(0+384)
  7550     0CD8  0A9C               	incf	_recieved^(0+384),f
  7551     0CD9                     i1l2941:
  7552                           
  7553                           ;main.c: 847:         RCIF = 0;
  7554     0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  7555     0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  7556     0CDB  128C               	bcf	12,5	;volatile
  7557     0CDC                     i1l2943:
  7558                           
  7559                           ;main.c: 850:     if(T0IF)
  7560     0CDC  1D0B               	btfss	11,2	;volatile
  7561     0CDD  2CDF               	goto	u287_21
  7562     0CDE  2CE0               	goto	u287_20
  7563     0CDF                     u287_21:
  7564     0CDF  2D42               	goto	i1l334
  7565     0CE0                     u287_20:
  7566     0CE0                     i1l2945:
  7567                           
  7568                           ;main.c: 851:     {;main.c: 852:         TMR0 = 131;
  7569     0CE0  3083               	movlw	131
  7570     0CE1  0081               	movwf	1	;volatile
  7571                           
  7572                           ;main.c: 853:         milliseconds++;
  7573     0CE2  3001               	movlw	1
  7574     0CE3  1683               	bsf	3,5	;RP0=1, select bank1
  7575     0CE4  1303               	bcf	3,6	;RP1=0, select bank1
  7576     0CE5  07E8               	addwf	_milliseconds^(0+128),f
  7577     0CE6  3000               	movlw	0
  7578     0CE7  1803               	skipnc
  7579     0CE8  3001               	movlw	1
  7580     0CE9  07E9               	addwf	(_milliseconds+1)^(0+128),f
  7581     0CEA  3000               	movlw	0
  7582     0CEB  1803               	skipnc
  7583     0CEC  3001               	movlw	1
  7584     0CED  07EA               	addwf	(_milliseconds+2)^(0+128),f
  7585     0CEE  3000               	movlw	0
  7586     0CEF  1803               	skipnc
  7587     0CF0  3001               	movlw	1
  7588     0CF1  07EB               	addwf	(_milliseconds+3)^(0+128),f
  7589                           
  7590                           ;main.c: 855:         if(seconds != 0 && milliseconds > seconds)
  7591     0CF2  0867               	movf	(_seconds+3)^(0+128),w
  7592     0CF3  0466               	iorwf	(_seconds+2)^(0+128),w
  7593     0CF4  0465               	iorwf	(_seconds+1)^(0+128),w
  7594     0CF5  0464               	iorwf	_seconds^(0+128),w
  7595     0CF6  1903               	skipnz
  7596     0CF7  2CF9               	goto	u288_21
  7597     0CF8  2CFA               	goto	u288_20
  7598     0CF9                     u288_21:
  7599     0CF9  2D41               	goto	i1l2963
  7600     0CFA                     u288_20:
  7601     0CFA                     i1l2947:
  7602     0CFA  086B               	movf	(_milliseconds+3)^(0+128),w
  7603     0CFB  0267               	subwf	(_seconds+3)^(0+128),w
  7604     0CFC  1D03               	skipz
  7605     0CFD  2D08               	goto	u289_25
  7606     0CFE  086A               	movf	(_milliseconds+2)^(0+128),w
  7607     0CFF  0266               	subwf	(_seconds+2)^(0+128),w
  7608     0D00  1D03               	skipz
  7609     0D01  2D08               	goto	u289_25
  7610     0D02  0869               	movf	(_milliseconds+1)^(0+128),w
  7611     0D03  0265               	subwf	(_seconds+1)^(0+128),w
  7612     0D04  1D03               	skipz
  7613     0D05  2D08               	goto	u289_25
  7614     0D06  0868               	movf	_milliseconds^(0+128),w
  7615     0D07  0264               	subwf	_seconds^(0+128),w
  7616     0D08                     u289_25:
  7617     0D08  1803               	skipnc
  7618     0D09  2D0B               	goto	u289_21
  7619     0D0A  2D0C               	goto	u289_20
  7620     0D0B                     u289_21:
  7621     0D0B  2D41               	goto	i1l2963
  7622     0D0C                     u289_20:
  7623     0D0C                     i1l2949:
  7624                           
  7625                           ;main.c: 856:         {;main.c: 858:             if(seconds == 1000)
  7626     0D0C  30E8               	movlw	232
  7627     0D0D  0664               	xorwf	_seconds^(0+128),w
  7628     0D0E  3003               	movlw	3
  7629     0D0F  1903               	skipnz
  7630     0D10  0665               	xorwf	(_seconds+1)^(0+128),w
  7631     0D11  0466               	iorwf	(_seconds+2)^(0+128),w
  7632     0D12  0467               	iorwf	(_seconds+3)^(0+128),w
  7633     0D13  1D03               	btfss	3,2
  7634     0D14  2D16               	goto	u290_21
  7635     0D15  2D17               	goto	u290_20
  7636     0D16                     u290_21:
  7637     0D16  2D26               	goto	i1l2955
  7638     0D17                     u290_20:
  7639     0D17                     i1l2951:
  7640                           
  7641                           ;main.c: 859:             {;main.c: 860:                 pr_start = 1;
  7642     0D17  1683               	bsf	3,5	;RP0=1, select bank3
  7643     0D18  1703               	bsf	3,6	;RP1=1, select bank3
  7644     0D19  0198               	clrf	_pr_start^(0+384)
  7645     0D1A  0A98               	incf	_pr_start^(0+384),f
  7646     0D1B                     i1l2953:
  7647                           
  7648                           ;main.c: 861:                 seconds = 0;
  7649     0D1B  3000               	movlw	0
  7650     0D1C  1683               	bsf	3,5	;RP0=1, select bank1
  7651     0D1D  1303               	bcf	3,6	;RP1=0, select bank1
  7652     0D1E  00E7               	movwf	(_seconds+3)^(0+128)
  7653     0D1F  3000               	movlw	0
  7654     0D20  00E6               	movwf	(_seconds+2)^(0+128)
  7655     0D21  3000               	movlw	0
  7656     0D22  00E5               	movwf	(_seconds+1)^(0+128)
  7657     0D23  3000               	movlw	0
  7658     0D24  00E4               	movwf	_seconds^(0+128)
  7659                           
  7660                           ;main.c: 862:             }
  7661     0D25  2D41               	goto	i1l2963
  7662     0D26                     i1l2955:
  7663     0D26  304C               	movlw	76
  7664     0D27  1683               	bsf	3,5	;RP0=1, select bank1
  7665     0D28  1303               	bcf	3,6	;RP1=0, select bank1
  7666     0D29  0664               	xorwf	_seconds^(0+128),w
  7667     0D2A  301D               	movlw	29
  7668     0D2B  1903               	skipnz
  7669     0D2C  0665               	xorwf	(_seconds+1)^(0+128),w
  7670     0D2D  0466               	iorwf	(_seconds+2)^(0+128),w
  7671     0D2E  0467               	iorwf	(_seconds+3)^(0+128),w
  7672     0D2F  1D03               	btfss	3,2
  7673     0D30  2D32               	goto	u291_21
  7674     0D31  2D33               	goto	u291_20
  7675     0D32                     u291_21:
  7676     0D32  2D38               	goto	i1l2961
  7677     0D33                     u291_20:
  7678     0D33                     i1l2957:
  7679                           
  7680                           ;main.c: 865:             {;main.c: 866:                 pr_countdown = 1;
  7681     0D33  1683               	bsf	3,5	;RP0=1, select bank3
  7682     0D34  1703               	bsf	3,6	;RP1=1, select bank3
  7683     0D35  0194               	clrf	_pr_countdown^(0+384)
  7684     0D36  0A94               	incf	_pr_countdown^(0+384),f
  7685     0D37  2D1B               	goto	i1l2953
  7686     0D38                     i1l2961:
  7687                           
  7688                           ;main.c: 871:             {;main.c: 873:                 UART_TxString(packet, 0);
  7689     0D38  1283               	bcf	3,5	;RP0=0, select bank0
  7690     0D39  1303               	bcf	3,6	;RP1=0, select bank0
  7691     0D3A  01B3               	clrf	i1UART_TxString@is_ACK
  7692     0D3B  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  7693     0D3C  120A  158A  23CE  120A  158A  	fcall	i1_UART_TxString
  7694     0D41                     i1l2963:
  7695                           
  7696                           ;main.c: 876:         T0IF = 0;
  7697     0D41  110B               	bcf	11,2	;volatile
  7698     0D42                     i1l334:
  7699     0D42  1283               	bcf	3,5	;RP0=0, select bank0
  7700     0D43  1303               	bcf	3,6	;RP1=0, select bank0
  7701     0D44  083B               	movf	??_IRS+3,w
  7702     0D45  008A               	movwf	10
  7703     0D46  083A               	movf	??_IRS+2,w
  7704     0D47  0084               	movwf	4
  7705     0D48  0E39               	swapf	??_IRS+1,w
  7706     0D49  0083               	movwf	3
  7707     0D4A  0EFE               	swapf	btemp,f
  7708     0D4B  0E7E               	swapf	btemp,w
  7709     0D4C  0009               	retfie
  7710     0D4D                     __end_of_IRS:
  7711                           
  7712                           	psect	intentry
  7713     0004                     __pintentry:	
  7714                           ;incstack = 0
  7715                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7716                           
  7717     0004                     interrupt_function:
  7718     007E                     saved_w	set	btemp
  7719     0004  00FE               	movwf	btemp
  7720     0005  0E03               	swapf	3,w
  7721     0006  1283               	bcf	3,5	;RP0=0, select bank0
  7722     0007  1303               	bcf	3,6	;RP1=0, select bank0
  7723     0008  00B9               	movwf	??_IRS+1
  7724     0009  0804               	movf	4,w
  7725     000A  00BA               	movwf	??_IRS+2
  7726     000B  080A               	movf	10,w
  7727     000C  00BB               	movwf	??_IRS+3
  7728     000D  120A  158A  2CC3   	ljmp	_IRS
  7729                           
  7730                           	psect	text30
  7731     0BCE                     __ptext30:	
  7732 ;; *************** function i1_UART_TxString *****************
  7733 ;; Defined at:
  7734 ;;		line 818 in file "main.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  str             1    wreg     PTR const unsigned char 
  7737 ;;		 -> packet(15), 
  7738 ;;  is_ACK          1   19[BANK0 ] unsigned char 
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  str             1   21[BANK0 ] PTR const unsigned char 
  7741 ;;		 -> packet(15), 
  7742 ;;  n               2   22[BANK0 ] unsigned int 
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      void 
  7745 ;; Registers used:
  7746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7752 ;;      Params:         0       1       0       0       0
  7753 ;;      Locals:         0       3       0       0       0
  7754 ;;      Temps:          0       1       0       0       0
  7755 ;;      Totals:         0       5       0       0       0
  7756 ;;Total ram usage:        5 bytes
  7757 ;; Hardware stack levels used: 1
  7758 ;; Hardware stack levels required when called: 2
  7759 ;; This function calls:
  7760 ;;		i1_UART_TxChar
  7761 ;;		i1___awmod
  7762 ;;		i1___wmul
  7763 ;;		i1_rand
  7764 ;;		i1_srand
  7765 ;; This function is called by:
  7766 ;;		_IRS
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770     0BCE                     i1_UART_TxString:	
  7771                           ;psect for function i1_UART_TxString
  7772                           
  7773                           
  7774                           ;incstack = 0
  7775                           ; Regs used in i1_UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7776                           ;i1UART_TxString@str stored from wreg
  7777     0BCE  1283               	bcf	3,5	;RP0=0, select bank0
  7778     0BCF  1303               	bcf	3,6	;RP1=0, select bank0
  7779     0BD0  00B5               	movwf	i1UART_TxString@str
  7780     0BD1                     i1l2673:
  7781                           
  7782                           ;main.c: 818: void UART_TxString(const char *str, char is_ACK);main.c: 819: {;main.c: 82
      +                          0:     unsigned int n = 0;
  7783     0BD1  01B6               	clrf	i1UART_TxString@n
  7784     0BD2  01B7               	clrf	i1UART_TxString@n+1
  7785                           
  7786                           ;main.c: 822:     while(str[n] != '\0')
  7787     0BD3  2BE7               	goto	i1l2679
  7788     0BD4                     i1l2675:
  7789                           
  7790                           ;main.c: 823:     {;main.c: 824:         UART_TxChar(str[n]);
  7791     0BD4  0836               	movf	i1UART_TxString@n,w
  7792     0BD5  0735               	addwf	i1UART_TxString@str,w
  7793     0BD6  00B4               	movwf	??i1_UART_TxString
  7794     0BD7  0834               	movf	??i1_UART_TxString,w
  7795     0BD8  0084               	movwf	4
  7796     0BD9  0800               	movf	0,w
  7797     0BDA  160A  118A  252F  120A  158A  	fcall	i1_UART_TxChar
  7798     0BDF                     i1l2677:
  7799                           
  7800                           ;main.c: 825:         n++;
  7801     0BDF  3001               	movlw	1
  7802     0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  7803     0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  7804     0BE2  07B6               	addwf	i1UART_TxString@n,f
  7805     0BE3  1803               	skipnc
  7806     0BE4  0AB7               	incf	i1UART_TxString@n+1,f
  7807     0BE5  3000               	movlw	0
  7808     0BE6  07B7               	addwf	i1UART_TxString@n+1,f
  7809     0BE7                     i1l2679:
  7810                           
  7811                           ;main.c: 822:     while(str[n] != '\0')
  7812     0BE7  0836               	movf	i1UART_TxString@n,w
  7813     0BE8  0735               	addwf	i1UART_TxString@str,w
  7814     0BE9  00B4               	movwf	??i1_UART_TxString
  7815     0BEA  0834               	movf	??i1_UART_TxString,w
  7816     0BEB  0084               	movwf	4
  7817     0BEC  1783               	bsf	3,7	;select IRP bank2
  7818     0BED  0800               	movf	0,w
  7819     0BEE  1D03               	btfss	3,2
  7820     0BEF  2BF1               	goto	u261_21
  7821     0BF0  2BF2               	goto	u261_20
  7822     0BF1                     u261_21:
  7823     0BF1  2BD4               	goto	i1l2675
  7824     0BF2                     u261_20:
  7825     0BF2                     i1l2681:
  7826                           
  7827                           ;main.c: 828:     if(is_ACK == 0)
  7828     0BF2  0833               	movf	i1UART_TxString@is_ACK,w
  7829     0BF3  1D03               	btfss	3,2
  7830     0BF4  2BF6               	goto	u262_21
  7831     0BF5  2BF7               	goto	u262_20
  7832     0BF6                     u262_21:
  7833     0BF6  2C46               	goto	i1l322
  7834     0BF7                     u262_20:
  7835     0BF7                     i1l2683:
  7836                           
  7837                           ;main.c: 829:     {;main.c: 832:         srand(milliseconds);
  7838     0BF7  1683               	bsf	3,5	;RP0=1, select bank1
  7839     0BF8  1303               	bcf	3,6	;RP1=0, select bank1
  7840     0BF9  0869               	movf	(_milliseconds+1)^(0+128),w
  7841     0BFA  00F1               	movwf	i1srand@x+1
  7842     0BFB  0868               	movf	_milliseconds^(0+128),w
  7843     0BFC  00F0               	movwf	i1srand@x
  7844     0BFD  160A  118A  251D  120A  158A  	fcall	i1_srand
  7845     0C02                     i1l2685:
  7846                           
  7847                           ;main.c: 833:         milliseconds = 0;
  7848     0C02  3000               	movlw	0
  7849     0C03  1683               	bsf	3,5	;RP0=1, select bank1
  7850     0C04  1303               	bcf	3,6	;RP1=0, select bank1
  7851     0C05  00EB               	movwf	(_milliseconds+3)^(0+128)
  7852     0C06  3000               	movlw	0
  7853     0C07  00EA               	movwf	(_milliseconds+2)^(0+128)
  7854     0C08  3000               	movlw	0
  7855     0C09  00E9               	movwf	(_milliseconds+1)^(0+128)
  7856     0C0A  3000               	movlw	0
  7857     0C0B  00E8               	movwf	_milliseconds^(0+128)
  7858     0C0C                     i1l2687:
  7859                           
  7860                           ;main.c: 835:         seconds = ((rand()%10)+5) * 250;
  7861     0C0C  300A               	movlw	10
  7862     0C0D  1283               	bcf	3,5	;RP0=0, select bank0
  7863     0C0E  1303               	bcf	3,6	;RP1=0, select bank0
  7864     0C0F  00A7               	movwf	i1___awmod@divisor
  7865     0C10  3000               	movlw	0
  7866     0C11  00A8               	movwf	i1___awmod@divisor+1
  7867     0C12  160A  118A  271F  120A  158A  	fcall	i1_rand
  7868     0C17  1283               	bcf	3,5	;RP0=0, select bank0
  7869     0C18  1303               	bcf	3,6	;RP1=0, select bank0
  7870     0C19  0821               	movf	?i1_rand+1,w
  7871     0C1A  00AA               	movwf	i1___awmod@dividend+1
  7872     0C1B  0820               	movf	?i1_rand,w
  7873     0C1C  00A9               	movwf	i1___awmod@dividend
  7874     0C1D  120A  158A  2091  120A  158A  	fcall	i1___awmod
  7875     0C22  1283               	bcf	3,5	;RP0=0, select bank0
  7876     0C23  1303               	bcf	3,6	;RP1=0, select bank0
  7877     0C24  0827               	movf	?i1___awmod,w
  7878     0C25  3E05               	addlw	5
  7879     0C26  00AD               	movwf	i1___wmul@multiplier
  7880     0C27  0828               	movf	?i1___awmod+1,w
  7881     0C28  1803               	skipnc
  7882     0C29  3E01               	addlw	1
  7883     0C2A  3E00               	addlw	0
  7884     0C2B  00AE               	movwf	i1___wmul@multiplier+1
  7885     0C2C  30FA               	movlw	250
  7886     0C2D  00AF               	movwf	i1___wmul@multiplicand
  7887     0C2E  3000               	movlw	0
  7888     0C2F  00B0               	movwf	i1___wmul@multiplicand+1
  7889     0C30  160A  118A  2575  120A  158A  	fcall	i1___wmul
  7890     0C35  1283               	bcf	3,5	;RP0=0, select bank0
  7891     0C36  1303               	bcf	3,6	;RP1=0, select bank0
  7892     0C37  082D               	movf	?i1___wmul,w
  7893     0C38  1683               	bsf	3,5	;RP0=1, select bank1
  7894     0C39  1303               	bcf	3,6	;RP1=0, select bank1
  7895     0C3A  00E4               	movwf	_seconds^(0+128)
  7896     0C3B  1283               	bcf	3,5	;RP0=0, select bank0
  7897     0C3C  1303               	bcf	3,6	;RP1=0, select bank0
  7898     0C3D  082E               	movf	?i1___wmul+1,w
  7899     0C3E  1683               	bsf	3,5	;RP0=1, select bank1
  7900     0C3F  1303               	bcf	3,6	;RP1=0, select bank1
  7901     0C40  00E5               	movwf	(_seconds+1)^(0+128)
  7902     0C41  3000               	movlw	0
  7903     0C42  1BE5               	btfsc	(_seconds+1)^(0+128),7
  7904     0C43  30FF               	movlw	255
  7905     0C44  00E6               	movwf	(_seconds+2)^(0+128)
  7906     0C45  00E7               	movwf	(_seconds+3)^(0+128)
  7907     0C46                     i1l322:
  7908     0C46  0008               	return
  7909     0C47                     __end_ofi1_UART_TxString:
  7910                           
  7911                           	psect	text31
  7912     151D                     __ptext31:	
  7913 ;; *************** function i1_srand *****************
  7914 ;; Defined at:
  7915 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  x               2    0[COMMON] unsigned int 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7929 ;;      Params:         2       0       0       0       0
  7930 ;;      Locals:         0       0       0       0       0
  7931 ;;      Temps:          0       0       0       0       0
  7932 ;;      Totals:         2       0       0       0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used: 1
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		i1_UART_TxString
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942     151D                     i1_srand:	
  7943                           ;psect for function i1_srand
  7944                           
  7945     151D                     i1l2447:	
  7946                           ;incstack = 0
  7947                           ; Regs used in i1_srand: [wreg]
  7948                           
  7949     151D  0870               	movf	i1srand@x,w
  7950     151E  1283               	bcf	3,5	;RP0=0, select bank0
  7951     151F  1303               	bcf	3,6	;RP1=0, select bank0
  7952     1520  00D0               	movwf	_randx
  7953     1521  0871               	movf	i1srand@x+1,w
  7954     1522  00D1               	movwf	_randx+1
  7955     1523  01D2               	clrf	_randx+2
  7956     1524  01D3               	clrf	_randx+3
  7957     1525                     i1l910:
  7958     1525  0008               	return
  7959     1526                     __end_ofi1_srand:
  7960                           
  7961                           	psect	text32
  7962     171F                     __ptext32:	
  7963 ;; *************** function i1_rand *****************
  7964 ;; Defined at:
  7965 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;		None
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;		None
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  2    0[BANK0 ] int 
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0, pclath, cstack
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7979 ;;      Params:         0       2       0       0       0
  7980 ;;      Locals:         0       0       0       0       0
  7981 ;;      Temps:          0       5       0       0       0
  7982 ;;      Totals:         0       7       0       0       0
  7983 ;;Total ram usage:        7 bytes
  7984 ;; Hardware stack levels used: 1
  7985 ;; Hardware stack levels required when called: 1
  7986 ;; This function calls:
  7987 ;;		i1___lmul
  7988 ;; This function is called by:
  7989 ;;		i1_UART_TxString
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993     171F                     i1_rand:	
  7994                           ;psect for function i1_rand
  7995                           
  7996     171F                     i1l2449:	
  7997                           ;incstack = 0
  7998                           ; Regs used in i1_rand: [wreg+status,2+status,0+pclath+cstack]
  7999                           
  8000     171F  1283               	bcf	3,5	;RP0=0, select bank0
  8001     1720  1303               	bcf	3,6	;RP1=0, select bank0
  8002     1721  0853               	movf	_randx+3,w
  8003     1722  00F3               	movwf	i1___lmul@multiplier+3
  8004     1723  0852               	movf	_randx+2,w
  8005     1724  00F2               	movwf	i1___lmul@multiplier+2
  8006     1725  0851               	movf	_randx+1,w
  8007     1726  00F1               	movwf	i1___lmul@multiplier+1
  8008     1727  0850               	movf	_randx,w
  8009     1728  00F0               	movwf	i1___lmul@multiplier
  8010     1729  3041               	movlw	65
  8011     172A  00F7               	movwf	i1___lmul@multiplicand+3
  8012     172B  30C6               	movlw	198
  8013     172C  00F6               	movwf	i1___lmul@multiplicand+2
  8014     172D  304E               	movlw	78
  8015     172E  00F5               	movwf	i1___lmul@multiplicand+1
  8016     172F  306D               	movlw	109
  8017     1730  00F4               	movwf	i1___lmul@multiplicand
  8018     1731  160A  118A  26D9  160A  118A  	fcall	i1___lmul
  8019     1736  0873               	movf	?i1___lmul+3,w
  8020     1737  1283               	bcf	3,5	;RP0=0, select bank0
  8021     1738  1303               	bcf	3,6	;RP1=0, select bank0
  8022     1739  00D3               	movwf	_randx+3
  8023     173A  0872               	movf	?i1___lmul+2,w
  8024     173B  00D2               	movwf	_randx+2
  8025     173C  0871               	movf	?i1___lmul+1,w
  8026     173D  00D1               	movwf	_randx+1
  8027     173E  0870               	movf	?i1___lmul,w
  8028     173F  00D0               	movwf	_randx
  8029     1740                     i1l2451:
  8030     1740  3039               	movlw	57
  8031     1741  07D0               	addwf	_randx,f
  8032     1742  3030               	movlw	48
  8033     1743  1803               	skipnc
  8034     1744  3031               	movlw	49
  8035     1745  07D1               	addwf	_randx+1,f
  8036     1746  3000               	movlw	0
  8037     1747  1803               	skipnc
  8038     1748  3001               	movlw	1
  8039     1749  07D2               	addwf	_randx+2,f
  8040     174A  3000               	movlw	0
  8041     174B  1803               	skipnc
  8042     174C  3001               	movlw	1
  8043     174D  07D3               	addwf	_randx+3,f
  8044     174E                     i1l2453:
  8045     174E  0850               	movf	_randx,w
  8046     174F  00A2               	movwf	??i1_rand
  8047     1750  0851               	movf	_randx+1,w
  8048     1751  00A3               	movwf	??i1_rand+1
  8049     1752  0852               	movf	_randx+2,w
  8050     1753  00A4               	movwf	??i1_rand+2
  8051     1754  0853               	movf	_randx+3,w
  8052     1755  00A5               	movwf	??i1_rand+3
  8053     1756  3010               	movlw	16
  8054     1757  00A6               	movwf	??i1_rand+4
  8055     1758                     u227_25:
  8056     1758  0D25               	rlf	??i1_rand+3,w
  8057     1759  0CA5               	rrf	??i1_rand+3,f
  8058     175A  0CA4               	rrf	??i1_rand+2,f
  8059     175B  0CA3               	rrf	??i1_rand+1,f
  8060     175C  0CA2               	rrf	??i1_rand,f
  8061     175D                     u227_20:
  8062     175D  0BA6               	decfsz	??i1_rand+4,f
  8063     175E  2F58               	goto	u227_25
  8064     175F  30FF               	movlw	255
  8065     1760  0522               	andwf	??i1_rand,w
  8066     1761  00A0               	movwf	?i1_rand
  8067     1762  307F               	movlw	127
  8068     1763  0523               	andwf	??i1_rand+1,w
  8069     1764  00A1               	movwf	?i1_rand+1
  8070     1765                     i1l913:
  8071     1765  0008               	return
  8072     1766                     __end_ofi1_rand:
  8073                           
  8074                           	psect	text33
  8075     16D9                     __ptext33:	
  8076 ;; *************** function i1___lmul *****************
  8077 ;; Defined at:
  8078 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  multiplier      4    0[COMMON] unsigned long 
  8081 ;;  multiplicand    4    4[COMMON] unsigned long 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  product         4    9[COMMON] unsigned long 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  4    0[COMMON] unsigned long 
  8086 ;; Registers used:
  8087 ;;		wreg, status,2, status,0
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8093 ;;      Params:         8       0       0       0       0
  8094 ;;      Locals:         4       0       0       0       0
  8095 ;;      Temps:          1       0       0       0       0
  8096 ;;      Totals:        13       0       0       0       0
  8097 ;;Total ram usage:       13 bytes
  8098 ;; Hardware stack levels used: 1
  8099 ;; This function calls:
  8100 ;;		Nothing
  8101 ;; This function is called by:
  8102 ;;		i1_rand
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106     16D9                     i1___lmul:	
  8107                           ;psect for function i1___lmul
  8108                           
  8109     16D9                     i1l2137:	
  8110                           ;incstack = 0
  8111                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  8112                           
  8113     16D9  3000               	movlw	0
  8114     16DA  00FC               	movwf	i1___lmul@product+3
  8115     16DB  3000               	movlw	0
  8116     16DC  00FB               	movwf	i1___lmul@product+2
  8117     16DD  3000               	movlw	0
  8118     16DE  00FA               	movwf	i1___lmul@product+1
  8119     16DF  3000               	movlw	0
  8120     16E0  00F9               	movwf	i1___lmul@product
  8121     16E1                     i1l2139:
  8122     16E1  1C70               	btfss	i1___lmul@multiplier,0
  8123     16E2  2EE4               	goto	u176_21
  8124     16E3  2EE5               	goto	u176_20
  8125     16E4                     u176_21:
  8126     16E4  2EFC               	goto	i1l2143
  8127     16E5                     u176_20:
  8128     16E5                     i1l2141:
  8129     16E5  0874               	movf	i1___lmul@multiplicand,w
  8130     16E6  07F9               	addwf	i1___lmul@product,f
  8131     16E7  0875               	movf	i1___lmul@multiplicand+1,w
  8132     16E8  1103               	clrz
  8133     16E9  1803               	skipnc
  8134     16EA  3E01               	addlw	1
  8135     16EB  1903               	skipnz
  8136     16EC  2EEE               	goto	u177_21
  8137     16ED  07FA               	addwf	i1___lmul@product+1,f
  8138     16EE                     u177_21:
  8139     16EE  0876               	movf	i1___lmul@multiplicand+2,w
  8140     16EF  1103               	clrz
  8141     16F0  1803               	skipnc
  8142     16F1  3E01               	addlw	1
  8143     16F2  1903               	skipnz
  8144     16F3  2EF5               	goto	u177_22
  8145     16F4  07FB               	addwf	i1___lmul@product+2,f
  8146     16F5                     u177_22:
  8147     16F5  0877               	movf	i1___lmul@multiplicand+3,w
  8148     16F6  1103               	clrz
  8149     16F7  1803               	skipnc
  8150     16F8  3E01               	addlw	1
  8151     16F9  1903               	skipnz
  8152     16FA  2EFC               	goto	u177_23
  8153     16FB  07FC               	addwf	i1___lmul@product+3,f
  8154     16FC                     u177_23:
  8155     16FC                     i1l2143:
  8156     16FC  3001               	movlw	1
  8157     16FD  00F8               	movwf	??i1___lmul
  8158     16FE                     u178_25:
  8159     16FE  1003               	clrc
  8160     16FF  0DF4               	rlf	i1___lmul@multiplicand,f
  8161     1700  0DF5               	rlf	i1___lmul@multiplicand+1,f
  8162     1701  0DF6               	rlf	i1___lmul@multiplicand+2,f
  8163     1702  0DF7               	rlf	i1___lmul@multiplicand+3,f
  8164     1703  0BF8               	decfsz	??i1___lmul,f
  8165     1704  2EFE               	goto	u178_25
  8166     1705                     i1l2145:
  8167     1705  3001               	movlw	1
  8168     1706                     u179_25:
  8169     1706  1003               	clrc
  8170     1707  0CF3               	rrf	i1___lmul@multiplier+3,f
  8171     1708  0CF2               	rrf	i1___lmul@multiplier+2,f
  8172     1709  0CF1               	rrf	i1___lmul@multiplier+1,f
  8173     170A  0CF0               	rrf	i1___lmul@multiplier,f
  8174     170B  3EFF               	addlw	-1
  8175     170C  1D03               	skipz
  8176     170D  2F06               	goto	u179_25
  8177     170E  0873               	movf	i1___lmul@multiplier+3,w
  8178     170F  0472               	iorwf	i1___lmul@multiplier+2,w
  8179     1710  0471               	iorwf	i1___lmul@multiplier+1,w
  8180     1711  0470               	iorwf	i1___lmul@multiplier,w
  8181     1712  1D03               	skipz
  8182     1713  2F15               	goto	u180_21
  8183     1714  2F16               	goto	u180_20
  8184     1715                     u180_21:
  8185     1715  2EE1               	goto	i1l2139
  8186     1716                     u180_20:
  8187     1716                     i1l2147:
  8188     1716  087C               	movf	i1___lmul@product+3,w
  8189     1717  00F3               	movwf	?i1___lmul+3
  8190     1718  087B               	movf	i1___lmul@product+2,w
  8191     1719  00F2               	movwf	?i1___lmul+2
  8192     171A  087A               	movf	i1___lmul@product+1,w
  8193     171B  00F1               	movwf	?i1___lmul+1
  8194     171C  0879               	movf	i1___lmul@product,w
  8195     171D  00F0               	movwf	?i1___lmul
  8196     171E                     i1l471:
  8197     171E  0008               	return
  8198     171F                     __end_ofi1___lmul:
  8199                           
  8200                           	psect	text34
  8201     1575                     __ptext34:	
  8202 ;; *************** function i1___wmul *****************
  8203 ;; Defined at:
  8204 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  multiplier      2   13[BANK0 ] unsigned int 
  8207 ;;  multiplicand    2   15[BANK0 ] unsigned int 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  product         2   17[BANK0 ] unsigned int 
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  2   13[BANK0 ] unsigned int 
  8212 ;; Registers used:
  8213 ;;		wreg, status,2, status,0
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8219 ;;      Params:         0       4       0       0       0
  8220 ;;      Locals:         0       2       0       0       0
  8221 ;;      Temps:          0       0       0       0       0
  8222 ;;      Totals:         0       6       0       0       0
  8223 ;;Total ram usage:        6 bytes
  8224 ;; Hardware stack levels used: 1
  8225 ;; This function calls:
  8226 ;;		Nothing
  8227 ;; This function is called by:
  8228 ;;		i1_UART_TxString
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232     1575                     i1___wmul:	
  8233                           ;psect for function i1___wmul
  8234                           
  8235     1575                     i1l2395:	
  8236                           ;incstack = 0
  8237                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  8238                           
  8239     1575  1283               	bcf	3,5	;RP0=0, select bank0
  8240     1576  1303               	bcf	3,6	;RP1=0, select bank0
  8241     1577  01B1               	clrf	i1___wmul@product
  8242     1578  01B2               	clrf	i1___wmul@product+1
  8243     1579                     i1l2397:
  8244     1579  1C2D               	btfss	i1___wmul@multiplier,0
  8245     157A  2D7C               	goto	u214_21
  8246     157B  2D7D               	goto	u214_20
  8247     157C                     u214_21:
  8248     157C  2D83               	goto	i1l457
  8249     157D                     u214_20:
  8250     157D                     i1l2399:
  8251     157D  082F               	movf	i1___wmul@multiplicand,w
  8252     157E  07B1               	addwf	i1___wmul@product,f
  8253     157F  1803               	skipnc
  8254     1580  0AB2               	incf	i1___wmul@product+1,f
  8255     1581  0830               	movf	i1___wmul@multiplicand+1,w
  8256     1582  07B2               	addwf	i1___wmul@product+1,f
  8257     1583                     i1l457:
  8258     1583  3001               	movlw	1
  8259     1584                     u215_25:
  8260     1584  1003               	clrc
  8261     1585  0DAF               	rlf	i1___wmul@multiplicand,f
  8262     1586  0DB0               	rlf	i1___wmul@multiplicand+1,f
  8263     1587  3EFF               	addlw	-1
  8264     1588  1D03               	skipz
  8265     1589  2D84               	goto	u215_25
  8266     158A                     i1l2401:
  8267     158A  3001               	movlw	1
  8268     158B                     u216_25:
  8269     158B  1003               	clrc
  8270     158C  0CAE               	rrf	i1___wmul@multiplier+1,f
  8271     158D  0CAD               	rrf	i1___wmul@multiplier,f
  8272     158E  3EFF               	addlw	-1
  8273     158F  1D03               	skipz
  8274     1590  2D8B               	goto	u216_25
  8275     1591                     i1l2403:
  8276     1591  082D               	movf	i1___wmul@multiplier,w
  8277     1592  042E               	iorwf	i1___wmul@multiplier+1,w
  8278     1593  1D03               	btfss	3,2
  8279     1594  2D96               	goto	u217_21
  8280     1595  2D97               	goto	u217_20
  8281     1596                     u217_21:
  8282     1596  2D79               	goto	i1l2397
  8283     1597                     u217_20:
  8284     1597                     i1l2405:
  8285     1597  0832               	movf	i1___wmul@product+1,w
  8286     1598  00AE               	movwf	?i1___wmul+1
  8287     1599  0831               	movf	i1___wmul@product,w
  8288     159A  00AD               	movwf	?i1___wmul
  8289     159B                     i1l459:
  8290     159B  0008               	return
  8291     159C                     __end_ofi1___wmul:
  8292                           
  8293                           	psect	text35
  8294     0891                     __ptext35:	
  8295 ;; *************** function i1___awmod *****************
  8296 ;; Defined at:
  8297 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  divisor         2    7[BANK0 ] int 
  8300 ;;  dividend        2    9[BANK0 ] int 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  sign            1   12[BANK0 ] unsigned char 
  8303 ;;  counter         1   11[BANK0 ] unsigned char 
  8304 ;; Return value:  Size  Location     Type
  8305 ;;                  2    7[BANK0 ] int 
  8306 ;; Registers used:
  8307 ;;		wreg, status,2, status,0
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8313 ;;      Params:         0       4       0       0       0
  8314 ;;      Locals:         0       2       0       0       0
  8315 ;;      Temps:          1       0       0       0       0
  8316 ;;      Totals:         1       6       0       0       0
  8317 ;;Total ram usage:        7 bytes
  8318 ;; Hardware stack levels used: 1
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		i1_UART_TxString
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326     0891                     i1___awmod:	
  8327                           ;psect for function i1___awmod
  8328                           
  8329     0891                     i1l2409:	
  8330                           ;incstack = 0
  8331                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  8332                           
  8333     0891  1283               	bcf	3,5	;RP0=0, select bank0
  8334     0892  1303               	bcf	3,6	;RP1=0, select bank0
  8335     0893  01AC               	clrf	i1___awmod@sign
  8336     0894                     i1l2411:
  8337     0894  1FAA               	btfss	i1___awmod@dividend+1,7
  8338     0895  2897               	goto	u218_21
  8339     0896  2898               	goto	u218_20
  8340     0897                     u218_21:
  8341     0897  289F               	goto	i1l2417
  8342     0898                     u218_20:
  8343     0898                     i1l2413:
  8344     0898  09A9               	comf	i1___awmod@dividend,f
  8345     0899  09AA               	comf	i1___awmod@dividend+1,f
  8346     089A  0AA9               	incf	i1___awmod@dividend,f
  8347     089B  1903               	skipnz
  8348     089C  0AAA               	incf	i1___awmod@dividend+1,f
  8349     089D                     i1l2415:
  8350     089D  01AC               	clrf	i1___awmod@sign
  8351     089E  0AAC               	incf	i1___awmod@sign,f
  8352     089F                     i1l2417:
  8353     089F  1FA8               	btfss	i1___awmod@divisor+1,7
  8354     08A0  28A2               	goto	u219_21
  8355     08A1  28A3               	goto	u219_20
  8356     08A2                     u219_21:
  8357     08A2  28A8               	goto	i1l2421
  8358     08A3                     u219_20:
  8359     08A3                     i1l2419:
  8360     08A3  09A7               	comf	i1___awmod@divisor,f
  8361     08A4  09A8               	comf	i1___awmod@divisor+1,f
  8362     08A5  0AA7               	incf	i1___awmod@divisor,f
  8363     08A6  1903               	skipnz
  8364     08A7  0AA8               	incf	i1___awmod@divisor+1,f
  8365     08A8                     i1l2421:
  8366     08A8  0827               	movf	i1___awmod@divisor,w
  8367     08A9  0428               	iorwf	i1___awmod@divisor+1,w
  8368     08AA  1903               	btfsc	3,2
  8369     08AB  28AD               	goto	u220_21
  8370     08AC  28AE               	goto	u220_20
  8371     08AD                     u220_21:
  8372     08AD  28DD               	goto	i1l2439
  8373     08AE                     u220_20:
  8374     08AE                     i1l2423:
  8375     08AE  01AB               	clrf	i1___awmod@counter
  8376     08AF  0AAB               	incf	i1___awmod@counter,f
  8377     08B0  28BC               	goto	i1l2429
  8378     08B1                     i1l2425:
  8379     08B1  3001               	movlw	1
  8380     08B2                     u221_25:
  8381     08B2  1003               	clrc
  8382     08B3  0DA7               	rlf	i1___awmod@divisor,f
  8383     08B4  0DA8               	rlf	i1___awmod@divisor+1,f
  8384     08B5  3EFF               	addlw	-1
  8385     08B6  1D03               	skipz
  8386     08B7  28B2               	goto	u221_25
  8387     08B8                     i1l2427:
  8388     08B8  3001               	movlw	1
  8389     08B9  00FD               	movwf	??i1___awmod
  8390     08BA  087D               	movf	??i1___awmod,w
  8391     08BB  07AB               	addwf	i1___awmod@counter,f
  8392     08BC                     i1l2429:
  8393     08BC  1FA8               	btfss	i1___awmod@divisor+1,7
  8394     08BD  28BF               	goto	u222_21
  8395     08BE  28C0               	goto	u222_20
  8396     08BF                     u222_21:
  8397     08BF  28B1               	goto	i1l2425
  8398     08C0                     u222_20:
  8399     08C0                     i1l2431:
  8400     08C0  0828               	movf	i1___awmod@divisor+1,w
  8401     08C1  022A               	subwf	i1___awmod@dividend+1,w
  8402     08C2  1D03               	skipz
  8403     08C3  28C6               	goto	u223_25
  8404     08C4  0827               	movf	i1___awmod@divisor,w
  8405     08C5  0229               	subwf	i1___awmod@dividend,w
  8406     08C6                     u223_25:
  8407     08C6  1C03               	skipc
  8408     08C7  28C9               	goto	u223_21
  8409     08C8  28CA               	goto	u223_20
  8410     08C9                     u223_21:
  8411     08C9  28D0               	goto	i1l2435
  8412     08CA                     u223_20:
  8413     08CA                     i1l2433:
  8414     08CA  0827               	movf	i1___awmod@divisor,w
  8415     08CB  02A9               	subwf	i1___awmod@dividend,f
  8416     08CC  0828               	movf	i1___awmod@divisor+1,w
  8417     08CD  1C03               	skipc
  8418     08CE  03AA               	decf	i1___awmod@dividend+1,f
  8419     08CF  02AA               	subwf	i1___awmod@dividend+1,f
  8420     08D0                     i1l2435:
  8421     08D0  3001               	movlw	1
  8422     08D1                     u224_25:
  8423     08D1  1003               	clrc
  8424     08D2  0CA8               	rrf	i1___awmod@divisor+1,f
  8425     08D3  0CA7               	rrf	i1___awmod@divisor,f
  8426     08D4  3EFF               	addlw	-1
  8427     08D5  1D03               	skipz
  8428     08D6  28D1               	goto	u224_25
  8429     08D7                     i1l2437:
  8430     08D7  3001               	movlw	1
  8431     08D8  02AB               	subwf	i1___awmod@counter,f
  8432     08D9  1D03               	btfss	3,2
  8433     08DA  28DC               	goto	u225_21
  8434     08DB  28DD               	goto	u225_20
  8435     08DC                     u225_21:
  8436     08DC  28C0               	goto	i1l2431
  8437     08DD                     u225_20:
  8438     08DD                     i1l2439:
  8439     08DD  082C               	movf	i1___awmod@sign,w
  8440     08DE  1903               	btfsc	3,2
  8441     08DF  28E1               	goto	u226_21
  8442     08E0  28E2               	goto	u226_20
  8443     08E1                     u226_21:
  8444     08E1  28E7               	goto	i1l2443
  8445     08E2                     u226_20:
  8446     08E2                     i1l2441:
  8447     08E2  09A9               	comf	i1___awmod@dividend,f
  8448     08E3  09AA               	comf	i1___awmod@dividend+1,f
  8449     08E4  0AA9               	incf	i1___awmod@dividend,f
  8450     08E5  1903               	skipnz
  8451     08E6  0AAA               	incf	i1___awmod@dividend+1,f
  8452     08E7                     i1l2443:
  8453     08E7  082A               	movf	i1___awmod@dividend+1,w
  8454     08E8  00A8               	movwf	?i1___awmod+1
  8455     08E9  0829               	movf	i1___awmod@dividend,w
  8456     08EA  00A7               	movwf	?i1___awmod
  8457     08EB                     i1l623:
  8458     08EB  0008               	return
  8459     08EC                     __end_ofi1___awmod:
  8460                           
  8461                           	psect	text36
  8462     152F                     __ptext36:	
  8463 ;; *************** function i1_UART_TxChar *****************
  8464 ;; Defined at:
  8465 ;;		line 808 in file "main.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  ch              1    wreg     unsigned char 
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  ch              1    1[COMMON] unsigned char 
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      void 
  8472 ;; Registers used:
  8473 ;;		wreg, status,2, status,0
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8479 ;;      Params:         0       0       0       0       0
  8480 ;;      Locals:         1       0       0       0       0
  8481 ;;      Temps:          1       0       0       0       0
  8482 ;;      Totals:         2       0       0       0       0
  8483 ;;Total ram usage:        2 bytes
  8484 ;; Hardware stack levels used: 1
  8485 ;; This function calls:
  8486 ;;		Nothing
  8487 ;; This function is called by:
  8488 ;;		i1_UART_TxString
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492     152F                     i1_UART_TxChar:	
  8493                           ;psect for function i1_UART_TxChar
  8494                           
  8495                           
  8496                           ;incstack = 0
  8497                           ; Regs used in i1_UART_TxChar: [wreg+status,2+status,0]
  8498                           ;i1UART_TxChar@ch stored from wreg
  8499     152F  00F1               	movwf	i1UART_TxChar@ch
  8500     1530                     i1l2389:
  8501     1530                     i1l312:	
  8502                           ;main.c: 808: void UART_TxChar(char ch);main.c: 809: {;main.c: 811:     while(!(PIR1 & 0
      +                          x10));
  8503                           
  8504     1530  1283               	bcf	3,5	;RP0=0, select bank0
  8505     1531  1303               	bcf	3,6	;RP1=0, select bank0
  8506     1532  1E0C               	btfss	12,4	;volatile
  8507     1533  2D35               	goto	u213_21
  8508     1534  2D36               	goto	u213_20
  8509     1535                     u213_21:
  8510     1535  2D30               	goto	i1l312
  8511     1536                     u213_20:
  8512     1536                     i1l2391:
  8513                           
  8514                           ;main.c: 813:     PIR1 &= ~0x10;
  8515     1536  30EF               	movlw	239
  8516     1537  00F0               	movwf	??i1_UART_TxChar
  8517     1538  0870               	movf	??i1_UART_TxChar,w
  8518     1539  058C               	andwf	12,f	;volatile
  8519     153A                     i1l2393:
  8520                           
  8521                           ;main.c: 815:     TXREG = ch;
  8522     153A  0871               	movf	i1UART_TxChar@ch,w
  8523     153B  0099               	movwf	25	;volatile
  8524     153C                     i1l315:
  8525     153C  0008               	return
  8526     153D                     __end_ofi1_UART_TxChar:
  8527     007E                     btemp	set	126	;btemp
  8528     007E                     wtemp0	set	126
  8529                           
  8530                           	psect	idloc
  8531                           
  8532                           ;Config register IDLOC0 @ 0x2000
  8533                           ;	unspecified, using default values
  8534     2000                     	org	8192
  8535     2000  3FFF               	dw	16383
  8536                           
  8537                           ;Config register IDLOC1 @ 0x2001
  8538                           ;	unspecified, using default values
  8539     2001                     	org	8193
  8540     2001  3FFF               	dw	16383
  8541                           
  8542                           ;Config register IDLOC2 @ 0x2002
  8543                           ;	unspecified, using default values
  8544     2002                     	org	8194
  8545     2002  3FFF               	dw	16383
  8546                           
  8547                           ;Config register IDLOC3 @ 0x2003
  8548                           ;	unspecified, using default values
  8549     2003                     	org	8195
  8550     2003  3FFF               	dw	16383
  8551                           
  8552                           	psect	config
  8553                           
  8554                           ;Config register CONFIG @ 0x2007
  8555                           ;	Oscillator Selection bits
  8556                           ;	FOSC = HS, HS oscillator
  8557                           ;	Watchdog Timer Enable bit
  8558                           ;	WDTE = OFF, WDT disabled
  8559                           ;	Power-up Timer Enable bit
  8560                           ;	PWRTE = ON, PWRT enabled
  8561                           ;	Brown-out Reset Enable bit
  8562                           ;	BOREN = ON, BOR enabled
  8563                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  8564                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  8565                           ;	Data EEPROM Memory Code Protection bit
  8566                           ;	CPD = OFF, Data EEPROM code protection off
  8567                           ;	Flash Program Memory Write Enable bits
  8568                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  8569                           ;	In-Circuit Debugger Mode bit
  8570                           ;	DEBUG = 0x1, unprogrammed default
  8571                           ;	Flash Program Memory Code Protection bit
  8572                           ;	CP = OFF, Code protection off
  8573     2007                     	org	8199
  8574     2007  3FF2               	dw	16370

Data Sizes:
    Strings     244
    Constant    19
    Data        7
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      52
    BANK1            80     68      80
    BANK3            96      4      65
    BANK2            96     32      82

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Fill@id	PTR unsigned char  size(1) Largest target is 4
		 -> PIC_ID(BANK3[4]), 

    CompareStrings@str2	PTR unsigned char  size(1) Largest target is 17
		 -> datoTastierino(BANK3[17]), PIC_ID(BANK3[4]), 

    CompareStrings@str1	PTR unsigned char  size(2) Largest target is 17
		 -> datoSeriale(BANK0[17]), id_dest(BANK3[4]), 

    strcopy@source	PTR unsigned char  size(1) Largest target is 5
		 -> SplitPacket@part(BANK1[5]), 

    strcopy@dest	PTR unsigned char  size(2) Largest target is 17
		 -> datoSeriale(BANK0[17]), id_dest(BANK3[4]), 

    SplitPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> dato(BANK2[50]), 

    strcat@source	PTR unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[4]), STR_17(CODE[4]), STR_13(CODE[2]), main@num_rand_s_231(BANK2[16]), 
		 -> PIC_ID(BANK3[4]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Length@str	PTR unsigned char  size(2) Largest target is 50
		 -> datoSeriale(BANK0[17]), datoTastierino(BANK3[17]), id_dest(BANK3[4]), dato(BANK2[50]), 
		 -> packet(BANK3[15]), PIC_ID(BANK3[4]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_21(CODE[4]), STR_17(CODE[4]), STR_13(CODE[2]), main@num_rand_s_231(BANK2[16]), 
		 -> PIC_ID(BANK3[4]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    ConvertToString@str	PTR unsigned char  size(1) Largest target is 16
		 -> main@num_rand_s_231(BANK2[16]), PIC_ID(BANK3[4]), main@num_rand_s(BANK2[16]), 

    lcdPrint@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_24(CODE[15]), STR_23(CODE[16]), datoTastierino(BANK3[17]), STR_22(CODE[17]), 
		 -> STR_20(CODE[16]), STR_19(CODE[13]), STR_18(CODE[15]), STR_16(CODE[12]), 
		 -> STR_15(CODE[13]), STR_14(CODE[18]), STR_12(CODE[16]), STR_11(CODE[10]), 
		 -> main@num_rand_s_231(BANK2[16]), PIC_ID(BANK3[4]), STR_10(CODE[17]), STR_9(CODE[18]), 
		 -> STR_8(CODE[10]), main@num_rand_s(BANK2[16]), STR_7(CODE[12]), STR_6(CODE[10]), 
		 -> STR_5(CODE[8]), STR_4(CODE[10]), STR_3(CODE[8]), STR_2(CODE[17]), 
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IRS in COMMON

    i1_UART_TxString->i1___awmod
    i1_rand->i1___lmul
    i1___wmul->i1___awmod

Critical Paths under _main in BANK0

    _main->_lcdSend
    _read_NumPad->___awmod
    _read_NumPad->_eeprom_write
    _read_NumPad->_srand
    _CompareStrings->_Length
    _init_PIC->_eeprom_read
    _init_PIC->_lcdSend
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _Fill->_Length
    _UART_TxString->_UART_TxChar
    _UART_TxString->___awmod
    _UART_TxString->_srand
    _rand->___lmul
    ___wmul->___awmod
    _SplitPacket->_Length
    _SplitPacket->_strcopy
    _strcat->_Length

Critical Paths under _IRS in BANK0

    _IRS->i1_UART_TxString
    i1_UART_TxString->i1___wmul
    i1___wmul->i1___awmod
    i1___awmod->i1_rand

Critical Paths under _main in BANK1

    _main->_ConvertToString
    _read_NumPad->___wmul
    _CompareStrings->_Length
    _init_PIC->_ConvertToString
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _Fill->_Length
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _UART_TxString->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _SplitPacket->_strcopy
    _ConcatToPacket->_strcat
    _strcat->_Length

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_init_PIC

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   43133
                                              0 BANK2     32    32      0
                     _CompareStrings
                     _ConcatToPacket
                    _ConvertToString
                        _SplitPacket
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                         12    12      0    4324
                                             31 BANK1     12    12      0
                     _CompareStrings
                               _Fill
                            ___awmod
                             ___wmul
                       _eeprom_write
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     152
                                             28 BANK0      2     1      1
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CompareStrings                                       8     5      3     943
                                              5 BANK1      8     5      3
                             _Length
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             4     4      0   17610
                                              0 BANK3      4     4      0
                    _ConvertToString
                               _Fill
                          _UART_init
                        _eeprom_read
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
                           _lcdPrint
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2    5322
                                              2 BANK1      7     5      2
                            _lcdSend
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                             28 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                             28 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0    2942
                                              2 BANK1      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1    2942
                                             28 BANK0      2     1      1
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      31
                                             28 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4    1106
                                             55 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) _Fill                                                 4     4      0     808
                                              5 BANK1      4     4      0
                             _Length
 ---------------------------------------------------------------------------------
 (2) _ConvertToString                                     13     8      5    4394
                                             55 BANK1     13     8      5
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                  9     7      2    1203
                                             31 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     613
                                             28 BANK0      1     1      0
                                              0 BANK1     10     2      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     985
                                             40 BANK1     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        5     4      1    3143
                                             31 BANK1      5     4      1
                        _UART_TxChar
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     211
                                             28 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             12 BANK1      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                             28 BANK0      1     1      0
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                             25 BANK1      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                             29 BANK0      1     1      0
                                             19 BANK1      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      31
                                             28 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SplitPacket                                         17    17      0    1449
                                              8 BANK1     17    17      0
                             _Length
                            _strcopy
 ---------------------------------------------------------------------------------
 (2) _strcopy                                             10     7      3     514
                                             28 BANK0      2     2      0
                                              0 BANK1      8     5      3
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    2797
                                             17 BANK1      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                              12    10      2     685
                                              5 BANK1     12    10      2
                             _Length
 ---------------------------------------------------------------------------------
 (3) _Length                                               7     5      2     299
                                             28 BANK0      2     0      2
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IRS                                                  4     4      0     844
                                             24 BANK0      4     4      0
                    i1_UART_TxString
 ---------------------------------------------------------------------------------
 (6) i1_UART_TxString                                      5     4      1     844
                                             19 BANK0      5     4      1
                      i1_UART_TxChar
                          i1___awmod
                           i1___wmul
                             i1_rand
                            i1_srand
 ---------------------------------------------------------------------------------
 (7) i1_srand                                              2     0      2      48
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) i1_rand                                               7     5      2     144
                                              0 BANK0      7     5      2
                           i1___lmul
 ---------------------------------------------------------------------------------
 (8) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                             13 BANK0      6     2      4
                          i1___awmod (ARG)
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            7     3      4     348
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UART_TxChar                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CompareStrings
     _Length
   _ConcatToPacket
     _strcat
       _Length
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
     ___almod
     ___lmul
     _pow
   _SplitPacket
     _Length
     _strcopy
   _UART_TxString
     _UART_TxChar
     ___awmod
     ___wmul
     _rand
     _srand
   _init_PIC
     _ConvertToString
     _Fill
       _Length
     _UART_init
       ___aldiv
     _eeprom_read
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
     _lcdPrint
       _lcdSend
     _lcdSend
   _lcdPrint
   _lcdSend
   _read_NumPad
     _CompareStrings
     _Fill
     ___awmod
     ___wmul
     _eeprom_write
     _rand
     _srand

 _IRS (ROOT)
   i1_UART_TxString
     i1_UART_TxChar
     i1___awmod
       i1_rand (ARG)
         i1___lmul
     i1___wmul
       i1___awmod (ARG)
       i1_rand (ARG)
     i1_rand
     i1_srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      4      41       9       67.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     20      52      11       85.4%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     44      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      34       5       65.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     125      12        0.0%
ABS                  0      0     125       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jul 05 12:23:49 2023

                          pc 0002             ??_CompareStrings 00A8                           _iS 003E  
                         _iT 019E                           fsr 0004          ___wmul@multiplicand 00BB  
           i1___wmul@product 0031                          l202 1698                          l212 0FFF  
                        l223 1625                          l312 1540                          l217 17AF  
                        l226 0C9A                          l250 094A                          l322 0BCD  
                        l306 068E                          l315 154A                          l244 0F25  
                        l229 0CC2                          l309 16D8                          l181 0B58  
                        l190 15EF                          l254 0AE4                          l271 155B  
                        l184 1574                          l522 0DF0                          l450 164B  
                        l427 081F                          l187 0A0E                          l532 0E78  
                        l268 0A74                          l196 0890                          l284 055D  
                        l429 083A                          l453 165C                          l285 0565  
                        l446 1629                          l278 04C2                          l623 09A9  
                        l471 17FF                          l535 0D61                          l447 1629  
                        l457 15AA                          l545 0DDB                          l459 15C2  
                        l910 152E                          l913 06FF                          _IRS 0CC3  
         i1UART_TxString@str 0035                          _pow 165D                          fsr0 0004  
                        indf 0000                 ___awmod@sign 00B8                         ?_IRS 0070  
                       l3021 15B1                         l3101 0E13                         l3023 15B8  
                       l3015 159C                         l3111 0E42                         l3103 0E16  
                       l3031 15C9                         l3025 15BE                         l3017 15A0  
                       l3121 0E65                         l3113 0E50                         l3105 0E23  
                       l3041 15D5                         l3033 15CA                         l3019 15A4  
                       l3123 0E70                         l3115 0E51                         l3107 0E27  
                       l3131 0D54                         l3051 1664                         l3043 15DF  
                       l3035 15CB                         l3301 0C4C                         l3117 0E5A  
                       l3109 0E30                         l3141 0D90                         l3133 0D65  
                       l3053 1667                         l3221 1699                         l3045 15E2  
                       l3037 15CE                         l3029 15C6                         l3213 0ACE  
                       l3205 0AB1                         l3063 15F0                         l3303 0C64  
                       l3119 0E60                         l3143 0D94                         l3151 0DC3  
                       l3135 0D70                         l3127 0D4D                         l3055 167F  
                       l3231 16D5                         l3223 169F                         l3047 15EC  
                       l3039 15D0                         l3207 0AB3                         l3215 0AD2  
                       l3065 15F5                         l3305 0C8E                         l3321 092E  
                       l3313 08EC                         l3081 17E4                         l3073 17B0  
                       l3153 0DC8                         l3145 0DA6                         l3137 0D78  
                       l3129 0D50                         l3057 1685                         l3049 1660  
                       l3233 16D6                         l3225 16A4                         l3241 09B8  
                       l3161 0840                         l3401 0B17                         l3217 0AE3  
                       l3067 15FB                         l3307 0C94                         l3315 08F1  
                       l3083 17F7                         l3075 17BA                         l3091 0DE3  
                       l3155 0DD3                         l3147 0DB4                         l3139 0D7B  
                       l3059 1692                         l3171 0F30                         l3235 16D7  
                       l3227 16A7                         l3251 09EA                         l3243 09BB  
                       l3163 0866                         l3411 0B53                         l3403 0B22  
                       l3331 164A                         l3323 162F                         l3069 161B  
                       l3309 0CBC                         l3317 0919                         l3077 17BE  
                       l3093 0DF4                         l3149 0DBD                         l3181 0F5F  
                       l3173 0F34                         l3229 16A8                         l3253 09F3  
                       l3245 09C2                         l3237 09AA                         l3261 155C  
                       l3165 086E                         l3413 0B56                         l3405 0B2B  
                       l3341 165B                         l3333 164F                         l3325 163B  
                       l3501 05FD                         l3319 0921                         l3079 17D5  
                       l3343 1526                         l3095 0DFF                         l3087 0DDC  
                       l3191 0FE3                         l3183 0F8A                         l3175 0F39  
                       l3167 0F26                         l3255 09FC                         l3247 09D6  
                       l3239 09AE                         l3263 1562                         l3159 083B  
                       l3407 0B37                         l3335 1653                         l3327 1643  
                       l3511 0611                         l3503 05FF                         l3423 0460  
                       l3415 0459                         l3601 0F07                         l3353 1540  
                       l3361 094E                         l3345 068F                         l3097 0E03  
                       l3089 0DDF                         l3185 0F9C                         l3193 0FE9  
                       l3177 0F58                         l3169 0F2C                         l3281 0A45  
                       l3273 0A12                         l3257 0A05                         l3249 09E1  
                       l3265 1566                         l3409 0B4D                         l3337 1654  
                       l3329 1646                         l3521 0642                         l3505 0605  
                       l3513 0617                         l3441 04C0                         l3433 0480  
                       l3425 0466                         l3417 045F                         l3603 0F09  
                       l3355 1544                         l3371 0962                         l3363 0952  
                       l3347 06CC                         l3099 0E0B                         l3195 0FF6  
                       l3187 0FBD                         l3179 0F5B                         l3283 0A49  
                       l3275 0A29                         l3259 154B                         l3267 156A  
                       l3339 1655                         l3523 0647                         l3515 061E  
                       l3507 060A                         l3531 0671                         l3451 04DA  
                       l3443 04C8                         l3435 0493                         l3427 047D  
                       l3541 1779                         l3605 0F0F                         l3357 1548  
                       l3381 097E                         l3373 0968                         l3365 0957  
                       l3349 06DA                         l3189 0FDD                         l3285 0A4E  
                       l3293 0A65                         l3269 0828                         l3197 0A75  
                       l3533 0678                         l3525 064D                         l3517 063B  
                       l3509 060F                         l3461 053E                         l3453 04E1  
                       l3445 04CE                         l3437 049E                         l3701 0214  
                       l3621 0089                         l3613 0069                         l3551 179C  
                       l3543 177F                         l3391 09A0                         l3383 0988  
                       l3375 096B                         l3367 0959                         l3359 094B  
                       l3287 0A5C                         l3279 0A37                         l3199 0AAF  
                       l3527 066A                         l3463 054B                         l3455 04E6  
                       l3471 0566                         l3447 04D3                         l3535 0684  
                       l3439 04B3                         l3711 022D                         l3703 0218  
                       l3631 00B9                         l3623 009D                         l3615 006E  
                       l3553 17A9                         l3545 1787                         l3393 09A5  
                       l3385 098E                         l3377 0972                         l3369 095D  
                       l3561 0B72                         l3537 0688                         l3481 05B7  
                       l3473 056B                         l3465 0557                         l3457 04EC  
                       l3449 04D4                         l3801 0387                         l3721 024D  
                       l3713 022F                         l3705 021A                         l3641 00E9  
                       l3633 00CD                         l3617 0075                         l3625 00A0  
                       l3299 0C4A                         l3547 178E                         l3539 1769  
                       l3571 0E7C                         l3387 0995                         l3379 097A  
                       l3563 0B7D                         l3555 0B5C                         l3491 05E7  
                       l3483 05C2                         l3475 056E                         l3467 055B  
                       l3459 04F2                         l3811 03AB                         l3803 038C  
                       l3731 027A                         l3723 0252                         l3715 0230  
                       l3707 021B                         l3651 0119                         l3643 00FD  
                       l3627 00A5                         l3635 00D0                         l3619 007E  
                       l3549 1796                         l3581 0EB2                         l3573 0E80  
                       l3389 099B                         l3565 0B82                         l3557 0B5F  
                       l3397 0AE5                         l3493 05E9                         l3485 05C9  
                       l3477 0573                         l3469 0561                         l3821 03D7  
                       l3813 03BF                         l3805 0392                         l3741 02A5  
                       l3733 027E                         l3725 0258                         l3717 023E  
                       l3709 0229                         l3661 013C                         l3653 0123  
                       l3637 00D5                         l3645 0100                         l3629 00AE  
                       l3591 0EDB                         l3583 0EBF                         l3575 0E97  
                       l3567 0B91                         l3559 0B6A                         l3399 0B11  
                       l3487 05DB                         l3479 0580                         l3495 05EC  
                       l3831 03F2                         l3823 03E0                         l3815 03CC  
                       l3807 0397                         l3751 02C3                         l3743 02A9  
                       l3735 027F                         l3727 0260                         l3719 0247  
                       l3671 017E                         l3663 0154                         l3655 012B  
                       l3647 0105                         l3639 00DE                         l3593 0EE0  
                       l3585 0EC5                         l3577 0E9A                         l3569 0B9B  
                       l3905 0A6C                         l3497 05F1                         l3489 05E0  
                       l3841 0413                         l3833 03F4                         l3825 03EB  
                       l3817 03D0                         l3809 03A0                         l3761 02F6  
                       l3753 02CC                         l3745 02AD                         l3737 028D  
                       l3729 0272                         l3681 019C                         l3665 015F  
                       l3673 0181                         l3649 010E                         l3657 012E  
                       l3907 0EF1                         l3587 0ECA                         l3579 0EA8  
                       l3499 05F8                         l3851 043D                         l3835 03F6  
                       l3827 03EF                         l3819 03D2                         l3843 041C  
                       l3763 0308                         l3771 0333                         l3755 02D7  
                       l3747 02AF                         l3739 029B                         l3691 01D2  
                       l3683 01A7                         l3675 0186                         l3667 016A  
                       l3659 0133                         l3589 0ECF                         l3597 0EEC  
                       l3845 0424                         l3853 0451                         l3837 03F7  
                       l3829 03F1                         l3781 0354                         l3773 0336  
                       l3765 0310                         l3757 02E4                         l3749 02B8  
                       l3693 01EA                         l3677 018E                         l3685 01BB  
                       l3669 0173                         l3599 0EFF                         l3847 0429  
                       l3839 0405                         l3791 035E                         l3783 0358  
                       l3767 0316                         l3759 02EE                         l3775 0339  
                       l3695 01F5                         l3687 01BF                         l3679 0193  
                       l3849 0432                         l3793 0360                         l3785 0359  
                       l3777 0340                         l3769 0321                         l3697 0200  
                       l3689 01C9                         l3795 0361                         l3787 035A  
                       l3779 0349                         l3699 0209                         l3797 036F  
                       l3789 035C                         l3799 037D                         ?_pow 00BF  
                       STR_1 07DE                         STR_2 075A                         STR_3 0807  
                       STR_4 07F3                         STR_5 0807                         STR_6 07FD  
                       STR_7 07D2                         STR_8 07E9                         STR_9 0725  
                       _T0IF 005A                         u3001 17C7                         u3002 17CE  
                       u3003 17D5                         u3100 0E42                         u3101 0E41  
                       u3030 17F7                         u3031 17F6                         u3015 17D9  
                       u3120 0E60                         u3040 0DE3                         u4000 02F6  
                       u3025 17E5                         u3121 0E5F                         u3105 0E3E  
                       u3041 0DE2                         u4001 02F5                         u3130 0E65  
                       u3050 0DF4                         u3210 0DC3                         u4010 0308  
                       u3131 0E64                         u3115 0E52                         u3051 0DF3  
                       u3211 0DC2                         u4011 0307                         u3060 0E13  
                       u3220 0DC8                         u3140 0D54                         u3300 0ACD  
                       u4100 0429                         u4020 0310                         u3061 0E12  
                       u3221 0DC7                         u3205 0DB5                         u3141 0D53  
                       u3301 0ACC                         u4101 0428                         u4021 030F  
                       u3150 0D65                         u3230 084E                         u3310 0AE3  
                       u4030 0316                         u3151 0D64                         u3311 0AE2  
                       u4031 0315                         u3400 0940                         u3080 0E27  
                       u3160 0D78                         u3320 16B8                         u3240 0878  
                       u4040 0340                         u3081 0E26                         u3161 0D77  
                       u4041 033F                         u3330 0828                         u3250 0890  
                       u3410 162F                         u4050 038C                         u3075 0E18  
                       u3331 0825                         u3251 088F                         u3411 162E  
                       u4051 038B                         u3500 097E                         u3180 0D94  
                       u3260 0F30                         u3340 0A36                         u3420 164A  
                       u4060 0392                         u3501 097D                         u3181 0D93  
                       u3261 0F2F                         u3341 0A35                         u3325 16B3  
                       u3421 1649                         u4117 0499                         u4061 0391  
                       u3350 0C70                         u3510 0988                         u3190 0DA6  
                       u3270 0F89                         u3430 165B                         u4070 0397  
                       u3511 0987                         u3095 0E29                         u3191 0DA5  
                       u3175 0D7F                         u3271 0F88                         u4127 09B4  
                       u3431 165A                         u4071 0396                         _PIE1 008C  
                       u3360 0CA4                         u3440 06F7                         u3280 0FF6  
                       u3600 04D3                         u4080 03D7                         u3281 0FF5  
                       u3345 0A32                         u4137 09C8                         u3601 04D2  
                       u4081 03D6                         u3370 0CBC                         u3450 1544  
                       u3530 099B                         u3290 0AAF                         u3610 04DA  
                       u4090 0424                         u3371 0CBB                         u3451 1543  
                       u3531 099A                         u3515 0984                         u3195 0DA2  
                       u4147 09DC                         u3291 0AAE                         u3611 04D9  
                       u4091 0423                         u3380 090E                         u3540 09A0  
                       u3460 0952                         u3700 05DB                         u3620 04E1  
                       u3541 099F                         u3525 098F                         u3461 0951  
                       u3445 06F2                         u3285 0FF2                         u4157 15DB  
                       u3701 05DA                         u3621 04E0                         u3390 092E  
                       u3470 095D                         u3550 0B17                         u3710 05E7  
                       u3630 04E6                         u3391 092D                         u3471 095C  
                       u4167 15E8                         u3551 0B16                         u3295 0AAB  
                       u3711 05E6                         u3631 04E5                         u3480 0968  
                       u2920 15A4                         u3800 0684                         u3720 05F1  
                       u3640 04EC                         u3560 0493                         u3481 0967  
                       u2921 15A3                         u3801 0683                         u3721 05F0  
                       u3641 04EB                         u3561 0492                         u3810 068E  
                       u3730 05F8                         u3650 054B                         u3570 04B3  
                       u3811 068D                         u3731 05F7                         u3651 054A  
                       u3571 04B2                         u3820 177F                         u3740 05FD  
                       u3660 056B                         u3900 00D5                         u3821 177E  
                       u3741 05FC                         u3661 056A                         u3901 00D4  
                       u2950 15BE                         u3830 0B7D                         u3750 060A  
                       u3670 0573                         u3590 04CE                         u3910 0105  
                       u3495 096C                         u2951 15BD                         u2935 15AB  
                       u3831 0B7C                         u3751 0609                         u3671 0572  
                       u3655 0547                         u3591 04CD                         u3911 0104  
                       u3840 0B82                         u2960 1692                         u3760 060F  
                       u3680 0580                         u3920 0133                         u2945 15B2  
                       u3841 0B81                         u2961 1691                         u3761 060E  
                       u3681 057F                         u3585 04B8                         u3921 0132  
                       u2970 160D                         u3850 0EA8                         u3770 061E  
                       u3690 05C9                         u3930 018E                         u3851 0EA7  
                       u3771 061D                         u3691 05C8                         u3931 018D  
                       u2980 161B                         u3860 0EB2                         u3780 0647  
                       u3940 0193                         _RCIF 0065                         u2981 161A  
                       u3861 0EB1                         u2965 168E                         u3781 0646  
                       u3941 0192                         u3870 0F25                         u2990 17BE  
                       u3790 064D                         u3950 01C9                         u3871 0F24  
                       u2991 17BD                         u3791 064C                         u3951 01C8  
                       u3960 0252                         u3880 0075                         u3961 0251  
                       u3881 0074                         _PIR1 000C                         u3970 0260  
                       u3890 00A5                         u3875 0F21                         u3971 025F  
                       u3955 01C5                         u3891 00A4                         u3980 0272  
                       u3981 0271                         u3990 027A                         u3991 0279  
                       _TMR0 0001               ??_eeprom_write 003D                         _Fill 0A0F  
                       _fail 0199                         _i_id 01A2                         _dato 0110  
                       _main 0069            ConcatToPacket@pkt 00B7                         _keyf 00EC  
                       _keys 0712                         _rand 068F            ConcatToPacket@str 00B1  
                       btemp 007E                         _type 019F                         pow@b 00C3  
                       pow@i 00C4                         pow@n 00C6                         start 0010  
            __end_ofi1_srand 1526                        ??_IRS 0038                        ??_pow 00C1  
               ?_init_NumPad 0070                 ?_init_Timer0 0070                        ?_Fill 0070  
            __end_of___aldiv 0E79              __end_of___almod 0DDC                        ?_main 0070  
                      ?_rand 00AC                        _EEADR 010D                        STR_10 0749  
                      STR_11 07E9                        STR_20 078B                        STR_12 076B  
                      STR_13 0817                        STR_21 080F                        STR_22 0749  
                      STR_14 0737                        STR_15 07B9                        STR_23 077B  
                      STR_16 07C6                        STR_24 079B                        STR_17 0813  
                      STR_18 07AA                        STR_19 07B9              __end_of___awmod 09AA  
               ?_read_NumPad 0070                        i1l312 1530                        i1l322 0C46  
                      i1l315 153C                        i1l334 0D42                        i1l623 08EB  
                      i1l471 171E                        i1l457 1583                        i1l459 159B  
                      i1l910 1525                        i1l913 1765                        _RCREG 001A  
                      _RCSTA 0018                        _SPBRG 0099                        _PORTB 0006  
                      _PORTD 0008                        _TRISB 0086                        _TRISC 0087  
                      _TRISD 0088                        _TXREG 0019                        _TXSTA 0098  
            __end_of_colMask 0725          ___lmul@multiplicand 00A4              __end_of_lcdSend 15F0  
             i1___awmod@sign 002C                        _randx 0050                        _srand 1526  
           __end_ofi1___lmul 171F                        pclath 000A             __end_ofi1___wmul 159C  
            __end_of_rowMask 0722                        status 0003          i1___wmul@multiplier 002D  
                      wtemp0 007E              __end_of_strcopy 094B           main@num_rand_s_231 0152  
           ?i1_UART_TxString 0033                 __end_of_Fill 0A75              __initialization 0013  
               __end_of_main 0459                 __end_of_keys 071E                 __end_of_rand 0700  
        i1___lmul@multiplier 0070                       ??_Fill 00A5                       ??_main 003E  
                     ??_rand 00AE            strcat@length_dest 00AF                       _EEDATA 010C  
                     _EECON1 018C                       _EECON2 018D                       ?_srand 003C  
                     i1l2141 16E5                       i1l2143 16FC                       i1l2401 158A  
                     i1l2145 1705                       i1l2137 16D9                       i1l2411 0894  
                     i1l2403 1591                       i1l2147 1716                       i1l2139 16E1  
                     i1l2421 08A8                       i1l2413 0898                       i1l2405 1597  
                     i1l2431 08C0                       i1l2423 08AE                       i1l2415 089D  
                     i1l2441 08E2                       i1l2433 08CA                       i1l2425 08B1  
                     i1l2417 089F                       i1l2409 0891                       i1l2443 08E7  
                     i1l2435 08D0                       i1l2427 08B8                       i1l2419 08A3  
                     i1l2451 1740                       i1l2437 08D7                       i1l2429 08BC  
                     i1l2453 174E                       i1l2391 1536                       i1l2439 08DD  
                     i1l2447 151D                       i1l2393 153A                       i1l2449 171F  
                     i1l2395 1575                       i1l2389 1530                       i1l2397 1579  
                     i1l2399 157D                       i1l2681 0BF2                       i1l2673 0BD1  
                     i1l2683 0BF7                       i1l2675 0BD4                       i1l2931 0CC3  
                     i1l2685 0C02                       i1l2677 0BDF                       i1l2941 0CD9  
                     i1l2933 0CC7                       i1l2687 0C0C                       i1l2679 0BE7  
                     i1l2951 0D17                       i1l2935 0CCD                       i1l2943 0CDC  
                     u220_20 08AE                       u220_21 08AD                       i1l2961 0D38  
                     i1l2953 0D1B                       i1l2945 0CE0                       i1l2937 0CD1  
                     i1l2955 0D26                       i1l2947 0CFA                       i1l2963 0D41  
                     i1l2939 0CD5                       i1l2957 0D33                       i1l2949 0D0C  
                     u213_20 1536                       u213_21 1535                       u221_25 08B2  
                     u222_20 08C0                       u214_20 157D                       u222_21 08BF  
                     u214_21 157C                       u223_20 08CA                       u223_21 08C9  
                     u223_25 08C6                       u215_25 1584                       u224_25 08D1  
                     u216_25 158B                       u225_20 08DD                       u217_20 1597  
                     _INTCON 000B                       u225_21 08DC                       u217_21 1596  
                     u226_20 08E2                       u218_20 0898                       u226_21 08E1  
                     u218_21 0897                       u219_20 08A3                       u227_20 175D  
                     u219_21 08A2                       u227_25 1758                       u180_20 1716  
                     u180_21 1715                       u261_20 0BF2                       u261_21 0BF1  
                     u262_20 0BF7                       u262_21 0BF6                       u176_20 16E5  
                     u176_21 16E4                       u177_21 16EE                       u177_22 16F5  
                     u177_23 16FC                       u290_20 0D17                       u290_21 0D16  
                     u178_25 16FE                       u291_20 0D33                       u291_21 0D32  
                     u179_25 1706                       _PIC_ID 01C7                       u286_20 0CC7  
                     u286_21 0CC6                       u287_20 0CE0                       u287_21 0CDF  
                     u288_20 0CFA                       u288_21 0CF9                    ??i1_srand 0072  
                     u289_20 0D0C                       u289_21 0D0B                       u289_25 0D08  
                     Fill@id 00A8        i1UART_TxString@is_ACK 0033                       i1_rand 171F  
               ?_UART_TxChar 0070                       _Length 15F0             __end_of_lcdPrint 0891  
                     ___lmul 17B0                    ??___aldiv 00D0                    ??___almod 003C  
                     ___wmul 159C            __end_of_UART_init 16D9                    ??___awmod 003D  
        ConcatToPacket@delim 00B3             __end_of_init_LCD 0A0F             __end_of_init_PIC 0B59  
                     _packet 01B4                       _old_iT 019D              ___awmod@divisor 00B3  
       __end_of_eeprom_write 165D              ___awmod@counter 00B7                    ??_lcdSend 00A0  
                     _source 01A0                       _strcat 0C47            __end_ofi1___awmod 08EC  
                     saved_w 007E                       pow@exp 00BF                       srand@x 003C  
                  ??_strcopy 00A3               _datoTastierino 01A3      __end_of__initialization 0065  
            eeprom_read@addr 003D        __end_of_UART_TxString 0BCE                ??_SplitPacket 00A8  
             __pcstackCOMMON 0070                 __pidataBANK0 1511                 __pidataBANK1 0003  
               __pidataBANK3 081A                __end_of_srand 152F                    ?i1___lmul 0070  
                  ?i1___wmul 002D            eeprom_write@value 003C                      ??_srand 003E  
                 __pbssBANK0 003E                   __pbssBANK1 00E4                   __pbssBANK2 0110  
                 __pbssBANK3 0190                      ?i1_rand 0020                 strcat@source 00A5  
                    ?_Length 003C                   __pmaintext 0069                      ?___lmul 00A0  
                    ?___wmul 00B9                   __pintentry 0004               ___lmul@product 00A8  
        __end_of_SplitPacket 0F26                   ??i1___lmul 0078                      ?_strcat 00A5  
                 ??i1___wmul 007E                    ?_lcdPrint 00A2       ConvertToString@n_cifre 00E3  
                 __stringtab 0700                    ?_init_LCD 0070                    ?_init_PIC 0070  
                    i1_srand 151D            ??_ConvertToString 00DC                      ___aldiv 0DDC  
                    ___almod 0D4D                      ___awmod 094B                      _colMask 0722  
                 _initialize 01D0                      _colScan 00EE                      _id_dest 01C3  
                    _lcdSend 15C3                      __ptext1 0459                      __ptext2 1626  
                    __ptext3 0A75                      __ptext4 0AE5                      __ptext5 083B  
                    __ptext6 155C                      __ptext7 154B                      __ptext8 09AA  
                    __ptext9 15C3               _ConcatToPacket 1766                      _compare 019B  
                    _maxFail 01CF             ___awmod@dividend 00B5             ___aldiv@dividend 00CC  
                    _seconds 00E4                   _keypressed 00EF                      _pr_succ 0195  
                    _rowMask 071E                      _rowScan 00ED                      _success 019A  
                 ??_lcdPrint 00A4                      clrloop0 1516                      _strcopy 08EC  
       end_of_initialization 0065               main@num_rand_s 0142                   ??_init_LCD 00A2  
                 ??_init_PIC 01CB                 _eeprom_write 1626               UART_TxString@n 00C1  
                 _pr_err_max 0197                i1_UART_TxChar 152F                  _SplitPacket 0E79  
           ___aldiv@quotient 00D3                 __pstringtext 0700                      strcat@n 00AD  
      i1___wmul@multiplicand 002F       __end_of_ConcatToPacket 17B0                    _UART_init 1699  
                  _PORTEbits 0009                    _TRISEbits 0089                    i1___awmod 0891  
              ??_eeprom_read 003C                    Length@len 00A3                    Length@str 003C  
             ?i1_UART_TxChar 0070               __end_ofi1_rand 1766               __end_of_Length 1626  
             __end_of___lmul 1800               __end_of___wmul 15C3              ?_ConcatToPacket 00B1  
                 ?_UART_init 00D7               __end_of_strcat 0CC3        i1___lmul@multiplicand 0074  
        start_initialization 0013                  __end_of_IRS 0D4D                  __end_of_pow 1699  
                 ?i1___awmod 0027                   init_PIC@id 01CD                     ??i1_rand 0022  
                   ??_Length 00A0              CompareStrings@i 00AC                     ??___lmul 003C  
                   ??___wmul 003E          __end_of_eeprom_read 083B                ??_init_NumPad 003C  
                __pdataBANK0 0050                  __pdataBANK1 00EF                  __pdataBANK3 01CF  
              ??_init_Timer0 003C           i1___awmod@dividend 0029                ??_read_NumPad 00BF  
                   ??_strcat 00A7               _CompareStrings 0A75                    ___latbits 0002  
              __pcstackBANK0 0020                __pcstackBANK1 00A0                __pcstackBANK2 0142  
              __pcstackBANK3 01CB            ??i1_UART_TxString 0034             i1___lmul@product 0079  
            _ConvertToString 0F26             eeprom_write@addr 00A0                     ?i1_srand 0070  
                _datoSeriale 003F              ??i1_UART_TxChar 0070                     ?___aldiv 00C8  
                   ?___almod 00A0                     ?___awmod 00B3             ___almod@dividend 00A4  
                ??_UART_init 00DB                     ?_lcdSend 003C       __end_of_CompareStrings 0AE5  
        __end_of_init_NumPad 155C          __end_of_init_Timer0 1575                UART_TxChar@ch 003D  
                strcopy@dest 00A0                  ??i1___awmod 007D          __end_of_read_NumPad 068F  
                   ?_strcopy 00A0              ___aldiv@divisor 00C8            interrupt_function 0004  
            ___aldiv@counter 00D1               ___wmul@product 00BD          UART_TxString@is_ACK 00BF  
               _milliseconds 00E8                    clear_ram0 1515                  _eeprom_read 081C  
              ??_UART_TxChar 003C                _UART_TxString 0B59                 ?_SplitPacket 0070  
               _old_num_rand 0190             ConvertToString@i 00E1             ConvertToString@j 00DF  
           ConvertToString@n 00D7                    lcdPrint@n 00A7                     i1___lmul 16D9  
                __stringbase 0712            ___wmul@multiplier 00B9                     i1___wmul 1575  
            ?_CompareStrings 00A5             i1UART_TxString@n 0036      __end_of_ConvertToString 1000  
          ___lmul@multiplier 00A0                     i1srand@x 0070           CompareStrings@str1 00A5  
         CompareStrings@str2 00A7                   _EECON1bits 018C               ?_UART_TxString 00BF  
           ??_ConcatToPacket 00B4            i1___awmod@divisor 0027            i1___awmod@counter 002B  
        __end_of_UART_TxChar 154B                  _init_NumPad 154B                  _init_Timer0 155C  
         __end_of__stringtab 0712                strcopy@source 00A2                  _read_NumPad 0459  
                 strcat@dest 00AC                     __ptext10 081C                     __ptext11 1699  
                   __ptext20 17B0                     __ptext12 0A0F                     __ptext21 159C  
                   __ptext13 0F26                     __ptext30 0BCE                     __ptext22 094B  
                   __ptext14 165D                     __ptext31 151D                     __ptext23 153D  
                   __ptext15 0D4D                     __ptext32 171F                     __ptext24 0E79  
                   __ptext16 0DDC                     __ptext33 16D9                     __ptext25 08EC  
                   __ptext17 0B59                     __ptext34 1575                     __ptext26 1766  
                   __ptext18 1526                     __ptext35 0891                     __ptext27 0C47  
                   __ptext19 068F                     __ptext36 152F                     __ptext28 15F0  
                   __ptext29 0CC3                     _lcdPrint 083B             UART_TxString@str 00C3  
              read_NumPad@id 00C9              ___almod@divisor 00A0  ConcatToPacket@packet_length 00B5  
            ___almod@counter 00A8              i1UART_TxChar@ch 0071                     _init_LCD 09AA  
                   _init_PIC 0AE5                 _pr_countdown 0194                     _old_i_id 01A1  
                   _recieved 019C                     _pr_empty 0196                     _pr_start 0198  
                   _num_rand 0192              i1_UART_TxString 0BCE                   _INTCONbits 000B  
           ?_ConvertToString 00D7                     intlevel1 0000            UART_init@baudrate 00D7  
            ??_UART_TxString 00C0          ConvertToString@temp 00DD           SplitPacket@section 00B2  
                  stringcode 070A                  _UART_TxChar 153D                   Fill@length 00A6  
                 _OPTION_REG 0081            SplitPacket@i_part 00B4                  lcdSend@dato 003D  
                lcdSend@tipo 003C           ConvertToString@str 00DB                     strcopy@n 003C  
                   stringtab 0700                 ___aldiv@sign 00D2                  lcdPrint@str 00A2  
               ___almod@sign 00A9                ?_eeprom_write 003C                   _STATUSbits 0003  
               ?_eeprom_read 0070              SplitPacket@part 00AD               SplitPacket@len 00AB  
    __end_ofi1_UART_TxString 0C47        __end_ofi1_UART_TxChar 153D               SplitPacket@pkt 00B6  
               SplitPacket@i 00B7  
