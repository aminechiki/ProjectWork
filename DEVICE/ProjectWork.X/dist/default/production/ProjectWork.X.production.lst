

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jun 28 12:40:19 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    59                           	dabs	1,0x7E,2
    60     0000                     
    61                           ; Version 2.40
    62                           ; Generated 17/11/2021 GMT
    63                           ; 
    64                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC16F877A Definitions
    94                           ; 
    95                           ; SFR Addresses
    96     0000                     	;# 
    97     0001                     	;# 
    98     0002                     	;# 
    99     0003                     	;# 
   100     0004                     	;# 
   101     0005                     	;# 
   102     0006                     	;# 
   103     0007                     	;# 
   104     0008                     	;# 
   105     0009                     	;# 
   106     000A                     	;# 
   107     000B                     	;# 
   108     000C                     	;# 
   109     000D                     	;# 
   110     000E                     	;# 
   111     000E                     	;# 
   112     000F                     	;# 
   113     0010                     	;# 
   114     0011                     	;# 
   115     0012                     	;# 
   116     0013                     	;# 
   117     0014                     	;# 
   118     0015                     	;# 
   119     0015                     	;# 
   120     0016                     	;# 
   121     0017                     	;# 
   122     0018                     	;# 
   123     0019                     	;# 
   124     001A                     	;# 
   125     001B                     	;# 
   126     001B                     	;# 
   127     001C                     	;# 
   128     001D                     	;# 
   129     001E                     	;# 
   130     001F                     	;# 
   131     0081                     	;# 
   132     0085                     	;# 
   133     0086                     	;# 
   134     0087                     	;# 
   135     0088                     	;# 
   136     0089                     	;# 
   137     008C                     	;# 
   138     008D                     	;# 
   139     008E                     	;# 
   140     0091                     	;# 
   141     0092                     	;# 
   142     0093                     	;# 
   143     0094                     	;# 
   144     0098                     	;# 
   145     0099                     	;# 
   146     009C                     	;# 
   147     009D                     	;# 
   148     009E                     	;# 
   149     009F                     	;# 
   150     010C                     	;# 
   151     010D                     	;# 
   152     010E                     	;# 
   153     010F                     	;# 
   154     018C                     	;# 
   155     018D                     	;# 
   156     0000                     	;# 
   157     0001                     	;# 
   158     0002                     	;# 
   159     0003                     	;# 
   160     0004                     	;# 
   161     0005                     	;# 
   162     0006                     	;# 
   163     0007                     	;# 
   164     0008                     	;# 
   165     0009                     	;# 
   166     000A                     	;# 
   167     000B                     	;# 
   168     000C                     	;# 
   169     000D                     	;# 
   170     000E                     	;# 
   171     000E                     	;# 
   172     000F                     	;# 
   173     0010                     	;# 
   174     0011                     	;# 
   175     0012                     	;# 
   176     0013                     	;# 
   177     0014                     	;# 
   178     0015                     	;# 
   179     0015                     	;# 
   180     0016                     	;# 
   181     0017                     	;# 
   182     0018                     	;# 
   183     0019                     	;# 
   184     001A                     	;# 
   185     001B                     	;# 
   186     001B                     	;# 
   187     001C                     	;# 
   188     001D                     	;# 
   189     001E                     	;# 
   190     001F                     	;# 
   191     0081                     	;# 
   192     0085                     	;# 
   193     0086                     	;# 
   194     0087                     	;# 
   195     0088                     	;# 
   196     0089                     	;# 
   197     008C                     	;# 
   198     008D                     	;# 
   199     008E                     	;# 
   200     0091                     	;# 
   201     0092                     	;# 
   202     0093                     	;# 
   203     0094                     	;# 
   204     0098                     	;# 
   205     0099                     	;# 
   206     009C                     	;# 
   207     009D                     	;# 
   208     009E                     	;# 
   209     009F                     	;# 
   210     010C                     	;# 
   211     010D                     	;# 
   212     010E                     	;# 
   213     010F                     	;# 
   214     018C                     	;# 
   215     018D                     	;# 
   216     0000                     	;# 
   217     0001                     	;# 
   218     0002                     	;# 
   219     0003                     	;# 
   220     0004                     	;# 
   221     0005                     	;# 
   222     0006                     	;# 
   223     0007                     	;# 
   224     0008                     	;# 
   225     0009                     	;# 
   226     000A                     	;# 
   227     000B                     	;# 
   228     000C                     	;# 
   229     000D                     	;# 
   230     000E                     	;# 
   231     000E                     	;# 
   232     000F                     	;# 
   233     0010                     	;# 
   234     0011                     	;# 
   235     0012                     	;# 
   236     0013                     	;# 
   237     0014                     	;# 
   238     0015                     	;# 
   239     0015                     	;# 
   240     0016                     	;# 
   241     0017                     	;# 
   242     0018                     	;# 
   243     0019                     	;# 
   244     001A                     	;# 
   245     001B                     	;# 
   246     001B                     	;# 
   247     001C                     	;# 
   248     001D                     	;# 
   249     001E                     	;# 
   250     001F                     	;# 
   251     0081                     	;# 
   252     0085                     	;# 
   253     0086                     	;# 
   254     0087                     	;# 
   255     0088                     	;# 
   256     0089                     	;# 
   257     008C                     	;# 
   258     008D                     	;# 
   259     008E                     	;# 
   260     0091                     	;# 
   261     0092                     	;# 
   262     0093                     	;# 
   263     0094                     	;# 
   264     0098                     	;# 
   265     0099                     	;# 
   266     009C                     	;# 
   267     009D                     	;# 
   268     009E                     	;# 
   269     009F                     	;# 
   270     010C                     	;# 
   271     010D                     	;# 
   272     010E                     	;# 
   273     010F                     	;# 
   274     018C                     	;# 
   275     018D                     	;# 
   276     0000                     	;# 
   277     0001                     	;# 
   278     0002                     	;# 
   279     0003                     	;# 
   280     0004                     	;# 
   281     0005                     	;# 
   282     0006                     	;# 
   283     0007                     	;# 
   284     0008                     	;# 
   285     0009                     	;# 
   286     000A                     	;# 
   287     000B                     	;# 
   288     000C                     	;# 
   289     000D                     	;# 
   290     000E                     	;# 
   291     000E                     	;# 
   292     000F                     	;# 
   293     0010                     	;# 
   294     0011                     	;# 
   295     0012                     	;# 
   296     0013                     	;# 
   297     0014                     	;# 
   298     0015                     	;# 
   299     0015                     	;# 
   300     0016                     	;# 
   301     0017                     	;# 
   302     0018                     	;# 
   303     0019                     	;# 
   304     001A                     	;# 
   305     001B                     	;# 
   306     001B                     	;# 
   307     001C                     	;# 
   308     001D                     	;# 
   309     001E                     	;# 
   310     001F                     	;# 
   311     0081                     	;# 
   312     0085                     	;# 
   313     0086                     	;# 
   314     0087                     	;# 
   315     0088                     	;# 
   316     0089                     	;# 
   317     008C                     	;# 
   318     008D                     	;# 
   319     008E                     	;# 
   320     0091                     	;# 
   321     0092                     	;# 
   322     0093                     	;# 
   323     0094                     	;# 
   324     0098                     	;# 
   325     0099                     	;# 
   326     009C                     	;# 
   327     009D                     	;# 
   328     009E                     	;# 
   329     009F                     	;# 
   330     010C                     	;# 
   331     010D                     	;# 
   332     010E                     	;# 
   333     010F                     	;# 
   334     018C                     	;# 
   335     018D                     	;# 
   336                           
   337                           	psect	idataBANK0
   338     08F2                     __pidataBANK0:
   339                           
   340                           ;initializer for _randx
   341     08F2  3401               	retlw	1
   342     08F3  3400               	retlw	0
   343     08F4  3400               	retlw	0
   344     08F5  3400               	retlw	0
   345                           
   346                           	psect	idataBANK1
   347     1611                     __pidataBANK1:
   348                           
   349                           ;initializer for _maxFail
   350     1611  3403               	retlw	3
   351                           
   352                           ;initializer for _initialize
   353     1612  3401               	retlw	1
   354                           
   355                           ;initializer for _keypressed
   356     1613  3463               	retlw	99
   357                           
   358                           	psect	strings
   359     0800                     __pstrings:
   360     0800                     stringtab:
   361     0800                     __stringtab:
   362                           
   363                           ;	String table - string pointers are 1 byte each
   364     0800  1BFF               	btfsc	btemp+1,7
   365     0801  280A               	ljmp	stringcode
   366     0802  1383               	bcf	3,7
   367     0803  187F               	btfsc	btemp+1,0
   368     0804  1783               	bsf	3,7
   369     0805  0800               	movf	0,w
   370     0806  0A84               	incf	4,f
   371     0807  1903               	skipnz
   372     0808  0AFF               	incf	btemp+1,f
   373     0809  0008               	return
   374     080A                     stringcode:
   375     080A                     stringdir:
   376     080A  3008               	movlw	high stringdir
   377     080B  008A               	movwf	10
   378     080C  0804               	movf	4,w
   379     080D  0A84               	incf	4,f
   380     080E  0782               	addwf	2,f
   381     080F                     __stringbase:
   382     080F  3400               	retlw	0
   383     0810                     __end_of__stringtab:
   384     0810                     _keys:
   385     0810  342A               	retlw	42
   386     0811  3437               	retlw	55
   387     0812  3434               	retlw	52
   388     0813  3431               	retlw	49
   389     0814  3430               	retlw	48
   390     0815  3438               	retlw	56
   391     0816  3435               	retlw	53
   392     0817  3432               	retlw	50
   393     0818  3423               	retlw	35
   394     0819  3439               	retlw	57
   395     081A  3436               	retlw	54
   396     081B  3433               	retlw	51
   397     081C                     __end_of_keys:
   398     081C                     _rowMask:
   399     081C  3401               	retlw	1
   400     081D  3402               	retlw	2
   401     081E  3404               	retlw	4
   402     081F  3408               	retlw	8
   403     0820                     __end_of_rowMask:
   404     0820                     _colMask:
   405     0820  34FE               	retlw	254
   406     0821  34FD               	retlw	253
   407     0822  34FB               	retlw	251
   408     0823                     __end_of_colMask:
   409     000B                     _INTCONbits	set	11
   410     0003                     _STATUSbits	set	3
   411     001A                     _RCREG	set	26
   412     0019                     _TXREG	set	25
   413     000C                     _PIR1	set	12
   414     0018                     _RCSTA	set	24
   415     0006                     _PORTB	set	6
   416     0008                     _PORTD	set	8
   417     0009                     _PORTEbits	set	9
   418     0001                     _TMR0	set	1
   419     000B                     _INTCON	set	11
   420     005A                     _T0IF	set	90
   421     0065                     _RCIF	set	101
   422     008C                     _PIE1	set	140
   423     0099                     _SPBRG	set	153
   424     0098                     _TXSTA	set	152
   425     0087                     _TRISC	set	135
   426     0086                     _TRISB	set	134
   427     0089                     _TRISEbits	set	137
   428     0088                     _TRISD	set	136
   429     0081                     _OPTION_REG	set	129
   430     010C                     _EEDATA	set	268
   431     010D                     _EEADR	set	269
   432     018D                     _EECON2	set	397
   433     018C                     _EECON1	set	396
   434     018C                     _EECON1bits	set	396
   435     0823                     STR_17:
   436     0823  3423               	retlw	35	;'#'
   437     0824  343D               	retlw	61	;'='
   438     0825  3463               	retlw	99	;'c'
   439     0826  346F               	retlw	111	;'o'
   440     0827  346E               	retlw	110	;'n'
   441     0828  3466               	retlw	102	;'f'
   442     0829  342E               	retlw	46	;'.'
   443     082A  3420               	retlw	32	;' '
   444     082B  342A               	retlw	42	;'*'
   445     082C  343D               	retlw	61	;'='
   446     082D  3463               	retlw	99	;'c'
   447     082E  3461               	retlw	97	;'a'
   448     082F  346E               	retlw	110	;'n'
   449     0830  3463               	retlw	99	;'c'
   450     0831  342E               	retlw	46	;'.'
   451     0832  3400               	retlw	0
   452     0833  3400               	retlw	0
   453     0834  3400               	retlw	0
   454     0835                     STR_9:
   455     0835  3449               	retlw	73	;'I'
   456     0836  346E               	retlw	110	;'n'
   457     0837  3473               	retlw	115	;'s'
   458     0838  3465               	retlw	101	;'e'
   459     0839  3472               	retlw	114	;'r'
   460     083A  3469               	retlw	105	;'i'
   461     083B  3473               	retlw	115	;'s'
   462     083C  3463               	retlw	99	;'c'
   463     083D  3469               	retlw	105	;'i'
   464     083E  3420               	retlw	32	;' '
   465     083F  3463               	retlw	99	;'c'
   466     0840  346F               	retlw	111	;'o'
   467     0841  3464               	retlw	100	;'d'
   468     0842  3469               	retlw	105	;'i'
   469     0843  3463               	retlw	99	;'c'
   470     0844  3465               	retlw	101	;'e'
   471     0845  3400               	retlw	0
   472     0846  3400               	retlw	0
   473     0847                     STR_7:
   474     0847  3423               	retlw	35	;'#'
   475     0848  343D               	retlw	61	;'='
   476     0849  3463               	retlw	99	;'c'
   477     084A  346F               	retlw	111	;'o'
   478     084B  346E               	retlw	110	;'n'
   479     084C  3466               	retlw	102	;'f'
   480     084D  342E               	retlw	46	;'.'
   481     084E  3420               	retlw	32	;' '
   482     084F  342A               	retlw	42	;'*'
   483     0850  343D               	retlw	61	;'='
   484     0851  3463               	retlw	99	;'c'
   485     0852  3461               	retlw	97	;'a'
   486     0853  346E               	retlw	110	;'n'
   487     0854  3463               	retlw	99	;'c'
   488     0855  342E               	retlw	46	;'.'
   489     0856  3400               	retlw	0
   490     0857  3400               	retlw	0
   491     0858                     STR_19:
   492     0858  344D               	retlw	77	;'M'
   493     0859  3449               	retlw	73	;'I'
   494     085A  344E               	retlw	78	;'N'
   495     085B  343D               	retlw	61	;'='
   496     085C  3430               	retlw	48	;'0'
   497     085D  3430               	retlw	48	;'0'
   498     085E  3430               	retlw	48	;'0'
   499     085F  342C               	retlw	44	;','
   500     0860  344D               	retlw	77	;'M'
   501     0861  3441               	retlw	65	;'A'
   502     0862  3458               	retlw	88	;'X'
   503     0863  343D               	retlw	61	;'='
   504     0864  3432               	retlw	50	;'2'
   505     0865  3435               	retlw	53	;'5'
   506     0866  3430               	retlw	48	;'0'
   507     0867  3400               	retlw	0
   508     0868  3400               	retlw	0
   509     0869                     STR_18:
   510     0869  3449               	retlw	73	;'I'
   511     086A  346E               	retlw	110	;'n'
   512     086B  3473               	retlw	115	;'s'
   513     086C  3465               	retlw	101	;'e'
   514     086D  3472               	retlw	114	;'r'
   515     086E  342E               	retlw	46	;'.'
   516     086F  3420               	retlw	32	;' '
   517     0870  3449               	retlw	73	;'I'
   518     0871  3444               	retlw	68	;'D'
   519     0872  3420               	retlw	32	;' '
   520     0873  3450               	retlw	80	;'P'
   521     0874  3449               	retlw	73	;'I'
   522     0875  3443               	retlw	67	;'C'
   523     0876  343A               	retlw	58	;':'
   524     0877  3400               	retlw	0
   525     0878  3400               	retlw	0
   526     0879                     STR_15:
   527     0879  3454               	retlw	84	;'T'
   528     087A  3465               	retlw	101	;'e'
   529     087B  346E               	retlw	110	;'n'
   530     087C  3474               	retlw	116	;'t'
   531     087D  342E               	retlw	46	;'.'
   532     087E  3420               	retlw	32	;' '
   533     087F  3465               	retlw	101	;'e'
   534     0880  3473               	retlw	115	;'s'
   535     0881  3461               	retlw	97	;'a'
   536     0882  3475               	retlw	117	;'u'
   537     0883  3472               	retlw	114	;'r'
   538     0884  3469               	retlw	105	;'i'
   539     0885  3474               	retlw	116	;'t'
   540     0886  3469               	retlw	105	;'i'
   541     0887  3400               	retlw	0
   542     0888  3400               	retlw	0
   543     0889                     STR_13:
   544     0889  3443               	retlw	67	;'C'
   545     088A  346F               	retlw	111	;'o'
   546     088B  3464               	retlw	100	;'d'
   547     088C  3469               	retlw	105	;'i'
   548     088D  3463               	retlw	99	;'c'
   549     088E  3465               	retlw	101	;'e'
   550     088F  3420               	retlw	32	;' '
   551     0890  3465               	retlw	101	;'e'
   552     0891  3472               	retlw	114	;'r'
   553     0892  3472               	retlw	114	;'r'
   554     0893  3461               	retlw	97	;'a'
   555     0894  3474               	retlw	116	;'t'
   556     0895  346F               	retlw	111	;'o'
   557     0896  3400               	retlw	0
   558     0897  3400               	retlw	0
   559     0898                     STR_3:
   560     0898  3449               	retlw	73	;'I'
   561     0899  3444               	retlw	68	;'D'
   562     089A  3420               	retlw	32	;' '
   563     089B  343D               	retlw	61	;'='
   564     089C  3420               	retlw	32	;' '
   565     089D  3433               	retlw	51	;'3'
   566     089E  3420               	retlw	32	;' '
   567     089F  3463               	retlw	99	;'c'
   568     08A0  3468               	retlw	104	;'h'
   569     08A1  3461               	retlw	97	;'a'
   570     08A2  3472               	retlw	114	;'r'
   571     08A3  3473               	retlw	115	;'s'
   572     08A4  3400               	retlw	0
   573     08A5  3400               	retlw	0
   574     08A6                     STR_10:
   575     08A6  3454               	retlw	84	;'T'
   576     08A7  3465               	retlw	101	;'e'
   577     08A8  346E               	retlw	110	;'n'
   578     08A9  3474               	retlw	116	;'t'
   579     08AA  3461               	retlw	97	;'a'
   580     08AB  3474               	retlw	116	;'t'
   581     08AC  3469               	retlw	105	;'i'
   582     08AD  3476               	retlw	118	;'v'
   583     08AE  3469               	retlw	105	;'i'
   584     08AF  343A               	retlw	58	;':'
   585     08B0  3420               	retlw	32	;' '
   586     08B1  3400               	retlw	0
   587     08B2  3400               	retlw	0
   588     08B3                     STR_11:
   589     08B3  3442               	retlw	66	;'B'
   590     08B4  3465               	retlw	101	;'e'
   591     08B5  346E               	retlw	110	;'n'
   592     08B6  3476               	retlw	118	;'v'
   593     08B7  3465               	retlw	101	;'e'
   594     08B8  346E               	retlw	110	;'n'
   595     08B9  3475               	retlw	117	;'u'
   596     08BA  3474               	retlw	116	;'t'
   597     08BB  346F               	retlw	111	;'o'
   598     08BC  3421               	retlw	33	;'!'
   599     08BD  3400               	retlw	0
   600     08BE  3400               	retlw	0
   601     08BF                     STR_6:
   602     08BF  3449               	retlw	73	;'I'
   603     08C0  3444               	retlw	68	;'D'
   604     08C1  3420               	retlw	32	;' '
   605     08C2  3453               	retlw	83	;'S'
   606     08C3  3461               	retlw	97	;'a'
   607     08C4  346C               	retlw	108	;'l'
   608     08C5  3476               	retlw	118	;'v'
   609     08C6  3461               	retlw	97	;'a'
   610     08C7  3474               	retlw	116	;'t'
   611     08C8  346F               	retlw	111	;'o'
   612     08C9  3400               	retlw	0
   613     08CA  3400               	retlw	0
   614     08CB                     STR_1:
   615     08CB  3450               	retlw	80	;'P'
   616     08CC  3472               	retlw	114	;'r'
   617     08CD  3465               	retlw	101	;'e'
   618     08CE  346D               	retlw	109	;'m'
   619     08CF  3469               	retlw	105	;'i'
   620     08D0  3420               	retlw	32	;' '
   621     08D1  3427               	retlw	39	;'''
   622     08D2  3423               	retlw	35	;'#'
   623     08D3  3427               	retlw	39	;'''
   624     08D4  3400               	retlw	0
   625     08D5  3400               	retlw	0
   626     08D6                     STR_5:
   627     08D6  3449               	retlw	73	;'I'
   628     08D7  3444               	retlw	68	;'D'
   629     08D8  3420               	retlw	32	;' '
   630     08D9  343E               	retlw	62	;'>'
   631     08DA  3420               	retlw	32	;' '
   632     08DB  3432               	retlw	50	;'2'
   633     08DC  3435               	retlw	53	;'5'
   634     08DD  3430               	retlw	48	;'0'
   635     08DE  3400               	retlw	0
   636     08DF  3400               	retlw	0
   637     08E0                     STR_2:
   638     08E0  3445               	retlw	69	;'E'
   639     08E1  3452               	retlw	82	;'R'
   640     08E2  3452               	retlw	82	;'R'
   641     08E3  344F               	retlw	79	;'O'
   642     08E4  3452               	retlw	82	;'R'
   643     08E5  3445               	retlw	69	;'E'
   644     08E6  3400               	retlw	0
   645     08E7  3400               	retlw	0
   646     08E8                     STR_16:
   647     08E8  3431               	retlw	49	;'1'
   648     08E9  342F               	retlw	47	;'/'
   649     08EA  3430               	retlw	48	;'0'
   650     08EB  3400               	retlw	0
   651     08EC                     STR_12:
   652     08EC  3431               	retlw	49	;'1'
   653     08ED  342F               	retlw	47	;'/'
   654     08EE  3431               	retlw	49	;'1'
   655     08EF  3400               	retlw	0
   656     08F0                     STR_8:
   657     08F0  3432               	retlw	50	;'2'
   658     08F1  3400               	retlw	0
   659     08A6                     
   660                           	psect	cinit
   661     0013                     start_initialization:	
   662                           ; #config settings
   663                           
   664     0013                     __initialization:
   665                           
   666                           ; Initialize objects allocated to BANK1
   667     0013  1683               	bsf	3,5	;RP0=1, select bank1
   668     0014  1303               	bcf	3,6	;RP1=0, select bank1
   669     0015  160A  118A  2611  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   670     001A  00ED               	movwf	__pdataBANK1& (0+127)
   671     001B  160A  118A  2612  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   672     0020  00EE               	movwf	(__pdataBANK1+1)& (0+127)
   673     0021  160A  118A  2613  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   674     0026  00EF               	movwf	(__pdataBANK1+2)& (0+127)
   675                           
   676                           ; Initialize objects allocated to BANK0
   677     0027  1283               	bcf	3,5	;RP0=0, select bank0
   678     0028  1303               	bcf	3,6	;RP1=0, select bank0
   679     0029  120A  158A  20F2  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   680     002E  00D3               	movwf	__pdataBANK0& (0+127)
   681     002F  120A  158A  20F3  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   682     0034  00D4               	movwf	(__pdataBANK0+1)& (0+127)
   683     0035  120A  158A  20F4  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   684     003A  00D5               	movwf	(__pdataBANK0+2)& (0+127)
   685     003B  120A  158A  20F5  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   686     0040  00D6               	movwf	(__pdataBANK0+3)& (0+127)
   687                           
   688                           ; Clear objects allocated to BANK3
   689     0041  1783               	bsf	3,7	;select IRP bank2
   690     0042  3090               	movlw	low __pbssBANK3
   691     0043  0084               	movwf	4
   692     0044  30C7               	movlw	low (__pbssBANK3+55)
   693     0045  160A  118A  2614  120A  118A  	fcall	clear_ram0
   694                           
   695                           ; Clear objects allocated to BANK2
   696     004A  3010               	movlw	low __pbssBANK2
   697     004B  0084               	movwf	4
   698     004C  3042               	movlw	low (__pbssBANK2+50)
   699     004D  160A  118A  2614  120A  118A  	fcall	clear_ram0
   700                           
   701                           ; Clear objects allocated to BANK1
   702     0052  1383               	bcf	3,7	;select IRP bank0
   703     0053  30E2               	movlw	low __pbssBANK1
   704     0054  0084               	movwf	4
   705     0055  30ED               	movlw	low (__pbssBANK1+11)
   706     0056  160A  118A  2614  120A  118A  	fcall	clear_ram0
   707                           
   708                           ; Clear objects allocated to BANK0
   709     005B  303C               	movlw	low __pbssBANK0
   710     005C  0084               	movwf	4
   711     005D  3053               	movlw	low (__pbssBANK0+23)
   712     005E  160A  118A  2614  120A  118A  	fcall	clear_ram0
   713     0063                     end_of_initialization:	
   714                           ;End of C runtime variable initialization code
   715                           
   716     0063                     __end_of__initialization:
   717     0063  0183               	clrf	3
   718     0064  120A  118A  2867   	ljmp	_main	;jump to C main() function
   719                           
   720                           	psect	bssBANK0
   721     003C                     __pbssBANK0:
   722     003C                     _seconds:
   723     003C                     	ds	4
   724     0040                     _milliseconds:
   725     0040                     	ds	4
   726     0044                     _old_i_id:
   727     0044                     	ds	2
   728     0046                     _pr_succ:
   729     0046                     	ds	1
   730     0047                     _pr_err_max:
   731     0047                     	ds	1
   732     0048                     _pr_err_len:
   733     0048                     	ds	1
   734     0049                     _pr_start:
   735     0049                     	ds	1
   736     004A                     _fail:
   737     004A                     	ds	1
   738     004B                     _success:
   739     004B                     	ds	1
   740     004C                     _recieved:
   741     004C                     	ds	1
   742     004D                     _old_iT:
   743     004D                     	ds	1
   744     004E                     _iS:
   745     004E                     	ds	1
   746     004F                     _PIC_ID:
   747     004F                     	ds	4
   748                           
   749                           	psect	dataBANK0
   750     0053                     __pdataBANK0:
   751     0053                     _randx:
   752     0053                     	ds	4
   753                           
   754                           	psect	bssBANK1
   755     00E2                     __pbssBANK1:
   756     00E2                     _num_rand:
   757     00E2                     	ds	2
   758     00E4                     _i_id:
   759     00E4                     	ds	2
   760     00E6                     _compare:
   761     00E6                     	ds	1
   762     00E7                     _iT:
   763     00E7                     	ds	1
   764     00E8                     _type:
   765     00E8                     	ds	1
   766     00E9                     _source:
   767     00E9                     	ds	1
   768     00EA                     _keyf:
   769     00EA                     	ds	1
   770     00EB                     _rowScan:
   771     00EB                     	ds	1
   772     00EC                     _colScan:
   773     00EC                     	ds	1
   774                           
   775                           	psect	dataBANK1
   776     00ED                     __pdataBANK1:
   777     00ED                     _maxFail:
   778     00ED                     	ds	1
   779     00EE                     _initialize:
   780     00EE                     	ds	1
   781     00EF                     _keypressed:
   782     00EF                     	ds	1
   783                           
   784                           	psect	bssBANK3
   785     0190                     __pbssBANK3:
   786     0190                     _old_num_rand:
   787     0190                     	ds	2
   788     0192                     _datoTastierino:
   789     0192                     	ds	17
   790     01A3                     _datoSeriale:
   791     01A3                     	ds	17
   792     01B4                     _packet:
   793     01B4                     	ds	15
   794     01C3                     _id_dest:
   795     01C3                     	ds	4
   796                           
   797                           	psect	bssBANK2
   798     0110                     __pbssBANK2:
   799     0110                     _dato:
   800     0110                     	ds	50
   801                           
   802                           	psect	clrtext
   803     1614                     clear_ram0:	
   804                           ;	Called with FSR containing the base address, and
   805                           ;	W with the last address+1
   806                           
   807     1614  0064               	clrwdt	;clear the watchdog before getting into this loop
   808     1615                     clrloop0:
   809     1615  0180               	clrf	0	;clear RAM location pointed to by FSR
   810     1616  0A84               	incf	4,f	;increment pointer
   811     1617  0604               	xorwf	4,w	;XOR with final address
   812     1618  1903               	btfsc	3,2	;have we reached the end yet?
   813     1619  3400               	retlw	0	;all done for this memory range, return
   814     161A  0604               	xorwf	4,w	;XOR again to restore value
   815     161B  2E15               	goto	clrloop0	;do the next byte
   816                           
   817                           	psect	cstackBANK3
   818     01C7                     __pcstackBANK3:
   819     01C7                     ConvertToString@temp:
   820                           
   821                           ; 2 bytes @ 0x0
   822     01C7                     	ds	2
   823     01C9                     ConvertToString@j:
   824                           
   825                           ; 2 bytes @ 0x2
   826     01C9                     	ds	2
   827     01CB                     ConvertToString@i:
   828                           
   829                           ; 2 bytes @ 0x4
   830     01CB                     	ds	2
   831     01CD                     ConvertToString@n_cifre:
   832                           
   833                           ; 1 bytes @ 0x6
   834     01CD                     	ds	1
   835     01CE                     ??_init_PIC:
   836                           
   837                           ; 1 bytes @ 0x7
   838     01CE                     	ds	2
   839     01D0                     init_PIC@id:
   840                           
   841                           ; 2 bytes @ 0x9
   842     01D0                     	ds	2
   843     01D2                     main@num_rand_s:
   844                           
   845                           ; 16 bytes @ 0xB
   846     01D2                     	ds	16
   847                           
   848                           	psect	cstackBANK1
   849     00A0                     __pcstackBANK1:
   850     00A0                     ?_lcdSend:
   851     00A0                     ??_init_NumPad:	
   852                           ; 1 bytes @ 0x0
   853                           
   854     00A0                     ??_init_Timer0:	
   855                           ; 1 bytes @ 0x0
   856                           
   857     00A0                     ??_eeprom_read:	
   858                           ; 1 bytes @ 0x0
   859                           
   860     00A0                     ?_strcopy:	
   861                           ; 1 bytes @ 0x0
   862                           
   863     00A0                     ?_eeprom_write:	
   864                           ; 1 bytes @ 0x0
   865                           
   866     00A0                     ?_srand:	
   867                           ; 1 bytes @ 0x0
   868                           
   869     00A0                     ??_UART_TxChar:	
   870                           ; 1 bytes @ 0x0
   871                           
   872     00A0                     ?_Length:	
   873                           ; 1 bytes @ 0x0
   874                           
   875     00A0                     ?___lmul:	
   876                           ; 2 bytes @ 0x0
   877                           
   878     00A0                     ?___almod:	
   879                           ; 4 bytes @ 0x0
   880                           
   881     00A0                     lcdSend@tipo:	
   882                           ; 4 bytes @ 0x0
   883                           
   884     00A0                     strcopy@source:	
   885                           ; 1 bytes @ 0x0
   886                           
   887     00A0                     eeprom_write@value:	
   888                           ; 1 bytes @ 0x0
   889                           
   890     00A0                     Length@str:	
   891                           ; 1 bytes @ 0x0
   892                           
   893     00A0                     srand@x:	
   894                           ; 2 bytes @ 0x0
   895                           
   896     00A0                     ___lmul@multiplier:	
   897                           ; 2 bytes @ 0x0
   898                           
   899     00A0                     ___almod@divisor:	
   900                           ; 4 bytes @ 0x0
   901                           
   902                           
   903                           ; 4 bytes @ 0x0
   904     00A0                     	ds	1
   905     00A1                     ??_lcdSend:
   906     00A1                     ??_strcopy:	
   907                           ; 1 bytes @ 0x1
   908                           
   909     00A1                     ??_eeprom_write:	
   910                           ; 1 bytes @ 0x1
   911                           
   912     00A1                     UART_TxChar@ch:	
   913                           ; 1 bytes @ 0x1
   914                           
   915     00A1                     eeprom_read@addr:	
   916                           ; 1 bytes @ 0x1
   917                           
   918                           
   919                           ; 1 bytes @ 0x1
   920     00A1                     	ds	1
   921     00A2                     ??_srand:
   922     00A2                     ??_Length:	
   923                           ; 1 bytes @ 0x2
   924                           
   925     00A2                     eeprom_write@addr:	
   926                           ; 1 bytes @ 0x2
   927                           
   928                           
   929                           ; 1 bytes @ 0x2
   930     00A2                     	ds	1
   931     00A3                     lcdSend@dato:
   932                           
   933                           ; 1 bytes @ 0x3
   934     00A3                     	ds	1
   935     00A4                     ?_lcdPrint:
   936     00A4                     ??_init_LCD:	
   937                           ; 1 bytes @ 0x4
   938                           
   939     00A4                     strcopy@dest:	
   940                           ; 1 bytes @ 0x4
   941                           
   942     00A4                     lcdPrint@str:	
   943                           ; 1 bytes @ 0x4
   944                           
   945     00A4                     ___lmul@multiplicand:	
   946                           ; 2 bytes @ 0x4
   947                           
   948     00A4                     ___almod@dividend:	
   949                           ; 4 bytes @ 0x4
   950                           
   951                           
   952                           ; 4 bytes @ 0x4
   953     00A4                     	ds	1
   954     00A5                     Length@len:
   955     00A5                     strcopy@n:	
   956                           ; 2 bytes @ 0x5
   957                           
   958                           
   959                           ; 2 bytes @ 0x5
   960     00A5                     	ds	1
   961     00A6                     ??_lcdPrint:
   962                           
   963                           ; 1 bytes @ 0x6
   964     00A6                     	ds	1
   965     00A7                     ??_SplitPacket:
   966     00A7                     ?_CompareStrings:	
   967                           ; 1 bytes @ 0x7
   968                           
   969     00A7                     ??_Fill:	
   970                           ; 1 bytes @ 0x7
   971                           
   972     00A7                     ?_strcat:	
   973                           ; 1 bytes @ 0x7
   974                           
   975     00A7                     strcat@source:	
   976                           ; 2 bytes @ 0x7
   977                           
   978     00A7                     CompareStrings@str2:	
   979                           ; 2 bytes @ 0x7
   980                           
   981                           
   982                           ; 2 bytes @ 0x7
   983     00A7                     	ds	1
   984     00A8                     ??___lmul:
   985     00A8                     ??___almod:	
   986                           ; 1 bytes @ 0x8
   987                           
   988     00A8                     Fill@length:	
   989                           ; 1 bytes @ 0x8
   990                           
   991                           
   992                           ; 2 bytes @ 0x8
   993     00A8                     	ds	1
   994     00A9                     ??_CompareStrings:
   995     00A9                     ??_strcat:	
   996                           ; 1 bytes @ 0x9
   997                           
   998     00A9                     ___almod@counter:	
   999                           ; 1 bytes @ 0x9
  1000                           
  1001     00A9                     lcdPrint@n:	
  1002                           ; 1 bytes @ 0x9
  1003                           
  1004     00A9                     ___lmul@product:	
  1005                           ; 2 bytes @ 0x9
  1006                           
  1007                           
  1008                           ; 4 bytes @ 0x9
  1009     00A9                     	ds	1
  1010     00AA                     Fill@id:
  1011     00AA                     ___almod@sign:	
  1012                           ; 1 bytes @ 0xA
  1013                           
  1014     00AA                     SplitPacket@len:	
  1015                           ; 1 bytes @ 0xA
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0xA
  1019     00AA                     	ds	2
  1020     00AC                     SplitPacket@part:
  1021                           
  1022                           ; 5 bytes @ 0xC
  1023     00AC                     	ds	1
  1024     00AD                     ?_rand:
  1025     00AD                     CompareStrings@i:	
  1026                           ; 2 bytes @ 0xD
  1027                           
  1028                           
  1029                           ; 1 bytes @ 0xD
  1030     00AD                     	ds	1
  1031     00AE                     strcat@dest:
  1032     00AE                     CompareStrings@str1:	
  1033                           ; 1 bytes @ 0xE
  1034                           
  1035                           
  1036                           ; 1 bytes @ 0xE
  1037     00AE                     	ds	1
  1038     00AF                     ??_rand:
  1039     00AF                     strcat@n:	
  1040                           ; 1 bytes @ 0xF
  1041                           
  1042                           
  1043                           ; 2 bytes @ 0xF
  1044     00AF                     	ds	2
  1045     00B1                     strcat@length_dest:
  1046     00B1                     SplitPacket@section:	
  1047                           ; 2 bytes @ 0x11
  1048                           
  1049                           
  1050                           ; 2 bytes @ 0x11
  1051     00B1                     	ds	2
  1052     00B3                     ?_ConcatToPacket:
  1053     00B3                     ConcatToPacket@str:	
  1054                           ; 1 bytes @ 0x13
  1055                           
  1056     00B3                     SplitPacket@i_part:	
  1057                           ; 2 bytes @ 0x13
  1058                           
  1059                           
  1060                           ; 2 bytes @ 0x13
  1061     00B3                     	ds	1
  1062     00B4                     ?___awmod:
  1063     00B4                     ___awmod@divisor:	
  1064                           ; 2 bytes @ 0x14
  1065                           
  1066                           
  1067                           ; 2 bytes @ 0x14
  1068     00B4                     	ds	1
  1069     00B5                     ConcatToPacket@delim:
  1070     00B5                     SplitPacket@pkt:	
  1071                           ; 1 bytes @ 0x15
  1072                           
  1073                           
  1074                           ; 1 bytes @ 0x15
  1075     00B5                     	ds	1
  1076     00B6                     ??_ConcatToPacket:
  1077     00B6                     SplitPacket@i:	
  1078                           ; 1 bytes @ 0x16
  1079                           
  1080     00B6                     ___awmod@dividend:	
  1081                           ; 2 bytes @ 0x16
  1082                           
  1083                           
  1084                           ; 2 bytes @ 0x16
  1085     00B6                     	ds	1
  1086     00B7                     ConcatToPacket@packet_length:
  1087                           
  1088                           ; 2 bytes @ 0x17
  1089     00B7                     	ds	1
  1090     00B8                     ??___awmod:
  1091                           
  1092                           ; 1 bytes @ 0x18
  1093     00B8                     	ds	1
  1094     00B9                     ConcatToPacket@pkt:
  1095     00B9                     ___awmod@counter:	
  1096                           ; 1 bytes @ 0x19
  1097                           
  1098                           
  1099                           ; 1 bytes @ 0x19
  1100     00B9                     	ds	1
  1101     00BA                     ___awmod@sign:
  1102                           
  1103                           ; 1 bytes @ 0x1A
  1104     00BA                     	ds	1
  1105     00BB                     ?___wmul:
  1106     00BB                     ___wmul@multiplier:	
  1107                           ; 2 bytes @ 0x1B
  1108                           
  1109                           
  1110                           ; 2 bytes @ 0x1B
  1111     00BB                     	ds	2
  1112     00BD                     ___wmul@multiplicand:
  1113                           
  1114                           ; 2 bytes @ 0x1D
  1115     00BD                     	ds	2
  1116     00BF                     ??___wmul:
  1117     00BF                     ___wmul@product:	
  1118                           ; 1 bytes @ 0x1F
  1119                           
  1120                           
  1121                           ; 2 bytes @ 0x1F
  1122     00BF                     	ds	2
  1123     00C1                     ??_read_NumPad:
  1124     00C1                     ?_UART_TxString:	
  1125                           ; 1 bytes @ 0x21
  1126                           
  1127     00C1                     ?_pow:	
  1128                           ; 1 bytes @ 0x21
  1129                           
  1130     00C1                     pow@exp:	
  1131                           ; 2 bytes @ 0x21
  1132                           
  1133     00C1                     UART_TxString@is_ACK:	
  1134                           ; 1 bytes @ 0x21
  1135                           
  1136                           
  1137                           ; 1 bytes @ 0x21
  1138     00C1                     	ds	1
  1139     00C2                     ??_UART_TxString:
  1140                           
  1141                           ; 1 bytes @ 0x22
  1142     00C2                     	ds	1
  1143     00C3                     ??_pow:
  1144     00C3                     UART_TxString@n:	
  1145                           ; 1 bytes @ 0x23
  1146                           
  1147                           
  1148                           ; 2 bytes @ 0x23
  1149     00C3                     	ds	2
  1150     00C5                     pow@b:
  1151     00C5                     UART_TxString@str:	
  1152                           ; 1 bytes @ 0x25
  1153                           
  1154                           
  1155                           ; 1 bytes @ 0x25
  1156     00C5                     	ds	1
  1157     00C6                     pow@i:
  1158                           
  1159                           ; 2 bytes @ 0x26
  1160     00C6                     	ds	2
  1161     00C8                     pow@n:
  1162                           
  1163                           ; 2 bytes @ 0x28
  1164     00C8                     	ds	2
  1165     00CA                     ?___aldiv:
  1166     00CA                     ___aldiv@divisor:	
  1167                           ; 4 bytes @ 0x2A
  1168                           
  1169                           
  1170                           ; 4 bytes @ 0x2A
  1171     00CA                     	ds	1
  1172     00CB                     read_NumPad@id:
  1173                           
  1174                           ; 2 bytes @ 0x2B
  1175     00CB                     	ds	3
  1176     00CE                     ___aldiv@dividend:
  1177                           
  1178                           ; 4 bytes @ 0x2E
  1179     00CE                     	ds	4
  1180     00D2                     ??___aldiv:
  1181                           
  1182                           ; 1 bytes @ 0x32
  1183     00D2                     	ds	1
  1184     00D3                     ___aldiv@counter:
  1185                           
  1186                           ; 1 bytes @ 0x33
  1187     00D3                     	ds	1
  1188     00D4                     ___aldiv@sign:
  1189                           
  1190                           ; 1 bytes @ 0x34
  1191     00D4                     	ds	1
  1192     00D5                     ___aldiv@quotient:
  1193                           
  1194                           ; 4 bytes @ 0x35
  1195     00D5                     	ds	4
  1196     00D9                     ?_ConvertToString:
  1197     00D9                     ?_UART_init:	
  1198                           ; 1 bytes @ 0x39
  1199                           
  1200     00D9                     ConvertToString@n:	
  1201                           ; 1 bytes @ 0x39
  1202                           
  1203     00D9                     UART_init@baudrate:	
  1204                           ; 4 bytes @ 0x39
  1205                           
  1206                           
  1207                           ; 4 bytes @ 0x39
  1208     00D9                     	ds	4
  1209     00DD                     ??_UART_init:
  1210     00DD                     ConvertToString@str:	
  1211                           ; 1 bytes @ 0x3D
  1212                           
  1213                           
  1214                           ; 2 bytes @ 0x3D
  1215     00DD                     	ds	2
  1216     00DF                     ??_ConvertToString:
  1217                           
  1218                           ; 1 bytes @ 0x3F
  1219     00DF                     	ds	3
  1220     00E2                     ??_main:
  1221                           
  1222                           	psect	cstackCOMMON
  1223     0070                     __pcstackCOMMON:	
  1224                           ; 1 bytes @ 0x42
  1225                           
  1226     0070                     ?_init_PIC:
  1227     0070                     ?_read_NumPad:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230     0070                     ?_SplitPacket:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233     0070                     ?_init_LCD:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236     0070                     ?_init_NumPad:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239     0070                     ?_init_Timer0:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242     0070                     ?_eeprom_read:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245     0070                     ?_Fill:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248     0070                     ?_main:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251     0070                     ?_UART_TxChar:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254     0070                     ?_IRS:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257     0070                     ?i1_UART_TxChar:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260     0070                     ??i1_UART_TxChar:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263     0070                     ?i1_srand:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266     0070                     ?i1___lmul:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269     0070                     i1srand@x:	
  1270                           ; 4 bytes @ 0x0
  1271                           
  1272     0070                     i1___lmul@multiplier:	
  1273                           ; 2 bytes @ 0x0
  1274                           
  1275                           
  1276                           ; 4 bytes @ 0x0
  1277     0070                     	ds	1
  1278     0071                     i1UART_TxChar@ch:
  1279                           
  1280                           ; 1 bytes @ 0x1
  1281     0071                     	ds	1
  1282     0072                     ??i1_srand:
  1283                           
  1284                           ; 1 bytes @ 0x2
  1285     0072                     	ds	2
  1286     0074                     i1___lmul@multiplicand:
  1287                           
  1288                           ; 4 bytes @ 0x4
  1289     0074                     	ds	4
  1290     0078                     ??i1___lmul:
  1291                           
  1292                           ; 1 bytes @ 0x8
  1293     0078                     	ds	1
  1294     0079                     i1___lmul@product:
  1295                           
  1296                           ; 4 bytes @ 0x9
  1297     0079                     	ds	4
  1298     007D                     ??i1___awmod:
  1299                           
  1300                           ; 1 bytes @ 0xD
  1301     007D                     	ds	1
  1302     007E                     ??i1___wmul:
  1303                           
  1304                           	psect	cstackBANK0
  1305     0020                     __pcstackBANK0:	
  1306                           ; 1 bytes @ 0xE
  1307                           
  1308     0020                     ?i1_rand:
  1309                           
  1310                           ; 2 bytes @ 0x0
  1311     0020                     	ds	2
  1312     0022                     ??i1_rand:
  1313                           
  1314                           ; 1 bytes @ 0x2
  1315     0022                     	ds	5
  1316     0027                     ?i1___awmod:
  1317     0027                     i1___awmod@divisor:	
  1318                           ; 2 bytes @ 0x7
  1319                           
  1320                           
  1321                           ; 2 bytes @ 0x7
  1322     0027                     	ds	2
  1323     0029                     i1___awmod@dividend:
  1324                           
  1325                           ; 2 bytes @ 0x9
  1326     0029                     	ds	2
  1327     002B                     i1___awmod@counter:
  1328                           
  1329                           ; 1 bytes @ 0xB
  1330     002B                     	ds	1
  1331     002C                     i1___awmod@sign:
  1332                           
  1333                           ; 1 bytes @ 0xC
  1334     002C                     	ds	1
  1335     002D                     ?i1___wmul:
  1336     002D                     i1___wmul@multiplier:	
  1337                           ; 2 bytes @ 0xD
  1338                           
  1339                           
  1340                           ; 2 bytes @ 0xD
  1341     002D                     	ds	2
  1342     002F                     i1___wmul@multiplicand:
  1343                           
  1344                           ; 2 bytes @ 0xF
  1345     002F                     	ds	2
  1346     0031                     i1___wmul@product:
  1347                           
  1348                           ; 2 bytes @ 0x11
  1349     0031                     	ds	2
  1350     0033                     ?i1_UART_TxString:
  1351     0033                     i1UART_TxString@is_ACK:	
  1352                           ; 1 bytes @ 0x13
  1353                           
  1354                           
  1355                           ; 1 bytes @ 0x13
  1356     0033                     	ds	1
  1357     0034                     ??i1_UART_TxString:
  1358                           
  1359                           ; 1 bytes @ 0x14
  1360     0034                     	ds	1
  1361     0035                     i1UART_TxString@str:
  1362                           
  1363                           ; 1 bytes @ 0x15
  1364     0035                     	ds	1
  1365     0036                     i1UART_TxString@n:
  1366                           
  1367                           ; 2 bytes @ 0x16
  1368     0036                     	ds	2
  1369     0038                     ??_IRS:
  1370                           
  1371                           ; 1 bytes @ 0x18
  1372     0038                     	ds	4
  1373                           
  1374                           	psect	maintext
  1375     0067                     __pmaintext:	
  1376 ;;
  1377 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1378 ;;
  1379 ;; *************** function _main *****************
  1380 ;; Defined at:
  1381 ;;		line 125 in file "main.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;		None
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  num_rand_s     16   11[BANK3 ] unsigned char [16]
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : B00/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1395 ;;      Params:         0       0       0       0       0
  1396 ;;      Locals:         0       0       0      16       0
  1397 ;;      Temps:          0       0       0       0       0
  1398 ;;      Totals:         0       0       0      16       0
  1399 ;;Total ram usage:       16 bytes
  1400 ;; Hardware stack levels required when called: 8
  1401 ;; This function calls:
  1402 ;;		_CompareStrings
  1403 ;;		_ConcatToPacket
  1404 ;;		_ConvertToString
  1405 ;;		_SplitPacket
  1406 ;;		_UART_TxString
  1407 ;;		_init_PIC
  1408 ;;		_lcdPrint
  1409 ;;		_lcdSend
  1410 ;;		_read_NumPad
  1411 ;; This function is called by:
  1412 ;;		Startup code after reset
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416     0067                     _main:	
  1417                           ;psect for function _main
  1418                           
  1419     0067                     l3841:	
  1420                           ;incstack = 0
  1421                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1422                           
  1423                           
  1424                           ;main.c: 128:     init_PIC();
  1425     0067  120A  158A  2573  120A  118A  	fcall	_init_PIC
  1426     006C                     l3843:
  1427                           
  1428                           ;main.c: 131:     {;main.c: 132:         if(pr_start)
  1429     006C  1283               	bcf	3,5	;RP0=0, select bank0
  1430     006D  1303               	bcf	3,6	;RP1=0, select bank0
  1431     006E  0849               	movf	_pr_start,w
  1432     006F  1903               	btfsc	3,2
  1433     0070  2872               	goto	u4071
  1434     0071  2873               	goto	u4070
  1435     0072                     u4071:
  1436     0072  288A               	goto	l3851
  1437     0073                     u4070:
  1438     0073                     l3845:
  1439                           
  1440                           ;main.c: 133:         {;main.c: 134:             lcdSend(0x01, 0);
  1441     0073  1683               	bsf	3,5	;RP0=1, select bank1
  1442     0074  1303               	bcf	3,6	;RP1=0, select bank1
  1443     0075  01A0               	clrf	lcdSend@tipo^(0+128)
  1444     0076  3001               	movlw	1
  1445     0077  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1446     007C                     l3847:
  1447                           
  1448                           ;main.c: 135:             lcdPrint("Premi '#'\0");
  1449     007C  30BC               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1450     007D  1683               	bsf	3,5	;RP0=1, select bank1
  1451     007E  1303               	bcf	3,6	;RP1=0, select bank1
  1452     007F  00A4               	movwf	lcdPrint@str^(0+128)
  1453     0080  3080               	movlw	128
  1454     0081  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1455     0082  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1456     0087                     l3849:
  1457                           
  1458                           ;main.c: 136:             pr_start = 0;
  1459     0087  1283               	bcf	3,5	;RP0=0, select bank0
  1460     0088  1303               	bcf	3,6	;RP1=0, select bank0
  1461     0089  01C9               	clrf	_pr_start
  1462     008A                     l3851:
  1463                           
  1464                           ;main.c: 138:         if(pr_err_len)
  1465     008A  0848               	movf	_pr_err_len,w
  1466     008B  1903               	btfsc	3,2
  1467     008C  288E               	goto	u4081
  1468     008D  288F               	goto	u4080
  1469     008E                     u4081:
  1470     008E  28BA               	goto	l3861
  1471     008F                     u4080:
  1472     008F                     l3853:
  1473                           
  1474                           ;main.c: 139:         {;main.c: 141:             lcdSend(0x01, 0);
  1475     008F  1683               	bsf	3,5	;RP0=1, select bank1
  1476     0090  1303               	bcf	3,6	;RP1=0, select bank1
  1477     0091  01A0               	clrf	lcdSend@tipo^(0+128)
  1478     0092  3001               	movlw	1
  1479     0093  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1480     0098                     l3855:
  1481                           
  1482                           ;main.c: 142:             lcdPrint("ERRORE\0");
  1483     0098  30D1               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1484     0099  1683               	bsf	3,5	;RP0=1, select bank1
  1485     009A  1303               	bcf	3,6	;RP1=0, select bank1
  1486     009B  00A4               	movwf	lcdPrint@str^(0+128)
  1487     009C  3080               	movlw	128
  1488     009D  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1489     009E  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1490     00A3                     l3857:
  1491                           
  1492                           ;main.c: 143:             lcdSend(0xC0, 0);
  1493     00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1494     00A4  1303               	bcf	3,6	;RP1=0, select bank1
  1495     00A5  01A0               	clrf	lcdSend@tipo^(0+128)
  1496     00A6  30C0               	movlw	192
  1497     00A7  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1498                           
  1499                           ;main.c: 144:             lcdPrint("ID = 3 chars\0");
  1500     00AC  3089               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1501     00AD  1683               	bsf	3,5	;RP0=1, select bank1
  1502     00AE  1303               	bcf	3,6	;RP1=0, select bank1
  1503     00AF  00A4               	movwf	lcdPrint@str^(0+128)
  1504     00B0  3080               	movlw	128
  1505     00B1  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1506     00B2  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1507     00B7                     l3859:
  1508                           
  1509                           ;main.c: 145:             pr_err_len = 0;
  1510     00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1511     00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1512     00B9  01C8               	clrf	_pr_err_len
  1513     00BA                     l3861:
  1514                           
  1515                           ;main.c: 147:         if(pr_err_max)
  1516     00BA  0847               	movf	_pr_err_max,w
  1517     00BB  1903               	btfsc	3,2
  1518     00BC  28BE               	goto	u4091
  1519     00BD  28BF               	goto	u4090
  1520     00BE                     u4091:
  1521     00BE  28EA               	goto	l3871
  1522     00BF                     u4090:
  1523     00BF                     l3863:
  1524                           
  1525                           ;main.c: 148:         {;main.c: 150:             lcdSend(0x01, 0);
  1526     00BF  1683               	bsf	3,5	;RP0=1, select bank1
  1527     00C0  1303               	bcf	3,6	;RP1=0, select bank1
  1528     00C1  01A0               	clrf	lcdSend@tipo^(0+128)
  1529     00C2  3001               	movlw	1
  1530     00C3  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1531     00C8                     l3865:
  1532                           
  1533                           ;main.c: 151:             lcdPrint("ERRORE\0");
  1534     00C8  30D1               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1535     00C9  1683               	bsf	3,5	;RP0=1, select bank1
  1536     00CA  1303               	bcf	3,6	;RP1=0, select bank1
  1537     00CB  00A4               	movwf	lcdPrint@str^(0+128)
  1538     00CC  3080               	movlw	128
  1539     00CD  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1540     00CE  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1541     00D3                     l3867:
  1542                           
  1543                           ;main.c: 152:             lcdSend(0xC0, 0);
  1544     00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1545     00D4  1303               	bcf	3,6	;RP1=0, select bank1
  1546     00D5  01A0               	clrf	lcdSend@tipo^(0+128)
  1547     00D6  30C0               	movlw	192
  1548     00D7  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1549                           
  1550                           ;main.c: 153:             lcdPrint("ID > 250\0");
  1551     00DC  30C7               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1552     00DD  1683               	bsf	3,5	;RP0=1, select bank1
  1553     00DE  1303               	bcf	3,6	;RP1=0, select bank1
  1554     00DF  00A4               	movwf	lcdPrint@str^(0+128)
  1555     00E0  3080               	movlw	128
  1556     00E1  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1557     00E2  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1558     00E7                     l3869:
  1559                           
  1560                           ;main.c: 154:             pr_err_max = 0;
  1561     00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1562     00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1563     00E9  01C7               	clrf	_pr_err_max
  1564     00EA                     l3871:
  1565                           
  1566                           ;main.c: 156:         if(pr_succ)
  1567     00EA  0846               	movf	_pr_succ,w
  1568     00EB  1903               	btfsc	3,2
  1569     00EC  28EE               	goto	u4101
  1570     00ED  28EF               	goto	u4100
  1571     00EE                     u4101:
  1572     00EE  2916               	goto	l3883
  1573     00EF                     u4100:
  1574     00EF                     l3873:
  1575                           
  1576                           ;main.c: 157:         {;main.c: 159:             lcdSend(0x01, 0);
  1577     00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1578     00F0  1303               	bcf	3,6	;RP1=0, select bank1
  1579     00F1  01A0               	clrf	lcdSend@tipo^(0+128)
  1580     00F2  3001               	movlw	1
  1581     00F3  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1582     00F8                     l3875:
  1583                           
  1584                           ;main.c: 160:             lcdPrint("ID Salvato\0");
  1585     00F8  30B0               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1586     00F9  1683               	bsf	3,5	;RP0=1, select bank1
  1587     00FA  1303               	bcf	3,6	;RP1=0, select bank1
  1588     00FB  00A4               	movwf	lcdPrint@str^(0+128)
  1589     00FC  3080               	movlw	128
  1590     00FD  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1591     00FE  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1592     0103                     l3877:
  1593                           
  1594                           ;main.c: 162:             milliseconds = 0;
  1595     0103  3000               	movlw	0
  1596     0104  1283               	bcf	3,5	;RP0=0, select bank0
  1597     0105  1303               	bcf	3,6	;RP1=0, select bank0
  1598     0106  00C3               	movwf	_milliseconds+3
  1599     0107  3000               	movlw	0
  1600     0108  00C2               	movwf	_milliseconds+2
  1601     0109  3000               	movlw	0
  1602     010A  00C1               	movwf	_milliseconds+1
  1603     010B  3000               	movlw	0
  1604     010C  00C0               	movwf	_milliseconds
  1605     010D                     l3879:
  1606                           
  1607                           ;main.c: 163:             seconds = 1000;
  1608     010D  3000               	movlw	0
  1609     010E  00BF               	movwf	_seconds+3
  1610     010F  3000               	movlw	0
  1611     0110  00BE               	movwf	_seconds+2
  1612     0111  3003               	movlw	3
  1613     0112  00BD               	movwf	_seconds+1
  1614     0113  30E8               	movlw	232
  1615     0114  00BC               	movwf	_seconds
  1616     0115                     l3881:
  1617                           
  1618                           ;main.c: 164:             pr_succ = 0;
  1619     0115  01C6               	clrf	_pr_succ
  1620     0116                     l3883:
  1621                           
  1622                           ;main.c: 168:         read_NumPad();
  1623     0116  120A  118A  23EF  120A  118A  	fcall	_read_NumPad
  1624     011B                     l3885:
  1625                           
  1626                           ;main.c: 171:         if(i_id != old_i_id && initialize)
  1627     011B  1283               	bcf	3,5	;RP0=0, select bank0
  1628     011C  1303               	bcf	3,6	;RP1=0, select bank0
  1629     011D  0845               	movf	_old_i_id+1,w
  1630     011E  1683               	bsf	3,5	;RP0=1, select bank1
  1631     011F  1303               	bcf	3,6	;RP1=0, select bank1
  1632     0120  0665               	xorwf	(_i_id+1)^(0+128),w
  1633     0121  1D03               	skipz
  1634     0122  2929               	goto	u4115
  1635     0123  1283               	bcf	3,5	;RP0=0, select bank0
  1636     0124  1303               	bcf	3,6	;RP1=0, select bank0
  1637     0125  0844               	movf	_old_i_id,w
  1638     0126  1683               	bsf	3,5	;RP0=1, select bank1
  1639     0127  1303               	bcf	3,6	;RP1=0, select bank1
  1640     0128  0664               	xorwf	_i_id^(0+128),w
  1641     0129                     u4115:
  1642     0129  1903               	skipnz
  1643     012A  292C               	goto	u4111
  1644     012B  292D               	goto	u4110
  1645     012C                     u4111:
  1646     012C  2958               	goto	l3895
  1647     012D                     u4110:
  1648     012D                     l3887:
  1649     012D  086E               	movf	_initialize^(0+128),w
  1650     012E  1903               	btfsc	3,2
  1651     012F  2931               	goto	u4121
  1652     0130  2932               	goto	u4120
  1653     0131                     u4121:
  1654     0131  2958               	goto	l3895
  1655     0132                     u4120:
  1656     0132                     l3889:
  1657                           
  1658                           ;main.c: 172:         {;main.c: 174:             lcdSend(0x01, 0);
  1659     0132  01A0               	clrf	lcdSend@tipo^(0+128)
  1660     0133  3001               	movlw	1
  1661     0134  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1662     0139                     l3891:
  1663                           
  1664                           ;main.c: 175:             lcdPrint("#=conf. *=canc.\0");
  1665     0139  3038               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1666     013A  1683               	bsf	3,5	;RP0=1, select bank1
  1667     013B  1303               	bcf	3,6	;RP1=0, select bank1
  1668     013C  00A4               	movwf	lcdPrint@str^(0+128)
  1669     013D  3080               	movlw	128
  1670     013E  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1671     013F  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1672     0144                     l3893:
  1673                           
  1674                           ;main.c: 176:             lcdSend(0xC0, 0);
  1675     0144  1683               	bsf	3,5	;RP0=1, select bank1
  1676     0145  1303               	bcf	3,6	;RP1=0, select bank1
  1677     0146  01A0               	clrf	lcdSend@tipo^(0+128)
  1678     0147  30C0               	movlw	192
  1679     0148  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1680                           
  1681                           ;main.c: 177:             lcdPrint(PIC_ID);
  1682     014D  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1683     014E  1683               	bsf	3,5	;RP0=1, select bank1
  1684     014F  1303               	bcf	3,6	;RP1=0, select bank1
  1685     0150  00A4               	movwf	lcdPrint@str^(0+128)
  1686     0151  3000               	movlw	0
  1687     0152  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1688     0153  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1689     0158                     l3895:
  1690                           
  1691                           ;main.c: 180:         old_i_id = i_id;
  1692     0158  1683               	bsf	3,5	;RP0=1, select bank1
  1693     0159  1303               	bcf	3,6	;RP1=0, select bank1
  1694     015A  0865               	movf	(_i_id+1)^(0+128),w
  1695     015B  1283               	bcf	3,5	;RP0=0, select bank0
  1696     015C  1303               	bcf	3,6	;RP1=0, select bank0
  1697     015D  00C5               	movwf	_old_i_id+1
  1698     015E  1683               	bsf	3,5	;RP0=1, select bank1
  1699     015F  1303               	bcf	3,6	;RP1=0, select bank1
  1700     0160  0864               	movf	_i_id^(0+128),w
  1701     0161  1283               	bcf	3,5	;RP0=0, select bank0
  1702     0162  1303               	bcf	3,6	;RP1=0, select bank0
  1703     0163  00C4               	movwf	_old_i_id
  1704     0164                     l3897:
  1705                           
  1706                           ;main.c: 184:         if(num_rand != old_num_rand)
  1707     0164  1683               	bsf	3,5	;RP0=1, select bank3
  1708     0165  1703               	bsf	3,6	;RP1=1, select bank3
  1709     0166  0811               	movf	(_old_num_rand+1)^(0+384),w
  1710     0167  1683               	bsf	3,5	;RP0=1, select bank1
  1711     0168  1303               	bcf	3,6	;RP1=0, select bank1
  1712     0169  0663               	xorwf	(_num_rand+1)^(0+128),w
  1713     016A  1D03               	skipz
  1714     016B  2972               	goto	u4135
  1715     016C  1683               	bsf	3,5	;RP0=1, select bank3
  1716     016D  1703               	bsf	3,6	;RP1=1, select bank3
  1717     016E  0810               	movf	_old_num_rand^(0+384),w
  1718     016F  1683               	bsf	3,5	;RP0=1, select bank1
  1719     0170  1303               	bcf	3,6	;RP1=0, select bank1
  1720     0171  0662               	xorwf	_num_rand^(0+128),w
  1721     0172                     u4135:
  1722     0172  1903               	skipnz
  1723     0173  2975               	goto	u4131
  1724     0174  2976               	goto	u4130
  1725     0175                     u4131:
  1726     0175  29CF               	goto	l3923
  1727     0176                     u4130:
  1728     0176                     l3899:
  1729                           
  1730                           ;main.c: 185:         {;main.c: 187:             lcdSend(0x01, 0);
  1731     0176  01A0               	clrf	lcdSend@tipo^(0+128)
  1732     0177  3001               	movlw	1
  1733     0178  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1734     017D                     l3901:
  1735                           
  1736                           ;main.c: 189:             char num_rand_s[16];;main.c: 190:             ConvertToString(
      +                          num_rand, num_rand_s);
  1737     017D  1683               	bsf	3,5	;RP0=1, select bank1
  1738     017E  1303               	bcf	3,6	;RP1=0, select bank1
  1739     017F  0862               	movf	_num_rand^(0+128),w
  1740     0180  00D9               	movwf	ConvertToString@n^(0+128)
  1741     0181  0863               	movf	(_num_rand+1)^(0+128),w
  1742     0182  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  1743     0183  3000               	movlw	0
  1744     0184  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  1745     0185  30FF               	movlw	255
  1746     0186  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  1747     0187  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  1748     0188  30D2               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1749     0189  00DD               	movwf	ConvertToString@str^(0+128)
  1750     018A  3001               	movlw	1
  1751     018B  00DE               	movwf	(ConvertToString@str+1)^(0+128)
  1752     018C  120A  118A  25F4  120A  118A  	fcall	_ConvertToString
  1753     0191                     l3903:
  1754                           
  1755                           ;main.c: 191:             lcdPrint(num_rand_s);
  1756     0191  30D2               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1757     0192  1683               	bsf	3,5	;RP0=1, select bank1
  1758     0193  1303               	bcf	3,6	;RP1=0, select bank1
  1759     0194  00A4               	movwf	lcdPrint@str^(0+128)
  1760     0195  3001               	movlw	1
  1761     0196  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1762     0197  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1763     019C                     l3905:
  1764                           
  1765                           ;main.c: 203:             packet[0] = '0';
  1766     019C  3030               	movlw	48
  1767     019D  1683               	bsf	3,5	;RP0=1, select bank3
  1768     019E  1703               	bsf	3,6	;RP1=1, select bank3
  1769     019F  00B4               	movwf	_packet^(0+384)
  1770     01A0                     l3907:
  1771                           
  1772                           ;main.c: 204:             packet[1] = '/';
  1773     01A0  302F               	movlw	47
  1774     01A1  00B5               	movwf	(_packet^(0+384)+1)
  1775     01A2                     l3909:
  1776                           
  1777                           ;main.c: 205:             packet[2] = '\0';
  1778     01A2  01B6               	clrf	(_packet^(0+384)+2)
  1779     01A3                     l3911:
  1780                           
  1781                           ;main.c: 207:             ConcatToPacket(packet, PIC_ID, '/');
  1782     01A3  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1783     01A4  1683               	bsf	3,5	;RP0=1, select bank1
  1784     01A5  1303               	bcf	3,6	;RP1=0, select bank1
  1785     01A6  00B3               	movwf	ConcatToPacket@str^(0+128)
  1786     01A7  3000               	movlw	0
  1787     01A8  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1788     01A9  302F               	movlw	47
  1789     01AA  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1790     01AB  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1791     01AC  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  1792     01B1                     l3913:
  1793                           
  1794                           ;main.c: 209:             packet[6] = '0';
  1795     01B1  3030               	movlw	48
  1796     01B2  1683               	bsf	3,5	;RP0=1, select bank3
  1797     01B3  1703               	bsf	3,6	;RP1=1, select bank3
  1798     01B4  00BA               	movwf	(_packet^(0+384)+6)
  1799     01B5                     l3915:
  1800                           
  1801                           ;main.c: 210:             packet[7] = '/';
  1802     01B5  302F               	movlw	47
  1803     01B6  00BB               	movwf	(_packet^(0+384)+7)
  1804     01B7                     l3917:
  1805                           
  1806                           ;main.c: 211:             packet[8] = '\0';
  1807     01B7  01BC               	clrf	(_packet^(0+384)+8)
  1808     01B8                     l3919:
  1809                           
  1810                           ;main.c: 213:             ConcatToPacket(packet, num_rand_s, ' ');
  1811     01B8  30D2               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1812     01B9  1683               	bsf	3,5	;RP0=1, select bank1
  1813     01BA  1303               	bcf	3,6	;RP1=0, select bank1
  1814     01BB  00B3               	movwf	ConcatToPacket@str^(0+128)
  1815     01BC  3001               	movlw	1
  1816     01BD  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1817     01BE  3020               	movlw	32
  1818     01BF  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1819     01C0  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1820     01C1  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  1821     01C6                     l3921:
  1822                           
  1823                           ;main.c: 215:             UART_TxString(packet, 0);
  1824     01C6  1683               	bsf	3,5	;RP0=1, select bank1
  1825     01C7  1303               	bcf	3,6	;RP1=0, select bank1
  1826     01C8  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  1827     01C9  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1828     01CA  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  1829     01CF                     l3923:
  1830                           
  1831                           ;main.c: 218:         old_num_rand = num_rand;
  1832     01CF  1683               	bsf	3,5	;RP0=1, select bank1
  1833     01D0  1303               	bcf	3,6	;RP1=0, select bank1
  1834     01D1  0863               	movf	(_num_rand+1)^(0+128),w
  1835     01D2  1683               	bsf	3,5	;RP0=1, select bank3
  1836     01D3  1703               	bsf	3,6	;RP1=1, select bank3
  1837     01D4  0091               	movwf	(_old_num_rand+1)^(0+384)
  1838     01D5  1683               	bsf	3,5	;RP0=1, select bank1
  1839     01D6  1303               	bcf	3,6	;RP1=0, select bank1
  1840     01D7  0862               	movf	_num_rand^(0+128),w
  1841     01D8  1683               	bsf	3,5	;RP0=1, select bank3
  1842     01D9  1703               	bsf	3,6	;RP1=1, select bank3
  1843     01DA  0090               	movwf	_old_num_rand^(0+384)
  1844     01DB                     l3925:
  1845                           
  1846                           ;main.c: 221:         if(recieved)
  1847     01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1848     01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1849     01DD  084C               	movf	_recieved,w
  1850     01DE  1903               	btfsc	3,2
  1851     01DF  29E1               	goto	u4141
  1852     01E0  29E2               	goto	u4140
  1853     01E1                     u4141:
  1854     01E1  2AB9               	goto	l3977
  1855     01E2                     u4140:
  1856     01E2                     l3927:
  1857                           
  1858                           ;main.c: 222:         {;main.c: 223:             SplitPacket(dato);
  1859     01E2  3010               	movlw	(low (_dato| (0+256)))& (0+255)
  1860     01E3  120A  158A  2765  120A  118A  	fcall	_SplitPacket
  1861     01E8                     l3929:
  1862                           
  1863                           ;main.c: 225:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '0')
  1864     01E8  3031               	movlw	49
  1865     01E9  1683               	bsf	3,5	;RP0=1, select bank1
  1866     01EA  1303               	bcf	3,6	;RP1=0, select bank1
  1867     01EB  0669               	xorwf	_source^(0+128),w
  1868     01EC  1D03               	btfss	3,2
  1869     01ED  29EF               	goto	u4151
  1870     01EE  29F0               	goto	u4150
  1871     01EF                     u4151:
  1872     01EF  2A73               	goto	l3961
  1873     01F0                     u4150:
  1874     01F0                     l3931:
  1875     01F0  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1876     01F1  00A7               	movwf	CompareStrings@str2^(0+128)
  1877     01F2  3000               	movlw	0
  1878     01F3  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  1879     01F4  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  1880     01F5  120A  158A  224D  120A  118A  	fcall	_CompareStrings
  1881     01FA  3A00               	xorlw	0
  1882     01FB  1903               	skipnz
  1883     01FC  29FE               	goto	u4161
  1884     01FD  29FF               	goto	u4160
  1885     01FE                     u4161:
  1886     01FE  2A73               	goto	l3961
  1887     01FF                     u4160:
  1888     01FF                     l3933:
  1889     01FF  3030               	movlw	48
  1890     0200  1683               	bsf	3,5	;RP0=1, select bank1
  1891     0201  1303               	bcf	3,6	;RP1=0, select bank1
  1892     0202  0668               	xorwf	_type^(0+128),w
  1893     0203  1D03               	btfss	3,2
  1894     0204  2A06               	goto	u4171
  1895     0205  2A07               	goto	u4170
  1896     0206                     u4171:
  1897     0206  2A73               	goto	l3961
  1898     0207                     u4170:
  1899     0207                     l3935:
  1900                           
  1901                           ;main.c: 226:             {;main.c: 228:                 packet[0] = '0';
  1902     0207  3030               	movlw	48
  1903     0208  1683               	bsf	3,5	;RP0=1, select bank3
  1904     0209  1703               	bsf	3,6	;RP1=1, select bank3
  1905     020A  00B4               	movwf	_packet^(0+384)
  1906                           
  1907                           ;main.c: 229:                 packet[1] = '/';
  1908     020B  302F               	movlw	47
  1909     020C  00B5               	movwf	(_packet^(0+384)+1)
  1910     020D                     l3937:
  1911                           
  1912                           ;main.c: 230:                 packet[2] = '\0';
  1913     020D  01B6               	clrf	(_packet^(0+384)+2)
  1914     020E                     l3939:
  1915                           
  1916                           ;main.c: 231:                 ConcatToPacket(packet, PIC_ID, '/');
  1917     020E  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1918     020F  1683               	bsf	3,5	;RP0=1, select bank1
  1919     0210  1303               	bcf	3,6	;RP1=0, select bank1
  1920     0211  00B3               	movwf	ConcatToPacket@str^(0+128)
  1921     0212  3000               	movlw	0
  1922     0213  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1923     0214  302F               	movlw	47
  1924     0215  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1925     0216  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1926     0217  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  1927     021C                     l3941:
  1928                           
  1929                           ;main.c: 232:                 ConcatToPacket(packet, "2", ' ');
  1930     021C  30E1               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1931     021D  1683               	bsf	3,5	;RP0=1, select bank1
  1932     021E  1303               	bcf	3,6	;RP1=0, select bank1
  1933     021F  00B3               	movwf	ConcatToPacket@str^(0+128)
  1934     0220  3080               	movlw	128
  1935     0221  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1936     0222  3020               	movlw	32
  1937     0223  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1938     0224  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1939     0225  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  1940     022A                     l3943:
  1941                           
  1942                           ;main.c: 233:                 UART_TxString(packet, 1);
  1943     022A  1683               	bsf	3,5	;RP0=1, select bank1
  1944     022B  1303               	bcf	3,6	;RP1=0, select bank1
  1945     022C  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  1946     022D  0AC1               	incf	UART_TxString@is_ACK^(0+128),f
  1947     022E  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1948     022F  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  1949     0234                     l3945:
  1950                           
  1951                           ;main.c: 235:                 compare = 1;
  1952     0234  1683               	bsf	3,5	;RP0=1, select bank1
  1953     0235  1303               	bcf	3,6	;RP1=0, select bank1
  1954     0236  01E6               	clrf	_compare^(0+128)
  1955     0237  0AE6               	incf	_compare^(0+128),f
  1956     0238                     l3947:
  1957                           
  1958                           ;main.c: 236:                 old_num_rand = num_rand = 0;
  1959     0238  01E2               	clrf	_num_rand^(0+128)
  1960     0239  01E3               	clrf	(_num_rand+1)^(0+128)
  1961     023A  1683               	bsf	3,5	;RP0=1, select bank3
  1962     023B  1703               	bsf	3,6	;RP1=1, select bank3
  1963     023C  0190               	clrf	_old_num_rand^(0+384)
  1964     023D  0191               	clrf	(_old_num_rand+1)^(0+384)
  1965     023E                     l3949:
  1966                           
  1967                           ;main.c: 238:                 maxFail = 3;
  1968     023E  3003               	movlw	3
  1969     023F  1683               	bsf	3,5	;RP0=1, select bank1
  1970     0240  1303               	bcf	3,6	;RP1=0, select bank1
  1971     0241  00ED               	movwf	_maxFail^(0+128)
  1972     0242                     l3951:
  1973                           
  1974                           ;main.c: 240:                 lcdSend(0x01, 0);
  1975     0242  01A0               	clrf	lcdSend@tipo^(0+128)
  1976     0243  3001               	movlw	1
  1977     0244  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1978     0249                     l3953:
  1979                           
  1980                           ;main.c: 241:                 lcdPrint("Inserisci codice\0");
  1981     0249  3026               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1982     024A  1683               	bsf	3,5	;RP0=1, select bank1
  1983     024B  1303               	bcf	3,6	;RP1=0, select bank1
  1984     024C  00A4               	movwf	lcdPrint@str^(0+128)
  1985     024D  3080               	movlw	128
  1986     024E  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1987     024F  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  1988     0254                     l3955:
  1989                           
  1990                           ;main.c: 242:                 lcdSend(0xC0, 0);
  1991     0254  1683               	bsf	3,5	;RP0=1, select bank1
  1992     0255  1303               	bcf	3,6	;RP1=0, select bank1
  1993     0256  01A0               	clrf	lcdSend@tipo^(0+128)
  1994     0257  30C0               	movlw	192
  1995     0258  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1996     025D                     l3957:
  1997                           
  1998                           ;main.c: 243:                 lcdPrint("Tentativi: \0");
  1999     025D  3097               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2000     025E  1683               	bsf	3,5	;RP0=1, select bank1
  2001     025F  1303               	bcf	3,6	;RP1=0, select bank1
  2002     0260  00A4               	movwf	lcdPrint@str^(0+128)
  2003     0261  3080               	movlw	128
  2004     0262  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2005     0263  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  2006     0268                     l3959:
  2007                           
  2008                           ;main.c: 244:                 lcdSend(maxFail + '0', 1);
  2009     0268  1683               	bsf	3,5	;RP0=1, select bank1
  2010     0269  1303               	bcf	3,6	;RP1=0, select bank1
  2011     026A  01A0               	clrf	lcdSend@tipo^(0+128)
  2012     026B  0AA0               	incf	lcdSend@tipo^(0+128),f
  2013     026C  086D               	movf	_maxFail^(0+128),w
  2014     026D  3E30               	addlw	48
  2015     026E  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2016     0273                     l3961:
  2017                           
  2018                           ;main.c: 247:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '2')
  2019     0273  3031               	movlw	49
  2020     0274  1683               	bsf	3,5	;RP0=1, select bank1
  2021     0275  1303               	bcf	3,6	;RP1=0, select bank1
  2022     0276  0669               	xorwf	_source^(0+128),w
  2023     0277  1D03               	btfss	3,2
  2024     0278  2A7A               	goto	u4181
  2025     0279  2A7B               	goto	u4180
  2026     027A                     u4181:
  2027     027A  2AB5               	goto	l3973
  2028     027B                     u4180:
  2029     027B                     l3963:
  2030     027B  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  2031     027C  00A7               	movwf	CompareStrings@str2^(0+128)
  2032     027D  3000               	movlw	0
  2033     027E  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  2034     027F  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  2035     0280  120A  158A  224D  120A  118A  	fcall	_CompareStrings
  2036     0285  3A00               	xorlw	0
  2037     0286  1903               	skipnz
  2038     0287  2A89               	goto	u4191
  2039     0288  2A8A               	goto	u4190
  2040     0289                     u4191:
  2041     0289  2AB5               	goto	l3973
  2042     028A                     u4190:
  2043     028A                     l3965:
  2044     028A  3032               	movlw	50
  2045     028B  1683               	bsf	3,5	;RP0=1, select bank1
  2046     028C  1303               	bcf	3,6	;RP1=0, select bank1
  2047     028D  0668               	xorwf	_type^(0+128),w
  2048     028E  1D03               	btfss	3,2
  2049     028F  2A91               	goto	u4201
  2050     0290  2A92               	goto	u4200
  2051     0291                     u4201:
  2052     0291  2AB5               	goto	l3973
  2053     0292                     u4200:
  2054     0292                     l3967:
  2055                           
  2056                           ;main.c: 248:             {;main.c: 250:                 if(num_rand != 0)
  2057     0292  0862               	movf	_num_rand^(0+128),w
  2058     0293  0463               	iorwf	(_num_rand+1)^(0+128),w
  2059     0294  1903               	btfsc	3,2
  2060     0295  2A97               	goto	u4211
  2061     0296  2A98               	goto	u4210
  2062     0297                     u4211:
  2063     0297  2AA3               	goto	l3971
  2064     0298                     u4210:
  2065     0298                     l3969:
  2066                           
  2067                           ;main.c: 251:                     seconds = 0;
  2068     0298  3000               	movlw	0
  2069     0299  1283               	bcf	3,5	;RP0=0, select bank0
  2070     029A  1303               	bcf	3,6	;RP1=0, select bank0
  2071     029B  00BF               	movwf	_seconds+3
  2072     029C  3000               	movlw	0
  2073     029D  00BE               	movwf	_seconds+2
  2074     029E  3000               	movlw	0
  2075     029F  00BD               	movwf	_seconds+1
  2076     02A0  3000               	movlw	0
  2077     02A1  00BC               	movwf	_seconds
  2078     02A2  2AB5               	goto	l3973
  2079     02A3                     l3971:
  2080                           
  2081                           ;main.c: 254:                 {;main.c: 255:                     milliseconds = 0;
  2082     02A3  3000               	movlw	0
  2083     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2084     02A5  1303               	bcf	3,6	;RP1=0, select bank0
  2085     02A6  00C3               	movwf	_milliseconds+3
  2086     02A7  3000               	movlw	0
  2087     02A8  00C2               	movwf	_milliseconds+2
  2088     02A9  3000               	movlw	0
  2089     02AA  00C1               	movwf	_milliseconds+1
  2090     02AB  3000               	movlw	0
  2091     02AC  00C0               	movwf	_milliseconds
  2092                           
  2093                           ;main.c: 256:                     seconds = 1000;
  2094     02AD  3000               	movlw	0
  2095     02AE  00BF               	movwf	_seconds+3
  2096     02AF  3000               	movlw	0
  2097     02B0  00BE               	movwf	_seconds+2
  2098     02B1  3003               	movlw	3
  2099     02B2  00BD               	movwf	_seconds+1
  2100     02B3  30E8               	movlw	232
  2101     02B4  00BC               	movwf	_seconds
  2102     02B5                     l3973:
  2103                           
  2104                           ;main.c: 259:             recieved = 0;
  2105     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2106     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2107     02B7  01CC               	clrf	_recieved
  2108     02B8                     l3975:
  2109                           
  2110                           ;main.c: 260:             iS = 0;
  2111     02B8  01CE               	clrf	_iS
  2112     02B9                     l3977:
  2113                           
  2114                           ;main.c: 265:         if(success)
  2115     02B9  084B               	movf	_success,w
  2116     02BA  1903               	btfsc	3,2
  2117     02BB  2ABD               	goto	u4221
  2118     02BC  2ABE               	goto	u4220
  2119     02BD                     u4221:
  2120     02BD  2B0D               	goto	l4003
  2121     02BE                     u4220:
  2122     02BE                     l3979:
  2123                           
  2124                           ;main.c: 266:         {;main.c: 268:             lcdSend(0x01, 0);
  2125     02BE  1683               	bsf	3,5	;RP0=1, select bank1
  2126     02BF  1303               	bcf	3,6	;RP1=0, select bank1
  2127     02C0  01A0               	clrf	lcdSend@tipo^(0+128)
  2128     02C1  3001               	movlw	1
  2129     02C2  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2130     02C7                     l3981:
  2131                           
  2132                           ;main.c: 269:             lcdPrint("Benvenuto!\0");
  2133     02C7  30A4               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2134     02C8  1683               	bsf	3,5	;RP0=1, select bank1
  2135     02C9  1303               	bcf	3,6	;RP1=0, select bank1
  2136     02CA  00A4               	movwf	lcdPrint@str^(0+128)
  2137     02CB  3080               	movlw	128
  2138     02CC  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2139     02CD  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  2140     02D2                     l3983:
  2141                           
  2142                           ;main.c: 270:             iT = old_iT = 0;
  2143     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2144     02D3  1303               	bcf	3,6	;RP1=0, select bank0
  2145     02D4  01CD               	clrf	_old_iT
  2146     02D5  1683               	bsf	3,5	;RP0=1, select bank1
  2147     02D6  1303               	bcf	3,6	;RP1=0, select bank1
  2148     02D7  01E7               	clrf	_iT^(0+128)
  2149     02D8                     l3985:
  2150                           
  2151                           ;main.c: 271:             success = 0;
  2152     02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2153     02D9  1303               	bcf	3,6	;RP1=0, select bank0
  2154     02DA  01CB               	clrf	_success
  2155     02DB                     l3987:
  2156                           
  2157                           ;main.c: 273:             compare = 0;
  2158     02DB  1683               	bsf	3,5	;RP0=1, select bank1
  2159     02DC  1303               	bcf	3,6	;RP1=0, select bank1
  2160     02DD  01E6               	clrf	_compare^(0+128)
  2161     02DE                     l3989:
  2162                           
  2163                           ;main.c: 274:             maxFail = 3;
  2164     02DE  3003               	movlw	3
  2165     02DF  00ED               	movwf	_maxFail^(0+128)
  2166     02E0                     l3991:
  2167                           
  2168                           ;main.c: 276:             packet[0] = '0';
  2169     02E0  3030               	movlw	48
  2170     02E1  1683               	bsf	3,5	;RP0=1, select bank3
  2171     02E2  1703               	bsf	3,6	;RP1=1, select bank3
  2172     02E3  00B4               	movwf	_packet^(0+384)
  2173     02E4                     l3993:
  2174                           
  2175                           ;main.c: 277:             packet[1] = '/';
  2176     02E4  302F               	movlw	47
  2177     02E5  00B5               	movwf	(_packet^(0+384)+1)
  2178     02E6                     l3995:
  2179                           
  2180                           ;main.c: 278:             packet[2] = '\0';
  2181     02E6  01B6               	clrf	(_packet^(0+384)+2)
  2182     02E7                     l3997:
  2183                           
  2184                           ;main.c: 279:             ConcatToPacket(packet, PIC_ID, '/');
  2185     02E7  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  2186     02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2187     02E9  1303               	bcf	3,6	;RP1=0, select bank1
  2188     02EA  00B3               	movwf	ConcatToPacket@str^(0+128)
  2189     02EB  3000               	movlw	0
  2190     02EC  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2191     02ED  302F               	movlw	47
  2192     02EE  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2193     02EF  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2194     02F0  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  2195     02F5                     l3999:
  2196                           
  2197                           ;main.c: 280:             ConcatToPacket(packet, "1/1", ' ');
  2198     02F5  30DD               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2199     02F6  1683               	bsf	3,5	;RP0=1, select bank1
  2200     02F7  1303               	bcf	3,6	;RP1=0, select bank1
  2201     02F8  00B3               	movwf	ConcatToPacket@str^(0+128)
  2202     02F9  3080               	movlw	128
  2203     02FA  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2204     02FB  3020               	movlw	32
  2205     02FC  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2206     02FD  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2207     02FE  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  2208     0303                     l4001:
  2209                           
  2210                           ;main.c: 281:             UART_TxString(packet, 0);
  2211     0303  1683               	bsf	3,5	;RP0=1, select bank1
  2212     0304  1303               	bcf	3,6	;RP1=0, select bank1
  2213     0305  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2214     0306  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2215     0307  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  2216                           
  2217                           ;main.c: 282:         }
  2218     030C  2BAE               	goto	l4045
  2219     030D                     l4003:
  2220     030D  1683               	bsf	3,5	;RP0=1, select bank1
  2221     030E  1303               	bcf	3,6	;RP1=0, select bank1
  2222     030F  086D               	movf	_maxFail^(0+128),w
  2223     0310  1903               	btfsc	3,2
  2224     0311  2B13               	goto	u4231
  2225     0312  2B14               	goto	u4230
  2226     0313                     u4231:
  2227     0313  2B5E               	goto	l4021
  2228     0314                     u4230:
  2229     0314                     l4005:
  2230     0314  3003               	movlw	3
  2231     0315  026D               	subwf	_maxFail^(0+128),w
  2232     0316  1803               	skipnc
  2233     0317  2B19               	goto	u4241
  2234     0318  2B1A               	goto	u4240
  2235     0319                     u4241:
  2236     0319  2B5E               	goto	l4021
  2237     031A                     u4240:
  2238     031A                     l4007:
  2239     031A  1283               	bcf	3,5	;RP0=0, select bank0
  2240     031B  1303               	bcf	3,6	;RP1=0, select bank0
  2241     031C  084A               	movf	_fail,w
  2242     031D  1903               	btfsc	3,2
  2243     031E  2B20               	goto	u4251
  2244     031F  2B21               	goto	u4250
  2245     0320                     u4251:
  2246     0320  2B5E               	goto	l4021
  2247     0321                     u4250:
  2248     0321                     l4009:
  2249                           
  2250                           ;main.c: 285:         {;main.c: 287:             lcdSend(0x01, 0);
  2251     0321  1683               	bsf	3,5	;RP0=1, select bank1
  2252     0322  1303               	bcf	3,6	;RP1=0, select bank1
  2253     0323  01A0               	clrf	lcdSend@tipo^(0+128)
  2254     0324  3001               	movlw	1
  2255     0325  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2256     032A                     l4011:
  2257                           
  2258                           ;main.c: 288:             lcdPrint("Codice errato\0");
  2259     032A  307A               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2260     032B  1683               	bsf	3,5	;RP0=1, select bank1
  2261     032C  1303               	bcf	3,6	;RP1=0, select bank1
  2262     032D  00A4               	movwf	lcdPrint@str^(0+128)
  2263     032E  3080               	movlw	128
  2264     032F  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2265     0330  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  2266     0335                     l4013:
  2267                           
  2268                           ;main.c: 289:             lcdSend(0xC0, 0);
  2269     0335  1683               	bsf	3,5	;RP0=1, select bank1
  2270     0336  1303               	bcf	3,6	;RP1=0, select bank1
  2271     0337  01A0               	clrf	lcdSend@tipo^(0+128)
  2272     0338  30C0               	movlw	192
  2273     0339  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2274                           
  2275                           ;main.c: 290:             lcdPrint("Tentativi: \0");
  2276     033E  3097               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2277     033F  1683               	bsf	3,5	;RP0=1, select bank1
  2278     0340  1303               	bcf	3,6	;RP1=0, select bank1
  2279     0341  00A4               	movwf	lcdPrint@str^(0+128)
  2280     0342  3080               	movlw	128
  2281     0343  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2282     0344  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  2283     0349                     l4015:
  2284                           
  2285                           ;main.c: 291:             lcdSend(maxFail + '0', 1);
  2286     0349  1683               	bsf	3,5	;RP0=1, select bank1
  2287     034A  1303               	bcf	3,6	;RP1=0, select bank1
  2288     034B  01A0               	clrf	lcdSend@tipo^(0+128)
  2289     034C  0AA0               	incf	lcdSend@tipo^(0+128),f
  2290     034D  086D               	movf	_maxFail^(0+128),w
  2291     034E  3E30               	addlw	48
  2292     034F  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2293     0354                     l4017:
  2294                           
  2295                           ;main.c: 292:             iT = old_iT = 0;
  2296     0354  1283               	bcf	3,5	;RP0=0, select bank0
  2297     0355  1303               	bcf	3,6	;RP1=0, select bank0
  2298     0356  01CD               	clrf	_old_iT
  2299     0357  1683               	bsf	3,5	;RP0=1, select bank1
  2300     0358  1303               	bcf	3,6	;RP1=0, select bank1
  2301     0359  01E7               	clrf	_iT^(0+128)
  2302     035A                     l4019:
  2303                           
  2304                           ;main.c: 293:             fail = 0;
  2305     035A  1283               	bcf	3,5	;RP0=0, select bank0
  2306     035B  1303               	bcf	3,6	;RP1=0, select bank0
  2307     035C  01CA               	clrf	_fail
  2308                           
  2309                           ;main.c: 294:         }
  2310     035D  2BAE               	goto	l4045
  2311     035E                     l4021:
  2312     035E  1683               	bsf	3,5	;RP0=1, select bank1
  2313     035F  1303               	bcf	3,6	;RP1=0, select bank1
  2314     0360  086D               	movf	_maxFail^(0+128),w
  2315     0361  1D03               	btfss	3,2
  2316     0362  2B64               	goto	u4261
  2317     0363  2B65               	goto	u4260
  2318     0364                     u4261:
  2319     0364  2BAE               	goto	l4045
  2320     0365                     u4260:
  2321     0365                     l4023:
  2322                           
  2323                           ;main.c: 297:         {;main.c: 299:             lcdSend(0x01, 0);
  2324     0365  01A0               	clrf	lcdSend@tipo^(0+128)
  2325     0366  3001               	movlw	1
  2326     0367  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2327     036C                     l4025:
  2328                           
  2329                           ;main.c: 300:             lcdPrint("Tent. esauriti\0");
  2330     036C  306A               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2331     036D  1683               	bsf	3,5	;RP0=1, select bank1
  2332     036E  1303               	bcf	3,6	;RP1=0, select bank1
  2333     036F  00A4               	movwf	lcdPrint@str^(0+128)
  2334     0370  3080               	movlw	128
  2335     0371  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2336     0372  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  2337     0377                     l4027:
  2338                           
  2339                           ;main.c: 302:             maxFail = 3;
  2340     0377  3003               	movlw	3
  2341     0378  1683               	bsf	3,5	;RP0=1, select bank1
  2342     0379  1303               	bcf	3,6	;RP1=0, select bank1
  2343     037A  00ED               	movwf	_maxFail^(0+128)
  2344     037B                     l4029:
  2345                           
  2346                           ;main.c: 303:             iT = old_iT = 0;
  2347     037B  1283               	bcf	3,5	;RP0=0, select bank0
  2348     037C  1303               	bcf	3,6	;RP1=0, select bank0
  2349     037D  01CD               	clrf	_old_iT
  2350     037E  1683               	bsf	3,5	;RP0=1, select bank1
  2351     037F  1303               	bcf	3,6	;RP1=0, select bank1
  2352     0380  01E7               	clrf	_iT^(0+128)
  2353     0381                     l4031:
  2354                           
  2355                           ;main.c: 304:             compare = 0;
  2356     0381  01E6               	clrf	_compare^(0+128)
  2357     0382                     l4033:
  2358                           
  2359                           ;main.c: 306:             packet[0] = '0';
  2360     0382  3030               	movlw	48
  2361     0383  1683               	bsf	3,5	;RP0=1, select bank3
  2362     0384  1703               	bsf	3,6	;RP1=1, select bank3
  2363     0385  00B4               	movwf	_packet^(0+384)
  2364     0386                     l4035:
  2365                           
  2366                           ;main.c: 307:             packet[1] = '/';
  2367     0386  302F               	movlw	47
  2368     0387  00B5               	movwf	(_packet^(0+384)+1)
  2369     0388                     l4037:
  2370                           
  2371                           ;main.c: 308:             packet[2] = '\0';
  2372     0388  01B6               	clrf	(_packet^(0+384)+2)
  2373     0389                     l4039:
  2374                           
  2375                           ;main.c: 309:             ConcatToPacket(packet, PIC_ID, '/');
  2376     0389  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  2377     038A  1683               	bsf	3,5	;RP0=1, select bank1
  2378     038B  1303               	bcf	3,6	;RP1=0, select bank1
  2379     038C  00B3               	movwf	ConcatToPacket@str^(0+128)
  2380     038D  3000               	movlw	0
  2381     038E  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2382     038F  302F               	movlw	47
  2383     0390  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2384     0391  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2385     0392  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  2386     0397                     l4041:
  2387                           
  2388                           ;main.c: 310:             ConcatToPacket(packet, "1/0", ' ');
  2389     0397  30D9               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2390     0398  1683               	bsf	3,5	;RP0=1, select bank1
  2391     0399  1303               	bcf	3,6	;RP1=0, select bank1
  2392     039A  00B3               	movwf	ConcatToPacket@str^(0+128)
  2393     039B  3080               	movlw	128
  2394     039C  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2395     039D  3020               	movlw	32
  2396     039E  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2397     039F  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2398     03A0  120A  158A  21AD  120A  118A  	fcall	_ConcatToPacket
  2399     03A5                     l4043:
  2400                           
  2401                           ;main.c: 311:             UART_TxString(packet, 0);
  2402     03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2403     03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2404     03A7  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2405     03A8  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2406     03A9  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  2407     03AE                     l4045:
  2408                           
  2409                           ;main.c: 315:         if(iT != old_iT && compare)
  2410     03AE  1683               	bsf	3,5	;RP0=1, select bank1
  2411     03AF  1303               	bcf	3,6	;RP1=0, select bank1
  2412     03B0  0867               	movf	_iT^(0+128),w
  2413     03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2414     03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2415     03B3  064D               	xorwf	_old_iT,w
  2416     03B4  1903               	skipnz
  2417     03B5  2BB7               	goto	u4271
  2418     03B6  2BB8               	goto	u4270
  2419     03B7                     u4271:
  2420     03B7  2BE5               	goto	l4055
  2421     03B8                     u4270:
  2422     03B8                     l4047:
  2423     03B8  1683               	bsf	3,5	;RP0=1, select bank1
  2424     03B9  1303               	bcf	3,6	;RP1=0, select bank1
  2425     03BA  0866               	movf	_compare^(0+128),w
  2426     03BB  1903               	btfsc	3,2
  2427     03BC  2BBE               	goto	u4281
  2428     03BD  2BBF               	goto	u4280
  2429     03BE                     u4281:
  2430     03BE  2BE5               	goto	l4055
  2431     03BF                     u4280:
  2432     03BF                     l4049:
  2433                           
  2434                           ;main.c: 316:         {;main.c: 318:             lcdSend(0x01, 0);
  2435     03BF  01A0               	clrf	lcdSend@tipo^(0+128)
  2436     03C0  3001               	movlw	1
  2437     03C1  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2438     03C6                     l4051:
  2439                           
  2440                           ;main.c: 319:             lcdPrint("#=conf. *=canc.\0\0"),
  2441     03C6  3014               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2442     03C7  1683               	bsf	3,5	;RP0=1, select bank1
  2443     03C8  1303               	bcf	3,6	;RP1=0, select bank1
  2444     03C9  00A4               	movwf	lcdPrint@str^(0+128)
  2445     03CA  3080               	movlw	128
  2446     03CB  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2447     03CC  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  2448     03D1                     l4053:
  2449     03D1  1683               	bsf	3,5	;RP0=1, select bank1
  2450     03D2  1303               	bcf	3,6	;RP1=0, select bank1
  2451     03D3  01A0               	clrf	lcdSend@tipo^(0+128)
  2452     03D4  30C0               	movlw	192
  2453     03D5  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2454                           
  2455                           ;main.c: 321:             lcdPrint(datoTastierino);
  2456     03DA  3092               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2457     03DB  1683               	bsf	3,5	;RP0=1, select bank1
  2458     03DC  1303               	bcf	3,6	;RP1=0, select bank1
  2459     03DD  00A4               	movwf	lcdPrint@str^(0+128)
  2460     03DE  3001               	movlw	1
  2461     03DF  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2462     03E0  120A  158A  21F7  120A  118A  	fcall	_lcdPrint
  2463     03E5                     l4055:
  2464                           
  2465                           ;main.c: 324:         old_iT = iT;
  2466     03E5  1683               	bsf	3,5	;RP0=1, select bank1
  2467     03E6  1303               	bcf	3,6	;RP1=0, select bank1
  2468     03E7  0867               	movf	_iT^(0+128),w
  2469     03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2470     03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2471     03EA  00CD               	movwf	_old_iT
  2472     03EB  286C               	goto	l3843
  2473     03EC  120A  118A  2810   	ljmp	start
  2474     03EF                     __end_of_main:
  2475                           
  2476                           	psect	text1
  2477     03EF                     __ptext1:	
  2478 ;; *************** function _read_NumPad *****************
  2479 ;; Defined at:
  2480 ;;		line 624 in file "main.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  id              2   43[BANK1 ] int 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  1    wreg      void 
  2487 ;; Registers used:
  2488 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2494 ;;      Params:         0       0       0       0       0
  2495 ;;      Locals:         0       0       2       0       0
  2496 ;;      Temps:          0       0      10       0       0
  2497 ;;      Totals:         0       0      12       0       0
  2498 ;;Total ram usage:       12 bytes
  2499 ;; Hardware stack levels used: 1
  2500 ;; Hardware stack levels required when called: 6
  2501 ;; This function calls:
  2502 ;;		_CompareStrings
  2503 ;;		___awmod
  2504 ;;		___wmul
  2505 ;;		_eeprom_write
  2506 ;;		_rand
  2507 ;;		_srand
  2508 ;; This function is called by:
  2509 ;;		_main
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513     03EF                     _read_NumPad:	
  2514                           ;psect for function _read_NumPad
  2515                           
  2516     03EF                     l3335:	
  2517                           ;incstack = 0
  2518                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2519                           
  2520                           
  2521                           ;main.c: 627:     TRISD |= 0x0F;
  2522     03EF  300F               	movlw	15
  2523     03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2524     03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2525     03F2  00C1               	movwf	??_read_NumPad^(0+128)
  2526     03F3  0841               	movf	??_read_NumPad^(0+128),w
  2527     03F4  0488               	iorwf	8,f	;volatile
  2528     03F5                     l3337:
  2529                           
  2530                           ;main.c: 628:     for(colScan = 0; colScan < 3; colScan++)
  2531     03F5  01EC               	clrf	_colScan^(0+128)
  2532     03F6                     l3343:
  2533                           
  2534                           ;main.c: 629:     {;main.c: 632:         PORTB |= 0x07;
  2535     03F6  3007               	movlw	7
  2536     03F7  00C1               	movwf	??_read_NumPad^(0+128)
  2537     03F8  0841               	movf	??_read_NumPad^(0+128),w
  2538     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2539     03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2540     03FB  0486               	iorwf	6,f	;volatile
  2541     03FC                     l3345:
  2542                           
  2543                           ;main.c: 634:         PORTB &= colMask[colScan];
  2544     03FC  1683               	bsf	3,5	;RP0=1, select bank1
  2545     03FD  1303               	bcf	3,6	;RP1=0, select bank1
  2546     03FE  086C               	movf	_colScan^(0+128),w
  2547     03FF  3E11               	addlw	low ((_colMask-__stringbase)| (0+32768))
  2548     0400  0084               	movwf	4
  2549     0401  120A  158A  200A  120A  118A  	fcall	stringdir
  2550     0406  00C1               	movwf	??_read_NumPad^(0+128)
  2551     0407  0841               	movf	??_read_NumPad^(0+128),w
  2552     0408  1283               	bcf	3,5	;RP0=0, select bank0
  2553     0409  1303               	bcf	3,6	;RP1=0, select bank0
  2554     040A  0586               	andwf	6,f	;volatile
  2555     040B                     l3347:
  2556                           
  2557                           ;main.c: 636:         for(rowScan = 0; rowScan < 4; rowScan++)
  2558     040B  1683               	bsf	3,5	;RP0=1, select bank1
  2559     040C  1303               	bcf	3,6	;RP1=0, select bank1
  2560     040D  01EB               	clrf	_rowScan^(0+128)
  2561     040E                     l3353:
  2562                           
  2563                           ;main.c: 637:         {;main.c: 639:             if(!(PORTD & rowMask[rowScan]))
  2564     040E  086B               	movf	_rowScan^(0+128),w
  2565     040F  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  2566     0410  0084               	movwf	4
  2567     0411  120A  158A  200A  120A  118A  	fcall	stringdir
  2568     0416  1283               	bcf	3,5	;RP0=0, select bank0
  2569     0417  1303               	bcf	3,6	;RP1=0, select bank0
  2570     0418  0508               	andwf	8,w	;volatile
  2571     0419  1D03               	btfss	3,2
  2572     041A  2C1C               	goto	u3481
  2573     041B  2C1D               	goto	u3480
  2574     041C                     u3481:
  2575     041C  2C48               	goto	l275
  2576     041D                     u3480:
  2577     041D                     l3355:
  2578                           
  2579                           ;main.c: 640:             {;main.c: 642:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  2580     041D  3021               	movlw	33
  2581     041E  1683               	bsf	3,5	;RP0=1, select bank1
  2582     041F  1303               	bcf	3,6	;RP1=0, select bank1
  2583     0420  00C2               	movwf	(??_read_NumPad^(0+128)+1)
  2584     0421  3075               	movlw	117
  2585     0422  00C1               	movwf	??_read_NumPad^(0+128)
  2586     0423                     u4297:
  2587     0423  0BC1               	decfsz	??_read_NumPad^(0+128),f
  2588     0424  2C23               	goto	u4297
  2589     0425  0BC2               	decfsz	(??_read_NumPad^(0+128)+1),f
  2590     0426  2C23               	goto	u4297
  2591     0427  2C28               	nop2
  2592     0428                     l3357:
  2593                           
  2594                           ;main.c: 643:                 if(!(PORTD & rowMask[rowScan]))
  2595     0428  1683               	bsf	3,5	;RP0=1, select bank1
  2596     0429  1303               	bcf	3,6	;RP1=0, select bank1
  2597     042A  086B               	movf	_rowScan^(0+128),w
  2598     042B  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  2599     042C  0084               	movwf	4
  2600     042D  120A  158A  200A  120A  118A  	fcall	stringdir
  2601     0432  1283               	bcf	3,5	;RP0=0, select bank0
  2602     0433  1303               	bcf	3,6	;RP1=0, select bank0
  2603     0434  0508               	andwf	8,w	;volatile
  2604     0435  1D03               	btfss	3,2
  2605     0436  2C38               	goto	u3491
  2606     0437  2C39               	goto	u3490
  2607     0438                     u3491:
  2608     0438  2C48               	goto	l275
  2609     0439                     u3490:
  2610     0439                     l3359:
  2611                           
  2612                           ;main.c: 644:                 {;main.c: 648:                     keypressed = rowScan+(4
      +                          *colScan);
  2613     0439  1683               	bsf	3,5	;RP0=1, select bank1
  2614     043A  1303               	bcf	3,6	;RP1=0, select bank1
  2615     043B  086C               	movf	_colScan^(0+128),w
  2616     043C  00C1               	movwf	??_read_NumPad^(0+128)
  2617     043D  3002               	movlw	2
  2618     043E                     u3505:
  2619     043E  1003               	clrc
  2620     043F  0DC1               	rlf	??_read_NumPad^(0+128),f
  2621     0440  3EFF               	addlw	-1
  2622     0441  1D03               	skipz
  2623     0442  2C3E               	goto	u3505
  2624     0443  086B               	movf	_rowScan^(0+128),w
  2625     0444  0741               	addwf	??_read_NumPad^(0+128),w
  2626     0445  00EF               	movwf	_keypressed^(0+128)
  2627     0446                     l3361:
  2628                           
  2629                           ;main.c: 650:                     keyf = 1;
  2630     0446  01EA               	clrf	_keyf^(0+128)
  2631     0447  0AEA               	incf	_keyf^(0+128),f
  2632     0448                     l275:	
  2633                           ;main.c: 652:             }
  2634                           
  2635                           
  2636                           ;main.c: 653:         }
  2637     0448  3001               	movlw	1
  2638     0449  1683               	bsf	3,5	;RP0=1, select bank1
  2639     044A  1303               	bcf	3,6	;RP1=0, select bank1
  2640     044B  00C1               	movwf	??_read_NumPad^(0+128)
  2641     044C  0841               	movf	??_read_NumPad^(0+128),w
  2642     044D  07EB               	addwf	_rowScan^(0+128),f
  2643     044E                     l3363:
  2644     044E  3004               	movlw	4
  2645     044F  026B               	subwf	_rowScan^(0+128),w
  2646     0450  1C03               	skipc
  2647     0451  2C53               	goto	u3511
  2648     0452  2C54               	goto	u3510
  2649     0453                     u3511:
  2650     0453  2C0E               	goto	l3353
  2651     0454                     u3510:
  2652     0454                     l3365:
  2653                           
  2654                           ;main.c: 655:         if(keyf)
  2655     0454  086A               	movf	_keyf^(0+128),w
  2656     0455  1903               	btfsc	3,2
  2657     0456  2C58               	goto	u3521
  2658     0457  2C59               	goto	u3520
  2659     0458                     u3521:
  2660     0458  2DE9               	goto	l3451
  2661     0459                     u3520:
  2662     0459                     l3367:
  2663                           
  2664                           ;main.c: 656:         {;main.c: 657:             keyf = 0;
  2665     0459  01EA               	clrf	_keyf^(0+128)
  2666     045A                     l3369:
  2667                           
  2668                           ;main.c: 660:             if(keypressed == 8)
  2669     045A  3008               	movlw	8
  2670     045B  066F               	xorwf	_keypressed^(0+128),w
  2671     045C  1D03               	btfss	3,2
  2672     045D  2C5F               	goto	u3531
  2673     045E  2C60               	goto	u3530
  2674     045F                     u3531:
  2675     045F  2D5B               	goto	l3411
  2676     0460                     u3530:
  2677     0460                     l3371:
  2678                           
  2679                           ;main.c: 661:             {;main.c: 663:                 if(initialize && i_id == 3)
  2680     0460  086E               	movf	_initialize^(0+128),w
  2681     0461  1903               	btfsc	3,2
  2682     0462  2C64               	goto	u3541
  2683     0463  2C65               	goto	u3540
  2684     0464                     u3541:
  2685     0464  2CE4               	goto	l3387
  2686     0465                     u3540:
  2687     0465                     l3373:
  2688     0465  3003               	movlw	3
  2689     0466  0664               	xorwf	_i_id^(0+128),w
  2690     0467  0465               	iorwf	(_i_id+1)^(0+128),w
  2691     0468  1D03               	btfss	3,2
  2692     0469  2C6B               	goto	u3551
  2693     046A  2C6C               	goto	u3550
  2694     046B                     u3551:
  2695     046B  2CE4               	goto	l3387
  2696     046C                     u3550:
  2697     046C                     l3375:
  2698                           
  2699                           ;main.c: 664:                 {;main.c: 666:                     int id = (PIC_ID[0] - '
      +                          0') * 100 + (PIC_ID[1] - '0') * 10 + (PIC_ID[2] - '0');
  2700     046C  1283               	bcf	3,5	;RP0=0, select bank0
  2701     046D  1303               	bcf	3,6	;RP1=0, select bank0
  2702     046E  084F               	movf	_PIC_ID,w
  2703     046F  1683               	bsf	3,5	;RP0=1, select bank1
  2704     0470  1303               	bcf	3,6	;RP1=0, select bank1
  2705     0471  00C1               	movwf	??_read_NumPad^(0+128)
  2706     0472  01C2               	clrf	(??_read_NumPad^(0+128)+1)
  2707     0473  0841               	movf	??_read_NumPad^(0+128),w
  2708     0474  00BB               	movwf	___wmul@multiplier^(0+128)
  2709     0475  0842               	movf	(??_read_NumPad+1)^(0+128),w
  2710     0476  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2711     0477  3064               	movlw	100
  2712     0478  00BD               	movwf	___wmul@multiplicand^(0+128)
  2713     0479  3000               	movlw	0
  2714     047A  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2715     047B  160A  118A  26BF  120A  118A  	fcall	___wmul
  2716     0480  1683               	bsf	3,5	;RP0=1, select bank1
  2717     0481  1303               	bcf	3,6	;RP1=0, select bank1
  2718     0482  083B               	movf	?___wmul^(0+128),w
  2719     0483  00C3               	movwf	(??_read_NumPad+2)^(0+128)
  2720     0484  083C               	movf	(?___wmul+1)^(0+128),w
  2721     0485  00C4               	movwf	((??_read_NumPad+2)^(0+128)+1)
  2722     0486  1283               	bcf	3,5	;RP0=0, select bank0
  2723     0487  1303               	bcf	3,6	;RP1=0, select bank0
  2724     0488  0850               	movf	_PIC_ID+1,w
  2725     0489  1683               	bsf	3,5	;RP0=1, select bank1
  2726     048A  1303               	bcf	3,6	;RP1=0, select bank1
  2727     048B  00C5               	movwf	(??_read_NumPad+4)^(0+128)
  2728     048C  01C6               	clrf	((??_read_NumPad+4)^(0+128)+1)
  2729     048D  0845               	movf	(??_read_NumPad+4)^(0+128),w
  2730     048E  00BB               	movwf	___wmul@multiplier^(0+128)
  2731     048F  0846               	movf	(??_read_NumPad+5)^(0+128),w
  2732     0490  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2733     0491  300A               	movlw	10
  2734     0492  00BD               	movwf	___wmul@multiplicand^(0+128)
  2735     0493  3000               	movlw	0
  2736     0494  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2737     0495  160A  118A  26BF  120A  118A  	fcall	___wmul
  2738     049A  1683               	bsf	3,5	;RP0=1, select bank1
  2739     049B  1303               	bcf	3,6	;RP1=0, select bank1
  2740     049C  083B               	movf	?___wmul^(0+128),w
  2741     049D  0743               	addwf	(??_read_NumPad+2)^(0+128),w
  2742     049E  00C7               	movwf	(??_read_NumPad+6)^(0+128)
  2743     049F  083C               	movf	(?___wmul+1)^(0+128),w
  2744     04A0  1803               	skipnc
  2745     04A1  0A3C               	incf	(?___wmul+1)^(0+128),w
  2746     04A2  0744               	addwf	(??_read_NumPad+3)^(0+128),w
  2747     04A3  00C8               	movwf	(??_read_NumPad+7)^(0+128)
  2748     04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2749     04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2750     04A6  0851               	movf	_PIC_ID+2,w
  2751     04A7  1683               	bsf	3,5	;RP0=1, select bank1
  2752     04A8  1303               	bcf	3,6	;RP1=0, select bank1
  2753     04A9  0747               	addwf	(??_read_NumPad+6)^(0+128),w
  2754     04AA  00C9               	movwf	(??_read_NumPad+8)^(0+128)
  2755     04AB  3000               	movlw	0
  2756     04AC  1803               	skipnc
  2757     04AD  3001               	movlw	1
  2758     04AE  0748               	addwf	(??_read_NumPad+7)^(0+128),w
  2759     04AF  00CA               	movwf	(??_read_NumPad+9)^(0+128)
  2760     04B0  0849               	movf	(??_read_NumPad+8)^(0+128),w
  2761     04B1  3E30               	addlw	48
  2762     04B2  00CB               	movwf	read_NumPad@id^(0+128)
  2763     04B3  084A               	movf	(??_read_NumPad+9)^(0+128),w
  2764     04B4  1803               	skipnc
  2765     04B5  3E01               	addlw	1
  2766     04B6  3EEB               	addlw	235
  2767     04B7  00CC               	movwf	(read_NumPad@id+1)^(0+128)
  2768     04B8                     l3377:
  2769                           
  2770                           ;main.c: 668:                     if(id <= 250)
  2771     04B8  084C               	movf	(read_NumPad@id+1)^(0+128),w
  2772     04B9  3A80               	xorlw	128
  2773     04BA  00FF               	movwf	btemp+1
  2774     04BB  3080               	movlw	128
  2775     04BC  027F               	subwf	btemp+1,w
  2776     04BD  1D03               	skipz
  2777     04BE  2CC1               	goto	u3565
  2778     04BF  30FB               	movlw	251
  2779     04C0  024B               	subwf	read_NumPad@id^(0+128),w
  2780     04C1                     u3565:
  2781     04C1  1803               	skipnc
  2782     04C2  2CC4               	goto	u3561
  2783     04C3  2CC5               	goto	u3560
  2784     04C4                     u3561:
  2785     04C4  2CD7               	goto	l280
  2786     04C5                     u3560:
  2787     04C5                     l3379:
  2788                           
  2789                           ;main.c: 669:                     {;main.c: 671:                         eeprom_write(0,
      +                           id);
  2790     04C5  1683               	bsf	3,5	;RP0=1, select bank1
  2791     04C6  1303               	bcf	3,6	;RP1=0, select bank1
  2792     04C7  084B               	movf	read_NumPad@id^(0+128),w
  2793     04C8  00A0               	movwf	eeprom_write@value^(0+128)
  2794     04C9  3000               	movlw	0
  2795     04CA  160A  118A  2747  120A  118A  	fcall	_eeprom_write
  2796     04CF                     l3381:
  2797                           
  2798                           ;main.c: 672:                         pr_succ = 1;
  2799     04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2800     04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2801     04D1  01C6               	clrf	_pr_succ
  2802     04D2  0AC6               	incf	_pr_succ,f
  2803     04D3                     l3383:
  2804                           
  2805                           ;main.c: 674:                         initialize = 0;
  2806     04D3  1683               	bsf	3,5	;RP0=1, select bank1
  2807     04D4  1303               	bcf	3,6	;RP1=0, select bank1
  2808     04D5  01EE               	clrf	_initialize^(0+128)
  2809                           
  2810                           ;main.c: 675:                     }
  2811     04D6  2DD5               	goto	l3447
  2812     04D7                     l280:	
  2813                           ;main.c: 677:                     else
  2814                           
  2815                           
  2816                           ;main.c: 678:                     {;main.c: 679:                         pr_err_max = 1;
  2817     04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2818     04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2819     04D9  01C7               	clrf	_pr_err_max
  2820     04DA  0AC7               	incf	_pr_err_max,f
  2821     04DB                     l3385:
  2822                           
  2823                           ;main.c: 681:                         PIC_ID[0] = '\0';
  2824     04DB  01CF               	clrf	_PIC_ID
  2825                           
  2826                           ;main.c: 682:                         i_id = old_i_id = 0;
  2827     04DC  01C4               	clrf	_old_i_id
  2828     04DD  01C5               	clrf	_old_i_id+1
  2829     04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2830     04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2831     04E0  01E4               	clrf	_i_id^(0+128)
  2832     04E1  01E5               	clrf	(_i_id+1)^(0+128)
  2833     04E2  2DD5               	goto	l3447
  2834     04E3                     l281:	
  2835                           ;main.c: 683:                     }
  2836                           
  2837                           
  2838                           ;main.c: 684:                 }
  2839     04E3  2DD5               	goto	l3447
  2840     04E4                     l3387:
  2841     04E4  086E               	movf	_initialize^(0+128),w
  2842     04E5  1903               	btfsc	3,2
  2843     04E6  2CE8               	goto	u3571
  2844     04E7  2CE9               	goto	u3570
  2845     04E8                     u3571:
  2846     04E8  2CFB               	goto	l3395
  2847     04E9                     u3570:
  2848     04E9                     l3389:
  2849     04E9  0865               	movf	(_i_id+1)^(0+128),w
  2850     04EA  3A80               	xorlw	128
  2851     04EB  00FF               	movwf	btemp+1
  2852     04EC  3080               	movlw	128
  2853     04ED  027F               	subwf	btemp+1,w
  2854     04EE  1D03               	skipz
  2855     04EF  2CF2               	goto	u3585
  2856     04F0  3003               	movlw	3
  2857     04F1  0264               	subwf	_i_id^(0+128),w
  2858     04F2                     u3585:
  2859     04F2  1803               	skipnc
  2860     04F3  2CF5               	goto	u3581
  2861     04F4  2CF6               	goto	u3580
  2862     04F5                     u3581:
  2863     04F5  2CFB               	goto	l3395
  2864     04F6                     u3580:
  2865     04F6                     l3391:
  2866                           
  2867                           ;main.c: 687:                 {;main.c: 688:                     pr_err_len = 1;
  2868     04F6  1283               	bcf	3,5	;RP0=0, select bank0
  2869     04F7  1303               	bcf	3,6	;RP1=0, select bank0
  2870     04F8  01C8               	clrf	_pr_err_len
  2871     04F9  0AC8               	incf	_pr_err_len,f
  2872     04FA  2CDB               	goto	l3385
  2873     04FB                     l3395:
  2874     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  2875     04FC  1303               	bcf	3,6	;RP1=0, select bank1
  2876     04FD  0866               	movf	_compare^(0+128),w
  2877     04FE  1D03               	btfss	3,2
  2878     04FF  2D01               	goto	u3591
  2879     0500  2D02               	goto	u3590
  2880     0501                     u3591:
  2881     0501  2D34               	goto	l3399
  2882     0502                     u3590:
  2883     0502                     l3397:
  2884                           
  2885                           ;main.c: 695:                 {;main.c: 697:                     srand(milliseconds);
  2886     0502  1283               	bcf	3,5	;RP0=0, select bank0
  2887     0503  1303               	bcf	3,6	;RP1=0, select bank0
  2888     0504  0841               	movf	_milliseconds+1,w
  2889     0505  1683               	bsf	3,5	;RP0=1, select bank1
  2890     0506  1303               	bcf	3,6	;RP1=0, select bank1
  2891     0507  00A1               	movwf	(srand@x+1)^(0+128)
  2892     0508  1283               	bcf	3,5	;RP0=0, select bank0
  2893     0509  1303               	bcf	3,6	;RP1=0, select bank0
  2894     050A  0840               	movf	_milliseconds,w
  2895     050B  1683               	bsf	3,5	;RP0=1, select bank1
  2896     050C  1303               	bcf	3,6	;RP1=0, select bank1
  2897     050D  00A0               	movwf	srand@x^(0+128)
  2898     050E  160A  118A  263E  120A  118A  	fcall	_srand
  2899                           
  2900                           ;main.c: 699:                     num_rand = ((rand()%8999)+1000);
  2901     0513  3027               	movlw	39
  2902     0514  1683               	bsf	3,5	;RP0=1, select bank1
  2903     0515  1303               	bcf	3,6	;RP1=0, select bank1
  2904     0516  00B4               	movwf	___awmod@divisor^(0+128)
  2905     0517  3023               	movlw	35
  2906     0518  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  2907     0519  120A  158A  248E  120A  118A  	fcall	_rand
  2908     051E  1683               	bsf	3,5	;RP0=1, select bank1
  2909     051F  1303               	bcf	3,6	;RP1=0, select bank1
  2910     0520  082E               	movf	(?_rand+1)^(0+128),w
  2911     0521  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  2912     0522  082D               	movf	?_rand^(0+128),w
  2913     0523  00B6               	movwf	___awmod@dividend^(0+128)
  2914     0524  120A  158A  22FF  120A  118A  	fcall	___awmod
  2915     0529  1683               	bsf	3,5	;RP0=1, select bank1
  2916     052A  1303               	bcf	3,6	;RP1=0, select bank1
  2917     052B  0834               	movf	?___awmod^(0+128),w
  2918     052C  3EE8               	addlw	232
  2919     052D  00E2               	movwf	_num_rand^(0+128)
  2920     052E  0835               	movf	(?___awmod+1)^(0+128),w
  2921     052F  1803               	skipnc
  2922     0530  3E01               	addlw	1
  2923     0531  3E03               	addlw	3
  2924     0532  00E3               	movwf	(_num_rand+1)^(0+128)
  2925                           
  2926                           ;main.c: 700:                 }
  2927     0533  2DD5               	goto	l3447
  2928     0534                     l3399:
  2929     0534  0866               	movf	_compare^(0+128),w
  2930     0535  1903               	btfsc	3,2
  2931     0536  2D38               	goto	u3601
  2932     0537  2D39               	goto	u3600
  2933     0538                     u3601:
  2934     0538  2D4D               	goto	l3405
  2935     0539                     u3600:
  2936     0539                     l3401:
  2937     0539  3092               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2938     053A  00A7               	movwf	CompareStrings@str2^(0+128)
  2939     053B  3001               	movlw	1
  2940     053C  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  2941     053D  30A3               	movlw	(low (_datoSeriale| (0+256)))& (0+255)
  2942     053E  120A  158A  224D  120A  118A  	fcall	_CompareStrings
  2943     0543  3A00               	xorlw	0
  2944     0544  1903               	skipnz
  2945     0545  2D47               	goto	u3611
  2946     0546  2D48               	goto	u3610
  2947     0547                     u3611:
  2948     0547  2D4D               	goto	l3405
  2949     0548                     u3610:
  2950     0548                     l3403:
  2951                           
  2952                           ;main.c: 703:                 {;main.c: 704:                     success = 1;
  2953     0548  1283               	bcf	3,5	;RP0=0, select bank0
  2954     0549  1303               	bcf	3,6	;RP1=0, select bank0
  2955     054A  01CB               	clrf	_success
  2956     054B  0ACB               	incf	_success,f
  2957                           
  2958                           ;main.c: 705:                 }
  2959     054C  2DD5               	goto	l3447
  2960     054D                     l3405:
  2961     054D  1683               	bsf	3,5	;RP0=1, select bank1
  2962     054E  1303               	bcf	3,6	;RP1=0, select bank1
  2963     054F  0866               	movf	_compare^(0+128),w
  2964     0550  1903               	btfsc	3,2
  2965     0551  2D53               	goto	u3621
  2966     0552  2D54               	goto	u3620
  2967     0553                     u3621:
  2968     0553  2CE3               	goto	l281
  2969     0554                     u3620:
  2970     0554                     l3407:
  2971                           
  2972                           ;main.c: 708:                 {;main.c: 709:                     maxFail--;
  2973     0554  3001               	movlw	1
  2974     0555  02ED               	subwf	_maxFail^(0+128),f
  2975     0556                     l3409:
  2976                           
  2977                           ;main.c: 710:                     fail = 1;
  2978     0556  1283               	bcf	3,5	;RP0=0, select bank0
  2979     0557  1303               	bcf	3,6	;RP1=0, select bank0
  2980     0558  01CA               	clrf	_fail
  2981     0559  0ACA               	incf	_fail,f
  2982     055A  2DD5               	goto	l3447
  2983     055B                     l3411:
  2984     055B  086F               	movf	_keypressed^(0+128),w
  2985     055C  1D03               	btfss	3,2
  2986     055D  2D5F               	goto	u3631
  2987     055E  2D60               	goto	u3630
  2988     055F                     u3631:
  2989     055F  2D92               	goto	l3429
  2990     0560                     u3630:
  2991     0560                     l3413:
  2992                           
  2993                           ;main.c: 715:             {;main.c: 717:                 if(compare && iT > 0)
  2994     0560  0866               	movf	_compare^(0+128),w
  2995     0561  1903               	btfsc	3,2
  2996     0562  2D64               	goto	u3641
  2997     0563  2D65               	goto	u3640
  2998     0564                     u3641:
  2999     0564  2D72               	goto	l3421
  3000     0565                     u3640:
  3001     0565                     l3415:
  3002     0565  0867               	movf	_iT^(0+128),w
  3003     0566  1903               	btfsc	3,2
  3004     0567  2D69               	goto	u3651
  3005     0568  2D6A               	goto	u3650
  3006     0569                     u3651:
  3007     0569  2D72               	goto	l3421
  3008     056A                     u3650:
  3009     056A                     l3417:
  3010                           
  3011                           ;main.c: 718:                 {;main.c: 720:                     iT--;
  3012     056A  3001               	movlw	1
  3013     056B  02E7               	subwf	_iT^(0+128),f
  3014     056C                     l3419:
  3015                           
  3016                           ;main.c: 721:                     datoTastierino[iT] = '\0';
  3017     056C  0867               	movf	_iT^(0+128),w
  3018     056D  3E92               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3019     056E  0084               	movwf	4
  3020     056F  1783               	bsf	3,7	;select IRP bank3
  3021     0570  0180               	clrf	0
  3022                           
  3023                           ;main.c: 722:                 }
  3024     0571  2DD5               	goto	l3447
  3025     0572                     l3421:
  3026     0572  086E               	movf	_initialize^(0+128),w
  3027     0573  1903               	btfsc	3,2
  3028     0574  2D76               	goto	u3661
  3029     0575  2D77               	goto	u3660
  3030     0576                     u3661:
  3031     0576  2DD5               	goto	l3447
  3032     0577                     u3660:
  3033     0577                     l3423:
  3034     0577  0865               	movf	(_i_id+1)^(0+128),w
  3035     0578  3A80               	xorlw	128
  3036     0579  00FF               	movwf	btemp+1
  3037     057A  3080               	movlw	128
  3038     057B  027F               	subwf	btemp+1,w
  3039     057C  1D03               	skipz
  3040     057D  2D80               	goto	u3675
  3041     057E  3001               	movlw	1
  3042     057F  0264               	subwf	_i_id^(0+128),w
  3043     0580                     u3675:
  3044     0580  1C03               	skipc
  3045     0581  2D83               	goto	u3671
  3046     0582  2D84               	goto	u3670
  3047     0583                     u3671:
  3048     0583  2DD5               	goto	l3447
  3049     0584                     u3670:
  3050     0584                     l3425:
  3051                           
  3052                           ;main.c: 725:                 {;main.c: 727:                     i_id--;
  3053     0584  30FF               	movlw	255
  3054     0585  1683               	bsf	3,5	;RP0=1, select bank1
  3055     0586  1303               	bcf	3,6	;RP1=0, select bank1
  3056     0587  07E4               	addwf	_i_id^(0+128),f
  3057     0588  1803               	skipnc
  3058     0589  0AE5               	incf	(_i_id+1)^(0+128),f
  3059     058A  30FF               	movlw	255
  3060     058B  07E5               	addwf	(_i_id+1)^(0+128),f
  3061     058C                     l3427:
  3062                           
  3063                           ;main.c: 728:                     PIC_ID[i_id] = '\0';
  3064     058C  0864               	movf	_i_id^(0+128),w
  3065     058D  3E4F               	addlw	(low (_PIC_ID| 0))& (0+255)
  3066     058E  0084               	movwf	4
  3067     058F  1383               	bcf	3,7	;select IRP bank0
  3068     0590  0180               	clrf	0
  3069     0591  2DD5               	goto	l3447
  3070     0592                     l3429:
  3071     0592  0866               	movf	_compare^(0+128),w
  3072     0593  1903               	btfsc	3,2
  3073     0594  2D96               	goto	u3681
  3074     0595  2D97               	goto	u3680
  3075     0596                     u3681:
  3076     0596  2DAB               	goto	l3437
  3077     0597                     u3680:
  3078     0597                     l3431:
  3079                           
  3080                           ;main.c: 733:             {;main.c: 735:                 datoTastierino[iT++] = keys[key
      +                          pressed];
  3081     0597  086F               	movf	_keypressed^(0+128),w
  3082     0598  3E01               	addlw	low ((_keys-__stringbase)| (0+32768))
  3083     0599  0084               	movwf	4
  3084     059A  120A  158A  200A  120A  118A  	fcall	stringdir
  3085     059F  00C1               	movwf	??_read_NumPad^(0+128)
  3086     05A0  0867               	movf	_iT^(0+128),w
  3087     05A1  3E92               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3088     05A2  0084               	movwf	4
  3089     05A3  0841               	movf	??_read_NumPad^(0+128),w
  3090     05A4  1783               	bsf	3,7	;select IRP bank3
  3091     05A5  0080               	movwf	0
  3092     05A6                     l3433:
  3093     05A6  3001               	movlw	1
  3094     05A7  00C1               	movwf	??_read_NumPad^(0+128)
  3095     05A8  0841               	movf	??_read_NumPad^(0+128),w
  3096     05A9  07E7               	addwf	_iT^(0+128),f
  3097     05AA  2D6C               	goto	l3419
  3098     05AB                     l3437:
  3099     05AB  086E               	movf	_initialize^(0+128),w
  3100     05AC  1903               	btfsc	3,2
  3101     05AD  2DAF               	goto	u3691
  3102     05AE  2DB0               	goto	u3690
  3103     05AF                     u3691:
  3104     05AF  2DD5               	goto	l3447
  3105     05B0                     u3690:
  3106     05B0                     l3439:
  3107     05B0  0865               	movf	(_i_id+1)^(0+128),w
  3108     05B1  3A80               	xorlw	128
  3109     05B2  00FF               	movwf	btemp+1
  3110     05B3  3080               	movlw	128
  3111     05B4  027F               	subwf	btemp+1,w
  3112     05B5  1D03               	skipz
  3113     05B6  2DB9               	goto	u3705
  3114     05B7  3003               	movlw	3
  3115     05B8  0264               	subwf	_i_id^(0+128),w
  3116     05B9                     u3705:
  3117     05B9  1803               	skipnc
  3118     05BA  2DBC               	goto	u3701
  3119     05BB  2DBD               	goto	u3700
  3120     05BC                     u3701:
  3121     05BC  2DD5               	goto	l3447
  3122     05BD                     u3700:
  3123     05BD                     l3441:
  3124                           
  3125                           ;main.c: 740:             {;main.c: 742:                 PIC_ID[i_id++] = keys[keypresse
      +                          d];
  3126     05BD  1683               	bsf	3,5	;RP0=1, select bank1
  3127     05BE  1303               	bcf	3,6	;RP1=0, select bank1
  3128     05BF  086F               	movf	_keypressed^(0+128),w
  3129     05C0  3E01               	addlw	low ((_keys-__stringbase)| (0+32768))
  3130     05C1  0084               	movwf	4
  3131     05C2  120A  158A  200A  120A  118A  	fcall	stringdir
  3132     05C7  00C1               	movwf	??_read_NumPad^(0+128)
  3133     05C8  0864               	movf	_i_id^(0+128),w
  3134     05C9  3E4F               	addlw	(low (_PIC_ID| 0))& (0+255)
  3135     05CA  0084               	movwf	4
  3136     05CB  0841               	movf	??_read_NumPad^(0+128),w
  3137     05CC  1383               	bcf	3,7	;select IRP bank0
  3138     05CD  0080               	movwf	0
  3139     05CE                     l3443:
  3140     05CE  3001               	movlw	1
  3141     05CF  07E4               	addwf	_i_id^(0+128),f
  3142     05D0  1803               	skipnc
  3143     05D1  0AE5               	incf	(_i_id+1)^(0+128),f
  3144     05D2  3000               	movlw	0
  3145     05D3  07E5               	addwf	(_i_id+1)^(0+128),f
  3146     05D4  2D8C               	goto	l3427
  3147     05D5                     l3447:
  3148                           
  3149                           ;main.c: 746:             PORTD |= 0x0F;
  3150     05D5  300F               	movlw	15
  3151     05D6  1683               	bsf	3,5	;RP0=1, select bank1
  3152     05D7  1303               	bcf	3,6	;RP1=0, select bank1
  3153     05D8  00C1               	movwf	??_read_NumPad^(0+128)
  3154     05D9  0841               	movf	??_read_NumPad^(0+128),w
  3155     05DA  1283               	bcf	3,5	;RP0=0, select bank0
  3156     05DB  1303               	bcf	3,6	;RP1=0, select bank0
  3157     05DC  0488               	iorwf	8,f	;volatile
  3158     05DD                     l3449:	
  3159                           ;main.c: 749:             while(((PORTD & 0x0F) != 0x0F))
  3160                           
  3161                           
  3162                           ;main.c: 749:             while(((PORTD & 0x0F) != 0x0F))
  3163     05DD  300F               	movlw	15
  3164     05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3165     05DF  0508               	andwf	8,w	;volatile
  3166     05E0  1683               	bsf	3,5	;RP0=1, select bank1
  3167     05E1  1303               	bcf	3,6	;RP1=0, select bank1
  3168     05E2  00C1               	movwf	??_read_NumPad^(0+128)
  3169     05E3  300F               	movlw	15
  3170     05E4  0641               	xorwf	??_read_NumPad^(0+128),w
  3171     05E5  1D03               	btfss	3,2
  3172     05E6  2DE8               	goto	u3711
  3173     05E7  2DE9               	goto	u3710
  3174     05E8                     u3711:
  3175     05E8  2DDD               	goto	l3449
  3176     05E9                     u3710:
  3177     05E9                     l3451:
  3178                           
  3179                           ;main.c: 754:     }
  3180     05E9  3001               	movlw	1
  3181     05EA  00C1               	movwf	??_read_NumPad^(0+128)
  3182     05EB  0841               	movf	??_read_NumPad^(0+128),w
  3183     05EC  07EC               	addwf	_colScan^(0+128),f
  3184     05ED                     l3453:
  3185     05ED  3003               	movlw	3
  3186     05EE  026C               	subwf	_colScan^(0+128),w
  3187     05EF  1C03               	skipc
  3188     05F0  2DF2               	goto	u3721
  3189     05F1  2DF3               	goto	u3720
  3190     05F2                     u3721:
  3191     05F2  2BF6               	goto	l3343
  3192     05F3                     u3720:
  3193     05F3                     l302:
  3194     05F3  0008               	return
  3195     05F4                     __end_of_read_NumPad:
  3196                           
  3197                           	psect	text2
  3198     1747                     __ptext2:	
  3199 ;; *************** function _eeprom_write *****************
  3200 ;; Defined at:
  3201 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  addr            1    wreg     unsigned char 
  3204 ;;  value           1    0[BANK1 ] unsigned char 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  addr            1    2[BANK1 ] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, status,2, status,0
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3216 ;;      Params:         0       0       1       0       0
  3217 ;;      Locals:         0       0       1       0       0
  3218 ;;      Temps:          0       0       1       0       0
  3219 ;;      Totals:         0       0       3       0       0
  3220 ;;Total ram usage:        3 bytes
  3221 ;; Hardware stack levels used: 1
  3222 ;; Hardware stack levels required when called: 4
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_read_NumPad
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230     1747                     _eeprom_write:	
  3231                           ;psect for function _eeprom_write
  3232                           
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3236                           ;eeprom_write@addr stored from wreg
  3237     1747  1683               	bsf	3,5	;RP0=1, select bank1
  3238     1748  1303               	bcf	3,6	;RP1=0, select bank1
  3239     1749  00A2               	movwf	eeprom_write@addr^(0+128)
  3240     174A                     l440:	
  3241                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  3242                           
  3243     174A                     l441:
  3244     174A  1683               	bsf	3,5	;RP0=1, select bank3
  3245     174B  1703               	bsf	3,6	;RP1=1, select bank3
  3246     174C  188C               	btfsc	12,1	;volsfr
  3247     174D  2F4F               	goto	u3331
  3248     174E  2F50               	goto	u3330
  3249     174F                     u3331:
  3250     174F  2F4A               	goto	l441
  3251     1750                     u3330:
  3252     1750                     l3245:
  3253     1750  1683               	bsf	3,5	;RP0=1, select bank1
  3254     1751  1303               	bcf	3,6	;RP1=0, select bank1
  3255     1752  0822               	movf	eeprom_write@addr^(0+128),w
  3256     1753  1283               	bcf	3,5	;RP0=0, select bank2
  3257     1754  1703               	bsf	3,6	;RP1=1, select bank2
  3258     1755  008D               	movwf	13	;volatile
  3259     1756  1683               	bsf	3,5	;RP0=1, select bank1
  3260     1757  1303               	bcf	3,6	;RP1=0, select bank1
  3261     1758  0820               	movf	eeprom_write@value^(0+128),w
  3262     1759  1283               	bcf	3,5	;RP0=0, select bank2
  3263     175A  1703               	bsf	3,6	;RP1=1, select bank2
  3264     175B  008C               	movwf	12	;volatile
  3265     175C                     l3247:
  3266     175C  303F               	movlw	63
  3267     175D  1683               	bsf	3,5	;RP0=1, select bank1
  3268     175E  1303               	bcf	3,6	;RP1=0, select bank1
  3269     175F  00A1               	movwf	??_eeprom_write^(0+128)
  3270     1760  0821               	movf	??_eeprom_write^(0+128),w
  3271     1761  1683               	bsf	3,5	;RP0=1, select bank3
  3272     1762  1703               	bsf	3,6	;RP1=1, select bank3
  3273     1763  058C               	andwf	12,f	;volsfr
  3274     1764                     l3249:
  3275     1764  1283               	bcf	3,5	;RP0=0, select bank0
  3276     1765  1303               	bcf	3,6	;RP1=0, select bank0
  3277     1766  1003               	bcf	3,0	;volatile
  3278     1767                     l3251:
  3279     1767  1F8B               	btfss	11,7	;volatile
  3280     1768  2F6A               	goto	u3341
  3281     1769  2F6B               	goto	u3340
  3282     176A                     u3341:
  3283     176A  2F6C               	goto	l444
  3284     176B                     u3340:
  3285     176B                     l3253:
  3286     176B  1403               	bsf	3,0	;volatile
  3287     176C                     l444:
  3288     176C  138B               	bcf	11,7	;volatile
  3289     176D  1683               	bsf	3,5	;RP0=1, select bank3
  3290     176E  1703               	bsf	3,6	;RP1=1, select bank3
  3291     176F  150C               	bsf	12,2	;volsfr
  3292     1770                     l3255:
  3293     1770  3055               	movlw	85
  3294     1771  008D               	movwf	13	;volsfr
  3295     1772  30AA               	movlw	170
  3296     1773  008D               	movwf	13	;volsfr
  3297     1774                     l3257:
  3298     1774  148C               	bsf	12,1	;volsfr
  3299     1775                     l3259:
  3300     1775  110C               	bcf	12,2	;volsfr
  3301     1776                     l3261:
  3302     1776  1283               	bcf	3,5	;RP0=0, select bank0
  3303     1777  1303               	bcf	3,6	;RP1=0, select bank0
  3304     1778  1C03               	btfss	3,0	;volatile
  3305     1779  2F7B               	goto	u3351
  3306     177A  2F7C               	goto	u3350
  3307     177B                     u3351:
  3308     177B  2F7D               	goto	l447
  3309     177C                     u3350:
  3310     177C                     l3263:
  3311     177C  178B               	bsf	11,7	;volatile
  3312     177D                     l447:
  3313     177D  0008               	return
  3314     177E                     __end_of_eeprom_write:
  3315                           
  3316                           	psect	text3
  3317     0A4D                     __ptext3:	
  3318 ;; *************** function _CompareStrings *****************
  3319 ;; Defined at:
  3320 ;;		line 568 in file "main.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  str1            1    wreg     PTR unsigned char 
  3323 ;;		 -> datoSeriale(17), id_dest(4), 
  3324 ;;  str2            2    7[BANK1 ] PTR unsigned char 
  3325 ;;		 -> datoTastierino(17), PIC_ID(4), 
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;  str1            1   14[BANK1 ] PTR unsigned char 
  3328 ;;		 -> datoSeriale(17), id_dest(4), 
  3329 ;;  i               1   13[BANK1 ] unsigned char 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      unsigned char 
  3332 ;; Registers used:
  3333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3339 ;;      Params:         0       0       2       0       0
  3340 ;;      Locals:         0       0       2       0       0
  3341 ;;      Temps:          0       0       4       0       0
  3342 ;;      Totals:         0       0       8       0       0
  3343 ;;Total ram usage:        8 bytes
  3344 ;; Hardware stack levels used: 1
  3345 ;; Hardware stack levels required when called: 5
  3346 ;; This function calls:
  3347 ;;		_Length
  3348 ;; This function is called by:
  3349 ;;		_main
  3350 ;;		_read_NumPad
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354     0A4D                     _CompareStrings:	
  3355                           ;psect for function _CompareStrings
  3356                           
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _CompareStrings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3360                           ;CompareStrings@str1 stored from wreg
  3361     0A4D  1683               	bsf	3,5	;RP0=1, select bank1
  3362     0A4E  1303               	bcf	3,6	;RP1=0, select bank1
  3363     0A4F  00AE               	movwf	CompareStrings@str1^(0+128)
  3364     0A50                     l3119:
  3365                           
  3366                           ;main.c: 568: char CompareStrings(char *str1, char *str2);main.c: 569: {;main.c: 571:   
      +                            if(Length(str1) != Length(str2))
  3367     0A50  082E               	movf	CompareStrings@str1^(0+128),w
  3368     0A51  00A0               	movwf	Length@str^(0+128)
  3369     0A52  3001               	movlw	1
  3370     0A53  00A1               	movwf	(Length@str+1)^(0+128)
  3371     0A54  120A  158A  20F6  120A  158A  	fcall	_Length
  3372     0A59  1683               	bsf	3,5	;RP0=1, select bank1
  3373     0A5A  1303               	bcf	3,6	;RP1=0, select bank1
  3374     0A5B  0820               	movf	?_Length^(0+128),w
  3375     0A5C  00A9               	movwf	??_CompareStrings^(0+128)
  3376     0A5D  0821               	movf	(?_Length+1)^(0+128),w
  3377     0A5E  00AA               	movwf	(??_CompareStrings^(0+128)+1)
  3378     0A5F  0827               	movf	CompareStrings@str2^(0+128),w
  3379     0A60  00A0               	movwf	Length@str^(0+128)
  3380     0A61  0828               	movf	(CompareStrings@str2+1)^(0+128),w
  3381     0A62  00A1               	movwf	(Length@str+1)^(0+128)
  3382     0A63  120A  158A  20F6  120A  158A  	fcall	_Length
  3383     0A68  1683               	bsf	3,5	;RP0=1, select bank1
  3384     0A69  1303               	bcf	3,6	;RP1=0, select bank1
  3385     0A6A  0821               	movf	(?_Length+1)^(0+128),w
  3386     0A6B  062A               	xorwf	(??_CompareStrings+1)^(0+128),w
  3387     0A6C  1D03               	skipz
  3388     0A6D  2A70               	goto	u3235
  3389     0A6E  0820               	movf	?_Length^(0+128),w
  3390     0A6F  0629               	xorwf	??_CompareStrings^(0+128),w
  3391     0A70                     u3235:
  3392     0A70  1903               	skipnz
  3393     0A71  2A73               	goto	u3231
  3394     0A72  2A74               	goto	u3230
  3395     0A73                     u3231:
  3396     0A73  2A76               	goto	l3127
  3397     0A74                     u3230:
  3398     0A74                     l3121:
  3399                           
  3400                           ;main.c: 572:         return 0;
  3401     0A74  3000               	movlw	0
  3402     0A75  2AA3               	goto	l251
  3403     0A76                     l3127:
  3404                           
  3405                           ;main.c: 574:     {;main.c: 575:         char i = 0;
  3406     0A76  01AD               	clrf	CompareStrings@i^(0+128)
  3407                           
  3408                           ;main.c: 578:         while(str1[i] != '\0')
  3409     0A77  2A97               	goto	l3137
  3410     0A78                     l3129:
  3411                           
  3412                           ;main.c: 579:         {;main.c: 580:             if(str1[i] != str2[i])
  3413     0A78  082D               	movf	CompareStrings@i^(0+128),w
  3414     0A79  0727               	addwf	CompareStrings@str2^(0+128),w
  3415     0A7A  00A9               	movwf	??_CompareStrings^(0+128)
  3416     0A7B  0828               	movf	(CompareStrings@str2+1)^(0+128),w
  3417     0A7C  1803               	skipnc
  3418     0A7D  3E01               	addlw	1
  3419     0A7E  00AA               	movwf	(??_CompareStrings^(0+128)+1)
  3420     0A7F  0829               	movf	??_CompareStrings^(0+128),w
  3421     0A80  0084               	movwf	4
  3422     0A81  1783               	bsf	3,7
  3423     0A82  1C2A               	btfss	(??_CompareStrings+1)^(0+128),0
  3424     0A83  1383               	bcf	3,7
  3425     0A84  0800               	movf	0,w
  3426     0A85  00AB               	movwf	(??_CompareStrings+2)^(0+128)
  3427     0A86  082D               	movf	CompareStrings@i^(0+128),w
  3428     0A87  072E               	addwf	CompareStrings@str1^(0+128),w
  3429     0A88  00AC               	movwf	(??_CompareStrings+3)^(0+128)
  3430     0A89  082C               	movf	(??_CompareStrings+3)^(0+128),w
  3431     0A8A  0084               	movwf	4
  3432     0A8B  1783               	bsf	3,7	;select IRP bank2
  3433     0A8C  0800               	movf	0,w
  3434     0A8D  062B               	xorwf	(??_CompareStrings+2)^(0+128),w
  3435     0A8E  1903               	skipnz
  3436     0A8F  2A91               	goto	u3241
  3437     0A90  2A92               	goto	u3240
  3438     0A91                     u3241:
  3439     0A91  2A93               	goto	l3135
  3440     0A92                     u3240:
  3441     0A92  2A74               	goto	l3121
  3442     0A93                     l3135:
  3443                           
  3444                           ;main.c: 583:             i++;
  3445     0A93  3001               	movlw	1
  3446     0A94  00A9               	movwf	??_CompareStrings^(0+128)
  3447     0A95  0829               	movf	??_CompareStrings^(0+128),w
  3448     0A96  07AD               	addwf	CompareStrings@i^(0+128),f
  3449     0A97                     l3137:
  3450                           
  3451                           ;main.c: 578:         while(str1[i] != '\0')
  3452     0A97  082D               	movf	CompareStrings@i^(0+128),w
  3453     0A98  072E               	addwf	CompareStrings@str1^(0+128),w
  3454     0A99  00A9               	movwf	??_CompareStrings^(0+128)
  3455     0A9A  0829               	movf	??_CompareStrings^(0+128),w
  3456     0A9B  0084               	movwf	4
  3457     0A9C  1783               	bsf	3,7	;select IRP bank2
  3458     0A9D  0800               	movf	0,w
  3459     0A9E  1D03               	btfss	3,2
  3460     0A9F  2AA1               	goto	u3251
  3461     0AA0  2AA2               	goto	u3250
  3462     0AA1                     u3251:
  3463     0AA1  2A78               	goto	l3129
  3464     0AA2                     u3250:
  3465     0AA2                     l3139:
  3466                           
  3467                           ;main.c: 586:         return 1;
  3468     0AA2  3001               	movlw	1
  3469     0AA3                     l251:
  3470     0AA3  0008               	return
  3471     0AA4                     __end_of_CompareStrings:
  3472                           
  3473                           	psect	text4
  3474     0D73                     __ptext4:	
  3475 ;; *************** function _init_PIC *****************
  3476 ;; Defined at:
  3477 ;;		line 330 in file "main.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;  id              2    9[BANK3 ] int 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  1    wreg      void 
  3484 ;; Registers used:
  3485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3491 ;;      Params:         0       0       0       0       0
  3492 ;;      Locals:         0       0       0       2       0
  3493 ;;      Temps:          0       0       0       2       0
  3494 ;;      Totals:         0       0       0       4       0
  3495 ;;Total ram usage:        4 bytes
  3496 ;; Hardware stack levels used: 1
  3497 ;; Hardware stack levels required when called: 7
  3498 ;; This function calls:
  3499 ;;		_ConvertToString
  3500 ;;		_Fill
  3501 ;;		_UART_init
  3502 ;;		_eeprom_read
  3503 ;;		_init_LCD
  3504 ;;		_init_NumPad
  3505 ;;		_init_Timer0
  3506 ;;		_lcdPrint
  3507 ;;		_lcdSend
  3508 ;; This function is called by:
  3509 ;;		_main
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513     0D73                     _init_PIC:	
  3514                           ;psect for function _init_PIC
  3515                           
  3516     0D73                     l3825:	
  3517                           ;incstack = 0
  3518                           ; Regs used in _init_PIC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3519                           
  3520                           
  3521                           ;main.c: 333:     UART_init(115200);
  3522     0D73  3000               	movlw	0
  3523     0D74  1683               	bsf	3,5	;RP0=1, select bank1
  3524     0D75  1303               	bcf	3,6	;RP1=0, select bank1
  3525     0D76  00DC               	movwf	(UART_init@baudrate+3)^(0+128)
  3526     0D77  3001               	movlw	1
  3527     0D78  00DB               	movwf	(UART_init@baudrate+2)^(0+128)
  3528     0D79  30C2               	movlw	194
  3529     0D7A  00DA               	movwf	(UART_init@baudrate+1)^(0+128)
  3530     0D7B  3000               	movlw	0
  3531     0D7C  00D9               	movwf	UART_init@baudrate^(0+128)
  3532     0D7D  120A  118A  27BF  120A  158A  	fcall	_UART_init
  3533                           
  3534                           ;main.c: 334:     init_LCD();
  3535     0D82  120A  158A  23B8  120A  158A  	fcall	_init_LCD
  3536                           
  3537                           ;main.c: 335:     init_NumPad();
  3538     0D87  160A  118A  2625  120A  158A  	fcall	_init_NumPad
  3539                           
  3540                           ;main.c: 336:     init_Timer0();
  3541     0D8C  160A  118A  264D  120A  158A  	fcall	_init_Timer0
  3542                           
  3543                           ;main.c: 338:     int id = (int)eeprom_read(0);
  3544     0D91  3000               	movlw	0
  3545     0D92  160A  118A  2679  120A  158A  	fcall	_eeprom_read
  3546     0D97  1683               	bsf	3,5	;RP0=1, select bank3
  3547     0D98  1703               	bsf	3,6	;RP1=1, select bank3
  3548     0D99  00CE               	movwf	??_init_PIC^(0+384)
  3549     0D9A  01CF               	clrf	(??_init_PIC^(0+384)+1)
  3550     0D9B  084E               	movf	??_init_PIC^(0+384),w
  3551     0D9C  00D0               	movwf	init_PIC@id^(0+384)
  3552     0D9D  084F               	movf	(??_init_PIC+1)^(0+384),w
  3553     0D9E  00D1               	movwf	(init_PIC@id+1)^(0+384)
  3554     0D9F                     l3827:
  3555                           
  3556                           ;main.c: 339:     if(id == 255)
  3557     0D9F  0A50               	incf	init_PIC@id^(0+384),w
  3558     0DA0  0451               	iorwf	(init_PIC@id+1)^(0+384),w
  3559     0DA1  1D03               	btfss	3,2
  3560     0DA2  2DA4               	goto	u4061
  3561     0DA3  2DA5               	goto	u4060
  3562     0DA4                     u4061:
  3563     0DA4  2DC5               	goto	l3835
  3564     0DA5                     u4060:
  3565     0DA5                     l3829:
  3566                           
  3567                           ;main.c: 340:     {;main.c: 341:         lcdPrint("Inser. ID PIC:\0");
  3568     0DA5  305A               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  3569     0DA6  1683               	bsf	3,5	;RP0=1, select bank1
  3570     0DA7  1303               	bcf	3,6	;RP1=0, select bank1
  3571     0DA8  00A4               	movwf	lcdPrint@str^(0+128)
  3572     0DA9  3080               	movlw	128
  3573     0DAA  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  3574     0DAB  120A  158A  21F7  120A  158A  	fcall	_lcdPrint
  3575     0DB0                     l3831:
  3576                           
  3577                           ;main.c: 342:         lcdSend(0xC0, 0);
  3578     0DB0  1683               	bsf	3,5	;RP0=1, select bank1
  3579     0DB1  1303               	bcf	3,6	;RP1=0, select bank1
  3580     0DB2  01A0               	clrf	lcdSend@tipo^(0+128)
  3581     0DB3  30C0               	movlw	192
  3582     0DB4  160A  118A  2714  120A  158A  	fcall	_lcdSend
  3583     0DB9                     l3833:
  3584                           
  3585                           ;main.c: 343:         lcdPrint("MIN=000,MAX=250\0");
  3586     0DB9  3049               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  3587     0DBA  1683               	bsf	3,5	;RP0=1, select bank1
  3588     0DBB  1303               	bcf	3,6	;RP1=0, select bank1
  3589     0DBC  00A4               	movwf	lcdPrint@str^(0+128)
  3590     0DBD  3080               	movlw	128
  3591     0DBE  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  3592     0DBF  120A  158A  21F7  120A  158A  	fcall	_lcdPrint
  3593                           
  3594                           ;main.c: 344:     }
  3595     0DC4  2DE6               	goto	l178
  3596     0DC5                     l3835:
  3597                           
  3598                           ;main.c: 346:     {;main.c: 347:         ConvertToString(id, PIC_ID);
  3599     0DC5  0850               	movf	init_PIC@id^(0+384),w
  3600     0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  3601     0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  3602     0DC8  00D9               	movwf	ConvertToString@n^(0+128)
  3603     0DC9  1683               	bsf	3,5	;RP0=1, select bank3
  3604     0DCA  1703               	bsf	3,6	;RP1=1, select bank3
  3605     0DCB  0851               	movf	(init_PIC@id+1)^(0+384),w
  3606     0DCC  1683               	bsf	3,5	;RP0=1, select bank1
  3607     0DCD  1303               	bcf	3,6	;RP1=0, select bank1
  3608     0DCE  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  3609     0DCF  3000               	movlw	0
  3610     0DD0  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  3611     0DD1  30FF               	movlw	255
  3612     0DD2  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  3613     0DD3  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  3614     0DD4  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  3615     0DD5  00DD               	movwf	ConvertToString@str^(0+128)
  3616     0DD6  3000               	movlw	0
  3617     0DD7  00DE               	movwf	(ConvertToString@str+1)^(0+128)
  3618     0DD8  120A  118A  25F4  120A  158A  	fcall	_ConvertToString
  3619     0DDD                     l3837:
  3620                           
  3621                           ;main.c: 348:         Fill(PIC_ID);
  3622     0DDD  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  3623     0DDE  120A  158A  235A  120A  158A  	fcall	_Fill
  3624     0DE3                     l3839:
  3625                           
  3626                           ;main.c: 349:         initialize = 0;
  3627     0DE3  1683               	bsf	3,5	;RP0=1, select bank1
  3628     0DE4  1303               	bcf	3,6	;RP1=0, select bank1
  3629     0DE5  01EE               	clrf	_initialize^(0+128)
  3630     0DE6                     l178:
  3631     0DE6  0008               	return
  3632     0DE7                     __end_of_init_PIC:
  3633                           
  3634                           	psect	text5
  3635     09F7                     __ptext5:	
  3636 ;; *************** function _lcdPrint *****************
  3637 ;; Defined at:
  3638 ;;		line 401 in file "main.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  str             2    4[BANK1 ] PTR unsigned char 
  3641 ;;		 -> STR_19(17), STR_18(16), datoTastierino(17), STR_17(18), 
  3642 ;;		 -> STR_15(16), STR_14(13), STR_13(15), STR_11(12), 
  3643 ;;		 -> STR_10(13), STR_9(18), main@num_rand_s(16), PIC_ID(4), 
  3644 ;;		 -> STR_7(17), STR_6(12), STR_5(10), STR_4(8), 
  3645 ;;		 -> STR_3(14), STR_2(8), STR_1(11), 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;  n               2    9[BANK1 ] int 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3657 ;;      Params:         0       0       2       0       0
  3658 ;;      Locals:         0       0       2       0       0
  3659 ;;      Temps:          0       0       3       0       0
  3660 ;;      Totals:         0       0       7       0       0
  3661 ;;Total ram usage:        7 bytes
  3662 ;; Hardware stack levels used: 1
  3663 ;; Hardware stack levels required when called: 5
  3664 ;; This function calls:
  3665 ;;		_lcdSend
  3666 ;; This function is called by:
  3667 ;;		_main
  3668 ;;		_init_PIC
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672     09F7                     _lcdPrint:	
  3673                           ;psect for function _lcdPrint
  3674                           
  3675     09F7                     l3081:	
  3676                           ;incstack = 0
  3677                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3678                           
  3679                           
  3680                           ;main.c: 401: void lcdPrint(char *str);main.c: 402: {;main.c: 403:     int n = 0;
  3681     09F7  1683               	bsf	3,5	;RP0=1, select bank1
  3682     09F8  1303               	bcf	3,6	;RP1=0, select bank1
  3683     09F9  01A9               	clrf	lcdPrint@n^(0+128)
  3684     09FA  01AA               	clrf	(lcdPrint@n+1)^(0+128)
  3685                           
  3686                           ;main.c: 405:     while(str[n] != '\0')
  3687     09FB  2A2A               	goto	l3087
  3688     09FC                     l3083:
  3689                           
  3690                           ;main.c: 406:     {;main.c: 408:         lcdSend(str[n++], 1);
  3691     09FC  1683               	bsf	3,5	;RP0=1, select bank1
  3692     09FD  1303               	bcf	3,6	;RP1=0, select bank1
  3693     09FE  01A0               	clrf	lcdSend@tipo^(0+128)
  3694     09FF  0AA0               	incf	lcdSend@tipo^(0+128),f
  3695     0A00  0829               	movf	lcdPrint@n^(0+128),w
  3696     0A01  0724               	addwf	lcdPrint@str^(0+128),w
  3697     0A02  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3698     0A03  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3699     0A04  00A6               	movwf	??_lcdPrint^(0+128)
  3700     0A05  1803               	skipnc
  3701     0A06  0AA6               	incf	??_lcdPrint^(0+128),f
  3702     0A07  1FA9               	btfss	lcdPrint@n^(0+128),7
  3703     0A08  2A0A               	goto	u3150
  3704     0A09  03A6               	decf	??_lcdPrint^(0+128),f
  3705     0A0A                     u3150:
  3706     0A0A  1683               	bsf	3,5	;RP0=1, select bank1
  3707     0A0B  1303               	bcf	3,6	;RP1=0, select bank1
  3708     0A0C  0826               	movf	??_lcdPrint^(0+128),w
  3709     0A0D  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3710     0A0E  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3711     0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  3712     0A10  1303               	bcf	3,6	;RP1=0, select bank0
  3713     0A11  00FF               	movwf	btemp+1
  3714     0A12  1683               	bsf	3,5	;RP0=1, select bank1
  3715     0A13  1303               	bcf	3,6	;RP1=0, select bank1
  3716     0A14  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3717     0A15  0084               	movwf	4
  3718     0A16  1283               	bcf	3,5	;RP0=0, select bank0
  3719     0A17  1303               	bcf	3,6	;RP1=0, select bank0
  3720     0A18  120A  158A  2000  120A  158A  	fcall	stringtab
  3721     0A1D  160A  118A  2714  120A  158A  	fcall	_lcdSend
  3722     0A22                     l3085:
  3723     0A22  3001               	movlw	1
  3724     0A23  1683               	bsf	3,5	;RP0=1, select bank1
  3725     0A24  1303               	bcf	3,6	;RP1=0, select bank1
  3726     0A25  07A9               	addwf	lcdPrint@n^(0+128),f
  3727     0A26  1803               	skipnc
  3728     0A27  0AAA               	incf	(lcdPrint@n+1)^(0+128),f
  3729     0A28  3000               	movlw	0
  3730     0A29  07AA               	addwf	(lcdPrint@n+1)^(0+128),f
  3731     0A2A                     l3087:
  3732                           
  3733                           ;main.c: 405:     while(str[n] != '\0')
  3734     0A2A  0829               	movf	lcdPrint@n^(0+128),w
  3735     0A2B  0724               	addwf	lcdPrint@str^(0+128),w
  3736     0A2C  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3737     0A2D  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3738     0A2E  00A6               	movwf	??_lcdPrint^(0+128)
  3739     0A2F  1803               	skipnc
  3740     0A30  0AA6               	incf	??_lcdPrint^(0+128),f
  3741     0A31  1FA9               	btfss	lcdPrint@n^(0+128),7
  3742     0A32  2A34               	goto	u3160
  3743     0A33  03A6               	decf	??_lcdPrint^(0+128),f
  3744     0A34                     u3160:
  3745     0A34  1683               	bsf	3,5	;RP0=1, select bank1
  3746     0A35  1303               	bcf	3,6	;RP1=0, select bank1
  3747     0A36  0826               	movf	??_lcdPrint^(0+128),w
  3748     0A37  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3749     0A38  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3750     0A39  1283               	bcf	3,5	;RP0=0, select bank0
  3751     0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  3752     0A3B  00FF               	movwf	btemp+1
  3753     0A3C  1683               	bsf	3,5	;RP0=1, select bank1
  3754     0A3D  1303               	bcf	3,6	;RP1=0, select bank1
  3755     0A3E  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3756     0A3F  0084               	movwf	4
  3757     0A40  1283               	bcf	3,5	;RP0=0, select bank0
  3758     0A41  1303               	bcf	3,6	;RP1=0, select bank0
  3759     0A42  120A  158A  2000  120A  158A  	fcall	stringtab
  3760     0A47  3A00               	xorlw	0
  3761     0A48  1D03               	skipz
  3762     0A49  2A4B               	goto	u3171
  3763     0A4A  2A4C               	goto	u3170
  3764     0A4B                     u3171:
  3765     0A4B  29FC               	goto	l3083
  3766     0A4C                     u3170:
  3767     0A4C                     l193:
  3768     0A4C  0008               	return
  3769     0A4D                     __end_of_lcdPrint:
  3770                           
  3771                           	psect	text6
  3772     164D                     __ptext6:	
  3773 ;; *************** function _init_Timer0 *****************
  3774 ;; Defined at:
  3775 ;;		line 353 in file "main.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;		None
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2, status,0
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3789 ;;      Params:         0       0       0       0       0
  3790 ;;      Locals:         0       0       0       0       0
  3791 ;;      Temps:          0       0       1       0       0
  3792 ;;      Totals:         0       0       1       0       0
  3793 ;;Total ram usage:        1 bytes
  3794 ;; Hardware stack levels used: 1
  3795 ;; Hardware stack levels required when called: 4
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_init_PIC
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803     164D                     _init_Timer0:	
  3804                           ;psect for function _init_Timer0
  3805                           
  3806     164D                     l3183:	
  3807                           ;incstack = 0
  3808                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  3809                           
  3810                           
  3811                           ;main.c: 356:     INTCON |= 0xA0;
  3812     164D  30A0               	movlw	160
  3813     164E  1683               	bsf	3,5	;RP0=1, select bank1
  3814     164F  1303               	bcf	3,6	;RP1=0, select bank1
  3815     1650  00A0               	movwf	??_init_Timer0^(0+128)
  3816     1651  0820               	movf	??_init_Timer0^(0+128),w
  3817     1652  048B               	iorwf	11,f	;volatile
  3818     1653                     l3185:
  3819                           
  3820                           ;main.c: 357:     OPTION_REG = 0x06;
  3821     1653  3006               	movlw	6
  3822     1654  0081               	movwf	1	;volatile
  3823     1655                     l3187:
  3824                           
  3825                           ;main.c: 358:     TMR0 = 131;
  3826     1655  3083               	movlw	131
  3827     1656  1283               	bcf	3,5	;RP0=0, select bank0
  3828     1657  1303               	bcf	3,6	;RP1=0, select bank0
  3829     1658  0081               	movwf	1	;volatile
  3830     1659                     l3189:
  3831                           
  3832                           ;main.c: 360:     milliseconds = 0;
  3833     1659  3000               	movlw	0
  3834     165A  00C3               	movwf	_milliseconds+3
  3835     165B  3000               	movlw	0
  3836     165C  00C2               	movwf	_milliseconds+2
  3837     165D  3000               	movlw	0
  3838     165E  00C1               	movwf	_milliseconds+1
  3839     165F  3000               	movlw	0
  3840     1660  00C0               	movwf	_milliseconds
  3841     1661                     l181:
  3842     1661  0008               	return
  3843     1662                     __end_of_init_Timer0:
  3844                           
  3845                           	psect	text7
  3846     1625                     __ptext7:	
  3847 ;; *************** function _init_NumPad *****************
  3848 ;; Defined at:
  3849 ;;		line 617 in file "main.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;		None
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3863 ;;      Params:         0       0       0       0       0
  3864 ;;      Locals:         0       0       0       0       0
  3865 ;;      Temps:          0       0       1       0       0
  3866 ;;      Totals:         0       0       1       0       0
  3867 ;;Total ram usage:        1 bytes
  3868 ;; Hardware stack levels used: 1
  3869 ;; Hardware stack levels required when called: 4
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_init_PIC
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877     1625                     _init_NumPad:	
  3878                           ;psect for function _init_NumPad
  3879                           
  3880     1625                     l3181:	
  3881                           ;incstack = 0
  3882                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  3883                           
  3884                           
  3885                           ;main.c: 620:     TRISD |= 0x0F;
  3886     1625  300F               	movlw	15
  3887     1626  1683               	bsf	3,5	;RP0=1, select bank1
  3888     1627  1303               	bcf	3,6	;RP1=0, select bank1
  3889     1628  00A0               	movwf	??_init_NumPad^(0+128)
  3890     1629  0820               	movf	??_init_NumPad^(0+128),w
  3891     162A  0488               	iorwf	8,f	;volatile
  3892                           
  3893                           ;main.c: 621:     TRISB &= 0xF0;
  3894     162B  30F0               	movlw	240
  3895     162C  00A0               	movwf	??_init_NumPad^(0+128)
  3896     162D  0820               	movf	??_init_NumPad^(0+128),w
  3897     162E  0586               	andwf	6,f	;volatile
  3898     162F                     l268:
  3899     162F  0008               	return
  3900     1630                     __end_of_init_NumPad:
  3901                           
  3902                           	psect	text8
  3903     0BB8                     __ptext8:	
  3904 ;; *************** function _init_LCD *****************
  3905 ;; Defined at:
  3906 ;;		line 363 in file "main.c"
  3907 ;; Parameters:    Size  Location     Type
  3908 ;;		None
  3909 ;; Auto vars:     Size  Location     Type
  3910 ;;		None
  3911 ;; Return value:  Size  Location     Type
  3912 ;;                  1    wreg      void 
  3913 ;; Registers used:
  3914 ;;		wreg, status,2, status,0, pclath, cstack
  3915 ;; Tracked objects:
  3916 ;;		On entry : 0/0
  3917 ;;		On exit  : 0/0
  3918 ;;		Unchanged: 0/0
  3919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3920 ;;      Params:         0       0       0       0       0
  3921 ;;      Locals:         0       0       0       0       0
  3922 ;;      Temps:          0       0       2       0       0
  3923 ;;      Totals:         0       0       2       0       0
  3924 ;;Total ram usage:        2 bytes
  3925 ;; Hardware stack levels used: 1
  3926 ;; Hardware stack levels required when called: 5
  3927 ;; This function calls:
  3928 ;;		_lcdSend
  3929 ;; This function is called by:
  3930 ;;		_init_PIC
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934     0BB8                     _init_LCD:	
  3935                           ;psect for function _init_LCD
  3936                           
  3937     0BB8                     l3159:	
  3938                           ;incstack = 0
  3939                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  3940                           
  3941                           
  3942                           ;main.c: 367:     PORTEbits.RE2 = 0;
  3943     0BB8  1283               	bcf	3,5	;RP0=0, select bank0
  3944     0BB9  1303               	bcf	3,6	;RP1=0, select bank0
  3945     0BBA  1109               	bcf	9,2	;volatile
  3946                           
  3947                           ;main.c: 368:     PORTEbits.RE1 = 0;
  3948     0BBB  1089               	bcf	9,1	;volatile
  3949     0BBC                     l3161:
  3950                           
  3951                           ;main.c: 369:     _delay((unsigned long)((20)*(20000000/4000.0)));
  3952     0BBC  3082               	movlw	130
  3953     0BBD  1683               	bsf	3,5	;RP0=1, select bank1
  3954     0BBE  1303               	bcf	3,6	;RP1=0, select bank1
  3955     0BBF  00A5               	movwf	(??_init_LCD^(0+128)+1)
  3956     0BC0  30DD               	movlw	221
  3957     0BC1  00A4               	movwf	??_init_LCD^(0+128)
  3958     0BC2                     u4307:
  3959     0BC2  0BA4               	decfsz	??_init_LCD^(0+128),f
  3960     0BC3  2BC2               	goto	u4307
  3961     0BC4  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  3962     0BC5  2BC2               	goto	u4307
  3963     0BC6                     l3163:
  3964                           
  3965                           ;main.c: 370:     PORTEbits.RE1 = 1;
  3966     0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  3967     0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  3968     0BC8  1489               	bsf	9,1	;volatile
  3969     0BC9                     l3165:
  3970                           
  3971                           ;main.c: 372:     lcdSend(0x38, 0);
  3972     0BC9  1683               	bsf	3,5	;RP0=1, select bank1
  3973     0BCA  1303               	bcf	3,6	;RP1=0, select bank1
  3974     0BCB  01A0               	clrf	lcdSend@tipo^(0+128)
  3975     0BCC  3038               	movlw	56
  3976     0BCD  160A  118A  2714  120A  158A  	fcall	_lcdSend
  3977     0BD2                     l3167:
  3978                           
  3979                           ;main.c: 373:     _delay((unsigned long)((5)*(20000000/4000.0)));
  3980     0BD2  3021               	movlw	33
  3981     0BD3  1683               	bsf	3,5	;RP0=1, select bank1
  3982     0BD4  1303               	bcf	3,6	;RP1=0, select bank1
  3983     0BD5  00A5               	movwf	(??_init_LCD^(0+128)+1)
  3984     0BD6  3075               	movlw	117
  3985     0BD7  00A4               	movwf	??_init_LCD^(0+128)
  3986     0BD8                     u4317:
  3987     0BD8  0BA4               	decfsz	??_init_LCD^(0+128),f
  3988     0BD9  2BD8               	goto	u4317
  3989     0BDA  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  3990     0BDB  2BD8               	goto	u4317
  3991     0BDC  2BDD               	nop2
  3992                           
  3993                           ;main.c: 374:     lcdSend(0x38, 0);
  3994     0BDD  1683               	bsf	3,5	;RP0=1, select bank1
  3995     0BDE  1303               	bcf	3,6	;RP1=0, select bank1
  3996     0BDF  01A0               	clrf	lcdSend@tipo^(0+128)
  3997     0BE0  3038               	movlw	56
  3998     0BE1  160A  118A  2714  120A  158A  	fcall	_lcdSend
  3999     0BE6                     l3169:
  4000                           
  4001                           ;main.c: 375:     _delay((unsigned long)((1)*(20000000/4000.0)));
  4002     0BE6  3007               	movlw	7
  4003     0BE7  1683               	bsf	3,5	;RP0=1, select bank1
  4004     0BE8  1303               	bcf	3,6	;RP1=0, select bank1
  4005     0BE9  00A5               	movwf	(??_init_LCD^(0+128)+1)
  4006     0BEA  307C               	movlw	124
  4007     0BEB  00A4               	movwf	??_init_LCD^(0+128)
  4008     0BEC                     u4327:
  4009     0BEC  0BA4               	decfsz	??_init_LCD^(0+128),f
  4010     0BED  2BEC               	goto	u4327
  4011     0BEE  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  4012     0BEF  2BEC               	goto	u4327
  4013     0BF0  0000               	nop
  4014     0BF1                     l3171:
  4015                           
  4016                           ;main.c: 376:     lcdSend(0x38, 0);
  4017     0BF1  1683               	bsf	3,5	;RP0=1, select bank1
  4018     0BF2  1303               	bcf	3,6	;RP1=0, select bank1
  4019     0BF3  01A0               	clrf	lcdSend@tipo^(0+128)
  4020     0BF4  3038               	movlw	56
  4021     0BF5  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4022     0BFA                     l3173:
  4023                           
  4024                           ;main.c: 377:     lcdSend(0x08, 0);
  4025     0BFA  1683               	bsf	3,5	;RP0=1, select bank1
  4026     0BFB  1303               	bcf	3,6	;RP1=0, select bank1
  4027     0BFC  01A0               	clrf	lcdSend@tipo^(0+128)
  4028     0BFD  3008               	movlw	8
  4029     0BFE  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4030     0C03                     l3175:
  4031                           
  4032                           ;main.c: 378:     lcdSend(0x0F, 0);
  4033     0C03  1683               	bsf	3,5	;RP0=1, select bank1
  4034     0C04  1303               	bcf	3,6	;RP1=0, select bank1
  4035     0C05  01A0               	clrf	lcdSend@tipo^(0+128)
  4036     0C06  300F               	movlw	15
  4037     0C07  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4038     0C0C                     l3177:
  4039                           
  4040                           ;main.c: 379:     lcdSend(0x01, 0);
  4041     0C0C  1683               	bsf	3,5	;RP0=1, select bank1
  4042     0C0D  1303               	bcf	3,6	;RP1=0, select bank1
  4043     0C0E  01A0               	clrf	lcdSend@tipo^(0+128)
  4044     0C0F  3001               	movlw	1
  4045     0C10  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4046     0C15                     l3179:
  4047                           
  4048                           ;main.c: 381:     lcdSend(0x0C, 0);
  4049     0C15  1683               	bsf	3,5	;RP0=1, select bank1
  4050     0C16  1303               	bcf	3,6	;RP1=0, select bank1
  4051     0C17  01A0               	clrf	lcdSend@tipo^(0+128)
  4052     0C18  300C               	movlw	12
  4053     0C19  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4054     0C1E                     l184:
  4055     0C1E  0008               	return
  4056     0C1F                     __end_of_init_LCD:
  4057                           
  4058                           	psect	text9
  4059     1714                     __ptext9:	
  4060 ;; *************** function _lcdSend *****************
  4061 ;; Defined at:
  4062 ;;		line 384 in file "main.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  dato            1    wreg     unsigned char 
  4065 ;;  tipo            1    0[BANK1 ] unsigned char 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  dato            1    3[BANK1 ] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      void 
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, status,0
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4077 ;;      Params:         0       0       1       0       0
  4078 ;;      Locals:         0       0       1       0       0
  4079 ;;      Temps:          0       0       2       0       0
  4080 ;;      Totals:         0       0       4       0       0
  4081 ;;Total ram usage:        4 bytes
  4082 ;; Hardware stack levels used: 1
  4083 ;; Hardware stack levels required when called: 4
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_main
  4088 ;;		_init_PIC
  4089 ;;		_init_LCD
  4090 ;;		_lcdPrint
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094     1714                     _lcdSend:	
  4095                           ;psect for function _lcdSend
  4096                           
  4097                           
  4098                           ;incstack = 0
  4099                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  4100                           ;lcdSend@dato stored from wreg
  4101     1714  1683               	bsf	3,5	;RP0=1, select bank1
  4102     1715  1303               	bcf	3,6	;RP1=0, select bank1
  4103     1716  00A3               	movwf	lcdSend@dato^(0+128)
  4104     1717                     l2951:
  4105                           
  4106                           ;main.c: 384: void lcdSend(char dato, char tipo);main.c: 385: {;main.c: 388:     TRISD =
      +                           0x00;
  4107     1717  0188               	clrf	8	;volatile
  4108     1718                     l2953:
  4109                           
  4110                           ;main.c: 389:     TRISEbits.TRISE1 = 0;
  4111     1718  1089               	bcf	9,1	;volatile
  4112     1719                     l2955:
  4113                           
  4114                           ;main.c: 390:     TRISEbits.TRISE2 = 0;
  4115     1719  1109               	bcf	9,2	;volatile
  4116     171A                     l2957:
  4117                           
  4118                           ;main.c: 392:     PORTEbits.RE1 = 1;
  4119     171A  1283               	bcf	3,5	;RP0=0, select bank0
  4120     171B  1303               	bcf	3,6	;RP1=0, select bank0
  4121     171C  1489               	bsf	9,1	;volatile
  4122     171D                     l2959:
  4123                           
  4124                           ;main.c: 393:     PORTD = dato;
  4125     171D  1683               	bsf	3,5	;RP0=1, select bank1
  4126     171E  1303               	bcf	3,6	;RP1=0, select bank1
  4127     171F  0823               	movf	lcdSend@dato^(0+128),w
  4128     1720  1283               	bcf	3,5	;RP0=0, select bank0
  4129     1721  1303               	bcf	3,6	;RP1=0, select bank0
  4130     1722  0088               	movwf	8	;volatile
  4131     1723                     l2961:
  4132                           
  4133                           ;main.c: 394:     PORTEbits.RE2 = tipo;
  4134     1723  1683               	bsf	3,5	;RP0=1, select bank1
  4135     1724  1303               	bcf	3,6	;RP1=0, select bank1
  4136     1725  0C20               	rrf	lcdSend@tipo^(0+128),w
  4137     1726  1283               	bcf	3,5	;RP0=0, select bank0
  4138     1727  1303               	bcf	3,6	;RP1=0, select bank0
  4139     1728  1C03               	skipc
  4140     1729  1109               	bcf	9,2	;volatile
  4141     172A  1803               	skipnc
  4142     172B  1509               	bsf	9,2	;volatile
  4143     172C                     l2963:
  4144                           
  4145                           ;main.c: 395:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4146     172C  3014               	movlw	20
  4147     172D  1683               	bsf	3,5	;RP0=1, select bank1
  4148     172E  1303               	bcf	3,6	;RP1=0, select bank1
  4149     172F  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4150     1730  3079               	movlw	121
  4151     1731  00A1               	movwf	??_lcdSend^(0+128)
  4152     1732                     u4337:
  4153     1732  0BA1               	decfsz	??_lcdSend^(0+128),f
  4154     1733  2F32               	goto	u4337
  4155     1734  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4156     1735  2F32               	goto	u4337
  4157     1736                     l2965:
  4158                           
  4159                           ;main.c: 396:     PORTEbits.RE1 = 0;
  4160     1736  1283               	bcf	3,5	;RP0=0, select bank0
  4161     1737  1303               	bcf	3,6	;RP1=0, select bank0
  4162     1738  1089               	bcf	9,1	;volatile
  4163     1739                     l2967:
  4164                           
  4165                           ;main.c: 397:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4166     1739  3014               	movlw	20
  4167     173A  1683               	bsf	3,5	;RP0=1, select bank1
  4168     173B  1303               	bcf	3,6	;RP1=0, select bank1
  4169     173C  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4170     173D  3079               	movlw	121
  4171     173E  00A1               	movwf	??_lcdSend^(0+128)
  4172     173F                     u4347:
  4173     173F  0BA1               	decfsz	??_lcdSend^(0+128),f
  4174     1740  2F3F               	goto	u4347
  4175     1741  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4176     1742  2F3F               	goto	u4347
  4177     1743                     l2969:
  4178                           
  4179                           ;main.c: 398:     PORTEbits.RE1 = 1;
  4180     1743  1283               	bcf	3,5	;RP0=0, select bank0
  4181     1744  1303               	bcf	3,6	;RP1=0, select bank0
  4182     1745  1489               	bsf	9,1	;volatile
  4183     1746                     l187:
  4184     1746  0008               	return
  4185     1747                     __end_of_lcdSend:
  4186                           
  4187                           	psect	text10
  4188     1679                     __ptext10:	
  4189 ;; *************** function _eeprom_read *****************
  4190 ;; Defined at:
  4191 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  addr            1    wreg     unsigned char 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  addr            1    1[BANK1 ] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      unsigned char 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2, status,0
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4205 ;;      Params:         0       0       0       0       0
  4206 ;;      Locals:         0       0       1       0       0
  4207 ;;      Temps:          0       0       1       0       0
  4208 ;;      Totals:         0       0       2       0       0
  4209 ;;Total ram usage:        2 bytes
  4210 ;; Hardware stack levels used: 1
  4211 ;; Hardware stack levels required when called: 4
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_init_PIC
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219     1679                     _eeprom_read:	
  4220                           ;psect for function _eeprom_read
  4221                           
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4225                           ;eeprom_read@addr stored from wreg
  4226     1679  1683               	bsf	3,5	;RP0=1, select bank1
  4227     167A  1303               	bcf	3,6	;RP1=0, select bank1
  4228     167B  00A1               	movwf	eeprom_read@addr^(0+128)
  4229     167C                     l421:	
  4230                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 8:  do
  4231                           
  4232     167C  0064               	clrwdt	;# 
  4233     167D  1683               	bsf	3,5	;RP0=1, select bank3
  4234     167E  1703               	bsf	3,6	;RP1=1, select bank3
  4235     167F  188C               	btfsc	12,1	;volsfr
  4236     1680  2E82               	goto	u3271
  4237     1681  2E85               	goto	u3270
  4238     1682                     u3271:
  4239     1682  1683               	bsf	3,5	;RP0=1, select bank1
  4240     1683  1303               	bcf	3,6	;RP1=0, select bank1
  4241     1684  2E7C               	goto	l421
  4242     1685                     u3270:
  4243     1685                     l3191:
  4244                           
  4245                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4246     1685  1683               	bsf	3,5	;RP0=1, select bank1
  4247     1686  1303               	bcf	3,6	;RP1=0, select bank1
  4248     1687  0821               	movf	eeprom_read@addr^(0+128),w
  4249     1688  1283               	bcf	3,5	;RP0=0, select bank2
  4250     1689  1703               	bsf	3,6	;RP1=1, select bank2
  4251     168A  008D               	movwf	13	;volatile
  4252     168B  303F               	movlw	63
  4253     168C  1683               	bsf	3,5	;RP0=1, select bank1
  4254     168D  1303               	bcf	3,6	;RP1=0, select bank1
  4255     168E  00A0               	movwf	??_eeprom_read^(0+128)
  4256     168F  0820               	movf	??_eeprom_read^(0+128),w
  4257     1690  1683               	bsf	3,5	;RP0=1, select bank3
  4258     1691  1703               	bsf	3,6	;RP1=1, select bank3
  4259     1692  058C               	andwf	12,f	;volsfr
  4260     1693  140C               	bsf	12,0	;volsfr
  4261     1694  1283               	bcf	3,5	;RP0=0, select bank2
  4262     1695  1703               	bsf	3,6	;RP1=1, select bank2
  4263     1696  080C               	movf	12,w	;volatile
  4264     1697                     l423:
  4265     1697  0008               	return
  4266     1698                     __end_of_eeprom_read:
  4267                           
  4268                           	psect	text11
  4269     07BF                     __ptext11:	
  4270 ;; *************** function _UART_init *****************
  4271 ;; Defined at:
  4272 ;;		line 757 in file "main.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  baudrate        4   57[BANK1 ] long 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      void 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4286 ;;      Params:         0       0       4       0       0
  4287 ;;      Locals:         0       0       0       0       0
  4288 ;;      Temps:          0       0       4       0       0
  4289 ;;      Totals:         0       0       8       0       0
  4290 ;;Total ram usage:        8 bytes
  4291 ;; Hardware stack levels used: 1
  4292 ;; Hardware stack levels required when called: 5
  4293 ;; This function calls:
  4294 ;;		___aldiv
  4295 ;; This function is called by:
  4296 ;;		_init_PIC
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300     07BF                     _UART_init:	
  4301                           ;psect for function _UART_init
  4302                           
  4303     07BF                     l3143:	
  4304                           ;incstack = 0
  4305                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  4306                           
  4307                           
  4308                           ;main.c: 757: void UART_init(long int baudrate);main.c: 758: {;main.c: 760:     TRISC &=
      +                           ~0x40;
  4309     07BF  30BF               	movlw	191
  4310     07C0  1683               	bsf	3,5	;RP0=1, select bank1
  4311     07C1  1303               	bcf	3,6	;RP1=0, select bank1
  4312     07C2  00DD               	movwf	??_UART_init^(0+128)
  4313     07C3  085D               	movf	??_UART_init^(0+128),w
  4314     07C4  0587               	andwf	7,f	;volatile
  4315     07C5                     l3145:
  4316                           
  4317                           ;main.c: 761:     TRISC |= 0x80;
  4318     07C5  1787               	bsf	7,7	;volatile
  4319                           
  4320                           ;main.c: 762:     TXSTA |= 0x24;
  4321     07C6  3024               	movlw	36
  4322     07C7  00DD               	movwf	??_UART_init^(0+128)
  4323     07C8  085D               	movf	??_UART_init^(0+128),w
  4324     07C9  0498               	iorwf	24,f	;volatile
  4325     07CA                     l3147:
  4326                           
  4327                           ;main.c: 763:     RCSTA |= 0x80;
  4328     07CA  1283               	bcf	3,5	;RP0=0, select bank0
  4329     07CB  1303               	bcf	3,6	;RP1=0, select bank0
  4330     07CC  1798               	bsf	24,7	;volatile
  4331     07CD                     l3149:
  4332                           
  4333                           ;main.c: 764:     RCSTA |= 0x10;
  4334     07CD  1618               	bsf	24,4	;volatile
  4335     07CE                     l3151:
  4336                           
  4337                           ;main.c: 767:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  4338     07CE  1683               	bsf	3,5	;RP0=1, select bank1
  4339     07CF  1303               	bcf	3,6	;RP1=0, select bank1
  4340     07D0  0859               	movf	UART_init@baudrate^(0+128),w
  4341     07D1  00DD               	movwf	??_UART_init^(0+128)
  4342     07D2  085A               	movf	(UART_init@baudrate+1)^(0+128),w
  4343     07D3  00DE               	movwf	(??_UART_init^(0+128)+1)
  4344     07D4  085B               	movf	(UART_init@baudrate+2)^(0+128),w
  4345     07D5  00DF               	movwf	(??_UART_init^(0+128)+2)
  4346     07D6  085C               	movf	(UART_init@baudrate+3)^(0+128),w
  4347     07D7  00E0               	movwf	(??_UART_init^(0+128)+3)
  4348     07D8  3006               	movlw	6
  4349     07D9                     u3265:
  4350     07D9  1003               	clrc
  4351     07DA  0DDD               	rlf	??_UART_init^(0+128),f
  4352     07DB  0DDE               	rlf	(??_UART_init^(0+128)+1),f
  4353     07DC  0DDF               	rlf	(??_UART_init^(0+128)+2),f
  4354     07DD  0DE0               	rlf	(??_UART_init^(0+128)+3),f
  4355     07DE                     u3260:
  4356     07DE  3EFF               	addlw	-1
  4357     07DF  1D03               	skipz
  4358     07E0  2FD9               	goto	u3265
  4359     07E1  0860               	movf	(??_UART_init+3)^(0+128),w
  4360     07E2  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4361     07E3  085F               	movf	(??_UART_init+2)^(0+128),w
  4362     07E4  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4363     07E5  085E               	movf	(??_UART_init+1)^(0+128),w
  4364     07E6  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4365     07E7  085D               	movf	??_UART_init^(0+128),w
  4366     07E8  00CA               	movwf	___aldiv@divisor^(0+128)
  4367     07E9  3001               	movlw	1
  4368     07EA  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4369     07EB  3031               	movlw	49
  4370     07EC  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4371     07ED  302D               	movlw	45
  4372     07EE  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4373     07EF  3000               	movlw	0
  4374     07F0  00CE               	movwf	___aldiv@dividend^(0+128)
  4375     07F1  120A  118A  2722  120A  118A  	fcall	___aldiv
  4376     07F6  1683               	bsf	3,5	;RP0=1, select bank1
  4377     07F7  1303               	bcf	3,6	;RP1=0, select bank1
  4378     07F8  084A               	movf	?___aldiv^(0+128),w
  4379     07F9  3EFF               	addlw	255
  4380     07FA  0099               	movwf	25	;volatile
  4381     07FB                     l3153:
  4382                           
  4383                           ;main.c: 770:     INTCON |= 0x80;
  4384     07FB  178B               	bsf	11,7	;volatile
  4385     07FC                     l3155:
  4386                           
  4387                           ;main.c: 772:     INTCON |= 0x40;
  4388     07FC  170B               	bsf	11,6	;volatile
  4389     07FD                     l3157:
  4390                           
  4391                           ;main.c: 774:     PIE1 |= 0x20;
  4392     07FD  168C               	bsf	12,5	;volatile
  4393     07FE                     l305:
  4394     07FE  0008               	return
  4395     07FF                     __end_of_UART_init:
  4396                           
  4397                           	psect	text12
  4398     0B5A                     __ptext12:	
  4399 ;; *************** function _Fill *****************
  4400 ;; Defined at:
  4401 ;;		line 590 in file "main.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;  id              1    wreg     PTR unsigned char 
  4404 ;;		 -> PIC_ID(4), 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  id              1   10[BANK1 ] PTR unsigned char 
  4407 ;;		 -> PIC_ID(4), 
  4408 ;;  length          2    8[BANK1 ] int 
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      void 
  4411 ;; Registers used:
  4412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4418 ;;      Params:         0       0       0       0       0
  4419 ;;      Locals:         0       0       3       0       0
  4420 ;;      Temps:          0       0       1       0       0
  4421 ;;      Totals:         0       0       4       0       0
  4422 ;;Total ram usage:        4 bytes
  4423 ;; Hardware stack levels used: 1
  4424 ;; Hardware stack levels required when called: 5
  4425 ;; This function calls:
  4426 ;;		_Length
  4427 ;; This function is called by:
  4428 ;;		_init_PIC
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432     0B5A                     _Fill:	
  4433                           ;psect for function _Fill
  4434                           
  4435                           
  4436                           ;incstack = 0
  4437                           ; Regs used in _Fill: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4438                           ;Fill@id stored from wreg
  4439     0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  4440     0B5B  1303               	bcf	3,6	;RP1=0, select bank1
  4441     0B5C  00AA               	movwf	Fill@id^(0+128)
  4442     0B5D                     l3195:
  4443                           
  4444                           ;main.c: 590: void Fill(char* id);main.c: 591: {;main.c: 592:     int length = Length(id
      +                          );
  4445     0B5D  082A               	movf	Fill@id^(0+128),w
  4446     0B5E  00A0               	movwf	Length@str^(0+128)
  4447     0B5F  3000               	movlw	0
  4448     0B60  00A1               	movwf	(Length@str+1)^(0+128)
  4449     0B61  120A  158A  20F6  120A  158A  	fcall	_Length
  4450     0B66  1683               	bsf	3,5	;RP0=1, select bank1
  4451     0B67  1303               	bcf	3,6	;RP1=0, select bank1
  4452     0B68  0821               	movf	(?_Length+1)^(0+128),w
  4453     0B69  00A9               	movwf	(Fill@length+1)^(0+128)
  4454     0B6A  0820               	movf	?_Length^(0+128),w
  4455     0B6B  00A8               	movwf	Fill@length^(0+128)
  4456     0B6C                     l3197:
  4457                           
  4458                           ;main.c: 594:     if(length < 3)
  4459     0B6C  0829               	movf	(Fill@length+1)^(0+128),w
  4460     0B6D  3A80               	xorlw	128
  4461     0B6E  00FF               	movwf	btemp+1
  4462     0B6F  3080               	movlw	128
  4463     0B70  027F               	subwf	btemp+1,w
  4464     0B71  1D03               	skipz
  4465     0B72  2B75               	goto	u3285
  4466     0B73  3003               	movlw	3
  4467     0B74  0228               	subwf	Fill@length^(0+128),w
  4468     0B75                     u3285:
  4469     0B75  1803               	skipnc
  4470     0B76  2B78               	goto	u3281
  4471     0B77  2B79               	goto	u3280
  4472     0B78                     u3281:
  4473     0B78  2BB7               	goto	l265
  4474     0B79                     u3280:
  4475     0B79  2BA8               	goto	l3215
  4476     0B7A                     l3201:
  4477                           
  4478                           ;main.c: 599:                 id[3] = '\0';
  4479     0B7A  082A               	movf	Fill@id^(0+128),w
  4480     0B7B  3E03               	addlw	3
  4481     0B7C  0084               	movwf	4
  4482     0B7D  1383               	bcf	3,7	;select IRP bank0
  4483     0B7E  0180               	clrf	0
  4484                           
  4485                           ;main.c: 600:                 id[2] = id[0];
  4486     0B7F  082A               	movf	Fill@id^(0+128),w
  4487     0B80  0084               	movwf	4
  4488     0B81  0800               	movf	0,w
  4489     0B82  00A7               	movwf	??_Fill^(0+128)
  4490     0B83  082A               	movf	Fill@id^(0+128),w
  4491     0B84  3E02               	addlw	2
  4492     0B85  0084               	movwf	4
  4493     0B86  0827               	movf	??_Fill^(0+128),w
  4494     0B87  0080               	movwf	0
  4495     0B88                     l3203:
  4496                           
  4497                           ;main.c: 601:                 id[1] = '0';
  4498     0B88  0A2A               	incf	Fill@id^(0+128),w
  4499     0B89  0084               	movwf	4
  4500     0B8A  3030               	movlw	48
  4501     0B8B  0080               	movwf	0
  4502     0B8C                     l3205:
  4503                           
  4504                           ;main.c: 602:                 id[0] = '0';
  4505     0B8C  082A               	movf	Fill@id^(0+128),w
  4506     0B8D  0084               	movwf	4
  4507     0B8E  3030               	movlw	48
  4508     0B8F  0080               	movwf	0
  4509                           
  4510                           ;main.c: 603:                 break;
  4511     0B90  2BB7               	goto	l265
  4512     0B91                     l3207:
  4513                           
  4514                           ;main.c: 605:                 id[3] = '\0';
  4515     0B91  082A               	movf	Fill@id^(0+128),w
  4516     0B92  3E03               	addlw	3
  4517     0B93  0084               	movwf	4
  4518     0B94  1383               	bcf	3,7	;select IRP bank0
  4519     0B95  0180               	clrf	0
  4520                           
  4521                           ;main.c: 606:                 id[2] = id[1];
  4522     0B96  0A2A               	incf	Fill@id^(0+128),w
  4523     0B97  0084               	movwf	4
  4524     0B98  0800               	movf	0,w
  4525     0B99  00A7               	movwf	??_Fill^(0+128)
  4526     0B9A  082A               	movf	Fill@id^(0+128),w
  4527     0B9B  3E02               	addlw	2
  4528     0B9C  0084               	movwf	4
  4529     0B9D  0827               	movf	??_Fill^(0+128),w
  4530     0B9E  0080               	movwf	0
  4531     0B9F                     l3209:
  4532                           
  4533                           ;main.c: 607:                 id[1] = id[0];
  4534     0B9F  082A               	movf	Fill@id^(0+128),w
  4535     0BA0  0084               	movwf	4
  4536     0BA1  0800               	movf	0,w
  4537     0BA2  00A7               	movwf	??_Fill^(0+128)
  4538     0BA3  0A2A               	incf	Fill@id^(0+128),w
  4539     0BA4  0084               	movwf	4
  4540     0BA5  0827               	movf	??_Fill^(0+128),w
  4541     0BA6  0080               	movwf	0
  4542     0BA7  2B8C               	goto	l3205
  4543     0BA8                     l3215:
  4544                           
  4545                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4546                           ; Switch size 1, requested type "simple"
  4547                           ; Number of cases is 1, Range of values is 0 to 0
  4548                           ; switch strategies available:
  4549                           ; Name         Instructions Cycles
  4550                           ; simple_byte            4     3 (average)
  4551                           ; direct_byte           11     8 (fixed)
  4552                           ; jumptable            260     6 (fixed)
  4553                           ;	Chosen strategy is simple_byte
  4554     0BA8  1683               	bsf	3,5	;RP0=1, select bank1
  4555     0BA9  1303               	bcf	3,6	;RP1=0, select bank1
  4556     0BAA  0829               	movf	(Fill@length+1)^(0+128),w
  4557     0BAB  3A00               	xorlw	0	; case 0
  4558     0BAC  1903               	skipnz
  4559     0BAD  2BAF               	goto	l4107
  4560     0BAE  2BB7               	goto	l265
  4561     0BAF                     l4107:
  4562                           
  4563                           ; Switch size 1, requested type "simple"
  4564                           ; Number of cases is 2, Range of values is 1 to 2
  4565                           ; switch strategies available:
  4566                           ; Name         Instructions Cycles
  4567                           ; simple_byte            7     4 (average)
  4568                           ; direct_byte           17    11 (fixed)
  4569                           ; jumptable            263     9 (fixed)
  4570                           ;	Chosen strategy is simple_byte
  4571     0BAF  0828               	movf	Fill@length^(0+128),w
  4572     0BB0  3A01               	xorlw	1	; case 1
  4573     0BB1  1903               	skipnz
  4574     0BB2  2B7A               	goto	l3201
  4575     0BB3  3A03               	xorlw	3	; case 2
  4576     0BB4  1903               	skipnz
  4577     0BB5  2B91               	goto	l3207
  4578     0BB6  2BB7               	goto	l265
  4579     0BB7                     l265:
  4580     0BB7  0008               	return
  4581     0BB8                     __end_of_Fill:
  4582                           
  4583                           	psect	text13
  4584     05F4                     __ptext13:	
  4585 ;; *************** function _ConvertToString *****************
  4586 ;; Defined at:
  4587 ;;		line 423 in file "main.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  n               4   57[BANK1 ] long 
  4590 ;;  str             2   61[BANK1 ] PTR unsigned char 
  4591 ;;		 -> main@num_rand_s(16), PIC_ID(4), 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  temp            2    0[BANK3 ] int 
  4594 ;;  i               2    4[BANK3 ] int 
  4595 ;;  j               2    2[BANK3 ] int 
  4596 ;;  n_cifre         1    6[BANK3 ] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      void 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4606 ;;      Params:         0       0       6       0       0
  4607 ;;      Locals:         0       0       0       7       0
  4608 ;;      Temps:          0       0       3       0       0
  4609 ;;      Totals:         0       0       9       7       0
  4610 ;;Total ram usage:       16 bytes
  4611 ;; Hardware stack levels used: 1
  4612 ;; Hardware stack levels required when called: 6
  4613 ;; This function calls:
  4614 ;;		___aldiv
  4615 ;;		___almod
  4616 ;;		___lmul
  4617 ;;		_pow
  4618 ;; This function is called by:
  4619 ;;		_main
  4620 ;;		_init_PIC
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624     05F4                     _ConvertToString:	
  4625                           ;psect for function _ConvertToString
  4626                           
  4627     05F4                     l3795:	
  4628                           ;incstack = 0
  4629                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4630                           
  4631                           
  4632                           ;main.c: 423: void ConvertToString(long n, char* str);main.c: 424: {;main.c: 427:     in
      +                          t i = 0, j = 0;
  4633     05F4  1683               	bsf	3,5	;RP0=1, select bank3
  4634     05F5  1703               	bsf	3,6	;RP1=1, select bank3
  4635     05F6  01CB               	clrf	ConvertToString@i^(0+384)
  4636     05F7  01CC               	clrf	(ConvertToString@i+1)^(0+384)
  4637     05F8  01C9               	clrf	ConvertToString@j^(0+384)
  4638     05F9  01CA               	clrf	(ConvertToString@j+1)^(0+384)
  4639     05FA                     l3797:
  4640                           
  4641                           ;main.c: 428:     if(n < 0)
  4642     05FA  1683               	bsf	3,5	;RP0=1, select bank1
  4643     05FB  1303               	bcf	3,6	;RP1=0, select bank1
  4644     05FC  1FDC               	btfss	(ConvertToString@n+3)^(0+128),7
  4645     05FD  2DFF               	goto	u4011
  4646     05FE  2E00               	goto	u4010
  4647     05FF                     u4011:
  4648     05FF  2E2E               	goto	l3805
  4649     0600                     u4010:
  4650     0600                     l3799:
  4651                           
  4652                           ;main.c: 429:     {;main.c: 430:         i = 1;
  4653     0600  3001               	movlw	1
  4654     0601  1683               	bsf	3,5	;RP0=1, select bank3
  4655     0602  1703               	bsf	3,6	;RP1=1, select bank3
  4656     0603  00CB               	movwf	ConvertToString@i^(0+384)
  4657     0604  3000               	movlw	0
  4658     0605  00CC               	movwf	(ConvertToString@i^(0+384)+1)
  4659     0606                     l3801:
  4660                           
  4661                           ;main.c: 431:         str[0] = '-';
  4662     0606  1683               	bsf	3,5	;RP0=1, select bank1
  4663     0607  1303               	bcf	3,6	;RP1=0, select bank1
  4664     0608  085D               	movf	ConvertToString@str^(0+128),w
  4665     0609  0084               	movwf	4
  4666     060A  1783               	bsf	3,7
  4667     060B  1C5E               	btfss	(ConvertToString@str+1)^(0+128),0
  4668     060C  1383               	bcf	3,7
  4669     060D  302D               	movlw	45
  4670     060E  0080               	movwf	0
  4671     060F                     l3803:
  4672                           
  4673                           ;main.c: 432:         n *= -1;
  4674     060F  30FF               	movlw	255
  4675     0610  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  4676     0611  30FF               	movlw	255
  4677     0612  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  4678     0613  30FF               	movlw	255
  4679     0614  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  4680     0615  30FF               	movlw	255
  4681     0616  00A0               	movwf	___lmul@multiplier^(0+128)
  4682     0617  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4683     0618  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4684     0619  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4685     061A  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4686     061B  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4687     061C  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4688     061D  0859               	movf	ConvertToString@n^(0+128),w
  4689     061E  00A4               	movwf	___lmul@multiplicand^(0+128)
  4690     061F  120A  158A  2165  120A  118A  	fcall	___lmul
  4691     0624  1683               	bsf	3,5	;RP0=1, select bank1
  4692     0625  1303               	bcf	3,6	;RP1=0, select bank1
  4693     0626  0823               	movf	(?___lmul+3)^(0+128),w
  4694     0627  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4695     0628  0822               	movf	(?___lmul+2)^(0+128),w
  4696     0629  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4697     062A  0821               	movf	(?___lmul+1)^(0+128),w
  4698     062B  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4699     062C  0820               	movf	?___lmul^(0+128),w
  4700     062D  00D9               	movwf	ConvertToString@n^(0+128)
  4701     062E                     l3805:
  4702                           
  4703                           ;main.c: 435:     char n_cifre = 1;
  4704     062E  1683               	bsf	3,5	;RP0=1, select bank3
  4705     062F  1703               	bsf	3,6	;RP1=1, select bank3
  4706     0630  01CD               	clrf	ConvertToString@n_cifre^(0+384)
  4707     0631  0ACD               	incf	ConvertToString@n_cifre^(0+384),f
  4708                           
  4709                           ;main.c: 437:     while(n / pow(10, n_cifre))
  4710     0632  2E39               	goto	l3809
  4711     0633                     l3807:
  4712                           
  4713                           ;main.c: 438:         n_cifre++;
  4714     0633  3001               	movlw	1
  4715     0634  00DF               	movwf	??_ConvertToString^(0+128)
  4716     0635  085F               	movf	??_ConvertToString^(0+128),w
  4717     0636  1683               	bsf	3,5	;RP0=1, select bank3
  4718     0637  1703               	bsf	3,6	;RP1=1, select bank3
  4719     0638  07CD               	addwf	ConvertToString@n_cifre^(0+384),f
  4720     0639                     l3809:
  4721                           
  4722                           ;main.c: 437:     while(n / pow(10, n_cifre))
  4723     0639  084D               	movf	ConvertToString@n_cifre^(0+384),w
  4724     063A  1683               	bsf	3,5	;RP0=1, select bank1
  4725     063B  1303               	bcf	3,6	;RP1=0, select bank1
  4726     063C  00C1               	movwf	pow@exp^(0+128)
  4727     063D  300A               	movlw	10
  4728     063E  160A  118A  277E  120A  118A  	fcall	_pow
  4729     0643  1683               	bsf	3,5	;RP0=1, select bank1
  4730     0644  1303               	bcf	3,6	;RP1=0, select bank1
  4731     0645  0841               	movf	?_pow^(0+128),w
  4732     0646  00CA               	movwf	___aldiv@divisor^(0+128)
  4733     0647  0842               	movf	(?_pow+1)^(0+128),w
  4734     0648  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4735     0649  3000               	movlw	0
  4736     064A  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4737     064B  30FF               	movlw	255
  4738     064C  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4739     064D  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4740     064E  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4741     064F  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4742     0650  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4743     0651  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4744     0652  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4745     0653  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4746     0654  0859               	movf	ConvertToString@n^(0+128),w
  4747     0655  00CE               	movwf	___aldiv@dividend^(0+128)
  4748     0656  120A  118A  2722  120A  118A  	fcall	___aldiv
  4749     065B  1683               	bsf	3,5	;RP0=1, select bank1
  4750     065C  1303               	bcf	3,6	;RP1=0, select bank1
  4751     065D  084D               	movf	(?___aldiv+3)^(0+128),w
  4752     065E  044C               	iorwf	(?___aldiv+2)^(0+128),w
  4753     065F  044B               	iorwf	(?___aldiv+1)^(0+128),w
  4754     0660  044A               	iorwf	?___aldiv^(0+128),w
  4755     0661  1D03               	skipz
  4756     0662  2E64               	goto	u4021
  4757     0663  2E65               	goto	u4020
  4758     0664                     u4021:
  4759     0664  2E33               	goto	l3807
  4760     0665                     u4020:
  4761     0665  2EF2               	goto	l3821
  4762     0666                     l3811:
  4763                           
  4764                           ;main.c: 441:     {;main.c: 442:         int temp = pow(10, (char)(n_cifre - 1 - j));
  4765     0666  1683               	bsf	3,5	;RP0=1, select bank3
  4766     0667  1703               	bsf	3,6	;RP1=1, select bank3
  4767     0668  0849               	movf	ConvertToString@j^(0+384),w
  4768     0669  024D               	subwf	ConvertToString@n_cifre^(0+384),w
  4769     066A  3EFF               	addlw	255
  4770     066B  1683               	bsf	3,5	;RP0=1, select bank1
  4771     066C  1303               	bcf	3,6	;RP1=0, select bank1
  4772     066D  00C1               	movwf	pow@exp^(0+128)
  4773     066E  300A               	movlw	10
  4774     066F  160A  118A  277E  120A  118A  	fcall	_pow
  4775     0674  1683               	bsf	3,5	;RP0=1, select bank1
  4776     0675  1303               	bcf	3,6	;RP1=0, select bank1
  4777     0676  0842               	movf	(?_pow+1)^(0+128),w
  4778     0677  1683               	bsf	3,5	;RP0=1, select bank3
  4779     0678  1703               	bsf	3,6	;RP1=1, select bank3
  4780     0679  00C8               	movwf	(ConvertToString@temp+1)^(0+384)
  4781     067A  1683               	bsf	3,5	;RP0=1, select bank1
  4782     067B  1303               	bcf	3,6	;RP1=0, select bank1
  4783     067C  0841               	movf	?_pow^(0+128),w
  4784     067D  1683               	bsf	3,5	;RP0=1, select bank3
  4785     067E  1703               	bsf	3,6	;RP1=1, select bank3
  4786     067F  00C7               	movwf	ConvertToString@temp^(0+384)
  4787     0680                     l3813:
  4788                           
  4789                           ;main.c: 444:         str[i] = (char)(n/temp) + '0';
  4790     0680  084B               	movf	ConvertToString@i^(0+384),w
  4791     0681  1683               	bsf	3,5	;RP0=1, select bank1
  4792     0682  1303               	bcf	3,6	;RP1=0, select bank1
  4793     0683  075D               	addwf	ConvertToString@str^(0+128),w
  4794     0684  00E0               	movwf	(??_ConvertToString+1)^(0+128)
  4795     0685  085E               	movf	(ConvertToString@str+1)^(0+128),w
  4796     0686  00DF               	movwf	??_ConvertToString^(0+128)
  4797     0687  1803               	skipnc
  4798     0688  0ADF               	incf	??_ConvertToString^(0+128),f
  4799     0689  1683               	bsf	3,5	;RP0=1, select bank3
  4800     068A  1703               	bsf	3,6	;RP1=1, select bank3
  4801     068B  1FCB               	btfss	ConvertToString@i^(0+384),7
  4802     068C  2E90               	goto	u4030
  4803     068D  1683               	bsf	3,5	;RP0=1, select bank1
  4804     068E  1303               	bcf	3,6	;RP1=0, select bank1
  4805     068F  03DF               	decf	??_ConvertToString^(0+128),f
  4806     0690                     u4030:
  4807     0690  1683               	bsf	3,5	;RP0=1, select bank1
  4808     0691  1303               	bcf	3,6	;RP1=0, select bank1
  4809     0692  085F               	movf	??_ConvertToString^(0+128),w
  4810     0693  00E1               	movwf	((??_ConvertToString+1)^(0+128)+1)
  4811     0694  0860               	movf	(??_ConvertToString+1)^(0+128),w
  4812     0695  0084               	movwf	4
  4813     0696  1783               	bsf	3,7
  4814     0697  1C61               	btfss	(??_ConvertToString+2)^(0+128),0
  4815     0698  1383               	bcf	3,7
  4816     0699  1683               	bsf	3,5	;RP0=1, select bank3
  4817     069A  1703               	bsf	3,6	;RP1=1, select bank3
  4818     069B  0847               	movf	ConvertToString@temp^(0+384),w
  4819     069C  1683               	bsf	3,5	;RP0=1, select bank1
  4820     069D  1303               	bcf	3,6	;RP1=0, select bank1
  4821     069E  00CA               	movwf	___aldiv@divisor^(0+128)
  4822     069F  1683               	bsf	3,5	;RP0=1, select bank3
  4823     06A0  1703               	bsf	3,6	;RP1=1, select bank3
  4824     06A1  0848               	movf	(ConvertToString@temp+1)^(0+384),w
  4825     06A2  1683               	bsf	3,5	;RP0=1, select bank1
  4826     06A3  1303               	bcf	3,6	;RP1=0, select bank1
  4827     06A4  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4828     06A5  3000               	movlw	0
  4829     06A6  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4830     06A7  30FF               	movlw	255
  4831     06A8  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4832     06A9  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4833     06AA  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4834     06AB  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4835     06AC  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4836     06AD  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4837     06AE  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4838     06AF  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4839     06B0  0859               	movf	ConvertToString@n^(0+128),w
  4840     06B1  00CE               	movwf	___aldiv@dividend^(0+128)
  4841     06B2  120A  118A  2722  120A  118A  	fcall	___aldiv
  4842     06B7  1683               	bsf	3,5	;RP0=1, select bank1
  4843     06B8  1303               	bcf	3,6	;RP1=0, select bank1
  4844     06B9  084A               	movf	?___aldiv^(0+128),w
  4845     06BA  3E30               	addlw	48
  4846     06BB  0080               	movwf	0
  4847     06BC                     l3815:
  4848                           
  4849                           ;main.c: 446:         n = n % temp;
  4850     06BC  1683               	bsf	3,5	;RP0=1, select bank3
  4851     06BD  1703               	bsf	3,6	;RP1=1, select bank3
  4852     06BE  0847               	movf	ConvertToString@temp^(0+384),w
  4853     06BF  1683               	bsf	3,5	;RP0=1, select bank1
  4854     06C0  1303               	bcf	3,6	;RP1=0, select bank1
  4855     06C1  00A0               	movwf	___almod@divisor^(0+128)
  4856     06C2  1683               	bsf	3,5	;RP0=1, select bank3
  4857     06C3  1703               	bsf	3,6	;RP1=1, select bank3
  4858     06C4  0848               	movf	(ConvertToString@temp+1)^(0+384),w
  4859     06C5  1683               	bsf	3,5	;RP0=1, select bank1
  4860     06C6  1303               	bcf	3,6	;RP1=0, select bank1
  4861     06C7  00A1               	movwf	(___almod@divisor+1)^(0+128)
  4862     06C8  3000               	movlw	0
  4863     06C9  1BA1               	btfsc	(___almod@divisor+1)^(0+128),7
  4864     06CA  30FF               	movlw	255
  4865     06CB  00A2               	movwf	(___almod@divisor+2)^(0+128)
  4866     06CC  00A3               	movwf	(___almod@divisor+3)^(0+128)
  4867     06CD  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4868     06CE  00A7               	movwf	(___almod@dividend+3)^(0+128)
  4869     06CF  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4870     06D0  00A6               	movwf	(___almod@dividend+2)^(0+128)
  4871     06D1  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4872     06D2  00A5               	movwf	(___almod@dividend+1)^(0+128)
  4873     06D3  0859               	movf	ConvertToString@n^(0+128),w
  4874     06D4  00A4               	movwf	___almod@dividend^(0+128)
  4875     06D5  120A  158A  26DE  120A  118A  	fcall	___almod
  4876     06DA  1683               	bsf	3,5	;RP0=1, select bank1
  4877     06DB  1303               	bcf	3,6	;RP1=0, select bank1
  4878     06DC  0823               	movf	(?___almod+3)^(0+128),w
  4879     06DD  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4880     06DE  0822               	movf	(?___almod+2)^(0+128),w
  4881     06DF  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4882     06E0  0821               	movf	(?___almod+1)^(0+128),w
  4883     06E1  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4884     06E2  0820               	movf	?___almod^(0+128),w
  4885     06E3  00D9               	movwf	ConvertToString@n^(0+128)
  4886     06E4                     l3817:
  4887                           
  4888                           ;main.c: 447:         i++;
  4889     06E4  3001               	movlw	1
  4890     06E5  1683               	bsf	3,5	;RP0=1, select bank3
  4891     06E6  1703               	bsf	3,6	;RP1=1, select bank3
  4892     06E7  07CB               	addwf	ConvertToString@i^(0+384),f
  4893     06E8  1803               	skipnc
  4894     06E9  0ACC               	incf	(ConvertToString@i+1)^(0+384),f
  4895     06EA  3000               	movlw	0
  4896     06EB  07CC               	addwf	(ConvertToString@i+1)^(0+384),f
  4897     06EC                     l3819:
  4898                           
  4899                           ;main.c: 448:         j++;
  4900     06EC  3001               	movlw	1
  4901     06ED  07C9               	addwf	ConvertToString@j^(0+384),f
  4902     06EE  1803               	skipnc
  4903     06EF  0ACA               	incf	(ConvertToString@j+1)^(0+384),f
  4904     06F0  3000               	movlw	0
  4905     06F1  07CA               	addwf	(ConvertToString@j+1)^(0+384),f
  4906     06F2                     l3821:
  4907                           
  4908                           ;main.c: 440:     while(j < n_cifre)
  4909     06F2  1683               	bsf	3,5	;RP0=1, select bank3
  4910     06F3  1703               	bsf	3,6	;RP1=1, select bank3
  4911     06F4  084A               	movf	(ConvertToString@j+1)^(0+384),w
  4912     06F5  3A80               	xorlw	128
  4913     06F6  1683               	bsf	3,5	;RP0=1, select bank1
  4914     06F7  1303               	bcf	3,6	;RP1=0, select bank1
  4915     06F8  00DF               	movwf	??_ConvertToString^(0+128)
  4916     06F9  3080               	movlw	128
  4917     06FA  025F               	subwf	??_ConvertToString^(0+128),w
  4918     06FB  1D03               	skipz
  4919     06FC  2F01               	goto	u4045
  4920     06FD  1683               	bsf	3,5	;RP0=1, select bank3
  4921     06FE  1703               	bsf	3,6	;RP1=1, select bank3
  4922     06FF  084D               	movf	ConvertToString@n_cifre^(0+384),w
  4923     0700  0249               	subwf	ConvertToString@j^(0+384),w
  4924     0701                     u4045:
  4925     0701  1C03               	skipc
  4926     0702  2F04               	goto	u4041
  4927     0703  2F05               	goto	u4040
  4928     0704                     u4041:
  4929     0704  2E66               	goto	l3811
  4930     0705                     u4040:
  4931     0705                     l3823:
  4932                           
  4933                           ;main.c: 451:     str[i] = '\0';
  4934     0705  1683               	bsf	3,5	;RP0=1, select bank3
  4935     0706  1703               	bsf	3,6	;RP1=1, select bank3
  4936     0707  084B               	movf	ConvertToString@i^(0+384),w
  4937     0708  1683               	bsf	3,5	;RP0=1, select bank1
  4938     0709  1303               	bcf	3,6	;RP1=0, select bank1
  4939     070A  075D               	addwf	ConvertToString@str^(0+128),w
  4940     070B  00E0               	movwf	(??_ConvertToString+1)^(0+128)
  4941     070C  085E               	movf	(ConvertToString@str+1)^(0+128),w
  4942     070D  00DF               	movwf	??_ConvertToString^(0+128)
  4943     070E  1803               	skipnc
  4944     070F  0ADF               	incf	??_ConvertToString^(0+128),f
  4945     0710  1683               	bsf	3,5	;RP0=1, select bank3
  4946     0711  1703               	bsf	3,6	;RP1=1, select bank3
  4947     0712  1FCB               	btfss	ConvertToString@i^(0+384),7
  4948     0713  2F17               	goto	u4050
  4949     0714  1683               	bsf	3,5	;RP0=1, select bank1
  4950     0715  1303               	bcf	3,6	;RP1=0, select bank1
  4951     0716  03DF               	decf	??_ConvertToString^(0+128),f
  4952     0717                     u4050:
  4953     0717  1683               	bsf	3,5	;RP0=1, select bank1
  4954     0718  1303               	bcf	3,6	;RP1=0, select bank1
  4955     0719  085F               	movf	??_ConvertToString^(0+128),w
  4956     071A  00E1               	movwf	((??_ConvertToString+1)^(0+128)+1)
  4957     071B  0860               	movf	(??_ConvertToString+1)^(0+128),w
  4958     071C  0084               	movwf	4
  4959     071D  1783               	bsf	3,7
  4960     071E  1C61               	btfss	(??_ConvertToString+2)^(0+128),0
  4961     071F  1383               	bcf	3,7
  4962     0720  0180               	clrf	0
  4963     0721                     l209:
  4964     0721  0008               	return
  4965     0722                     __end_of_ConvertToString:
  4966                           
  4967                           	psect	text14
  4968     177E                     __ptext14:	
  4969 ;; *************** function _pow *****************
  4970 ;; Defined at:
  4971 ;;		line 412 in file "main.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  b               1    wreg     unsigned char 
  4974 ;;  exp             1   33[BANK1 ] unsigned char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  b               1   37[BANK1 ] unsigned char 
  4977 ;;  i               2   38[BANK1 ] int 
  4978 ;;  n               2   40[BANK1 ] int 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  2   33[BANK1 ] int 
  4981 ;; Registers used:
  4982 ;;		wreg, status,2, status,0, pclath, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4988 ;;      Params:         0       0       2       0       0
  4989 ;;      Locals:         0       0       5       0       0
  4990 ;;      Temps:          0       0       2       0       0
  4991 ;;      Totals:         0       0       9       0       0
  4992 ;;Total ram usage:        9 bytes
  4993 ;; Hardware stack levels used: 1
  4994 ;; Hardware stack levels required when called: 5
  4995 ;; This function calls:
  4996 ;;		___wmul
  4997 ;; This function is called by:
  4998 ;;		_ConvertToString
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002     177E                     _pow:	
  5003                           ;psect for function _pow
  5004                           
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  5008                           ;pow@b stored from wreg
  5009     177E  1683               	bsf	3,5	;RP0=1, select bank1
  5010     177F  1303               	bcf	3,6	;RP1=0, select bank1
  5011     1780  00C5               	movwf	pow@b^(0+128)
  5012     1781                     l2971:
  5013                           
  5014                           ;main.c: 412: int pow(char b, char exp);main.c: 413: {;main.c: 414:     int n = 1;
  5015     1781  3001               	movlw	1
  5016     1782  00C8               	movwf	pow@n^(0+128)
  5017     1783  3000               	movlw	0
  5018     1784  00C9               	movwf	(pow@n^(0+128)+1)
  5019     1785                     l2973:
  5020                           
  5021                           ;main.c: 415:     for(int i = 0; i < exp; i++)
  5022     1785  01C6               	clrf	pow@i^(0+128)
  5023     1786  01C7               	clrf	(pow@i+1)^(0+128)
  5024     1787  2FA6               	goto	l2979
  5025     1788                     l2975:
  5026                           
  5027                           ;main.c: 416:     {;main.c: 417:         n *= b;
  5028     1788  1683               	bsf	3,5	;RP0=1, select bank1
  5029     1789  1303               	bcf	3,6	;RP1=0, select bank1
  5030     178A  0845               	movf	pow@b^(0+128),w
  5031     178B  00C3               	movwf	??_pow^(0+128)
  5032     178C  01C4               	clrf	(??_pow^(0+128)+1)
  5033     178D  0843               	movf	??_pow^(0+128),w
  5034     178E  00BB               	movwf	___wmul@multiplier^(0+128)
  5035     178F  0844               	movf	(??_pow+1)^(0+128),w
  5036     1790  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  5037     1791  0849               	movf	(pow@n+1)^(0+128),w
  5038     1792  00BE               	movwf	(___wmul@multiplicand+1)^(0+128)
  5039     1793  0848               	movf	pow@n^(0+128),w
  5040     1794  00BD               	movwf	___wmul@multiplicand^(0+128)
  5041     1795  160A  118A  26BF  160A  118A  	fcall	___wmul
  5042     179A  1683               	bsf	3,5	;RP0=1, select bank1
  5043     179B  1303               	bcf	3,6	;RP1=0, select bank1
  5044     179C  083C               	movf	(?___wmul+1)^(0+128),w
  5045     179D  00C9               	movwf	(pow@n+1)^(0+128)
  5046     179E  083B               	movf	?___wmul^(0+128),w
  5047     179F  00C8               	movwf	pow@n^(0+128)
  5048     17A0                     l2977:
  5049                           
  5050                           ;main.c: 418:     }
  5051     17A0  3001               	movlw	1
  5052     17A1  07C6               	addwf	pow@i^(0+128),f
  5053     17A2  1803               	skipnc
  5054     17A3  0AC7               	incf	(pow@i+1)^(0+128),f
  5055     17A4  3000               	movlw	0
  5056     17A5  07C7               	addwf	(pow@i+1)^(0+128),f
  5057     17A6                     l2979:
  5058     17A6  0847               	movf	(pow@i+1)^(0+128),w
  5059     17A7  3A80               	xorlw	128
  5060     17A8  00C3               	movwf	??_pow^(0+128)
  5061     17A9  3080               	movlw	128
  5062     17AA  0243               	subwf	??_pow^(0+128),w
  5063     17AB  1D03               	skipz
  5064     17AC  2FAF               	goto	u2885
  5065     17AD  0841               	movf	pow@exp^(0+128),w
  5066     17AE  0246               	subwf	pow@i^(0+128),w
  5067     17AF                     u2885:
  5068     17AF  1C03               	skipc
  5069     17B0  2FB2               	goto	u2881
  5070     17B1  2FB3               	goto	u2880
  5071     17B2                     u2881:
  5072     17B2  2F88               	goto	l2975
  5073     17B3                     u2880:
  5074     17B3                     l2981:
  5075                           
  5076                           ;main.c: 419:     return n;
  5077     17B3  1683               	bsf	3,5	;RP0=1, select bank1
  5078     17B4  1303               	bcf	3,6	;RP1=0, select bank1
  5079     17B5  0849               	movf	(pow@n+1)^(0+128),w
  5080     17B6  00C2               	movwf	(?_pow+1)^(0+128)
  5081     17B7  0848               	movf	pow@n^(0+128),w
  5082     17B8  00C1               	movwf	?_pow^(0+128)
  5083     17B9                     l199:
  5084     17B9  0008               	return
  5085     17BA                     __end_of_pow:
  5086                           
  5087                           	psect	text15
  5088     0EDE                     __ptext15:	
  5089 ;; *************** function ___almod *****************
  5090 ;; Defined at:
  5091 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  divisor         4    0[BANK1 ] long 
  5094 ;;  dividend        4    4[BANK1 ] long 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;  sign            1   10[BANK1 ] unsigned char 
  5097 ;;  counter         1    9[BANK1 ] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  4    0[BANK1 ] long 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5107 ;;      Params:         0       0       8       0       0
  5108 ;;      Locals:         0       0       2       0       0
  5109 ;;      Temps:          0       0       1       0       0
  5110 ;;      Totals:         0       0      11       0       0
  5111 ;;Total ram usage:       11 bytes
  5112 ;; Hardware stack levels used: 1
  5113 ;; Hardware stack levels required when called: 4
  5114 ;; This function calls:
  5115 ;;		Nothing
  5116 ;; This function is called by:
  5117 ;;		_ConvertToString
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121     0EDE                     ___almod:	
  5122                           ;psect for function ___almod
  5123                           
  5124     0EDE                     l3049:	
  5125                           ;incstack = 0
  5126                           ; Regs used in ___almod: [wreg+status,2+status,0]
  5127                           
  5128     0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  5129     0EDF  1303               	bcf	3,6	;RP1=0, select bank1
  5130     0EE0  01AA               	clrf	___almod@sign^(0+128)
  5131     0EE1                     l3051:
  5132     0EE1  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  5133     0EE2  2EE4               	goto	u3061
  5134     0EE3  2EE5               	goto	u3060
  5135     0EE4                     u3061:
  5136     0EE4  2EF2               	goto	l529
  5137     0EE5                     u3060:
  5138     0EE5                     l3053:
  5139     0EE5  09A4               	comf	___almod@dividend^(0+128),f
  5140     0EE6  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5141     0EE7  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5142     0EE8  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5143     0EE9  0AA4               	incf	___almod@dividend^(0+128),f
  5144     0EEA  1903               	skipnz
  5145     0EEB  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5146     0EEC  1903               	skipnz
  5147     0EED  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5148     0EEE  1903               	skipnz
  5149     0EEF  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5150     0EF0  01AA               	clrf	___almod@sign^(0+128)
  5151     0EF1  0AAA               	incf	___almod@sign^(0+128),f
  5152     0EF2                     l529:
  5153     0EF2  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5154     0EF3  2EF5               	goto	u3071
  5155     0EF4  2EF6               	goto	u3070
  5156     0EF5                     u3071:
  5157     0EF5  2F01               	goto	l3057
  5158     0EF6                     u3070:
  5159     0EF6                     l3055:
  5160     0EF6  09A0               	comf	___almod@divisor^(0+128),f
  5161     0EF7  09A1               	comf	(___almod@divisor+1)^(0+128),f
  5162     0EF8  09A2               	comf	(___almod@divisor+2)^(0+128),f
  5163     0EF9  09A3               	comf	(___almod@divisor+3)^(0+128),f
  5164     0EFA  0AA0               	incf	___almod@divisor^(0+128),f
  5165     0EFB  1903               	skipnz
  5166     0EFC  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  5167     0EFD  1903               	skipnz
  5168     0EFE  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  5169     0EFF  1903               	skipnz
  5170     0F00  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  5171     0F01                     l3057:
  5172     0F01  0823               	movf	(___almod@divisor+3)^(0+128),w
  5173     0F02  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  5174     0F03  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  5175     0F04  0420               	iorwf	___almod@divisor^(0+128),w
  5176     0F05  1903               	skipnz
  5177     0F06  2F08               	goto	u3081
  5178     0F07  2F09               	goto	u3080
  5179     0F08                     u3081:
  5180     0F08  2F4C               	goto	l3073
  5181     0F09                     u3080:
  5182     0F09                     l3059:
  5183     0F09  01A9               	clrf	___almod@counter^(0+128)
  5184     0F0A  0AA9               	incf	___almod@counter^(0+128),f
  5185     0F0B  2F19               	goto	l3063
  5186     0F0C                     l3061:
  5187     0F0C  3001               	movlw	1
  5188     0F0D  00A8               	movwf	??___almod^(0+128)
  5189     0F0E                     u3095:
  5190     0F0E  1003               	clrc
  5191     0F0F  0DA0               	rlf	___almod@divisor^(0+128),f
  5192     0F10  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  5193     0F11  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  5194     0F12  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  5195     0F13  0BA8               	decfsz	??___almod^(0+128),f
  5196     0F14  2F0E               	goto	u3095
  5197     0F15  3001               	movlw	1
  5198     0F16  00A8               	movwf	??___almod^(0+128)
  5199     0F17  0828               	movf	??___almod^(0+128),w
  5200     0F18  07A9               	addwf	___almod@counter^(0+128),f
  5201     0F19                     l3063:
  5202     0F19  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5203     0F1A  2F1C               	goto	u3101
  5204     0F1B  2F1D               	goto	u3100
  5205     0F1C                     u3101:
  5206     0F1C  2F0C               	goto	l3061
  5207     0F1D                     u3100:
  5208     0F1D                     l3065:
  5209     0F1D  0823               	movf	(___almod@divisor+3)^(0+128),w
  5210     0F1E  0227               	subwf	(___almod@dividend+3)^(0+128),w
  5211     0F1F  1D03               	skipz
  5212     0F20  2F2B               	goto	u3115
  5213     0F21  0822               	movf	(___almod@divisor+2)^(0+128),w
  5214     0F22  0226               	subwf	(___almod@dividend+2)^(0+128),w
  5215     0F23  1D03               	skipz
  5216     0F24  2F2B               	goto	u3115
  5217     0F25  0821               	movf	(___almod@divisor+1)^(0+128),w
  5218     0F26  0225               	subwf	(___almod@dividend+1)^(0+128),w
  5219     0F27  1D03               	skipz
  5220     0F28  2F2B               	goto	u3115
  5221     0F29  0820               	movf	___almod@divisor^(0+128),w
  5222     0F2A  0224               	subwf	___almod@dividend^(0+128),w
  5223     0F2B                     u3115:
  5224     0F2B  1C03               	skipc
  5225     0F2C  2F2E               	goto	u3111
  5226     0F2D  2F2F               	goto	u3110
  5227     0F2E                     u3111:
  5228     0F2E  2F3D               	goto	l3069
  5229     0F2F                     u3110:
  5230     0F2F                     l3067:
  5231     0F2F  0820               	movf	___almod@divisor^(0+128),w
  5232     0F30  02A4               	subwf	___almod@dividend^(0+128),f
  5233     0F31  0821               	movf	(___almod@divisor+1)^(0+128),w
  5234     0F32  1C03               	skipc
  5235     0F33  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  5236     0F34  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  5237     0F35  0822               	movf	(___almod@divisor+2)^(0+128),w
  5238     0F36  1C03               	skipc
  5239     0F37  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  5240     0F38  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  5241     0F39  0823               	movf	(___almod@divisor+3)^(0+128),w
  5242     0F3A  1C03               	skipc
  5243     0F3B  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  5244     0F3C  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  5245     0F3D                     l3069:
  5246     0F3D  3001               	movlw	1
  5247     0F3E                     u3125:
  5248     0F3E  1003               	clrc
  5249     0F3F  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  5250     0F40  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  5251     0F41  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  5252     0F42  0CA0               	rrf	___almod@divisor^(0+128),f
  5253     0F43  3EFF               	addlw	-1
  5254     0F44  1D03               	skipz
  5255     0F45  2F3E               	goto	u3125
  5256     0F46                     l3071:
  5257     0F46  3001               	movlw	1
  5258     0F47  02A9               	subwf	___almod@counter^(0+128),f
  5259     0F48  1D03               	btfss	3,2
  5260     0F49  2F4B               	goto	u3131
  5261     0F4A  2F4C               	goto	u3130
  5262     0F4B                     u3131:
  5263     0F4B  2F1D               	goto	l3065
  5264     0F4C                     u3130:
  5265     0F4C                     l3073:
  5266     0F4C  082A               	movf	___almod@sign^(0+128),w
  5267     0F4D  1903               	btfsc	3,2
  5268     0F4E  2F50               	goto	u3141
  5269     0F4F  2F51               	goto	u3140
  5270     0F50                     u3141:
  5271     0F50  2F5C               	goto	l3077
  5272     0F51                     u3140:
  5273     0F51                     l3075:
  5274     0F51  09A4               	comf	___almod@dividend^(0+128),f
  5275     0F52  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5276     0F53  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5277     0F54  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5278     0F55  0AA4               	incf	___almod@dividend^(0+128),f
  5279     0F56  1903               	skipnz
  5280     0F57  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5281     0F58  1903               	skipnz
  5282     0F59  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5283     0F5A  1903               	skipnz
  5284     0F5B  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5285     0F5C                     l3077:
  5286     0F5C  0827               	movf	(___almod@dividend+3)^(0+128),w
  5287     0F5D  00A3               	movwf	(?___almod+3)^(0+128)
  5288     0F5E  0826               	movf	(___almod@dividend+2)^(0+128),w
  5289     0F5F  00A2               	movwf	(?___almod+2)^(0+128)
  5290     0F60  0825               	movf	(___almod@dividend+1)^(0+128),w
  5291     0F61  00A1               	movwf	(?___almod+1)^(0+128)
  5292     0F62  0824               	movf	___almod@dividend^(0+128),w
  5293     0F63  00A0               	movwf	?___almod^(0+128)
  5294     0F64                     l539:
  5295     0F64  0008               	return
  5296     0F65                     __end_of___almod:
  5297                           
  5298                           	psect	text16
  5299     0722                     __ptext16:	
  5300 ;; *************** function ___aldiv *****************
  5301 ;; Defined at:
  5302 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  divisor         4   42[BANK1 ] long 
  5305 ;;  dividend        4   46[BANK1 ] long 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  quotient        4   53[BANK1 ] long 
  5308 ;;  sign            1   52[BANK1 ] unsigned char 
  5309 ;;  counter         1   51[BANK1 ] unsigned char 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  4   42[BANK1 ] long 
  5312 ;; Registers used:
  5313 ;;		wreg, status,2, status,0
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5319 ;;      Params:         0       0       8       0       0
  5320 ;;      Locals:         0       0       6       0       0
  5321 ;;      Temps:          0       0       1       0       0
  5322 ;;      Totals:         0       0      15       0       0
  5323 ;;Total ram usage:       15 bytes
  5324 ;; Hardware stack levels used: 1
  5325 ;; Hardware stack levels required when called: 4
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_ConvertToString
  5330 ;;		_UART_init
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334     0722                     ___aldiv:	
  5335                           ;psect for function ___aldiv
  5336                           
  5337     0722                     l3009:	
  5338                           ;incstack = 0
  5339                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5340                           
  5341     0722  1683               	bsf	3,5	;RP0=1, select bank1
  5342     0723  1303               	bcf	3,6	;RP1=0, select bank1
  5343     0724  01D4               	clrf	___aldiv@sign^(0+128)
  5344     0725                     l3011:
  5345     0725  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5346     0726  2F28               	goto	u2961
  5347     0727  2F29               	goto	u2960
  5348     0728                     u2961:
  5349     0728  2F36               	goto	l516
  5350     0729                     u2960:
  5351     0729                     l3013:
  5352     0729  09CA               	comf	___aldiv@divisor^(0+128),f
  5353     072A  09CB               	comf	(___aldiv@divisor+1)^(0+128),f
  5354     072B  09CC               	comf	(___aldiv@divisor+2)^(0+128),f
  5355     072C  09CD               	comf	(___aldiv@divisor+3)^(0+128),f
  5356     072D  0ACA               	incf	___aldiv@divisor^(0+128),f
  5357     072E  1903               	skipnz
  5358     072F  0ACB               	incf	(___aldiv@divisor+1)^(0+128),f
  5359     0730  1903               	skipnz
  5360     0731  0ACC               	incf	(___aldiv@divisor+2)^(0+128),f
  5361     0732  1903               	skipnz
  5362     0733  0ACD               	incf	(___aldiv@divisor+3)^(0+128),f
  5363     0734  01D4               	clrf	___aldiv@sign^(0+128)
  5364     0735  0AD4               	incf	___aldiv@sign^(0+128),f
  5365     0736                     l516:
  5366     0736  1FD1               	btfss	(___aldiv@dividend+3)^(0+128),7
  5367     0737  2F39               	goto	u2971
  5368     0738  2F3A               	goto	u2970
  5369     0739                     u2971:
  5370     0739  2F49               	goto	l3019
  5371     073A                     u2970:
  5372     073A                     l3015:
  5373     073A  09CE               	comf	___aldiv@dividend^(0+128),f
  5374     073B  09CF               	comf	(___aldiv@dividend+1)^(0+128),f
  5375     073C  09D0               	comf	(___aldiv@dividend+2)^(0+128),f
  5376     073D  09D1               	comf	(___aldiv@dividend+3)^(0+128),f
  5377     073E  0ACE               	incf	___aldiv@dividend^(0+128),f
  5378     073F  1903               	skipnz
  5379     0740  0ACF               	incf	(___aldiv@dividend+1)^(0+128),f
  5380     0741  1903               	skipnz
  5381     0742  0AD0               	incf	(___aldiv@dividend+2)^(0+128),f
  5382     0743  1903               	skipnz
  5383     0744  0AD1               	incf	(___aldiv@dividend+3)^(0+128),f
  5384     0745                     l3017:
  5385     0745  3001               	movlw	1
  5386     0746  00D2               	movwf	??___aldiv^(0+128)
  5387     0747  0852               	movf	??___aldiv^(0+128),w
  5388     0748  06D4               	xorwf	___aldiv@sign^(0+128),f
  5389     0749                     l3019:
  5390     0749  3000               	movlw	0
  5391     074A  00D8               	movwf	(___aldiv@quotient+3)^(0+128)
  5392     074B  3000               	movlw	0
  5393     074C  00D7               	movwf	(___aldiv@quotient+2)^(0+128)
  5394     074D  3000               	movlw	0
  5395     074E  00D6               	movwf	(___aldiv@quotient+1)^(0+128)
  5396     074F  3000               	movlw	0
  5397     0750  00D5               	movwf	___aldiv@quotient^(0+128)
  5398     0751                     l3021:
  5399     0751  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5400     0752  044C               	iorwf	(___aldiv@divisor+2)^(0+128),w
  5401     0753  044B               	iorwf	(___aldiv@divisor+1)^(0+128),w
  5402     0754  044A               	iorwf	___aldiv@divisor^(0+128),w
  5403     0755  1903               	skipnz
  5404     0756  2F58               	goto	u2981
  5405     0757  2F59               	goto	u2980
  5406     0758                     u2981:
  5407     0758  2FA6               	goto	l3041
  5408     0759                     u2980:
  5409     0759                     l3023:
  5410     0759  01D3               	clrf	___aldiv@counter^(0+128)
  5411     075A  0AD3               	incf	___aldiv@counter^(0+128),f
  5412     075B  2F69               	goto	l3027
  5413     075C                     l3025:
  5414     075C  3001               	movlw	1
  5415     075D  00D2               	movwf	??___aldiv^(0+128)
  5416     075E                     u2995:
  5417     075E  1003               	clrc
  5418     075F  0DCA               	rlf	___aldiv@divisor^(0+128),f
  5419     0760  0DCB               	rlf	(___aldiv@divisor+1)^(0+128),f
  5420     0761  0DCC               	rlf	(___aldiv@divisor+2)^(0+128),f
  5421     0762  0DCD               	rlf	(___aldiv@divisor+3)^(0+128),f
  5422     0763  0BD2               	decfsz	??___aldiv^(0+128),f
  5423     0764  2F5E               	goto	u2995
  5424     0765  3001               	movlw	1
  5425     0766  00D2               	movwf	??___aldiv^(0+128)
  5426     0767  0852               	movf	??___aldiv^(0+128),w
  5427     0768  07D3               	addwf	___aldiv@counter^(0+128),f
  5428     0769                     l3027:
  5429     0769  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5430     076A  2F6C               	goto	u3001
  5431     076B  2F6D               	goto	u3000
  5432     076C                     u3001:
  5433     076C  2F5C               	goto	l3025
  5434     076D                     u3000:
  5435     076D                     l3029:
  5436     076D  3001               	movlw	1
  5437     076E  00D2               	movwf	??___aldiv^(0+128)
  5438     076F                     u3015:
  5439     076F  1003               	clrc
  5440     0770  0DD5               	rlf	___aldiv@quotient^(0+128),f
  5441     0771  0DD6               	rlf	(___aldiv@quotient+1)^(0+128),f
  5442     0772  0DD7               	rlf	(___aldiv@quotient+2)^(0+128),f
  5443     0773  0DD8               	rlf	(___aldiv@quotient+3)^(0+128),f
  5444     0774  0BD2               	decfsz	??___aldiv^(0+128),f
  5445     0775  2F6F               	goto	u3015
  5446     0776                     l3031:
  5447     0776  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5448     0777  0251               	subwf	(___aldiv@dividend+3)^(0+128),w
  5449     0778  1D03               	skipz
  5450     0779  2F84               	goto	u3025
  5451     077A  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5452     077B  0250               	subwf	(___aldiv@dividend+2)^(0+128),w
  5453     077C  1D03               	skipz
  5454     077D  2F84               	goto	u3025
  5455     077E  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5456     077F  024F               	subwf	(___aldiv@dividend+1)^(0+128),w
  5457     0780  1D03               	skipz
  5458     0781  2F84               	goto	u3025
  5459     0782  084A               	movf	___aldiv@divisor^(0+128),w
  5460     0783  024E               	subwf	___aldiv@dividend^(0+128),w
  5461     0784                     u3025:
  5462     0784  1C03               	skipc
  5463     0785  2F87               	goto	u3021
  5464     0786  2F88               	goto	u3020
  5465     0787                     u3021:
  5466     0787  2F97               	goto	l3037
  5467     0788                     u3020:
  5468     0788                     l3033:
  5469     0788  084A               	movf	___aldiv@divisor^(0+128),w
  5470     0789  02CE               	subwf	___aldiv@dividend^(0+128),f
  5471     078A  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5472     078B  1C03               	skipc
  5473     078C  0F4B               	incfsz	(___aldiv@divisor+1)^(0+128),w
  5474     078D  02CF               	subwf	(___aldiv@dividend+1)^(0+128),f
  5475     078E  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5476     078F  1C03               	skipc
  5477     0790  0F4C               	incfsz	(___aldiv@divisor+2)^(0+128),w
  5478     0791  02D0               	subwf	(___aldiv@dividend+2)^(0+128),f
  5479     0792  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5480     0793  1C03               	skipc
  5481     0794  0F4D               	incfsz	(___aldiv@divisor+3)^(0+128),w
  5482     0795  02D1               	subwf	(___aldiv@dividend+3)^(0+128),f
  5483     0796                     l3035:
  5484     0796  1455               	bsf	___aldiv@quotient^(0+128),0
  5485     0797                     l3037:
  5486     0797  3001               	movlw	1
  5487     0798                     u3035:
  5488     0798  1003               	clrc
  5489     0799  0CCD               	rrf	(___aldiv@divisor+3)^(0+128),f
  5490     079A  0CCC               	rrf	(___aldiv@divisor+2)^(0+128),f
  5491     079B  0CCB               	rrf	(___aldiv@divisor+1)^(0+128),f
  5492     079C  0CCA               	rrf	___aldiv@divisor^(0+128),f
  5493     079D  3EFF               	addlw	-1
  5494     079E  1D03               	skipz
  5495     079F  2F98               	goto	u3035
  5496     07A0                     l3039:
  5497     07A0  3001               	movlw	1
  5498     07A1  02D3               	subwf	___aldiv@counter^(0+128),f
  5499     07A2  1D03               	btfss	3,2
  5500     07A3  2FA5               	goto	u3041
  5501     07A4  2FA6               	goto	u3040
  5502     07A5                     u3041:
  5503     07A5  2F6D               	goto	l3029
  5504     07A6                     u3040:
  5505     07A6                     l3041:
  5506     07A6  0854               	movf	___aldiv@sign^(0+128),w
  5507     07A7  1903               	btfsc	3,2
  5508     07A8  2FAA               	goto	u3051
  5509     07A9  2FAB               	goto	u3050
  5510     07AA                     u3051:
  5511     07AA  2FB6               	goto	l3045
  5512     07AB                     u3050:
  5513     07AB                     l3043:
  5514     07AB  09D5               	comf	___aldiv@quotient^(0+128),f
  5515     07AC  09D6               	comf	(___aldiv@quotient+1)^(0+128),f
  5516     07AD  09D7               	comf	(___aldiv@quotient+2)^(0+128),f
  5517     07AE  09D8               	comf	(___aldiv@quotient+3)^(0+128),f
  5518     07AF  0AD5               	incf	___aldiv@quotient^(0+128),f
  5519     07B0  1903               	skipnz
  5520     07B1  0AD6               	incf	(___aldiv@quotient+1)^(0+128),f
  5521     07B2  1903               	skipnz
  5522     07B3  0AD7               	incf	(___aldiv@quotient+2)^(0+128),f
  5523     07B4  1903               	skipnz
  5524     07B5  0AD8               	incf	(___aldiv@quotient+3)^(0+128),f
  5525     07B6                     l3045:
  5526     07B6  0858               	movf	(___aldiv@quotient+3)^(0+128),w
  5527     07B7  00CD               	movwf	(?___aldiv+3)^(0+128)
  5528     07B8  0857               	movf	(___aldiv@quotient+2)^(0+128),w
  5529     07B9  00CC               	movwf	(?___aldiv+2)^(0+128)
  5530     07BA  0856               	movf	(___aldiv@quotient+1)^(0+128),w
  5531     07BB  00CB               	movwf	(?___aldiv+1)^(0+128)
  5532     07BC  0855               	movf	___aldiv@quotient^(0+128),w
  5533     07BD  00CA               	movwf	?___aldiv^(0+128)
  5534     07BE                     l526:
  5535     07BE  0008               	return
  5536     07BF                     __end_of___aldiv:
  5537                           
  5538                           	psect	text17
  5539     0E5F                     __ptext17:	
  5540 ;; *************** function _UART_TxString *****************
  5541 ;; Defined at:
  5542 ;;		line 787 in file "main.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  str             1    wreg     PTR const unsigned char 
  5545 ;;		 -> packet(15), 
  5546 ;;  is_ACK          1   33[BANK1 ] unsigned char 
  5547 ;; Auto vars:     Size  Location     Type
  5548 ;;  str             1   37[BANK1 ] PTR const unsigned char 
  5549 ;;		 -> packet(15), 
  5550 ;;  n               2   35[BANK1 ] unsigned int 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  1    wreg      void 
  5553 ;; Registers used:
  5554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5560 ;;      Params:         0       0       1       0       0
  5561 ;;      Locals:         0       0       3       0       0
  5562 ;;      Temps:          0       0       1       0       0
  5563 ;;      Totals:         0       0       5       0       0
  5564 ;;Total ram usage:        5 bytes
  5565 ;; Hardware stack levels used: 1
  5566 ;; Hardware stack levels required when called: 6
  5567 ;; This function calls:
  5568 ;;		_UART_TxChar
  5569 ;;		___awmod
  5570 ;;		___wmul
  5571 ;;		_rand
  5572 ;;		_srand
  5573 ;; This function is called by:
  5574 ;;		_main
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578     0E5F                     _UART_TxString:	
  5579                           ;psect for function _UART_TxString
  5580                           
  5581                           
  5582                           ;incstack = 0
  5583                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5584                           ;UART_TxString@str stored from wreg
  5585     0E5F  1683               	bsf	3,5	;RP0=1, select bank1
  5586     0E60  1303               	bcf	3,6	;RP1=0, select bank1
  5587     0E61  00C5               	movwf	UART_TxString@str^(0+128)
  5588     0E62                     l3471:
  5589                           
  5590                           ;main.c: 787: void UART_TxString(const char *str, char is_ACK);main.c: 788: {;main.c: 78
      +                          9:     unsigned int n = 0;
  5591     0E62  01C3               	clrf	UART_TxString@n^(0+128)
  5592     0E63  01C4               	clrf	(UART_TxString@n+1)^(0+128)
  5593                           
  5594                           ;main.c: 791:     while(str[n] != '\0')
  5595     0E64  2E78               	goto	l3477
  5596     0E65                     l3473:
  5597                           
  5598                           ;main.c: 792:     {;main.c: 793:         UART_TxChar(str[n]);
  5599     0E65  0843               	movf	UART_TxString@n^(0+128),w
  5600     0E66  0745               	addwf	UART_TxString@str^(0+128),w
  5601     0E67  00C2               	movwf	??_UART_TxString^(0+128)
  5602     0E68  0842               	movf	??_UART_TxString^(0+128),w
  5603     0E69  0084               	movwf	4
  5604     0E6A  0800               	movf	0,w
  5605     0E6B  160A  118A  2662  120A  158A  	fcall	_UART_TxChar
  5606     0E70                     l3475:
  5607                           
  5608                           ;main.c: 794:         n++;
  5609     0E70  3001               	movlw	1
  5610     0E71  1683               	bsf	3,5	;RP0=1, select bank1
  5611     0E72  1303               	bcf	3,6	;RP1=0, select bank1
  5612     0E73  07C3               	addwf	UART_TxString@n^(0+128),f
  5613     0E74  1803               	skipnc
  5614     0E75  0AC4               	incf	(UART_TxString@n+1)^(0+128),f
  5615     0E76  3000               	movlw	0
  5616     0E77  07C4               	addwf	(UART_TxString@n+1)^(0+128),f
  5617     0E78                     l3477:
  5618                           
  5619                           ;main.c: 791:     while(str[n] != '\0')
  5620     0E78  0843               	movf	UART_TxString@n^(0+128),w
  5621     0E79  0745               	addwf	UART_TxString@str^(0+128),w
  5622     0E7A  00C2               	movwf	??_UART_TxString^(0+128)
  5623     0E7B  0842               	movf	??_UART_TxString^(0+128),w
  5624     0E7C  0084               	movwf	4
  5625     0E7D  1783               	bsf	3,7	;select IRP bank2
  5626     0E7E  0800               	movf	0,w
  5627     0E7F  1D03               	btfss	3,2
  5628     0E80  2E82               	goto	u3741
  5629     0E81  2E83               	goto	u3740
  5630     0E82                     u3741:
  5631     0E82  2E65               	goto	l3473
  5632     0E83                     u3740:
  5633     0E83                     l3479:
  5634                           
  5635                           ;main.c: 797:     if(is_ACK == 0)
  5636     0E83  0841               	movf	UART_TxString@is_ACK^(0+128),w
  5637     0E84  1D03               	btfss	3,2
  5638     0E85  2E87               	goto	u3751
  5639     0E86  2E88               	goto	u3750
  5640     0E87                     u3751:
  5641     0E87  2EDD               	goto	l318
  5642     0E88                     u3750:
  5643     0E88                     l3481:
  5644                           
  5645                           ;main.c: 798:     {;main.c: 801:         srand(milliseconds);
  5646     0E88  1283               	bcf	3,5	;RP0=0, select bank0
  5647     0E89  1303               	bcf	3,6	;RP1=0, select bank0
  5648     0E8A  0841               	movf	_milliseconds+1,w
  5649     0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  5650     0E8C  1303               	bcf	3,6	;RP1=0, select bank1
  5651     0E8D  00A1               	movwf	(srand@x+1)^(0+128)
  5652     0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  5653     0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  5654     0E90  0840               	movf	_milliseconds,w
  5655     0E91  1683               	bsf	3,5	;RP0=1, select bank1
  5656     0E92  1303               	bcf	3,6	;RP1=0, select bank1
  5657     0E93  00A0               	movwf	srand@x^(0+128)
  5658     0E94  160A  118A  263E  120A  158A  	fcall	_srand
  5659     0E99                     l3483:
  5660                           
  5661                           ;main.c: 802:         milliseconds = 0;
  5662     0E99  3000               	movlw	0
  5663     0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  5664     0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  5665     0E9C  00C3               	movwf	_milliseconds+3
  5666     0E9D  3000               	movlw	0
  5667     0E9E  00C2               	movwf	_milliseconds+2
  5668     0E9F  3000               	movlw	0
  5669     0EA0  00C1               	movwf	_milliseconds+1
  5670     0EA1  3000               	movlw	0
  5671     0EA2  00C0               	movwf	_milliseconds
  5672     0EA3                     l3485:
  5673                           
  5674                           ;main.c: 804:         seconds = ((rand()%10)+5) * 250;
  5675     0EA3  300A               	movlw	10
  5676     0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  5677     0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  5678     0EA6  00B4               	movwf	___awmod@divisor^(0+128)
  5679     0EA7  3000               	movlw	0
  5680     0EA8  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  5681     0EA9  120A  158A  248E  120A  158A  	fcall	_rand
  5682     0EAE  1683               	bsf	3,5	;RP0=1, select bank1
  5683     0EAF  1303               	bcf	3,6	;RP1=0, select bank1
  5684     0EB0  082E               	movf	(?_rand+1)^(0+128),w
  5685     0EB1  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  5686     0EB2  082D               	movf	?_rand^(0+128),w
  5687     0EB3  00B6               	movwf	___awmod@dividend^(0+128)
  5688     0EB4  120A  158A  22FF  120A  158A  	fcall	___awmod
  5689     0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  5690     0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  5691     0EBB  0834               	movf	?___awmod^(0+128),w
  5692     0EBC  3E05               	addlw	5
  5693     0EBD  00BB               	movwf	___wmul@multiplier^(0+128)
  5694     0EBE  0835               	movf	(?___awmod+1)^(0+128),w
  5695     0EBF  1803               	skipnc
  5696     0EC0  3E01               	addlw	1
  5697     0EC1  3E00               	addlw	0
  5698     0EC2  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  5699     0EC3  30FA               	movlw	250
  5700     0EC4  00BD               	movwf	___wmul@multiplicand^(0+128)
  5701     0EC5  3000               	movlw	0
  5702     0EC6  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  5703     0EC7  160A  118A  26BF  120A  158A  	fcall	___wmul
  5704     0ECC  1683               	bsf	3,5	;RP0=1, select bank1
  5705     0ECD  1303               	bcf	3,6	;RP1=0, select bank1
  5706     0ECE  083B               	movf	?___wmul^(0+128),w
  5707     0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  5708     0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  5709     0ED1  00BC               	movwf	_seconds
  5710     0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  5711     0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  5712     0ED4  083C               	movf	(?___wmul+1)^(0+128),w
  5713     0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  5714     0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  5715     0ED7  00BD               	movwf	_seconds+1
  5716     0ED8  3000               	movlw	0
  5717     0ED9  1BBD               	btfsc	_seconds+1,7
  5718     0EDA  30FF               	movlw	255
  5719     0EDB  00BE               	movwf	_seconds+2
  5720     0EDC  00BF               	movwf	_seconds+3
  5721     0EDD                     l318:
  5722     0EDD  0008               	return
  5723     0EDE                     __end_of_UART_TxString:
  5724                           
  5725                           	psect	text18
  5726     163E                     __ptext18:	
  5727 ;; *************** function _srand *****************
  5728 ;; Defined at:
  5729 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  x               2    0[BANK1 ] unsigned int 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5743 ;;      Params:         0       0       2       0       0
  5744 ;;      Locals:         0       0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0
  5746 ;;      Totals:         0       0       2       0       0
  5747 ;;Total ram usage:        2 bytes
  5748 ;; Hardware stack levels used: 1
  5749 ;; Hardware stack levels required when called: 4
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_read_NumPad
  5754 ;;		_UART_TxString
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758     163E                     _srand:	
  5759                           ;psect for function _srand
  5760                           
  5761     163E                     l3265:	
  5762                           ;incstack = 0
  5763                           ; Regs used in _srand: [wreg]
  5764                           
  5765     163E  1683               	bsf	3,5	;RP0=1, select bank1
  5766     163F  1303               	bcf	3,6	;RP1=0, select bank1
  5767     1640  0820               	movf	srand@x^(0+128),w
  5768     1641  1283               	bcf	3,5	;RP0=0, select bank0
  5769     1642  1303               	bcf	3,6	;RP1=0, select bank0
  5770     1643  00D3               	movwf	_randx
  5771     1644  1683               	bsf	3,5	;RP0=1, select bank1
  5772     1645  1303               	bcf	3,6	;RP1=0, select bank1
  5773     1646  0821               	movf	(srand@x+1)^(0+128),w
  5774     1647  1283               	bcf	3,5	;RP0=0, select bank0
  5775     1648  1303               	bcf	3,6	;RP1=0, select bank0
  5776     1649  00D4               	movwf	_randx+1
  5777     164A  01D5               	clrf	_randx+2
  5778     164B  01D6               	clrf	_randx+3
  5779     164C                     l904:
  5780     164C  0008               	return
  5781     164D                     __end_of_srand:
  5782                           
  5783                           	psect	text19
  5784     0C8E                     __ptext19:	
  5785 ;; *************** function _rand *****************
  5786 ;; Defined at:
  5787 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  2   13[BANK1 ] int 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0, pclath, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5801 ;;      Params:         0       0       2       0       0
  5802 ;;      Locals:         0       0       0       0       0
  5803 ;;      Temps:          0       0       5       0       0
  5804 ;;      Totals:         0       0       7       0       0
  5805 ;;Total ram usage:        7 bytes
  5806 ;; Hardware stack levels used: 1
  5807 ;; Hardware stack levels required when called: 5
  5808 ;; This function calls:
  5809 ;;		___lmul
  5810 ;; This function is called by:
  5811 ;;		_read_NumPad
  5812 ;;		_UART_TxString
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816     0C8E                     _rand:	
  5817                           ;psect for function _rand
  5818                           
  5819     0C8E                     l3267:	
  5820                           ;incstack = 0
  5821                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  5822                           
  5823     0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  5824     0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  5825     0C90  0856               	movf	_randx+3,w
  5826     0C91  1683               	bsf	3,5	;RP0=1, select bank1
  5827     0C92  1303               	bcf	3,6	;RP1=0, select bank1
  5828     0C93  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  5829     0C94  1283               	bcf	3,5	;RP0=0, select bank0
  5830     0C95  1303               	bcf	3,6	;RP1=0, select bank0
  5831     0C96  0855               	movf	_randx+2,w
  5832     0C97  1683               	bsf	3,5	;RP0=1, select bank1
  5833     0C98  1303               	bcf	3,6	;RP1=0, select bank1
  5834     0C99  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  5835     0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  5836     0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  5837     0C9C  0854               	movf	_randx+1,w
  5838     0C9D  1683               	bsf	3,5	;RP0=1, select bank1
  5839     0C9E  1303               	bcf	3,6	;RP1=0, select bank1
  5840     0C9F  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  5841     0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  5842     0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  5843     0CA2  0853               	movf	_randx,w
  5844     0CA3  1683               	bsf	3,5	;RP0=1, select bank1
  5845     0CA4  1303               	bcf	3,6	;RP1=0, select bank1
  5846     0CA5  00A0               	movwf	___lmul@multiplier^(0+128)
  5847     0CA6  3041               	movlw	65
  5848     0CA7  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  5849     0CA8  30C6               	movlw	198
  5850     0CA9  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  5851     0CAA  304E               	movlw	78
  5852     0CAB  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  5853     0CAC  306D               	movlw	109
  5854     0CAD  00A4               	movwf	___lmul@multiplicand^(0+128)
  5855     0CAE  120A  158A  2165  120A  158A  	fcall	___lmul
  5856     0CB3  1683               	bsf	3,5	;RP0=1, select bank1
  5857     0CB4  1303               	bcf	3,6	;RP1=0, select bank1
  5858     0CB5  0823               	movf	(?___lmul+3)^(0+128),w
  5859     0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  5860     0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  5861     0CB8  00D6               	movwf	_randx+3
  5862     0CB9  1683               	bsf	3,5	;RP0=1, select bank1
  5863     0CBA  1303               	bcf	3,6	;RP1=0, select bank1
  5864     0CBB  0822               	movf	(?___lmul+2)^(0+128),w
  5865     0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  5866     0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  5867     0CBE  00D5               	movwf	_randx+2
  5868     0CBF  1683               	bsf	3,5	;RP0=1, select bank1
  5869     0CC0  1303               	bcf	3,6	;RP1=0, select bank1
  5870     0CC1  0821               	movf	(?___lmul+1)^(0+128),w
  5871     0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  5872     0CC3  1303               	bcf	3,6	;RP1=0, select bank0
  5873     0CC4  00D4               	movwf	_randx+1
  5874     0CC5  1683               	bsf	3,5	;RP0=1, select bank1
  5875     0CC6  1303               	bcf	3,6	;RP1=0, select bank1
  5876     0CC7  0820               	movf	?___lmul^(0+128),w
  5877     0CC8  1283               	bcf	3,5	;RP0=0, select bank0
  5878     0CC9  1303               	bcf	3,6	;RP1=0, select bank0
  5879     0CCA  00D3               	movwf	_randx
  5880     0CCB                     l3269:
  5881     0CCB  3039               	movlw	57
  5882     0CCC  07D3               	addwf	_randx,f
  5883     0CCD  3030               	movlw	48
  5884     0CCE  1803               	skipnc
  5885     0CCF  3031               	movlw	49
  5886     0CD0  07D4               	addwf	_randx+1,f
  5887     0CD1  3000               	movlw	0
  5888     0CD2  1803               	skipnc
  5889     0CD3  3001               	movlw	1
  5890     0CD4  07D5               	addwf	_randx+2,f
  5891     0CD5  3000               	movlw	0
  5892     0CD6  1803               	skipnc
  5893     0CD7  3001               	movlw	1
  5894     0CD8  07D6               	addwf	_randx+3,f
  5895     0CD9                     l3271:
  5896     0CD9  0853               	movf	_randx,w
  5897     0CDA  1683               	bsf	3,5	;RP0=1, select bank1
  5898     0CDB  1303               	bcf	3,6	;RP1=0, select bank1
  5899     0CDC  00AF               	movwf	??_rand^(0+128)
  5900     0CDD  1283               	bcf	3,5	;RP0=0, select bank0
  5901     0CDE  1303               	bcf	3,6	;RP1=0, select bank0
  5902     0CDF  0854               	movf	_randx+1,w
  5903     0CE0  1683               	bsf	3,5	;RP0=1, select bank1
  5904     0CE1  1303               	bcf	3,6	;RP1=0, select bank1
  5905     0CE2  00B0               	movwf	(??_rand^(0+128)+1)
  5906     0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  5907     0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  5908     0CE5  0855               	movf	_randx+2,w
  5909     0CE6  1683               	bsf	3,5	;RP0=1, select bank1
  5910     0CE7  1303               	bcf	3,6	;RP1=0, select bank1
  5911     0CE8  00B1               	movwf	(??_rand^(0+128)+2)
  5912     0CE9  1283               	bcf	3,5	;RP0=0, select bank0
  5913     0CEA  1303               	bcf	3,6	;RP1=0, select bank0
  5914     0CEB  0856               	movf	_randx+3,w
  5915     0CEC  1683               	bsf	3,5	;RP0=1, select bank1
  5916     0CED  1303               	bcf	3,6	;RP1=0, select bank1
  5917     0CEE  00B2               	movwf	(??_rand^(0+128)+3)
  5918     0CEF  3010               	movlw	16
  5919     0CF0  00B3               	movwf	(??_rand+4)^(0+128)
  5920     0CF1                     u3365:
  5921     0CF1  0D32               	rlf	(??_rand^(0+128)+3),w
  5922     0CF2  0CB2               	rrf	(??_rand^(0+128)+3),f
  5923     0CF3  0CB1               	rrf	(??_rand^(0+128)+2),f
  5924     0CF4  0CB0               	rrf	(??_rand^(0+128)+1),f
  5925     0CF5  0CAF               	rrf	??_rand^(0+128),f
  5926     0CF6                     u3360:
  5927     0CF6  0BB3               	decfsz	(??_rand+4)^(0+128),f
  5928     0CF7  2CF1               	goto	u3365
  5929     0CF8  30FF               	movlw	255
  5930     0CF9  052F               	andwf	??_rand^(0+128),w
  5931     0CFA  00AD               	movwf	?_rand^(0+128)
  5932     0CFB  307F               	movlw	127
  5933     0CFC  0530               	andwf	(??_rand+1)^(0+128),w
  5934     0CFD  00AE               	movwf	(?_rand+1)^(0+128)
  5935     0CFE                     l907:
  5936     0CFE  0008               	return
  5937     0CFF                     __end_of_rand:
  5938                           
  5939                           	psect	text20
  5940     0965                     __ptext20:	
  5941 ;; *************** function ___lmul *****************
  5942 ;; Defined at:
  5943 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  multiplier      4    0[BANK1 ] unsigned long 
  5946 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  product         4    9[BANK1 ] unsigned long 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  4    0[BANK1 ] unsigned long 
  5951 ;; Registers used:
  5952 ;;		wreg, status,2, status,0
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5958 ;;      Params:         0       0       8       0       0
  5959 ;;      Locals:         0       0       4       0       0
  5960 ;;      Temps:          0       0       1       0       0
  5961 ;;      Totals:         0       0      13       0       0
  5962 ;;Total ram usage:       13 bytes
  5963 ;; Hardware stack levels used: 1
  5964 ;; Hardware stack levels required when called: 4
  5965 ;; This function calls:
  5966 ;;		Nothing
  5967 ;; This function is called by:
  5968 ;;		_ConvertToString
  5969 ;;		_rand
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973     0965                     ___lmul:	
  5974                           ;psect for function ___lmul
  5975                           
  5976     0965                     l2995:	
  5977                           ;incstack = 0
  5978                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5979                           
  5980     0965  3000               	movlw	0
  5981     0966  1683               	bsf	3,5	;RP0=1, select bank1
  5982     0967  1303               	bcf	3,6	;RP1=0, select bank1
  5983     0968  00AC               	movwf	(___lmul@product+3)^(0+128)
  5984     0969  3000               	movlw	0
  5985     096A  00AB               	movwf	(___lmul@product+2)^(0+128)
  5986     096B  3000               	movlw	0
  5987     096C  00AA               	movwf	(___lmul@product+1)^(0+128)
  5988     096D  3000               	movlw	0
  5989     096E  00A9               	movwf	___lmul@product^(0+128)
  5990     096F                     l2997:
  5991     096F  1C20               	btfss	___lmul@multiplier^(0+128),0
  5992     0970  2972               	goto	u2911
  5993     0971  2973               	goto	u2910
  5994     0972                     u2911:
  5995     0972  298A               	goto	l3001
  5996     0973                     u2910:
  5997     0973                     l2999:
  5998     0973  0824               	movf	___lmul@multiplicand^(0+128),w
  5999     0974  07A9               	addwf	___lmul@product^(0+128),f
  6000     0975  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  6001     0976  1103               	clrz
  6002     0977  1803               	skipnc
  6003     0978  3E01               	addlw	1
  6004     0979  1903               	skipnz
  6005     097A  297C               	goto	u2921
  6006     097B  07AA               	addwf	(___lmul@product+1)^(0+128),f
  6007     097C                     u2921:
  6008     097C  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  6009     097D  1103               	clrz
  6010     097E  1803               	skipnc
  6011     097F  3E01               	addlw	1
  6012     0980  1903               	skipnz
  6013     0981  2983               	goto	u2922
  6014     0982  07AB               	addwf	(___lmul@product+2)^(0+128),f
  6015     0983                     u2922:
  6016     0983  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  6017     0984  1103               	clrz
  6018     0985  1803               	skipnc
  6019     0986  3E01               	addlw	1
  6020     0987  1903               	skipnz
  6021     0988  298A               	goto	u2923
  6022     0989  07AC               	addwf	(___lmul@product+3)^(0+128),f
  6023     098A                     u2923:
  6024     098A                     l3001:
  6025     098A  3001               	movlw	1
  6026     098B  00A8               	movwf	??___lmul^(0+128)
  6027     098C                     u2935:
  6028     098C  1003               	clrc
  6029     098D  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  6030     098E  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  6031     098F  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  6032     0990  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  6033     0991  0BA8               	decfsz	??___lmul^(0+128),f
  6034     0992  298C               	goto	u2935
  6035     0993                     l3003:
  6036     0993  3001               	movlw	1
  6037     0994                     u2945:
  6038     0994  1003               	clrc
  6039     0995  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  6040     0996  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  6041     0997  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  6042     0998  0CA0               	rrf	___lmul@multiplier^(0+128),f
  6043     0999  3EFF               	addlw	-1
  6044     099A  1D03               	skipz
  6045     099B  2994               	goto	u2945
  6046     099C  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  6047     099D  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  6048     099E  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  6049     099F  0420               	iorwf	___lmul@multiplier^(0+128),w
  6050     09A0  1D03               	skipz
  6051     09A1  29A3               	goto	u2951
  6052     09A2  29A4               	goto	u2950
  6053     09A3                     u2951:
  6054     09A3  296F               	goto	l2997
  6055     09A4                     u2950:
  6056     09A4                     l3005:
  6057     09A4  082C               	movf	(___lmul@product+3)^(0+128),w
  6058     09A5  00A3               	movwf	(?___lmul+3)^(0+128)
  6059     09A6  082B               	movf	(___lmul@product+2)^(0+128),w
  6060     09A7  00A2               	movwf	(?___lmul+2)^(0+128)
  6061     09A8  082A               	movf	(___lmul@product+1)^(0+128),w
  6062     09A9  00A1               	movwf	(?___lmul+1)^(0+128)
  6063     09AA  0829               	movf	___lmul@product^(0+128),w
  6064     09AB  00A0               	movwf	?___lmul^(0+128)
  6065     09AC                     l465:
  6066     09AC  0008               	return
  6067     09AD                     __end_of___lmul:
  6068                           
  6069                           	psect	text21
  6070     16BF                     __ptext21:	
  6071 ;; *************** function ___wmul *****************
  6072 ;; Defined at:
  6073 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  multiplier      2   27[BANK1 ] unsigned int 
  6076 ;;  multiplicand    2   29[BANK1 ] unsigned int 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;  product         2   31[BANK1 ] unsigned int 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  2   27[BANK1 ] unsigned int 
  6081 ;; Registers used:
  6082 ;;		wreg, status,2, status,0
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6088 ;;      Params:         0       0       4       0       0
  6089 ;;      Locals:         0       0       2       0       0
  6090 ;;      Temps:          0       0       0       0       0
  6091 ;;      Totals:         0       0       6       0       0
  6092 ;;Total ram usage:        6 bytes
  6093 ;; Hardware stack levels used: 1
  6094 ;; Hardware stack levels required when called: 4
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_pow
  6099 ;;		_read_NumPad
  6100 ;;		_UART_TxString
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104     16BF                     ___wmul:	
  6105                           ;psect for function ___wmul
  6106                           
  6107     16BF                     l2937:	
  6108                           ;incstack = 0
  6109                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6110                           
  6111     16BF  1683               	bsf	3,5	;RP0=1, select bank1
  6112     16C0  1303               	bcf	3,6	;RP1=0, select bank1
  6113     16C1  01BF               	clrf	___wmul@product^(0+128)
  6114     16C2  01C0               	clrf	(___wmul@product+1)^(0+128)
  6115     16C3                     l2939:
  6116     16C3  1C3B               	btfss	___wmul@multiplier^(0+128),0
  6117     16C4  2EC6               	goto	u2841
  6118     16C5  2EC7               	goto	u2840
  6119     16C6                     u2841:
  6120     16C6  2ECD               	goto	l451
  6121     16C7                     u2840:
  6122     16C7                     l2941:
  6123     16C7  083D               	movf	___wmul@multiplicand^(0+128),w
  6124     16C8  07BF               	addwf	___wmul@product^(0+128),f
  6125     16C9  1803               	skipnc
  6126     16CA  0AC0               	incf	(___wmul@product+1)^(0+128),f
  6127     16CB  083E               	movf	(___wmul@multiplicand+1)^(0+128),w
  6128     16CC  07C0               	addwf	(___wmul@product+1)^(0+128),f
  6129     16CD                     l451:
  6130     16CD  3001               	movlw	1
  6131     16CE                     u2855:
  6132     16CE  1003               	clrc
  6133     16CF  0DBD               	rlf	___wmul@multiplicand^(0+128),f
  6134     16D0  0DBE               	rlf	(___wmul@multiplicand+1)^(0+128),f
  6135     16D1  3EFF               	addlw	-1
  6136     16D2  1D03               	skipz
  6137     16D3  2ECE               	goto	u2855
  6138     16D4                     l2943:
  6139     16D4  3001               	movlw	1
  6140     16D5                     u2865:
  6141     16D5  1003               	clrc
  6142     16D6  0CBC               	rrf	(___wmul@multiplier+1)^(0+128),f
  6143     16D7  0CBB               	rrf	___wmul@multiplier^(0+128),f
  6144     16D8  3EFF               	addlw	-1
  6145     16D9  1D03               	skipz
  6146     16DA  2ED5               	goto	u2865
  6147     16DB                     l2945:
  6148     16DB  083B               	movf	___wmul@multiplier^(0+128),w
  6149     16DC  043C               	iorwf	(___wmul@multiplier+1)^(0+128),w
  6150     16DD  1D03               	btfss	3,2
  6151     16DE  2EE0               	goto	u2871
  6152     16DF  2EE1               	goto	u2870
  6153     16E0                     u2871:
  6154     16E0  2EC3               	goto	l2939
  6155     16E1                     u2870:
  6156     16E1                     l2947:
  6157     16E1  0840               	movf	(___wmul@product+1)^(0+128),w
  6158     16E2  00BC               	movwf	(?___wmul+1)^(0+128)
  6159     16E3  083F               	movf	___wmul@product^(0+128),w
  6160     16E4  00BB               	movwf	?___wmul^(0+128)
  6161     16E5                     l453:
  6162     16E5  0008               	return
  6163     16E6                     __end_of___wmul:
  6164                           
  6165                           	psect	text22
  6166     0AFF                     __ptext22:	
  6167 ;; *************** function ___awmod *****************
  6168 ;; Defined at:
  6169 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  divisor         2   20[BANK1 ] int 
  6172 ;;  dividend        2   22[BANK1 ] int 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  sign            1   26[BANK1 ] unsigned char 
  6175 ;;  counter         1   25[BANK1 ] unsigned char 
  6176 ;; Return value:  Size  Location     Type
  6177 ;;                  2   20[BANK1 ] int 
  6178 ;; Registers used:
  6179 ;;		wreg, status,2, status,0
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6185 ;;      Params:         0       0       4       0       0
  6186 ;;      Locals:         0       0       2       0       0
  6187 ;;      Temps:          0       0       1       0       0
  6188 ;;      Totals:         0       0       7       0       0
  6189 ;;Total ram usage:        7 bytes
  6190 ;; Hardware stack levels used: 1
  6191 ;; Hardware stack levels required when called: 4
  6192 ;; This function calls:
  6193 ;;		Nothing
  6194 ;; This function is called by:
  6195 ;;		_read_NumPad
  6196 ;;		_UART_TxString
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200     0AFF                     ___awmod:	
  6201                           ;psect for function ___awmod
  6202                           
  6203     0AFF                     l3281:	
  6204                           ;incstack = 0
  6205                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6206                           
  6207     0AFF  1683               	bsf	3,5	;RP0=1, select bank1
  6208     0B00  1303               	bcf	3,6	;RP1=0, select bank1
  6209     0B01  01BA               	clrf	___awmod@sign^(0+128)
  6210     0B02                     l3283:
  6211     0B02  1FB7               	btfss	(___awmod@dividend+1)^(0+128),7
  6212     0B03  2B05               	goto	u3381
  6213     0B04  2B06               	goto	u3380
  6214     0B05                     u3381:
  6215     0B05  2B0D               	goto	l3289
  6216     0B06                     u3380:
  6217     0B06                     l3285:
  6218     0B06  09B6               	comf	___awmod@dividend^(0+128),f
  6219     0B07  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6220     0B08  0AB6               	incf	___awmod@dividend^(0+128),f
  6221     0B09  1903               	skipnz
  6222     0B0A  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6223     0B0B                     l3287:
  6224     0B0B  01BA               	clrf	___awmod@sign^(0+128)
  6225     0B0C  0ABA               	incf	___awmod@sign^(0+128),f
  6226     0B0D                     l3289:
  6227     0B0D  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6228     0B0E  2B10               	goto	u3391
  6229     0B0F  2B11               	goto	u3390
  6230     0B10                     u3391:
  6231     0B10  2B16               	goto	l3293
  6232     0B11                     u3390:
  6233     0B11                     l3291:
  6234     0B11  09B4               	comf	___awmod@divisor^(0+128),f
  6235     0B12  09B5               	comf	(___awmod@divisor+1)^(0+128),f
  6236     0B13  0AB4               	incf	___awmod@divisor^(0+128),f
  6237     0B14  1903               	skipnz
  6238     0B15  0AB5               	incf	(___awmod@divisor+1)^(0+128),f
  6239     0B16                     l3293:
  6240     0B16  0834               	movf	___awmod@divisor^(0+128),w
  6241     0B17  0435               	iorwf	(___awmod@divisor+1)^(0+128),w
  6242     0B18  1903               	btfsc	3,2
  6243     0B19  2B1B               	goto	u3401
  6244     0B1A  2B1C               	goto	u3400
  6245     0B1B                     u3401:
  6246     0B1B  2B4B               	goto	l3311
  6247     0B1C                     u3400:
  6248     0B1C                     l3295:
  6249     0B1C  01B9               	clrf	___awmod@counter^(0+128)
  6250     0B1D  0AB9               	incf	___awmod@counter^(0+128),f
  6251     0B1E  2B2A               	goto	l3301
  6252     0B1F                     l3297:
  6253     0B1F  3001               	movlw	1
  6254     0B20                     u3415:
  6255     0B20  1003               	clrc
  6256     0B21  0DB4               	rlf	___awmod@divisor^(0+128),f
  6257     0B22  0DB5               	rlf	(___awmod@divisor+1)^(0+128),f
  6258     0B23  3EFF               	addlw	-1
  6259     0B24  1D03               	skipz
  6260     0B25  2B20               	goto	u3415
  6261     0B26                     l3299:
  6262     0B26  3001               	movlw	1
  6263     0B27  00B8               	movwf	??___awmod^(0+128)
  6264     0B28  0838               	movf	??___awmod^(0+128),w
  6265     0B29  07B9               	addwf	___awmod@counter^(0+128),f
  6266     0B2A                     l3301:
  6267     0B2A  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6268     0B2B  2B2D               	goto	u3421
  6269     0B2C  2B2E               	goto	u3420
  6270     0B2D                     u3421:
  6271     0B2D  2B1F               	goto	l3297
  6272     0B2E                     u3420:
  6273     0B2E                     l3303:
  6274     0B2E  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6275     0B2F  0237               	subwf	(___awmod@dividend+1)^(0+128),w
  6276     0B30  1D03               	skipz
  6277     0B31  2B34               	goto	u3435
  6278     0B32  0834               	movf	___awmod@divisor^(0+128),w
  6279     0B33  0236               	subwf	___awmod@dividend^(0+128),w
  6280     0B34                     u3435:
  6281     0B34  1C03               	skipc
  6282     0B35  2B37               	goto	u3431
  6283     0B36  2B38               	goto	u3430
  6284     0B37                     u3431:
  6285     0B37  2B3E               	goto	l3307
  6286     0B38                     u3430:
  6287     0B38                     l3305:
  6288     0B38  0834               	movf	___awmod@divisor^(0+128),w
  6289     0B39  02B6               	subwf	___awmod@dividend^(0+128),f
  6290     0B3A  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6291     0B3B  1C03               	skipc
  6292     0B3C  03B7               	decf	(___awmod@dividend+1)^(0+128),f
  6293     0B3D  02B7               	subwf	(___awmod@dividend+1)^(0+128),f
  6294     0B3E                     l3307:
  6295     0B3E  3001               	movlw	1
  6296     0B3F                     u3445:
  6297     0B3F  1003               	clrc
  6298     0B40  0CB5               	rrf	(___awmod@divisor+1)^(0+128),f
  6299     0B41  0CB4               	rrf	___awmod@divisor^(0+128),f
  6300     0B42  3EFF               	addlw	-1
  6301     0B43  1D03               	skipz
  6302     0B44  2B3F               	goto	u3445
  6303     0B45                     l3309:
  6304     0B45  3001               	movlw	1
  6305     0B46  02B9               	subwf	___awmod@counter^(0+128),f
  6306     0B47  1D03               	btfss	3,2
  6307     0B48  2B4A               	goto	u3451
  6308     0B49  2B4B               	goto	u3450
  6309     0B4A                     u3451:
  6310     0B4A  2B2E               	goto	l3303
  6311     0B4B                     u3450:
  6312     0B4B                     l3311:
  6313     0B4B  083A               	movf	___awmod@sign^(0+128),w
  6314     0B4C  1903               	btfsc	3,2
  6315     0B4D  2B4F               	goto	u3461
  6316     0B4E  2B50               	goto	u3460
  6317     0B4F                     u3461:
  6318     0B4F  2B55               	goto	l3315
  6319     0B50                     u3460:
  6320     0B50                     l3313:
  6321     0B50  09B6               	comf	___awmod@dividend^(0+128),f
  6322     0B51  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6323     0B52  0AB6               	incf	___awmod@dividend^(0+128),f
  6324     0B53  1903               	skipnz
  6325     0B54  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6326     0B55                     l3315:
  6327     0B55  0837               	movf	(___awmod@dividend+1)^(0+128),w
  6328     0B56  00B5               	movwf	(?___awmod+1)^(0+128)
  6329     0B57  0836               	movf	___awmod@dividend^(0+128),w
  6330     0B58  00B4               	movwf	?___awmod^(0+128)
  6331     0B59                     l617:
  6332     0B59  0008               	return
  6333     0B5A                     __end_of___awmod:
  6334                           
  6335                           	psect	text23
  6336     1662                     __ptext23:	
  6337 ;; *************** function _UART_TxChar *****************
  6338 ;; Defined at:
  6339 ;;		line 777 in file "main.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  ch              1    wreg     unsigned char 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  ch              1    1[BANK1 ] unsigned char 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      void 
  6346 ;; Registers used:
  6347 ;;		wreg, status,2, status,0
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6353 ;;      Params:         0       0       0       0       0
  6354 ;;      Locals:         0       0       1       0       0
  6355 ;;      Temps:          0       0       1       0       0
  6356 ;;      Totals:         0       0       2       0       0
  6357 ;;Total ram usage:        2 bytes
  6358 ;; Hardware stack levels used: 1
  6359 ;; Hardware stack levels required when called: 4
  6360 ;; This function calls:
  6361 ;;		Nothing
  6362 ;; This function is called by:
  6363 ;;		_UART_TxString
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367     1662                     _UART_TxChar:	
  6368                           ;psect for function _UART_TxChar
  6369                           
  6370                           
  6371                           ;incstack = 0
  6372                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  6373                           ;UART_TxChar@ch stored from wreg
  6374     1662  1683               	bsf	3,5	;RP0=1, select bank1
  6375     1663  1303               	bcf	3,6	;RP1=0, select bank1
  6376     1664  00A1               	movwf	UART_TxChar@ch^(0+128)
  6377     1665                     l3275:
  6378     1665                     l308:	
  6379                           ;main.c: 777: void UART_TxChar(char ch);main.c: 778: {;main.c: 780:     while(!(PIR1 & 0
      +                          x10));
  6380                           
  6381     1665  1283               	bcf	3,5	;RP0=0, select bank0
  6382     1666  1E0C               	btfss	12,4	;volatile
  6383     1667  2E69               	goto	u3371
  6384     1668  2E6A               	goto	u3370
  6385     1669                     u3371:
  6386     1669  2E65               	goto	l308
  6387     166A                     u3370:
  6388     166A                     l3277:
  6389                           
  6390                           ;main.c: 782:     PIR1 &= ~0x10;
  6391     166A  30EF               	movlw	239
  6392     166B  1683               	bsf	3,5	;RP0=1, select bank1
  6393     166C  1303               	bcf	3,6	;RP1=0, select bank1
  6394     166D  00A0               	movwf	??_UART_TxChar^(0+128)
  6395     166E  0820               	movf	??_UART_TxChar^(0+128),w
  6396     166F  1283               	bcf	3,5	;RP0=0, select bank0
  6397     1670  1303               	bcf	3,6	;RP1=0, select bank0
  6398     1671  058C               	andwf	12,f	;volatile
  6399     1672                     l3279:
  6400                           
  6401                           ;main.c: 784:     TXREG = ch;
  6402     1672  1683               	bsf	3,5	;RP0=1, select bank1
  6403     1673  1303               	bcf	3,6	;RP1=0, select bank1
  6404     1674  0821               	movf	UART_TxChar@ch^(0+128),w
  6405     1675  1283               	bcf	3,5	;RP0=0, select bank0
  6406     1676  1303               	bcf	3,6	;RP1=0, select bank0
  6407     1677  0099               	movwf	25	;volatile
  6408     1678                     l311:
  6409     1678  0008               	return
  6410     1679                     __end_of_UART_TxChar:
  6411                           
  6412                           	psect	text24
  6413     0F65                     __ptext24:	
  6414 ;; *************** function _SplitPacket *****************
  6415 ;; Defined at:
  6416 ;;		line 505 in file "main.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  pkt             1    wreg     PTR unsigned char 
  6419 ;;		 -> dato(50), 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  pkt             1   21[BANK1 ] PTR unsigned char 
  6422 ;;		 -> dato(50), 
  6423 ;;  i               2   22[BANK1 ] int 
  6424 ;;  part            5   12[BANK1 ] unsigned char [5]
  6425 ;;  i_part          2   19[BANK1 ] int 
  6426 ;;  section         2   17[BANK1 ] int 
  6427 ;;  len             2   10[BANK1 ] int 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  1    wreg      void 
  6430 ;; Registers used:
  6431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6437 ;;      Params:         0       0       0       0       0
  6438 ;;      Locals:         0       0      14       0       0
  6439 ;;      Temps:          0       0       3       0       0
  6440 ;;      Totals:         0       0      17       0       0
  6441 ;;Total ram usage:       17 bytes
  6442 ;; Hardware stack levels used: 1
  6443 ;; Hardware stack levels required when called: 5
  6444 ;; This function calls:
  6445 ;;		_Length
  6446 ;;		_strcopy
  6447 ;; This function is called by:
  6448 ;;		_main
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452     0F65                     _SplitPacket:	
  6453                           ;psect for function _SplitPacket
  6454                           
  6455                           
  6456                           ;incstack = 0
  6457                           ; Regs used in _SplitPacket: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6458                           ;SplitPacket@pkt stored from wreg
  6459     0F65  1683               	bsf	3,5	;RP0=1, select bank1
  6460     0F66  1303               	bcf	3,6	;RP1=0, select bank1
  6461     0F67  00B5               	movwf	SplitPacket@pkt^(0+128)
  6462     0F68                     l3487:
  6463                           
  6464                           ;main.c: 505: void SplitPacket(char* pkt);main.c: 506: {;main.c: 508:     char part[5];;
      +                          main.c: 511:     int i_part = 0, section = 0, len = Length(pkt);
  6465     0F68  01B3               	clrf	SplitPacket@i_part^(0+128)
  6466     0F69  01B4               	clrf	(SplitPacket@i_part+1)^(0+128)
  6467     0F6A  01B1               	clrf	SplitPacket@section^(0+128)
  6468     0F6B  01B2               	clrf	(SplitPacket@section+1)^(0+128)
  6469     0F6C                     l3489:
  6470     0F6C  0835               	movf	SplitPacket@pkt^(0+128),w
  6471     0F6D  00A0               	movwf	Length@str^(0+128)
  6472     0F6E  3001               	movlw	1
  6473     0F6F  00A1               	movwf	(Length@str+1)^(0+128)
  6474     0F70  120A  158A  20F6  120A  158A  	fcall	_Length
  6475     0F75  1683               	bsf	3,5	;RP0=1, select bank1
  6476     0F76  1303               	bcf	3,6	;RP1=0, select bank1
  6477     0F77  0821               	movf	(?_Length+1)^(0+128),w
  6478     0F78  00AB               	movwf	(SplitPacket@len+1)^(0+128)
  6479     0F79  0820               	movf	?_Length^(0+128),w
  6480     0F7A  00AA               	movwf	SplitPacket@len^(0+128)
  6481     0F7B                     l3491:
  6482                           
  6483                           ;main.c: 514:     for(int i = 0; i < len + 1; i++)
  6484     0F7B  01B6               	clrf	SplitPacket@i^(0+128)
  6485     0F7C  01B7               	clrf	(SplitPacket@i+1)^(0+128)
  6486     0F7D  2FE9               	goto	l3521
  6487     0F7E                     l3493:
  6488                           
  6489                           ;main.c: 515:     {;main.c: 517:         if(pkt[i] != '/' && pkt[i] != '\0')
  6490     0F7E  1683               	bsf	3,5	;RP0=1, select bank1
  6491     0F7F  1303               	bcf	3,6	;RP1=0, select bank1
  6492     0F80  0836               	movf	SplitPacket@i^(0+128),w
  6493     0F81  0735               	addwf	SplitPacket@pkt^(0+128),w
  6494     0F82  00A7               	movwf	??_SplitPacket^(0+128)
  6495     0F83  0827               	movf	??_SplitPacket^(0+128),w
  6496     0F84  0084               	movwf	4
  6497     0F85  302F               	movlw	47
  6498     0F86  1783               	bsf	3,7	;select IRP bank2
  6499     0F87  0600               	xorwf	0,w
  6500     0F88  1903               	btfsc	3,2
  6501     0F89  2F8B               	goto	u3761
  6502     0F8A  2F8C               	goto	u3760
  6503     0F8B                     u3761:
  6504     0F8B  2FC6               	goto	l3513
  6505     0F8C                     u3760:
  6506     0F8C                     l3495:
  6507     0F8C  0836               	movf	SplitPacket@i^(0+128),w
  6508     0F8D  0735               	addwf	SplitPacket@pkt^(0+128),w
  6509     0F8E  00A7               	movwf	??_SplitPacket^(0+128)
  6510     0F8F  0827               	movf	??_SplitPacket^(0+128),w
  6511     0F90  0084               	movwf	4
  6512     0F91  0800               	movf	0,w
  6513     0F92  1903               	btfsc	3,2
  6514     0F93  2F95               	goto	u3771
  6515     0F94  2F96               	goto	u3770
  6516     0F95                     u3771:
  6517     0F95  2FC6               	goto	l3513
  6518     0F96                     u3770:
  6519     0F96                     l3497:
  6520                           
  6521                           ;main.c: 518:         {;main.c: 520:             part[i_part] = pkt[i];
  6522     0F96  0836               	movf	SplitPacket@i^(0+128),w
  6523     0F97  0735               	addwf	SplitPacket@pkt^(0+128),w
  6524     0F98  00A7               	movwf	??_SplitPacket^(0+128)
  6525     0F99  0827               	movf	??_SplitPacket^(0+128),w
  6526     0F9A  0084               	movwf	4
  6527     0F9B  0800               	movf	0,w
  6528     0F9C  00A8               	movwf	(??_SplitPacket+1)^(0+128)
  6529     0F9D  0833               	movf	SplitPacket@i_part^(0+128),w
  6530     0F9E  3EAC               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6531     0F9F  0084               	movwf	4
  6532     0FA0  0828               	movf	(??_SplitPacket+1)^(0+128),w
  6533     0FA1  1383               	bcf	3,7	;select IRP bank1
  6534     0FA2  0080               	movwf	0
  6535     0FA3                     l3499:
  6536                           
  6537                           ;main.c: 521:             i_part++;
  6538     0FA3  3001               	movlw	1
  6539     0FA4  07B3               	addwf	SplitPacket@i_part^(0+128),f
  6540     0FA5  1803               	skipnc
  6541     0FA6  0AB4               	incf	(SplitPacket@i_part+1)^(0+128),f
  6542     0FA7  3000               	movlw	0
  6543     0FA8  07B4               	addwf	(SplitPacket@i_part+1)^(0+128),f
  6544     0FA9                     l3501:
  6545                           
  6546                           ;main.c: 522:             part[i_part] = '\0';
  6547     0FA9  0833               	movf	SplitPacket@i_part^(0+128),w
  6548     0FAA  3EAC               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6549     0FAB  0084               	movwf	4
  6550     0FAC  0180               	clrf	0
  6551                           
  6552                           ;main.c: 523:         }
  6553     0FAD  2FE3               	goto	l3519
  6554     0FAE                     l3503:
  6555                           
  6556                           ;main.c: 531:                     source = part[0];
  6557     0FAE  082C               	movf	SplitPacket@part^(0+128),w
  6558     0FAF  00E9               	movwf	_source^(0+128)
  6559                           
  6560                           ;main.c: 532:                     break;
  6561     0FB0  2FD9               	goto	l3515
  6562     0FB1                     l3505:
  6563                           
  6564                           ;main.c: 534:                     strcopy(id_dest, part);
  6565     0FB1  30AC               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6566     0FB2  00A0               	movwf	strcopy@source^(0+128)
  6567     0FB3  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  6568     0FB4  160A  118A  26E6  120A  158A  	fcall	_strcopy
  6569                           
  6570                           ;main.c: 535:                     break;
  6571     0FB9  2FD9               	goto	l3515
  6572     0FBA                     l3507:
  6573                           
  6574                           ;main.c: 537:                     type = part[0];
  6575     0FBA  082C               	movf	SplitPacket@part^(0+128),w
  6576     0FBB  00E8               	movwf	_type^(0+128)
  6577                           
  6578                           ;main.c: 538:                     break;
  6579     0FBC  2FD9               	goto	l3515
  6580     0FBD                     l3509:
  6581                           
  6582                           ;main.c: 540:                     strcopy(datoSeriale, part);
  6583     0FBD  30AC               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6584     0FBE  00A0               	movwf	strcopy@source^(0+128)
  6585     0FBF  30A3               	movlw	(low (_datoSeriale| (0+256)))& (0+255)
  6586     0FC0  160A  118A  26E6  120A  158A  	fcall	_strcopy
  6587                           
  6588                           ;main.c: 541:                     break;
  6589     0FC5  2FD9               	goto	l3515
  6590     0FC6                     l3513:
  6591                           
  6592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6593                           ; Switch size 1, requested type "simple"
  6594                           ; Number of cases is 1, Range of values is 0 to 0
  6595                           ; switch strategies available:
  6596                           ; Name         Instructions Cycles
  6597                           ; simple_byte            4     3 (average)
  6598                           ; direct_byte           11     8 (fixed)
  6599                           ; jumptable            260     6 (fixed)
  6600                           ;	Chosen strategy is simple_byte
  6601     0FC6  0832               	movf	(SplitPacket@section+1)^(0+128),w
  6602     0FC7  3A00               	xorlw	0	; case 0
  6603     0FC8  1903               	skipnz
  6604     0FC9  2FCB               	goto	l4109
  6605     0FCA  2FD9               	goto	l3515
  6606     0FCB                     l4109:
  6607                           
  6608                           ; Switch size 1, requested type "simple"
  6609                           ; Number of cases is 4, Range of values is 0 to 3
  6610                           ; switch strategies available:
  6611                           ; Name         Instructions Cycles
  6612                           ; simple_byte           13     7 (average)
  6613                           ; direct_byte           20     8 (fixed)
  6614                           ; jumptable            260     6 (fixed)
  6615                           ;	Chosen strategy is simple_byte
  6616     0FCB  0831               	movf	SplitPacket@section^(0+128),w
  6617     0FCC  3A00               	xorlw	0	; case 0
  6618     0FCD  1903               	skipnz
  6619     0FCE  2FAE               	goto	l3503
  6620     0FCF  3A01               	xorlw	1	; case 1
  6621     0FD0  1903               	skipnz
  6622     0FD1  2FB1               	goto	l3505
  6623     0FD2  3A03               	xorlw	3	; case 2
  6624     0FD3  1903               	skipnz
  6625     0FD4  2FBA               	goto	l3507
  6626     0FD5  3A01               	xorlw	1	; case 3
  6627     0FD6  1903               	skipnz
  6628     0FD7  2FBD               	goto	l3509
  6629     0FD8  2FD9               	goto	l3515
  6630     0FD9                     l3515:
  6631                           
  6632                           ;main.c: 546:             section++;
  6633     0FD9  3001               	movlw	1
  6634     0FDA  1683               	bsf	3,5	;RP0=1, select bank1
  6635     0FDB  1303               	bcf	3,6	;RP1=0, select bank1
  6636     0FDC  07B1               	addwf	SplitPacket@section^(0+128),f
  6637     0FDD  1803               	skipnc
  6638     0FDE  0AB2               	incf	(SplitPacket@section+1)^(0+128),f
  6639     0FDF  3000               	movlw	0
  6640     0FE0  07B2               	addwf	(SplitPacket@section+1)^(0+128),f
  6641     0FE1                     l3517:
  6642                           
  6643                           ;main.c: 548:             i_part = 0;
  6644     0FE1  01B3               	clrf	SplitPacket@i_part^(0+128)
  6645     0FE2  01B4               	clrf	(SplitPacket@i_part+1)^(0+128)
  6646     0FE3                     l3519:
  6647                           
  6648                           ;main.c: 550:     }
  6649     0FE3  3001               	movlw	1
  6650     0FE4  07B6               	addwf	SplitPacket@i^(0+128),f
  6651     0FE5  1803               	skipnc
  6652     0FE6  0AB7               	incf	(SplitPacket@i+1)^(0+128),f
  6653     0FE7  3000               	movlw	0
  6654     0FE8  07B7               	addwf	(SplitPacket@i+1)^(0+128),f
  6655     0FE9                     l3521:
  6656     0FE9  082A               	movf	SplitPacket@len^(0+128),w
  6657     0FEA  3E01               	addlw	1
  6658     0FEB  00A7               	movwf	??_SplitPacket^(0+128)
  6659     0FEC  082B               	movf	(SplitPacket@len+1)^(0+128),w
  6660     0FED  1803               	skipnc
  6661     0FEE  3E01               	addlw	1
  6662     0FEF  3E00               	addlw	0
  6663     0FF0  00A8               	movwf	(??_SplitPacket+1)^(0+128)
  6664     0FF1  0837               	movf	(SplitPacket@i+1)^(0+128),w
  6665     0FF2  3A80               	xorlw	128
  6666     0FF3  00A9               	movwf	(??_SplitPacket+2)^(0+128)
  6667     0FF4  0828               	movf	(??_SplitPacket+1)^(0+128),w
  6668     0FF5  3A80               	xorlw	128
  6669     0FF6  0229               	subwf	(??_SplitPacket+2)^(0+128),w
  6670     0FF7  1D03               	skipz
  6671     0FF8  2FFB               	goto	u3785
  6672     0FF9  0827               	movf	??_SplitPacket^(0+128),w
  6673     0FFA  0236               	subwf	SplitPacket@i^(0+128),w
  6674     0FFB                     u3785:
  6675     0FFB  1C03               	skipc
  6676     0FFC  2FFE               	goto	u3781
  6677     0FFD  2FFF               	goto	u3780
  6678     0FFE                     u3781:
  6679     0FFE  2F7E               	goto	l3493
  6680     0FFF                     u3780:
  6681     0FFF                     l241:
  6682     0FFF  0008               	return
  6683     1000                     __end_of_SplitPacket:
  6684                           
  6685                           	psect	text25
  6686     16E6                     __ptext25:	
  6687 ;; *************** function _strcopy *****************
  6688 ;; Defined at:
  6689 ;;		line 553 in file "main.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  dest            1    wreg     PTR unsigned char 
  6692 ;;		 -> datoSeriale(17), id_dest(4), 
  6693 ;;  source          1    0[BANK1 ] PTR unsigned char 
  6694 ;;		 -> SplitPacket@part(5), 
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;  dest            1    4[BANK1 ] PTR unsigned char 
  6697 ;;		 -> datoSeriale(17), id_dest(4), 
  6698 ;;  n               2    5[BANK1 ] int 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6708 ;;      Params:         0       0       1       0       0
  6709 ;;      Locals:         0       0       3       0       0
  6710 ;;      Temps:          0       0       3       0       0
  6711 ;;      Totals:         0       0       7       0       0
  6712 ;;Total ram usage:        7 bytes
  6713 ;; Hardware stack levels used: 1
  6714 ;; Hardware stack levels required when called: 4
  6715 ;; This function calls:
  6716 ;;		Nothing
  6717 ;; This function is called by:
  6718 ;;		_SplitPacket
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722     16E6                     _strcopy:	
  6723                           ;psect for function _strcopy
  6724                           
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in _strcopy: [wreg-fsr0h+status,2+status,0]
  6728                           ;strcopy@dest stored from wreg
  6729     16E6  1683               	bsf	3,5	;RP0=1, select bank1
  6730     16E7  1303               	bcf	3,6	;RP1=0, select bank1
  6731     16E8  00A4               	movwf	strcopy@dest^(0+128)
  6732     16E9                     l3235:
  6733                           
  6734                           ;main.c: 553: void strcopy(char* dest, char* source);main.c: 554: {;main.c: 555:     int
      +                           n = 0;
  6735     16E9  01A5               	clrf	strcopy@n^(0+128)
  6736     16EA  01A6               	clrf	(strcopy@n+1)^(0+128)
  6737                           
  6738                           ;main.c: 558:     while(source[n] != '\0')
  6739     16EB  2F01               	goto	l3241
  6740     16EC                     l3237:
  6741                           
  6742                           ;main.c: 559:     {;main.c: 560:         dest[n] = source[n];
  6743     16EC  0825               	movf	strcopy@n^(0+128),w
  6744     16ED  0720               	addwf	strcopy@source^(0+128),w
  6745     16EE  00A1               	movwf	??_strcopy^(0+128)
  6746     16EF  0821               	movf	??_strcopy^(0+128),w
  6747     16F0  0084               	movwf	4
  6748     16F1  0800               	movf	0,w
  6749     16F2  00A2               	movwf	(??_strcopy+1)^(0+128)
  6750     16F3  0825               	movf	strcopy@n^(0+128),w
  6751     16F4  0724               	addwf	strcopy@dest^(0+128),w
  6752     16F5  00A3               	movwf	(??_strcopy+2)^(0+128)
  6753     16F6  0823               	movf	(??_strcopy+2)^(0+128),w
  6754     16F7  0084               	movwf	4
  6755     16F8  0822               	movf	(??_strcopy+1)^(0+128),w
  6756     16F9  1783               	bsf	3,7	;select IRP bank2
  6757     16FA  0080               	movwf	0
  6758     16FB                     l3239:
  6759                           
  6760                           ;main.c: 561:         n++;
  6761     16FB  3001               	movlw	1
  6762     16FC  07A5               	addwf	strcopy@n^(0+128),f
  6763     16FD  1803               	skipnc
  6764     16FE  0AA6               	incf	(strcopy@n+1)^(0+128),f
  6765     16FF  3000               	movlw	0
  6766     1700  07A6               	addwf	(strcopy@n+1)^(0+128),f
  6767     1701                     l3241:
  6768                           
  6769                           ;main.c: 558:     while(source[n] != '\0')
  6770     1701  0825               	movf	strcopy@n^(0+128),w
  6771     1702  0720               	addwf	strcopy@source^(0+128),w
  6772     1703  00A1               	movwf	??_strcopy^(0+128)
  6773     1704  0821               	movf	??_strcopy^(0+128),w
  6774     1705  0084               	movwf	4
  6775     1706  1383               	bcf	3,7	;select IRP bank0
  6776     1707  0800               	movf	0,w
  6777     1708  1D03               	btfss	3,2
  6778     1709  2F0B               	goto	u3321
  6779     170A  2F0C               	goto	u3320
  6780     170B                     u3321:
  6781     170B  2EEC               	goto	l3237
  6782     170C                     u3320:
  6783     170C                     l3243:
  6784                           
  6785                           ;main.c: 565:     dest[n] = '\0';
  6786     170C  0825               	movf	strcopy@n^(0+128),w
  6787     170D  0724               	addwf	strcopy@dest^(0+128),w
  6788     170E  00A1               	movwf	??_strcopy^(0+128)
  6789     170F  0821               	movf	??_strcopy^(0+128),w
  6790     1710  0084               	movwf	4
  6791     1711  1783               	bsf	3,7	;select IRP bank2
  6792     1712  0180               	clrf	0
  6793     1713                     l247:
  6794     1713  0008               	return
  6795     1714                     __end_of_strcopy:
  6796                           
  6797                           	psect	text26
  6798     09AD                     __ptext26:	
  6799 ;; *************** function _ConcatToPacket *****************
  6800 ;; Defined at:
  6801 ;;		line 455 in file "main.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  pkt             1    wreg     PTR unsigned char 
  6804 ;;		 -> packet(15), 
  6805 ;;  str             2   19[BANK1 ] PTR unsigned char 
  6806 ;;		 -> STR_16(4), STR_12(4), STR_8(2), main@num_rand_s(16), 
  6807 ;;		 -> PIC_ID(4), 
  6808 ;;  delim           1   21[BANK1 ] unsigned char 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  pkt             1   25[BANK1 ] PTR unsigned char 
  6811 ;;		 -> packet(15), 
  6812 ;;  packet_lengt    2   23[BANK1 ] int 
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      void 
  6815 ;; Registers used:
  6816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6822 ;;      Params:         0       0       3       0       0
  6823 ;;      Locals:         0       0       3       0       0
  6824 ;;      Temps:          0       0       1       0       0
  6825 ;;      Totals:         0       0       7       0       0
  6826 ;;Total ram usage:        7 bytes
  6827 ;; Hardware stack levels used: 1
  6828 ;; Hardware stack levels required when called: 6
  6829 ;; This function calls:
  6830 ;;		_strcat
  6831 ;; This function is called by:
  6832 ;;		_main
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836     09AD                     _ConcatToPacket:	
  6837                           ;psect for function _ConcatToPacket
  6838                           
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6842                           ;ConcatToPacket@pkt stored from wreg
  6843     09AD  1683               	bsf	3,5	;RP0=1, select bank1
  6844     09AE  1303               	bcf	3,6	;RP1=0, select bank1
  6845     09AF  00B9               	movwf	ConcatToPacket@pkt^(0+128)
  6846     09B0                     l3455:
  6847                           
  6848                           ;main.c: 455: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 456: {;main.
      +                          c: 458:     int packet_length = strcat(pkt, str);
  6849     09B0  0833               	movf	ConcatToPacket@str^(0+128),w
  6850     09B1  00A7               	movwf	strcat@source^(0+128)
  6851     09B2  0834               	movf	(ConcatToPacket@str+1)^(0+128),w
  6852     09B3  00A8               	movwf	(strcat@source+1)^(0+128)
  6853     09B4  0839               	movf	ConcatToPacket@pkt^(0+128),w
  6854     09B5  120A  158A  24FF  120A  158A  	fcall	_strcat
  6855     09BA  1683               	bsf	3,5	;RP0=1, select bank1
  6856     09BB  1303               	bcf	3,6	;RP1=0, select bank1
  6857     09BC  0828               	movf	(?_strcat+1)^(0+128),w
  6858     09BD  00B8               	movwf	(ConcatToPacket@packet_length+1)^(0+128)
  6859     09BE  0827               	movf	?_strcat^(0+128),w
  6860     09BF  00B7               	movwf	ConcatToPacket@packet_length^(0+128)
  6861     09C0                     l3457:
  6862                           
  6863                           ;main.c: 460:     if(delim != ' ')
  6864     09C0  3020               	movlw	32
  6865     09C1  0635               	xorwf	ConcatToPacket@delim^(0+128),w
  6866     09C2  1903               	btfsc	3,2
  6867     09C3  29C5               	goto	u3731
  6868     09C4  29C6               	goto	u3730
  6869     09C5                     u3731:
  6870     09C5  29D5               	goto	l3463
  6871     09C6                     u3730:
  6872     09C6                     l3459:
  6873                           
  6874                           ;main.c: 461:     {;main.c: 463:         pkt[packet_length] = delim;
  6875     09C6  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6876     09C7  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6877     09C8  00B6               	movwf	??_ConcatToPacket^(0+128)
  6878     09C9  0836               	movf	??_ConcatToPacket^(0+128),w
  6879     09CA  0084               	movwf	4
  6880     09CB  0835               	movf	ConcatToPacket@delim^(0+128),w
  6881     09CC  1783               	bsf	3,7	;select IRP bank2
  6882     09CD  0080               	movwf	0
  6883     09CE                     l3461:
  6884                           
  6885                           ;main.c: 464:         packet_length++;
  6886     09CE  3001               	movlw	1
  6887     09CF  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6888     09D0  1803               	skipnc
  6889     09D1  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6890     09D2  3000               	movlw	0
  6891     09D3  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6892                           
  6893                           ;main.c: 465:     }
  6894     09D4  29F0               	goto	l3469
  6895     09D5                     l3463:
  6896                           
  6897                           ;main.c: 468:     {;main.c: 470:         pkt[packet_length] = '\r';
  6898     09D5  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6899     09D6  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6900     09D7  00B6               	movwf	??_ConcatToPacket^(0+128)
  6901     09D8  0836               	movf	??_ConcatToPacket^(0+128),w
  6902     09D9  0084               	movwf	4
  6903     09DA  300D               	movlw	13
  6904     09DB  1783               	bsf	3,7	;select IRP bank2
  6905     09DC  0080               	movwf	0
  6906     09DD                     l3465:
  6907                           
  6908                           ;main.c: 471:         packet_length++;
  6909     09DD  3001               	movlw	1
  6910     09DE  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6911     09DF  1803               	skipnc
  6912     09E0  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6913     09E1  3000               	movlw	0
  6914     09E2  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6915     09E3                     l3467:
  6916                           
  6917                           ;main.c: 472:         pkt[packet_length] = '\n';
  6918     09E3  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6919     09E4  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6920     09E5  00B6               	movwf	??_ConcatToPacket^(0+128)
  6921     09E6  0836               	movf	??_ConcatToPacket^(0+128),w
  6922     09E7  0084               	movwf	4
  6923     09E8  300A               	movlw	10
  6924     09E9  0080               	movwf	0
  6925                           
  6926                           ;main.c: 473:         packet_length++;
  6927     09EA  3001               	movlw	1
  6928     09EB  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6929     09EC  1803               	skipnc
  6930     09ED  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6931     09EE  3000               	movlw	0
  6932     09EF  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6933     09F0                     l3469:
  6934                           
  6935                           ;main.c: 476:     pkt[packet_length] = '\0';
  6936     09F0  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6937     09F1  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6938     09F2  00B6               	movwf	??_ConcatToPacket^(0+128)
  6939     09F3  0836               	movf	??_ConcatToPacket^(0+128),w
  6940     09F4  0084               	movwf	4
  6941     09F5  0180               	clrf	0
  6942     09F6                     l214:
  6943     09F6  0008               	return
  6944     09F7                     __end_of_ConcatToPacket:
  6945                           
  6946                           	psect	text27
  6947     0CFF                     __ptext27:	
  6948 ;; *************** function _strcat *****************
  6949 ;; Defined at:
  6950 ;;		line 488 in file "main.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  dest            1    wreg     PTR unsigned char 
  6953 ;;		 -> packet(15), 
  6954 ;;  source          2    7[BANK1 ] PTR unsigned char 
  6955 ;;		 -> STR_16(4), STR_12(4), STR_8(2), main@num_rand_s(16), 
  6956 ;;		 -> PIC_ID(4), 
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  dest            1   14[BANK1 ] PTR unsigned char 
  6959 ;;		 -> packet(15), 
  6960 ;;  length_dest     2   17[BANK1 ] int 
  6961 ;;  n               2   15[BANK1 ] int 
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  2    7[BANK1 ] int 
  6964 ;; Registers used:
  6965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6971 ;;      Params:         0       0       2       0       0
  6972 ;;      Locals:         0       0       5       0       0
  6973 ;;      Temps:          0       0       5       0       0
  6974 ;;      Totals:         0       0      12       0       0
  6975 ;;Total ram usage:       12 bytes
  6976 ;; Hardware stack levels used: 1
  6977 ;; Hardware stack levels required when called: 5
  6978 ;; This function calls:
  6979 ;;		_Length
  6980 ;; This function is called by:
  6981 ;;		_ConcatToPacket
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985     0CFF                     _strcat:	
  6986                           ;psect for function _strcat
  6987                           
  6988                           
  6989                           ;incstack = 0
  6990                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6991                           ;strcat@dest stored from wreg
  6992     0CFF  1683               	bsf	3,5	;RP0=1, select bank1
  6993     0D00  1303               	bcf	3,6	;RP1=0, select bank1
  6994     0D01  00AE               	movwf	strcat@dest^(0+128)
  6995     0D02                     l3221:
  6996                           
  6997                           ;main.c: 488: int strcat(char* dest, char* source);main.c: 489: {;main.c: 491:     int n
      +                           = 0, length_dest = Length(dest);
  6998     0D02  01AF               	clrf	strcat@n^(0+128)
  6999     0D03  01B0               	clrf	(strcat@n+1)^(0+128)
  7000     0D04                     l3223:
  7001     0D04  082E               	movf	strcat@dest^(0+128),w
  7002     0D05  00A0               	movwf	Length@str^(0+128)
  7003     0D06  3001               	movlw	1
  7004     0D07  00A1               	movwf	(Length@str+1)^(0+128)
  7005     0D08  120A  158A  20F6  120A  158A  	fcall	_Length
  7006     0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  7007     0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  7008     0D0F  0821               	movf	(?_Length+1)^(0+128),w
  7009     0D10  00B2               	movwf	(strcat@length_dest+1)^(0+128)
  7010     0D11  0820               	movf	?_Length^(0+128),w
  7011     0D12  00B1               	movwf	strcat@length_dest^(0+128)
  7012                           
  7013                           ;main.c: 494:     while(source[n] != '\0')
  7014     0D13  2D4A               	goto	l223
  7015     0D14                     l3225:
  7016                           
  7017                           ;main.c: 495:     {;main.c: 496:         dest[length_dest] = source[n];
  7018     0D14  1683               	bsf	3,5	;RP0=1, select bank1
  7019     0D15  1303               	bcf	3,6	;RP1=0, select bank1
  7020     0D16  082F               	movf	strcat@n^(0+128),w
  7021     0D17  0727               	addwf	strcat@source^(0+128),w
  7022     0D18  00AA               	movwf	(??_strcat+1)^(0+128)
  7023     0D19  0828               	movf	(strcat@source+1)^(0+128),w
  7024     0D1A  00A9               	movwf	??_strcat^(0+128)
  7025     0D1B  1803               	skipnc
  7026     0D1C  0AA9               	incf	??_strcat^(0+128),f
  7027     0D1D  1FAF               	btfss	strcat@n^(0+128),7
  7028     0D1E  2D20               	goto	u3290
  7029     0D1F  03A9               	decf	??_strcat^(0+128),f
  7030     0D20                     u3290:
  7031     0D20  1683               	bsf	3,5	;RP0=1, select bank1
  7032     0D21  1303               	bcf	3,6	;RP1=0, select bank1
  7033     0D22  0829               	movf	??_strcat^(0+128),w
  7034     0D23  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  7035     0D24  082B               	movf	(??_strcat+2)^(0+128),w
  7036     0D25  1283               	bcf	3,5	;RP0=0, select bank0
  7037     0D26  1303               	bcf	3,6	;RP1=0, select bank0
  7038     0D27  00FF               	movwf	btemp+1
  7039     0D28  1683               	bsf	3,5	;RP0=1, select bank1
  7040     0D29  1303               	bcf	3,6	;RP1=0, select bank1
  7041     0D2A  082A               	movf	(??_strcat+1)^(0+128),w
  7042     0D2B  0084               	movwf	4
  7043     0D2C  1283               	bcf	3,5	;RP0=0, select bank0
  7044     0D2D  1303               	bcf	3,6	;RP1=0, select bank0
  7045     0D2E  120A  158A  2000  120A  158A  	fcall	stringtab
  7046     0D33  1683               	bsf	3,5	;RP0=1, select bank1
  7047     0D34  1303               	bcf	3,6	;RP1=0, select bank1
  7048     0D35  00AC               	movwf	(??_strcat+3)^(0+128)
  7049     0D36  0831               	movf	strcat@length_dest^(0+128),w
  7050     0D37  072E               	addwf	strcat@dest^(0+128),w
  7051     0D38  00AD               	movwf	(??_strcat+4)^(0+128)
  7052     0D39  082D               	movf	(??_strcat+4)^(0+128),w
  7053     0D3A  0084               	movwf	4
  7054     0D3B  082C               	movf	(??_strcat+3)^(0+128),w
  7055     0D3C  1783               	bsf	3,7	;select IRP bank2
  7056     0D3D  0080               	movwf	0
  7057     0D3E                     l3227:
  7058                           
  7059                           ;main.c: 497:         n++;
  7060     0D3E  3001               	movlw	1
  7061     0D3F  07AF               	addwf	strcat@n^(0+128),f
  7062     0D40  1803               	skipnc
  7063     0D41  0AB0               	incf	(strcat@n+1)^(0+128),f
  7064     0D42  3000               	movlw	0
  7065     0D43  07B0               	addwf	(strcat@n+1)^(0+128),f
  7066     0D44                     l3229:
  7067                           
  7068                           ;main.c: 498:         length_dest++;
  7069     0D44  3001               	movlw	1
  7070     0D45  07B1               	addwf	strcat@length_dest^(0+128),f
  7071     0D46  1803               	skipnc
  7072     0D47  0AB2               	incf	(strcat@length_dest+1)^(0+128),f
  7073     0D48  3000               	movlw	0
  7074     0D49  07B2               	addwf	(strcat@length_dest+1)^(0+128),f
  7075     0D4A                     l223:	
  7076                           ;main.c: 499:     }
  7077                           
  7078                           
  7079                           ;main.c: 494:     while(source[n] != '\0')
  7080     0D4A  082F               	movf	strcat@n^(0+128),w
  7081     0D4B  0727               	addwf	strcat@source^(0+128),w
  7082     0D4C  00AA               	movwf	(??_strcat+1)^(0+128)
  7083     0D4D  0828               	movf	(strcat@source+1)^(0+128),w
  7084     0D4E  00A9               	movwf	??_strcat^(0+128)
  7085     0D4F  1803               	skipnc
  7086     0D50  0AA9               	incf	??_strcat^(0+128),f
  7087     0D51  1FAF               	btfss	strcat@n^(0+128),7
  7088     0D52  2D54               	goto	u3300
  7089     0D53  03A9               	decf	??_strcat^(0+128),f
  7090     0D54                     u3300:
  7091     0D54  1683               	bsf	3,5	;RP0=1, select bank1
  7092     0D55  1303               	bcf	3,6	;RP1=0, select bank1
  7093     0D56  0829               	movf	??_strcat^(0+128),w
  7094     0D57  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  7095     0D58  082B               	movf	(??_strcat+2)^(0+128),w
  7096     0D59  1283               	bcf	3,5	;RP0=0, select bank0
  7097     0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  7098     0D5B  00FF               	movwf	btemp+1
  7099     0D5C  1683               	bsf	3,5	;RP0=1, select bank1
  7100     0D5D  1303               	bcf	3,6	;RP1=0, select bank1
  7101     0D5E  082A               	movf	(??_strcat+1)^(0+128),w
  7102     0D5F  0084               	movwf	4
  7103     0D60  1283               	bcf	3,5	;RP0=0, select bank0
  7104     0D61  1303               	bcf	3,6	;RP1=0, select bank0
  7105     0D62  120A  158A  2000  120A  158A  	fcall	stringtab
  7106     0D67  3A00               	xorlw	0
  7107     0D68  1D03               	skipz
  7108     0D69  2D6B               	goto	u3311
  7109     0D6A  2D6C               	goto	u3310
  7110     0D6B                     u3311:
  7111     0D6B  2D14               	goto	l3225
  7112     0D6C                     u3310:
  7113     0D6C                     l3231:
  7114                           
  7115                           ;main.c: 502:     return length_dest;
  7116     0D6C  1683               	bsf	3,5	;RP0=1, select bank1
  7117     0D6D  1303               	bcf	3,6	;RP1=0, select bank1
  7118     0D6E  0832               	movf	(strcat@length_dest+1)^(0+128),w
  7119     0D6F  00A8               	movwf	(?_strcat+1)^(0+128)
  7120     0D70  0831               	movf	strcat@length_dest^(0+128),w
  7121     0D71  00A7               	movwf	?_strcat^(0+128)
  7122     0D72                     l226:
  7123     0D72  0008               	return
  7124     0D73                     __end_of_strcat:
  7125                           
  7126                           	psect	text28
  7127     08F6                     __ptext28:	
  7128 ;; *************** function _Length *****************
  7129 ;; Defined at:
  7130 ;;		line 479 in file "main.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;  str             2    0[BANK1 ] PTR unsigned char 
  7133 ;;		 -> datoSeriale(17), datoTastierino(17), id_dest(4), dato(50), 
  7134 ;;		 -> packet(15), PIC_ID(4), 
  7135 ;; Auto vars:     Size  Location     Type
  7136 ;;  len             2    5[BANK1 ] int 
  7137 ;; Return value:  Size  Location     Type
  7138 ;;                  2    0[BANK1 ] int 
  7139 ;; Registers used:
  7140 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7141 ;; Tracked objects:
  7142 ;;		On entry : 0/0
  7143 ;;		On exit  : 0/0
  7144 ;;		Unchanged: 0/0
  7145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7146 ;;      Params:         0       0       2       0       0
  7147 ;;      Locals:         0       0       2       0       0
  7148 ;;      Temps:          0       0       3       0       0
  7149 ;;      Totals:         0       0       7       0       0
  7150 ;;Total ram usage:        7 bytes
  7151 ;; Hardware stack levels used: 1
  7152 ;; Hardware stack levels required when called: 4
  7153 ;; This function calls:
  7154 ;;		Nothing
  7155 ;; This function is called by:
  7156 ;;		_strcat
  7157 ;;		_SplitPacket
  7158 ;;		_CompareStrings
  7159 ;;		_Fill
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163     08F6                     _Length:	
  7164                           ;psect for function _Length
  7165                           
  7166     08F6                     l2985:	
  7167                           ;incstack = 0
  7168                           ; Regs used in _Length: [wreg-fsr0h+status,2+status,0]
  7169                           
  7170                           
  7171                           ;main.c: 479: int Length(char *str);main.c: 480: {;main.c: 481:     int len = 0;
  7172     08F6  1683               	bsf	3,5	;RP0=1, select bank1
  7173     08F7  1303               	bcf	3,6	;RP1=0, select bank1
  7174     08F8  01A5               	clrf	Length@len^(0+128)
  7175     08F9  01A6               	clrf	(Length@len+1)^(0+128)
  7176                           
  7177                           ;main.c: 483:     while(str[len] != '\0') { len++; }
  7178     08FA  2901               	goto	l2989
  7179     08FB                     l2987:
  7180     08FB  3001               	movlw	1
  7181     08FC  07A5               	addwf	Length@len^(0+128),f
  7182     08FD  1803               	skipnc
  7183     08FE  0AA6               	incf	(Length@len+1)^(0+128),f
  7184     08FF  3000               	movlw	0
  7185     0900  07A6               	addwf	(Length@len+1)^(0+128),f
  7186     0901                     l2989:
  7187     0901  0825               	movf	Length@len^(0+128),w
  7188     0902  0720               	addwf	Length@str^(0+128),w
  7189     0903  00A3               	movwf	(??_Length+1)^(0+128)
  7190     0904  0821               	movf	(Length@str+1)^(0+128),w
  7191     0905  00A2               	movwf	??_Length^(0+128)
  7192     0906  1803               	skipnc
  7193     0907  0AA2               	incf	??_Length^(0+128),f
  7194     0908  1FA5               	btfss	Length@len^(0+128),7
  7195     0909  290B               	goto	u2890
  7196     090A  03A2               	decf	??_Length^(0+128),f
  7197     090B                     u2890:
  7198     090B  1683               	bsf	3,5	;RP0=1, select bank1
  7199     090C  1303               	bcf	3,6	;RP1=0, select bank1
  7200     090D  0822               	movf	??_Length^(0+128),w
  7201     090E  00A4               	movwf	((??_Length+1)^(0+128)+1)
  7202     090F  0823               	movf	(??_Length+1)^(0+128),w
  7203     0910  0084               	movwf	4
  7204     0911  1783               	bsf	3,7
  7205     0912  1C24               	btfss	(??_Length+2)^(0+128),0
  7206     0913  1383               	bcf	3,7
  7207     0914  0800               	movf	0,w
  7208     0915  1D03               	btfss	3,2
  7209     0916  2918               	goto	u2901
  7210     0917  2919               	goto	u2900
  7211     0918                     u2901:
  7212     0918  28FB               	goto	l2987
  7213     0919                     u2900:
  7214     0919                     l2991:
  7215                           
  7216                           ;main.c: 485:     return len;
  7217     0919  0826               	movf	(Length@len+1)^(0+128),w
  7218     091A  00A1               	movwf	(?_Length+1)^(0+128)
  7219     091B  0825               	movf	Length@len^(0+128),w
  7220     091C  00A0               	movwf	?_Length^(0+128)
  7221     091D                     l220:
  7222     091D  0008               	return
  7223     091E                     __end_of_Length:
  7224                           
  7225                           	psect	text29
  7226     0DE7                     __ptext29:	
  7227 ;; *************** function _IRS *****************
  7228 ;; Defined at:
  7229 ;;		line 808 in file "main.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;		None
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;		None
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  1    wreg      void 
  7236 ;; Registers used:
  7237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7243 ;;      Params:         0       0       0       0       0
  7244 ;;      Locals:         0       0       0       0       0
  7245 ;;      Temps:          0       4       0       0       0
  7246 ;;      Totals:         0       4       0       0       0
  7247 ;;Total ram usage:        4 bytes
  7248 ;; Hardware stack levels used: 1
  7249 ;; Hardware stack levels required when called: 3
  7250 ;; This function calls:
  7251 ;;		i1_UART_TxString
  7252 ;; This function is called by:
  7253 ;;		Interrupt level 1
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257     0DE7                     _IRS:	
  7258                           ;psect for function _IRS
  7259                           
  7260     0DE7                     i1l2857:
  7261                           
  7262                           ;main.c: 811:     if(RCIF)
  7263     0DE7  1E8C               	btfss	12,5	;volatile
  7264     0DE8  2DEA               	goto	u279_21
  7265     0DE9  2DEB               	goto	u279_20
  7266     0DEA                     u279_21:
  7267     0DEA  2DFC               	goto	i1l2869
  7268     0DEB                     u279_20:
  7269     0DEB                     i1l2859:
  7270                           
  7271                           ;main.c: 812:     {;main.c: 813:         dato[iS++] = RCREG;
  7272     0DEB  084E               	movf	_iS,w
  7273     0DEC  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7274     0DED  0084               	movwf	4
  7275     0DEE  081A               	movf	26,w	;volatile
  7276     0DEF  1783               	bsf	3,7	;select IRP bank2
  7277     0DF0  0080               	movwf	0
  7278     0DF1                     i1l2861:
  7279     0DF1  3001               	movlw	1
  7280     0DF2  00B8               	movwf	??_IRS
  7281     0DF3  0838               	movf	??_IRS,w
  7282     0DF4  07CE               	addwf	_iS,f
  7283     0DF5                     i1l2863:
  7284                           
  7285                           ;main.c: 814:         dato[iS] = '\0';
  7286     0DF5  084E               	movf	_iS,w
  7287     0DF6  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7288     0DF7  0084               	movwf	4
  7289     0DF8  0180               	clrf	0
  7290     0DF9                     i1l2865:
  7291                           
  7292                           ;main.c: 815:         recieved = 1;
  7293     0DF9  01CC               	clrf	_recieved
  7294     0DFA  0ACC               	incf	_recieved,f
  7295     0DFB                     i1l2867:
  7296                           
  7297                           ;main.c: 816:         RCIF = 0;
  7298     0DFB  128C               	bcf	12,5	;volatile
  7299     0DFC                     i1l2869:
  7300                           
  7301                           ;main.c: 819:     if(T0IF)
  7302     0DFC  1D0B               	btfss	11,2	;volatile
  7303     0DFD  2DFF               	goto	u280_21
  7304     0DFE  2E00               	goto	u280_20
  7305     0DFF                     u280_21:
  7306     0DFF  2E54               	goto	i1l328
  7307     0E00                     u280_20:
  7308     0E00                     i1l2871:
  7309                           
  7310                           ;main.c: 820:     {;main.c: 821:         TMR0 = 131;
  7311     0E00  3083               	movlw	131
  7312     0E01  0081               	movwf	1	;volatile
  7313                           
  7314                           ;main.c: 822:         milliseconds++;
  7315     0E02  3001               	movlw	1
  7316     0E03  07C0               	addwf	_milliseconds,f
  7317     0E04  3000               	movlw	0
  7318     0E05  1803               	skipnc
  7319     0E06  3001               	movlw	1
  7320     0E07  07C1               	addwf	_milliseconds+1,f
  7321     0E08  3000               	movlw	0
  7322     0E09  1803               	skipnc
  7323     0E0A  3001               	movlw	1
  7324     0E0B  07C2               	addwf	_milliseconds+2,f
  7325     0E0C  3000               	movlw	0
  7326     0E0D  1803               	skipnc
  7327     0E0E  3001               	movlw	1
  7328     0E0F  07C3               	addwf	_milliseconds+3,f
  7329                           
  7330                           ;main.c: 823:         if(seconds != 0 && milliseconds > seconds)
  7331     0E10  083F               	movf	_seconds+3,w
  7332     0E11  043E               	iorwf	_seconds+2,w
  7333     0E12  043D               	iorwf	_seconds+1,w
  7334     0E13  043C               	iorwf	_seconds,w
  7335     0E14  1903               	skipnz
  7336     0E15  2E17               	goto	u281_21
  7337     0E16  2E18               	goto	u281_20
  7338     0E17                     u281_21:
  7339     0E17  2E53               	goto	i1l2885
  7340     0E18                     u281_20:
  7341     0E18                     i1l2873:
  7342     0E18  0843               	movf	_milliseconds+3,w
  7343     0E19  023F               	subwf	_seconds+3,w
  7344     0E1A  1D03               	skipz
  7345     0E1B  2E26               	goto	u282_25
  7346     0E1C  0842               	movf	_milliseconds+2,w
  7347     0E1D  023E               	subwf	_seconds+2,w
  7348     0E1E  1D03               	skipz
  7349     0E1F  2E26               	goto	u282_25
  7350     0E20  0841               	movf	_milliseconds+1,w
  7351     0E21  023D               	subwf	_seconds+1,w
  7352     0E22  1D03               	skipz
  7353     0E23  2E26               	goto	u282_25
  7354     0E24  0840               	movf	_milliseconds,w
  7355     0E25  023C               	subwf	_seconds,w
  7356     0E26                     u282_25:
  7357     0E26  1803               	skipnc
  7358     0E27  2E29               	goto	u282_21
  7359     0E28  2E2A               	goto	u282_20
  7360     0E29                     u282_21:
  7361     0E29  2E53               	goto	i1l2885
  7362     0E2A                     u282_20:
  7363     0E2A                     i1l2875:
  7364                           
  7365                           ;main.c: 824:         {;main.c: 826:             if(seconds == 1000)
  7366     0E2A  30E8               	movlw	232
  7367     0E2B  063C               	xorwf	_seconds,w
  7368     0E2C  3003               	movlw	3
  7369     0E2D  1903               	skipnz
  7370     0E2E  063D               	xorwf	_seconds+1,w
  7371     0E2F  043E               	iorwf	_seconds+2,w
  7372     0E30  043F               	iorwf	_seconds+3,w
  7373     0E31  1D03               	btfss	3,2
  7374     0E32  2E34               	goto	u283_21
  7375     0E33  2E35               	goto	u283_20
  7376     0E34                     u283_21:
  7377     0E34  2E42               	goto	i1l2881
  7378     0E35                     u283_20:
  7379     0E35                     i1l2877:
  7380                           
  7381                           ;main.c: 827:             {;main.c: 828:                 pr_start = 1;
  7382     0E35  1283               	bcf	3,5	;RP0=0, select bank0
  7383     0E36  1303               	bcf	3,6	;RP1=0, select bank0
  7384     0E37  01C9               	clrf	_pr_start
  7385     0E38  0AC9               	incf	_pr_start,f
  7386     0E39                     i1l2879:
  7387                           
  7388                           ;main.c: 829:                 seconds = 0;
  7389     0E39  3000               	movlw	0
  7390     0E3A  00BF               	movwf	_seconds+3
  7391     0E3B  3000               	movlw	0
  7392     0E3C  00BE               	movwf	_seconds+2
  7393     0E3D  3000               	movlw	0
  7394     0E3E  00BD               	movwf	_seconds+1
  7395     0E3F  3000               	movlw	0
  7396     0E40  00BC               	movwf	_seconds
  7397                           
  7398                           ;main.c: 830:             }
  7399     0E41  2E53               	goto	i1l2885
  7400     0E42                     i1l2881:
  7401                           
  7402                           ;main.c: 833:             {;main.c: 834:                 seconds = 0;
  7403     0E42  3000               	movlw	0
  7404     0E43  1283               	bcf	3,5	;RP0=0, select bank0
  7405     0E44  1303               	bcf	3,6	;RP1=0, select bank0
  7406     0E45  00BF               	movwf	_seconds+3
  7407     0E46  3000               	movlw	0
  7408     0E47  00BE               	movwf	_seconds+2
  7409     0E48  3000               	movlw	0
  7410     0E49  00BD               	movwf	_seconds+1
  7411     0E4A  3000               	movlw	0
  7412     0E4B  00BC               	movwf	_seconds
  7413     0E4C                     i1l2883:
  7414                           
  7415                           ;main.c: 835:                 UART_TxString(packet, 0);
  7416     0E4C  01B3               	clrf	i1UART_TxString@is_ACK
  7417     0E4D  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  7418     0E4E  120A  158A  241F  120A  158A  	fcall	i1_UART_TxString
  7419     0E53                     i1l2885:
  7420                           
  7421                           ;main.c: 838:         T0IF = 0;
  7422     0E53  110B               	bcf	11,2	;volatile
  7423     0E54                     i1l328:
  7424     0E54  1283               	bcf	3,5	;RP0=0, select bank0
  7425     0E55  1303               	bcf	3,6	;RP1=0, select bank0
  7426     0E56  083B               	movf	??_IRS+3,w
  7427     0E57  008A               	movwf	10
  7428     0E58  083A               	movf	??_IRS+2,w
  7429     0E59  0084               	movwf	4
  7430     0E5A  0E39               	swapf	??_IRS+1,w
  7431     0E5B  0083               	movwf	3
  7432     0E5C  0EFE               	swapf	btemp,f
  7433     0E5D  0E7E               	swapf	btemp,w
  7434     0E5E  0009               	retfie
  7435     0E5F                     __end_of_IRS:
  7436                           
  7437                           	psect	intentry
  7438     0004                     __pintentry:	
  7439                           ;incstack = 0
  7440                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7441                           
  7442     0004                     interrupt_function:
  7443     007E                     saved_w	set	btemp
  7444     0004  00FE               	movwf	btemp
  7445     0005  0E03               	swapf	3,w
  7446     0006  1283               	bcf	3,5	;RP0=0, select bank0
  7447     0007  1303               	bcf	3,6	;RP1=0, select bank0
  7448     0008  00B9               	movwf	??_IRS+1
  7449     0009  0804               	movf	4,w
  7450     000A  00BA               	movwf	??_IRS+2
  7451     000B  080A               	movf	10,w
  7452     000C  00BB               	movwf	??_IRS+3
  7453     000D  120A  158A  2DE7   	ljmp	_IRS
  7454                           
  7455                           	psect	text30
  7456     0C1F                     __ptext30:	
  7457 ;; *************** function i1_UART_TxString *****************
  7458 ;; Defined at:
  7459 ;;		line 787 in file "main.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  str             1    wreg     PTR const unsigned char 
  7462 ;;		 -> packet(15), 
  7463 ;;  is_ACK          1   19[BANK0 ] unsigned char 
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  str             1   21[BANK0 ] PTR const unsigned char 
  7466 ;;		 -> packet(15), 
  7467 ;;  n               2   22[BANK0 ] unsigned int 
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      void 
  7470 ;; Registers used:
  7471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7472 ;; Tracked objects:
  7473 ;;		On entry : 0/0
  7474 ;;		On exit  : 0/0
  7475 ;;		Unchanged: 0/0
  7476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7477 ;;      Params:         0       1       0       0       0
  7478 ;;      Locals:         0       3       0       0       0
  7479 ;;      Temps:          0       1       0       0       0
  7480 ;;      Totals:         0       5       0       0       0
  7481 ;;Total ram usage:        5 bytes
  7482 ;; Hardware stack levels used: 1
  7483 ;; Hardware stack levels required when called: 2
  7484 ;; This function calls:
  7485 ;;		i1_UART_TxChar
  7486 ;;		i1___awmod
  7487 ;;		i1___wmul
  7488 ;;		i1_rand
  7489 ;;		i1_srand
  7490 ;; This function is called by:
  7491 ;;		_IRS
  7492 ;; This function uses a non-reentrant model
  7493 ;;
  7494                           
  7495     0C1F                     i1_UART_TxString:	
  7496                           ;psect for function i1_UART_TxString
  7497                           
  7498                           
  7499                           ;incstack = 0
  7500                           ; Regs used in i1_UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7501                           ;i1UART_TxString@str stored from wreg
  7502     0C1F  1283               	bcf	3,5	;RP0=0, select bank0
  7503     0C20  1303               	bcf	3,6	;RP1=0, select bank0
  7504     0C21  00B5               	movwf	i1UART_TxString@str
  7505     0C22                     i1l2625:
  7506                           
  7507                           ;main.c: 787: void UART_TxString(const char *str, char is_ACK);main.c: 788: {;main.c: 78
      +                          9:     unsigned int n = 0;
  7508     0C22  01B6               	clrf	i1UART_TxString@n
  7509     0C23  01B7               	clrf	i1UART_TxString@n+1
  7510                           
  7511                           ;main.c: 791:     while(str[n] != '\0')
  7512     0C24  2C38               	goto	i1l2631
  7513     0C25                     i1l2627:
  7514                           
  7515                           ;main.c: 792:     {;main.c: 793:         UART_TxChar(str[n]);
  7516     0C25  0836               	movf	i1UART_TxString@n,w
  7517     0C26  0735               	addwf	i1UART_TxString@str,w
  7518     0C27  00B4               	movwf	??i1_UART_TxString
  7519     0C28  0834               	movf	??i1_UART_TxString,w
  7520     0C29  0084               	movwf	4
  7521     0C2A  0800               	movf	0,w
  7522     0C2B  160A  118A  2630  120A  158A  	fcall	i1_UART_TxChar
  7523     0C30                     i1l2629:
  7524                           
  7525                           ;main.c: 794:         n++;
  7526     0C30  3001               	movlw	1
  7527     0C31  1283               	bcf	3,5	;RP0=0, select bank0
  7528     0C32  1303               	bcf	3,6	;RP1=0, select bank0
  7529     0C33  07B6               	addwf	i1UART_TxString@n,f
  7530     0C34  1803               	skipnc
  7531     0C35  0AB7               	incf	i1UART_TxString@n+1,f
  7532     0C36  3000               	movlw	0
  7533     0C37  07B7               	addwf	i1UART_TxString@n+1,f
  7534     0C38                     i1l2631:
  7535                           
  7536                           ;main.c: 791:     while(str[n] != '\0')
  7537     0C38  0836               	movf	i1UART_TxString@n,w
  7538     0C39  0735               	addwf	i1UART_TxString@str,w
  7539     0C3A  00B4               	movwf	??i1_UART_TxString
  7540     0C3B  0834               	movf	??i1_UART_TxString,w
  7541     0C3C  0084               	movwf	4
  7542     0C3D  1783               	bsf	3,7	;select IRP bank2
  7543     0C3E  0800               	movf	0,w
  7544     0C3F  1D03               	btfss	3,2
  7545     0C40  2C42               	goto	u255_21
  7546     0C41  2C43               	goto	u255_20
  7547     0C42                     u255_21:
  7548     0C42  2C25               	goto	i1l2627
  7549     0C43                     u255_20:
  7550     0C43                     i1l2633:
  7551                           
  7552                           ;main.c: 797:     if(is_ACK == 0)
  7553     0C43  0833               	movf	i1UART_TxString@is_ACK,w
  7554     0C44  1D03               	btfss	3,2
  7555     0C45  2C47               	goto	u256_21
  7556     0C46  2C48               	goto	u256_20
  7557     0C47                     u256_21:
  7558     0C47  2C8D               	goto	i1l318
  7559     0C48                     u256_20:
  7560     0C48                     i1l2635:
  7561                           
  7562                           ;main.c: 798:     {;main.c: 801:         srand(milliseconds);
  7563     0C48  0841               	movf	_milliseconds+1,w
  7564     0C49  00F1               	movwf	i1srand@x+1
  7565     0C4A  0840               	movf	_milliseconds,w
  7566     0C4B  00F0               	movwf	i1srand@x
  7567     0C4C  160A  118A  261C  120A  158A  	fcall	i1_srand
  7568     0C51                     i1l2637:
  7569                           
  7570                           ;main.c: 802:         milliseconds = 0;
  7571     0C51  3000               	movlw	0
  7572     0C52  1283               	bcf	3,5	;RP0=0, select bank0
  7573     0C53  1303               	bcf	3,6	;RP1=0, select bank0
  7574     0C54  00C3               	movwf	_milliseconds+3
  7575     0C55  3000               	movlw	0
  7576     0C56  00C2               	movwf	_milliseconds+2
  7577     0C57  3000               	movlw	0
  7578     0C58  00C1               	movwf	_milliseconds+1
  7579     0C59  3000               	movlw	0
  7580     0C5A  00C0               	movwf	_milliseconds
  7581     0C5B                     i1l2639:
  7582                           
  7583                           ;main.c: 804:         seconds = ((rand()%10)+5) * 250;
  7584     0C5B  300A               	movlw	10
  7585     0C5C  00A7               	movwf	i1___awmod@divisor
  7586     0C5D  3000               	movlw	0
  7587     0C5E  00A8               	movwf	i1___awmod@divisor+1
  7588     0C5F  120A  158A  211E  120A  158A  	fcall	i1_rand
  7589     0C64  1283               	bcf	3,5	;RP0=0, select bank0
  7590     0C65  1303               	bcf	3,6	;RP1=0, select bank0
  7591     0C66  0821               	movf	?i1_rand+1,w
  7592     0C67  00AA               	movwf	i1___awmod@dividend+1
  7593     0C68  0820               	movf	?i1_rand,w
  7594     0C69  00A9               	movwf	i1___awmod@dividend
  7595     0C6A  120A  158A  22A4  120A  158A  	fcall	i1___awmod
  7596     0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  7597     0C70  1303               	bcf	3,6	;RP1=0, select bank0
  7598     0C71  0827               	movf	?i1___awmod,w
  7599     0C72  3E05               	addlw	5
  7600     0C73  00AD               	movwf	i1___wmul@multiplier
  7601     0C74  0828               	movf	?i1___awmod+1,w
  7602     0C75  1803               	skipnc
  7603     0C76  3E01               	addlw	1
  7604     0C77  3E00               	addlw	0
  7605     0C78  00AE               	movwf	i1___wmul@multiplier+1
  7606     0C79  30FA               	movlw	250
  7607     0C7A  00AF               	movwf	i1___wmul@multiplicand
  7608     0C7B  3000               	movlw	0
  7609     0C7C  00B0               	movwf	i1___wmul@multiplicand+1
  7610     0C7D  160A  118A  2698  120A  158A  	fcall	i1___wmul
  7611     0C82  1283               	bcf	3,5	;RP0=0, select bank0
  7612     0C83  1303               	bcf	3,6	;RP1=0, select bank0
  7613     0C84  082D               	movf	?i1___wmul,w
  7614     0C85  00BC               	movwf	_seconds
  7615     0C86  082E               	movf	?i1___wmul+1,w
  7616     0C87  00BD               	movwf	_seconds+1
  7617     0C88  3000               	movlw	0
  7618     0C89  1BBD               	btfsc	_seconds+1,7
  7619     0C8A  30FF               	movlw	255
  7620     0C8B  00BE               	movwf	_seconds+2
  7621     0C8C  00BF               	movwf	_seconds+3
  7622     0C8D                     i1l318:
  7623     0C8D  0008               	return
  7624     0C8E                     __end_ofi1_UART_TxString:
  7625                           
  7626                           	psect	text31
  7627     161C                     __ptext31:	
  7628 ;; *************** function i1_srand *****************
  7629 ;; Defined at:
  7630 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  x               2    0[COMMON] unsigned int 
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7644 ;;      Params:         2       0       0       0       0
  7645 ;;      Locals:         0       0       0       0       0
  7646 ;;      Temps:          0       0       0       0       0
  7647 ;;      Totals:         2       0       0       0       0
  7648 ;;Total ram usage:        2 bytes
  7649 ;; Hardware stack levels used: 1
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		i1_UART_TxString
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657     161C                     i1_srand:	
  7658                           ;psect for function i1_srand
  7659                           
  7660     161C                     i1l2405:	
  7661                           ;incstack = 0
  7662                           ; Regs used in i1_srand: [wreg]
  7663                           
  7664     161C  0870               	movf	i1srand@x,w
  7665     161D  1283               	bcf	3,5	;RP0=0, select bank0
  7666     161E  1303               	bcf	3,6	;RP1=0, select bank0
  7667     161F  00D3               	movwf	_randx
  7668     1620  0871               	movf	i1srand@x+1,w
  7669     1621  00D4               	movwf	_randx+1
  7670     1622  01D5               	clrf	_randx+2
  7671     1623  01D6               	clrf	_randx+3
  7672     1624                     i1l904:
  7673     1624  0008               	return
  7674     1625                     __end_ofi1_srand:
  7675                           
  7676                           	psect	text32
  7677     091E                     __ptext32:	
  7678 ;; *************** function i1_rand *****************
  7679 ;; Defined at:
  7680 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;		None
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;		None
  7685 ;; Return value:  Size  Location     Type
  7686 ;;                  2    0[BANK0 ] int 
  7687 ;; Registers used:
  7688 ;;		wreg, status,2, status,0, pclath, cstack
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7694 ;;      Params:         0       2       0       0       0
  7695 ;;      Locals:         0       0       0       0       0
  7696 ;;      Temps:          0       5       0       0       0
  7697 ;;      Totals:         0       7       0       0       0
  7698 ;;Total ram usage:        7 bytes
  7699 ;; Hardware stack levels used: 1
  7700 ;; Hardware stack levels required when called: 1
  7701 ;; This function calls:
  7702 ;;		i1___lmul
  7703 ;; This function is called by:
  7704 ;;		i1_UART_TxString
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708     091E                     i1_rand:	
  7709                           ;psect for function i1_rand
  7710                           
  7711     091E                     i1l2407:	
  7712                           ;incstack = 0
  7713                           ; Regs used in i1_rand: [wreg+status,2+status,0+pclath+cstack]
  7714                           
  7715     091E  1283               	bcf	3,5	;RP0=0, select bank0
  7716     091F  1303               	bcf	3,6	;RP1=0, select bank0
  7717     0920  0856               	movf	_randx+3,w
  7718     0921  00F3               	movwf	i1___lmul@multiplier+3
  7719     0922  0855               	movf	_randx+2,w
  7720     0923  00F2               	movwf	i1___lmul@multiplier+2
  7721     0924  0854               	movf	_randx+1,w
  7722     0925  00F1               	movwf	i1___lmul@multiplier+1
  7723     0926  0853               	movf	_randx,w
  7724     0927  00F0               	movwf	i1___lmul@multiplier
  7725     0928  3041               	movlw	65
  7726     0929  00F7               	movwf	i1___lmul@multiplicand+3
  7727     092A  30C6               	movlw	198
  7728     092B  00F6               	movwf	i1___lmul@multiplicand+2
  7729     092C  304E               	movlw	78
  7730     092D  00F5               	movwf	i1___lmul@multiplicand+1
  7731     092E  306D               	movlw	109
  7732     092F  00F4               	movwf	i1___lmul@multiplicand
  7733     0930  160A  118A  27BA  120A  158A  	fcall	i1___lmul
  7734     0935  0873               	movf	?i1___lmul+3,w
  7735     0936  1283               	bcf	3,5	;RP0=0, select bank0
  7736     0937  1303               	bcf	3,6	;RP1=0, select bank0
  7737     0938  00D6               	movwf	_randx+3
  7738     0939  0872               	movf	?i1___lmul+2,w
  7739     093A  00D5               	movwf	_randx+2
  7740     093B  0871               	movf	?i1___lmul+1,w
  7741     093C  00D4               	movwf	_randx+1
  7742     093D  0870               	movf	?i1___lmul,w
  7743     093E  00D3               	movwf	_randx
  7744     093F                     i1l2409:
  7745     093F  3039               	movlw	57
  7746     0940  07D3               	addwf	_randx,f
  7747     0941  3030               	movlw	48
  7748     0942  1803               	skipnc
  7749     0943  3031               	movlw	49
  7750     0944  07D4               	addwf	_randx+1,f
  7751     0945  3000               	movlw	0
  7752     0946  1803               	skipnc
  7753     0947  3001               	movlw	1
  7754     0948  07D5               	addwf	_randx+2,f
  7755     0949  3000               	movlw	0
  7756     094A  1803               	skipnc
  7757     094B  3001               	movlw	1
  7758     094C  07D6               	addwf	_randx+3,f
  7759     094D                     i1l2411:
  7760     094D  0853               	movf	_randx,w
  7761     094E  00A2               	movwf	??i1_rand
  7762     094F  0854               	movf	_randx+1,w
  7763     0950  00A3               	movwf	??i1_rand+1
  7764     0951  0855               	movf	_randx+2,w
  7765     0952  00A4               	movwf	??i1_rand+2
  7766     0953  0856               	movf	_randx+3,w
  7767     0954  00A5               	movwf	??i1_rand+3
  7768     0955  3010               	movlw	16
  7769     0956  00A6               	movwf	??i1_rand+4
  7770     0957                     u222_25:
  7771     0957  0D25               	rlf	??i1_rand+3,w
  7772     0958  0CA5               	rrf	??i1_rand+3,f
  7773     0959  0CA4               	rrf	??i1_rand+2,f
  7774     095A  0CA3               	rrf	??i1_rand+1,f
  7775     095B  0CA2               	rrf	??i1_rand,f
  7776     095C                     u222_20:
  7777     095C  0BA6               	decfsz	??i1_rand+4,f
  7778     095D  2957               	goto	u222_25
  7779     095E  30FF               	movlw	255
  7780     095F  0522               	andwf	??i1_rand,w
  7781     0960  00A0               	movwf	?i1_rand
  7782     0961  307F               	movlw	127
  7783     0962  0523               	andwf	??i1_rand+1,w
  7784     0963  00A1               	movwf	?i1_rand+1
  7785     0964                     i1l907:
  7786     0964  0008               	return
  7787     0965                     __end_ofi1_rand:
  7788                           
  7789                           	psect	text33
  7790     17BA                     __ptext33:	
  7791 ;; *************** function i1___lmul *****************
  7792 ;; Defined at:
  7793 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  multiplier      4    0[COMMON] unsigned long 
  7796 ;;  multiplicand    4    4[COMMON] unsigned long 
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;  product         4    9[COMMON] unsigned long 
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  4    0[COMMON] unsigned long 
  7801 ;; Registers used:
  7802 ;;		wreg, status,2, status,0
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7808 ;;      Params:         8       0       0       0       0
  7809 ;;      Locals:         4       0       0       0       0
  7810 ;;      Temps:          1       0       0       0       0
  7811 ;;      Totals:        13       0       0       0       0
  7812 ;;Total ram usage:       13 bytes
  7813 ;; Hardware stack levels used: 1
  7814 ;; This function calls:
  7815 ;;		Nothing
  7816 ;; This function is called by:
  7817 ;;		i1_rand
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821     17BA                     i1___lmul:	
  7822                           ;psect for function i1___lmul
  7823                           
  7824     17BA                     i1l2095:	
  7825                           ;incstack = 0
  7826                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  7827                           
  7828     17BA  3000               	movlw	0
  7829     17BB  00FC               	movwf	i1___lmul@product+3
  7830     17BC  3000               	movlw	0
  7831     17BD  00FB               	movwf	i1___lmul@product+2
  7832     17BE  3000               	movlw	0
  7833     17BF  00FA               	movwf	i1___lmul@product+1
  7834     17C0  3000               	movlw	0
  7835     17C1  00F9               	movwf	i1___lmul@product
  7836     17C2                     i1l2097:
  7837     17C2  1C70               	btfss	i1___lmul@multiplier,0
  7838     17C3  2FC5               	goto	u173_21
  7839     17C4  2FC6               	goto	u173_20
  7840     17C5                     u173_21:
  7841     17C5  2FDD               	goto	i1l2101
  7842     17C6                     u173_20:
  7843     17C6                     i1l2099:
  7844     17C6  0874               	movf	i1___lmul@multiplicand,w
  7845     17C7  07F9               	addwf	i1___lmul@product,f
  7846     17C8  0875               	movf	i1___lmul@multiplicand+1,w
  7847     17C9  1103               	clrz
  7848     17CA  1803               	skipnc
  7849     17CB  3E01               	addlw	1
  7850     17CC  1903               	skipnz
  7851     17CD  2FCF               	goto	u174_21
  7852     17CE  07FA               	addwf	i1___lmul@product+1,f
  7853     17CF                     u174_21:
  7854     17CF  0876               	movf	i1___lmul@multiplicand+2,w
  7855     17D0  1103               	clrz
  7856     17D1  1803               	skipnc
  7857     17D2  3E01               	addlw	1
  7858     17D3  1903               	skipnz
  7859     17D4  2FD6               	goto	u174_22
  7860     17D5  07FB               	addwf	i1___lmul@product+2,f
  7861     17D6                     u174_22:
  7862     17D6  0877               	movf	i1___lmul@multiplicand+3,w
  7863     17D7  1103               	clrz
  7864     17D8  1803               	skipnc
  7865     17D9  3E01               	addlw	1
  7866     17DA  1903               	skipnz
  7867     17DB  2FDD               	goto	u174_23
  7868     17DC  07FC               	addwf	i1___lmul@product+3,f
  7869     17DD                     u174_23:
  7870     17DD                     i1l2101:
  7871     17DD  3001               	movlw	1
  7872     17DE  00F8               	movwf	??i1___lmul
  7873     17DF                     u175_25:
  7874     17DF  1003               	clrc
  7875     17E0  0DF4               	rlf	i1___lmul@multiplicand,f
  7876     17E1  0DF5               	rlf	i1___lmul@multiplicand+1,f
  7877     17E2  0DF6               	rlf	i1___lmul@multiplicand+2,f
  7878     17E3  0DF7               	rlf	i1___lmul@multiplicand+3,f
  7879     17E4  0BF8               	decfsz	??i1___lmul,f
  7880     17E5  2FDF               	goto	u175_25
  7881     17E6                     i1l2103:
  7882     17E6  3001               	movlw	1
  7883     17E7                     u176_25:
  7884     17E7  1003               	clrc
  7885     17E8  0CF3               	rrf	i1___lmul@multiplier+3,f
  7886     17E9  0CF2               	rrf	i1___lmul@multiplier+2,f
  7887     17EA  0CF1               	rrf	i1___lmul@multiplier+1,f
  7888     17EB  0CF0               	rrf	i1___lmul@multiplier,f
  7889     17EC  3EFF               	addlw	-1
  7890     17ED  1D03               	skipz
  7891     17EE  2FE7               	goto	u176_25
  7892     17EF  0873               	movf	i1___lmul@multiplier+3,w
  7893     17F0  0472               	iorwf	i1___lmul@multiplier+2,w
  7894     17F1  0471               	iorwf	i1___lmul@multiplier+1,w
  7895     17F2  0470               	iorwf	i1___lmul@multiplier,w
  7896     17F3  1D03               	skipz
  7897     17F4  2FF6               	goto	u177_21
  7898     17F5  2FF7               	goto	u177_20
  7899     17F6                     u177_21:
  7900     17F6  2FC2               	goto	i1l2097
  7901     17F7                     u177_20:
  7902     17F7                     i1l2105:
  7903     17F7  087C               	movf	i1___lmul@product+3,w
  7904     17F8  00F3               	movwf	?i1___lmul+3
  7905     17F9  087B               	movf	i1___lmul@product+2,w
  7906     17FA  00F2               	movwf	?i1___lmul+2
  7907     17FB  087A               	movf	i1___lmul@product+1,w
  7908     17FC  00F1               	movwf	?i1___lmul+1
  7909     17FD  0879               	movf	i1___lmul@product,w
  7910     17FE  00F0               	movwf	?i1___lmul
  7911     17FF                     i1l465:
  7912     17FF  0008               	return
  7913     1800                     __end_ofi1___lmul:
  7914                           
  7915                           	psect	text34
  7916     1698                     __ptext34:	
  7917 ;; *************** function i1___wmul *****************
  7918 ;; Defined at:
  7919 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  multiplier      2   13[BANK0 ] unsigned int 
  7922 ;;  multiplicand    2   15[BANK0 ] unsigned int 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  product         2   17[BANK0 ] unsigned int 
  7925 ;; Return value:  Size  Location     Type
  7926 ;;                  2   13[BANK0 ] unsigned int 
  7927 ;; Registers used:
  7928 ;;		wreg, status,2, status,0
  7929 ;; Tracked objects:
  7930 ;;		On entry : 0/0
  7931 ;;		On exit  : 0/0
  7932 ;;		Unchanged: 0/0
  7933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7934 ;;      Params:         0       4       0       0       0
  7935 ;;      Locals:         0       2       0       0       0
  7936 ;;      Temps:          0       0       0       0       0
  7937 ;;      Totals:         0       6       0       0       0
  7938 ;;Total ram usage:        6 bytes
  7939 ;; Hardware stack levels used: 1
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		i1_UART_TxString
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947     1698                     i1___wmul:	
  7948                           ;psect for function i1___wmul
  7949                           
  7950     1698                     i1l2353:	
  7951                           ;incstack = 0
  7952                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  7953                           
  7954     1698  1283               	bcf	3,5	;RP0=0, select bank0
  7955     1699  1303               	bcf	3,6	;RP1=0, select bank0
  7956     169A  01B1               	clrf	i1___wmul@product
  7957     169B  01B2               	clrf	i1___wmul@product+1
  7958     169C                     i1l2355:
  7959     169C  1C2D               	btfss	i1___wmul@multiplier,0
  7960     169D  2E9F               	goto	u209_21
  7961     169E  2EA0               	goto	u209_20
  7962     169F                     u209_21:
  7963     169F  2EA6               	goto	i1l451
  7964     16A0                     u209_20:
  7965     16A0                     i1l2357:
  7966     16A0  082F               	movf	i1___wmul@multiplicand,w
  7967     16A1  07B1               	addwf	i1___wmul@product,f
  7968     16A2  1803               	skipnc
  7969     16A3  0AB2               	incf	i1___wmul@product+1,f
  7970     16A4  0830               	movf	i1___wmul@multiplicand+1,w
  7971     16A5  07B2               	addwf	i1___wmul@product+1,f
  7972     16A6                     i1l451:
  7973     16A6  3001               	movlw	1
  7974     16A7                     u210_25:
  7975     16A7  1003               	clrc
  7976     16A8  0DAF               	rlf	i1___wmul@multiplicand,f
  7977     16A9  0DB0               	rlf	i1___wmul@multiplicand+1,f
  7978     16AA  3EFF               	addlw	-1
  7979     16AB  1D03               	skipz
  7980     16AC  2EA7               	goto	u210_25
  7981     16AD                     i1l2359:
  7982     16AD  3001               	movlw	1
  7983     16AE                     u211_25:
  7984     16AE  1003               	clrc
  7985     16AF  0CAE               	rrf	i1___wmul@multiplier+1,f
  7986     16B0  0CAD               	rrf	i1___wmul@multiplier,f
  7987     16B1  3EFF               	addlw	-1
  7988     16B2  1D03               	skipz
  7989     16B3  2EAE               	goto	u211_25
  7990     16B4                     i1l2361:
  7991     16B4  082D               	movf	i1___wmul@multiplier,w
  7992     16B5  042E               	iorwf	i1___wmul@multiplier+1,w
  7993     16B6  1D03               	btfss	3,2
  7994     16B7  2EB9               	goto	u212_21
  7995     16B8  2EBA               	goto	u212_20
  7996     16B9                     u212_21:
  7997     16B9  2E9C               	goto	i1l2355
  7998     16BA                     u212_20:
  7999     16BA                     i1l2363:
  8000     16BA  0832               	movf	i1___wmul@product+1,w
  8001     16BB  00AE               	movwf	?i1___wmul+1
  8002     16BC  0831               	movf	i1___wmul@product,w
  8003     16BD  00AD               	movwf	?i1___wmul
  8004     16BE                     i1l453:
  8005     16BE  0008               	return
  8006     16BF                     __end_ofi1___wmul:
  8007                           
  8008                           	psect	text35
  8009     0AA4                     __ptext35:	
  8010 ;; *************** function i1___awmod *****************
  8011 ;; Defined at:
  8012 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;  divisor         2    7[BANK0 ] int 
  8015 ;;  dividend        2    9[BANK0 ] int 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  sign            1   12[BANK0 ] unsigned char 
  8018 ;;  counter         1   11[BANK0 ] unsigned char 
  8019 ;; Return value:  Size  Location     Type
  8020 ;;                  2    7[BANK0 ] int 
  8021 ;; Registers used:
  8022 ;;		wreg, status,2, status,0
  8023 ;; Tracked objects:
  8024 ;;		On entry : 0/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8028 ;;      Params:         0       4       0       0       0
  8029 ;;      Locals:         0       2       0       0       0
  8030 ;;      Temps:          1       0       0       0       0
  8031 ;;      Totals:         1       6       0       0       0
  8032 ;;Total ram usage:        7 bytes
  8033 ;; Hardware stack levels used: 1
  8034 ;; This function calls:
  8035 ;;		Nothing
  8036 ;; This function is called by:
  8037 ;;		i1_UART_TxString
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041     0AA4                     i1___awmod:	
  8042                           ;psect for function i1___awmod
  8043                           
  8044     0AA4                     i1l2367:	
  8045                           ;incstack = 0
  8046                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  8047                           
  8048     0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  8049     0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  8050     0AA6  01AC               	clrf	i1___awmod@sign
  8051     0AA7                     i1l2369:
  8052     0AA7  1FAA               	btfss	i1___awmod@dividend+1,7
  8053     0AA8  2AAA               	goto	u213_21
  8054     0AA9  2AAB               	goto	u213_20
  8055     0AAA                     u213_21:
  8056     0AAA  2AB2               	goto	i1l2375
  8057     0AAB                     u213_20:
  8058     0AAB                     i1l2371:
  8059     0AAB  09A9               	comf	i1___awmod@dividend,f
  8060     0AAC  09AA               	comf	i1___awmod@dividend+1,f
  8061     0AAD  0AA9               	incf	i1___awmod@dividend,f
  8062     0AAE  1903               	skipnz
  8063     0AAF  0AAA               	incf	i1___awmod@dividend+1,f
  8064     0AB0                     i1l2373:
  8065     0AB0  01AC               	clrf	i1___awmod@sign
  8066     0AB1  0AAC               	incf	i1___awmod@sign,f
  8067     0AB2                     i1l2375:
  8068     0AB2  1FA8               	btfss	i1___awmod@divisor+1,7
  8069     0AB3  2AB5               	goto	u214_21
  8070     0AB4  2AB6               	goto	u214_20
  8071     0AB5                     u214_21:
  8072     0AB5  2ABB               	goto	i1l2379
  8073     0AB6                     u214_20:
  8074     0AB6                     i1l2377:
  8075     0AB6  09A7               	comf	i1___awmod@divisor,f
  8076     0AB7  09A8               	comf	i1___awmod@divisor+1,f
  8077     0AB8  0AA7               	incf	i1___awmod@divisor,f
  8078     0AB9  1903               	skipnz
  8079     0ABA  0AA8               	incf	i1___awmod@divisor+1,f
  8080     0ABB                     i1l2379:
  8081     0ABB  0827               	movf	i1___awmod@divisor,w
  8082     0ABC  0428               	iorwf	i1___awmod@divisor+1,w
  8083     0ABD  1903               	btfsc	3,2
  8084     0ABE  2AC0               	goto	u215_21
  8085     0ABF  2AC1               	goto	u215_20
  8086     0AC0                     u215_21:
  8087     0AC0  2AF0               	goto	i1l2397
  8088     0AC1                     u215_20:
  8089     0AC1                     i1l2381:
  8090     0AC1  01AB               	clrf	i1___awmod@counter
  8091     0AC2  0AAB               	incf	i1___awmod@counter,f
  8092     0AC3  2ACF               	goto	i1l2387
  8093     0AC4                     i1l2383:
  8094     0AC4  3001               	movlw	1
  8095     0AC5                     u216_25:
  8096     0AC5  1003               	clrc
  8097     0AC6  0DA7               	rlf	i1___awmod@divisor,f
  8098     0AC7  0DA8               	rlf	i1___awmod@divisor+1,f
  8099     0AC8  3EFF               	addlw	-1
  8100     0AC9  1D03               	skipz
  8101     0ACA  2AC5               	goto	u216_25
  8102     0ACB                     i1l2385:
  8103     0ACB  3001               	movlw	1
  8104     0ACC  00FD               	movwf	??i1___awmod
  8105     0ACD  087D               	movf	??i1___awmod,w
  8106     0ACE  07AB               	addwf	i1___awmod@counter,f
  8107     0ACF                     i1l2387:
  8108     0ACF  1FA8               	btfss	i1___awmod@divisor+1,7
  8109     0AD0  2AD2               	goto	u217_21
  8110     0AD1  2AD3               	goto	u217_20
  8111     0AD2                     u217_21:
  8112     0AD2  2AC4               	goto	i1l2383
  8113     0AD3                     u217_20:
  8114     0AD3                     i1l2389:
  8115     0AD3  0828               	movf	i1___awmod@divisor+1,w
  8116     0AD4  022A               	subwf	i1___awmod@dividend+1,w
  8117     0AD5  1D03               	skipz
  8118     0AD6  2AD9               	goto	u218_25
  8119     0AD7  0827               	movf	i1___awmod@divisor,w
  8120     0AD8  0229               	subwf	i1___awmod@dividend,w
  8121     0AD9                     u218_25:
  8122     0AD9  1C03               	skipc
  8123     0ADA  2ADC               	goto	u218_21
  8124     0ADB  2ADD               	goto	u218_20
  8125     0ADC                     u218_21:
  8126     0ADC  2AE3               	goto	i1l2393
  8127     0ADD                     u218_20:
  8128     0ADD                     i1l2391:
  8129     0ADD  0827               	movf	i1___awmod@divisor,w
  8130     0ADE  02A9               	subwf	i1___awmod@dividend,f
  8131     0ADF  0828               	movf	i1___awmod@divisor+1,w
  8132     0AE0  1C03               	skipc
  8133     0AE1  03AA               	decf	i1___awmod@dividend+1,f
  8134     0AE2  02AA               	subwf	i1___awmod@dividend+1,f
  8135     0AE3                     i1l2393:
  8136     0AE3  3001               	movlw	1
  8137     0AE4                     u219_25:
  8138     0AE4  1003               	clrc
  8139     0AE5  0CA8               	rrf	i1___awmod@divisor+1,f
  8140     0AE6  0CA7               	rrf	i1___awmod@divisor,f
  8141     0AE7  3EFF               	addlw	-1
  8142     0AE8  1D03               	skipz
  8143     0AE9  2AE4               	goto	u219_25
  8144     0AEA                     i1l2395:
  8145     0AEA  3001               	movlw	1
  8146     0AEB  02AB               	subwf	i1___awmod@counter,f
  8147     0AEC  1D03               	btfss	3,2
  8148     0AED  2AEF               	goto	u220_21
  8149     0AEE  2AF0               	goto	u220_20
  8150     0AEF                     u220_21:
  8151     0AEF  2AD3               	goto	i1l2389
  8152     0AF0                     u220_20:
  8153     0AF0                     i1l2397:
  8154     0AF0  082C               	movf	i1___awmod@sign,w
  8155     0AF1  1903               	btfsc	3,2
  8156     0AF2  2AF4               	goto	u221_21
  8157     0AF3  2AF5               	goto	u221_20
  8158     0AF4                     u221_21:
  8159     0AF4  2AFA               	goto	i1l2401
  8160     0AF5                     u221_20:
  8161     0AF5                     i1l2399:
  8162     0AF5  09A9               	comf	i1___awmod@dividend,f
  8163     0AF6  09AA               	comf	i1___awmod@dividend+1,f
  8164     0AF7  0AA9               	incf	i1___awmod@dividend,f
  8165     0AF8  1903               	skipnz
  8166     0AF9  0AAA               	incf	i1___awmod@dividend+1,f
  8167     0AFA                     i1l2401:
  8168     0AFA  082A               	movf	i1___awmod@dividend+1,w
  8169     0AFB  00A8               	movwf	?i1___awmod+1
  8170     0AFC  0829               	movf	i1___awmod@dividend,w
  8171     0AFD  00A7               	movwf	?i1___awmod
  8172     0AFE                     i1l617:
  8173     0AFE  0008               	return
  8174     0AFF                     __end_ofi1___awmod:
  8175                           
  8176                           	psect	text36
  8177     1630                     __ptext36:	
  8178 ;; *************** function i1_UART_TxChar *****************
  8179 ;; Defined at:
  8180 ;;		line 777 in file "main.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  ch              1    wreg     unsigned char 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  ch              1    1[COMMON] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      void 
  8187 ;; Registers used:
  8188 ;;		wreg, status,2, status,0
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8194 ;;      Params:         0       0       0       0       0
  8195 ;;      Locals:         1       0       0       0       0
  8196 ;;      Temps:          1       0       0       0       0
  8197 ;;      Totals:         2       0       0       0       0
  8198 ;;Total ram usage:        2 bytes
  8199 ;; Hardware stack levels used: 1
  8200 ;; This function calls:
  8201 ;;		Nothing
  8202 ;; This function is called by:
  8203 ;;		i1_UART_TxString
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207     1630                     i1_UART_TxChar:	
  8208                           ;psect for function i1_UART_TxChar
  8209                           
  8210                           
  8211                           ;incstack = 0
  8212                           ; Regs used in i1_UART_TxChar: [wreg+status,2+status,0]
  8213                           ;i1UART_TxChar@ch stored from wreg
  8214     1630  00F1               	movwf	i1UART_TxChar@ch
  8215     1631                     i1l2347:
  8216     1631                     i1l308:	
  8217                           ;main.c: 777: void UART_TxChar(char ch);main.c: 778: {;main.c: 780:     while(!(PIR1 & 0
      +                          x10));
  8218                           
  8219     1631  1283               	bcf	3,5	;RP0=0, select bank0
  8220     1632  1303               	bcf	3,6	;RP1=0, select bank0
  8221     1633  1E0C               	btfss	12,4	;volatile
  8222     1634  2E36               	goto	u208_21
  8223     1635  2E37               	goto	u208_20
  8224     1636                     u208_21:
  8225     1636  2E31               	goto	i1l308
  8226     1637                     u208_20:
  8227     1637                     i1l2349:
  8228                           
  8229                           ;main.c: 782:     PIR1 &= ~0x10;
  8230     1637  30EF               	movlw	239
  8231     1638  00F0               	movwf	??i1_UART_TxChar
  8232     1639  0870               	movf	??i1_UART_TxChar,w
  8233     163A  058C               	andwf	12,f	;volatile
  8234     163B                     i1l2351:
  8235                           
  8236                           ;main.c: 784:     TXREG = ch;
  8237     163B  0871               	movf	i1UART_TxChar@ch,w
  8238     163C  0099               	movwf	25	;volatile
  8239     163D                     i1l311:
  8240     163D  0008               	return
  8241     163E                     __end_ofi1_UART_TxChar:
  8242     007E                     btemp	set	126	;btemp
  8243     007E                     wtemp0	set	126
  8244                           
  8245                           	psect	idloc
  8246                           
  8247                           ;Config register IDLOC0 @ 0x2000
  8248                           ;	unspecified, using default values
  8249     2000                     	org	8192
  8250     2000  3FFF               	dw	16383
  8251                           
  8252                           ;Config register IDLOC1 @ 0x2001
  8253                           ;	unspecified, using default values
  8254     2001                     	org	8193
  8255     2001  3FFF               	dw	16383
  8256                           
  8257                           ;Config register IDLOC2 @ 0x2002
  8258                           ;	unspecified, using default values
  8259     2002                     	org	8194
  8260     2002  3FFF               	dw	16383
  8261                           
  8262                           ;Config register IDLOC3 @ 0x2003
  8263                           ;	unspecified, using default values
  8264     2003                     	org	8195
  8265     2003  3FFF               	dw	16383
  8266                           
  8267                           	psect	config
  8268                           
  8269                           ;Config register CONFIG @ 0x2007
  8270                           ;	Oscillator Selection bits
  8271                           ;	FOSC = HS, HS oscillator
  8272                           ;	Watchdog Timer Enable bit
  8273                           ;	WDTE = OFF, WDT disabled
  8274                           ;	Power-up Timer Enable bit
  8275                           ;	PWRTE = ON, PWRT enabled
  8276                           ;	Brown-out Reset Enable bit
  8277                           ;	BOREN = ON, BOR enabled
  8278                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  8279                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  8280                           ;	Data EEPROM Memory Code Protection bit
  8281                           ;	CPD = OFF, Data EEPROM code protection off
  8282                           ;	Flash Program Memory Write Enable bits
  8283                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  8284                           ;	In-Circuit Debugger Mode bit
  8285                           ;	DEBUG = 0x1, unprogrammed default
  8286                           ;	Flash Program Memory Code Protection bit
  8287                           ;	CP = OFF, Code protection off
  8288     2007                     	org	8199
  8289     2007  3FF2               	dw	16370

Data Sizes:
    Strings     207
    Constant    19
    Data        7
    BSS         139
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      55
    BANK1            80     66      80
    BANK3            96     27      82
    BANK2            96      0      50

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Fill@id	PTR unsigned char  size(1) Largest target is 4
		 -> PIC_ID(BANK0[4]), 

    CompareStrings@str2	PTR unsigned char  size(2) Largest target is 17
		 -> datoTastierino(BANK3[17]), PIC_ID(BANK0[4]), 

    CompareStrings@str1	PTR unsigned char  size(1) Largest target is 17
		 -> datoSeriale(BANK3[17]), id_dest(BANK3[4]), 

    strcopy@source	PTR unsigned char  size(1) Largest target is 5
		 -> SplitPacket@part(BANK1[5]), 

    strcopy@dest	PTR unsigned char  size(1) Largest target is 17
		 -> datoSeriale(BANK3[17]), id_dest(BANK3[4]), 

    SplitPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> dato(BANK2[50]), 

    strcat@source	PTR unsigned char  size(2) Largest target is 16
		 -> STR_16(CODE[4]), STR_12(CODE[4]), STR_8(CODE[2]), main@num_rand_s(BANK3[16]), 
		 -> PIC_ID(BANK0[4]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Length@str	PTR unsigned char  size(2) Largest target is 50
		 -> datoSeriale(BANK3[17]), datoTastierino(BANK3[17]), id_dest(BANK3[4]), dato(BANK2[50]), 
		 -> packet(BANK3[15]), PIC_ID(BANK0[4]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_16(CODE[4]), STR_12(CODE[4]), STR_8(CODE[2]), main@num_rand_s(BANK3[16]), 
		 -> PIC_ID(BANK0[4]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    ConvertToString@str	PTR unsigned char  size(2) Largest target is 16
		 -> main@num_rand_s(BANK3[16]), PIC_ID(BANK0[4]), 

    lcdPrint@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_19(CODE[17]), STR_18(CODE[16]), datoTastierino(BANK3[17]), STR_17(CODE[18]), 
		 -> STR_15(CODE[16]), STR_14(CODE[13]), STR_13(CODE[15]), STR_11(CODE[12]), 
		 -> STR_10(CODE[13]), STR_9(CODE[18]), main@num_rand_s(BANK3[16]), PIC_ID(BANK0[4]), 
		 -> STR_7(CODE[17]), STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[8]), 
		 -> STR_3(CODE[14]), STR_2(CODE[8]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IRS in COMMON

    i1_UART_TxString->i1___awmod
    i1_rand->i1___lmul
    i1___wmul->i1___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _IRS in BANK0

    _IRS->i1_UART_TxString
    i1_UART_TxString->i1___wmul
    i1___wmul->i1___awmod
    i1___awmod->i1_rand

Critical Paths under _main in BANK1

    _main->_ConvertToString
    _read_NumPad->___wmul
    _CompareStrings->_Length
    _init_PIC->_ConvertToString
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _Fill->_Length
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _UART_TxString->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _SplitPacket->_Length
    _SplitPacket->_strcopy
    _ConcatToPacket->_strcat
    _strcat->_Length

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_init_PIC
    _init_PIC->_ConvertToString

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   39581
                                             11 BANK3     16    16      0
                     _CompareStrings
                     _ConcatToPacket
                    _ConvertToString
                        _SplitPacket
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                         12    12      0    3504
                                             33 BANK1     12    12      0
                     _CompareStrings
                            ___awmod
                             ___wmul
                       _eeprom_write
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     152
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (2) _CompareStrings                                       8     6      2     931
                                              7 BANK1      8     6      2
                             _Length
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             4     4      0   16080
                                              7 BANK3      4     4      0
                    _ConvertToString
                               _Fill
                          _UART_init
                        _eeprom_read
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
                           _lcdPrint
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2    4422
                                              4 BANK1      7     5      2
                            _lcdSend
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0    2582
                                              4 BANK1      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1    2582
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4    1106
                                             57 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) _Fill                                                 4     4      0     772
                                              7 BANK1      4     4      0
                             _Length
 ---------------------------------------------------------------------------------
 (2) _ConvertToString                                     16    10      6    4495
                                             57 BANK1      9     3      6
                                              0 BANK3      7     7      0
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                  9     7      2    1203
                                             33 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     613
                                              0 BANK1     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     985
                                             42 BANK1     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        5     4      1    3143
                                             33 BANK1      5     4      1
                        _UART_TxChar
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             13 BANK1      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                             27 BANK1      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                             20 BANK1      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SplitPacket                                         17    17      0    1441
                                              7 BANK1     17    17      0
                             _Length
                            _strcopy
 ---------------------------------------------------------------------------------
 (2) _strcopy                                              7     6      1     506
                                              0 BANK1      7     6      1
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    2797
                                             19 BANK1      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                              12    10      2     685
                                              7 BANK1     12    10      2
                             _Length
 ---------------------------------------------------------------------------------
 (3) _Length                                               7     5      2     299
                                              0 BANK1      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IRS                                                  4     4      0     844
                                             24 BANK0      4     4      0
                    i1_UART_TxString
 ---------------------------------------------------------------------------------
 (6) i1_UART_TxString                                      5     4      1     844
                                             19 BANK0      5     4      1
                      i1_UART_TxChar
                          i1___awmod
                           i1___wmul
                             i1_rand
                            i1_srand
 ---------------------------------------------------------------------------------
 (7) i1_srand                                              2     0      2      48
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) i1_rand                                               7     5      2     144
                                              0 BANK0      7     5      2
                           i1___lmul
 ---------------------------------------------------------------------------------
 (8) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                             13 BANK0      6     2      4
                          i1___awmod (ARG)
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            7     3      4     348
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UART_TxChar                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CompareStrings
     _Length
   _ConcatToPacket
     _strcat
       _Length
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
     ___almod
     ___lmul
     _pow
   _SplitPacket
     _Length
     _strcopy
   _UART_TxString
     _UART_TxChar
     ___awmod
     ___wmul
     _rand
     _srand
   _init_PIC
     _ConvertToString
     _Fill
       _Length
     _UART_init
       ___aldiv
     _eeprom_read
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
     _lcdPrint
       _lcdSend
     _lcdSend
   _lcdPrint
   _lcdSend
   _read_NumPad
     _CompareStrings
     ___awmod
     ___wmul
     _eeprom_write
     _rand
     _srand

 _IRS (ROOT)
   i1_UART_TxString
     i1_UART_TxChar
     i1___awmod
       i1_rand (ARG)
         i1___lmul
     i1___wmul
       i1___awmod (ARG)
       i1_rand (ARG)
     i1_rand
     i1_srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     1B      52       9       85.4%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      32      11       52.1%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     42      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      37       5       68.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     119      12        0.0%
ABS                  0      0     119       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jun 28 12:40:19 2023

                          pc 0002             ??_CompareStrings 00A9                           _iS 004E  
                         _iT 00E7                           fsr 0004          ___wmul@multiplicand 00BD  
           i1___wmul@product 0031                          l220 091D                          l214 09F6  
                        l302 05F3                          l223 0D4A                          l311 1678  
                        l241 0FFF                          l209 0721                          l305 07FE  
                        l226 0D72                          l251 0AA3                          l308 1665  
                        l421 167C                          l181 1661                          l318 0EDD  
                        l247 1713                          l423 1697                          l184 0C1E  
                        l440 174A                          l280 04D7                          l265 0BB7  
                        l193 0A4C                          l441 174A                          l281 04E3  
                        l178 0DE6                          l451 16CD                          l187 1746  
                        l275 0448                          l516 0736                          l268 162F  
                        l444 176C                          l453 16E5                          l526 07BE  
                        l199 17B9                          l447 177D                          l617 0B59  
                        l465 09AC                          l529 0EF2                          l539 0F64  
                        l904 164C                          l907 0CFE                          _IRS 0DE7  
         i1UART_TxString@str 0035                          _pow 177E                          fsr0 0004  
                        indf 0000                 ___awmod@sign 00BA                         ?_IRS 0070  
                       l3001 098A                         l3003 0993                         l3011 0725  
                       l3005 09A4                         l3021 0751                         l3013 0729  
                       l3031 0776                         l3023 0759                         l3015 073A  
                       l3033 0788                         l3025 075C                         l3041 07A6  
                       l3017 0745                         l3009 0722                         l3201 0B7A  
                       l3121 0A74                         l4001 0303                         l3043 07AB  
                       l3035 0796                         l3027 0769                         l3019 0749  
                       l3051 0EE1                         l3203 0B88                         l4011 032A  
                       l4003 030D                         l3221 0D02                         l3301 0B2A  
                       l3045 07B6                         l3037 0797                         l3029 076D  
                       l3061 0F0C                         l3053 0EE5                         l3205 0B8C  
                       l4013 0335                         l4005 0314                         l4021 035E  
                       l3231 0D6C                         l3223 0D04                         l3303 0B2E  
                       l3311 0B4B                         l3039 07A0                         l3071 0F46  
                       l3063 0F19                         l3055 0EF6                         l3207 0B91  
                       l3215 0BA8                         l3151 07CE                         l3143 07BF  
                       l3135 0A93                         l3127 0A76                         l3119 0A50  
                       l4031 0381                         l4023 0365                         l4015 0349  
                       l4007 031A                         l3225 0D14                         l3241 1701  
                       l3313 0B50                         l3305 0B38                         l3065 0F1D  
                       l3073 0F4C                         l3057 0F01                         l3049 0EDE  
                       l3209 0B9F                         l3153 07FB                         l3145 07C5  
                       l3161 0BBC                         l3081 09F7                         l3129 0A78  
                       l3137 0A97                         l3401 0539                         l4041 0397  
                       l4033 0382                         l4025 036C                         l4017 0354  
                       l4009 0321                         l3227 0D3E                         l3243 170C  
                       l3235 16E9                         l3315 0B55                         l3307 0B3E  
                       l3075 0F51                         l3067 0F2F                         l3059 0F09  
                       l4107 0BAF                         l3155 07FC                         l3147 07CA  
                       l3171 0BF1                         l3163 0BC6                         l3083 09FC  
                       l3139 0AA2                         l3251 1767                         l3403 0548  
                       l3411 055B                         l4051 03C6                         l4043 03A5  
                       l4035 0386                         l4027 0377                         l4019 035A  
                       l3229 0D44                         l3237 16EC                         l4109 0FCB  
                       l3501 0FA9                         l3309 0B45                         l3077 0F5C  
                       l3069 0F3D                         l3157 07FD                         l3149 07CD  
                       l3173 0BFA                         l3165 0BC9                         l3181 1625  
                       l3085 0A22                         l3261 1776                         l3253 176B  
                       l3245 1750                         l3421 0572                         l3413 0560  
                       l3405 054D                         l4053 03D1                         l4037 0388  
                       l4029 037B                         l4045 03AE                         l3239 16FB  
                       l3503 0FAE                         l3271 0CD9                         l3191 1685  
                       l3175 0C03                         l3167 0BD2                         l3159 0BB8  
                       l3183 164D                         l3087 0A2A                         l3263 177C  
                       l3255 1770                         l3247 175C                         l3431 0597  
                       l3423 0577                         l3415 0565                         l3407 0554  
                       l3343 03F6                         l3335 03EF                         l4047 03B8  
                       l4055 03E5                         l4039 0389                         l3505 0FB1  
                       l3513 0FC6                         l3521 0FE9                         l3281 0AFF  
                       l3265 163E                         l3177 0C0C                         l3169 0BE6  
                       l3185 1653                         l3257 1774                         l3249 1764  
                       l3441 05BD                         l3433 05A6                         l3425 0584  
                       l3417 056A                         l3409 0556                         l3361 0446  
                       l3353 040E                         l3345 03FC                         l3337 03F5  
                       l4049 03BF                         l3507 0FBA                         l3515 0FD9  
                       l3275 1665                         l3291 0B11                         l3283 0B02  
                       l3267 0C8E                         l3195 0B5D                         l3179 0C15  
                       l3187 1655                         l3259 1775                         l3443 05CE  
                       l3427 058C                         l3419 056C                         l3371 0460  
                       l3451 05E9                         l3363 044E                         l3355 041D  
                       l3347 040B                         l3461 09CE                         l3517 0FE1  
                       l3509 0FBD                         l3277 166A                         l3293 0B16  
                       l3285 0B06                         l3269 0CCB                         l3197 0B6C  
                       l3189 1659                         l3453 05ED                         l3437 05AB  
                       l3429 0592                         l3381 04CF                         l3373 0465  
                       l3365 0454                         l3357 0428                         l3463 09D5  
                       l3455 09B0                         l3519 0FE3                         l3279 1672  
                       l3295 0B1C                         l3287 0B0B                         l3471 0E62  
                       l3439 05B0                         l3391 04F6                         l3447 05D5  
                       l3383 04D3                         l3375 046C                         l3367 0459  
                       l3359 0439                         l3465 09DD                         l3457 09C0  
                       l3297 0B1F                         l3289 0B0D                         l3481 0E88  
                       l3473 0E65                         l3801 0606                         l3449 05DD  
                       l3385 04DB                         l3377 04B8                         l3369 045A  
                       l3467 09E3                         l3459 09C6                         l3491 0F7B  
                       l3299 0B26                         l3483 0E99                         l3475 0E70  
                       l3811 0666                         l3803 060F                         l3395 04FB  
                       l3379 04C5                         l3387 04E4                         l3469 09F0  
                       l3493 0F7E                         l2941 16C7                         l3485 0EA3  
                       l3477 0E78                         l3813 0680                         l3821 06F2  
                       l3805 062E                         l3397 0502                         l3389 04E9  
                       l3901 017D                         l3495 0F8C                         l3487 0F68  
                       l2943 16D4                         l3479 0E83                         l3823 0705  
                       l3815 06BC                         l3807 0633                         l2951 1717  
                       l3831 0DB0                         l3399 0534                         l3911 01A3  
                       l3903 0191                         l3497 0F96                         l3489 0F6C  
                       l2945 16DB                         l2937 16BF                         l3817 06E4  
                       l3809 0639                         l2961 1723                         l2953 1718  
                       l3833 0DB9                         l3825 0D73                         l3921 01C6  
                       l3913 01B1                         l3905 019C                         l3841 0067  
                       l3499 0FA3                         l2947 16E1                         l2939 16C3  
                       l2971 1781                         l3819 06EC                         l2963 172C  
                       l2955 1719                         l3835 0DC5                         l3827 0D9F  
                       l3931 01F0                         l3915 01B5                         l3907 01A0  
                       l3923 01CF                         l3851 008A                         l3843 006C  
                       l2981 17B3                         l2973 1785                         l2965 1736  
                       l2957 171A                         l3837 0DDD                         l3829 0DA5  
                       l3941 021C                         l3933 01FF                         l3925 01DB  
                       l3917 01B7                         l3909 01A2                         l3853 008F  
                       l3861 00BA                         l3845 0073                         l2991 0919  
                       l2975 1788                         l2967 1739                         l2959 171D  
                       l3839 0DE3                         l3951 0242                         l3943 022A  
                       l3935 0207                         l3927 01E2                         l3919 01B8  
                       l3863 00BF                         l3871 00EA                         l3855 0098  
                       l3847 007C                         l2985 08F6                         l2977 17A0  
                       l2969 1743                         l3953 0249                         l3945 0234  
                       l3937 020D                         l3961 0273                         l3929 01E8  
                       l3881 0115                         l3873 00EF                         l3865 00C8  
                       l3857 00A3                         l3849 0087                         l2987 08FB  
                       l2995 0965                         l2979 17A6                         l3795 05F4  
                       l3971 02A3                         l3963 027B                         l3955 0254  
                       l3947 0238                         l3939 020E                         l3891 0139  
                       l3875 00F8                         l3883 0116                         l3867 00D3  
                       l3859 00B7                         l2989 0901                         l2997 096F  
                       l3797 05FA                         l3981 02C7                         l3965 028A  
                       l3973 02B5                         l3957 025D                         l3949 023E  
                       l3893 0144                         l3885 011B                         l3877 0103  
                       l3869 00E7                         l2999 0973                         l3799 0600  
                       l3991 02E0                         l3983 02D2                         l3975 02B8  
                       l3967 0292                         l3959 0268                         l3887 012D  
                       l3895 0158                         l3879 010D                         l3993 02E4  
                       l3985 02D8                         l3969 0298                         l3977 02B9  
                       l3897 0164                         l3889 0132                         l3995 02E6  
                       l3987 02DB                         l3979 02BE                         l3899 0176  
                       l3997 02E7                         l3989 02DE                         l3999 02F5  
                       ?_pow 00C1                         STR_1 08CB                         STR_2 08E0  
                       STR_3 0898                         STR_4 08E0                         STR_5 08D6  
                       STR_6 08BF                         STR_7 0847                         STR_8 08F0  
                       STR_9 0835                         _T0IF 005A                         u3000 076D  
                       u3001 076C                         u3020 0788                         u3100 0F1D  
                       u3021 0787                         u3101 0F1C                         u3110 0F2F  
                       u3015 076F                         u3111 0F2E                         u3040 07A6  
                       u3041 07A5                         u3025 0784                         u3050 07AB  
                       u3130 0F4C                         u4010 0600                         u3051 07AA  
                       u3035 0798                         u3131 0F4B                         u3115 0F2B  
                       u4011 05FF                         u3300 0D54                         u3140 0F51  
                       u3060 0EE5                         u4020 0665                         u4100 00EF  
                       u3141 0F50                         u3125 0F3E                         u3061 0EE4  
                       u4021 0664                         u4101 00EE                         u3310 0D6C  
                       u3070 0EF6                         u4030 0690                         u3150 0A0A  
                       u3230 0A74                         u4110 012D                         u3311 0D6B  
                       u3071 0EF5                         u3231 0A73                         u4111 012C  
                       u3320 170C                         u3400 0B1C                         u3080 0F09  
                       u4040 0705                         u3160 0A34                         u3240 0A92  
                       u4200 0292                         u4120 0132                         u3321 170B  
                       u3401 0B1B                         u3081 0F08                         u4041 0704  
                       u3241 0A91                         u4201 0291                         u4121 0131  
                       u4050 0717                         u3170 0A4C                         u3250 0AA2  
                       u3330 1750                         u4210 0298                         u4130 0176  
                       u3171 0A4B                         u3251 0AA1                         u3235 0A70  
                       u3331 174F                         u4211 0297                         u4131 0175  
                       u4115 0129                         u3420 0B2E                         u3260 07DE  
                       u4060 0DA5                         u3340 176B                         u4220 02BE  
                       u4140 01E2                         u3421 0B2D                         u4045 0701  
                       u4061 0DA4                         u3341 176A                         u4221 02BD  
                       u4141 01E1                         u3430 0B38                         u3270 1685  
                       u3350 177C                         u3510 0454                         u4230 0314  
                       u4150 01F0                         u4070 0073                         u3431 0B37  
                       u3415 0B20                         u3095 0F0E                         u3271 1682  
                       u3351 177B                         u3511 0453                         u4231 0313  
                       u4151 01EF                         u4135 0172                         u4071 0072  
                       _PIE1 008C                         u3360 0CF6                         u3280 0B79  
                       u3600 0539                         u3520 0459                         u4240 031A  
                       u4160 01FF                         u4080 008F                         u3281 0B78  
                       u3265 07D9                         u3601 0538                         u3521 0458  
                       u3505 043E                         u4241 0319                         u4161 01FE  
                       u4081 008E                         u3290 0D20                         u3370 166A  
                       u3450 0B4B                         u3610 0548                         u3530 0460  
                       u4250 0321                         u4170 0207                         u4090 00BF  
                       u3371 1669                         u3451 0B4A                         u3435 0B34  
                       u4307 0BC2                         u3611 0547                         u3531 045F  
                       u4251 0320                         u4171 0206                         u4091 00BE  
                       u2900 0919                         u3460 0B50                         u3380 0B06  
                       u3700 05BD                         u3620 0554                         u3540 0465  
                       u4260 0365                         u4180 027B                         u2901 0918  
                       u3461 0B4F                         u3445 0B3F                         u3381 0B05  
                       u3365 0CF1                         u3285 0B75                         u4317 0BD8  
                       u3701 05BC                         u3621 0553                         u3541 0464  
                       u4261 0364                         u4181 027A                         u3390 0B11  
                       u2910 0973                         u3710 05E9                         u3630 0560  
                       u3550 046C                         u4270 03B8                         u4190 028A  
                       u3391 0B10                         u2911 0972                         u4327 0BEC  
                       u3711 05E8                         u3631 055F                         u3551 046B  
                       u4271 03B7                         u4191 0289                         u2840 16C7  
                       u3720 05F3                         u3640 0565                         u3560 04C5  
                       u3480 041D                         u4280 03BF                         u2841 16C6  
                       u2921 097C                         u4337 1732                         u3721 05F2  
                       u3705 05B9                         u3641 0564                         u3561 04C4  
                       u3481 041C                         u4281 03BE                         u3730 09C6  
                       u2922 0983                         u3650 056A                         u3570 04E9  
                       u3490 0439                         u3731 09C5                         u2923 098A  
                       u4347 173F                         u3651 0569                         u3571 04E8  
                       u3491 0438                         u3740 0E83                         u3660 0577  
                       u3580 04F6                         u3741 0E82                         u3661 0576  
                       u3581 04F5                         u3565 04C1                         u2870 16E1  
                       u2950 09A4                         u3750 0E88                         u3670 0584  
                       u3590 0502                         u2871 16E0                         u2855 16CE  
                       u2951 09A3                         u2935 098C                         u3751 0E87  
                       u3671 0583                         u3591 0501                         u3760 0F8C  
                       u2960 0729                         u2880 17B3                         u3680 0597  
                       u3761 0F8B                         u2865 16D5                         u2945 0994  
                       u2961 0728                         u2881 17B2                         u3681 0596  
                       u3585 04F2                         u4297 0423                         u2890 090B  
                       u3770 0F96                         u2970 073A                         u3690 05B0  
                       u3771 0F95                         u2971 0739                         u3691 05AF  
                       u3675 0580                         u3780 0FFF                         u2980 0759  
                       _RCIF 0065                         u3781 0FFE                         u2981 0758  
                       u2885 17AF                         u3785 0FFB                         _PIR1 000C  
                       u2995 075E                         _TMR0 0001               ??_eeprom_write 00A1  
                       _Fill 0B5A                         _fail 004A                         _i_id 00E4  
                       _dato 0110                         _main 0067            ConcatToPacket@pkt 00B9  
                       _keyf 00EA                         _keys 0810                         _rand 0C8E  
          ConcatToPacket@str 00B3                         btemp 007E                         _type 00E8  
                       pow@b 00C5                         pow@i 00C6                         pow@n 00C8  
                       start 0010              __end_ofi1_srand 1625                        ??_IRS 0038  
                      ??_pow 00C3                 ?_init_NumPad 0070                 ?_init_Timer0 0070  
                      ?_Fill 0070              __end_of___aldiv 07BF              __end_of___almod 0F65  
                      ?_main 0070                        ?_rand 00AD                        _EEADR 010D  
                      STR_10 08A6                        STR_11 08B3                        STR_12 08EC  
                      STR_13 0889                        STR_14 08A6                        STR_15 0879  
                      STR_16 08E8                        STR_17 0823                        STR_18 0869  
                      STR_19 0858              __end_of___awmod 0B5A                 ?_read_NumPad 0070  
                      i1l311 163D                        i1l308 1631                        i1l318 0C8D  
                      i1l328 0E54                        i1l451 16A6                        i1l453 16BE  
                      i1l617 0AFE                        i1l465 17FF                        i1l904 1624  
                      i1l907 0964                        _RCREG 001A                        _RCSTA 0018  
                      _SPBRG 0099                        _PORTB 0006                        _PORTD 0008  
                      _TRISB 0086                        _TRISC 0087                        _TRISD 0088  
                      _TXREG 0019                        _TXSTA 0098              __end_of_colMask 0823  
        ___lmul@multiplicand 00A4              __end_of_lcdSend 1747               i1___awmod@sign 002C  
                      _randx 0053                        _srand 163E             __end_ofi1___lmul 1800  
                      pclath 000A             __end_ofi1___wmul 16BF              __end_of_rowMask 0820  
                      status 0003          i1___wmul@multiplier 002D                        wtemp0 007E  
            __end_of_strcopy 1714             ?i1_UART_TxString 0033                 __end_of_Fill 0BB8  
            __initialization 0013                 __end_of_main 03EF                 __end_of_keys 081C  
               __end_of_rand 0CFF          i1___lmul@multiplier 0070                       ??_Fill 00A7  
                     ??_main 00E2                       ??_rand 00AF            strcat@length_dest 00B1  
                     _EEDATA 010C                       _EECON1 018C                       _EECON2 018D  
                     ?_srand 00A0                       i1l2101 17DD                       i1l2103 17E6  
                     i1l2105 17F7                       i1l2401 0AFA                       i1l2411 094D  
                     i1l2405 161C                       i1l2351 163B                       i1l2095 17BA  
                     i1l2407 091E                       i1l2361 16B4                       i1l2353 1698  
                     i1l2097 17C2                       i1l2409 093F                       i1l2347 1631  
                     i1l2371 0AAB                       i1l2363 16BA                       i1l2355 169C  
                     i1l2099 17C6                       i1l2349 1637                       i1l2381 0AC1  
                     i1l2373 0AB0                       i1l2357 16A0                       i1l2391 0ADD  
                     i1l2383 0AC4                       i1l2375 0AB2                       i1l2367 0AA4  
                     i1l2359 16AD                       i1l2631 0C38                       i1l2393 0AE3  
                     i1l2385 0ACB                       i1l2377 0AB6                       i1l2369 0AA7  
                     i1l2633 0C43                       i1l2625 0C22                       i1l2395 0AEA  
                     i1l2387 0ACF                       i1l2379 0ABB                       i1l2635 0C48  
                     i1l2627 0C25                       i1l2389 0AD3                       i1l2397 0AF0  
                     u210_25 16A7                       i1l2637 0C51                       i1l2629 0C30  
                     i1l2399 0AF5                       i1l2639 0C5B                       u211_25 16AE  
                     i1l2861 0DF1                       i1l2871 0E00                       i1l2863 0DF5  
                     u220_20 0AF0                       u212_20 16BA                       u220_21 0AEF  
                     u212_21 16B9                       i1l2881 0E42                       i1l2873 0E18  
                     i1l2865 0DF9                       i1l2857 0DE7                       i1l2883 0E4C  
                     i1l2875 0E2A                       i1l2867 0DFB                       i1l2859 0DEB  
                     i1l2877 0E35                       i1l2885 0E53                       i1l2869 0DFC  
                     i1l2879 0E39                       u221_20 0AF5                       u213_20 0AAB  
                     u221_21 0AF4                       u213_21 0AAA                       u214_20 0AB6  
                     u222_20 095C                       u214_21 0AB5                       u222_25 0957  
                     u215_20 0AC1                       u215_21 0AC0                       u208_20 1637  
                     u208_21 1636                       u216_25 0AC5                       u217_20 0AD3  
                     u209_20 16A0                       _INTCON 000B                       u217_21 0AD2  
                     u209_21 169F                       u218_20 0ADD                       u218_21 0ADC  
                     u218_25 0AD9                       u219_25 0AE4                       u173_20 17C6  
                     u173_21 17C5                       u174_21 17CF                       u174_22 17D6  
                     u174_23 17DD                       u255_20 0C43                       u255_21 0C42  
                     u175_25 17DF                       u256_20 0C48                       u280_20 0E00  
                     u256_21 0C47                       u280_21 0DFF                       u176_25 17E7  
                     u177_20 17F7                       u281_20 0E18                       u177_21 17F6  
                     u281_21 0E17                       u282_20 0E2A                       u282_21 0E29  
                     u282_25 0E26                       u283_20 0E35                       u283_21 0E34  
                     _PIC_ID 004F                       u279_20 0DEB                       u279_21 0DEA  
                  ??i1_srand 0072                       Fill@id 00AA        i1UART_TxString@is_ACK 0033  
                     i1_rand 091E                 ?_UART_TxChar 0070                       _Length 08F6  
           __end_of_lcdPrint 0A4D                       ___lmul 0965                    ??___aldiv 00D2  
                  ??___almod 00A8                       ___wmul 16BF            __end_of_UART_init 07FF  
                  ??___awmod 00B8          ConcatToPacket@delim 00B5             __end_of_init_LCD 0C1F  
           __end_of_init_PIC 0DE7                       _packet 01B4                       _old_iT 004D  
            ___awmod@divisor 00B4         __end_of_eeprom_write 177E              ___awmod@counter 00B9  
                  ??_lcdSend 00A1                       _source 00E9                       _strcat 0CFF  
          __end_ofi1___awmod 0AFF                       saved_w 007E                       pow@exp 00C1  
                     srand@x 00A0                    ??_strcopy 00A1               _datoTastierino 0192  
    __end_of__initialization 0063              eeprom_read@addr 00A1        __end_of_UART_TxString 0EDE  
              ??_SplitPacket 00A7               __pcstackCOMMON 0070                 __pidataBANK0 08F2  
               __pidataBANK1 1611                __end_of_srand 164D                    ?i1___lmul 0070  
                  ?i1___wmul 002D            eeprom_write@value 00A0                      ??_srand 00A2  
                 __pbssBANK0 003C                   __pbssBANK1 00E2                   __pbssBANK2 0110  
                 __pbssBANK3 0190                      ?i1_rand 0020                 strcat@source 00A7  
                    ?_Length 00A0                   __pmaintext 0067                      ?___lmul 00A0  
                    ?___wmul 00BB                   __pintentry 0004               ___lmul@product 00A9  
        __end_of_SplitPacket 1000                   ??i1___lmul 0078                      ?_strcat 00A7  
                 ??i1___wmul 007E                    ?_lcdPrint 00A4       ConvertToString@n_cifre 01CD  
                 __stringtab 0800                    ?_init_LCD 0070                    ?_init_PIC 0070  
                    i1_srand 161C            ??_ConvertToString 00DF                      ___aldiv 0722  
                    ___almod 0EDE                      ___awmod 0AFF                      _colMask 0820  
                 _initialize 00EE                      _colScan 00EC                      _id_dest 01C3  
                    _lcdSend 1714                      __ptext1 03EF                      __ptext2 1747  
                    __ptext3 0A4D                      __ptext4 0D73                      __ptext5 09F7  
                    __ptext6 164D                      __ptext7 1625                      __ptext8 0BB8  
                    __ptext9 1714               _ConcatToPacket 09AD                      _compare 00E6  
                    _maxFail 00ED             ___awmod@dividend 00B6             ___aldiv@dividend 00CE  
                    _seconds 003C                   _keypressed 00EF                      _pr_succ 0046  
                    _rowMask 081C                      _rowScan 00EB                      _success 004B  
                 ??_lcdPrint 00A6                      clrloop0 1615                      _strcopy 16E6  
       end_of_initialization 0063               main@num_rand_s 01D2                   ??_init_LCD 00A4  
                 ??_init_PIC 01CE                 _eeprom_write 1747               UART_TxString@n 00C3  
                 _pr_err_len 0048                   _pr_err_max 0047                i1_UART_TxChar 1630  
                _SplitPacket 0F65             ___aldiv@quotient 00D5                      strcat@n 00AF  
      i1___wmul@multiplicand 002F       __end_of_ConcatToPacket 09F7                    _UART_init 07BF  
                  _PORTEbits 0009                    _TRISEbits 0089                    i1___awmod 0AA4  
              ??_eeprom_read 00A0                    Length@len 00A5                    Length@str 00A0  
             ?i1_UART_TxChar 0070               __end_ofi1_rand 0965               __end_of_Length 091E  
             __end_of___lmul 09AD               __end_of___wmul 16E6              ?_ConcatToPacket 00B3  
                 ?_UART_init 00D9               __end_of_strcat 0D73        i1___lmul@multiplicand 0074  
        start_initialization 0013                  __end_of_IRS 0E5F                  __end_of_pow 17BA  
                 ?i1___awmod 0027                   init_PIC@id 01D0                     ??i1_rand 0022  
                   ??_Length 00A2              CompareStrings@i 00AD                     ??___lmul 00A8  
                   ??___wmul 00BF          __end_of_eeprom_read 1698                ??_init_NumPad 00A0  
                __pdataBANK0 0053                  __pdataBANK1 00ED                ??_init_Timer0 00A0  
         i1___awmod@dividend 0029                ??_read_NumPad 00C1                     ??_strcat 00A9  
             _CompareStrings 0A4D                    ___latbits 0002                __pcstackBANK0 0020  
              __pcstackBANK1 00A0                __pcstackBANK3 01C7            ??i1_UART_TxString 0034  
           i1___lmul@product 0079              _ConvertToString 05F4             eeprom_write@addr 00A2  
                   ?i1_srand 0070                  _datoSeriale 01A3              ??i1_UART_TxChar 0070  
                   ?___aldiv 00CA                     ?___almod 00A0                     ?___awmod 00B4  
           ___almod@dividend 00A4                    __pstrings 0800                  ??_UART_init 00DD  
                   ?_lcdSend 00A0       __end_of_CompareStrings 0AA4          __end_of_init_NumPad 1630  
        __end_of_init_Timer0 1662                UART_TxChar@ch 00A1                  strcopy@dest 00A4  
                ??i1___awmod 007D          __end_of_read_NumPad 05F4                     ?_strcopy 00A0  
            ___aldiv@divisor 00CA            interrupt_function 0004              ___aldiv@counter 00D3  
             ___wmul@product 00BF          UART_TxString@is_ACK 00C1                 _milliseconds 0040  
                  clear_ram0 1614                  _eeprom_read 1679                ??_UART_TxChar 00A0  
              _UART_TxString 0E5F                 ?_SplitPacket 0070                 _old_num_rand 0190  
           ConvertToString@i 01CB             ConvertToString@j 01C9             ConvertToString@n 00D9  
                  lcdPrint@n 00A9                     i1___lmul 17BA                  __stringbase 080F  
          ___wmul@multiplier 00BB                     i1___wmul 1698              ?_CompareStrings 00A7  
           i1UART_TxString@n 0036      __end_of_ConvertToString 0722            ___lmul@multiplier 00A0  
                   i1srand@x 0070           CompareStrings@str1 00AE           CompareStrings@str2 00A7  
                 _EECON1bits 018C               ?_UART_TxString 00C1             ??_ConcatToPacket 00B6  
          i1___awmod@divisor 0027            i1___awmod@counter 002B          __end_of_UART_TxChar 1679  
                _init_NumPad 1625                  _init_Timer0 164D           __end_of__stringtab 0810  
              strcopy@source 00A0                  _read_NumPad 03EF                   strcat@dest 00AE  
                   __ptext10 1679                     __ptext11 07BF                     __ptext20 0965  
                   __ptext12 0B5A                     __ptext21 16BF                     __ptext13 05F4  
                   __ptext30 0C1F                     __ptext22 0AFF                     __ptext14 177E  
                   __ptext31 161C                     __ptext23 1662                     __ptext15 0EDE  
                   __ptext32 091E                     __ptext24 0F65                     __ptext16 0722  
                   __ptext33 17BA                     __ptext25 16E6                     __ptext17 0E5F  
                   __ptext34 1698                     __ptext26 09AD                     __ptext18 163E  
                   __ptext35 0AA4                     __ptext27 0CFF                     __ptext19 0C8E  
                   __ptext36 1630                     __ptext28 08F6                     __ptext29 0DE7  
                   _lcdPrint 09F7             UART_TxString@str 00C5                read_NumPad@id 00CB  
            ___almod@divisor 00A0  ConcatToPacket@packet_length 00B7              ___almod@counter 00A9  
            i1UART_TxChar@ch 0071                     _init_LCD 0BB8                     _init_PIC 0D73  
                   _old_i_id 0044                     _recieved 004C                     _pr_start 0049  
                   _num_rand 00E2              i1_UART_TxString 0C1F                   _INTCONbits 000B  
           ?_ConvertToString 00D9                     intlevel1 0000            UART_init@baudrate 00D9  
            ??_UART_TxString 00C2          ConvertToString@temp 01C7           SplitPacket@section 00B1  
                  stringcode 080A                  _UART_TxChar 1662                   Fill@length 00A8  
                 _OPTION_REG 0081            SplitPacket@i_part 00B3                  lcdSend@dato 00A3  
                lcdSend@tipo 00A0           ConvertToString@str 00DD                     strcopy@n 00A5  
                   stringdir 080A                     stringtab 0800                 ___aldiv@sign 00D4  
                lcdPrint@str 00A4                 ___almod@sign 00AA                ?_eeprom_write 00A0  
                 _STATUSbits 0003                 ?_eeprom_read 0070              SplitPacket@part 00AC  
             SplitPacket@len 00AA      __end_ofi1_UART_TxString 0C8E        __end_ofi1_UART_TxChar 163E  
             SplitPacket@pkt 00B5                 SplitPacket@i 00B6  
