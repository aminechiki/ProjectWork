

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri May 26 17:36:55 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    43                           	dabs	1,0x7E,2
    44     0000                     
    45                           ; Version 2.40
    46                           ; Generated 17/11/2021 GMT
    47                           ; 
    48                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution. Publication is not required when
    62                           ;        this file is used in an embedded application.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F877A Definitions
    78                           ; 
    79                           ; SFR Addresses
    80     0000                     	;# 
    81     0001                     	;# 
    82     0002                     	;# 
    83     0003                     	;# 
    84     0004                     	;# 
    85     0005                     	;# 
    86     0006                     	;# 
    87     0007                     	;# 
    88     0008                     	;# 
    89     0009                     	;# 
    90     000A                     	;# 
    91     000B                     	;# 
    92     000C                     	;# 
    93     000D                     	;# 
    94     000E                     	;# 
    95     000E                     	;# 
    96     000F                     	;# 
    97     0010                     	;# 
    98     0011                     	;# 
    99     0012                     	;# 
   100     0013                     	;# 
   101     0014                     	;# 
   102     0015                     	;# 
   103     0015                     	;# 
   104     0016                     	;# 
   105     0017                     	;# 
   106     0018                     	;# 
   107     0019                     	;# 
   108     001A                     	;# 
   109     001B                     	;# 
   110     001B                     	;# 
   111     001C                     	;# 
   112     001D                     	;# 
   113     001E                     	;# 
   114     001F                     	;# 
   115     0081                     	;# 
   116     0085                     	;# 
   117     0086                     	;# 
   118     0087                     	;# 
   119     0088                     	;# 
   120     0089                     	;# 
   121     008C                     	;# 
   122     008D                     	;# 
   123     008E                     	;# 
   124     0091                     	;# 
   125     0092                     	;# 
   126     0093                     	;# 
   127     0094                     	;# 
   128     0098                     	;# 
   129     0099                     	;# 
   130     009C                     	;# 
   131     009D                     	;# 
   132     009E                     	;# 
   133     009F                     	;# 
   134     010C                     	;# 
   135     010D                     	;# 
   136     010E                     	;# 
   137     010F                     	;# 
   138     018C                     	;# 
   139     018D                     	;# 
   140     0000                     	;# 
   141     0001                     	;# 
   142     0002                     	;# 
   143     0003                     	;# 
   144     0004                     	;# 
   145     0005                     	;# 
   146     0006                     	;# 
   147     0007                     	;# 
   148     0008                     	;# 
   149     0009                     	;# 
   150     000A                     	;# 
   151     000B                     	;# 
   152     000C                     	;# 
   153     000D                     	;# 
   154     000E                     	;# 
   155     000E                     	;# 
   156     000F                     	;# 
   157     0010                     	;# 
   158     0011                     	;# 
   159     0012                     	;# 
   160     0013                     	;# 
   161     0014                     	;# 
   162     0015                     	;# 
   163     0015                     	;# 
   164     0016                     	;# 
   165     0017                     	;# 
   166     0018                     	;# 
   167     0019                     	;# 
   168     001A                     	;# 
   169     001B                     	;# 
   170     001B                     	;# 
   171     001C                     	;# 
   172     001D                     	;# 
   173     001E                     	;# 
   174     001F                     	;# 
   175     0081                     	;# 
   176     0085                     	;# 
   177     0086                     	;# 
   178     0087                     	;# 
   179     0088                     	;# 
   180     0089                     	;# 
   181     008C                     	;# 
   182     008D                     	;# 
   183     008E                     	;# 
   184     0091                     	;# 
   185     0092                     	;# 
   186     0093                     	;# 
   187     0094                     	;# 
   188     0098                     	;# 
   189     0099                     	;# 
   190     009C                     	;# 
   191     009D                     	;# 
   192     009E                     	;# 
   193     009F                     	;# 
   194     010C                     	;# 
   195     010D                     	;# 
   196     010E                     	;# 
   197     010F                     	;# 
   198     018C                     	;# 
   199     018D                     	;# 
   200                           
   201                           	psect	idataCOMMON
   202     07A1                     __pidataCOMMON:
   203                           
   204                           ;initializer for _keypressed
   205     07A1  3463               	retlw	99
   206                           
   207                           	psect	idataBANK0
   208     079D                     __pidataBANK0:
   209                           
   210                           ;initializer for _randx
   211     079D  3401               	retlw	1
   212     079E  3400               	retlw	0
   213     079F  3400               	retlw	0
   214     07A0  3400               	retlw	0
   215                           
   216                           	psect	strings
   217     0674                     __pstrings:
   218     0674                     stringtab:
   219     0674                     __stringtab:
   220                           
   221                           ;	String table - string pointers are 1 byte each
   222     0674  1BFF               	btfsc	btemp+1,7
   223     0675  2E7E               	ljmp	stringcode
   224     0676  1383               	bcf	3,7
   225     0677  187F               	btfsc	btemp+1,0
   226     0678  1783               	bsf	3,7
   227     0679  0800               	movf	0,w
   228     067A  0A84               	incf	4,f
   229     067B  1903               	skipnz
   230     067C  0AFF               	incf	btemp+1,f
   231     067D  0008               	return
   232     067E                     stringcode:
   233     067E                     stringdir:
   234     067E  3006               	movlw	high stringdir
   235     067F  008A               	movwf	10
   236     0680  0804               	movf	4,w
   237     0681  0A84               	incf	4,f
   238     0682  0782               	addwf	2,f
   239     0683                     __stringbase:
   240     0683  3400               	retlw	0
   241     0684                     __end_of__stringtab:
   242     0684                     _keys:
   243     0684  342A               	retlw	42
   244     0685  3407               	retlw	7
   245     0686  3404               	retlw	4
   246     0687  3401               	retlw	1
   247     0688  3400               	retlw	0
   248     0689  3408               	retlw	8
   249     068A  3405               	retlw	5
   250     068B  3402               	retlw	2
   251     068C  3423               	retlw	35
   252     068D  3409               	retlw	9
   253     068E  3406               	retlw	6
   254     068F  3403               	retlw	3
   255     0690                     __end_of_keys:
   256     0690                     _rowMask:
   257     0690  3401               	retlw	1
   258     0691  3402               	retlw	2
   259     0692  3404               	retlw	4
   260     0693  3408               	retlw	8
   261     0694                     __end_of_rowMask:
   262     0694                     _colMask:
   263     0694  34FE               	retlw	254
   264     0695  34FD               	retlw	253
   265     0696  34FB               	retlw	251
   266     0697                     __end_of_colMask:
   267     001A                     _RCREG	set	26
   268     0019                     _TXREG	set	25
   269     000C                     _PIR1	set	12
   270     0018                     _RCSTA	set	24
   271     0006                     _PORTB	set	6
   272     0008                     _PORTD	set	8
   273     0009                     _PORTEbits	set	9
   274     0001                     _TMR0	set	1
   275     000B                     _INTCON	set	11
   276     005A                     _T0IF	set	90
   277     0065                     _RCIF	set	101
   278     008C                     _PIE1	set	140
   279     0099                     _SPBRG	set	153
   280     0098                     _TXSTA	set	152
   281     0087                     _TRISC	set	135
   282     0086                     _TRISB	set	134
   283     0089                     _TRISEbits	set	137
   284     0088                     _TRISD	set	136
   285     0081                     _OPTION_REG	set	129
   286     0697                     STR_1:
   287     0697  3450               	retlw	80	;'P'
   288     0698  3449               	retlw	73	;'I'
   289     0699  3443               	retlw	67	;'C'
   290     069A  345F               	retlw	95	;'_'
   291     069B  3430               	retlw	48	;'0'
   292     069C  3430               	retlw	48	;'0'
   293     069D  3430               	retlw	48	;'0'
   294     069E  3431               	retlw	49	;'1'
   295     069F  3400               	retlw	0
   296     06A0  3400               	retlw	0
   297                           
   298                           	psect	cinit
   299     0011                     start_initialization:	
   300                           ; #config settings
   301                           
   302     0011                     __initialization:
   303                           
   304                           ; Initialize objects allocated to BANK0
   305     0011  120A  118A  279D  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   306     0016  00E9               	movwf	__pdataBANK0& (0+127)
   307     0017  120A  118A  279E  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   308     001C  00EA               	movwf	(__pdataBANK0+1)& (0+127)
   309     001D  120A  118A  279F  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   310     0022  00EB               	movwf	(__pdataBANK0+2)& (0+127)
   311     0023  120A  118A  27A0  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   312     0028  00EC               	movwf	(__pdataBANK0+3)& (0+127)
   313                           
   314                           ; Initialize objects allocated to COMMON
   315     0029  120A  118A  27A1  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   316     002E  00F9               	movwf	__pdataCOMMON& (0+127)
   317                           
   318                           ; Clear objects allocated to BANK1
   319     002F  1683               	bsf	3,5	;RP0=1, select bank1
   320     0030  1303               	bcf	3,6	;RP1=0, select bank1
   321     0031  01E9               	clrf	__pbssBANK1& (0+127)
   322     0032  01EA               	clrf	(__pbssBANK1+1)& (0+127)
   323     0033  01EB               	clrf	(__pbssBANK1+2)& (0+127)
   324     0034  01EC               	clrf	(__pbssBANK1+3)& (0+127)
   325     0035  01ED               	clrf	(__pbssBANK1+4)& (0+127)
   326     0036  01EE               	clrf	(__pbssBANK1+5)& (0+127)
   327                           
   328                           ; Clear objects allocated to BANK0
   329     0037  1383               	bcf	3,7	;select IRP bank0
   330     0038  3020               	movlw	low __pbssBANK0
   331     0039  0084               	movwf	4
   332     003A  3045               	movlw	low (__pbssBANK0+37)
   333     003B  120A  118A  2795  120A  118A  	fcall	clear_ram0
   334                           
   335                           ; Clear objects allocated to COMMON
   336     0040  01F6               	clrf	__pbssCOMMON& (0+127)
   337     0041  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   338     0042  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   339     0043                     end_of_initialization:	
   340                           ;End of C runtime variable initialization code
   341                           
   342     0043                     __end_of__initialization:
   343     0043  0183               	clrf	3
   344     0044  120A  118A  2B41   	ljmp	_main	;jump to C main() function
   345                           
   346                           	psect	bssCOMMON
   347     0076                     __pbssCOMMON:
   348     0076                     _iT:
   349     0076                     	ds	1
   350     0077                     _rowScan:
   351     0077                     	ds	1
   352     0078                     _colScan:
   353     0078                     	ds	1
   354                           
   355                           	psect	dataCOMMON
   356     0079                     __pdataCOMMON:
   357     0079                     _keypressed:
   358     0079                     	ds	1
   359                           
   360                           	psect	bssBANK0
   361     0020                     __pbssBANK0:
   362     0020                     _datoTastierino:
   363     0020                     	ds	16
   364     0030                     _milliseconds:
   365     0030                     	ds	4
   366     0034                     _keyf:
   367     0034                     	ds	1
   368     0035                     _datoSeriale:
   369     0035                     	ds	16
   370                           
   371                           	psect	dataBANK0
   372     0069                     __pdataBANK0:
   373     0069                     _randx:
   374     0069                     	ds	4
   375                           
   376                           	psect	bssBANK1
   377     00E9                     __pbssBANK1:
   378     00E9                     _old_num_rand:
   379     00E9                     	ds	2
   380     00EB                     _num_rand:
   381     00EB                     	ds	2
   382     00ED                     _recieved:
   383     00ED                     	ds	1
   384     00EE                     _iS:
   385     00EE                     	ds	1
   386                           
   387                           	psect	clrtext
   388     0795                     clear_ram0:	
   389                           ;	Called with FSR containing the base address, and
   390                           ;	W with the last address+1
   391                           
   392     0795  0064               	clrwdt	;clear the watchdog before getting into this loop
   393     0796                     clrloop0:
   394     0796  0180               	clrf	0	;clear RAM location pointed to by FSR
   395     0797  0A84               	incf	4,f	;increment pointer
   396     0798  0604               	xorwf	4,w	;XOR with final address
   397     0799  1903               	btfsc	3,2	;have we reached the end yet?
   398     079A  3400               	retlw	0	;all done for this memory range, return
   399     079B  0604               	xorwf	4,w	;XOR again to restore value
   400     079C  2F96               	goto	clrloop0	;do the next byte
   401                           
   402                           	psect	cstackBANK1
   403     00A0                     __pcstackBANK1:
   404     00A0                     ConvertToString@temp:
   405                           
   406                           ; 2 bytes @ 0x0
   407     00A0                     	ds	2
   408     00A2                     ConvertToString@j:
   409                           
   410                           ; 2 bytes @ 0x2
   411     00A2                     	ds	2
   412     00A4                     ConvertToString@i:
   413                           
   414                           ; 2 bytes @ 0x4
   415     00A4                     	ds	2
   416     00A6                     ConvertToString@n_cifre:
   417                           
   418                           ; 1 bytes @ 0x6
   419     00A6                     	ds	1
   420     00A7                     main@packet:
   421                           
   422                           ; 50 bytes @ 0x7
   423     00A7                     	ds	50
   424     00D9                     main@num_rand_s:
   425                           
   426                           ; 16 bytes @ 0x39
   427     00D9                     	ds	16
   428                           
   429                           	psect	cstackCOMMON
   430     0070                     __pcstackCOMMON:
   431     0070                     ?_init_PIC:
   432     0070                     ?_read_NumPad:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ?_lcdPrint:	
   436                           ; 1 bytes @ 0x0
   437                           
   438     0070                     ?_UART_TxString:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ?_init_LCD:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0070                     ?_init_NumPad:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0070                     ?_init_Timer0:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0070                     ?_main:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0070                     ?_UART_TxChar:	
   454                           ; 1 bytes @ 0x0
   455                           
   456     0070                     ?_IRS:	
   457                           ; 1 bytes @ 0x0
   458                           
   459     0070                     ??_IRS:	
   460                           ; 1 bytes @ 0x0
   461                           
   462                           
   463                           ; 1 bytes @ 0x0
   464     0070                     	ds	4
   465     0074                     ?_lcdSend:
   466     0074                     ??_init_NumPad:	
   467                           ; 1 bytes @ 0x4
   468                           
   469     0074                     ??_init_Timer0:	
   470                           ; 1 bytes @ 0x4
   471                           
   472     0074                     ?_srand:	
   473                           ; 1 bytes @ 0x4
   474                           
   475     0074                     ??_UART_TxChar:	
   476                           ; 1 bytes @ 0x4
   477                           
   478     0074                     ??___wmul:	
   479                           ; 1 bytes @ 0x4
   480                           
   481     0074                     ??___lmul:	
   482                           ; 1 bytes @ 0x4
   483                           
   484     0074                     ??___almod:	
   485                           ; 1 bytes @ 0x4
   486                           
   487     0074                     ?_strcat:	
   488                           ; 1 bytes @ 0x4
   489                           
   490     0074                     lcdSend@tipo:	
   491                           ; 2 bytes @ 0x4
   492                           
   493     0074                     strcat@str2:	
   494                           ; 1 bytes @ 0x4
   495                           
   496     0074                     ___wmul@product:	
   497                           ; 2 bytes @ 0x4
   498                           
   499     0074                     srand@x:	
   500                           ; 2 bytes @ 0x4
   501                           
   502                           
   503                           ; 2 bytes @ 0x4
   504     0074                     	ds	1
   505     0075                     ??___awmod:
   506     0075                     lcdSend@dato:	
   507                           ; 1 bytes @ 0x5
   508                           
   509     0075                     UART_TxChar@ch:	
   510                           ; 1 bytes @ 0x5
   511                           
   512                           
   513                           ; 1 bytes @ 0x5
   514     0075                     	ds	1
   515     0076                     ??_init_PIC:
   516     0076                     ??_srand:	
   517                           ; 1 bytes @ 0x6
   518                           
   519     0076                     ??_main:	
   520                           ; 1 bytes @ 0x6
   521                           
   522                           
   523                           	psect	cstackBANK0
   524     0045                     __pcstackBANK0:	
   525                           ; 1 bytes @ 0x6
   526                           
   527     0045                     ??_lcdSend:
   528     0045                     ??_UART_TxString:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0045                     ??_strcat:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0045                     ?___wmul:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0045                     ?___lmul:	
   538                           ; 2 bytes @ 0x0
   539                           
   540     0045                     ?___almod:	
   541                           ; 4 bytes @ 0x0
   542                           
   543     0045                     ___wmul@multiplier:	
   544                           ; 4 bytes @ 0x0
   545                           
   546     0045                     ___lmul@multiplier:	
   547                           ; 2 bytes @ 0x0
   548                           
   549     0045                     ___almod@divisor:	
   550                           ; 4 bytes @ 0x0
   551                           
   552                           
   553                           ; 4 bytes @ 0x0
   554     0045                     	ds	1
   555     0046                     UART_TxString@str:
   556                           
   557                           ; 1 bytes @ 0x1
   558     0046                     	ds	1
   559     0047                     ??_lcdPrint:
   560     0047                     ??_init_LCD:	
   561                           ; 1 bytes @ 0x2
   562                           
   563     0047                     UART_TxString@n:	
   564                           ; 1 bytes @ 0x2
   565                           
   566     0047                     ___wmul@multiplicand:	
   567                           ; 2 bytes @ 0x2
   568                           
   569                           
   570                           ; 2 bytes @ 0x2
   571     0047                     	ds	1
   572     0048                     lcdPrint@n:
   573                           
   574                           ; 2 bytes @ 0x3
   575     0048                     	ds	1
   576     0049                     ?_pow:
   577     0049                     pow@exp:	
   578                           ; 2 bytes @ 0x4
   579                           
   580     0049                     ___lmul@multiplicand:	
   581                           ; 1 bytes @ 0x4
   582                           
   583     0049                     ___almod@dividend:	
   584                           ; 4 bytes @ 0x4
   585                           
   586                           
   587                           ; 4 bytes @ 0x4
   588     0049                     	ds	1
   589     004A                     lcdPrint@str:
   590     004A                     strcat@n:	
   591                           ; 1 bytes @ 0x5
   592                           
   593                           
   594                           ; 2 bytes @ 0x5
   595     004A                     	ds	1
   596     004B                     ??_pow:
   597                           
   598                           ; 1 bytes @ 0x6
   599     004B                     	ds	1
   600     004C                     strcat@str1:
   601                           
   602                           ; 1 bytes @ 0x7
   603     004C                     	ds	1
   604     004D                     pow@b:
   605     004D                     ___almod@counter:	
   606                           ; 1 bytes @ 0x8
   607                           
   608     004D                     strcat@length_str1:	
   609                           ; 1 bytes @ 0x8
   610                           
   611     004D                     ___lmul@product:	
   612                           ; 2 bytes @ 0x8
   613                           
   614                           
   615                           ; 4 bytes @ 0x8
   616     004D                     	ds	1
   617     004E                     ___almod@sign:
   618     004E                     pow@i:	
   619                           ; 1 bytes @ 0x9
   620                           
   621                           
   622                           ; 2 bytes @ 0x9
   623     004E                     	ds	1
   624     004F                     ?_ConcatToPacket:
   625     004F                     ConcatToPacket@str:	
   626                           ; 1 bytes @ 0xA
   627                           
   628                           
   629                           ; 2 bytes @ 0xA
   630     004F                     	ds	1
   631     0050                     pow@n:
   632                           
   633                           ; 2 bytes @ 0xB
   634     0050                     	ds	1
   635     0051                     ?_rand:
   636     0051                     ConcatToPacket@delim:	
   637                           ; 2 bytes @ 0xC
   638                           
   639                           
   640                           ; 1 bytes @ 0xC
   641     0051                     	ds	1
   642     0052                     ??_ConcatToPacket:
   643     0052                     ?___aldiv:	
   644                           ; 1 bytes @ 0xD
   645                           
   646     0052                     ___aldiv@divisor:	
   647                           ; 4 bytes @ 0xD
   648                           
   649                           
   650                           ; 4 bytes @ 0xD
   651     0052                     	ds	1
   652     0053                     ??_rand:
   653     0053                     ConcatToPacket@packet_length:	
   654                           ; 1 bytes @ 0xE
   655                           
   656                           
   657                           ; 2 bytes @ 0xE
   658     0053                     	ds	2
   659     0055                     ConcatToPacket@pkt:
   660                           
   661                           ; 1 bytes @ 0x10
   662     0055                     	ds	1
   663     0056                     ___aldiv@dividend:
   664                           
   665                           ; 4 bytes @ 0x11
   666     0056                     	ds	2
   667     0058                     ?___awmod:
   668     0058                     ___awmod@divisor:	
   669                           ; 2 bytes @ 0x13
   670                           
   671                           
   672                           ; 2 bytes @ 0x13
   673     0058                     	ds	2
   674     005A                     ??___aldiv:
   675     005A                     ___awmod@dividend:	
   676                           ; 1 bytes @ 0x15
   677                           
   678                           
   679                           ; 2 bytes @ 0x15
   680     005A                     	ds	1
   681     005B                     ___aldiv@counter:
   682                           
   683                           ; 1 bytes @ 0x16
   684     005B                     	ds	1
   685     005C                     ___aldiv@sign:
   686     005C                     ___awmod@counter:	
   687                           ; 1 bytes @ 0x17
   688                           
   689                           
   690                           ; 1 bytes @ 0x17
   691     005C                     	ds	1
   692     005D                     ___awmod@sign:
   693     005D                     ___aldiv@quotient:	
   694                           ; 1 bytes @ 0x18
   695                           
   696                           
   697                           ; 4 bytes @ 0x18
   698     005D                     	ds	1
   699     005E                     ??_read_NumPad:
   700                           
   701                           ; 1 bytes @ 0x19
   702     005E                     	ds	3
   703     0061                     ?_ConvertToString:
   704     0061                     ?_UART_init:	
   705                           ; 1 bytes @ 0x1C
   706                           
   707     0061                     ConvertToString@n:	
   708                           ; 1 bytes @ 0x1C
   709                           
   710     0061                     UART_init@baudrate:	
   711                           ; 4 bytes @ 0x1C
   712                           
   713                           
   714                           ; 4 bytes @ 0x1C
   715     0061                     	ds	4
   716     0065                     ??_UART_init:
   717     0065                     ConvertToString@str:	
   718                           ; 1 bytes @ 0x20
   719                           
   720                           
   721                           ; 1 bytes @ 0x20
   722     0065                     	ds	1
   723     0066                     ??_ConvertToString:
   724                           
   725                           ; 1 bytes @ 0x21
   726     0066                     	ds	3
   727                           
   728                           	psect	maintext
   729     0341                     __pmaintext:	
   730 ;;
   731 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   732 ;;
   733 ;; *************** function _main *****************
   734 ;; Defined at:
   735 ;;		line 101 in file "main.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;		None
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  packet         50    7[BANK1 ] unsigned char [50]
   740 ;;  num_rand_s     16   57[BANK1 ] unsigned char [16]
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : B00/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   750 ;;      Params:         0       0       0       0       0
   751 ;;      Locals:         0       0      66       0       0
   752 ;;      Temps:          0       0       0       0       0
   753 ;;      Totals:         0       0      66       0       0
   754 ;;Total ram usage:       66 bytes
   755 ;; Hardware stack levels required when called: 4
   756 ;; This function calls:
   757 ;;		_ConcatToPacket
   758 ;;		_ConvertToString
   759 ;;		_UART_TxString
   760 ;;		_init_PIC
   761 ;;		_lcdPrint
   762 ;;		_lcdSend
   763 ;;		_read_NumPad
   764 ;; This function is called by:
   765 ;;		Startup code after reset
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769     0341                     _main:	
   770                           ;psect for function _main
   771                           
   772     0341                     l1941:	
   773                           ;incstack = 0
   774                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   775                           
   776                           
   777                           ;main.c: 103:     init_PIC();
   778     0341  120A  118A  273F  120A  118A  	fcall	_init_PIC
   779     0346                     l1943:
   780                           
   781                           ;main.c: 106:     {;main.c: 107:         read_NumPad();
   782     0346  120A  118A  2151  120A  118A  	fcall	_read_NumPad
   783     034B                     l1945:
   784                           
   785                           ;main.c: 111:         if(num_rand != old_num_rand)
   786     034B  1683               	bsf	3,5	;RP0=1, select bank1
   787     034C  1303               	bcf	3,6	;RP1=0, select bank1
   788     034D  086A               	movf	(_old_num_rand+1)^(0+128),w
   789     034E  066C               	xorwf	(_num_rand+1)^(0+128),w
   790     034F  1D03               	skipz
   791     0350  2B53               	goto	u1765
   792     0351  0869               	movf	_old_num_rand^(0+128),w
   793     0352  066B               	xorwf	_num_rand^(0+128),w
   794     0353                     u1765:
   795     0353  1903               	skipnz
   796     0354  2B56               	goto	u1761
   797     0355  2B57               	goto	u1760
   798     0356                     u1761:
   799     0356  2BA1               	goto	l1961
   800     0357                     u1760:
   801     0357                     l1947:
   802                           
   803                           ;main.c: 112:         {;main.c: 114:             lcdSend(0x01, 0);
   804     0357  01F4               	clrf	lcdSend@tipo
   805     0358  3001               	movlw	1
   806     0359  120A  118A  26A1  120A  118A  	fcall	_lcdSend
   807     035E                     l1949:
   808                           
   809                           ;main.c: 116:             char num_rand_s[16];;main.c: 117:             ConvertToString(
      +                          num_rand, num_rand_s);
   810     035E  1683               	bsf	3,5	;RP0=1, select bank1
   811     035F  1303               	bcf	3,6	;RP1=0, select bank1
   812     0360  086B               	movf	_num_rand^(0+128),w
   813     0361  1283               	bcf	3,5	;RP0=0, select bank0
   814     0362  1303               	bcf	3,6	;RP1=0, select bank0
   815     0363  00E1               	movwf	ConvertToString@n
   816     0364  1683               	bsf	3,5	;RP0=1, select bank1
   817     0365  1303               	bcf	3,6	;RP1=0, select bank1
   818     0366  086C               	movf	(_num_rand+1)^(0+128),w
   819     0367  1283               	bcf	3,5	;RP0=0, select bank0
   820     0368  1303               	bcf	3,6	;RP1=0, select bank0
   821     0369  00E2               	movwf	ConvertToString@n+1
   822     036A  3000               	movlw	0
   823     036B  1BE2               	btfsc	ConvertToString@n+1,7
   824     036C  30FF               	movlw	255
   825     036D  00E3               	movwf	ConvertToString@n+2
   826     036E  00E4               	movwf	ConvertToString@n+3
   827     036F  30D9               	movlw	(low (main@num_rand_s| 0))& (0+255)
   828     0370  00E5               	movwf	ConvertToString@str
   829     0371  120A  118A  2047  120A  118A  	fcall	_ConvertToString
   830     0376                     l1951:
   831                           
   832                           ;main.c: 118:             lcdPrint(num_rand_s);
   833     0376  30D9               	movlw	(low (main@num_rand_s| 0))& (0+255)
   834     0377  120A  118A  26CC  120A  118A  	fcall	_lcdPrint
   835     037C                     l1953:
   836                           
   837                           ;main.c: 121:             char packet[50];;main.c: 122:             packet[0] = '\0';
   838     037C  1683               	bsf	3,5	;RP0=1, select bank1
   839     037D  1303               	bcf	3,6	;RP1=0, select bank1
   840     037E  01A7               	clrf	main@packet^(0+128)
   841     037F                     l1955:
   842                           
   843                           ;main.c: 123:             ConcatToPacket(packet, "PIC_0001\0", '/');
   844     037F  3014               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   845     0380  1283               	bcf	3,5	;RP0=0, select bank0
   846     0381  1303               	bcf	3,6	;RP1=0, select bank0
   847     0382  00CF               	movwf	ConcatToPacket@str
   848     0383  3080               	movlw	128
   849     0384  00D0               	movwf	ConcatToPacket@str+1
   850     0385  302F               	movlw	47
   851     0386  00D1               	movwf	ConcatToPacket@delim
   852     0387  30A7               	movlw	(low (main@packet| 0))& (0+255)
   853     0388  120A  118A  24DC  120A  118A  	fcall	_ConcatToPacket
   854     038D                     l1957:
   855                           
   856                           ;main.c: 124:             ConcatToPacket(packet, num_rand_s, ' ');
   857     038D  30D9               	movlw	(low (main@num_rand_s| 0))& (0+255)
   858     038E  1283               	bcf	3,5	;RP0=0, select bank0
   859     038F  1303               	bcf	3,6	;RP1=0, select bank0
   860     0390  00CF               	movwf	ConcatToPacket@str
   861     0391  3000               	movlw	0
   862     0392  00D0               	movwf	ConcatToPacket@str+1
   863     0393  3020               	movlw	32
   864     0394  00D1               	movwf	ConcatToPacket@delim
   865     0395  30A7               	movlw	(low (main@packet| 0))& (0+255)
   866     0396  120A  118A  24DC  120A  118A  	fcall	_ConcatToPacket
   867     039B                     l1959:
   868                           
   869                           ;main.c: 126:             UART_TxString(packet);
   870     039B  30A7               	movlw	(low (main@packet| 0))& (0+255)
   871     039C  120A  118A  271A  120A  118A  	fcall	_UART_TxString
   872     03A1                     l1961:
   873                           
   874                           ;main.c: 128:         old_num_rand = num_rand;
   875     03A1  1683               	bsf	3,5	;RP0=1, select bank1
   876     03A2  1303               	bcf	3,6	;RP1=0, select bank1
   877     03A3  086C               	movf	(_num_rand+1)^(0+128),w
   878     03A4  00EA               	movwf	(_old_num_rand+1)^(0+128)
   879     03A5  086B               	movf	_num_rand^(0+128),w
   880     03A6  00E9               	movwf	_old_num_rand^(0+128)
   881     03A7                     l1963:
   882                           
   883                           ;main.c: 131:         if(recieved)
   884     03A7  086D               	movf	_recieved^(0+128),w
   885     03A8  1903               	btfsc	3,2
   886     03A9  2BAB               	goto	u1771
   887     03AA  2BAC               	goto	u1770
   888     03AB                     u1771:
   889     03AB  2B46               	goto	l1943
   890     03AC                     u1770:
   891     03AC                     l1965:
   892                           
   893                           ;main.c: 132:         {;main.c: 134:             lcdSend(0x01, 0);
   894     03AC  01F4               	clrf	lcdSend@tipo
   895     03AD  3001               	movlw	1
   896     03AE  120A  118A  26A1  120A  118A  	fcall	_lcdSend
   897     03B3                     l1967:
   898                           
   899                           ;main.c: 135:             lcdPrint(datoSeriale);
   900     03B3  3035               	movlw	(low (_datoSeriale| 0))& (0+255)
   901     03B4  120A  118A  26CC  120A  118A  	fcall	_lcdPrint
   902     03B9                     l1969:
   903                           
   904                           ;main.c: 136:             recieved = 0;
   905     03B9  1683               	bsf	3,5	;RP0=1, select bank1
   906     03BA  1303               	bcf	3,6	;RP1=0, select bank1
   907     03BB  01ED               	clrf	_recieved^(0+128)
   908     03BC                     l1971:
   909                           
   910                           ;main.c: 137:             iS = 0;
   911     03BC  01EE               	clrf	_iS^(0+128)
   912     03BD  2B46               	goto	l1943
   913     03BE  120A  118A  280E   	ljmp	start
   914     03C1                     __end_of_main:
   915                           
   916                           	psect	text1
   917     0151                     __ptext1:	
   918 ;; *************** function _read_NumPad *****************
   919 ;; Defined at:
   920 ;;		line 327 in file "main.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;		None
   923 ;; Auto vars:     Size  Location     Type
   924 ;;		None
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   934 ;;      Params:         0       0       0       0       0
   935 ;;      Locals:         0       0       0       0       0
   936 ;;      Temps:          0       2       0       0       0
   937 ;;      Totals:         0       2       0       0       0
   938 ;;Total ram usage:        2 bytes
   939 ;; Hardware stack levels used: 1
   940 ;; Hardware stack levels required when called: 3
   941 ;; This function calls:
   942 ;;		___awmod
   943 ;;		_rand
   944 ;;		_srand
   945 ;; This function is called by:
   946 ;;		_main
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950     0151                     _read_NumPad:	
   951                           ;psect for function _read_NumPad
   952                           
   953     0151                     l1825:	
   954                           ;incstack = 0
   955                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   956                           
   957                           
   958                           ;main.c: 330:     TRISD |= 0x0F;
   959     0151  300F               	movlw	15
   960     0152  1283               	bcf	3,5	;RP0=0, select bank0
   961     0153  1303               	bcf	3,6	;RP1=0, select bank0
   962     0154  00DE               	movwf	??_read_NumPad
   963     0155  085E               	movf	??_read_NumPad,w
   964     0156  1683               	bsf	3,5	;RP0=1, select bank1
   965     0157  1303               	bcf	3,6	;RP1=0, select bank1
   966     0158  0488               	iorwf	8,f	;volatile
   967     0159                     l1827:
   968                           
   969                           ;main.c: 331:     for(colScan = 0; colScan < 3; colScan++)
   970     0159  01F8               	clrf	_colScan
   971     015A                     l1833:
   972                           
   973                           ;main.c: 332:     {;main.c: 335:         PORTB |= 0x07;
   974     015A  3007               	movlw	7
   975     015B  1283               	bcf	3,5	;RP0=0, select bank0
   976     015C  00DE               	movwf	??_read_NumPad
   977     015D  085E               	movf	??_read_NumPad,w
   978     015E  0486               	iorwf	6,f	;volatile
   979     015F                     l1835:
   980                           
   981                           ;main.c: 337:         PORTB &= colMask[colScan];
   982     015F  0878               	movf	_colScan,w
   983     0160  3E11               	addlw	low ((_colMask-__stringbase)| (0+32768))
   984     0161  0084               	movwf	4
   985     0162  120A  118A  267E  120A  118A  	fcall	stringdir
   986     0167  00DE               	movwf	??_read_NumPad
   987     0168  085E               	movf	??_read_NumPad,w
   988     0169  0586               	andwf	6,f	;volatile
   989     016A                     l1837:
   990                           
   991                           ;main.c: 339:         for(rowScan = 0; rowScan < 4; rowScan++)
   992     016A  01F7               	clrf	_rowScan
   993     016B                     l1843:
   994                           
   995                           ;main.c: 340:         {;main.c: 342:             if(!(PORTD & rowMask[rowScan]))
   996     016B  0877               	movf	_rowScan,w
   997     016C  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
   998     016D  0084               	movwf	4
   999     016E  120A  118A  267E  120A  118A  	fcall	stringdir
  1000     0173  0508               	andwf	8,w	;volatile
  1001     0174  1D03               	btfss	3,2
  1002     0175  2977               	goto	u1611
  1003     0176  2978               	goto	u1610
  1004     0177                     u1611:
  1005     0177  299F               	goto	l166
  1006     0178                     u1610:
  1007     0178                     l1845:
  1008                           
  1009                           ;main.c: 343:             {;main.c: 345:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  1010     0178  3021               	movlw	33
  1011     0179  1283               	bcf	3,5	;RP0=0, select bank0
  1012     017A  1303               	bcf	3,6	;RP1=0, select bank0
  1013     017B  00DF               	movwf	??_read_NumPad+1
  1014     017C  3075               	movlw	117
  1015     017D  00DE               	movwf	??_read_NumPad
  1016     017E                     u1787:
  1017     017E  0BDE               	decfsz	??_read_NumPad,f
  1018     017F  297E               	goto	u1787
  1019     0180  0BDF               	decfsz	??_read_NumPad+1,f
  1020     0181  297E               	goto	u1787
  1021     0182  2983               	nop2
  1022     0183                     l1847:
  1023                           
  1024                           ;main.c: 346:                 if(!(PORTD & rowMask[rowScan]))
  1025     0183  0877               	movf	_rowScan,w
  1026     0184  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  1027     0185  0084               	movwf	4
  1028     0186  120A  118A  267E  120A  118A  	fcall	stringdir
  1029     018B  1283               	bcf	3,5	;RP0=0, select bank0
  1030     018C  1303               	bcf	3,6	;RP1=0, select bank0
  1031     018D  0508               	andwf	8,w	;volatile
  1032     018E  1D03               	btfss	3,2
  1033     018F  2991               	goto	u1621
  1034     0190  2992               	goto	u1620
  1035     0191                     u1621:
  1036     0191  299F               	goto	l166
  1037     0192                     u1620:
  1038     0192                     l1849:
  1039                           
  1040                           ;main.c: 347:                 {;main.c: 351:                     keypressed = rowScan+(4
      +                          *colScan);
  1041     0192  0878               	movf	_colScan,w
  1042     0193  00DE               	movwf	??_read_NumPad
  1043     0194  3002               	movlw	2
  1044     0195                     u1635:
  1045     0195  1003               	clrc
  1046     0196  0DDE               	rlf	??_read_NumPad,f
  1047     0197  3EFF               	addlw	-1
  1048     0198  1D03               	skipz
  1049     0199  2995               	goto	u1635
  1050     019A  0877               	movf	_rowScan,w
  1051     019B  075E               	addwf	??_read_NumPad,w
  1052     019C  00F9               	movwf	_keypressed
  1053     019D                     l1851:
  1054                           
  1055                           ;main.c: 353:                     keyf = 1;
  1056     019D  01B4               	clrf	_keyf
  1057     019E  0AB4               	incf	_keyf,f
  1058     019F                     l166:	
  1059                           ;main.c: 355:             }
  1060                           
  1061                           
  1062                           ;main.c: 356:         }
  1063     019F  3001               	movlw	1
  1064     01A0  00DE               	movwf	??_read_NumPad
  1065     01A1  085E               	movf	??_read_NumPad,w
  1066     01A2  07F7               	addwf	_rowScan,f
  1067     01A3                     l1853:
  1068     01A3  3004               	movlw	4
  1069     01A4  0277               	subwf	_rowScan,w
  1070     01A5  1C03               	skipc
  1071     01A6  29A8               	goto	u1641
  1072     01A7  29A9               	goto	u1640
  1073     01A8                     u1641:
  1074     01A8  296B               	goto	l1843
  1075     01A9                     u1640:
  1076     01A9                     l1855:
  1077                           
  1078                           ;main.c: 358:         if(keyf)
  1079     01A9  0834               	movf	_keyf,w
  1080     01AA  1903               	btfsc	3,2
  1081     01AB  29AD               	goto	u1651
  1082     01AC  29AE               	goto	u1650
  1083     01AD                     u1651:
  1084     01AD  2A12               	goto	l1875
  1085     01AE                     u1650:
  1086     01AE                     l1857:
  1087                           
  1088                           ;main.c: 359:         {;main.c: 360:             keyf = 0;
  1089     01AE  01B4               	clrf	_keyf
  1090     01AF                     l1859:
  1091                           
  1092                           ;main.c: 363:             if(keypressed == 8)
  1093     01AF  3008               	movlw	8
  1094     01B0  0679               	xorwf	_keypressed,w
  1095     01B1  1D03               	btfss	3,2
  1096     01B2  29B4               	goto	u1661
  1097     01B3  29B5               	goto	u1660
  1098     01B4                     u1661:
  1099     01B4  29E8               	goto	l1863
  1100     01B5                     u1660:
  1101     01B5                     l1861:
  1102                           
  1103                           ;main.c: 364:             {;main.c: 366:                 srand(TMR0);
  1104     01B5  0801               	movf	1,w	;volatile
  1105     01B6  00DE               	movwf	??_read_NumPad
  1106     01B7  01DF               	clrf	??_read_NumPad+1
  1107     01B8  085E               	movf	??_read_NumPad,w
  1108     01B9  00F4               	movwf	srand@x
  1109     01BA  085F               	movf	??_read_NumPad+1,w
  1110     01BB  00F5               	movwf	srand@x+1
  1111     01BC  120A  118A  278C  120A  118A  	fcall	_srand
  1112                           
  1113                           ;main.c: 368:                 num_rand = ((rand()%8999)+1000);
  1114     01C1  3027               	movlw	39
  1115     01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1116     01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1117     01C4  00D8               	movwf	___awmod@divisor
  1118     01C5  3023               	movlw	35
  1119     01C6  00D9               	movwf	___awmod@divisor+1
  1120     01C7  120A  118A  256E  120A  118A  	fcall	_rand
  1121     01CC  1283               	bcf	3,5	;RP0=0, select bank0
  1122     01CD  1303               	bcf	3,6	;RP1=0, select bank0
  1123     01CE  0852               	movf	?_rand+1,w
  1124     01CF  00DB               	movwf	___awmod@dividend+1
  1125     01D0  0851               	movf	?_rand,w
  1126     01D1  00DA               	movwf	___awmod@dividend
  1127     01D2  120A  118A  2428  120A  118A  	fcall	___awmod
  1128     01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1129     01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1130     01D9  0858               	movf	?___awmod,w
  1131     01DA  3EE8               	addlw	232
  1132     01DB  1683               	bsf	3,5	;RP0=1, select bank1
  1133     01DC  1303               	bcf	3,6	;RP1=0, select bank1
  1134     01DD  00EB               	movwf	_num_rand^(0+128)
  1135     01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1136     01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1137     01E0  0859               	movf	?___awmod+1,w
  1138     01E1  1803               	skipnc
  1139     01E2  3E01               	addlw	1
  1140     01E3  3E03               	addlw	3
  1141     01E4  1683               	bsf	3,5	;RP0=1, select bank1
  1142     01E5  1303               	bcf	3,6	;RP1=0, select bank1
  1143     01E6  00EC               	movwf	(_num_rand+1)^(0+128)
  1144                           
  1145                           ;main.c: 369:             }
  1146     01E7  2A04               	goto	l1871
  1147     01E8                     l1863:
  1148     01E8  0879               	movf	_keypressed,w
  1149     01E9  1903               	btfsc	3,2
  1150     01EA  29EC               	goto	u1671
  1151     01EB  29ED               	goto	u1670
  1152     01EC                     u1671:
  1153     01EC  2A04               	goto	l1871
  1154     01ED                     u1670:
  1155     01ED                     l1865:
  1156                           
  1157                           ;main.c: 372:             {;main.c: 373:                 datoTastierino[iT++] = keys[key
      +                          pressed];
  1158     01ED  0879               	movf	_keypressed,w
  1159     01EE  3E01               	addlw	low ((_keys-__stringbase)| (0+32768))
  1160     01EF  0084               	movwf	4
  1161     01F0  120A  118A  267E  120A  118A  	fcall	stringdir
  1162     01F5  00DE               	movwf	??_read_NumPad
  1163     01F6  0876               	movf	_iT,w
  1164     01F7  3E20               	addlw	(low (_datoTastierino| 0))& (0+255)
  1165     01F8  0084               	movwf	4
  1166     01F9  085E               	movf	??_read_NumPad,w
  1167     01FA  1383               	bcf	3,7	;select IRP bank0
  1168     01FB  0080               	movwf	0
  1169     01FC                     l1867:
  1170     01FC  3001               	movlw	1
  1171     01FD  00DE               	movwf	??_read_NumPad
  1172     01FE  085E               	movf	??_read_NumPad,w
  1173     01FF  07F6               	addwf	_iT,f
  1174     0200                     l1869:
  1175                           
  1176                           ;main.c: 374:                 datoTastierino[iT] = '\0';
  1177     0200  0876               	movf	_iT,w
  1178     0201  3E20               	addlw	(low (_datoTastierino| 0))& (0+255)
  1179     0202  0084               	movwf	4
  1180     0203  0180               	clrf	0
  1181     0204                     l1871:
  1182                           
  1183                           ;main.c: 377:             PORTD |= 0x0F;
  1184     0204  300F               	movlw	15
  1185     0205  1283               	bcf	3,5	;RP0=0, select bank0
  1186     0206  00DE               	movwf	??_read_NumPad
  1187     0207  085E               	movf	??_read_NumPad,w
  1188     0208  0488               	iorwf	8,f	;volatile
  1189     0209                     l1873:	
  1190                           ;main.c: 379:             while(((PORTD & 0x0F) != 0x0F))
  1191                           
  1192                           
  1193                           ;main.c: 379:             while(((PORTD & 0x0F) != 0x0F))
  1194     0209  300F               	movlw	15
  1195     020A  0508               	andwf	8,w	;volatile
  1196     020B  00DE               	movwf	??_read_NumPad
  1197     020C  300F               	movlw	15
  1198     020D  065E               	xorwf	??_read_NumPad,w
  1199     020E  1D03               	btfss	3,2
  1200     020F  2A11               	goto	u1681
  1201     0210  2A12               	goto	u1680
  1202     0211                     u1681:
  1203     0211  2A09               	goto	l1873
  1204     0212                     u1680:
  1205     0212                     l1875:
  1206                           
  1207                           ;main.c: 384:     }
  1208     0212  3001               	movlw	1
  1209     0213  00DE               	movwf	??_read_NumPad
  1210     0214  085E               	movf	??_read_NumPad,w
  1211     0215  07F8               	addwf	_colScan,f
  1212     0216                     l1877:
  1213     0216  3003               	movlw	3
  1214     0217  0278               	subwf	_colScan,w
  1215     0218  1C03               	skipc
  1216     0219  2A1B               	goto	u1691
  1217     021A  2A1C               	goto	u1690
  1218     021B                     u1691:
  1219     021B  295A               	goto	l1833
  1220     021C                     u1690:
  1221     021C                     l175:
  1222     021C  0008               	return
  1223     021D                     __end_of_read_NumPad:
  1224                           
  1225                           	psect	text2
  1226     078C                     __ptext2:	
  1227 ;; *************** function _srand *****************
  1228 ;; Defined at:
  1229 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  x               2    4[COMMON] unsigned int 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1243 ;;      Params:         2       0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0
  1246 ;;      Totals:         2       0       0       0       0
  1247 ;;Total ram usage:        2 bytes
  1248 ;; Hardware stack levels used: 1
  1249 ;; Hardware stack levels required when called: 1
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_read_NumPad
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257     078C                     _srand:	
  1258                           ;psect for function _srand
  1259                           
  1260     078C                     l1383:	
  1261                           ;incstack = 0
  1262                           ; Regs used in _srand: [wreg]
  1263                           
  1264     078C  0874               	movf	srand@x,w
  1265     078D  1283               	bcf	3,5	;RP0=0, select bank0
  1266     078E  1303               	bcf	3,6	;RP1=0, select bank0
  1267     078F  00E9               	movwf	_randx
  1268     0790  0875               	movf	srand@x+1,w
  1269     0791  00EA               	movwf	_randx+1
  1270     0792  01EB               	clrf	_randx+2
  1271     0793  01EC               	clrf	_randx+3
  1272     0794                     l736:
  1273     0794  0008               	return
  1274     0795                     __end_of_srand:
  1275                           
  1276                           	psect	text3
  1277     056E                     __ptext3:	
  1278 ;; *************** function _rand *****************
  1279 ;; Defined at:
  1280 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;		None
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  2   12[BANK0 ] int 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2, status,0, pclath, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1294 ;;      Params:         0       2       0       0       0
  1295 ;;      Locals:         0       0       0       0       0
  1296 ;;      Temps:          0       5       0       0       0
  1297 ;;      Totals:         0       7       0       0       0
  1298 ;;Total ram usage:        7 bytes
  1299 ;; Hardware stack levels used: 1
  1300 ;; Hardware stack levels required when called: 2
  1301 ;; This function calls:
  1302 ;;		___lmul
  1303 ;; This function is called by:
  1304 ;;		_read_NumPad
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308     056E                     _rand:	
  1309                           ;psect for function _rand
  1310                           
  1311     056E                     l1777:	
  1312                           ;incstack = 0
  1313                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1314                           
  1315     056E  1283               	bcf	3,5	;RP0=0, select bank0
  1316     056F  1303               	bcf	3,6	;RP1=0, select bank0
  1317     0570  086C               	movf	_randx+3,w
  1318     0571  00C8               	movwf	___lmul@multiplier+3
  1319     0572  086B               	movf	_randx+2,w
  1320     0573  00C7               	movwf	___lmul@multiplier+2
  1321     0574  086A               	movf	_randx+1,w
  1322     0575  00C6               	movwf	___lmul@multiplier+1
  1323     0576  0869               	movf	_randx,w
  1324     0577  00C5               	movwf	___lmul@multiplier
  1325     0578  3041               	movlw	65
  1326     0579  00CC               	movwf	___lmul@multiplicand+3
  1327     057A  30C6               	movlw	198
  1328     057B  00CB               	movwf	___lmul@multiplicand+2
  1329     057C  304E               	movlw	78
  1330     057D  00CA               	movwf	___lmul@multiplicand+1
  1331     057E  306D               	movlw	109
  1332     057F  00C9               	movwf	___lmul@multiplicand
  1333     0580  120A  118A  2526  120A  118A  	fcall	___lmul
  1334     0585  1283               	bcf	3,5	;RP0=0, select bank0
  1335     0586  1303               	bcf	3,6	;RP1=0, select bank0
  1336     0587  0848               	movf	?___lmul+3,w
  1337     0588  00EC               	movwf	_randx+3
  1338     0589  0847               	movf	?___lmul+2,w
  1339     058A  00EB               	movwf	_randx+2
  1340     058B  0846               	movf	?___lmul+1,w
  1341     058C  00EA               	movwf	_randx+1
  1342     058D  0845               	movf	?___lmul,w
  1343     058E  00E9               	movwf	_randx
  1344     058F                     l1779:
  1345     058F  3039               	movlw	57
  1346     0590  07E9               	addwf	_randx,f
  1347     0591  3030               	movlw	48
  1348     0592  1803               	skipnc
  1349     0593  3031               	movlw	49
  1350     0594  07EA               	addwf	_randx+1,f
  1351     0595  3000               	movlw	0
  1352     0596  1803               	skipnc
  1353     0597  3001               	movlw	1
  1354     0598  07EB               	addwf	_randx+2,f
  1355     0599  3000               	movlw	0
  1356     059A  1803               	skipnc
  1357     059B  3001               	movlw	1
  1358     059C  07EC               	addwf	_randx+3,f
  1359     059D                     l1781:
  1360     059D  0869               	movf	_randx,w
  1361     059E  00D3               	movwf	??_rand
  1362     059F  086A               	movf	_randx+1,w
  1363     05A0  00D4               	movwf	??_rand+1
  1364     05A1  086B               	movf	_randx+2,w
  1365     05A2  00D5               	movwf	??_rand+2
  1366     05A3  086C               	movf	_randx+3,w
  1367     05A4  00D6               	movwf	??_rand+3
  1368     05A5  3010               	movlw	16
  1369     05A6  00D7               	movwf	??_rand+4
  1370     05A7                     u1505:
  1371     05A7  0D56               	rlf	??_rand+3,w
  1372     05A8  0CD6               	rrf	??_rand+3,f
  1373     05A9  0CD5               	rrf	??_rand+2,f
  1374     05AA  0CD4               	rrf	??_rand+1,f
  1375     05AB  0CD3               	rrf	??_rand,f
  1376     05AC                     u1500:
  1377     05AC  0BD7               	decfsz	??_rand+4,f
  1378     05AD  2DA7               	goto	u1505
  1379     05AE  30FF               	movlw	255
  1380     05AF  0553               	andwf	??_rand,w
  1381     05B0  00D1               	movwf	?_rand
  1382     05B1  307F               	movlw	127
  1383     05B2  0554               	andwf	??_rand+1,w
  1384     05B3  00D2               	movwf	?_rand+1
  1385     05B4                     l739:
  1386     05B4  0008               	return
  1387     05B5                     __end_of_rand:
  1388                           
  1389                           	psect	text4
  1390     0428                     __ptext4:	
  1391 ;; *************** function ___awmod *****************
  1392 ;; Defined at:
  1393 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;  divisor         2   19[BANK0 ] int 
  1396 ;;  dividend        2   21[BANK0 ] int 
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  sign            1   24[BANK0 ] unsigned char 
  1399 ;;  counter         1   23[BANK0 ] unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  2   19[BANK0 ] int 
  1402 ;; Registers used:
  1403 ;;		wreg, status,2, status,0
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1409 ;;      Params:         0       4       0       0       0
  1410 ;;      Locals:         0       2       0       0       0
  1411 ;;      Temps:          1       0       0       0       0
  1412 ;;      Totals:         1       6       0       0       0
  1413 ;;Total ram usage:        7 bytes
  1414 ;; Hardware stack levels used: 1
  1415 ;; Hardware stack levels required when called: 1
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_read_NumPad
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423     0428                     ___awmod:	
  1424                           ;psect for function ___awmod
  1425                           
  1426     0428                     l1431:	
  1427                           ;incstack = 0
  1428                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1429                           
  1430     0428  1283               	bcf	3,5	;RP0=0, select bank0
  1431     0429  1303               	bcf	3,6	;RP1=0, select bank0
  1432     042A  01DD               	clrf	___awmod@sign
  1433     042B                     l1433:
  1434     042B  1FDB               	btfss	___awmod@dividend+1,7
  1435     042C  2C2E               	goto	u1011
  1436     042D  2C2F               	goto	u1010
  1437     042E                     u1011:
  1438     042E  2C36               	goto	l1439
  1439     042F                     u1010:
  1440     042F                     l1435:
  1441     042F  09DA               	comf	___awmod@dividend,f
  1442     0430  09DB               	comf	___awmod@dividend+1,f
  1443     0431  0ADA               	incf	___awmod@dividend,f
  1444     0432  1903               	skipnz
  1445     0433  0ADB               	incf	___awmod@dividend+1,f
  1446     0434                     l1437:
  1447     0434  01DD               	clrf	___awmod@sign
  1448     0435  0ADD               	incf	___awmod@sign,f
  1449     0436                     l1439:
  1450     0436  1FD9               	btfss	___awmod@divisor+1,7
  1451     0437  2C39               	goto	u1021
  1452     0438  2C3A               	goto	u1020
  1453     0439                     u1021:
  1454     0439  2C3F               	goto	l1443
  1455     043A                     u1020:
  1456     043A                     l1441:
  1457     043A  09D8               	comf	___awmod@divisor,f
  1458     043B  09D9               	comf	___awmod@divisor+1,f
  1459     043C  0AD8               	incf	___awmod@divisor,f
  1460     043D  1903               	skipnz
  1461     043E  0AD9               	incf	___awmod@divisor+1,f
  1462     043F                     l1443:
  1463     043F  0858               	movf	___awmod@divisor,w
  1464     0440  0459               	iorwf	___awmod@divisor+1,w
  1465     0441  1903               	btfsc	3,2
  1466     0442  2C44               	goto	u1031
  1467     0443  2C45               	goto	u1030
  1468     0444                     u1031:
  1469     0444  2C74               	goto	l1461
  1470     0445                     u1030:
  1471     0445                     l1445:
  1472     0445  01DC               	clrf	___awmod@counter
  1473     0446  0ADC               	incf	___awmod@counter,f
  1474     0447  2C53               	goto	l1451
  1475     0448                     l1447:
  1476     0448  3001               	movlw	1
  1477     0449                     u1045:
  1478     0449  1003               	clrc
  1479     044A  0DD8               	rlf	___awmod@divisor,f
  1480     044B  0DD9               	rlf	___awmod@divisor+1,f
  1481     044C  3EFF               	addlw	-1
  1482     044D  1D03               	skipz
  1483     044E  2C49               	goto	u1045
  1484     044F                     l1449:
  1485     044F  3001               	movlw	1
  1486     0450  00F5               	movwf	??___awmod
  1487     0451  0875               	movf	??___awmod,w
  1488     0452  07DC               	addwf	___awmod@counter,f
  1489     0453                     l1451:
  1490     0453  1FD9               	btfss	___awmod@divisor+1,7
  1491     0454  2C56               	goto	u1051
  1492     0455  2C57               	goto	u1050
  1493     0456                     u1051:
  1494     0456  2C48               	goto	l1447
  1495     0457                     u1050:
  1496     0457                     l1453:
  1497     0457  0859               	movf	___awmod@divisor+1,w
  1498     0458  025B               	subwf	___awmod@dividend+1,w
  1499     0459  1D03               	skipz
  1500     045A  2C5D               	goto	u1065
  1501     045B  0858               	movf	___awmod@divisor,w
  1502     045C  025A               	subwf	___awmod@dividend,w
  1503     045D                     u1065:
  1504     045D  1C03               	skipc
  1505     045E  2C60               	goto	u1061
  1506     045F  2C61               	goto	u1060
  1507     0460                     u1061:
  1508     0460  2C67               	goto	l1457
  1509     0461                     u1060:
  1510     0461                     l1455:
  1511     0461  0858               	movf	___awmod@divisor,w
  1512     0462  02DA               	subwf	___awmod@dividend,f
  1513     0463  0859               	movf	___awmod@divisor+1,w
  1514     0464  1C03               	skipc
  1515     0465  03DB               	decf	___awmod@dividend+1,f
  1516     0466  02DB               	subwf	___awmod@dividend+1,f
  1517     0467                     l1457:
  1518     0467  3001               	movlw	1
  1519     0468                     u1075:
  1520     0468  1003               	clrc
  1521     0469  0CD9               	rrf	___awmod@divisor+1,f
  1522     046A  0CD8               	rrf	___awmod@divisor,f
  1523     046B  3EFF               	addlw	-1
  1524     046C  1D03               	skipz
  1525     046D  2C68               	goto	u1075
  1526     046E                     l1459:
  1527     046E  3001               	movlw	1
  1528     046F  02DC               	subwf	___awmod@counter,f
  1529     0470  1D03               	btfss	3,2
  1530     0471  2C73               	goto	u1081
  1531     0472  2C74               	goto	u1080
  1532     0473                     u1081:
  1533     0473  2C57               	goto	l1453
  1534     0474                     u1080:
  1535     0474                     l1461:
  1536     0474  085D               	movf	___awmod@sign,w
  1537     0475  1903               	btfsc	3,2
  1538     0476  2C78               	goto	u1091
  1539     0477  2C79               	goto	u1090
  1540     0478                     u1091:
  1541     0478  2C7E               	goto	l1465
  1542     0479                     u1090:
  1543     0479                     l1463:
  1544     0479  09DA               	comf	___awmod@dividend,f
  1545     047A  09DB               	comf	___awmod@dividend+1,f
  1546     047B  0ADA               	incf	___awmod@dividend,f
  1547     047C  1903               	skipnz
  1548     047D  0ADB               	incf	___awmod@dividend+1,f
  1549     047E                     l1465:
  1550     047E  085B               	movf	___awmod@dividend+1,w
  1551     047F  00D9               	movwf	?___awmod+1
  1552     0480  085A               	movf	___awmod@dividend,w
  1553     0481  00D8               	movwf	?___awmod
  1554     0482                     l449:
  1555     0482  0008               	return
  1556     0483                     __end_of___awmod:
  1557                           
  1558                           	psect	text5
  1559     06CC                     __ptext5:	
  1560 ;; *************** function _lcdPrint *****************
  1561 ;; Defined at:
  1562 ;;		line 200 in file "main.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  str             1    wreg     PTR unsigned char 
  1565 ;;		 -> datoSeriale(16), main@num_rand_s(16), 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  str             1    5[BANK0 ] PTR unsigned char 
  1568 ;;		 -> datoSeriale(16), main@num_rand_s(16), 
  1569 ;;  n               2    3[BANK0 ] int 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1579 ;;      Params:         0       0       0       0       0
  1580 ;;      Locals:         0       3       0       0       0
  1581 ;;      Temps:          0       1       0       0       0
  1582 ;;      Totals:         0       4       0       0       0
  1583 ;;Total ram usage:        4 bytes
  1584 ;; Hardware stack levels used: 1
  1585 ;; Hardware stack levels required when called: 2
  1586 ;; This function calls:
  1587 ;;		_lcdSend
  1588 ;; This function is called by:
  1589 ;;		_main
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593     06CC                     _lcdPrint:	
  1594                           ;psect for function _lcdPrint
  1595                           
  1596                           
  1597                           ;incstack = 0
  1598                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1599                           ;lcdPrint@str stored from wreg
  1600     06CC  1283               	bcf	3,5	;RP0=0, select bank0
  1601     06CD  1303               	bcf	3,6	;RP1=0, select bank0
  1602     06CE  00CA               	movwf	lcdPrint@str
  1603     06CF                     l1909:
  1604                           
  1605                           ;main.c: 200: void lcdPrint(char *str);main.c: 201: {;main.c: 202:     int n = 0;
  1606     06CF  01C8               	clrf	lcdPrint@n
  1607     06D0  01C9               	clrf	lcdPrint@n+1
  1608                           
  1609                           ;main.c: 204:     while(str[n] != '\0')
  1610     06D1  2EE7               	goto	l1915
  1611     06D2                     l1911:
  1612                           
  1613                           ;main.c: 205:     {;main.c: 207:         lcdSend(str[n++], 1);
  1614     06D2  01F4               	clrf	lcdSend@tipo
  1615     06D3  0AF4               	incf	lcdSend@tipo,f
  1616     06D4  0848               	movf	lcdPrint@n,w
  1617     06D5  074A               	addwf	lcdPrint@str,w
  1618     06D6  00C7               	movwf	??_lcdPrint
  1619     06D7  0847               	movf	??_lcdPrint,w
  1620     06D8  0084               	movwf	4
  1621     06D9  0800               	movf	0,w
  1622     06DA  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1623     06DF                     l1913:
  1624     06DF  3001               	movlw	1
  1625     06E0  1283               	bcf	3,5	;RP0=0, select bank0
  1626     06E1  1303               	bcf	3,6	;RP1=0, select bank0
  1627     06E2  07C8               	addwf	lcdPrint@n,f
  1628     06E3  1803               	skipnc
  1629     06E4  0AC9               	incf	lcdPrint@n+1,f
  1630     06E5  3000               	movlw	0
  1631     06E6  07C9               	addwf	lcdPrint@n+1,f
  1632     06E7                     l1915:
  1633                           
  1634                           ;main.c: 204:     while(str[n] != '\0')
  1635     06E7  0848               	movf	lcdPrint@n,w
  1636     06E8  074A               	addwf	lcdPrint@str,w
  1637     06E9  00C7               	movwf	??_lcdPrint
  1638     06EA  0847               	movf	??_lcdPrint,w
  1639     06EB  0084               	movwf	4
  1640     06EC  1383               	bcf	3,7	;select IRP bank0
  1641     06ED  0800               	movf	0,w
  1642     06EE  1D03               	btfss	3,2
  1643     06EF  2EF1               	goto	u1731
  1644     06F0  2EF2               	goto	u1730
  1645     06F1                     u1731:
  1646     06F1  2ED2               	goto	l1911
  1647     06F2                     u1730:
  1648     06F2                     l126:
  1649     06F2  0008               	return
  1650     06F3                     __end_of_lcdPrint:
  1651                           
  1652                           	psect	text6
  1653     073F                     __ptext6:	
  1654 ;; *************** function _init_PIC *****************
  1655 ;; Defined at:
  1656 ;;		line 144 in file "main.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		wreg, status,2, status,0, pclath, cstack
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1670 ;;      Params:         0       0       0       0       0
  1671 ;;      Locals:         0       0       0       0       0
  1672 ;;      Temps:          0       0       0       0       0
  1673 ;;      Totals:         0       0       0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used: 1
  1676 ;; Hardware stack levels required when called: 3
  1677 ;; This function calls:
  1678 ;;		_UART_init
  1679 ;;		_init_LCD
  1680 ;;		_init_NumPad
  1681 ;;		_init_Timer0
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687     073F                     _init_PIC:	
  1688                           ;psect for function _init_PIC
  1689                           
  1690     073F                     l1823:	
  1691                           ;incstack = 0
  1692                           ; Regs used in _init_PIC: [wreg+status,2+status,0+pclath+cstack]
  1693                           
  1694                           
  1695                           ;main.c: 146:     UART_init(115200);
  1696     073F  3000               	movlw	0
  1697     0740  1283               	bcf	3,5	;RP0=0, select bank0
  1698     0741  1303               	bcf	3,6	;RP1=0, select bank0
  1699     0742  00E4               	movwf	UART_init@baudrate+3
  1700     0743  3001               	movlw	1
  1701     0744  00E3               	movwf	UART_init@baudrate+2
  1702     0745  30C2               	movlw	194
  1703     0746  00E2               	movwf	UART_init@baudrate+1
  1704     0747  3000               	movlw	0
  1705     0748  00E1               	movwf	UART_init@baudrate
  1706     0749  120A  118A  25B5  120A  118A  	fcall	_UART_init
  1707                           
  1708                           ;main.c: 147:     init_LCD();
  1709     074E  120A  118A  2483  120A  118A  	fcall	_init_LCD
  1710                           
  1711                           ;main.c: 148:     init_NumPad();
  1712     0753  120A  118A  2781  120A  118A  	fcall	_init_NumPad
  1713                           
  1714                           ;main.c: 150:     init_Timer0();
  1715     0758  120A  118A  275E  120A  118A  	fcall	_init_Timer0
  1716     075D                     l111:
  1717     075D  0008               	return
  1718     075E                     __end_of_init_PIC:
  1719                           
  1720                           	psect	text7
  1721     075E                     __ptext7:	
  1722 ;; *************** function _init_Timer0 *****************
  1723 ;; Defined at:
  1724 ;;		line 153 in file "main.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, status,2, status,0
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1738 ;;      Params:         0       0       0       0       0
  1739 ;;      Locals:         0       0       0       0       0
  1740 ;;      Temps:          1       0       0       0       0
  1741 ;;      Totals:         1       0       0       0       0
  1742 ;;Total ram usage:        1 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 1
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_init_PIC
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752     075E                     _init_Timer0:	
  1753                           ;psect for function _init_Timer0
  1754                           
  1755     075E                     l1345:	
  1756                           ;incstack = 0
  1757                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  1758                           
  1759                           
  1760                           ;main.c: 156:     INTCON |= 0xA0;
  1761     075E  30A0               	movlw	160
  1762     075F  00F4               	movwf	??_init_Timer0
  1763     0760  0874               	movf	??_init_Timer0,w
  1764     0761  048B               	iorwf	11,f	;volatile
  1765     0762                     l1347:
  1766                           
  1767                           ;main.c: 157:     OPTION_REG = 0x06;
  1768     0762  3006               	movlw	6
  1769     0763  1683               	bsf	3,5	;RP0=1, select bank1
  1770     0764  1303               	bcf	3,6	;RP1=0, select bank1
  1771     0765  0081               	movwf	1	;volatile
  1772     0766                     l1349:
  1773                           
  1774                           ;main.c: 158:     TMR0 = 131;
  1775     0766  3083               	movlw	131
  1776     0767  1283               	bcf	3,5	;RP0=0, select bank0
  1777     0768  1303               	bcf	3,6	;RP1=0, select bank0
  1778     0769  0081               	movwf	1	;volatile
  1779     076A                     l1351:
  1780                           
  1781                           ;main.c: 159:     milliseconds = 0;
  1782     076A  3000               	movlw	0
  1783     076B  00B3               	movwf	_milliseconds+3
  1784     076C  3000               	movlw	0
  1785     076D  00B2               	movwf	_milliseconds+2
  1786     076E  3000               	movlw	0
  1787     076F  00B1               	movwf	_milliseconds+1
  1788     0770  3000               	movlw	0
  1789     0771  00B0               	movwf	_milliseconds
  1790     0772                     l114:
  1791     0772  0008               	return
  1792     0773                     __end_of_init_Timer0:
  1793                           
  1794                           	psect	text8
  1795     0781                     __ptext8:	
  1796 ;; *************** function _init_NumPad *****************
  1797 ;; Defined at:
  1798 ;;		line 321 in file "main.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, status,0
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1812 ;;      Params:         0       0       0       0       0
  1813 ;;      Locals:         0       0       0       0       0
  1814 ;;      Temps:          1       0       0       0       0
  1815 ;;      Totals:         1       0       0       0       0
  1816 ;;Total ram usage:        1 bytes
  1817 ;; Hardware stack levels used: 1
  1818 ;; Hardware stack levels required when called: 1
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_init_PIC
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826     0781                     _init_NumPad:	
  1827                           ;psect for function _init_NumPad
  1828                           
  1829     0781                     l1343:	
  1830                           ;incstack = 0
  1831                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  1832                           
  1833                           
  1834                           ;main.c: 323:     TRISD |= 0x0F;
  1835     0781  300F               	movlw	15
  1836     0782  00F4               	movwf	??_init_NumPad
  1837     0783  0874               	movf	??_init_NumPad,w
  1838     0784  1683               	bsf	3,5	;RP0=1, select bank1
  1839     0785  1303               	bcf	3,6	;RP1=0, select bank1
  1840     0786  0488               	iorwf	8,f	;volatile
  1841                           
  1842                           ;main.c: 324:     TRISB &= 0xF0;
  1843     0787  30F0               	movlw	240
  1844     0788  00F4               	movwf	??_init_NumPad
  1845     0789  0874               	movf	??_init_NumPad,w
  1846     078A  0586               	andwf	6,f	;volatile
  1847     078B                     l159:
  1848     078B  0008               	return
  1849     078C                     __end_of_init_NumPad:
  1850                           
  1851                           	psect	text9
  1852     0483                     __ptext9:	
  1853 ;; *************** function _init_LCD *****************
  1854 ;; Defined at:
  1855 ;;		line 162 in file "main.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, status,2, status,0, pclath, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1869 ;;      Params:         0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0
  1871 ;;      Temps:          0       2       0       0       0
  1872 ;;      Totals:         0       2       0       0       0
  1873 ;;Total ram usage:        2 bytes
  1874 ;; Hardware stack levels used: 1
  1875 ;; Hardware stack levels required when called: 2
  1876 ;; This function calls:
  1877 ;;		_lcdSend
  1878 ;; This function is called by:
  1879 ;;		_init_PIC
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883     0483                     _init_LCD:	
  1884                           ;psect for function _init_LCD
  1885                           
  1886     0483                     l1741:	
  1887                           ;incstack = 0
  1888                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  1889                           
  1890                           
  1891                           ;main.c: 166:     PORTEbits.RE2 = 0;
  1892     0483  1283               	bcf	3,5	;RP0=0, select bank0
  1893     0484  1303               	bcf	3,6	;RP1=0, select bank0
  1894     0485  1109               	bcf	9,2	;volatile
  1895                           
  1896                           ;main.c: 167:     PORTEbits.RE1 = 0;
  1897     0486  1089               	bcf	9,1	;volatile
  1898     0487                     l1743:
  1899                           
  1900                           ;main.c: 168:     _delay((unsigned long)((20)*(20000000/4000.0)));
  1901     0487  3082               	movlw	130
  1902     0488  1283               	bcf	3,5	;RP0=0, select bank0
  1903     0489  1303               	bcf	3,6	;RP1=0, select bank0
  1904     048A  00C8               	movwf	??_init_LCD+1
  1905     048B  30DD               	movlw	221
  1906     048C  00C7               	movwf	??_init_LCD
  1907     048D                     u1797:
  1908     048D  0BC7               	decfsz	??_init_LCD,f
  1909     048E  2C8D               	goto	u1797
  1910     048F  0BC8               	decfsz	??_init_LCD+1,f
  1911     0490  2C8D               	goto	u1797
  1912     0491                     l1745:
  1913                           
  1914                           ;main.c: 169:     PORTEbits.RE1 = 1;
  1915     0491  1283               	bcf	3,5	;RP0=0, select bank0
  1916     0492  1303               	bcf	3,6	;RP1=0, select bank0
  1917     0493  1489               	bsf	9,1	;volatile
  1918     0494                     l1747:
  1919                           
  1920                           ;main.c: 171:     lcdSend(0x38, 0);
  1921     0494  01F4               	clrf	lcdSend@tipo
  1922     0495  3038               	movlw	56
  1923     0496  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1924     049B                     l1749:
  1925                           
  1926                           ;main.c: 172:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1927     049B  3021               	movlw	33
  1928     049C  1283               	bcf	3,5	;RP0=0, select bank0
  1929     049D  1303               	bcf	3,6	;RP1=0, select bank0
  1930     049E  00C8               	movwf	??_init_LCD+1
  1931     049F  3075               	movlw	117
  1932     04A0  00C7               	movwf	??_init_LCD
  1933     04A1                     u1807:
  1934     04A1  0BC7               	decfsz	??_init_LCD,f
  1935     04A2  2CA1               	goto	u1807
  1936     04A3  0BC8               	decfsz	??_init_LCD+1,f
  1937     04A4  2CA1               	goto	u1807
  1938     04A5  2CA6               	nop2
  1939                           
  1940                           ;main.c: 173:     lcdSend(0x38, 0);
  1941     04A6  01F4               	clrf	lcdSend@tipo
  1942     04A7  3038               	movlw	56
  1943     04A8  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1944     04AD                     l1751:
  1945                           
  1946                           ;main.c: 174:     _delay((unsigned long)((1)*(20000000/4000.0)));
  1947     04AD  3007               	movlw	7
  1948     04AE  1283               	bcf	3,5	;RP0=0, select bank0
  1949     04AF  1303               	bcf	3,6	;RP1=0, select bank0
  1950     04B0  00C8               	movwf	??_init_LCD+1
  1951     04B1  307C               	movlw	124
  1952     04B2  00C7               	movwf	??_init_LCD
  1953     04B3                     u1817:
  1954     04B3  0BC7               	decfsz	??_init_LCD,f
  1955     04B4  2CB3               	goto	u1817
  1956     04B5  0BC8               	decfsz	??_init_LCD+1,f
  1957     04B6  2CB3               	goto	u1817
  1958     04B7  0000               	nop
  1959     04B8                     l1753:
  1960                           
  1961                           ;main.c: 175:     lcdSend(0x38, 0);
  1962     04B8  01F4               	clrf	lcdSend@tipo
  1963     04B9  3038               	movlw	56
  1964     04BA  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1965     04BF                     l1755:
  1966                           
  1967                           ;main.c: 176:     lcdSend(0x08, 0);
  1968     04BF  01F4               	clrf	lcdSend@tipo
  1969     04C0  3008               	movlw	8
  1970     04C1  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1971     04C6                     l1757:
  1972                           
  1973                           ;main.c: 177:     lcdSend(0x0F, 0);
  1974     04C6  01F4               	clrf	lcdSend@tipo
  1975     04C7  300F               	movlw	15
  1976     04C8  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1977     04CD                     l1759:
  1978                           
  1979                           ;main.c: 178:     lcdSend(0x01, 0);
  1980     04CD  01F4               	clrf	lcdSend@tipo
  1981     04CE  3001               	movlw	1
  1982     04CF  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1983     04D4                     l1761:
  1984                           
  1985                           ;main.c: 180:     lcdSend(0x0C, 0);
  1986     04D4  01F4               	clrf	lcdSend@tipo
  1987     04D5  300C               	movlw	12
  1988     04D6  120A  118A  26A1  120A  118A  	fcall	_lcdSend
  1989     04DB                     l117:
  1990     04DB  0008               	return
  1991     04DC                     __end_of_init_LCD:
  1992                           
  1993                           	psect	text10
  1994     06A1                     __ptext10:	
  1995 ;; *************** function _lcdSend *****************
  1996 ;; Defined at:
  1997 ;;		line 183 in file "main.c"
  1998 ;; Parameters:    Size  Location     Type
  1999 ;;  dato            1    wreg     unsigned char 
  2000 ;;  tipo            1    4[COMMON] unsigned char 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  dato            1    5[COMMON] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2012 ;;      Params:         1       0       0       0       0
  2013 ;;      Locals:         1       0       0       0       0
  2014 ;;      Temps:          0       2       0       0       0
  2015 ;;      Totals:         2       2       0       0       0
  2016 ;;Total ram usage:        4 bytes
  2017 ;; Hardware stack levels used: 1
  2018 ;; Hardware stack levels required when called: 1
  2019 ;; This function calls:
  2020 ;;		Nothing
  2021 ;; This function is called by:
  2022 ;;		_main
  2023 ;;		_init_LCD
  2024 ;;		_lcdPrint
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028     06A1                     _lcdSend:	
  2029                           ;psect for function _lcdSend
  2030                           
  2031                           
  2032                           ;incstack = 0
  2033                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  2034                           ;lcdSend@dato stored from wreg
  2035     06A1  00F5               	movwf	lcdSend@dato
  2036     06A2                     l1637:
  2037                           
  2038                           ;main.c: 183: void lcdSend(char dato, char tipo);main.c: 184: {;main.c: 187:     TRISD =
      +                           0x00;
  2039     06A2  1683               	bsf	3,5	;RP0=1, select bank1
  2040     06A3  1303               	bcf	3,6	;RP1=0, select bank1
  2041     06A4  0188               	clrf	8	;volatile
  2042     06A5                     l1639:
  2043                           
  2044                           ;main.c: 188:     TRISEbits.TRISE1 = 0;
  2045     06A5  1089               	bcf	9,1	;volatile
  2046     06A6                     l1641:
  2047                           
  2048                           ;main.c: 189:     TRISEbits.TRISE2 = 0;
  2049     06A6  1109               	bcf	9,2	;volatile
  2050     06A7                     l1643:
  2051                           
  2052                           ;main.c: 191:     PORTEbits.RE1 = 1;
  2053     06A7  1283               	bcf	3,5	;RP0=0, select bank0
  2054     06A8  1303               	bcf	3,6	;RP1=0, select bank0
  2055     06A9  1489               	bsf	9,1	;volatile
  2056     06AA                     l1645:
  2057                           
  2058                           ;main.c: 192:     PORTD = dato;
  2059     06AA  0875               	movf	lcdSend@dato,w
  2060     06AB  0088               	movwf	8	;volatile
  2061     06AC                     l1647:
  2062                           
  2063                           ;main.c: 193:     PORTEbits.RE2 = tipo;
  2064     06AC  0C74               	rrf	lcdSend@tipo,w
  2065     06AD  1C03               	skipc
  2066     06AE  1109               	bcf	9,2	;volatile
  2067     06AF  1803               	skipnc
  2068     06B0  1509               	bsf	9,2	;volatile
  2069     06B1                     l1649:
  2070                           
  2071                           ;main.c: 194:     _delay((unsigned long)((3)*(20000000/4000.0)));
  2072     06B1  3014               	movlw	20
  2073     06B2  1283               	bcf	3,5	;RP0=0, select bank0
  2074     06B3  1303               	bcf	3,6	;RP1=0, select bank0
  2075     06B4  00C6               	movwf	??_lcdSend+1
  2076     06B5  3079               	movlw	121
  2077     06B6  00C5               	movwf	??_lcdSend
  2078     06B7                     u1827:
  2079     06B7  0BC5               	decfsz	??_lcdSend,f
  2080     06B8  2EB7               	goto	u1827
  2081     06B9  0BC6               	decfsz	??_lcdSend+1,f
  2082     06BA  2EB7               	goto	u1827
  2083     06BB                     l1651:
  2084                           
  2085                           ;main.c: 195:     PORTEbits.RE1 = 0;
  2086     06BB  1283               	bcf	3,5	;RP0=0, select bank0
  2087     06BC  1303               	bcf	3,6	;RP1=0, select bank0
  2088     06BD  1089               	bcf	9,1	;volatile
  2089     06BE                     l1653:
  2090                           
  2091                           ;main.c: 196:     _delay((unsigned long)((3)*(20000000/4000.0)));
  2092     06BE  3014               	movlw	20
  2093     06BF  1283               	bcf	3,5	;RP0=0, select bank0
  2094     06C0  1303               	bcf	3,6	;RP1=0, select bank0
  2095     06C1  00C6               	movwf	??_lcdSend+1
  2096     06C2  3079               	movlw	121
  2097     06C3  00C5               	movwf	??_lcdSend
  2098     06C4                     u1837:
  2099     06C4  0BC5               	decfsz	??_lcdSend,f
  2100     06C5  2EC4               	goto	u1837
  2101     06C6  0BC6               	decfsz	??_lcdSend+1,f
  2102     06C7  2EC4               	goto	u1837
  2103     06C8                     l1655:
  2104                           
  2105                           ;main.c: 197:     PORTEbits.RE1 = 1;
  2106     06C8  1283               	bcf	3,5	;RP0=0, select bank0
  2107     06C9  1303               	bcf	3,6	;RP1=0, select bank0
  2108     06CA  1489               	bsf	9,1	;volatile
  2109     06CB                     l120:
  2110     06CB  0008               	return
  2111     06CC                     __end_of_lcdSend:
  2112                           
  2113                           	psect	text11
  2114     05B5                     __ptext11:	
  2115 ;; *************** function _UART_init *****************
  2116 ;; Defined at:
  2117 ;;		line 387 in file "main.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  baudrate        4   28[BANK0 ] long 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;		None
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0, pclath, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2131 ;;      Params:         0       4       0       0       0
  2132 ;;      Locals:         0       0       0       0       0
  2133 ;;      Temps:          0       4       0       0       0
  2134 ;;      Totals:         0       8       0       0       0
  2135 ;;Total ram usage:        8 bytes
  2136 ;; Hardware stack levels used: 1
  2137 ;; Hardware stack levels required when called: 2
  2138 ;; This function calls:
  2139 ;;		___aldiv
  2140 ;; This function is called by:
  2141 ;;		_init_PIC
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145     05B5                     _UART_init:	
  2146                           ;psect for function _UART_init
  2147                           
  2148     05B5                     l1725:	
  2149                           ;incstack = 0
  2150                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  2151                           
  2152                           
  2153                           ;main.c: 387: void UART_init(long int baudrate);main.c: 388: {;main.c: 390:     TRISC &=
      +                           ~0x40;
  2154     05B5  30BF               	movlw	191
  2155     05B6  1283               	bcf	3,5	;RP0=0, select bank0
  2156     05B7  1303               	bcf	3,6	;RP1=0, select bank0
  2157     05B8  00E5               	movwf	??_UART_init
  2158     05B9  0865               	movf	??_UART_init,w
  2159     05BA  1683               	bsf	3,5	;RP0=1, select bank1
  2160     05BB  1303               	bcf	3,6	;RP1=0, select bank1
  2161     05BC  0587               	andwf	7,f	;volatile
  2162     05BD                     l1727:
  2163                           
  2164                           ;main.c: 391:     TRISC |= 0x80;
  2165     05BD  1787               	bsf	7,7	;volatile
  2166                           
  2167                           ;main.c: 392:     TXSTA |= 0x24;
  2168     05BE  3024               	movlw	36
  2169     05BF  1283               	bcf	3,5	;RP0=0, select bank0
  2170     05C0  1303               	bcf	3,6	;RP1=0, select bank0
  2171     05C1  00E5               	movwf	??_UART_init
  2172     05C2  0865               	movf	??_UART_init,w
  2173     05C3  1683               	bsf	3,5	;RP0=1, select bank1
  2174     05C4  1303               	bcf	3,6	;RP1=0, select bank1
  2175     05C5  0498               	iorwf	24,f	;volatile
  2176     05C6                     l1729:
  2177                           
  2178                           ;main.c: 393:     RCSTA |= 0x80;
  2179     05C6  1283               	bcf	3,5	;RP0=0, select bank0
  2180     05C7  1303               	bcf	3,6	;RP1=0, select bank0
  2181     05C8  1798               	bsf	24,7	;volatile
  2182     05C9                     l1731:
  2183                           
  2184                           ;main.c: 394:     RCSTA |= 0x10;
  2185     05C9  1618               	bsf	24,4	;volatile
  2186     05CA                     l1733:
  2187                           
  2188                           ;main.c: 397:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  2189     05CA  0861               	movf	UART_init@baudrate,w
  2190     05CB  00E5               	movwf	??_UART_init
  2191     05CC  0862               	movf	UART_init@baudrate+1,w
  2192     05CD  00E6               	movwf	??_UART_init+1
  2193     05CE  0863               	movf	UART_init@baudrate+2,w
  2194     05CF  00E7               	movwf	??_UART_init+2
  2195     05D0  0864               	movf	UART_init@baudrate+3,w
  2196     05D1  00E8               	movwf	??_UART_init+3
  2197     05D2  3006               	movlw	6
  2198     05D3                     u1485:
  2199     05D3  1003               	clrc
  2200     05D4  0DE5               	rlf	??_UART_init,f
  2201     05D5  0DE6               	rlf	??_UART_init+1,f
  2202     05D6  0DE7               	rlf	??_UART_init+2,f
  2203     05D7  0DE8               	rlf	??_UART_init+3,f
  2204     05D8                     u1480:
  2205     05D8  3EFF               	addlw	-1
  2206     05D9  1D03               	skipz
  2207     05DA  2DD3               	goto	u1485
  2208     05DB  0868               	movf	??_UART_init+3,w
  2209     05DC  00D5               	movwf	___aldiv@divisor+3
  2210     05DD  0867               	movf	??_UART_init+2,w
  2211     05DE  00D4               	movwf	___aldiv@divisor+2
  2212     05DF  0866               	movf	??_UART_init+1,w
  2213     05E0  00D3               	movwf	___aldiv@divisor+1
  2214     05E1  0865               	movf	??_UART_init,w
  2215     05E2  00D2               	movwf	___aldiv@divisor
  2216     05E3  3001               	movlw	1
  2217     05E4  00D9               	movwf	___aldiv@dividend+3
  2218     05E5  3031               	movlw	49
  2219     05E6  00D8               	movwf	___aldiv@dividend+2
  2220     05E7  302D               	movlw	45
  2221     05E8  00D7               	movwf	___aldiv@dividend+1
  2222     05E9  3000               	movlw	0
  2223     05EA  00D6               	movwf	___aldiv@dividend
  2224     05EB  120A  118A  221D  120A  118A  	fcall	___aldiv
  2225     05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2226     05F1  1303               	bcf	3,6	;RP1=0, select bank0
  2227     05F2  0852               	movf	?___aldiv,w
  2228     05F3  3EFF               	addlw	255
  2229     05F4  1683               	bsf	3,5	;RP0=1, select bank1
  2230     05F5  1303               	bcf	3,6	;RP1=0, select bank1
  2231     05F6  0099               	movwf	25	;volatile
  2232     05F7                     l1735:
  2233                           
  2234                           ;main.c: 400:     INTCON |= 0x80;
  2235     05F7  178B               	bsf	11,7	;volatile
  2236     05F8                     l1737:
  2237                           
  2238                           ;main.c: 402:     INTCON |= 0x40;
  2239     05F8  170B               	bsf	11,6	;volatile
  2240     05F9                     l1739:
  2241                           
  2242                           ;main.c: 404:     PIE1 |= 0x20;
  2243     05F9  168C               	bsf	12,5	;volatile
  2244     05FA                     l178:
  2245     05FA  0008               	return
  2246     05FB                     __end_of_UART_init:
  2247                           
  2248                           	psect	text12
  2249     071A                     __ptext12:	
  2250 ;; *************** function _UART_TxString *****************
  2251 ;; Defined at:
  2252 ;;		line 417 in file "main.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;  str             1    wreg     PTR const unsigned char 
  2255 ;;		 -> main@packet(50), 
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;  str             1    1[BANK0 ] PTR const unsigned char 
  2258 ;;		 -> main@packet(50), 
  2259 ;;  n               2    2[BANK0 ] unsigned int 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2269 ;;      Params:         0       0       0       0       0
  2270 ;;      Locals:         0       3       0       0       0
  2271 ;;      Temps:          0       1       0       0       0
  2272 ;;      Totals:         0       4       0       0       0
  2273 ;;Total ram usage:        4 bytes
  2274 ;; Hardware stack levels used: 1
  2275 ;; Hardware stack levels required when called: 2
  2276 ;; This function calls:
  2277 ;;		_UART_TxChar
  2278 ;; This function is called by:
  2279 ;;		_main
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283     071A                     _UART_TxString:	
  2284                           ;psect for function _UART_TxString
  2285                           
  2286                           
  2287                           ;incstack = 0
  2288                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2289                           ;UART_TxString@str stored from wreg
  2290     071A  1283               	bcf	3,5	;RP0=0, select bank0
  2291     071B  1303               	bcf	3,6	;RP1=0, select bank0
  2292     071C  00C6               	movwf	UART_TxString@str
  2293     071D                     l1933:
  2294                           
  2295                           ;main.c: 417: void UART_TxString(const char *str);main.c: 418: {;main.c: 419:     unsign
      +                          ed int n = 0;
  2296     071D  01C7               	clrf	UART_TxString@n
  2297     071E  01C8               	clrf	UART_TxString@n+1
  2298                           
  2299                           ;main.c: 421:     while(str[n] != '\0')
  2300     071F  2F33               	goto	l1939
  2301     0720                     l1935:
  2302                           
  2303                           ;main.c: 422:     {;main.c: 423:         UART_TxChar(str[n]);
  2304     0720  0847               	movf	UART_TxString@n,w
  2305     0721  0746               	addwf	UART_TxString@str,w
  2306     0722  00C5               	movwf	??_UART_TxString
  2307     0723  0845               	movf	??_UART_TxString,w
  2308     0724  0084               	movwf	4
  2309     0725  0800               	movf	0,w
  2310     0726  120A  118A  2773  120A  118A  	fcall	_UART_TxChar
  2311     072B                     l1937:
  2312                           
  2313                           ;main.c: 424:         n++;
  2314     072B  3001               	movlw	1
  2315     072C  1283               	bcf	3,5	;RP0=0, select bank0
  2316     072D  1303               	bcf	3,6	;RP1=0, select bank0
  2317     072E  07C7               	addwf	UART_TxString@n,f
  2318     072F  1803               	skipnc
  2319     0730  0AC8               	incf	UART_TxString@n+1,f
  2320     0731  3000               	movlw	0
  2321     0732  07C8               	addwf	UART_TxString@n+1,f
  2322     0733                     l1939:
  2323                           
  2324                           ;main.c: 421:     while(str[n] != '\0')
  2325     0733  0847               	movf	UART_TxString@n,w
  2326     0734  0746               	addwf	UART_TxString@str,w
  2327     0735  00C5               	movwf	??_UART_TxString
  2328     0736  0845               	movf	??_UART_TxString,w
  2329     0737  0084               	movwf	4
  2330     0738  1383               	bcf	3,7	;select IRP bank0
  2331     0739  0800               	movf	0,w
  2332     073A  1D03               	btfss	3,2
  2333     073B  2F3D               	goto	u1751
  2334     073C  2F3E               	goto	u1750
  2335     073D                     u1751:
  2336     073D  2F20               	goto	l1935
  2337     073E                     u1750:
  2338     073E                     l190:
  2339     073E  0008               	return
  2340     073F                     __end_of_UART_TxString:
  2341                           
  2342                           	psect	text13
  2343     0773                     __ptext13:	
  2344 ;; *************** function _UART_TxChar *****************
  2345 ;; Defined at:
  2346 ;;		line 407 in file "main.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  ch              1    wreg     unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  ch              1    5[COMMON] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2360 ;;      Params:         0       0       0       0       0
  2361 ;;      Locals:         1       0       0       0       0
  2362 ;;      Temps:          1       0       0       0       0
  2363 ;;      Totals:         2       0       0       0       0
  2364 ;;Total ram usage:        2 bytes
  2365 ;; Hardware stack levels used: 1
  2366 ;; Hardware stack levels required when called: 1
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_UART_TxString
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374     0773                     _UART_TxChar:	
  2375                           ;psect for function _UART_TxChar
  2376                           
  2377                           
  2378                           ;incstack = 0
  2379                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  2380                           ;UART_TxChar@ch stored from wreg
  2381     0773  00F5               	movwf	UART_TxChar@ch
  2382     0774                     l1785:
  2383     0774                     l181:	
  2384                           ;main.c: 407: void UART_TxChar(char ch);main.c: 408: {;main.c: 410:     while(!(PIR1 & 0
      +                          x10));
  2385                           
  2386     0774  1283               	bcf	3,5	;RP0=0, select bank0
  2387     0775  1303               	bcf	3,6	;RP1=0, select bank0
  2388     0776  1E0C               	btfss	12,4	;volatile
  2389     0777  2F79               	goto	u1511
  2390     0778  2F7A               	goto	u1510
  2391     0779                     u1511:
  2392     0779  2F74               	goto	l181
  2393     077A                     u1510:
  2394     077A                     l1787:
  2395                           
  2396                           ;main.c: 412:     PIR1 &= ~0x10;
  2397     077A  30EF               	movlw	239
  2398     077B  00F4               	movwf	??_UART_TxChar
  2399     077C  0874               	movf	??_UART_TxChar,w
  2400     077D  058C               	andwf	12,f	;volatile
  2401     077E                     l1789:
  2402                           
  2403                           ;main.c: 414:     TXREG = ch;
  2404     077E  0875               	movf	UART_TxChar@ch,w
  2405     077F  0099               	movwf	25	;volatile
  2406     0780                     l184:
  2407     0780  0008               	return
  2408     0781                     __end_of_UART_TxChar:
  2409                           
  2410                           	psect	text14
  2411     0047                     __ptext14:	
  2412 ;; *************** function _ConvertToString *****************
  2413 ;; Defined at:
  2414 ;;		line 222 in file "main.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  n               4   28[BANK0 ] long 
  2417 ;;  str             1   32[BANK0 ] PTR unsigned char 
  2418 ;;		 -> main@num_rand_s(16), 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  temp            2    0[BANK1 ] int 
  2421 ;;  i               2    4[BANK1 ] int 
  2422 ;;  j               2    2[BANK1 ] int 
  2423 ;;  n_cifre         1    6[BANK1 ] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2433 ;;      Params:         0       5       0       0       0
  2434 ;;      Locals:         0       0       7       0       0
  2435 ;;      Temps:          0       1       0       0       0
  2436 ;;      Totals:         0       6       7       0       0
  2437 ;;Total ram usage:       13 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; Hardware stack levels required when called: 3
  2440 ;; This function calls:
  2441 ;;		___aldiv
  2442 ;;		___almod
  2443 ;;		___lmul
  2444 ;;		_pow
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450     0047                     _ConvertToString:	
  2451                           ;psect for function _ConvertToString
  2452                           
  2453     0047                     l1879:	
  2454                           ;incstack = 0
  2455                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2456                           
  2457                           
  2458                           ;main.c: 222: void ConvertToString(long n, char* str);main.c: 223: {;main.c: 226:     in
      +                          t i = 0, j = 0;
  2459     0047  1683               	bsf	3,5	;RP0=1, select bank1
  2460     0048  1303               	bcf	3,6	;RP1=0, select bank1
  2461     0049  01A4               	clrf	ConvertToString@i^(0+128)
  2462     004A  01A5               	clrf	(ConvertToString@i+1)^(0+128)
  2463     004B  01A2               	clrf	ConvertToString@j^(0+128)
  2464     004C  01A3               	clrf	(ConvertToString@j+1)^(0+128)
  2465     004D                     l1881:
  2466                           
  2467                           ;main.c: 227:     if(n < 0)
  2468     004D  1283               	bcf	3,5	;RP0=0, select bank0
  2469     004E  1303               	bcf	3,6	;RP1=0, select bank0
  2470     004F  1FE4               	btfss	ConvertToString@n+3,7
  2471     0050  2852               	goto	u1701
  2472     0051  2853               	goto	u1700
  2473     0052                     u1701:
  2474     0052  287F               	goto	l1889
  2475     0053                     u1700:
  2476     0053                     l1883:
  2477                           
  2478                           ;main.c: 228:     {;main.c: 229:         i = 1;
  2479     0053  3001               	movlw	1
  2480     0054  1683               	bsf	3,5	;RP0=1, select bank1
  2481     0055  1303               	bcf	3,6	;RP1=0, select bank1
  2482     0056  00A4               	movwf	ConvertToString@i^(0+128)
  2483     0057  3000               	movlw	0
  2484     0058  00A5               	movwf	(ConvertToString@i^(0+128)+1)
  2485     0059                     l1885:
  2486                           
  2487                           ;main.c: 230:         str[0] = '-';
  2488     0059  1283               	bcf	3,5	;RP0=0, select bank0
  2489     005A  1303               	bcf	3,6	;RP1=0, select bank0
  2490     005B  0865               	movf	ConvertToString@str,w
  2491     005C  0084               	movwf	4
  2492     005D  302D               	movlw	45
  2493     005E  1383               	bcf	3,7	;select IRP bank0
  2494     005F  0080               	movwf	0
  2495     0060                     l1887:
  2496                           
  2497                           ;main.c: 231:         n *= -1;
  2498     0060  30FF               	movlw	255
  2499     0061  00C8               	movwf	___lmul@multiplier+3
  2500     0062  30FF               	movlw	255
  2501     0063  00C7               	movwf	___lmul@multiplier+2
  2502     0064  30FF               	movlw	255
  2503     0065  00C6               	movwf	___lmul@multiplier+1
  2504     0066  30FF               	movlw	255
  2505     0067  00C5               	movwf	___lmul@multiplier
  2506     0068  0864               	movf	ConvertToString@n+3,w
  2507     0069  00CC               	movwf	___lmul@multiplicand+3
  2508     006A  0863               	movf	ConvertToString@n+2,w
  2509     006B  00CB               	movwf	___lmul@multiplicand+2
  2510     006C  0862               	movf	ConvertToString@n+1,w
  2511     006D  00CA               	movwf	___lmul@multiplicand+1
  2512     006E  0861               	movf	ConvertToString@n,w
  2513     006F  00C9               	movwf	___lmul@multiplicand
  2514     0070  120A  118A  2526  120A  118A  	fcall	___lmul
  2515     0075  1283               	bcf	3,5	;RP0=0, select bank0
  2516     0076  1303               	bcf	3,6	;RP1=0, select bank0
  2517     0077  0848               	movf	?___lmul+3,w
  2518     0078  00E4               	movwf	ConvertToString@n+3
  2519     0079  0847               	movf	?___lmul+2,w
  2520     007A  00E3               	movwf	ConvertToString@n+2
  2521     007B  0846               	movf	?___lmul+1,w
  2522     007C  00E2               	movwf	ConvertToString@n+1
  2523     007D  0845               	movf	?___lmul,w
  2524     007E  00E1               	movwf	ConvertToString@n
  2525     007F                     l1889:
  2526                           
  2527                           ;main.c: 234:     char n_cifre = 1;
  2528     007F  1683               	bsf	3,5	;RP0=1, select bank1
  2529     0080  1303               	bcf	3,6	;RP1=0, select bank1
  2530     0081  01A6               	clrf	ConvertToString@n_cifre^(0+128)
  2531     0082  0AA6               	incf	ConvertToString@n_cifre^(0+128),f
  2532                           
  2533                           ;main.c: 236:     while(n / pow(10, n_cifre))
  2534     0083  288A               	goto	l1893
  2535     0084                     l1891:
  2536                           
  2537                           ;main.c: 237:         n_cifre++;
  2538     0084  3001               	movlw	1
  2539     0085  00E6               	movwf	??_ConvertToString
  2540     0086  0866               	movf	??_ConvertToString,w
  2541     0087  1683               	bsf	3,5	;RP0=1, select bank1
  2542     0088  1303               	bcf	3,6	;RP1=0, select bank1
  2543     0089  07A6               	addwf	ConvertToString@n_cifre^(0+128),f
  2544     008A                     l1893:
  2545                           
  2546                           ;main.c: 236:     while(n / pow(10, n_cifre))
  2547     008A  0826               	movf	ConvertToString@n_cifre^(0+128),w
  2548     008B  1283               	bcf	3,5	;RP0=0, select bank0
  2549     008C  1303               	bcf	3,6	;RP1=0, select bank0
  2550     008D  00C9               	movwf	pow@exp
  2551     008E  300A               	movlw	10
  2552     008F  120A  118A  2638  120A  118A  	fcall	_pow
  2553     0094  1283               	bcf	3,5	;RP0=0, select bank0
  2554     0095  1303               	bcf	3,6	;RP1=0, select bank0
  2555     0096  0849               	movf	?_pow,w
  2556     0097  00D2               	movwf	___aldiv@divisor
  2557     0098  084A               	movf	?_pow+1,w
  2558     0099  00D3               	movwf	___aldiv@divisor+1
  2559     009A  3000               	movlw	0
  2560     009B  1BD3               	btfsc	___aldiv@divisor+1,7
  2561     009C  30FF               	movlw	255
  2562     009D  00D4               	movwf	___aldiv@divisor+2
  2563     009E  00D5               	movwf	___aldiv@divisor+3
  2564     009F  0864               	movf	ConvertToString@n+3,w
  2565     00A0  00D9               	movwf	___aldiv@dividend+3
  2566     00A1  0863               	movf	ConvertToString@n+2,w
  2567     00A2  00D8               	movwf	___aldiv@dividend+2
  2568     00A3  0862               	movf	ConvertToString@n+1,w
  2569     00A4  00D7               	movwf	___aldiv@dividend+1
  2570     00A5  0861               	movf	ConvertToString@n,w
  2571     00A6  00D6               	movwf	___aldiv@dividend
  2572     00A7  120A  118A  221D  120A  118A  	fcall	___aldiv
  2573     00AC  1283               	bcf	3,5	;RP0=0, select bank0
  2574     00AD  1303               	bcf	3,6	;RP1=0, select bank0
  2575     00AE  0855               	movf	?___aldiv+3,w
  2576     00AF  0454               	iorwf	?___aldiv+2,w
  2577     00B0  0453               	iorwf	?___aldiv+1,w
  2578     00B1  0452               	iorwf	?___aldiv,w
  2579     00B2  1D03               	skipz
  2580     00B3  28B5               	goto	u1711
  2581     00B4  28B6               	goto	u1710
  2582     00B5                     u1711:
  2583     00B5  2884               	goto	l1891
  2584     00B6                     u1710:
  2585     00B6  2932               	goto	l1905
  2586     00B7                     l1895:
  2587                           
  2588                           ;main.c: 240:     {;main.c: 241:         int temp = pow(10, (char)(n_cifre - 1 - j));
  2589     00B7  1683               	bsf	3,5	;RP0=1, select bank1
  2590     00B8  1303               	bcf	3,6	;RP1=0, select bank1
  2591     00B9  0822               	movf	ConvertToString@j^(0+128),w
  2592     00BA  0226               	subwf	ConvertToString@n_cifre^(0+128),w
  2593     00BB  3EFF               	addlw	255
  2594     00BC  1283               	bcf	3,5	;RP0=0, select bank0
  2595     00BD  1303               	bcf	3,6	;RP1=0, select bank0
  2596     00BE  00C9               	movwf	pow@exp
  2597     00BF  300A               	movlw	10
  2598     00C0  120A  118A  2638  120A  118A  	fcall	_pow
  2599     00C5  1283               	bcf	3,5	;RP0=0, select bank0
  2600     00C6  1303               	bcf	3,6	;RP1=0, select bank0
  2601     00C7  084A               	movf	?_pow+1,w
  2602     00C8  1683               	bsf	3,5	;RP0=1, select bank1
  2603     00C9  1303               	bcf	3,6	;RP1=0, select bank1
  2604     00CA  00A1               	movwf	(ConvertToString@temp+1)^(0+128)
  2605     00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2606     00CC  1303               	bcf	3,6	;RP1=0, select bank0
  2607     00CD  0849               	movf	?_pow,w
  2608     00CE  1683               	bsf	3,5	;RP0=1, select bank1
  2609     00CF  1303               	bcf	3,6	;RP1=0, select bank1
  2610     00D0  00A0               	movwf	ConvertToString@temp^(0+128)
  2611     00D1                     l1897:
  2612                           
  2613                           ;main.c: 243:         str[i] = (char)(n/temp) + '0';
  2614     00D1  0824               	movf	ConvertToString@i^(0+128),w
  2615     00D2  1283               	bcf	3,5	;RP0=0, select bank0
  2616     00D3  1303               	bcf	3,6	;RP1=0, select bank0
  2617     00D4  0765               	addwf	ConvertToString@str,w
  2618     00D5  00E6               	movwf	??_ConvertToString
  2619     00D6  0866               	movf	??_ConvertToString,w
  2620     00D7  0084               	movwf	4
  2621     00D8  1683               	bsf	3,5	;RP0=1, select bank1
  2622     00D9  1303               	bcf	3,6	;RP1=0, select bank1
  2623     00DA  0820               	movf	ConvertToString@temp^(0+128),w
  2624     00DB  1283               	bcf	3,5	;RP0=0, select bank0
  2625     00DC  1303               	bcf	3,6	;RP1=0, select bank0
  2626     00DD  00D2               	movwf	___aldiv@divisor
  2627     00DE  1683               	bsf	3,5	;RP0=1, select bank1
  2628     00DF  1303               	bcf	3,6	;RP1=0, select bank1
  2629     00E0  0821               	movf	(ConvertToString@temp+1)^(0+128),w
  2630     00E1  1283               	bcf	3,5	;RP0=0, select bank0
  2631     00E2  1303               	bcf	3,6	;RP1=0, select bank0
  2632     00E3  00D3               	movwf	___aldiv@divisor+1
  2633     00E4  3000               	movlw	0
  2634     00E5  1BD3               	btfsc	___aldiv@divisor+1,7
  2635     00E6  30FF               	movlw	255
  2636     00E7  00D4               	movwf	___aldiv@divisor+2
  2637     00E8  00D5               	movwf	___aldiv@divisor+3
  2638     00E9  0864               	movf	ConvertToString@n+3,w
  2639     00EA  00D9               	movwf	___aldiv@dividend+3
  2640     00EB  0863               	movf	ConvertToString@n+2,w
  2641     00EC  00D8               	movwf	___aldiv@dividend+2
  2642     00ED  0862               	movf	ConvertToString@n+1,w
  2643     00EE  00D7               	movwf	___aldiv@dividend+1
  2644     00EF  0861               	movf	ConvertToString@n,w
  2645     00F0  00D6               	movwf	___aldiv@dividend
  2646     00F1  120A  118A  221D  120A  118A  	fcall	___aldiv
  2647     00F6  1283               	bcf	3,5	;RP0=0, select bank0
  2648     00F7  1303               	bcf	3,6	;RP1=0, select bank0
  2649     00F8  0852               	movf	?___aldiv,w
  2650     00F9  3E30               	addlw	48
  2651     00FA  1383               	bcf	3,7	;select IRP bank0
  2652     00FB  0080               	movwf	0
  2653     00FC                     l1899:
  2654                           
  2655                           ;main.c: 245:         n = n % temp;
  2656     00FC  1683               	bsf	3,5	;RP0=1, select bank1
  2657     00FD  1303               	bcf	3,6	;RP1=0, select bank1
  2658     00FE  0820               	movf	ConvertToString@temp^(0+128),w
  2659     00FF  1283               	bcf	3,5	;RP0=0, select bank0
  2660     0100  1303               	bcf	3,6	;RP1=0, select bank0
  2661     0101  00C5               	movwf	___almod@divisor
  2662     0102  1683               	bsf	3,5	;RP0=1, select bank1
  2663     0103  1303               	bcf	3,6	;RP1=0, select bank1
  2664     0104  0821               	movf	(ConvertToString@temp+1)^(0+128),w
  2665     0105  1283               	bcf	3,5	;RP0=0, select bank0
  2666     0106  1303               	bcf	3,6	;RP1=0, select bank0
  2667     0107  00C6               	movwf	___almod@divisor+1
  2668     0108  3000               	movlw	0
  2669     0109  1BC6               	btfsc	___almod@divisor+1,7
  2670     010A  30FF               	movlw	255
  2671     010B  00C7               	movwf	___almod@divisor+2
  2672     010C  00C8               	movwf	___almod@divisor+3
  2673     010D  0864               	movf	ConvertToString@n+3,w
  2674     010E  00CC               	movwf	___almod@dividend+3
  2675     010F  0863               	movf	ConvertToString@n+2,w
  2676     0110  00CB               	movwf	___almod@dividend+2
  2677     0111  0862               	movf	ConvertToString@n+1,w
  2678     0112  00CA               	movwf	___almod@dividend+1
  2679     0113  0861               	movf	ConvertToString@n,w
  2680     0114  00C9               	movwf	___almod@dividend
  2681     0115  120A  118A  22BA  120A  118A  	fcall	___almod
  2682     011A  1283               	bcf	3,5	;RP0=0, select bank0
  2683     011B  1303               	bcf	3,6	;RP1=0, select bank0
  2684     011C  0848               	movf	?___almod+3,w
  2685     011D  00E4               	movwf	ConvertToString@n+3
  2686     011E  0847               	movf	?___almod+2,w
  2687     011F  00E3               	movwf	ConvertToString@n+2
  2688     0120  0846               	movf	?___almod+1,w
  2689     0121  00E2               	movwf	ConvertToString@n+1
  2690     0122  0845               	movf	?___almod,w
  2691     0123  00E1               	movwf	ConvertToString@n
  2692     0124                     l1901:
  2693                           
  2694                           ;main.c: 246:         i++;
  2695     0124  3001               	movlw	1
  2696     0125  1683               	bsf	3,5	;RP0=1, select bank1
  2697     0126  1303               	bcf	3,6	;RP1=0, select bank1
  2698     0127  07A4               	addwf	ConvertToString@i^(0+128),f
  2699     0128  1803               	skipnc
  2700     0129  0AA5               	incf	(ConvertToString@i+1)^(0+128),f
  2701     012A  3000               	movlw	0
  2702     012B  07A5               	addwf	(ConvertToString@i+1)^(0+128),f
  2703     012C                     l1903:
  2704                           
  2705                           ;main.c: 247:         j++;
  2706     012C  3001               	movlw	1
  2707     012D  07A2               	addwf	ConvertToString@j^(0+128),f
  2708     012E  1803               	skipnc
  2709     012F  0AA3               	incf	(ConvertToString@j+1)^(0+128),f
  2710     0130  3000               	movlw	0
  2711     0131  07A3               	addwf	(ConvertToString@j+1)^(0+128),f
  2712     0132                     l1905:
  2713                           
  2714                           ;main.c: 239:     while(j < n_cifre)
  2715     0132  1683               	bsf	3,5	;RP0=1, select bank1
  2716     0133  1303               	bcf	3,6	;RP1=0, select bank1
  2717     0134  0823               	movf	(ConvertToString@j+1)^(0+128),w
  2718     0135  3A80               	xorlw	128
  2719     0136  1283               	bcf	3,5	;RP0=0, select bank0
  2720     0137  1303               	bcf	3,6	;RP1=0, select bank0
  2721     0138  00E6               	movwf	??_ConvertToString
  2722     0139  3080               	movlw	128
  2723     013A  0266               	subwf	??_ConvertToString,w
  2724     013B  1D03               	skipz
  2725     013C  2941               	goto	u1725
  2726     013D  1683               	bsf	3,5	;RP0=1, select bank1
  2727     013E  1303               	bcf	3,6	;RP1=0, select bank1
  2728     013F  0826               	movf	ConvertToString@n_cifre^(0+128),w
  2729     0140  0222               	subwf	ConvertToString@j^(0+128),w
  2730     0141                     u1725:
  2731     0141  1C03               	skipc
  2732     0142  2944               	goto	u1721
  2733     0143  2945               	goto	u1720
  2734     0144                     u1721:
  2735     0144  28B7               	goto	l1895
  2736     0145                     u1720:
  2737     0145                     l1907:
  2738                           
  2739                           ;main.c: 250:     str[i] = '\0';
  2740     0145  1683               	bsf	3,5	;RP0=1, select bank1
  2741     0146  1303               	bcf	3,6	;RP1=0, select bank1
  2742     0147  0824               	movf	ConvertToString@i^(0+128),w
  2743     0148  1283               	bcf	3,5	;RP0=0, select bank0
  2744     0149  1303               	bcf	3,6	;RP1=0, select bank0
  2745     014A  0765               	addwf	ConvertToString@str,w
  2746     014B  00E6               	movwf	??_ConvertToString
  2747     014C  0866               	movf	??_ConvertToString,w
  2748     014D  0084               	movwf	4
  2749     014E  1383               	bcf	3,7	;select IRP bank0
  2750     014F  0180               	clrf	0
  2751     0150                     l142:
  2752     0150  0008               	return
  2753     0151                     __end_of_ConvertToString:
  2754                           
  2755                           	psect	text15
  2756     0638                     __ptext15:	
  2757 ;; *************** function _pow *****************
  2758 ;; Defined at:
  2759 ;;		line 211 in file "main.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  b               1    wreg     unsigned char 
  2762 ;;  exp             1    4[BANK0 ] unsigned char 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  b               1    8[BANK0 ] unsigned char 
  2765 ;;  i               2    9[BANK0 ] int 
  2766 ;;  n               2   11[BANK0 ] int 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  2    4[BANK0 ] int 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0, pclath, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2776 ;;      Params:         0       2       0       0       0
  2777 ;;      Locals:         0       5       0       0       0
  2778 ;;      Temps:          0       2       0       0       0
  2779 ;;      Totals:         0       9       0       0       0
  2780 ;;Total ram usage:        9 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; Hardware stack levels required when called: 2
  2783 ;; This function calls:
  2784 ;;		___wmul
  2785 ;; This function is called by:
  2786 ;;		_ConvertToString
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790     0638                     _pow:	
  2791                           ;psect for function _pow
  2792                           
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  2796                           ;pow@b stored from wreg
  2797     0638  1283               	bcf	3,5	;RP0=0, select bank0
  2798     0639  1303               	bcf	3,6	;RP1=0, select bank0
  2799     063A  00CD               	movwf	pow@b
  2800     063B                     l1763:
  2801                           
  2802                           ;main.c: 211: int pow(char b, char exp);main.c: 212: {;main.c: 213:     int n = 1;
  2803     063B  3001               	movlw	1
  2804     063C  00D0               	movwf	pow@n
  2805     063D  3000               	movlw	0
  2806     063E  00D1               	movwf	pow@n+1
  2807     063F                     l1765:
  2808                           
  2809                           ;main.c: 214:     for(int i = 0; i < exp; i++)
  2810     063F  01CE               	clrf	pow@i
  2811     0640  01CF               	clrf	pow@i+1
  2812     0641  2E60               	goto	l1771
  2813     0642                     l1767:
  2814                           
  2815                           ;main.c: 215:     {;main.c: 216:         n *= b;
  2816     0642  1283               	bcf	3,5	;RP0=0, select bank0
  2817     0643  1303               	bcf	3,6	;RP1=0, select bank0
  2818     0644  084D               	movf	pow@b,w
  2819     0645  00CB               	movwf	??_pow
  2820     0646  01CC               	clrf	??_pow+1
  2821     0647  084B               	movf	??_pow,w
  2822     0648  00C5               	movwf	___wmul@multiplier
  2823     0649  084C               	movf	??_pow+1,w
  2824     064A  00C6               	movwf	___wmul@multiplier+1
  2825     064B  0851               	movf	pow@n+1,w
  2826     064C  00C8               	movwf	___wmul@multiplicand+1
  2827     064D  0850               	movf	pow@n,w
  2828     064E  00C7               	movwf	___wmul@multiplicand
  2829     064F  120A  118A  26F3  120A  118A  	fcall	___wmul
  2830     0654  1283               	bcf	3,5	;RP0=0, select bank0
  2831     0655  1303               	bcf	3,6	;RP1=0, select bank0
  2832     0656  0846               	movf	?___wmul+1,w
  2833     0657  00D1               	movwf	pow@n+1
  2834     0658  0845               	movf	?___wmul,w
  2835     0659  00D0               	movwf	pow@n
  2836     065A                     l1769:
  2837                           
  2838                           ;main.c: 217:     }
  2839     065A  3001               	movlw	1
  2840     065B  07CE               	addwf	pow@i,f
  2841     065C  1803               	skipnc
  2842     065D  0ACF               	incf	pow@i+1,f
  2843     065E  3000               	movlw	0
  2844     065F  07CF               	addwf	pow@i+1,f
  2845     0660                     l1771:
  2846     0660  084F               	movf	pow@i+1,w
  2847     0661  3A80               	xorlw	128
  2848     0662  00CB               	movwf	??_pow
  2849     0663  3080               	movlw	128
  2850     0664  024B               	subwf	??_pow,w
  2851     0665  1D03               	skipz
  2852     0666  2E69               	goto	u1495
  2853     0667  0849               	movf	pow@exp,w
  2854     0668  024E               	subwf	pow@i,w
  2855     0669                     u1495:
  2856     0669  1C03               	skipc
  2857     066A  2E6C               	goto	u1491
  2858     066B  2E6D               	goto	u1490
  2859     066C                     u1491:
  2860     066C  2E42               	goto	l1767
  2861     066D                     u1490:
  2862     066D                     l1773:
  2863                           
  2864                           ;main.c: 218:     return n;
  2865     066D  1283               	bcf	3,5	;RP0=0, select bank0
  2866     066E  1303               	bcf	3,6	;RP1=0, select bank0
  2867     066F  0851               	movf	pow@n+1,w
  2868     0670  00CA               	movwf	?_pow+1
  2869     0671  0850               	movf	pow@n,w
  2870     0672  00C9               	movwf	?_pow
  2871     0673                     l132:
  2872     0673  0008               	return
  2873     0674                     __end_of_pow:
  2874                           
  2875                           	psect	text16
  2876     06F3                     __ptext16:	
  2877 ;; *************** function ___wmul *****************
  2878 ;; Defined at:
  2879 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2882 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  product         2    4[COMMON] unsigned int 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  2    0[BANK0 ] unsigned int 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2894 ;;      Params:         0       4       0       0       0
  2895 ;;      Locals:         2       0       0       0       0
  2896 ;;      Temps:          0       0       0       0       0
  2897 ;;      Totals:         2       4       0       0       0
  2898 ;;Total ram usage:        6 bytes
  2899 ;; Hardware stack levels used: 1
  2900 ;; Hardware stack levels required when called: 1
  2901 ;; This function calls:
  2902 ;;		Nothing
  2903 ;; This function is called by:
  2904 ;;		_pow
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908     06F3                     ___wmul:	
  2909                           ;psect for function ___wmul
  2910                           
  2911     06F3                     l1657:	
  2912                           ;incstack = 0
  2913                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2914                           
  2915     06F3  01F4               	clrf	___wmul@product
  2916     06F4  01F5               	clrf	___wmul@product+1
  2917     06F5                     l1659:
  2918     06F5  1283               	bcf	3,5	;RP0=0, select bank0
  2919     06F6  1303               	bcf	3,6	;RP1=0, select bank0
  2920     06F7  1C45               	btfss	___wmul@multiplier,0
  2921     06F8  2EFA               	goto	u1291
  2922     06F9  2EFB               	goto	u1290
  2923     06FA                     u1291:
  2924     06FA  2F01               	goto	l283
  2925     06FB                     u1290:
  2926     06FB                     l1661:
  2927     06FB  0847               	movf	___wmul@multiplicand,w
  2928     06FC  07F4               	addwf	___wmul@product,f
  2929     06FD  1803               	skipnc
  2930     06FE  0AF5               	incf	___wmul@product+1,f
  2931     06FF  0848               	movf	___wmul@multiplicand+1,w
  2932     0700  07F5               	addwf	___wmul@product+1,f
  2933     0701                     l283:
  2934     0701  3001               	movlw	1
  2935     0702                     u1305:
  2936     0702  1003               	clrc
  2937     0703  0DC7               	rlf	___wmul@multiplicand,f
  2938     0704  0DC8               	rlf	___wmul@multiplicand+1,f
  2939     0705  3EFF               	addlw	-1
  2940     0706  1D03               	skipz
  2941     0707  2F02               	goto	u1305
  2942     0708                     l1663:
  2943     0708  3001               	movlw	1
  2944     0709                     u1315:
  2945     0709  1003               	clrc
  2946     070A  0CC6               	rrf	___wmul@multiplier+1,f
  2947     070B  0CC5               	rrf	___wmul@multiplier,f
  2948     070C  3EFF               	addlw	-1
  2949     070D  1D03               	skipz
  2950     070E  2F09               	goto	u1315
  2951     070F                     l1665:
  2952     070F  0845               	movf	___wmul@multiplier,w
  2953     0710  0446               	iorwf	___wmul@multiplier+1,w
  2954     0711  1D03               	btfss	3,2
  2955     0712  2F14               	goto	u1321
  2956     0713  2F15               	goto	u1320
  2957     0714                     u1321:
  2958     0714  2EF5               	goto	l1659
  2959     0715                     u1320:
  2960     0715                     l1667:
  2961     0715  0875               	movf	___wmul@product+1,w
  2962     0716  00C6               	movwf	?___wmul+1
  2963     0717  0874               	movf	___wmul@product,w
  2964     0718  00C5               	movwf	?___wmul
  2965     0719                     l285:
  2966     0719  0008               	return
  2967     071A                     __end_of___wmul:
  2968                           
  2969                           	psect	text17
  2970     0526                     __ptext17:	
  2971 ;; *************** function ___lmul *****************
  2972 ;; Defined at:
  2973 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2976 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  product         4    8[BANK0 ] unsigned long 
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  4    0[BANK0 ] unsigned long 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2988 ;;      Params:         0       8       0       0       0
  2989 ;;      Locals:         0       4       0       0       0
  2990 ;;      Temps:          1       0       0       0       0
  2991 ;;      Totals:         1      12       0       0       0
  2992 ;;Total ram usage:       13 bytes
  2993 ;; Hardware stack levels used: 1
  2994 ;; Hardware stack levels required when called: 1
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_ConvertToString
  2999 ;;		_rand
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003     0526                     ___lmul:	
  3004                           ;psect for function ___lmul
  3005                           
  3006     0526                     l1671:	
  3007                           ;incstack = 0
  3008                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3009                           
  3010     0526  3000               	movlw	0
  3011     0527  1283               	bcf	3,5	;RP0=0, select bank0
  3012     0528  1303               	bcf	3,6	;RP1=0, select bank0
  3013     0529  00D0               	movwf	___lmul@product+3
  3014     052A  3000               	movlw	0
  3015     052B  00CF               	movwf	___lmul@product+2
  3016     052C  3000               	movlw	0
  3017     052D  00CE               	movwf	___lmul@product+1
  3018     052E  3000               	movlw	0
  3019     052F  00CD               	movwf	___lmul@product
  3020     0530                     l1673:
  3021     0530  1C45               	btfss	___lmul@multiplier,0
  3022     0531  2D33               	goto	u1331
  3023     0532  2D34               	goto	u1330
  3024     0533                     u1331:
  3025     0533  2D4B               	goto	l1677
  3026     0534                     u1330:
  3027     0534                     l1675:
  3028     0534  0849               	movf	___lmul@multiplicand,w
  3029     0535  07CD               	addwf	___lmul@product,f
  3030     0536  084A               	movf	___lmul@multiplicand+1,w
  3031     0537  1103               	clrz
  3032     0538  1803               	skipnc
  3033     0539  3E01               	addlw	1
  3034     053A  1903               	skipnz
  3035     053B  2D3D               	goto	u1341
  3036     053C  07CE               	addwf	___lmul@product+1,f
  3037     053D                     u1341:
  3038     053D  084B               	movf	___lmul@multiplicand+2,w
  3039     053E  1103               	clrz
  3040     053F  1803               	skipnc
  3041     0540  3E01               	addlw	1
  3042     0541  1903               	skipnz
  3043     0542  2D44               	goto	u1342
  3044     0543  07CF               	addwf	___lmul@product+2,f
  3045     0544                     u1342:
  3046     0544  084C               	movf	___lmul@multiplicand+3,w
  3047     0545  1103               	clrz
  3048     0546  1803               	skipnc
  3049     0547  3E01               	addlw	1
  3050     0548  1903               	skipnz
  3051     0549  2D4B               	goto	u1343
  3052     054A  07D0               	addwf	___lmul@product+3,f
  3053     054B                     u1343:
  3054     054B                     l1677:
  3055     054B  3001               	movlw	1
  3056     054C  00F4               	movwf	??___lmul
  3057     054D                     u1355:
  3058     054D  1003               	clrc
  3059     054E  0DC9               	rlf	___lmul@multiplicand,f
  3060     054F  0DCA               	rlf	___lmul@multiplicand+1,f
  3061     0550  0DCB               	rlf	___lmul@multiplicand+2,f
  3062     0551  0DCC               	rlf	___lmul@multiplicand+3,f
  3063     0552  0BF4               	decfsz	??___lmul,f
  3064     0553  2D4D               	goto	u1355
  3065     0554                     l1679:
  3066     0554  3001               	movlw	1
  3067     0555                     u1365:
  3068     0555  1003               	clrc
  3069     0556  0CC8               	rrf	___lmul@multiplier+3,f
  3070     0557  0CC7               	rrf	___lmul@multiplier+2,f
  3071     0558  0CC6               	rrf	___lmul@multiplier+1,f
  3072     0559  0CC5               	rrf	___lmul@multiplier,f
  3073     055A  3EFF               	addlw	-1
  3074     055B  1D03               	skipz
  3075     055C  2D55               	goto	u1365
  3076     055D  0848               	movf	___lmul@multiplier+3,w
  3077     055E  0447               	iorwf	___lmul@multiplier+2,w
  3078     055F  0446               	iorwf	___lmul@multiplier+1,w
  3079     0560  0445               	iorwf	___lmul@multiplier,w
  3080     0561  1D03               	skipz
  3081     0562  2D64               	goto	u1371
  3082     0563  2D65               	goto	u1370
  3083     0564                     u1371:
  3084     0564  2D30               	goto	l1673
  3085     0565                     u1370:
  3086     0565                     l1681:
  3087     0565  0850               	movf	___lmul@product+3,w
  3088     0566  00C8               	movwf	?___lmul+3
  3089     0567  084F               	movf	___lmul@product+2,w
  3090     0568  00C7               	movwf	?___lmul+2
  3091     0569  084E               	movf	___lmul@product+1,w
  3092     056A  00C6               	movwf	?___lmul+1
  3093     056B  084D               	movf	___lmul@product,w
  3094     056C  00C5               	movwf	?___lmul
  3095     056D                     l297:
  3096     056D  0008               	return
  3097     056E                     __end_of___lmul:
  3098                           
  3099                           	psect	text18
  3100     02BA                     __ptext18:	
  3101 ;; *************** function ___almod *****************
  3102 ;; Defined at:
  3103 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  divisor         4    0[BANK0 ] long 
  3106 ;;  dividend        4    4[BANK0 ] long 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  sign            1    9[BANK0 ] unsigned char 
  3109 ;;  counter         1    8[BANK0 ] unsigned char 
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  4    0[BANK0 ] long 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3119 ;;      Params:         0       8       0       0       0
  3120 ;;      Locals:         0       2       0       0       0
  3121 ;;      Temps:          1       0       0       0       0
  3122 ;;      Totals:         1      10       0       0       0
  3123 ;;Total ram usage:       11 bytes
  3124 ;; Hardware stack levels used: 1
  3125 ;; Hardware stack levels required when called: 1
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_ConvertToString
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133     02BA                     ___almod:	
  3134                           ;psect for function ___almod
  3135                           
  3136     02BA                     l1791:	
  3137                           ;incstack = 0
  3138                           ; Regs used in ___almod: [wreg+status,2+status,0]
  3139                           
  3140     02BA  1283               	bcf	3,5	;RP0=0, select bank0
  3141     02BB  1303               	bcf	3,6	;RP1=0, select bank0
  3142     02BC  01CE               	clrf	___almod@sign
  3143     02BD                     l1793:
  3144     02BD  1FCC               	btfss	___almod@dividend+3,7
  3145     02BE  2AC0               	goto	u1521
  3146     02BF  2AC1               	goto	u1520
  3147     02C0                     u1521:
  3148     02C0  2ACE               	goto	l361
  3149     02C1                     u1520:
  3150     02C1                     l1795:
  3151     02C1  09C9               	comf	___almod@dividend,f
  3152     02C2  09CA               	comf	___almod@dividend+1,f
  3153     02C3  09CB               	comf	___almod@dividend+2,f
  3154     02C4  09CC               	comf	___almod@dividend+3,f
  3155     02C5  0AC9               	incf	___almod@dividend,f
  3156     02C6  1903               	skipnz
  3157     02C7  0ACA               	incf	___almod@dividend+1,f
  3158     02C8  1903               	skipnz
  3159     02C9  0ACB               	incf	___almod@dividend+2,f
  3160     02CA  1903               	skipnz
  3161     02CB  0ACC               	incf	___almod@dividend+3,f
  3162     02CC  01CE               	clrf	___almod@sign
  3163     02CD  0ACE               	incf	___almod@sign,f
  3164     02CE                     l361:
  3165     02CE  1FC8               	btfss	___almod@divisor+3,7
  3166     02CF  2AD1               	goto	u1531
  3167     02D0  2AD2               	goto	u1530
  3168     02D1                     u1531:
  3169     02D1  2ADD               	goto	l1799
  3170     02D2                     u1530:
  3171     02D2                     l1797:
  3172     02D2  09C5               	comf	___almod@divisor,f
  3173     02D3  09C6               	comf	___almod@divisor+1,f
  3174     02D4  09C7               	comf	___almod@divisor+2,f
  3175     02D5  09C8               	comf	___almod@divisor+3,f
  3176     02D6  0AC5               	incf	___almod@divisor,f
  3177     02D7  1903               	skipnz
  3178     02D8  0AC6               	incf	___almod@divisor+1,f
  3179     02D9  1903               	skipnz
  3180     02DA  0AC7               	incf	___almod@divisor+2,f
  3181     02DB  1903               	skipnz
  3182     02DC  0AC8               	incf	___almod@divisor+3,f
  3183     02DD                     l1799:
  3184     02DD  0848               	movf	___almod@divisor+3,w
  3185     02DE  0447               	iorwf	___almod@divisor+2,w
  3186     02DF  0446               	iorwf	___almod@divisor+1,w
  3187     02E0  0445               	iorwf	___almod@divisor,w
  3188     02E1  1903               	skipnz
  3189     02E2  2AE4               	goto	u1541
  3190     02E3  2AE5               	goto	u1540
  3191     02E4                     u1541:
  3192     02E4  2B28               	goto	l1815
  3193     02E5                     u1540:
  3194     02E5                     l1801:
  3195     02E5  01CD               	clrf	___almod@counter
  3196     02E6  0ACD               	incf	___almod@counter,f
  3197     02E7  2AF5               	goto	l1805
  3198     02E8                     l1803:
  3199     02E8  3001               	movlw	1
  3200     02E9  00F4               	movwf	??___almod
  3201     02EA                     u1555:
  3202     02EA  1003               	clrc
  3203     02EB  0DC5               	rlf	___almod@divisor,f
  3204     02EC  0DC6               	rlf	___almod@divisor+1,f
  3205     02ED  0DC7               	rlf	___almod@divisor+2,f
  3206     02EE  0DC8               	rlf	___almod@divisor+3,f
  3207     02EF  0BF4               	decfsz	??___almod,f
  3208     02F0  2AEA               	goto	u1555
  3209     02F1  3001               	movlw	1
  3210     02F2  00F4               	movwf	??___almod
  3211     02F3  0874               	movf	??___almod,w
  3212     02F4  07CD               	addwf	___almod@counter,f
  3213     02F5                     l1805:
  3214     02F5  1FC8               	btfss	___almod@divisor+3,7
  3215     02F6  2AF8               	goto	u1561
  3216     02F7  2AF9               	goto	u1560
  3217     02F8                     u1561:
  3218     02F8  2AE8               	goto	l1803
  3219     02F9                     u1560:
  3220     02F9                     l1807:
  3221     02F9  0848               	movf	___almod@divisor+3,w
  3222     02FA  024C               	subwf	___almod@dividend+3,w
  3223     02FB  1D03               	skipz
  3224     02FC  2B07               	goto	u1575
  3225     02FD  0847               	movf	___almod@divisor+2,w
  3226     02FE  024B               	subwf	___almod@dividend+2,w
  3227     02FF  1D03               	skipz
  3228     0300  2B07               	goto	u1575
  3229     0301  0846               	movf	___almod@divisor+1,w
  3230     0302  024A               	subwf	___almod@dividend+1,w
  3231     0303  1D03               	skipz
  3232     0304  2B07               	goto	u1575
  3233     0305  0845               	movf	___almod@divisor,w
  3234     0306  0249               	subwf	___almod@dividend,w
  3235     0307                     u1575:
  3236     0307  1C03               	skipc
  3237     0308  2B0A               	goto	u1571
  3238     0309  2B0B               	goto	u1570
  3239     030A                     u1571:
  3240     030A  2B19               	goto	l1811
  3241     030B                     u1570:
  3242     030B                     l1809:
  3243     030B  0845               	movf	___almod@divisor,w
  3244     030C  02C9               	subwf	___almod@dividend,f
  3245     030D  0846               	movf	___almod@divisor+1,w
  3246     030E  1C03               	skipc
  3247     030F  0F46               	incfsz	___almod@divisor+1,w
  3248     0310  02CA               	subwf	___almod@dividend+1,f
  3249     0311  0847               	movf	___almod@divisor+2,w
  3250     0312  1C03               	skipc
  3251     0313  0F47               	incfsz	___almod@divisor+2,w
  3252     0314  02CB               	subwf	___almod@dividend+2,f
  3253     0315  0848               	movf	___almod@divisor+3,w
  3254     0316  1C03               	skipc
  3255     0317  0F48               	incfsz	___almod@divisor+3,w
  3256     0318  02CC               	subwf	___almod@dividend+3,f
  3257     0319                     l1811:
  3258     0319  3001               	movlw	1
  3259     031A                     u1585:
  3260     031A  1003               	clrc
  3261     031B  0CC8               	rrf	___almod@divisor+3,f
  3262     031C  0CC7               	rrf	___almod@divisor+2,f
  3263     031D  0CC6               	rrf	___almod@divisor+1,f
  3264     031E  0CC5               	rrf	___almod@divisor,f
  3265     031F  3EFF               	addlw	-1
  3266     0320  1D03               	skipz
  3267     0321  2B1A               	goto	u1585
  3268     0322                     l1813:
  3269     0322  3001               	movlw	1
  3270     0323  02CD               	subwf	___almod@counter,f
  3271     0324  1D03               	btfss	3,2
  3272     0325  2B27               	goto	u1591
  3273     0326  2B28               	goto	u1590
  3274     0327                     u1591:
  3275     0327  2AF9               	goto	l1807
  3276     0328                     u1590:
  3277     0328                     l1815:
  3278     0328  084E               	movf	___almod@sign,w
  3279     0329  1903               	btfsc	3,2
  3280     032A  2B2C               	goto	u1601
  3281     032B  2B2D               	goto	u1600
  3282     032C                     u1601:
  3283     032C  2B38               	goto	l1819
  3284     032D                     u1600:
  3285     032D                     l1817:
  3286     032D  09C9               	comf	___almod@dividend,f
  3287     032E  09CA               	comf	___almod@dividend+1,f
  3288     032F  09CB               	comf	___almod@dividend+2,f
  3289     0330  09CC               	comf	___almod@dividend+3,f
  3290     0331  0AC9               	incf	___almod@dividend,f
  3291     0332  1903               	skipnz
  3292     0333  0ACA               	incf	___almod@dividend+1,f
  3293     0334  1903               	skipnz
  3294     0335  0ACB               	incf	___almod@dividend+2,f
  3295     0336  1903               	skipnz
  3296     0337  0ACC               	incf	___almod@dividend+3,f
  3297     0338                     l1819:
  3298     0338  084C               	movf	___almod@dividend+3,w
  3299     0339  00C8               	movwf	?___almod+3
  3300     033A  084B               	movf	___almod@dividend+2,w
  3301     033B  00C7               	movwf	?___almod+2
  3302     033C  084A               	movf	___almod@dividend+1,w
  3303     033D  00C6               	movwf	?___almod+1
  3304     033E  0849               	movf	___almod@dividend,w
  3305     033F  00C5               	movwf	?___almod
  3306     0340                     l371:
  3307     0340  0008               	return
  3308     0341                     __end_of___almod:
  3309                           
  3310                           	psect	text19
  3311     021D                     __ptext19:	
  3312 ;; *************** function ___aldiv *****************
  3313 ;; Defined at:
  3314 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;  divisor         4   13[BANK0 ] long 
  3317 ;;  dividend        4   17[BANK0 ] long 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;  quotient        4   24[BANK0 ] long 
  3320 ;;  sign            1   23[BANK0 ] unsigned char 
  3321 ;;  counter         1   22[BANK0 ] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  4   13[BANK0 ] long 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3331 ;;      Params:         0       8       0       0       0
  3332 ;;      Locals:         0       6       0       0       0
  3333 ;;      Temps:          0       1       0       0       0
  3334 ;;      Totals:         0      15       0       0       0
  3335 ;;Total ram usage:       15 bytes
  3336 ;; Hardware stack levels used: 1
  3337 ;; Hardware stack levels required when called: 1
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_ConvertToString
  3342 ;;		_UART_init
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346     021D                     ___aldiv:	
  3347                           ;psect for function ___aldiv
  3348                           
  3349     021D                     l1685:	
  3350                           ;incstack = 0
  3351                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3352                           
  3353     021D  1283               	bcf	3,5	;RP0=0, select bank0
  3354     021E  1303               	bcf	3,6	;RP1=0, select bank0
  3355     021F  01DC               	clrf	___aldiv@sign
  3356     0220                     l1687:
  3357     0220  1FD5               	btfss	___aldiv@divisor+3,7
  3358     0221  2A23               	goto	u1381
  3359     0222  2A24               	goto	u1380
  3360     0223                     u1381:
  3361     0223  2A31               	goto	l348
  3362     0224                     u1380:
  3363     0224                     l1689:
  3364     0224  09D2               	comf	___aldiv@divisor,f
  3365     0225  09D3               	comf	___aldiv@divisor+1,f
  3366     0226  09D4               	comf	___aldiv@divisor+2,f
  3367     0227  09D5               	comf	___aldiv@divisor+3,f
  3368     0228  0AD2               	incf	___aldiv@divisor,f
  3369     0229  1903               	skipnz
  3370     022A  0AD3               	incf	___aldiv@divisor+1,f
  3371     022B  1903               	skipnz
  3372     022C  0AD4               	incf	___aldiv@divisor+2,f
  3373     022D  1903               	skipnz
  3374     022E  0AD5               	incf	___aldiv@divisor+3,f
  3375     022F  01DC               	clrf	___aldiv@sign
  3376     0230  0ADC               	incf	___aldiv@sign,f
  3377     0231                     l348:
  3378     0231  1FD9               	btfss	___aldiv@dividend+3,7
  3379     0232  2A34               	goto	u1391
  3380     0233  2A35               	goto	u1390
  3381     0234                     u1391:
  3382     0234  2A44               	goto	l1695
  3383     0235                     u1390:
  3384     0235                     l1691:
  3385     0235  09D6               	comf	___aldiv@dividend,f
  3386     0236  09D7               	comf	___aldiv@dividend+1,f
  3387     0237  09D8               	comf	___aldiv@dividend+2,f
  3388     0238  09D9               	comf	___aldiv@dividend+3,f
  3389     0239  0AD6               	incf	___aldiv@dividend,f
  3390     023A  1903               	skipnz
  3391     023B  0AD7               	incf	___aldiv@dividend+1,f
  3392     023C  1903               	skipnz
  3393     023D  0AD8               	incf	___aldiv@dividend+2,f
  3394     023E  1903               	skipnz
  3395     023F  0AD9               	incf	___aldiv@dividend+3,f
  3396     0240                     l1693:
  3397     0240  3001               	movlw	1
  3398     0241  00DA               	movwf	??___aldiv
  3399     0242  085A               	movf	??___aldiv,w
  3400     0243  06DC               	xorwf	___aldiv@sign,f
  3401     0244                     l1695:
  3402     0244  3000               	movlw	0
  3403     0245  00E0               	movwf	___aldiv@quotient+3
  3404     0246  3000               	movlw	0
  3405     0247  00DF               	movwf	___aldiv@quotient+2
  3406     0248  3000               	movlw	0
  3407     0249  00DE               	movwf	___aldiv@quotient+1
  3408     024A  3000               	movlw	0
  3409     024B  00DD               	movwf	___aldiv@quotient
  3410     024C                     l1697:
  3411     024C  0855               	movf	___aldiv@divisor+3,w
  3412     024D  0454               	iorwf	___aldiv@divisor+2,w
  3413     024E  0453               	iorwf	___aldiv@divisor+1,w
  3414     024F  0452               	iorwf	___aldiv@divisor,w
  3415     0250  1903               	skipnz
  3416     0251  2A53               	goto	u1401
  3417     0252  2A54               	goto	u1400
  3418     0253                     u1401:
  3419     0253  2AA1               	goto	l1717
  3420     0254                     u1400:
  3421     0254                     l1699:
  3422     0254  01DB               	clrf	___aldiv@counter
  3423     0255  0ADB               	incf	___aldiv@counter,f
  3424     0256  2A64               	goto	l1703
  3425     0257                     l1701:
  3426     0257  3001               	movlw	1
  3427     0258  00DA               	movwf	??___aldiv
  3428     0259                     u1415:
  3429     0259  1003               	clrc
  3430     025A  0DD2               	rlf	___aldiv@divisor,f
  3431     025B  0DD3               	rlf	___aldiv@divisor+1,f
  3432     025C  0DD4               	rlf	___aldiv@divisor+2,f
  3433     025D  0DD5               	rlf	___aldiv@divisor+3,f
  3434     025E  0BDA               	decfsz	??___aldiv,f
  3435     025F  2A59               	goto	u1415
  3436     0260  3001               	movlw	1
  3437     0261  00DA               	movwf	??___aldiv
  3438     0262  085A               	movf	??___aldiv,w
  3439     0263  07DB               	addwf	___aldiv@counter,f
  3440     0264                     l1703:
  3441     0264  1FD5               	btfss	___aldiv@divisor+3,7
  3442     0265  2A67               	goto	u1421
  3443     0266  2A68               	goto	u1420
  3444     0267                     u1421:
  3445     0267  2A57               	goto	l1701
  3446     0268                     u1420:
  3447     0268                     l1705:
  3448     0268  3001               	movlw	1
  3449     0269  00DA               	movwf	??___aldiv
  3450     026A                     u1435:
  3451     026A  1003               	clrc
  3452     026B  0DDD               	rlf	___aldiv@quotient,f
  3453     026C  0DDE               	rlf	___aldiv@quotient+1,f
  3454     026D  0DDF               	rlf	___aldiv@quotient+2,f
  3455     026E  0DE0               	rlf	___aldiv@quotient+3,f
  3456     026F  0BDA               	decfsz	??___aldiv,f
  3457     0270  2A6A               	goto	u1435
  3458     0271                     l1707:
  3459     0271  0855               	movf	___aldiv@divisor+3,w
  3460     0272  0259               	subwf	___aldiv@dividend+3,w
  3461     0273  1D03               	skipz
  3462     0274  2A7F               	goto	u1445
  3463     0275  0854               	movf	___aldiv@divisor+2,w
  3464     0276  0258               	subwf	___aldiv@dividend+2,w
  3465     0277  1D03               	skipz
  3466     0278  2A7F               	goto	u1445
  3467     0279  0853               	movf	___aldiv@divisor+1,w
  3468     027A  0257               	subwf	___aldiv@dividend+1,w
  3469     027B  1D03               	skipz
  3470     027C  2A7F               	goto	u1445
  3471     027D  0852               	movf	___aldiv@divisor,w
  3472     027E  0256               	subwf	___aldiv@dividend,w
  3473     027F                     u1445:
  3474     027F  1C03               	skipc
  3475     0280  2A82               	goto	u1441
  3476     0281  2A83               	goto	u1440
  3477     0282                     u1441:
  3478     0282  2A92               	goto	l1713
  3479     0283                     u1440:
  3480     0283                     l1709:
  3481     0283  0852               	movf	___aldiv@divisor,w
  3482     0284  02D6               	subwf	___aldiv@dividend,f
  3483     0285  0853               	movf	___aldiv@divisor+1,w
  3484     0286  1C03               	skipc
  3485     0287  0F53               	incfsz	___aldiv@divisor+1,w
  3486     0288  02D7               	subwf	___aldiv@dividend+1,f
  3487     0289  0854               	movf	___aldiv@divisor+2,w
  3488     028A  1C03               	skipc
  3489     028B  0F54               	incfsz	___aldiv@divisor+2,w
  3490     028C  02D8               	subwf	___aldiv@dividend+2,f
  3491     028D  0855               	movf	___aldiv@divisor+3,w
  3492     028E  1C03               	skipc
  3493     028F  0F55               	incfsz	___aldiv@divisor+3,w
  3494     0290  02D9               	subwf	___aldiv@dividend+3,f
  3495     0291                     l1711:
  3496     0291  145D               	bsf	___aldiv@quotient,0
  3497     0292                     l1713:
  3498     0292  3001               	movlw	1
  3499     0293                     u1455:
  3500     0293  1003               	clrc
  3501     0294  0CD5               	rrf	___aldiv@divisor+3,f
  3502     0295  0CD4               	rrf	___aldiv@divisor+2,f
  3503     0296  0CD3               	rrf	___aldiv@divisor+1,f
  3504     0297  0CD2               	rrf	___aldiv@divisor,f
  3505     0298  3EFF               	addlw	-1
  3506     0299  1D03               	skipz
  3507     029A  2A93               	goto	u1455
  3508     029B                     l1715:
  3509     029B  3001               	movlw	1
  3510     029C  02DB               	subwf	___aldiv@counter,f
  3511     029D  1D03               	btfss	3,2
  3512     029E  2AA0               	goto	u1461
  3513     029F  2AA1               	goto	u1460
  3514     02A0                     u1461:
  3515     02A0  2A68               	goto	l1705
  3516     02A1                     u1460:
  3517     02A1                     l1717:
  3518     02A1  085C               	movf	___aldiv@sign,w
  3519     02A2  1903               	btfsc	3,2
  3520     02A3  2AA5               	goto	u1471
  3521     02A4  2AA6               	goto	u1470
  3522     02A5                     u1471:
  3523     02A5  2AB1               	goto	l1721
  3524     02A6                     u1470:
  3525     02A6                     l1719:
  3526     02A6  09DD               	comf	___aldiv@quotient,f
  3527     02A7  09DE               	comf	___aldiv@quotient+1,f
  3528     02A8  09DF               	comf	___aldiv@quotient+2,f
  3529     02A9  09E0               	comf	___aldiv@quotient+3,f
  3530     02AA  0ADD               	incf	___aldiv@quotient,f
  3531     02AB  1903               	skipnz
  3532     02AC  0ADE               	incf	___aldiv@quotient+1,f
  3533     02AD  1903               	skipnz
  3534     02AE  0ADF               	incf	___aldiv@quotient+2,f
  3535     02AF  1903               	skipnz
  3536     02B0  0AE0               	incf	___aldiv@quotient+3,f
  3537     02B1                     l1721:
  3538     02B1  0860               	movf	___aldiv@quotient+3,w
  3539     02B2  00D5               	movwf	?___aldiv+3
  3540     02B3  085F               	movf	___aldiv@quotient+2,w
  3541     02B4  00D4               	movwf	?___aldiv+2
  3542     02B5  085E               	movf	___aldiv@quotient+1,w
  3543     02B6  00D3               	movwf	?___aldiv+1
  3544     02B7  085D               	movf	___aldiv@quotient,w
  3545     02B8  00D2               	movwf	?___aldiv
  3546     02B9                     l358:
  3547     02B9  0008               	return
  3548     02BA                     __end_of___aldiv:
  3549                           
  3550                           	psect	text20
  3551     04DC                     __ptext20:	
  3552 ;; *************** function _ConcatToPacket *****************
  3553 ;; Defined at:
  3554 ;;		line 254 in file "main.c"
  3555 ;; Parameters:    Size  Location     Type
  3556 ;;  pkt             1    wreg     PTR unsigned char 
  3557 ;;		 -> main@packet(50), 
  3558 ;;  str             2   10[BANK0 ] PTR unsigned char 
  3559 ;;		 -> STR_1(10), main@num_rand_s(16), 
  3560 ;;  delim           1   12[BANK0 ] unsigned char 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  pkt             1   16[BANK0 ] PTR unsigned char 
  3563 ;;		 -> main@packet(50), 
  3564 ;;  packet_lengt    2   14[BANK0 ] int 
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      void 
  3567 ;; Registers used:
  3568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3574 ;;      Params:         0       3       0       0       0
  3575 ;;      Locals:         0       3       0       0       0
  3576 ;;      Temps:          0       1       0       0       0
  3577 ;;      Totals:         0       7       0       0       0
  3578 ;;Total ram usage:        7 bytes
  3579 ;; Hardware stack levels used: 1
  3580 ;; Hardware stack levels required when called: 3
  3581 ;; This function calls:
  3582 ;;		_strcat
  3583 ;; This function is called by:
  3584 ;;		_main
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588     04DC                     _ConcatToPacket:	
  3589                           ;psect for function _ConcatToPacket
  3590                           
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3594                           ;ConcatToPacket@pkt stored from wreg
  3595     04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3596     04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3597     04DE  00D5               	movwf	ConcatToPacket@pkt
  3598     04DF                     l1917:
  3599                           
  3600                           ;main.c: 254: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 255: {;main.
      +                          c: 256:     int packet_length = strcat(pkt, str);
  3601     04DF  084F               	movf	ConcatToPacket@str,w
  3602     04E0  00F4               	movwf	strcat@str2
  3603     04E1  0850               	movf	ConcatToPacket@str+1,w
  3604     04E2  00F5               	movwf	strcat@str2+1
  3605     04E3  0855               	movf	ConcatToPacket@pkt,w
  3606     04E4  120A  118A  23C1  120A  118A  	fcall	_strcat
  3607     04E9  0875               	movf	?_strcat+1,w
  3608     04EA  1283               	bcf	3,5	;RP0=0, select bank0
  3609     04EB  1303               	bcf	3,6	;RP1=0, select bank0
  3610     04EC  00D4               	movwf	ConcatToPacket@packet_length+1
  3611     04ED  0874               	movf	?_strcat,w
  3612     04EE  00D3               	movwf	ConcatToPacket@packet_length
  3613     04EF                     l1919:
  3614                           
  3615                           ;main.c: 257:     if(delim != ' ')
  3616     04EF  3020               	movlw	32
  3617     04F0  0651               	xorwf	ConcatToPacket@delim,w
  3618     04F1  1903               	btfsc	3,2
  3619     04F2  2CF4               	goto	u1741
  3620     04F3  2CF5               	goto	u1740
  3621     04F4                     u1741:
  3622     04F4  2D04               	goto	l1925
  3623     04F5                     u1740:
  3624     04F5                     l1921:
  3625                           
  3626                           ;main.c: 258:     {;main.c: 259:         pkt[packet_length] = delim;
  3627     04F5  0853               	movf	ConcatToPacket@packet_length,w
  3628     04F6  0755               	addwf	ConcatToPacket@pkt,w
  3629     04F7  00D2               	movwf	??_ConcatToPacket
  3630     04F8  0852               	movf	??_ConcatToPacket,w
  3631     04F9  0084               	movwf	4
  3632     04FA  0851               	movf	ConcatToPacket@delim,w
  3633     04FB  1383               	bcf	3,7	;select IRP bank0
  3634     04FC  0080               	movwf	0
  3635     04FD                     l1923:
  3636                           
  3637                           ;main.c: 260:         packet_length++;
  3638     04FD  3001               	movlw	1
  3639     04FE  07D3               	addwf	ConcatToPacket@packet_length,f
  3640     04FF  1803               	skipnc
  3641     0500  0AD4               	incf	ConcatToPacket@packet_length+1,f
  3642     0501  3000               	movlw	0
  3643     0502  07D4               	addwf	ConcatToPacket@packet_length+1,f
  3644                           
  3645                           ;main.c: 261:     }
  3646     0503  2D1F               	goto	l1931
  3647     0504                     l1925:
  3648                           
  3649                           ;main.c: 263:     {;main.c: 264:         pkt[packet_length] = '\r';
  3650     0504  0853               	movf	ConcatToPacket@packet_length,w
  3651     0505  0755               	addwf	ConcatToPacket@pkt,w
  3652     0506  00D2               	movwf	??_ConcatToPacket
  3653     0507  0852               	movf	??_ConcatToPacket,w
  3654     0508  0084               	movwf	4
  3655     0509  300D               	movlw	13
  3656     050A  1383               	bcf	3,7	;select IRP bank0
  3657     050B  0080               	movwf	0
  3658     050C                     l1927:
  3659                           
  3660                           ;main.c: 265:         packet_length++;
  3661     050C  3001               	movlw	1
  3662     050D  07D3               	addwf	ConcatToPacket@packet_length,f
  3663     050E  1803               	skipnc
  3664     050F  0AD4               	incf	ConcatToPacket@packet_length+1,f
  3665     0510  3000               	movlw	0
  3666     0511  07D4               	addwf	ConcatToPacket@packet_length+1,f
  3667     0512                     l1929:
  3668                           
  3669                           ;main.c: 266:         pkt[packet_length] = '\n';
  3670     0512  0853               	movf	ConcatToPacket@packet_length,w
  3671     0513  0755               	addwf	ConcatToPacket@pkt,w
  3672     0514  00D2               	movwf	??_ConcatToPacket
  3673     0515  0852               	movf	??_ConcatToPacket,w
  3674     0516  0084               	movwf	4
  3675     0517  300A               	movlw	10
  3676     0518  0080               	movwf	0
  3677                           
  3678                           ;main.c: 267:         packet_length++;
  3679     0519  3001               	movlw	1
  3680     051A  07D3               	addwf	ConcatToPacket@packet_length,f
  3681     051B  1803               	skipnc
  3682     051C  0AD4               	incf	ConcatToPacket@packet_length+1,f
  3683     051D  3000               	movlw	0
  3684     051E  07D4               	addwf	ConcatToPacket@packet_length+1,f
  3685     051F                     l1931:
  3686                           
  3687                           ;main.c: 269:     pkt[packet_length] = '\0';
  3688     051F  0853               	movf	ConcatToPacket@packet_length,w
  3689     0520  0755               	addwf	ConcatToPacket@pkt,w
  3690     0521  00D2               	movwf	??_ConcatToPacket
  3691     0522  0852               	movf	??_ConcatToPacket,w
  3692     0523  0084               	movwf	4
  3693     0524  0180               	clrf	0
  3694     0525                     l147:
  3695     0525  0008               	return
  3696     0526                     __end_of_ConcatToPacket:
  3697                           
  3698                           	psect	text21
  3699     03C1                     __ptext21:	
  3700 ;; *************** function _strcat *****************
  3701 ;; Defined at:
  3702 ;;		line 272 in file "main.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  str1            1    wreg     PTR unsigned char 
  3705 ;;		 -> main@packet(50), 
  3706 ;;  str2            2    4[COMMON] PTR unsigned char 
  3707 ;;		 -> STR_1(10), main@num_rand_s(16), 
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;  str1            1    7[BANK0 ] PTR unsigned char 
  3710 ;;		 -> main@packet(50), 
  3711 ;;  length_str1     2    8[BANK0 ] int 
  3712 ;;  n               2    5[BANK0 ] int 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  2    4[COMMON] int 
  3715 ;; Registers used:
  3716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3722 ;;      Params:         2       0       0       0       0
  3723 ;;      Locals:         0       5       0       0       0
  3724 ;;      Temps:          0       5       0       0       0
  3725 ;;      Totals:         2      10       0       0       0
  3726 ;;Total ram usage:       12 bytes
  3727 ;; Hardware stack levels used: 2
  3728 ;; Hardware stack levels required when called: 1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_ConcatToPacket
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736     03C1                     _strcat:	
  3737                           ;psect for function _strcat
  3738                           
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3742                           ;strcat@str1 stored from wreg
  3743     03C1  1283               	bcf	3,5	;RP0=0, select bank0
  3744     03C2  1303               	bcf	3,6	;RP1=0, select bank0
  3745     03C3  00CC               	movwf	strcat@str1
  3746     03C4                     l1367:
  3747                           
  3748                           ;main.c: 272: int strcat(char* str1, char* str2);main.c: 273: {;main.c: 274:     int n =
      +                           0, length_str1 = 0;
  3749     03C4  01CA               	clrf	strcat@n
  3750     03C5  01CB               	clrf	strcat@n+1
  3751     03C6  01CD               	clrf	strcat@length_str1
  3752     03C7  01CE               	clrf	strcat@length_str1+1
  3753                           
  3754                           ;main.c: 277:     while(str1[length_str1] != '\0')
  3755     03C8  2BCF               	goto	l1371
  3756     03C9                     l1369:
  3757                           
  3758                           ;main.c: 278:         length_str1++;
  3759     03C9  3001               	movlw	1
  3760     03CA  07CD               	addwf	strcat@length_str1,f
  3761     03CB  1803               	skipnc
  3762     03CC  0ACE               	incf	strcat@length_str1+1,f
  3763     03CD  3000               	movlw	0
  3764     03CE  07CE               	addwf	strcat@length_str1+1,f
  3765     03CF                     l1371:
  3766                           
  3767                           ;main.c: 277:     while(str1[length_str1] != '\0')
  3768     03CF  084D               	movf	strcat@length_str1,w
  3769     03D0  074C               	addwf	strcat@str1,w
  3770     03D1  00C5               	movwf	??_strcat
  3771     03D2  0845               	movf	??_strcat,w
  3772     03D3  0084               	movwf	4
  3773     03D4  1383               	bcf	3,7	;select IRP bank0
  3774     03D5  0800               	movf	0,w
  3775     03D6  1D03               	btfss	3,2
  3776     03D7  2BD9               	goto	u861
  3777     03D8  2BDA               	goto	u860
  3778     03D9                     u861:
  3779     03D9  2BC9               	goto	l1369
  3780     03DA                     u860:
  3781     03DA  2C07               	goto	l153
  3782     03DB                     l1373:
  3783                           
  3784                           ;main.c: 282:     {;main.c: 283:         str1[length_str1] = str2[n];
  3785     03DB  084A               	movf	strcat@n,w
  3786     03DC  0774               	addwf	strcat@str2,w
  3787     03DD  00C6               	movwf	??_strcat+1
  3788     03DE  0875               	movf	strcat@str2+1,w
  3789     03DF  00C5               	movwf	??_strcat
  3790     03E0  1803               	skipnc
  3791     03E1  0AC5               	incf	??_strcat,f
  3792     03E2  1FCA               	btfss	strcat@n,7
  3793     03E3  2BE5               	goto	u870
  3794     03E4  03C5               	decf	??_strcat,f
  3795     03E5                     u870:
  3796     03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3797     03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3798     03E7  0845               	movf	??_strcat,w
  3799     03E8  00C7               	movwf	??_strcat+2
  3800     03E9  0847               	movf	??_strcat+2,w
  3801     03EA  00FF               	movwf	btemp+1
  3802     03EB  0846               	movf	??_strcat+1,w
  3803     03EC  0084               	movwf	4
  3804     03ED  120A  118A  2674  120A  118A  	fcall	stringtab
  3805     03F2  00C8               	movwf	??_strcat+3
  3806     03F3  084D               	movf	strcat@length_str1,w
  3807     03F4  074C               	addwf	strcat@str1,w
  3808     03F5  00C9               	movwf	??_strcat+4
  3809     03F6  0849               	movf	??_strcat+4,w
  3810     03F7  0084               	movwf	4
  3811     03F8  0848               	movf	??_strcat+3,w
  3812     03F9  1383               	bcf	3,7	;select IRP bank0
  3813     03FA  0080               	movwf	0
  3814     03FB                     l1375:
  3815                           
  3816                           ;main.c: 284:         n++;
  3817     03FB  3001               	movlw	1
  3818     03FC  07CA               	addwf	strcat@n,f
  3819     03FD  1803               	skipnc
  3820     03FE  0ACB               	incf	strcat@n+1,f
  3821     03FF  3000               	movlw	0
  3822     0400  07CB               	addwf	strcat@n+1,f
  3823     0401                     l1377:
  3824                           
  3825                           ;main.c: 285:         length_str1++;
  3826     0401  3001               	movlw	1
  3827     0402  07CD               	addwf	strcat@length_str1,f
  3828     0403  1803               	skipnc
  3829     0404  0ACE               	incf	strcat@length_str1+1,f
  3830     0405  3000               	movlw	0
  3831     0406  07CE               	addwf	strcat@length_str1+1,f
  3832     0407                     l153:	
  3833                           ;main.c: 286:     }
  3834                           
  3835                           
  3836                           ;main.c: 281:     while(str2[n] != '\0')
  3837     0407  084A               	movf	strcat@n,w
  3838     0408  0774               	addwf	strcat@str2,w
  3839     0409  00C6               	movwf	??_strcat+1
  3840     040A  0875               	movf	strcat@str2+1,w
  3841     040B  00C5               	movwf	??_strcat
  3842     040C  1803               	skipnc
  3843     040D  0AC5               	incf	??_strcat,f
  3844     040E  1FCA               	btfss	strcat@n,7
  3845     040F  2C11               	goto	u880
  3846     0410  03C5               	decf	??_strcat,f
  3847     0411                     u880:
  3848     0411  1283               	bcf	3,5	;RP0=0, select bank0
  3849     0412  1303               	bcf	3,6	;RP1=0, select bank0
  3850     0413  0845               	movf	??_strcat,w
  3851     0414  00C7               	movwf	??_strcat+2
  3852     0415  0847               	movf	??_strcat+2,w
  3853     0416  00FF               	movwf	btemp+1
  3854     0417  0846               	movf	??_strcat+1,w
  3855     0418  0084               	movwf	4
  3856     0419  120A  118A  2674  120A  118A  	fcall	stringtab
  3857     041E  3A00               	xorlw	0
  3858     041F  1D03               	skipz
  3859     0420  2C22               	goto	u891
  3860     0421  2C23               	goto	u890
  3861     0422                     u891:
  3862     0422  2BDB               	goto	l1373
  3863     0423                     u890:
  3864     0423                     l1379:
  3865                           
  3866                           ;main.c: 289:     return length_str1;
  3867     0423  084E               	movf	strcat@length_str1+1,w
  3868     0424  00F5               	movwf	?_strcat+1
  3869     0425  084D               	movf	strcat@length_str1,w
  3870     0426  00F4               	movwf	?_strcat
  3871     0427                     l156:
  3872     0427  0008               	return
  3873     0428                     __end_of_strcat:
  3874                           
  3875                           	psect	text22
  3876     05FB                     __ptext22:	
  3877 ;; *************** function _IRS *****************
  3878 ;; Defined at:
  3879 ;;		line 428 in file "main.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;		None
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;		None
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3893 ;;      Params:         0       0       0       0       0
  3894 ;;      Locals:         0       0       0       0       0
  3895 ;;      Temps:          4       0       0       0       0
  3896 ;;      Totals:         4       0       0       0       0
  3897 ;;Total ram usage:        4 bytes
  3898 ;; Hardware stack levels used: 1
  3899 ;; This function calls:
  3900 ;;		Nothing
  3901 ;; This function is called by:
  3902 ;;		Interrupt level 1
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906     05FB                     _IRS:	
  3907                           ;psect for function _IRS
  3908                           
  3909     05FB                     i1l1619:
  3910                           
  3911                           ;main.c: 431:     if(RCIF)
  3912     05FB  1283               	bcf	3,5	;RP0=0, select bank0
  3913     05FC  1303               	bcf	3,6	;RP1=0, select bank0
  3914     05FD  1E8C               	btfss	12,5	;volatile
  3915     05FE  2E00               	goto	u127_21
  3916     05FF  2E01               	goto	u127_20
  3917     0600                     u127_21:
  3918     0600  2E1A               	goto	i1l1631
  3919     0601                     u127_20:
  3920     0601                     i1l1621:
  3921                           
  3922                           ;main.c: 432:     {;main.c: 433:         datoSeriale[iS++] = RCREG;
  3923     0601  1683               	bsf	3,5	;RP0=1, select bank1
  3924     0602  1303               	bcf	3,6	;RP1=0, select bank1
  3925     0603  086E               	movf	_iS^(0+128),w
  3926     0604  3E35               	addlw	(low (_datoSeriale| 0))& (0+255)
  3927     0605  0084               	movwf	4
  3928     0606  1283               	bcf	3,5	;RP0=0, select bank0
  3929     0607  1303               	bcf	3,6	;RP1=0, select bank0
  3930     0608  081A               	movf	26,w	;volatile
  3931     0609  1383               	bcf	3,7	;select IRP bank0
  3932     060A  0080               	movwf	0
  3933     060B                     i1l1623:
  3934     060B  3001               	movlw	1
  3935     060C  00F0               	movwf	??_IRS
  3936     060D  0870               	movf	??_IRS,w
  3937     060E  1683               	bsf	3,5	;RP0=1, select bank1
  3938     060F  1303               	bcf	3,6	;RP1=0, select bank1
  3939     0610  07EE               	addwf	_iS^(0+128),f
  3940     0611                     i1l1625:
  3941                           
  3942                           ;main.c: 434:         datoSeriale[iS] = '\0';
  3943     0611  086E               	movf	_iS^(0+128),w
  3944     0612  3E35               	addlw	(low (_datoSeriale| 0))& (0+255)
  3945     0613  0084               	movwf	4
  3946     0614  0180               	clrf	0
  3947     0615                     i1l1627:
  3948                           
  3949                           ;main.c: 435:         recieved = 1;
  3950     0615  01ED               	clrf	_recieved^(0+128)
  3951     0616  0AED               	incf	_recieved^(0+128),f
  3952     0617                     i1l1629:
  3953                           
  3954                           ;main.c: 436:         RCIF = 0;
  3955     0617  1283               	bcf	3,5	;RP0=0, select bank0
  3956     0618  1303               	bcf	3,6	;RP1=0, select bank0
  3957     0619  128C               	bcf	12,5	;volatile
  3958     061A                     i1l1631:
  3959                           
  3960                           ;main.c: 439:     if(T0IF)
  3961     061A  1D0B               	btfss	11,2	;volatile
  3962     061B  2E1D               	goto	u128_21
  3963     061C  2E1E               	goto	u128_20
  3964     061D                     u128_21:
  3965     061D  2E2F               	goto	i1l197
  3966     061E                     u128_20:
  3967     061E                     i1l1633:
  3968                           
  3969                           ;main.c: 440:     {;main.c: 441:         TMR0 = 131;
  3970     061E  3083               	movlw	131
  3971     061F  0081               	movwf	1	;volatile
  3972                           
  3973                           ;main.c: 442:         milliseconds++;
  3974     0620  3001               	movlw	1
  3975     0621  07B0               	addwf	_milliseconds,f
  3976     0622  3000               	movlw	0
  3977     0623  1803               	skipnc
  3978     0624  3001               	movlw	1
  3979     0625  07B1               	addwf	_milliseconds+1,f
  3980     0626  3000               	movlw	0
  3981     0627  1803               	skipnc
  3982     0628  3001               	movlw	1
  3983     0629  07B2               	addwf	_milliseconds+2,f
  3984     062A  3000               	movlw	0
  3985     062B  1803               	skipnc
  3986     062C  3001               	movlw	1
  3987     062D  07B3               	addwf	_milliseconds+3,f
  3988     062E                     i1l1635:
  3989                           
  3990                           ;main.c: 443:         T0IF = 0;
  3991     062E  110B               	bcf	11,2	;volatile
  3992     062F                     i1l197:
  3993     062F  0873               	movf	??_IRS+3,w
  3994     0630  008A               	movwf	10
  3995     0631  0872               	movf	??_IRS+2,w
  3996     0632  0084               	movwf	4
  3997     0633  0E71               	swapf	??_IRS+1,w
  3998     0634  0083               	movwf	3
  3999     0635  0EFE               	swapf	btemp,f
  4000     0636  0E7E               	swapf	btemp,w
  4001     0637  0009               	retfie
  4002     0638                     __end_of_IRS:
  4003     007E                     btemp	set	126	;btemp
  4004     007E                     wtemp0	set	126
  4005                           
  4006                           	psect	intentry
  4007     0004                     __pintentry:	
  4008                           ;incstack = 0
  4009                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0]
  4010                           
  4011     0004                     interrupt_function:
  4012     007E                     saved_w	set	btemp
  4013     0004  00FE               	movwf	btemp
  4014     0005  0E03               	swapf	3,w
  4015     0006  00F1               	movwf	??_IRS+1
  4016     0007  0804               	movf	4,w
  4017     0008  00F2               	movwf	??_IRS+2
  4018     0009  080A               	movf	10,w
  4019     000A  00F3               	movwf	??_IRS+3
  4020     000B  120A  118A  2DFB   	ljmp	_IRS
  4021                           
  4022                           	psect	idloc
  4023                           
  4024                           ;Config register IDLOC0 @ 0x2000
  4025                           ;	unspecified, using default values
  4026     2000                     	org	8192
  4027     2000  3FFF               	dw	16383
  4028                           
  4029                           ;Config register IDLOC1 @ 0x2001
  4030                           ;	unspecified, using default values
  4031     2001                     	org	8193
  4032     2001  3FFF               	dw	16383
  4033                           
  4034                           ;Config register IDLOC2 @ 0x2002
  4035                           ;	unspecified, using default values
  4036     2002                     	org	8194
  4037     2002  3FFF               	dw	16383
  4038                           
  4039                           ;Config register IDLOC3 @ 0x2003
  4040                           ;	unspecified, using default values
  4041     2003                     	org	8195
  4042     2003  3FFF               	dw	16383
  4043                           
  4044                           	psect	config
  4045                           
  4046                           ;Config register CONFIG @ 0x2007
  4047                           ;	Oscillator Selection bits
  4048                           ;	FOSC = HS, HS oscillator
  4049                           ;	Watchdog Timer Enable bit
  4050                           ;	WDTE = OFF, WDT disabled
  4051                           ;	Power-up Timer Enable bit
  4052                           ;	PWRTE = ON, PWRT enabled
  4053                           ;	Brown-out Reset Enable bit
  4054                           ;	BOREN = ON, BOR enabled
  4055                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4056                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  4057                           ;	Data EEPROM Memory Code Protection bit
  4058                           ;	CPD = OFF, Data EEPROM code protection off
  4059                           ;	Flash Program Memory Write Enable bits
  4060                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4061                           ;	In-Circuit Debugger Mode bit
  4062                           ;	DEBUG = 0x1, unprogrammed default
  4063                           ;	Flash Program Memory Code Protection bit
  4064                           ;	CP = OFF, Code protection off
  4065     2007                     	org	8199
  4066     2007  3FF2               	dw	16370

Data Sizes:
    Strings     10
    Constant    19
    Data        5
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     36      77
    BANK1            80     73      79
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 50
		 -> main@packet(BANK1[50]), 

    strcat@str2	PTR unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[10]), main@num_rand_s(BANK1[16]), 

    strcat@str1	PTR unsigned char  size(1) Largest target is 50
		 -> main@packet(BANK1[50]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[10]), main@num_rand_s(BANK1[16]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> main@packet(BANK1[50]), 

    ConvertToString@str	PTR unsigned char  size(1) Largest target is 16
		 -> main@num_rand_s(BANK1[16]), 

    lcdPrint@str	PTR unsigned char  size(1) Largest target is 16
		 -> datoSeriale(BANK0[16]), main@num_rand_s(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_lcdSend
    _read_NumPad->___awmod
    _read_NumPad->_srand
    _rand->___lmul
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_TxString->_UART_TxChar
    _pow->___wmul
    _ConcatToPacket->_strcat

Critical Paths under _IRS in COMMON

    None.

Critical Paths under _main in BANK0

    _read_NumPad->___awmod
    _rand->___lmul
    ___awmod->_rand
    _lcdPrint->_lcdSend
    _init_PIC->_UART_init
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _ConcatToPacket->_strcat

Critical Paths under _IRS in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_ConvertToString

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                66    66      0   10313
                                              7 BANK1     66    66      0
                     _ConcatToPacket
                    _ConvertToString
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                          2     2      0    1042
                                             25 BANK0      2     2      0
                            ___awmod
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             12 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              5 COMMON     1     1      0
                                             19 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             4     4      0    1164
                                              2 BANK0      4     4      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             0     0      0    2068
                          _UART_init
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0     962
                                              2 BANK0      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1     962
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4    1106
                                             28 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        4     4      0     197
                                              0 BANK0      4     4      0
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ConvertToString                                     13     8      5    3494
                                             28 BANK0      6     1      5
                                              0 BANK1      7     7      0
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                  9     7      2     663
                                              4 BANK0      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     316
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                              4 COMMON     1     1      0
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___almod                                             11     3      8     613
                                              4 COMMON     1     1      0
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     985
                                             13 BANK0     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    1128
                                             10 BANK0      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                              12    10      2     312
                                              4 COMMON     2     0      2
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _IRS                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConcatToPacket
     _strcat
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
     ___almod
     ___lmul
     _pow
   _UART_TxString
     _UART_TxChar
   _init_PIC
     _UART_init
       ___aldiv
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
   _lcdPrint
     _lcdSend
   _lcdSend
   _read_NumPad
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
     _srand

 _IRS (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     49      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      4D       5       96.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A6      12        0.0%
ABS                  0      0      A6       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri May 26 17:36:55 2023

                          pc 0002                           _iS 00EE                           _iT 0076  
                         fsr 0004          ___wmul@multiplicand 0047                          l111 075D  
                        l120 06CB                          l114 0772                          l132 0673  
                        l117 04DB                          l142 0150                          l126 06F2  
                        l153 0407                          l147 0525                          l156 0427  
                        l181 0774                          l190 073E                          l166 019F  
                        l159 078B                          l175 021C                          l184 0780  
                        l361 02CE                          l178 05FA                          l371 0340  
                        l283 0701                          l348 0231                          l285 0719  
                        l358 02B9                          l297 056D                          l449 0482  
                        l736 0794                          l739 05B4                          _IRS 05FB  
                        u860 03DA                          u861 03D9                          u870 03E5  
                        u880 0411                          u890 0423                          u891 0422  
                        _pow 0638                          fsr0 0004                          indf 0000  
               ___awmod@sign 005D                         ?_IRS 0070                         l1343 0781  
                       l1351 076A                         l1431 0428                         l1345 075E  
                       l1441 043A                         l1433 042B                         l1371 03CF  
                       l1347 0762                         l1451 0453                         l1443 043F  
                       l1435 042F                         l1373 03DB                         l1701 0257  
                       l1349 0766                         l1453 0457                         l1445 0445  
                       l1461 0474                         l1437 0434                         l1375 03FB  
                       l1367 03C4                         l1711 0291                         l1703 0264  
                       l1463 0479                         l1455 0461                         l1447 0448  
                       l1439 0436                         l1383 078C                         l1377 0401  
                       l1369 03C9                         l1721 02B1                         l1713 0292  
                       l1705 0268                         l1801 02E5                         l1641 06A6  
                       l1465 047E                         l1457 0467                         l1449 044F  
                       l1379 0423                         l1715 029B                         l1707 0271  
                       l1811 0319                         l1803 02E8                         l1731 05C9  
                       l1651 06BB                         l1643 06A7                         l1459 046E  
                       l1709 0283                         l1717 02A1                         l1813 0322  
                       l1805 02F5                         l1661 06FB                         l1901 0124  
                       l1733 05CA                         l1725 05B5                         l1653 06BE  
                       l1645 06AA                         l1637 06A2                         l1741 0483  
                       l1719 02A6                         l1807 02F9                         l1815 0328  
                       l1671 0526                         l1663 0708                         l1903 012C  
                       l1735 05F7                         l1727 05BD                         l1655 06C8  
                       l1647 06AC                         l1639 06A5                         l1751 04AD  
                       l1743 0487                         l1823 073F                         l1911 06D2  
                       l1921 04F5                         l1817 032D                         l1809 030B  
                       l1681 0565                         l1673 0530                         l1665 070F  
                       l1657 06F3                         l1905 0132                         l1737 05F8  
                       l1729 05C6                         l1649 06B1                         l1761 04D4  
                       l1753 04B8                         l1745 0491                         l1913 06DF  
                       l1833 015A                         l1825 0151                         l1931 051F  
                       l1923 04FD                         l1691 0235                         l1819 0338  
                       l1675 0534                         l1667 0715                         l1659 06F5  
                       l1771 0660                         l1763 063B                         l1907 0145  
                       l1739 05F9                         l1755 04BF                         l1747 0494  
                       l1915 06E7                         l1851 019D                         l1843 016B  
                       l1835 015F                         l1827 0159                         l1925 0504  
                       l1917 04DF                         l1693 0240                         l1685 021D  
                       l1677 054B                         l1773 066D                         l1765 063F  
                       l1933 071D                         l1757 04C6                         l1749 049B  
                       l1909 06CF                         l1781 059D                         l1861 01B5  
                       l1853 01A3                         l1845 0178                         l1837 016A  
                       l1941 0341                         l1927 050C                         l1919 04EF  
                       l1695 0244                         l1687 0220                         l1791 02BA  
                       l1679 0554                         l1767 0642                         l1935 0720  
                       l1759 04CD                         l1871 0204                         l1863 01E8  
                       l1855 01A9                         l1847 0183                         l1951 0376  
                       l1943 0346                         l1929 0512                         l1697 024C  
                       l1689 0224                         l1793 02BD                         l1769 065A  
                       l1881 004D                         l1785 0774                         l1937 072B  
                       l1777 056E                         l1873 0209                         l1865 01ED  
                       l1857 01AE                         l1849 0192                         l1953 037C  
                       l1961 03A1                         l1945 034B                         l1699 0254  
                       l1795 02C1                         l1891 0084                         l1883 0053  
                       l1787 077A                         l1939 0733                         l1779 058F  
                       l1867 01FC                         l1859 01AF                         l1875 0212  
                       l1971 03BC                         l1963 03A7                         l1955 037F  
                       l1947 0357                         l1797 02D2                         l1893 008A  
                       l1885 0059                         l1789 077E                         l1877 0216  
                       l1869 0200                         l1965 03AC                         l1957 038D  
                       l1949 035E                         l1799 02DD                         l1895 00B7  
                       l1887 0060                         l1879 0047                         l1967 03B3  
                       l1959 039B                         l1897 00D1                         l1889 007F  
                       l1969 03B9                         l1899 00FC                         ?_pow 0049  
                       STR_1 0697                         _T0IF 005A                         u1010 042F  
                       u1011 042E                         u1020 043A                         u1021 0439  
                       u1030 0445                         u1031 0444                         u1050 0457  
                       u1051 0456                         u1060 0461                         u1061 0460  
                       u1045 0449                         u1400 0254                         u1320 0715  
                       u1080 0474                         u1401 0253                         u1321 0714  
                       u1305 0702                         u1081 0473                         u1065 045D  
                       u1330 0534                         u1090 0479                         u1331 0533  
                       u1315 0709                         u1091 0478                         u1075 0468  
                       u1420 0268                         u1500 05AC                         u1421 0267  
                       u1341 053D                         u1342 0544                         u1510 077A  
                       u1415 0259                         u1343 054B                         u1511 0779  
                       u1440 0283                         u1600 032D                         u1520 02C1  
                       u1441 0282                         u1601 032C                         u1521 02C0  
                       u1505 05A7                         u1530 02D2                         u1370 0565  
                       u1290 06FB                         u1610 0178                         u1435 026A  
                       u1531 02D1                         u1371 0564                         u1355 054D  
                       u1291 06FA                         u1611 0177                         u1460 02A1  
                       u1380 0224                         u1540 02E5                         u1700 0053  
                       u1620 0192                         u1461 02A0                         u1445 027F  
                       u1381 0223                         u1541 02E4                         u1365 0555  
                       u1701 0052                         u1621 0191                         u1470 02A6  
                       u1390 0235                         u1710 00B6                         u1471 02A5  
                       u1455 0293                         u1391 0234                         u1711 00B5  
                       u1560 02F9                         u1720 0145                         u1480 05D8  
                       u1640 01A9                         u1561 02F8                         u1721 0144  
                       u1641 01A8                         u1570 030B                         u1490 066D  
                       u1730 06F2                         u1650 01AE                         u1571 030A  
                       u1555 02EA                         u1491 066C                         u1731 06F1  
                       u1651 01AD                         u1635 0195                         u1740 04F5  
                       u1660 01B5                         u1741 04F4                         u1725 0141  
                       u1485 05D3                         u1661 01B4                         u1590 0328  
                       u1750 073E                         u1670 01ED                         u1591 0327  
                       u1575 0307                         u1495 0669                         u1751 073D  
                       u1807 04A1                         u1671 01EC                         _PIE1 008C  
                       u1680 0212                         u1760 0357                         u1585 031A  
                       u1817 04B3                         u1681 0211                         u1761 0356  
                       u1690 021C                         u1770 03AC                         u1827 06B7  
                       u1691 021B                         u1771 03AB                         u1837 06C4  
                       u1765 0353                         u1787 017E                         u1797 048D  
                       _RCIF 0065                         _PIR1 000C                         _TMR0 0001  
                       _main 0341            ConcatToPacket@pkt 0055                         _keyf 0034  
                       _keys 0684                         _rand 056E            ConcatToPacket@str 004F  
                       btemp 007E                         pow@b 004D                         pow@i 004E  
                       pow@n 0050                         start 000E                        ??_IRS 0070  
                      ??_pow 004B                 ?_init_NumPad 0070                 ?_init_Timer0 0070  
            __end_of___aldiv 02BA              __end_of___almod 0341                        ?_main 0070  
                      ?_rand 0051              __end_of___awmod 0483                 ?_read_NumPad 0070  
                      i1l197 062F                        _RCREG 001A                        _RCSTA 0018  
                      _SPBRG 0099                        _PORTB 0006                        _PORTD 0008  
                      _TRISB 0086                        _TRISC 0087                        _TRISD 0088  
                      _TXREG 0019                        _TXSTA 0098              __end_of_colMask 0697  
        ___lmul@multiplicand 0049              __end_of_lcdSend 06CC                        _randx 0069  
                      _srand 078C                        pclath 000A              __end_of_rowMask 0694  
                      status 0003                        wtemp0 007E              __initialization 0011  
               __end_of_main 03C1                 __end_of_keys 0690                 __end_of_rand 05B5  
                     ??_main 0076                       ??_rand 0053            strcat@length_str1 004D  
                     ?_srand 0074                       i1l1621 0601                       i1l1623 060B  
                     i1l1631 061A                       i1l1633 061E                       i1l1625 0611  
                     i1l1635 062E                       i1l1627 0615                       i1l1619 05FB  
                     i1l1629 0617                       u127_20 0601                       u127_21 0600  
                     u128_20 061E                       u128_21 061D                       _INTCON 000B  
               ?_UART_TxChar 0070             __end_of_lcdPrint 06F3                       ___lmul 0526  
                  ??___aldiv 005A                    ??___almod 0074                       ___wmul 06F3  
          __end_of_UART_init 05FB                    ??___awmod 0075          ConcatToPacket@delim 0051  
           __end_of_init_LCD 04DC             __end_of_init_PIC 075E              ___awmod@divisor 0058  
            ___awmod@counter 005C                    ??_lcdSend 0045                       _strcat 03C1  
               __pdataCOMMON 0079                       saved_w 007E                       pow@exp 0049  
                     srand@x 0074               _datoTastierino 0020      __end_of__initialization 0043  
      __end_of_UART_TxString 073F               __pcstackCOMMON 0070                 __pidataBANK0 079D  
              __end_of_srand 0795                      ??_srand 0076                   __pbssBANK0 0020  
                 __pbssBANK1 00E9                   __pmaintext 0341                      ?___lmul 0045  
                    ?___wmul 0045                   __pintentry 0004               ___lmul@product 004D  
                    ?_strcat 0074                    ?_lcdPrint 0070       ConvertToString@n_cifre 00A6  
                 __stringtab 0674                    ?_init_LCD 0070                    ?_init_PIC 0070  
          ??_ConvertToString 0066                      ___aldiv 021D                      ___almod 02BA  
                    ___awmod 0428                      _colMask 0694                      _colScan 0078  
                    _lcdSend 06A1                      __ptext1 0151                      __ptext2 078C  
                    __ptext3 056E                      __ptext4 0428                      __ptext5 06CC  
                    __ptext6 073F                      __ptext7 075E                      __ptext8 0781  
                    __ptext9 0483               _ConcatToPacket 04DC             ___awmod@dividend 005A  
           ___aldiv@dividend 0056                   _keypressed 0079                      _rowMask 0690  
                    _rowScan 0077                   ??_lcdPrint 0047                      clrloop0 0796  
       end_of_initialization 0043               main@num_rand_s 00D9                   ??_init_LCD 0047  
                 ??_init_PIC 0076               UART_TxString@n 0047             ___aldiv@quotient 005D  
                    strcat@n 004A       __end_of_ConcatToPacket 0526                    _UART_init 05B5  
                  _PORTEbits 0009                    _TRISEbits 0089                   main@packet 00A7  
             __end_of___lmul 056E               __end_of___wmul 071A              ?_ConcatToPacket 004F  
              __pidataCOMMON 07A1                   ?_UART_init 0061               __end_of_strcat 0428  
        start_initialization 0011                  __end_of_IRS 0638                  __end_of_pow 0674  
                   ??___lmul 0074                     ??___wmul 0074                ??_init_NumPad 0074  
                __pdataBANK0 0069                ??_init_Timer0 0074                ??_read_NumPad 005E  
                   ??_strcat 0045                  __pbssCOMMON 0076                    ___latbits 0002  
              __pcstackBANK0 0045                __pcstackBANK1 00A0              _ConvertToString 0047  
                _datoSeriale 0035                     ?___aldiv 0052                     ?___almod 0045  
                   ?___awmod 0058             ___almod@dividend 0049                    __pstrings 0674  
                ??_UART_init 0065                     ?_lcdSend 0074          __end_of_init_NumPad 078C  
        __end_of_init_Timer0 0773                UART_TxChar@ch 0075          __end_of_read_NumPad 021D  
            ___aldiv@divisor 0052            interrupt_function 0004              ___aldiv@counter 005B  
             ___wmul@product 0074                 _milliseconds 0030                    clear_ram0 0795  
              ??_UART_TxChar 0074                _UART_TxString 071A                 _old_num_rand 00E9  
           ConvertToString@i 00A4             ConvertToString@j 00A2             ConvertToString@n 0061  
                  lcdPrint@n 0048                  __stringbase 0683            ___wmul@multiplier 0045  
    __end_of_ConvertToString 0151            ___lmul@multiplier 0045               ?_UART_TxString 0070  
           ??_ConcatToPacket 0052          __end_of_UART_TxChar 0781                  _init_NumPad 0781  
                _init_Timer0 075E           __end_of__stringtab 0684                  _read_NumPad 0151  
                 strcat@str1 004C                   strcat@str2 0074                     __ptext10 06A1  
                   __ptext11 05B5                     __ptext20 04DC                     __ptext12 071A  
                   __ptext21 03C1                     __ptext13 0773                     __ptext22 05FB  
                   __ptext14 0047                     __ptext15 0638                     __ptext16 06F3  
                   __ptext17 0526                     __ptext18 02BA                     __ptext19 021D  
                   _lcdPrint 06CC             UART_TxString@str 0046              ___almod@divisor 0045  
ConcatToPacket@packet_length 0053              ___almod@counter 004D                     _init_LCD 0483  
                   _init_PIC 073F                     _recieved 00ED                     _num_rand 00EB  
           ?_ConvertToString 0061                     intlevel1 0000            UART_init@baudrate 0061  
            ??_UART_TxString 0045          ConvertToString@temp 00A0                    stringcode 067E  
                _UART_TxChar 0773                   _OPTION_REG 0081                  lcdSend@dato 0075  
                lcdSend@tipo 0074           ConvertToString@str 0065                     stringdir 067E  
                   stringtab 0674                 ___aldiv@sign 005C                  lcdPrint@str 004A  
               ___almod@sign 004E  
