

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Jul 03 15:52:52 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    61                           	dabs	1,0x7E,2
    62     0000                     
    63                           ; Version 2.40
    64                           ; Generated 17/11/2021 GMT
    65                           ; 
    66                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution. Publication is not required when
    80                           ;        this file is used in an embedded application.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F877A Definitions
    96                           ; 
    97                           ; SFR Addresses
    98     0000                     	;# 
    99     0001                     	;# 
   100     0002                     	;# 
   101     0003                     	;# 
   102     0004                     	;# 
   103     0005                     	;# 
   104     0006                     	;# 
   105     0007                     	;# 
   106     0008                     	;# 
   107     0009                     	;# 
   108     000A                     	;# 
   109     000B                     	;# 
   110     000C                     	;# 
   111     000D                     	;# 
   112     000E                     	;# 
   113     000E                     	;# 
   114     000F                     	;# 
   115     0010                     	;# 
   116     0011                     	;# 
   117     0012                     	;# 
   118     0013                     	;# 
   119     0014                     	;# 
   120     0015                     	;# 
   121     0015                     	;# 
   122     0016                     	;# 
   123     0017                     	;# 
   124     0018                     	;# 
   125     0019                     	;# 
   126     001A                     	;# 
   127     001B                     	;# 
   128     001B                     	;# 
   129     001C                     	;# 
   130     001D                     	;# 
   131     001E                     	;# 
   132     001F                     	;# 
   133     0081                     	;# 
   134     0085                     	;# 
   135     0086                     	;# 
   136     0087                     	;# 
   137     0088                     	;# 
   138     0089                     	;# 
   139     008C                     	;# 
   140     008D                     	;# 
   141     008E                     	;# 
   142     0091                     	;# 
   143     0092                     	;# 
   144     0093                     	;# 
   145     0094                     	;# 
   146     0098                     	;# 
   147     0099                     	;# 
   148     009C                     	;# 
   149     009D                     	;# 
   150     009E                     	;# 
   151     009F                     	;# 
   152     010C                     	;# 
   153     010D                     	;# 
   154     010E                     	;# 
   155     010F                     	;# 
   156     018C                     	;# 
   157     018D                     	;# 
   158     0000                     	;# 
   159     0001                     	;# 
   160     0002                     	;# 
   161     0003                     	;# 
   162     0004                     	;# 
   163     0005                     	;# 
   164     0006                     	;# 
   165     0007                     	;# 
   166     0008                     	;# 
   167     0009                     	;# 
   168     000A                     	;# 
   169     000B                     	;# 
   170     000C                     	;# 
   171     000D                     	;# 
   172     000E                     	;# 
   173     000E                     	;# 
   174     000F                     	;# 
   175     0010                     	;# 
   176     0011                     	;# 
   177     0012                     	;# 
   178     0013                     	;# 
   179     0014                     	;# 
   180     0015                     	;# 
   181     0015                     	;# 
   182     0016                     	;# 
   183     0017                     	;# 
   184     0018                     	;# 
   185     0019                     	;# 
   186     001A                     	;# 
   187     001B                     	;# 
   188     001B                     	;# 
   189     001C                     	;# 
   190     001D                     	;# 
   191     001E                     	;# 
   192     001F                     	;# 
   193     0081                     	;# 
   194     0085                     	;# 
   195     0086                     	;# 
   196     0087                     	;# 
   197     0088                     	;# 
   198     0089                     	;# 
   199     008C                     	;# 
   200     008D                     	;# 
   201     008E                     	;# 
   202     0091                     	;# 
   203     0092                     	;# 
   204     0093                     	;# 
   205     0094                     	;# 
   206     0098                     	;# 
   207     0099                     	;# 
   208     009C                     	;# 
   209     009D                     	;# 
   210     009E                     	;# 
   211     009F                     	;# 
   212     010C                     	;# 
   213     010D                     	;# 
   214     010E                     	;# 
   215     010F                     	;# 
   216     018C                     	;# 
   217     018D                     	;# 
   218     0000                     	;# 
   219     0001                     	;# 
   220     0002                     	;# 
   221     0003                     	;# 
   222     0004                     	;# 
   223     0005                     	;# 
   224     0006                     	;# 
   225     0007                     	;# 
   226     0008                     	;# 
   227     0009                     	;# 
   228     000A                     	;# 
   229     000B                     	;# 
   230     000C                     	;# 
   231     000D                     	;# 
   232     000E                     	;# 
   233     000E                     	;# 
   234     000F                     	;# 
   235     0010                     	;# 
   236     0011                     	;# 
   237     0012                     	;# 
   238     0013                     	;# 
   239     0014                     	;# 
   240     0015                     	;# 
   241     0015                     	;# 
   242     0016                     	;# 
   243     0017                     	;# 
   244     0018                     	;# 
   245     0019                     	;# 
   246     001A                     	;# 
   247     001B                     	;# 
   248     001B                     	;# 
   249     001C                     	;# 
   250     001D                     	;# 
   251     001E                     	;# 
   252     001F                     	;# 
   253     0081                     	;# 
   254     0085                     	;# 
   255     0086                     	;# 
   256     0087                     	;# 
   257     0088                     	;# 
   258     0089                     	;# 
   259     008C                     	;# 
   260     008D                     	;# 
   261     008E                     	;# 
   262     0091                     	;# 
   263     0092                     	;# 
   264     0093                     	;# 
   265     0094                     	;# 
   266     0098                     	;# 
   267     0099                     	;# 
   268     009C                     	;# 
   269     009D                     	;# 
   270     009E                     	;# 
   271     009F                     	;# 
   272     010C                     	;# 
   273     010D                     	;# 
   274     010E                     	;# 
   275     010F                     	;# 
   276     018C                     	;# 
   277     018D                     	;# 
   278     0000                     	;# 
   279     0001                     	;# 
   280     0002                     	;# 
   281     0003                     	;# 
   282     0004                     	;# 
   283     0005                     	;# 
   284     0006                     	;# 
   285     0007                     	;# 
   286     0008                     	;# 
   287     0009                     	;# 
   288     000A                     	;# 
   289     000B                     	;# 
   290     000C                     	;# 
   291     000D                     	;# 
   292     000E                     	;# 
   293     000E                     	;# 
   294     000F                     	;# 
   295     0010                     	;# 
   296     0011                     	;# 
   297     0012                     	;# 
   298     0013                     	;# 
   299     0014                     	;# 
   300     0015                     	;# 
   301     0015                     	;# 
   302     0016                     	;# 
   303     0017                     	;# 
   304     0018                     	;# 
   305     0019                     	;# 
   306     001A                     	;# 
   307     001B                     	;# 
   308     001B                     	;# 
   309     001C                     	;# 
   310     001D                     	;# 
   311     001E                     	;# 
   312     001F                     	;# 
   313     0081                     	;# 
   314     0085                     	;# 
   315     0086                     	;# 
   316     0087                     	;# 
   317     0088                     	;# 
   318     0089                     	;# 
   319     008C                     	;# 
   320     008D                     	;# 
   321     008E                     	;# 
   322     0091                     	;# 
   323     0092                     	;# 
   324     0093                     	;# 
   325     0094                     	;# 
   326     0098                     	;# 
   327     0099                     	;# 
   328     009C                     	;# 
   329     009D                     	;# 
   330     009E                     	;# 
   331     009F                     	;# 
   332     010C                     	;# 
   333     010D                     	;# 
   334     010E                     	;# 
   335     010F                     	;# 
   336     018C                     	;# 
   337     018D                     	;# 
   338                           
   339                           	psect	idataBANK0
   340     0823                     __pidataBANK0:
   341                           
   342                           ;initializer for _randx
   343     0823  3401               	retlw	1
   344     0824  3400               	retlw	0
   345     0825  3400               	retlw	0
   346     0826  3400               	retlw	0
   347                           
   348                           	psect	idataBANK1
   349     0003                     __pidataBANK1:
   350                           
   351                           ;initializer for _keypressed
   352     0003  3463               	retlw	99
   353                           
   354                           	psect	idataBANK3
   355     06FE                     __pidataBANK3:
   356                           
   357                           ;initializer for _maxFail
   358     06FE  3403               	retlw	3
   359                           
   360                           ;initializer for _initialize
   361     06FF  3401               	retlw	1
   362                           
   363                           	psect	stringtext
   364     0700                     __pstringtext:
   365     0700                     stringtab:
   366     0700                     __stringtab:
   367                           
   368                           ;	String table - string pointers are 2 bytes each
   369     0700  1BFF               	btfsc	btemp+1,7
   370     0701  2F0A               	ljmp	stringcode
   371     0702  1383               	bcf	3,7
   372     0703  187F               	btfsc	btemp+1,0
   373     0704  1783               	bsf	3,7
   374     0705  0800               	movf	0,w
   375     0706  0A84               	incf	4,f
   376     0707  1903               	skipnz
   377     0708  0AFF               	incf	btemp+1,f
   378     0709  0008               	return
   379     070A                     stringcode:
   380     070A  087F               	movf	btemp+1,w
   381     070B  397F               	andlw	127
   382     070C  008A               	movwf	10
   383     070D  0804               	movf	4,w
   384     070E  0A84               	incf	4,f
   385     070F  1903               	skipnz
   386     0710  0AFF               	incf	btemp+1,f
   387     0711  0082               	movwf	2
   388     0712                     __stringbase:
   389     0712                     __end_of__stringtab:
   390     0712                     _keys:
   391     0712  342A               	retlw	42
   392     0713  3437               	retlw	55
   393     0714  3434               	retlw	52
   394     0715  3431               	retlw	49
   395     0716  3430               	retlw	48
   396     0717  3438               	retlw	56
   397     0718  3435               	retlw	53
   398     0719  3432               	retlw	50
   399     071A  3423               	retlw	35
   400     071B  3439               	retlw	57
   401     071C  3436               	retlw	54
   402     071D  3433               	retlw	51
   403     071E                     __end_of_keys:
   404     071E                     _rowMask:
   405     071E  3401               	retlw	1
   406     071F  3402               	retlw	2
   407     0720  3404               	retlw	4
   408     0721  3408               	retlw	8
   409     0722                     __end_of_rowMask:
   410     0722                     _colMask:
   411     0722  34FE               	retlw	254
   412     0723  34FD               	retlw	253
   413     0724  34FB               	retlw	251
   414     0725                     __end_of_colMask:
   415     000B                     _INTCONbits	set	11
   416     0003                     _STATUSbits	set	3
   417     001A                     _RCREG	set	26
   418     0019                     _TXREG	set	25
   419     000C                     _PIR1	set	12
   420     0018                     _RCSTA	set	24
   421     0006                     _PORTB	set	6
   422     0008                     _PORTD	set	8
   423     0009                     _PORTEbits	set	9
   424     0001                     _TMR0	set	1
   425     000B                     _INTCON	set	11
   426     005A                     _T0IF	set	90
   427     0065                     _RCIF	set	101
   428     008C                     _PIE1	set	140
   429     0099                     _SPBRG	set	153
   430     0098                     _TXSTA	set	152
   431     0087                     _TRISC	set	135
   432     0086                     _TRISB	set	134
   433     0089                     _TRISEbits	set	137
   434     0088                     _TRISD	set	136
   435     0081                     _OPTION_REG	set	129
   436     010C                     _EEDATA	set	268
   437     010D                     _EEADR	set	269
   438     018D                     _EECON2	set	397
   439     018C                     _EECON1	set	396
   440     018C                     _EECON1bits	set	396
   441     0725                     STR_20:
   442     0725  3423               	retlw	35	;'#'
   443     0726  343D               	retlw	61	;'='
   444     0727  3463               	retlw	99	;'c'
   445     0728  346F               	retlw	111	;'o'
   446     0729  346E               	retlw	110	;'n'
   447     072A  3466               	retlw	102	;'f'
   448     072B  342E               	retlw	46	;'.'
   449     072C  3420               	retlw	32	;' '
   450     072D  342A               	retlw	42	;'*'
   451     072E  343D               	retlw	61	;'='
   452     072F  3463               	retlw	99	;'c'
   453     0730  3461               	retlw	97	;'a'
   454     0731  346E               	retlw	110	;'n'
   455     0732  3463               	retlw	99	;'c'
   456     0733  342E               	retlw	46	;'.'
   457     0734  3400               	retlw	0
   458     0735  3400               	retlw	0
   459     0736  3400               	retlw	0
   460     0737                     STR_7:
   461     0737  3423               	retlw	35	;'#'
   462     0738  3420               	retlw	32	;' '
   463     0739  3470               	retlw	112	;'p'
   464     073A  3465               	retlw	101	;'e'
   465     073B  3472               	retlw	114	;'r'
   466     073C  3420               	retlw	32	;' '
   467     073D  3461               	retlw	97	;'a'
   468     073E  346C               	retlw	108	;'l'
   469     073F  3474               	retlw	116	;'t'
   470     0740  3472               	retlw	114	;'r'
   471     0741  346F               	retlw	111	;'o'
   472     0742  3420               	retlw	32	;' '
   473     0743  3463               	retlw	99	;'c'
   474     0744  346F               	retlw	111	;'o'
   475     0745  3464               	retlw	100	;'d'
   476     0746  342E               	retlw	46	;'.'
   477     0747  3400               	retlw	0
   478     0748  3400               	retlw	0
   479     0749                     STR_12:
   480     0749  3449               	retlw	73	;'I'
   481     074A  346E               	retlw	110	;'n'
   482     074B  3473               	retlw	115	;'s'
   483     074C  3465               	retlw	101	;'e'
   484     074D  3472               	retlw	114	;'r'
   485     074E  3469               	retlw	105	;'i'
   486     074F  3473               	retlw	115	;'s'
   487     0750  3463               	retlw	99	;'c'
   488     0751  3469               	retlw	105	;'i'
   489     0752  3420               	retlw	32	;' '
   490     0753  3463               	retlw	99	;'c'
   491     0754  346F               	retlw	111	;'o'
   492     0755  3464               	retlw	100	;'d'
   493     0756  3469               	retlw	105	;'i'
   494     0757  3463               	retlw	99	;'c'
   495     0758  3465               	retlw	101	;'e'
   496     0759  3400               	retlw	0
   497     075A  3400               	retlw	0
   498     075B                     STR_8:
   499     075B  3423               	retlw	35	;'#'
   500     075C  343D               	retlw	61	;'='
   501     075D  3463               	retlw	99	;'c'
   502     075E  346F               	retlw	111	;'o'
   503     075F  346E               	retlw	110	;'n'
   504     0760  3466               	retlw	102	;'f'
   505     0761  342E               	retlw	46	;'.'
   506     0762  3420               	retlw	32	;' '
   507     0763  342A               	retlw	42	;'*'
   508     0764  343D               	retlw	61	;'='
   509     0765  3463               	retlw	99	;'c'
   510     0766  3461               	retlw	97	;'a'
   511     0767  346E               	retlw	110	;'n'
   512     0768  3463               	retlw	99	;'c'
   513     0769  342E               	retlw	46	;'.'
   514     076A  3400               	retlw	0
   515     076B  3400               	retlw	0
   516     076C                     STR_2:
   517     076C  3470               	retlw	112	;'p'
   518     076D  3465               	retlw	101	;'e'
   519     076E  3472               	retlw	114	;'r'
   520     076F  3420               	retlw	32	;' '
   521     0770  3467               	retlw	103	;'g'
   522     0771  3465               	retlw	101	;'e'
   523     0772  346E               	retlw	110	;'n'
   524     0773  342E               	retlw	46	;'.'
   525     0774  3420               	retlw	32	;' '
   526     0775  3463               	retlw	99	;'c'
   527     0776  346F               	retlw	111	;'o'
   528     0777  3464               	retlw	100	;'d'
   529     0778  3469               	retlw	105	;'i'
   530     0779  3463               	retlw	99	;'c'
   531     077A  3465               	retlw	101	;'e'
   532     077B  3400               	retlw	0
   533     077C  3400               	retlw	0
   534     077D                     STR_10:
   535     077D  3441               	retlw	65	;'A'
   536     077E  3474               	retlw	116	;'t'
   537     077F  3474               	retlw	116	;'t'
   538     0780  3465               	retlw	101	;'e'
   539     0781  346E               	retlw	110	;'n'
   540     0782  3464               	retlw	100	;'d'
   541     0783  3469               	retlw	105	;'i'
   542     0784  3420               	retlw	32	;' '
   543     0785  3433               	retlw	51	;'3'
   544     0786  3430               	retlw	48	;'0'
   545     0787  3473               	retlw	115	;'s'
   546     0788  342E               	retlw	46	;'.'
   547     0789  342E               	retlw	46	;'.'
   548     078A  342E               	retlw	46	;'.'
   549     078B  3400               	retlw	0
   550     078C  3400               	retlw	0
   551     078D                     STR_21:
   552     078D  3449               	retlw	73	;'I'
   553     078E  346E               	retlw	110	;'n'
   554     078F  3473               	retlw	115	;'s'
   555     0790  3465               	retlw	101	;'e'
   556     0791  3472               	retlw	114	;'r'
   557     0792  342E               	retlw	46	;'.'
   558     0793  3420               	retlw	32	;' '
   559     0794  3449               	retlw	73	;'I'
   560     0795  3444               	retlw	68	;'D'
   561     0796  3420               	retlw	32	;' '
   562     0797  3450               	retlw	80	;'P'
   563     0798  3449               	retlw	73	;'I'
   564     0799  3443               	retlw	67	;'C'
   565     079A  343A               	retlw	58	;':'
   566     079B  3400               	retlw	0
   567     079C  3400               	retlw	0
   568     079D                     STR_18:
   569     079D  3454               	retlw	84	;'T'
   570     079E  3465               	retlw	101	;'e'
   571     079F  346E               	retlw	110	;'n'
   572     07A0  3474               	retlw	116	;'t'
   573     07A1  342E               	retlw	46	;'.'
   574     07A2  3420               	retlw	32	;' '
   575     07A3  3465               	retlw	101	;'e'
   576     07A4  3473               	retlw	115	;'s'
   577     07A5  3461               	retlw	97	;'a'
   578     07A6  3475               	retlw	117	;'u'
   579     07A7  3472               	retlw	114	;'r'
   580     07A8  3469               	retlw	105	;'i'
   581     07A9  3474               	retlw	116	;'t'
   582     07AA  3469               	retlw	105	;'i'
   583     07AB  3400               	retlw	0
   584     07AC  3400               	retlw	0
   585     07AD                     STR_22:
   586     07AD  344D               	retlw	77	;'M'
   587     07AE  3449               	retlw	73	;'I'
   588     07AF  344E               	retlw	78	;'N'
   589     07B0  343D               	retlw	61	;'='
   590     07B1  3430               	retlw	48	;'0'
   591     07B2  342C               	retlw	44	;','
   592     07B3  344D               	retlw	77	;'M'
   593     07B4  3441               	retlw	65	;'A'
   594     07B5  3458               	retlw	88	;'X'
   595     07B6  343D               	retlw	61	;'='
   596     07B7  3432               	retlw	50	;'2'
   597     07B8  3435               	retlw	53	;'5'
   598     07B9  3430               	retlw	48	;'0'
   599     07BA  3400               	retlw	0
   600     07BB  3400               	retlw	0
   601     07BC                     STR_16:
   602     07BC  3443               	retlw	67	;'C'
   603     07BD  346F               	retlw	111	;'o'
   604     07BE  3464               	retlw	100	;'d'
   605     07BF  3469               	retlw	105	;'i'
   606     07C0  3463               	retlw	99	;'c'
   607     07C1  3465               	retlw	101	;'e'
   608     07C2  3420               	retlw	32	;' '
   609     07C3  3465               	retlw	101	;'e'
   610     07C4  3472               	retlw	114	;'r'
   611     07C5  3472               	retlw	114	;'r'
   612     07C6  3461               	retlw	97	;'a'
   613     07C7  3474               	retlw	116	;'t'
   614     07C8  346F               	retlw	111	;'o'
   615     07C9  3400               	retlw	0
   616     07CA  3400               	retlw	0
   617     07CB                     STR_13:
   618     07CB  3454               	retlw	84	;'T'
   619     07CC  3465               	retlw	101	;'e'
   620     07CD  346E               	retlw	110	;'n'
   621     07CE  3474               	retlw	116	;'t'
   622     07CF  3461               	retlw	97	;'a'
   623     07D0  3474               	retlw	116	;'t'
   624     07D1  3469               	retlw	105	;'i'
   625     07D2  3476               	retlw	118	;'v'
   626     07D3  3469               	retlw	105	;'i'
   627     07D4  343A               	retlw	58	;':'
   628     07D5  3420               	retlw	32	;' '
   629     07D6  3400               	retlw	0
   630     07D7  3400               	retlw	0
   631     07D8                     STR_14:
   632     07D8  3442               	retlw	66	;'B'
   633     07D9  3465               	retlw	101	;'e'
   634     07DA  346E               	retlw	110	;'n'
   635     07DB  3476               	retlw	118	;'v'
   636     07DC  3465               	retlw	101	;'e'
   637     07DD  346E               	retlw	110	;'n'
   638     07DE  3475               	retlw	117	;'u'
   639     07DF  3474               	retlw	116	;'t'
   640     07E0  346F               	retlw	111	;'o'
   641     07E1  3421               	retlw	33	;'!'
   642     07E2  3400               	retlw	0
   643     07E3  3400               	retlw	0
   644     07E4                     STR_5:
   645     07E4  3449               	retlw	73	;'I'
   646     07E5  3444               	retlw	68	;'D'
   647     07E6  3420               	retlw	32	;' '
   648     07E7  3453               	retlw	83	;'S'
   649     07E8  3461               	retlw	97	;'a'
   650     07E9  346C               	retlw	108	;'l'
   651     07EA  3476               	retlw	118	;'v'
   652     07EB  3461               	retlw	97	;'a'
   653     07EC  3474               	retlw	116	;'t'
   654     07ED  346F               	retlw	111	;'o'
   655     07EE  3400               	retlw	0
   656     07EF  3400               	retlw	0
   657     07F0                     STR_1:
   658     07F0  3450               	retlw	80	;'P'
   659     07F1  3472               	retlw	114	;'r'
   660     07F2  3465               	retlw	101	;'e'
   661     07F3  346D               	retlw	109	;'m'
   662     07F4  3469               	retlw	105	;'i'
   663     07F5  3420               	retlw	32	;' '
   664     07F6  3427               	retlw	39	;'''
   665     07F7  3423               	retlw	35	;'#'
   666     07F8  3427               	retlw	39	;'''
   667     07F9  3400               	retlw	0
   668     07FA  3400               	retlw	0
   669     07FB                     STR_6:
   670     07FB  3443               	retlw	67	;'C'
   671     07FC  346F               	retlw	111	;'o'
   672     07FD  3464               	retlw	100	;'d'
   673     07FE  3469               	retlw	105	;'i'
   674     07FF  3463               	retlw	99	;'c'
   675     0800  3465               	retlw	101	;'e'
   676     0801  343A               	retlw	58	;':'
   677     0802  3420               	retlw	32	;' '
   678     0803  3400               	retlw	0
   679     0804  3400               	retlw	0
   680     0805                     STR_4:
   681     0805  3449               	retlw	73	;'I'
   682     0806  3444               	retlw	68	;'D'
   683     0807  3420               	retlw	32	;' '
   684     0808  343E               	retlw	62	;'>'
   685     0809  3420               	retlw	32	;' '
   686     080A  3432               	retlw	50	;'2'
   687     080B  3435               	retlw	53	;'5'
   688     080C  3430               	retlw	48	;'0'
   689     080D  3400               	retlw	0
   690     080E  3400               	retlw	0
   691     080F                     STR_3:
   692     080F  3445               	retlw	69	;'E'
   693     0810  3452               	retlw	82	;'R'
   694     0811  3452               	retlw	82	;'R'
   695     0812  344F               	retlw	79	;'O'
   696     0813  3452               	retlw	82	;'R'
   697     0814  3445               	retlw	69	;'E'
   698     0815  3400               	retlw	0
   699     0816  3400               	retlw	0
   700     0817                     STR_19:
   701     0817  3431               	retlw	49	;'1'
   702     0818  342F               	retlw	47	;'/'
   703     0819  3430               	retlw	48	;'0'
   704     081A  3400               	retlw	0
   705     081B                     STR_15:
   706     081B  3431               	retlw	49	;'1'
   707     081C  342F               	retlw	47	;'/'
   708     081D  3431               	retlw	49	;'1'
   709     081E  3400               	retlw	0
   710     081F                     STR_11:
   711     081F  3432               	retlw	50	;'2'
   712     0820  3400               	retlw	0
   713     07FB                     
   714                           	psect	cinit
   715     0013                     start_initialization:	
   716                           ; #config settings
   717                           
   718     0013                     __initialization:
   719                           
   720                           ; Initialize objects allocated to BANK3
   721     0013  1683               	bsf	3,5	;RP0=1, select bank3
   722     0014  1703               	bsf	3,6	;RP1=1, select bank3
   723     0015  120A  118A  26FE  120A  118A  	fcall	__pidataBANK3	;fetch initializer
   724     001A  00EE               	movwf	__pdataBANK3& (0+127)
   725     001B  120A  118A  26FF  120A  118A  	fcall	__pidataBANK3+1	;fetch initializer
   726     0020  00EF               	movwf	(__pdataBANK3+1)& (0+127)
   727                           
   728                           ; Initialize objects allocated to BANK1
   729     0021  1683               	bsf	3,5	;RP0=1, select bank1
   730     0022  1303               	bcf	3,6	;RP1=0, select bank1
   731     0023  120A  118A  2003  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   732     0028  00EF               	movwf	__pdataBANK1& (0+127)
   733                           
   734                           ; Initialize objects allocated to BANK0
   735     0029  1283               	bcf	3,5	;RP0=0, select bank0
   736     002A  1303               	bcf	3,6	;RP1=0, select bank0
   737     002B  120A  158A  2023  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   738     0030  00D0               	movwf	__pdataBANK0& (0+127)
   739     0031  120A  158A  2024  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   740     0036  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   741     0037  120A  158A  2025  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   742     003C  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   743     003D  120A  158A  2026  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   744     0042  00D3               	movwf	(__pdataBANK0+3)& (0+127)
   745                           
   746                           ; Clear objects allocated to BANK3
   747     0043  1783               	bsf	3,7	;select IRP bank2
   748     0044  3090               	movlw	low __pbssBANK3
   749     0045  0084               	movwf	4
   750     0046  30CA               	movlw	low (__pbssBANK3+58)
   751     0047  160A  118A  2546  120A  118A  	fcall	clear_ram0
   752                           
   753                           ; Clear objects allocated to BANK2
   754     004C  3010               	movlw	low __pbssBANK2
   755     004D  0084               	movwf	4
   756     004E  3042               	movlw	low (__pbssBANK2+50)
   757     004F  160A  118A  2546  120A  118A  	fcall	clear_ram0
   758                           
   759                           ; Clear objects allocated to BANK1
   760     0054  1383               	bcf	3,7	;select IRP bank0
   761     0055  30E4               	movlw	low __pbssBANK1
   762     0056  0084               	movwf	4
   763     0057  30EF               	movlw	low (__pbssBANK1+11)
   764     0058  160A  118A  2546  120A  118A  	fcall	clear_ram0
   765                           
   766                           ; Clear objects allocated to BANK0
   767     005D  303E               	movlw	low __pbssBANK0
   768     005E  0084               	movwf	4
   769     005F  3050               	movlw	low (__pbssBANK0+18)
   770     0060  160A  118A  2546  120A  118A  	fcall	clear_ram0
   771     0065                     end_of_initialization:	
   772                           ;End of C runtime variable initialization code
   773                           
   774     0065                     __end_of__initialization:
   775     0065  0183               	clrf	3
   776     0066  120A  118A  2869   	ljmp	_main	;jump to C main() function
   777                           
   778                           	psect	bssBANK0
   779     003E                     __pbssBANK0:
   780     003E                     _iS:
   781     003E                     	ds	1
   782     003F                     _datoSeriale:
   783     003F                     	ds	17
   784                           
   785                           	psect	dataBANK0
   786     0050                     __pdataBANK0:
   787     0050                     _randx:
   788     0050                     	ds	4
   789                           
   790                           	psect	bssBANK1
   791     00E4                     __pbssBANK1:
   792     00E4                     _seconds:
   793     00E4                     	ds	4
   794     00E8                     _milliseconds:
   795     00E8                     	ds	4
   796     00EC                     _keyf:
   797     00EC                     	ds	1
   798     00ED                     _rowScan:
   799     00ED                     	ds	1
   800     00EE                     _colScan:
   801     00EE                     	ds	1
   802                           
   803                           	psect	dataBANK1
   804     00EF                     __pdataBANK1:
   805     00EF                     _keypressed:
   806     00EF                     	ds	1
   807                           
   808                           	psect	bssBANK3
   809     0190                     __pbssBANK3:
   810     0190                     _old_num_rand:
   811     0190                     	ds	2
   812     0192                     _num_rand:
   813     0192                     	ds	2
   814     0194                     _pr_countdown:
   815     0194                     	ds	1
   816     0195                     _pr_succ:
   817     0195                     	ds	1
   818     0196                     _pr_err_max:
   819     0196                     	ds	1
   820     0197                     _pr_start:
   821     0197                     	ds	1
   822     0198                     _fail:
   823     0198                     	ds	1
   824     0199                     _success:
   825     0199                     	ds	1
   826     019A                     _compare:
   827     019A                     	ds	1
   828     019B                     _recieved:
   829     019B                     	ds	1
   830     019C                     _old_iT:
   831     019C                     	ds	1
   832     019D                     _iT:
   833     019D                     	ds	1
   834     019E                     _type:
   835     019E                     	ds	1
   836     019F                     _source:
   837     019F                     	ds	1
   838     01A0                     _old_i_id:
   839     01A0                     	ds	1
   840     01A1                     _i_id:
   841     01A1                     	ds	1
   842     01A2                     _datoTastierino:
   843     01A2                     	ds	17
   844     01B3                     _packet:
   845     01B3                     	ds	15
   846     01C2                     _id_dest:
   847     01C2                     	ds	4
   848     01C6                     _PIC_ID:
   849     01C6                     	ds	4
   850                           
   851                           	psect	dataBANK3
   852     01EE                     __pdataBANK3:
   853     01EE                     _maxFail:
   854     01EE                     	ds	1
   855     01EF                     _initialize:
   856     01EF                     	ds	1
   857                           
   858                           	psect	bssBANK2
   859     0110                     __pbssBANK2:
   860     0110                     _dato:
   861     0110                     	ds	50
   862                           
   863                           	psect	clrtext
   864     1546                     clear_ram0:	
   865                           ;	Called with FSR containing the base address, and
   866                           ;	W with the last address+1
   867                           
   868     1546  0064               	clrwdt	;clear the watchdog before getting into this loop
   869     1547                     clrloop0:
   870     1547  0180               	clrf	0	;clear RAM location pointed to by FSR
   871     1548  0A84               	incf	4,f	;increment pointer
   872     1549  0604               	xorwf	4,w	;XOR with final address
   873     154A  1903               	btfsc	3,2	;have we reached the end yet?
   874     154B  3400               	retlw	0	;all done for this memory range, return
   875     154C  0604               	xorwf	4,w	;XOR again to restore value
   876     154D  2D47               	goto	clrloop0	;do the next byte
   877                           
   878                           	psect	cstackBANK3
   879     01CA                     __pcstackBANK3:
   880     01CA                     ??_init_PIC:
   881                           
   882                           ; 1 bytes @ 0x0
   883     01CA                     	ds	2
   884     01CC                     init_PIC@id:
   885                           
   886                           ; 2 bytes @ 0x2
   887     01CC                     	ds	2
   888     01CE                     main@num_rand_s:
   889                           
   890                           ; 16 bytes @ 0x4
   891     01CE                     	ds	16
   892     01DE                     main@num_rand_s_228:
   893                           
   894                           ; 16 bytes @ 0x14
   895     01DE                     	ds	16
   896                           
   897                           	psect	cstackBANK1
   898     00A0                     __pcstackBANK1:
   899     00A0                     ??_lcdSend:
   900     00A0                     ?_strcopy:	
   901                           ; 1 bytes @ 0x0
   902                           
   903     00A0                     ??_Length:	
   904                           ; 1 bytes @ 0x0
   905                           
   906     00A0                     ?___lmul:	
   907                           ; 1 bytes @ 0x0
   908                           
   909     00A0                     ?___almod:	
   910                           ; 4 bytes @ 0x0
   911                           
   912     00A0                     eeprom_write@addr:	
   913                           ; 4 bytes @ 0x0
   914                           
   915     00A0                     strcopy@dest:	
   916                           ; 1 bytes @ 0x0
   917                           
   918     00A0                     ___lmul@multiplier:	
   919                           ; 2 bytes @ 0x0
   920                           
   921     00A0                     ___almod@divisor:	
   922                           ; 4 bytes @ 0x0
   923                           
   924                           
   925                           ; 4 bytes @ 0x0
   926     00A0                     	ds	2
   927     00A2                     ?_lcdPrint:
   928     00A2                     ??_init_LCD:	
   929                           ; 1 bytes @ 0x2
   930                           
   931     00A2                     strcopy@source:	
   932                           ; 1 bytes @ 0x2
   933                           
   934     00A2                     lcdPrint@str:	
   935                           ; 1 bytes @ 0x2
   936                           
   937                           
   938                           ; 2 bytes @ 0x2
   939     00A2                     	ds	1
   940     00A3                     ??_strcopy:
   941     00A3                     Length@len:	
   942                           ; 1 bytes @ 0x3
   943                           
   944                           
   945                           ; 2 bytes @ 0x3
   946     00A3                     	ds	1
   947     00A4                     ??_lcdPrint:
   948     00A4                     ___lmul@multiplicand:	
   949                           ; 1 bytes @ 0x4
   950                           
   951     00A4                     ___almod@dividend:	
   952                           ; 4 bytes @ 0x4
   953                           
   954                           
   955                           ; 4 bytes @ 0x4
   956     00A4                     	ds	1
   957     00A5                     ?_CompareStrings:
   958     00A5                     ??_Fill:	
   959                           ; 1 bytes @ 0x5
   960                           
   961     00A5                     ?_strcat:	
   962                           ; 1 bytes @ 0x5
   963                           
   964     00A5                     strcat@source:	
   965                           ; 2 bytes @ 0x5
   966                           
   967     00A5                     CompareStrings@str1:	
   968                           ; 2 bytes @ 0x5
   969                           
   970                           
   971                           ; 2 bytes @ 0x5
   972     00A5                     	ds	1
   973     00A6                     Fill@length:
   974                           
   975                           ; 2 bytes @ 0x6
   976     00A6                     	ds	1
   977     00A7                     ??_strcat:
   978     00A7                     CompareStrings@str2:	
   979                           ; 1 bytes @ 0x7
   980                           
   981     00A7                     lcdPrint@n:	
   982                           ; 1 bytes @ 0x7
   983                           
   984                           
   985                           ; 2 bytes @ 0x7
   986     00A7                     	ds	1
   987     00A8                     ??_SplitPacket:
   988     00A8                     ??_CompareStrings:	
   989                           ; 1 bytes @ 0x8
   990                           
   991     00A8                     Fill@id:	
   992                           ; 1 bytes @ 0x8
   993                           
   994     00A8                     ___almod@counter:	
   995                           ; 1 bytes @ 0x8
   996                           
   997     00A8                     ___lmul@product:	
   998                           ; 1 bytes @ 0x8
   999                           
  1000                           
  1001                           ; 4 bytes @ 0x8
  1002     00A8                     	ds	1
  1003     00A9                     ___almod@sign:
  1004                           
  1005                           ; 1 bytes @ 0x9
  1006     00A9                     	ds	2
  1007     00AB                     SplitPacket@len:
  1008                           
  1009                           ; 2 bytes @ 0xB
  1010     00AB                     	ds	1
  1011     00AC                     ?_rand:
  1012     00AC                     strcat@dest:	
  1013                           ; 2 bytes @ 0xC
  1014                           
  1015     00AC                     CompareStrings@i:	
  1016                           ; 1 bytes @ 0xC
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0xC
  1020     00AC                     	ds	1
  1021     00AD                     strcat@n:
  1022     00AD                     SplitPacket@part:	
  1023                           ; 2 bytes @ 0xD
  1024                           
  1025                           
  1026                           ; 5 bytes @ 0xD
  1027     00AD                     	ds	1
  1028     00AE                     ??_rand:
  1029                           
  1030                           ; 1 bytes @ 0xE
  1031     00AE                     	ds	1
  1032     00AF                     strcat@length_dest:
  1033                           
  1034                           ; 2 bytes @ 0xF
  1035     00AF                     	ds	2
  1036     00B1                     ?_ConcatToPacket:
  1037     00B1                     ConcatToPacket@str:	
  1038                           ; 1 bytes @ 0x11
  1039                           
  1040                           
  1041                           ; 2 bytes @ 0x11
  1042     00B1                     	ds	1
  1043     00B2                     SplitPacket@section:
  1044                           
  1045                           ; 2 bytes @ 0x12
  1046     00B2                     	ds	1
  1047     00B3                     ?___awmod:
  1048     00B3                     ConcatToPacket@delim:	
  1049                           ; 2 bytes @ 0x13
  1050                           
  1051     00B3                     ___awmod@divisor:	
  1052                           ; 1 bytes @ 0x13
  1053                           
  1054                           
  1055                           ; 2 bytes @ 0x13
  1056     00B3                     	ds	1
  1057     00B4                     ??_ConcatToPacket:
  1058     00B4                     SplitPacket@i_part:	
  1059                           ; 1 bytes @ 0x14
  1060                           
  1061                           
  1062                           ; 2 bytes @ 0x14
  1063     00B4                     	ds	1
  1064     00B5                     ConcatToPacket@packet_length:
  1065     00B5                     ___awmod@dividend:	
  1066                           ; 2 bytes @ 0x15
  1067                           
  1068                           
  1069                           ; 2 bytes @ 0x15
  1070     00B5                     	ds	1
  1071     00B6                     SplitPacket@pkt:
  1072                           
  1073                           ; 1 bytes @ 0x16
  1074     00B6                     	ds	1
  1075     00B7                     ConcatToPacket@pkt:
  1076     00B7                     ___awmod@counter:	
  1077                           ; 1 bytes @ 0x17
  1078                           
  1079     00B7                     SplitPacket@i:	
  1080                           ; 1 bytes @ 0x17
  1081                           
  1082                           
  1083                           ; 2 bytes @ 0x17
  1084     00B7                     	ds	1
  1085     00B8                     ___awmod@sign:
  1086                           
  1087                           ; 1 bytes @ 0x18
  1088     00B8                     	ds	1
  1089     00B9                     ?___wmul:
  1090     00B9                     ___wmul@multiplier:	
  1091                           ; 2 bytes @ 0x19
  1092                           
  1093                           
  1094                           ; 2 bytes @ 0x19
  1095     00B9                     	ds	2
  1096     00BB                     ___wmul@multiplicand:
  1097                           
  1098                           ; 2 bytes @ 0x1B
  1099     00BB                     	ds	2
  1100     00BD                     ___wmul@product:
  1101                           
  1102                           ; 2 bytes @ 0x1D
  1103     00BD                     	ds	2
  1104     00BF                     ??_read_NumPad:
  1105     00BF                     ?_UART_TxString:	
  1106                           ; 1 bytes @ 0x1F
  1107                           
  1108     00BF                     ?_pow:	
  1109                           ; 1 bytes @ 0x1F
  1110                           
  1111     00BF                     pow@exp:	
  1112                           ; 2 bytes @ 0x1F
  1113                           
  1114     00BF                     UART_TxString@is_ACK:	
  1115                           ; 1 bytes @ 0x1F
  1116                           
  1117                           
  1118                           ; 1 bytes @ 0x1F
  1119     00BF                     	ds	1
  1120     00C0                     ??_UART_TxString:
  1121                           
  1122                           ; 1 bytes @ 0x20
  1123     00C0                     	ds	1
  1124     00C1                     ??_pow:
  1125     00C1                     UART_TxString@n:	
  1126                           ; 1 bytes @ 0x21
  1127                           
  1128                           
  1129                           ; 2 bytes @ 0x21
  1130     00C1                     	ds	2
  1131     00C3                     pow@b:
  1132     00C3                     UART_TxString@str:	
  1133                           ; 1 bytes @ 0x23
  1134                           
  1135                           
  1136                           ; 1 bytes @ 0x23
  1137     00C3                     	ds	1
  1138     00C4                     pow@i:
  1139                           
  1140                           ; 2 bytes @ 0x24
  1141     00C4                     	ds	2
  1142     00C6                     pow@n:
  1143                           
  1144                           ; 2 bytes @ 0x26
  1145     00C6                     	ds	2
  1146     00C8                     ?___aldiv:
  1147     00C8                     ___aldiv@divisor:	
  1148                           ; 4 bytes @ 0x28
  1149                           
  1150                           
  1151                           ; 4 bytes @ 0x28
  1152     00C8                     	ds	1
  1153     00C9                     read_NumPad@id:
  1154                           
  1155                           ; 2 bytes @ 0x29
  1156     00C9                     	ds	3
  1157     00CC                     ___aldiv@dividend:
  1158                           
  1159                           ; 4 bytes @ 0x2C
  1160     00CC                     	ds	4
  1161     00D0                     ??___aldiv:
  1162                           
  1163                           ; 1 bytes @ 0x30
  1164     00D0                     	ds	1
  1165     00D1                     ___aldiv@counter:
  1166                           
  1167                           ; 1 bytes @ 0x31
  1168     00D1                     	ds	1
  1169     00D2                     ___aldiv@sign:
  1170                           
  1171                           ; 1 bytes @ 0x32
  1172     00D2                     	ds	1
  1173     00D3                     ___aldiv@quotient:
  1174                           
  1175                           ; 4 bytes @ 0x33
  1176     00D3                     	ds	4
  1177     00D7                     ?_ConvertToString:
  1178     00D7                     ?_UART_init:	
  1179                           ; 1 bytes @ 0x37
  1180                           
  1181     00D7                     ConvertToString@n:	
  1182                           ; 1 bytes @ 0x37
  1183                           
  1184     00D7                     UART_init@baudrate:	
  1185                           ; 4 bytes @ 0x37
  1186                           
  1187                           
  1188                           ; 4 bytes @ 0x37
  1189     00D7                     	ds	4
  1190     00DB                     ??_UART_init:
  1191     00DB                     ConvertToString@str:	
  1192                           ; 1 bytes @ 0x3B
  1193                           
  1194                           
  1195                           ; 1 bytes @ 0x3B
  1196     00DB                     	ds	1
  1197     00DC                     ??_ConvertToString:
  1198                           
  1199                           ; 1 bytes @ 0x3C
  1200     00DC                     	ds	1
  1201     00DD                     ConvertToString@temp:
  1202                           
  1203                           ; 2 bytes @ 0x3D
  1204     00DD                     	ds	2
  1205     00DF                     ConvertToString@j:
  1206                           
  1207                           ; 2 bytes @ 0x3F
  1208     00DF                     	ds	2
  1209     00E1                     ConvertToString@i:
  1210                           
  1211                           ; 2 bytes @ 0x41
  1212     00E1                     	ds	2
  1213     00E3                     ConvertToString@n_cifre:
  1214                           
  1215                           ; 1 bytes @ 0x43
  1216     00E3                     	ds	1
  1217                           
  1218                           	psect	cstackCOMMON
  1219     0070                     __pcstackCOMMON:
  1220     0070                     ?_init_PIC:
  1221     0070                     ?_read_NumPad:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224     0070                     ?_SplitPacket:	
  1225                           ; 1 bytes @ 0x0
  1226                           
  1227     0070                     ?_init_LCD:	
  1228                           ; 1 bytes @ 0x0
  1229                           
  1230     0070                     ?_init_NumPad:	
  1231                           ; 1 bytes @ 0x0
  1232                           
  1233     0070                     ?_init_Timer0:	
  1234                           ; 1 bytes @ 0x0
  1235                           
  1236     0070                     ?_eeprom_read:	
  1237                           ; 1 bytes @ 0x0
  1238                           
  1239     0070                     ?_Fill:	
  1240                           ; 1 bytes @ 0x0
  1241                           
  1242     0070                     ?_main:	
  1243                           ; 1 bytes @ 0x0
  1244                           
  1245     0070                     ?_UART_TxChar:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248     0070                     ?_IRS:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251     0070                     ?i1_UART_TxChar:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254     0070                     ??i1_UART_TxChar:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257     0070                     ?i1_srand:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260     0070                     ?i1___lmul:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263     0070                     i1srand@x:	
  1264                           ; 4 bytes @ 0x0
  1265                           
  1266     0070                     i1___lmul@multiplier:	
  1267                           ; 2 bytes @ 0x0
  1268                           
  1269                           
  1270                           ; 4 bytes @ 0x0
  1271     0070                     	ds	1
  1272     0071                     i1UART_TxChar@ch:
  1273                           
  1274                           ; 1 bytes @ 0x1
  1275     0071                     	ds	1
  1276     0072                     ??i1_srand:
  1277                           
  1278                           ; 1 bytes @ 0x2
  1279     0072                     	ds	2
  1280     0074                     i1___lmul@multiplicand:
  1281                           
  1282                           ; 4 bytes @ 0x4
  1283     0074                     	ds	4
  1284     0078                     ??i1___lmul:
  1285                           
  1286                           ; 1 bytes @ 0x8
  1287     0078                     	ds	1
  1288     0079                     i1___lmul@product:
  1289                           
  1290                           ; 4 bytes @ 0x9
  1291     0079                     	ds	4
  1292     007D                     ??i1___awmod:
  1293                           
  1294                           ; 1 bytes @ 0xD
  1295     007D                     	ds	1
  1296     007E                     ??i1___wmul:
  1297                           
  1298                           	psect	cstackBANK0
  1299     0020                     __pcstackBANK0:	
  1300                           ; 1 bytes @ 0xE
  1301                           
  1302     0020                     ?i1_rand:
  1303                           
  1304                           ; 2 bytes @ 0x0
  1305     0020                     	ds	2
  1306     0022                     ??i1_rand:
  1307                           
  1308                           ; 1 bytes @ 0x2
  1309     0022                     	ds	5
  1310     0027                     ?i1___awmod:
  1311     0027                     i1___awmod@divisor:	
  1312                           ; 2 bytes @ 0x7
  1313                           
  1314                           
  1315                           ; 2 bytes @ 0x7
  1316     0027                     	ds	2
  1317     0029                     i1___awmod@dividend:
  1318                           
  1319                           ; 2 bytes @ 0x9
  1320     0029                     	ds	2
  1321     002B                     i1___awmod@counter:
  1322                           
  1323                           ; 1 bytes @ 0xB
  1324     002B                     	ds	1
  1325     002C                     i1___awmod@sign:
  1326                           
  1327                           ; 1 bytes @ 0xC
  1328     002C                     	ds	1
  1329     002D                     ?i1___wmul:
  1330     002D                     i1___wmul@multiplier:	
  1331                           ; 2 bytes @ 0xD
  1332                           
  1333                           
  1334                           ; 2 bytes @ 0xD
  1335     002D                     	ds	2
  1336     002F                     i1___wmul@multiplicand:
  1337                           
  1338                           ; 2 bytes @ 0xF
  1339     002F                     	ds	2
  1340     0031                     i1___wmul@product:
  1341                           
  1342                           ; 2 bytes @ 0x11
  1343     0031                     	ds	2
  1344     0033                     ?i1_UART_TxString:
  1345     0033                     i1UART_TxString@is_ACK:	
  1346                           ; 1 bytes @ 0x13
  1347                           
  1348                           
  1349                           ; 1 bytes @ 0x13
  1350     0033                     	ds	1
  1351     0034                     ??i1_UART_TxString:
  1352                           
  1353                           ; 1 bytes @ 0x14
  1354     0034                     	ds	1
  1355     0035                     i1UART_TxString@str:
  1356                           
  1357                           ; 1 bytes @ 0x15
  1358     0035                     	ds	1
  1359     0036                     i1UART_TxString@n:
  1360                           
  1361                           ; 2 bytes @ 0x16
  1362     0036                     	ds	2
  1363     0038                     ??_IRS:
  1364                           
  1365                           ; 1 bytes @ 0x18
  1366     0038                     	ds	4
  1367     003C                     ?_lcdSend:
  1368     003C                     ??_init_NumPad:	
  1369                           ; 1 bytes @ 0x1C
  1370                           
  1371     003C                     ??_init_Timer0:	
  1372                           ; 1 bytes @ 0x1C
  1373                           
  1374     003C                     ??_eeprom_read:	
  1375                           ; 1 bytes @ 0x1C
  1376                           
  1377     003C                     ?_eeprom_write:	
  1378                           ; 1 bytes @ 0x1C
  1379                           
  1380     003C                     ?_srand:	
  1381                           ; 1 bytes @ 0x1C
  1382                           
  1383     003C                     ??_UART_TxChar:	
  1384                           ; 1 bytes @ 0x1C
  1385                           
  1386     003C                     ??___lmul:	
  1387                           ; 1 bytes @ 0x1C
  1388                           
  1389     003C                     ??___almod:	
  1390                           ; 1 bytes @ 0x1C
  1391                           
  1392     003C                     ?_Length:	
  1393                           ; 1 bytes @ 0x1C
  1394                           
  1395     003C                     lcdSend@tipo:	
  1396                           ; 2 bytes @ 0x1C
  1397                           
  1398     003C                     eeprom_write@value:	
  1399                           ; 1 bytes @ 0x1C
  1400                           
  1401     003C                     Length@str:	
  1402                           ; 1 bytes @ 0x1C
  1403                           
  1404     003C                     strcopy@n:	
  1405                           ; 2 bytes @ 0x1C
  1406                           
  1407     003C                     srand@x:	
  1408                           ; 2 bytes @ 0x1C
  1409                           
  1410                           
  1411                           ; 2 bytes @ 0x1C
  1412     003C                     	ds	1
  1413     003D                     ??_eeprom_write:
  1414     003D                     ??___awmod:	
  1415                           ; 1 bytes @ 0x1D
  1416                           
  1417     003D                     lcdSend@dato:	
  1418                           ; 1 bytes @ 0x1D
  1419                           
  1420     003D                     UART_TxChar@ch:	
  1421                           ; 1 bytes @ 0x1D
  1422                           
  1423     003D                     eeprom_read@addr:	
  1424                           ; 1 bytes @ 0x1D
  1425                           
  1426                           
  1427                           ; 1 bytes @ 0x1D
  1428     003D                     	ds	1
  1429     003E                     ??_srand:
  1430     003E                     ??_main:	
  1431                           ; 1 bytes @ 0x1E
  1432                           
  1433     003E                     ??___wmul:	
  1434                           ; 1 bytes @ 0x1E
  1435                           
  1436                           
  1437                           	psect	maintext
  1438     0069                     __pmaintext:	
  1439                           ; 1 bytes @ 0x1E
  1440 ;;
  1441 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1442 ;;
  1443 ;; *************** function _main *****************
  1444 ;; Defined at:
  1445 ;;		line 126 in file "main.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  num_rand_s     16   20[BANK3 ] unsigned char [16]
  1450 ;;  num_rand_s     16    4[BANK3 ] unsigned char [16]
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  1    wreg      void 
  1453 ;; Registers used:
  1454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1455 ;; Tracked objects:
  1456 ;;		On entry : B00/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1460 ;;      Params:         0       0       0       0       0
  1461 ;;      Locals:         0       0       0      32       0
  1462 ;;      Temps:          0       0       0       0       0
  1463 ;;      Totals:         0       0       0      32       0
  1464 ;;Total ram usage:       32 bytes
  1465 ;; Hardware stack levels required when called: 8
  1466 ;; This function calls:
  1467 ;;		_CompareStrings
  1468 ;;		_ConcatToPacket
  1469 ;;		_ConvertToString
  1470 ;;		_SplitPacket
  1471 ;;		_UART_TxString
  1472 ;;		_init_PIC
  1473 ;;		_lcdPrint
  1474 ;;		_lcdSend
  1475 ;;		_read_NumPad
  1476 ;; This function is called by:
  1477 ;;		Startup code after reset
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481     0069                     _main:	
  1482                           ;psect for function _main
  1483                           
  1484     0069                     l3562:	
  1485                           ;incstack = 0
  1486                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1487                           
  1488                           
  1489                           ;main.c: 129:     init_PIC();
  1490     0069  120A  158A  2392  120A  118A  	fcall	_init_PIC
  1491     006E                     l3564:
  1492                           
  1493                           ;main.c: 132:     {;main.c: 133:         if(pr_start)
  1494     006E  1683               	bsf	3,5	;RP0=1, select bank3
  1495     006F  1703               	bsf	3,6	;RP1=1, select bank3
  1496     0070  0817               	movf	_pr_start^(0+384),w
  1497     0071  1903               	btfsc	3,2
  1498     0072  2874               	goto	u3791
  1499     0073  2875               	goto	u3790
  1500     0074                     u3791:
  1501     0074  28A0               	goto	l3574
  1502     0075                     u3790:
  1503     0075                     l3566:
  1504                           
  1505                           ;main.c: 134:         {;main.c: 135:             lcdSend(0x01, 0);
  1506     0075  1283               	bcf	3,5	;RP0=0, select bank0
  1507     0076  1303               	bcf	3,6	;RP1=0, select bank0
  1508     0077  01BC               	clrf	lcdSend@tipo
  1509     0078  3001               	movlw	1
  1510     0079  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1511     007E                     l3568:
  1512                           
  1513                           ;main.c: 136:             lcdPrint("Premi '#'\0");
  1514     007E  30F0               	movlw	low (STR_1| (0+32768))
  1515     007F  1683               	bsf	3,5	;RP0=1, select bank1
  1516     0080  1303               	bcf	3,6	;RP1=0, select bank1
  1517     0081  00A2               	movwf	lcdPrint@str^(0+128)
  1518     0082  3087               	movlw	high (STR_1| (0+32768))
  1519     0083  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1520     0084  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1521     0089                     l3570:
  1522                           
  1523                           ;main.c: 137:             lcdSend(0xC0, 0);
  1524     0089  1283               	bcf	3,5	;RP0=0, select bank0
  1525     008A  1303               	bcf	3,6	;RP1=0, select bank0
  1526     008B  01BC               	clrf	lcdSend@tipo
  1527     008C  30C0               	movlw	192
  1528     008D  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1529                           
  1530                           ;main.c: 138:             lcdPrint("per gen. codice\0");
  1531     0092  306C               	movlw	low (STR_2| (0+32768))
  1532     0093  1683               	bsf	3,5	;RP0=1, select bank1
  1533     0094  1303               	bcf	3,6	;RP1=0, select bank1
  1534     0095  00A2               	movwf	lcdPrint@str^(0+128)
  1535     0096  3087               	movlw	high (STR_2| (0+32768))
  1536     0097  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1537     0098  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1538     009D                     l3572:
  1539                           
  1540                           ;main.c: 139:             pr_start = 0;
  1541     009D  1683               	bsf	3,5	;RP0=1, select bank3
  1542     009E  1703               	bsf	3,6	;RP1=1, select bank3
  1543     009F  0197               	clrf	_pr_start^(0+384)
  1544     00A0                     l3574:
  1545                           
  1546                           ;main.c: 141:         if(pr_err_max)
  1547     00A0  0816               	movf	_pr_err_max^(0+384),w
  1548     00A1  1903               	btfsc	3,2
  1549     00A2  28A4               	goto	u3801
  1550     00A3  28A5               	goto	u3800
  1551     00A4                     u3801:
  1552     00A4  28D0               	goto	l3584
  1553     00A5                     u3800:
  1554     00A5                     l3576:
  1555                           
  1556                           ;main.c: 142:         {;main.c: 144:             lcdSend(0x01, 0);
  1557     00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1558     00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1559     00A7  01BC               	clrf	lcdSend@tipo
  1560     00A8  3001               	movlw	1
  1561     00A9  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1562     00AE                     l3578:
  1563                           
  1564                           ;main.c: 145:             lcdPrint("ERRORE\0");
  1565     00AE  300F               	movlw	low (STR_3| (0+32768))
  1566     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  1567     00B0  1303               	bcf	3,6	;RP1=0, select bank1
  1568     00B1  00A2               	movwf	lcdPrint@str^(0+128)
  1569     00B2  3088               	movlw	high (STR_3| (0+32768))
  1570     00B3  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1571     00B4  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1572     00B9                     l3580:
  1573                           
  1574                           ;main.c: 146:             lcdSend(0xC0, 0);
  1575     00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1576     00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1577     00BB  01BC               	clrf	lcdSend@tipo
  1578     00BC  30C0               	movlw	192
  1579     00BD  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1580                           
  1581                           ;main.c: 147:             lcdPrint("ID > 250\0");
  1582     00C2  3005               	movlw	low (STR_4| (0+32768))
  1583     00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1584     00C4  1303               	bcf	3,6	;RP1=0, select bank1
  1585     00C5  00A2               	movwf	lcdPrint@str^(0+128)
  1586     00C6  3088               	movlw	high (STR_4| (0+32768))
  1587     00C7  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1588     00C8  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1589     00CD                     l3582:
  1590                           
  1591                           ;main.c: 148:             pr_err_max = 0;
  1592     00CD  1683               	bsf	3,5	;RP0=1, select bank3
  1593     00CE  1703               	bsf	3,6	;RP1=1, select bank3
  1594     00CF  0196               	clrf	_pr_err_max^(0+384)
  1595     00D0                     l3584:
  1596                           
  1597                           ;main.c: 150:         if(pr_succ)
  1598     00D0  0815               	movf	_pr_succ^(0+384),w
  1599     00D1  1903               	btfsc	3,2
  1600     00D2  28D4               	goto	u3811
  1601     00D3  28D5               	goto	u3810
  1602     00D4                     u3811:
  1603     00D4  28FE               	goto	l3596
  1604     00D5                     u3810:
  1605     00D5                     l3586:
  1606                           
  1607                           ;main.c: 151:         {;main.c: 153:             lcdSend(0x01, 0);
  1608     00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1609     00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1610     00D7  01BC               	clrf	lcdSend@tipo
  1611     00D8  3001               	movlw	1
  1612     00D9  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1613     00DE                     l3588:
  1614                           
  1615                           ;main.c: 154:             lcdPrint("ID Salvato\0");
  1616     00DE  30E4               	movlw	low (STR_5| (0+32768))
  1617     00DF  1683               	bsf	3,5	;RP0=1, select bank1
  1618     00E0  1303               	bcf	3,6	;RP1=0, select bank1
  1619     00E1  00A2               	movwf	lcdPrint@str^(0+128)
  1620     00E2  3087               	movlw	high (STR_5| (0+32768))
  1621     00E3  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1622     00E4  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1623     00E9                     l3590:
  1624                           
  1625                           ;main.c: 156:             milliseconds = 0;
  1626     00E9  3000               	movlw	0
  1627     00EA  1683               	bsf	3,5	;RP0=1, select bank1
  1628     00EB  1303               	bcf	3,6	;RP1=0, select bank1
  1629     00EC  00EB               	movwf	(_milliseconds+3)^(0+128)
  1630     00ED  3000               	movlw	0
  1631     00EE  00EA               	movwf	(_milliseconds+2)^(0+128)
  1632     00EF  3000               	movlw	0
  1633     00F0  00E9               	movwf	(_milliseconds+1)^(0+128)
  1634     00F1  3000               	movlw	0
  1635     00F2  00E8               	movwf	_milliseconds^(0+128)
  1636     00F3                     l3592:
  1637                           
  1638                           ;main.c: 157:             seconds = 1000;
  1639     00F3  3000               	movlw	0
  1640     00F4  00E7               	movwf	(_seconds+3)^(0+128)
  1641     00F5  3000               	movlw	0
  1642     00F6  00E6               	movwf	(_seconds+2)^(0+128)
  1643     00F7  3003               	movlw	3
  1644     00F8  00E5               	movwf	(_seconds+1)^(0+128)
  1645     00F9  30E8               	movlw	232
  1646     00FA  00E4               	movwf	_seconds^(0+128)
  1647     00FB                     l3594:
  1648                           
  1649                           ;main.c: 158:             pr_succ = 0;
  1650     00FB  1683               	bsf	3,5	;RP0=1, select bank3
  1651     00FC  1703               	bsf	3,6	;RP1=1, select bank3
  1652     00FD  0195               	clrf	_pr_succ^(0+384)
  1653     00FE                     l3596:
  1654                           
  1655                           ;main.c: 160:         if(pr_countdown)
  1656     00FE  0814               	movf	_pr_countdown^(0+384),w
  1657     00FF  1903               	btfsc	3,2
  1658     0100  2902               	goto	u3821
  1659     0101  2903               	goto	u3820
  1660     0102                     u3821:
  1661     0102  2951               	goto	l3612
  1662     0103                     u3820:
  1663     0103                     l3598:
  1664                           
  1665                           ;main.c: 161:         {;main.c: 162:             lcdSend(0x01, 0);
  1666     0103  1283               	bcf	3,5	;RP0=0, select bank0
  1667     0104  1303               	bcf	3,6	;RP1=0, select bank0
  1668     0105  01BC               	clrf	lcdSend@tipo
  1669     0106  3001               	movlw	1
  1670     0107  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1671     010C                     l3600:
  1672                           
  1673                           ;main.c: 164:             char num_rand_s[16];;main.c: 165:             ConvertToString(
      +                          num_rand, num_rand_s);
  1674     010C  1683               	bsf	3,5	;RP0=1, select bank3
  1675     010D  1703               	bsf	3,6	;RP1=1, select bank3
  1676     010E  0812               	movf	_num_rand^(0+384),w
  1677     010F  1683               	bsf	3,5	;RP0=1, select bank1
  1678     0110  1303               	bcf	3,6	;RP1=0, select bank1
  1679     0111  00D7               	movwf	ConvertToString@n^(0+128)
  1680     0112  1683               	bsf	3,5	;RP0=1, select bank3
  1681     0113  1703               	bsf	3,6	;RP1=1, select bank3
  1682     0114  0813               	movf	(_num_rand+1)^(0+384),w
  1683     0115  1683               	bsf	3,5	;RP0=1, select bank1
  1684     0116  1303               	bcf	3,6	;RP1=0, select bank1
  1685     0117  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  1686     0118  3000               	movlw	0
  1687     0119  1BD8               	btfsc	(ConvertToString@n+1)^(0+128),7
  1688     011A  30FF               	movlw	255
  1689     011B  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  1690     011C  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  1691     011D  30CE               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1692     011E  00DB               	movwf	ConvertToString@str^(0+128)
  1693     011F  120A  158A  2726  120A  118A  	fcall	_ConvertToString
  1694     0124                     l3602:
  1695                           
  1696                           ;main.c: 166:             lcdPrint("Codice: \0");
  1697     0124  30FB               	movlw	low (STR_6| (0+32768))
  1698     0125  1683               	bsf	3,5	;RP0=1, select bank1
  1699     0126  1303               	bcf	3,6	;RP1=0, select bank1
  1700     0127  00A2               	movwf	lcdPrint@str^(0+128)
  1701     0128  3087               	movlw	high (STR_6| (0+32768))
  1702     0129  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1703     012A  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1704     012F                     l3604:
  1705                           
  1706                           ;main.c: 167:             lcdPrint(num_rand_s);
  1707     012F  30CE               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1708     0130  1683               	bsf	3,5	;RP0=1, select bank1
  1709     0131  1303               	bcf	3,6	;RP1=0, select bank1
  1710     0132  00A2               	movwf	lcdPrint@str^(0+128)
  1711     0133  3001               	movlw	1
  1712     0134  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  1713     0135  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1714     013A                     l3606:
  1715                           
  1716                           ;main.c: 168:             lcdSend(0xC0, 0);
  1717     013A  1283               	bcf	3,5	;RP0=0, select bank0
  1718     013B  1303               	bcf	3,6	;RP1=0, select bank0
  1719     013C  01BC               	clrf	lcdSend@tipo
  1720     013D  30C0               	movlw	192
  1721     013E  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1722     0143                     l3608:
  1723                           
  1724                           ;main.c: 169:             lcdPrint("# per altro cod.\0");
  1725     0143  3037               	movlw	low (STR_7| (0+32768))
  1726     0144  1683               	bsf	3,5	;RP0=1, select bank1
  1727     0145  1303               	bcf	3,6	;RP1=0, select bank1
  1728     0146  00A2               	movwf	lcdPrint@str^(0+128)
  1729     0147  3087               	movlw	high (STR_7| (0+32768))
  1730     0148  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1731     0149  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1732     014E                     l3610:
  1733                           
  1734                           ;main.c: 170:             pr_countdown = 0;
  1735     014E  1683               	bsf	3,5	;RP0=1, select bank3
  1736     014F  1703               	bsf	3,6	;RP1=1, select bank3
  1737     0150  0194               	clrf	_pr_countdown^(0+384)
  1738     0151                     l3612:
  1739                           
  1740                           ;main.c: 174:         read_NumPad();
  1741     0151  120A  118A  2429  120A  118A  	fcall	_read_NumPad
  1742     0156                     l3614:
  1743                           
  1744                           ;main.c: 177:         if(i_id != old_i_id && initialize)
  1745     0156  1683               	bsf	3,5	;RP0=1, select bank3
  1746     0157  1703               	bsf	3,6	;RP1=1, select bank3
  1747     0158  0821               	movf	_i_id^(0+384),w
  1748     0159  0620               	xorwf	_old_i_id^(0+384),w
  1749     015A  1903               	skipnz
  1750     015B  295D               	goto	u3831
  1751     015C  295E               	goto	u3830
  1752     015D                     u3831:
  1753     015D  298B               	goto	l3624
  1754     015E                     u3830:
  1755     015E                     l3616:
  1756     015E  086F               	movf	_initialize^(0+384),w
  1757     015F  1903               	btfsc	3,2
  1758     0160  2962               	goto	u3841
  1759     0161  2963               	goto	u3840
  1760     0162                     u3841:
  1761     0162  298B               	goto	l3624
  1762     0163                     u3840:
  1763     0163                     l3618:
  1764                           
  1765                           ;main.c: 178:         {;main.c: 180:             lcdSend(0x01, 0);
  1766     0163  1283               	bcf	3,5	;RP0=0, select bank0
  1767     0164  1303               	bcf	3,6	;RP1=0, select bank0
  1768     0165  01BC               	clrf	lcdSend@tipo
  1769     0166  3001               	movlw	1
  1770     0167  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1771     016C                     l3620:
  1772                           
  1773                           ;main.c: 181:             lcdPrint("#=conf. *=canc.\0");
  1774     016C  305B               	movlw	low (STR_8| (0+32768))
  1775     016D  1683               	bsf	3,5	;RP0=1, select bank1
  1776     016E  1303               	bcf	3,6	;RP1=0, select bank1
  1777     016F  00A2               	movwf	lcdPrint@str^(0+128)
  1778     0170  3087               	movlw	high (STR_8| (0+32768))
  1779     0171  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1780     0172  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1781     0177                     l3622:
  1782                           
  1783                           ;main.c: 182:             lcdSend(0xC0, 0);
  1784     0177  1283               	bcf	3,5	;RP0=0, select bank0
  1785     0178  1303               	bcf	3,6	;RP1=0, select bank0
  1786     0179  01BC               	clrf	lcdSend@tipo
  1787     017A  30C0               	movlw	192
  1788     017B  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1789                           
  1790                           ;main.c: 183:             lcdPrint(PIC_ID);
  1791     0180  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  1792     0181  1683               	bsf	3,5	;RP0=1, select bank1
  1793     0182  1303               	bcf	3,6	;RP1=0, select bank1
  1794     0183  00A2               	movwf	lcdPrint@str^(0+128)
  1795     0184  3001               	movlw	1
  1796     0185  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  1797     0186  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1798     018B                     l3624:
  1799                           
  1800                           ;main.c: 186:         old_i_id = i_id;
  1801     018B  1683               	bsf	3,5	;RP0=1, select bank3
  1802     018C  1703               	bsf	3,6	;RP1=1, select bank3
  1803     018D  0821               	movf	_i_id^(0+384),w
  1804     018E  00A0               	movwf	_old_i_id^(0+384)
  1805     018F                     l3626:
  1806                           
  1807                           ;main.c: 190:         if(num_rand != old_num_rand)
  1808     018F  0811               	movf	(_old_num_rand+1)^(0+384),w
  1809     0190  0613               	xorwf	(_num_rand+1)^(0+384),w
  1810     0191  1D03               	skipz
  1811     0192  2995               	goto	u3855
  1812     0193  0810               	movf	_old_num_rand^(0+384),w
  1813     0194  0612               	xorwf	_num_rand^(0+384),w
  1814     0195                     u3855:
  1815     0195  1903               	skipnz
  1816     0196  2998               	goto	u3851
  1817     0197  2999               	goto	u3850
  1818     0198                     u3851:
  1819     0198  2A17               	goto	l3658
  1820     0199                     u3850:
  1821     0199                     l3628:
  1822                           
  1823                           ;main.c: 191:         {;main.c: 193:             lcdSend(0x01, 0);
  1824     0199  1283               	bcf	3,5	;RP0=0, select bank0
  1825     019A  1303               	bcf	3,6	;RP1=0, select bank0
  1826     019B  01BC               	clrf	lcdSend@tipo
  1827     019C  3001               	movlw	1
  1828     019D  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1829     01A2                     l3630:
  1830                           
  1831                           ;main.c: 195:             char num_rand_s[16];;main.c: 196:             ConvertToString(
      +                          num_rand, num_rand_s);
  1832     01A2  1683               	bsf	3,5	;RP0=1, select bank3
  1833     01A3  1703               	bsf	3,6	;RP1=1, select bank3
  1834     01A4  0812               	movf	_num_rand^(0+384),w
  1835     01A5  1683               	bsf	3,5	;RP0=1, select bank1
  1836     01A6  1303               	bcf	3,6	;RP1=0, select bank1
  1837     01A7  00D7               	movwf	ConvertToString@n^(0+128)
  1838     01A8  1683               	bsf	3,5	;RP0=1, select bank3
  1839     01A9  1703               	bsf	3,6	;RP1=1, select bank3
  1840     01AA  0813               	movf	(_num_rand+1)^(0+384),w
  1841     01AB  1683               	bsf	3,5	;RP0=1, select bank1
  1842     01AC  1303               	bcf	3,6	;RP1=0, select bank1
  1843     01AD  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  1844     01AE  3000               	movlw	0
  1845     01AF  1BD8               	btfsc	(ConvertToString@n+1)^(0+128),7
  1846     01B0  30FF               	movlw	255
  1847     01B1  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  1848     01B2  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  1849     01B3  30DE               	movlw	(low (main@num_rand_s_228| (0+256)))& (0+255)
  1850     01B4  00DB               	movwf	ConvertToString@str^(0+128)
  1851     01B5  120A  158A  2726  120A  118A  	fcall	_ConvertToString
  1852     01BA                     l3632:
  1853                           
  1854                           ;main.c: 197:             lcdPrint("Codice: \0");
  1855     01BA  30FB               	movlw	low (STR_6| (0+32768))
  1856     01BB  1683               	bsf	3,5	;RP0=1, select bank1
  1857     01BC  1303               	bcf	3,6	;RP1=0, select bank1
  1858     01BD  00A2               	movwf	lcdPrint@str^(0+128)
  1859     01BE  3087               	movlw	high (STR_6| (0+32768))
  1860     01BF  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1861     01C0  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1862     01C5                     l3634:
  1863                           
  1864                           ;main.c: 198:             lcdPrint(num_rand_s);
  1865     01C5  30DE               	movlw	(low (main@num_rand_s_228| (0+256)))& (0+255)
  1866     01C6  1683               	bsf	3,5	;RP0=1, select bank1
  1867     01C7  1303               	bcf	3,6	;RP1=0, select bank1
  1868     01C8  00A2               	movwf	lcdPrint@str^(0+128)
  1869     01C9  3001               	movlw	1
  1870     01CA  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  1871     01CB  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1872     01D0                     l3636:
  1873                           
  1874                           ;main.c: 199:             lcdSend(0xC0, 0);
  1875     01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1876     01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1877     01D2  01BC               	clrf	lcdSend@tipo
  1878     01D3  30C0               	movlw	192
  1879     01D4  160A  118A  2613  120A  118A  	fcall	_lcdSend
  1880     01D9                     l3638:
  1881                           
  1882                           ;main.c: 200:             lcdPrint("Attendi 30s...\0");
  1883     01D9  307D               	movlw	low (STR_10| (0+32768))
  1884     01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1885     01DB  1303               	bcf	3,6	;RP1=0, select bank1
  1886     01DC  00A2               	movwf	lcdPrint@str^(0+128)
  1887     01DD  3087               	movlw	high (STR_10| (0+32768))
  1888     01DE  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  1889     01DF  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  1890     01E4                     l3640:
  1891                           
  1892                           ;main.c: 212:             packet[0] = '0';
  1893     01E4  3030               	movlw	48
  1894     01E5  1683               	bsf	3,5	;RP0=1, select bank3
  1895     01E6  1703               	bsf	3,6	;RP1=1, select bank3
  1896     01E7  00B3               	movwf	_packet^(0+384)
  1897     01E8                     l3642:
  1898                           
  1899                           ;main.c: 213:             packet[1] = '/';
  1900     01E8  302F               	movlw	47
  1901     01E9  00B4               	movwf	(_packet^(0+384)+1)
  1902     01EA                     l3644:
  1903                           
  1904                           ;main.c: 214:             packet[2] = '\0';
  1905     01EA  01B5               	clrf	(_packet^(0+384)+2)
  1906     01EB                     l3646:
  1907                           
  1908                           ;main.c: 216:             ConcatToPacket(packet, PIC_ID, '/');
  1909     01EB  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  1910     01EC  1683               	bsf	3,5	;RP0=1, select bank1
  1911     01ED  1303               	bcf	3,6	;RP1=0, select bank1
  1912     01EE  00B1               	movwf	ConcatToPacket@str^(0+128)
  1913     01EF  3001               	movlw	1
  1914     01F0  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  1915     01F1  302F               	movlw	47
  1916     01F2  00B3               	movwf	ConcatToPacket@delim^(0+128)
  1917     01F3  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  1918     01F4  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  1919     01F9                     l3648:
  1920                           
  1921                           ;main.c: 218:             packet[6] = '0';
  1922     01F9  3030               	movlw	48
  1923     01FA  1683               	bsf	3,5	;RP0=1, select bank3
  1924     01FB  1703               	bsf	3,6	;RP1=1, select bank3
  1925     01FC  00B9               	movwf	(_packet^(0+384)+6)
  1926     01FD                     l3650:
  1927                           
  1928                           ;main.c: 219:             packet[7] = '/';
  1929     01FD  302F               	movlw	47
  1930     01FE  00BA               	movwf	(_packet^(0+384)+7)
  1931     01FF                     l3652:
  1932                           
  1933                           ;main.c: 220:             packet[8] = '\0';
  1934     01FF  01BB               	clrf	(_packet^(0+384)+8)
  1935     0200                     l3654:
  1936                           
  1937                           ;main.c: 222:             ConcatToPacket(packet, num_rand_s, ' ');
  1938     0200  30DE               	movlw	(low (main@num_rand_s_228| (0+256)))& (0+255)
  1939     0201  1683               	bsf	3,5	;RP0=1, select bank1
  1940     0202  1303               	bcf	3,6	;RP1=0, select bank1
  1941     0203  00B1               	movwf	ConcatToPacket@str^(0+128)
  1942     0204  3001               	movlw	1
  1943     0205  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  1944     0206  3020               	movlw	32
  1945     0207  00B3               	movwf	ConcatToPacket@delim^(0+128)
  1946     0208  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  1947     0209  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  1948     020E                     l3656:
  1949                           
  1950                           ;main.c: 224:             UART_TxString(packet, 0);
  1951     020E  1683               	bsf	3,5	;RP0=1, select bank1
  1952     020F  1303               	bcf	3,6	;RP1=0, select bank1
  1953     0210  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  1954     0211  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  1955     0212  120A  158A  2406  120A  118A  	fcall	_UART_TxString
  1956     0217                     l3658:
  1957                           
  1958                           ;main.c: 227:         old_num_rand = num_rand;
  1959     0217  1683               	bsf	3,5	;RP0=1, select bank3
  1960     0218  1703               	bsf	3,6	;RP1=1, select bank3
  1961     0219  0813               	movf	(_num_rand+1)^(0+384),w
  1962     021A  0091               	movwf	(_old_num_rand+1)^(0+384)
  1963     021B  0812               	movf	_num_rand^(0+384),w
  1964     021C  0090               	movwf	_old_num_rand^(0+384)
  1965     021D                     l3660:
  1966                           
  1967                           ;main.c: 230:         if(recieved)
  1968     021D  081B               	movf	_recieved^(0+384),w
  1969     021E  1903               	btfsc	3,2
  1970     021F  2A21               	goto	u3861
  1971     0220  2A22               	goto	u3860
  1972     0221                     u3861:
  1973     0221  2B09               	goto	l3714
  1974     0222                     u3860:
  1975     0222                     l3662:
  1976                           
  1977                           ;main.c: 231:         {;main.c: 232:             SplitPacket(dato);
  1978     0222  3010               	movlw	(low (_dato| (0+256)))& (0+255)
  1979     0223  120A  118A  2651  120A  118A  	fcall	_SplitPacket
  1980     0228                     l3664:
  1981                           
  1982                           ;main.c: 234:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '0')
  1983     0228  3031               	movlw	49
  1984     0229  1683               	bsf	3,5	;RP0=1, select bank3
  1985     022A  1703               	bsf	3,6	;RP1=1, select bank3
  1986     022B  061F               	xorwf	_source^(0+384),w
  1987     022C  1D03               	btfss	3,2
  1988     022D  2A2F               	goto	u3871
  1989     022E  2A30               	goto	u3870
  1990     022F                     u3871:
  1991     022F  2ABE               	goto	l3698
  1992     0230                     u3870:
  1993     0230                     l3666:
  1994     0230  30C2               	movlw	(low (_id_dest| (0+256)))& (0+255)
  1995     0231  1683               	bsf	3,5	;RP0=1, select bank1
  1996     0232  1303               	bcf	3,6	;RP1=0, select bank1
  1997     0233  00A5               	movwf	CompareStrings@str1^(0+128)
  1998     0234  3001               	movlw	1
  1999     0235  00A6               	movwf	(CompareStrings@str1+1)^(0+128)
  2000     0236  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2001     0237  00A7               	movwf	CompareStrings@str2^(0+128)
  2002     0238  120A  158A  22B1  120A  118A  	fcall	_CompareStrings
  2003     023D  3A00               	xorlw	0
  2004     023E  1903               	skipnz
  2005     023F  2A41               	goto	u3881
  2006     0240  2A42               	goto	u3880
  2007     0241                     u3881:
  2008     0241  2ABE               	goto	l3698
  2009     0242                     u3880:
  2010     0242                     l3668:
  2011     0242  3030               	movlw	48
  2012     0243  1683               	bsf	3,5	;RP0=1, select bank3
  2013     0244  1703               	bsf	3,6	;RP1=1, select bank3
  2014     0245  061E               	xorwf	_type^(0+384),w
  2015     0246  1D03               	btfss	3,2
  2016     0247  2A49               	goto	u3891
  2017     0248  2A4A               	goto	u3890
  2018     0249                     u3891:
  2019     0249  2ABE               	goto	l3698
  2020     024A                     u3890:
  2021     024A                     l3670:
  2022                           
  2023                           ;main.c: 235:             {;main.c: 237:                 packet[0] = '0';
  2024     024A  3030               	movlw	48
  2025     024B  00B3               	movwf	_packet^(0+384)
  2026                           
  2027                           ;main.c: 238:                 packet[1] = '/';
  2028     024C  302F               	movlw	47
  2029     024D  00B4               	movwf	(_packet^(0+384)+1)
  2030     024E                     l3672:
  2031                           
  2032                           ;main.c: 239:                 packet[2] = '\0';
  2033     024E  01B5               	clrf	(_packet^(0+384)+2)
  2034     024F                     l3674:
  2035                           
  2036                           ;main.c: 240:                 ConcatToPacket(packet, PIC_ID, '/');
  2037     024F  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2038     0250  1683               	bsf	3,5	;RP0=1, select bank1
  2039     0251  1303               	bcf	3,6	;RP1=0, select bank1
  2040     0252  00B1               	movwf	ConcatToPacket@str^(0+128)
  2041     0253  3001               	movlw	1
  2042     0254  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  2043     0255  302F               	movlw	47
  2044     0256  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2045     0257  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2046     0258  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  2047     025D                     l3676:
  2048                           
  2049                           ;main.c: 241:                 ConcatToPacket(packet, "2", ' ');
  2050     025D  301F               	movlw	low (STR_11| (0+32768))
  2051     025E  1683               	bsf	3,5	;RP0=1, select bank1
  2052     025F  1303               	bcf	3,6	;RP1=0, select bank1
  2053     0260  00B1               	movwf	ConcatToPacket@str^(0+128)
  2054     0261  3088               	movlw	high (STR_11| (0+32768))
  2055     0262  00B2               	movwf	(ConcatToPacket@str^(0+128)+1)
  2056     0263  3020               	movlw	32
  2057     0264  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2058     0265  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2059     0266  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  2060     026B                     l3678:
  2061                           
  2062                           ;main.c: 242:                 UART_TxString(packet, 1);
  2063     026B  1683               	bsf	3,5	;RP0=1, select bank1
  2064     026C  1303               	bcf	3,6	;RP1=0, select bank1
  2065     026D  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  2066     026E  0ABF               	incf	UART_TxString@is_ACK^(0+128),f
  2067     026F  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2068     0270  120A  158A  2406  120A  118A  	fcall	_UART_TxString
  2069     0275                     l3680:
  2070                           
  2071                           ;main.c: 244:                 compare = 1;
  2072     0275  1683               	bsf	3,5	;RP0=1, select bank3
  2073     0276  1703               	bsf	3,6	;RP1=1, select bank3
  2074     0277  019A               	clrf	_compare^(0+384)
  2075     0278  0A9A               	incf	_compare^(0+384),f
  2076     0279                     l3682:
  2077                           
  2078                           ;main.c: 246:                 old_num_rand = num_rand = 0;
  2079     0279  0192               	clrf	_num_rand^(0+384)
  2080     027A  0193               	clrf	(_num_rand+1)^(0+384)
  2081     027B  0190               	clrf	_old_num_rand^(0+384)
  2082     027C  0191               	clrf	(_old_num_rand+1)^(0+384)
  2083     027D                     l3684:
  2084                           
  2085                           ;main.c: 248:                 maxFail = 3;
  2086     027D  3003               	movlw	3
  2087     027E  00EE               	movwf	_maxFail^(0+384)
  2088     027F                     l3686:
  2089                           
  2090                           ;main.c: 250:                 lcdSend(0x01, 0);
  2091     027F  1283               	bcf	3,5	;RP0=0, select bank0
  2092     0280  1303               	bcf	3,6	;RP1=0, select bank0
  2093     0281  01BC               	clrf	lcdSend@tipo
  2094     0282  3001               	movlw	1
  2095     0283  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2096     0288                     l3688:
  2097                           
  2098                           ;main.c: 251:                 lcdPrint("Inserisci codice\0");
  2099     0288  3049               	movlw	low (STR_12| (0+32768))
  2100     0289  1683               	bsf	3,5	;RP0=1, select bank1
  2101     028A  1303               	bcf	3,6	;RP1=0, select bank1
  2102     028B  00A2               	movwf	lcdPrint@str^(0+128)
  2103     028C  3087               	movlw	high (STR_12| (0+32768))
  2104     028D  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2105     028E  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2106     0293                     l3690:
  2107                           
  2108                           ;main.c: 252:                 lcdSend(0xC0, 0);
  2109     0293  1283               	bcf	3,5	;RP0=0, select bank0
  2110     0294  1303               	bcf	3,6	;RP1=0, select bank0
  2111     0295  01BC               	clrf	lcdSend@tipo
  2112     0296  30C0               	movlw	192
  2113     0297  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2114     029C                     l3692:
  2115                           
  2116                           ;main.c: 253:                 lcdPrint("Tentativi: \0");
  2117     029C  30CB               	movlw	low (STR_13| (0+32768))
  2118     029D  1683               	bsf	3,5	;RP0=1, select bank1
  2119     029E  1303               	bcf	3,6	;RP1=0, select bank1
  2120     029F  00A2               	movwf	lcdPrint@str^(0+128)
  2121     02A0  3087               	movlw	high (STR_13| (0+32768))
  2122     02A1  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2123     02A2  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2124     02A7                     l3694:
  2125                           
  2126                           ;main.c: 254:                 lcdSend(maxFail + '0', 1);
  2127     02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2128     02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2129     02A9  01BC               	clrf	lcdSend@tipo
  2130     02AA  0ABC               	incf	lcdSend@tipo,f
  2131     02AB  1683               	bsf	3,5	;RP0=1, select bank3
  2132     02AC  1703               	bsf	3,6	;RP1=1, select bank3
  2133     02AD  086E               	movf	_maxFail^(0+384),w
  2134     02AE  3E30               	addlw	48
  2135     02AF  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2136     02B4                     l3696:
  2137                           
  2138                           ;main.c: 256:                 seconds = 0;
  2139     02B4  3000               	movlw	0
  2140     02B5  1683               	bsf	3,5	;RP0=1, select bank1
  2141     02B6  1303               	bcf	3,6	;RP1=0, select bank1
  2142     02B7  00E7               	movwf	(_seconds+3)^(0+128)
  2143     02B8  3000               	movlw	0
  2144     02B9  00E6               	movwf	(_seconds+2)^(0+128)
  2145     02BA  3000               	movlw	0
  2146     02BB  00E5               	movwf	(_seconds+1)^(0+128)
  2147     02BC  3000               	movlw	0
  2148     02BD  00E4               	movwf	_seconds^(0+128)
  2149     02BE                     l3698:
  2150                           
  2151                           ;main.c: 259:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '2')
  2152     02BE  3031               	movlw	49
  2153     02BF  1683               	bsf	3,5	;RP0=1, select bank3
  2154     02C0  1703               	bsf	3,6	;RP1=1, select bank3
  2155     02C1  061F               	xorwf	_source^(0+384),w
  2156     02C2  1D03               	btfss	3,2
  2157     02C3  2AC5               	goto	u3901
  2158     02C4  2AC6               	goto	u3900
  2159     02C5                     u3901:
  2160     02C5  2B03               	goto	l3710
  2161     02C6                     u3900:
  2162     02C6                     l3700:
  2163     02C6  30C2               	movlw	(low (_id_dest| (0+256)))& (0+255)
  2164     02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2165     02C8  1303               	bcf	3,6	;RP1=0, select bank1
  2166     02C9  00A5               	movwf	CompareStrings@str1^(0+128)
  2167     02CA  3001               	movlw	1
  2168     02CB  00A6               	movwf	(CompareStrings@str1+1)^(0+128)
  2169     02CC  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2170     02CD  00A7               	movwf	CompareStrings@str2^(0+128)
  2171     02CE  120A  158A  22B1  120A  118A  	fcall	_CompareStrings
  2172     02D3  3A00               	xorlw	0
  2173     02D4  1903               	skipnz
  2174     02D5  2AD7               	goto	u3911
  2175     02D6  2AD8               	goto	u3910
  2176     02D7                     u3911:
  2177     02D7  2B03               	goto	l3710
  2178     02D8                     u3910:
  2179     02D8                     l3702:
  2180     02D8  3032               	movlw	50
  2181     02D9  1683               	bsf	3,5	;RP0=1, select bank3
  2182     02DA  1703               	bsf	3,6	;RP1=1, select bank3
  2183     02DB  061E               	xorwf	_type^(0+384),w
  2184     02DC  1D03               	btfss	3,2
  2185     02DD  2ADF               	goto	u3921
  2186     02DE  2AE0               	goto	u3920
  2187     02DF                     u3921:
  2188     02DF  2B03               	goto	l3710
  2189     02E0                     u3920:
  2190     02E0                     l3704:
  2191                           
  2192                           ;main.c: 260:             {;main.c: 263:                 if(num_rand != 0)
  2193     02E0  0812               	movf	_num_rand^(0+384),w
  2194     02E1  0413               	iorwf	(_num_rand+1)^(0+384),w
  2195     02E2  1903               	btfsc	3,2
  2196     02E3  2AE5               	goto	u3931
  2197     02E4  2AE6               	goto	u3930
  2198     02E5                     u3931:
  2199     02E5  2AF1               	goto	l3708
  2200     02E6                     u3930:
  2201     02E6                     l3706:
  2202                           
  2203                           ;main.c: 264:                     seconds = 7500;
  2204     02E6  3000               	movlw	0
  2205     02E7  1683               	bsf	3,5	;RP0=1, select bank1
  2206     02E8  1303               	bcf	3,6	;RP1=0, select bank1
  2207     02E9  00E7               	movwf	(_seconds+3)^(0+128)
  2208     02EA  3000               	movlw	0
  2209     02EB  00E6               	movwf	(_seconds+2)^(0+128)
  2210     02EC  301D               	movlw	29
  2211     02ED  00E5               	movwf	(_seconds+1)^(0+128)
  2212     02EE  304C               	movlw	76
  2213     02EF  00E4               	movwf	_seconds^(0+128)
  2214     02F0  2B03               	goto	l3710
  2215     02F1                     l3708:
  2216                           
  2217                           ;main.c: 267:                 {;main.c: 268:                     milliseconds = 0;
  2218     02F1  3000               	movlw	0
  2219     02F2  1683               	bsf	3,5	;RP0=1, select bank1
  2220     02F3  1303               	bcf	3,6	;RP1=0, select bank1
  2221     02F4  00EB               	movwf	(_milliseconds+3)^(0+128)
  2222     02F5  3000               	movlw	0
  2223     02F6  00EA               	movwf	(_milliseconds+2)^(0+128)
  2224     02F7  3000               	movlw	0
  2225     02F8  00E9               	movwf	(_milliseconds+1)^(0+128)
  2226     02F9  3000               	movlw	0
  2227     02FA  00E8               	movwf	_milliseconds^(0+128)
  2228                           
  2229                           ;main.c: 269:                     seconds = 1000;
  2230     02FB  3000               	movlw	0
  2231     02FC  00E7               	movwf	(_seconds+3)^(0+128)
  2232     02FD  3000               	movlw	0
  2233     02FE  00E6               	movwf	(_seconds+2)^(0+128)
  2234     02FF  3003               	movlw	3
  2235     0300  00E5               	movwf	(_seconds+1)^(0+128)
  2236     0301  30E8               	movlw	232
  2237     0302  00E4               	movwf	_seconds^(0+128)
  2238     0303                     l3710:
  2239                           
  2240                           ;main.c: 272:             recieved = 0;
  2241     0303  1683               	bsf	3,5	;RP0=1, select bank3
  2242     0304  1703               	bsf	3,6	;RP1=1, select bank3
  2243     0305  019B               	clrf	_recieved^(0+384)
  2244     0306                     l3712:
  2245                           
  2246                           ;main.c: 273:             iS = 0;
  2247     0306  1283               	bcf	3,5	;RP0=0, select bank0
  2248     0307  1303               	bcf	3,6	;RP1=0, select bank0
  2249     0308  01BE               	clrf	_iS
  2250     0309                     l3714:
  2251                           
  2252                           ;main.c: 278:         if(success)
  2253     0309  1683               	bsf	3,5	;RP0=1, select bank3
  2254     030A  1703               	bsf	3,6	;RP1=1, select bank3
  2255     030B  0819               	movf	_success^(0+384),w
  2256     030C  1903               	btfsc	3,2
  2257     030D  2B0F               	goto	u3941
  2258     030E  2B10               	goto	u3940
  2259     030F                     u3941:
  2260     030F  2B57               	goto	l3740
  2261     0310                     u3940:
  2262     0310                     l3716:
  2263                           
  2264                           ;main.c: 279:         {;main.c: 281:             lcdSend(0x01, 0);
  2265     0310  1283               	bcf	3,5	;RP0=0, select bank0
  2266     0311  1303               	bcf	3,6	;RP1=0, select bank0
  2267     0312  01BC               	clrf	lcdSend@tipo
  2268     0313  3001               	movlw	1
  2269     0314  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2270     0319                     l3718:
  2271                           
  2272                           ;main.c: 282:             lcdPrint("Benvenuto!\0");
  2273     0319  30D8               	movlw	low (STR_14| (0+32768))
  2274     031A  1683               	bsf	3,5	;RP0=1, select bank1
  2275     031B  1303               	bcf	3,6	;RP1=0, select bank1
  2276     031C  00A2               	movwf	lcdPrint@str^(0+128)
  2277     031D  3087               	movlw	high (STR_14| (0+32768))
  2278     031E  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2279     031F  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2280     0324                     l3720:
  2281                           
  2282                           ;main.c: 283:             iT = old_iT = 0;
  2283     0324  1683               	bsf	3,5	;RP0=1, select bank3
  2284     0325  1703               	bsf	3,6	;RP1=1, select bank3
  2285     0326  019C               	clrf	_old_iT^(0+384)
  2286     0327  019D               	clrf	_iT^(0+384)
  2287     0328                     l3722:
  2288                           
  2289                           ;main.c: 284:             success = 0;
  2290     0328  0199               	clrf	_success^(0+384)
  2291     0329                     l3724:
  2292                           
  2293                           ;main.c: 286:             compare = 0;
  2294     0329  019A               	clrf	_compare^(0+384)
  2295     032A                     l3726:
  2296                           
  2297                           ;main.c: 287:             maxFail = 3;
  2298     032A  3003               	movlw	3
  2299     032B  00EE               	movwf	_maxFail^(0+384)
  2300     032C                     l3728:
  2301                           
  2302                           ;main.c: 289:             packet[0] = '0';
  2303     032C  3030               	movlw	48
  2304     032D  00B3               	movwf	_packet^(0+384)
  2305     032E                     l3730:
  2306                           
  2307                           ;main.c: 290:             packet[1] = '/';
  2308     032E  302F               	movlw	47
  2309     032F  00B4               	movwf	(_packet^(0+384)+1)
  2310     0330                     l3732:
  2311                           
  2312                           ;main.c: 291:             packet[2] = '\0';
  2313     0330  01B5               	clrf	(_packet^(0+384)+2)
  2314     0331                     l3734:
  2315                           
  2316                           ;main.c: 292:             ConcatToPacket(packet, PIC_ID, '/');
  2317     0331  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2318     0332  1683               	bsf	3,5	;RP0=1, select bank1
  2319     0333  1303               	bcf	3,6	;RP1=0, select bank1
  2320     0334  00B1               	movwf	ConcatToPacket@str^(0+128)
  2321     0335  3001               	movlw	1
  2322     0336  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  2323     0337  302F               	movlw	47
  2324     0338  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2325     0339  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2326     033A  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  2327     033F                     l3736:
  2328                           
  2329                           ;main.c: 293:             ConcatToPacket(packet, "1/1", ' ');
  2330     033F  301B               	movlw	low (STR_15| (0+32768))
  2331     0340  1683               	bsf	3,5	;RP0=1, select bank1
  2332     0341  1303               	bcf	3,6	;RP1=0, select bank1
  2333     0342  00B1               	movwf	ConcatToPacket@str^(0+128)
  2334     0343  3088               	movlw	high (STR_15| (0+32768))
  2335     0344  00B2               	movwf	(ConcatToPacket@str^(0+128)+1)
  2336     0345  3020               	movlw	32
  2337     0346  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2338     0347  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2339     0348  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  2340     034D                     l3738:
  2341                           
  2342                           ;main.c: 294:             UART_TxString(packet, 0);
  2343     034D  1683               	bsf	3,5	;RP0=1, select bank1
  2344     034E  1303               	bcf	3,6	;RP1=0, select bank1
  2345     034F  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  2346     0350  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2347     0351  120A  158A  2406  120A  118A  	fcall	_UART_TxString
  2348                           
  2349                           ;main.c: 295:         }
  2350     0356  2BEC               	goto	l3782
  2351     0357                     l3740:
  2352     0357  086E               	movf	_maxFail^(0+384),w
  2353     0358  1903               	btfsc	3,2
  2354     0359  2B5B               	goto	u3951
  2355     035A  2B5C               	goto	u3950
  2356     035B                     u3951:
  2357     035B  2BA2               	goto	l3758
  2358     035C                     u3950:
  2359     035C                     l3742:
  2360     035C  3003               	movlw	3
  2361     035D  026E               	subwf	_maxFail^(0+384),w
  2362     035E  1803               	skipnc
  2363     035F  2B61               	goto	u3961
  2364     0360  2B62               	goto	u3960
  2365     0361                     u3961:
  2366     0361  2BA2               	goto	l3758
  2367     0362                     u3960:
  2368     0362                     l3744:
  2369     0362  0818               	movf	_fail^(0+384),w
  2370     0363  1903               	btfsc	3,2
  2371     0364  2B66               	goto	u3971
  2372     0365  2B67               	goto	u3970
  2373     0366                     u3971:
  2374     0366  2BA2               	goto	l3758
  2375     0367                     u3970:
  2376     0367                     l3746:
  2377                           
  2378                           ;main.c: 298:         {;main.c: 300:             lcdSend(0x01, 0);
  2379     0367  1283               	bcf	3,5	;RP0=0, select bank0
  2380     0368  1303               	bcf	3,6	;RP1=0, select bank0
  2381     0369  01BC               	clrf	lcdSend@tipo
  2382     036A  3001               	movlw	1
  2383     036B  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2384     0370                     l3748:
  2385                           
  2386                           ;main.c: 301:             lcdPrint("Codice errato\0");
  2387     0370  30BC               	movlw	low (STR_16| (0+32768))
  2388     0371  1683               	bsf	3,5	;RP0=1, select bank1
  2389     0372  1303               	bcf	3,6	;RP1=0, select bank1
  2390     0373  00A2               	movwf	lcdPrint@str^(0+128)
  2391     0374  3087               	movlw	high (STR_16| (0+32768))
  2392     0375  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2393     0376  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2394     037B                     l3750:
  2395                           
  2396                           ;main.c: 302:             lcdSend(0xC0, 0);
  2397     037B  1283               	bcf	3,5	;RP0=0, select bank0
  2398     037C  1303               	bcf	3,6	;RP1=0, select bank0
  2399     037D  01BC               	clrf	lcdSend@tipo
  2400     037E  30C0               	movlw	192
  2401     037F  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2402                           
  2403                           ;main.c: 303:             lcdPrint("Tentativi: \0");
  2404     0384  30CB               	movlw	low (STR_13| (0+32768))
  2405     0385  1683               	bsf	3,5	;RP0=1, select bank1
  2406     0386  1303               	bcf	3,6	;RP1=0, select bank1
  2407     0387  00A2               	movwf	lcdPrint@str^(0+128)
  2408     0388  3087               	movlw	high (STR_13| (0+32768))
  2409     0389  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2410     038A  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2411     038F                     l3752:
  2412                           
  2413                           ;main.c: 304:             lcdSend(maxFail + '0', 1);
  2414     038F  1283               	bcf	3,5	;RP0=0, select bank0
  2415     0390  1303               	bcf	3,6	;RP1=0, select bank0
  2416     0391  01BC               	clrf	lcdSend@tipo
  2417     0392  0ABC               	incf	lcdSend@tipo,f
  2418     0393  1683               	bsf	3,5	;RP0=1, select bank3
  2419     0394  1703               	bsf	3,6	;RP1=1, select bank3
  2420     0395  086E               	movf	_maxFail^(0+384),w
  2421     0396  3E30               	addlw	48
  2422     0397  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2423     039C                     l3754:
  2424                           
  2425                           ;main.c: 305:             iT = old_iT = 0;
  2426     039C  1683               	bsf	3,5	;RP0=1, select bank3
  2427     039D  1703               	bsf	3,6	;RP1=1, select bank3
  2428     039E  019C               	clrf	_old_iT^(0+384)
  2429     039F  019D               	clrf	_iT^(0+384)
  2430     03A0                     l3756:
  2431                           
  2432                           ;main.c: 306:             fail = 0;
  2433     03A0  0198               	clrf	_fail^(0+384)
  2434                           
  2435                           ;main.c: 307:         }
  2436     03A1  2BEC               	goto	l3782
  2437     03A2                     l3758:
  2438     03A2  086E               	movf	_maxFail^(0+384),w
  2439     03A3  1D03               	btfss	3,2
  2440     03A4  2BA6               	goto	u3981
  2441     03A5  2BA7               	goto	u3980
  2442     03A6                     u3981:
  2443     03A6  2BEC               	goto	l3782
  2444     03A7                     u3980:
  2445     03A7                     l3760:
  2446                           
  2447                           ;main.c: 310:         {;main.c: 312:             lcdSend(0x01, 0);
  2448     03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2449     03A8  1303               	bcf	3,6	;RP1=0, select bank0
  2450     03A9  01BC               	clrf	lcdSend@tipo
  2451     03AA  3001               	movlw	1
  2452     03AB  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2453     03B0                     l3762:
  2454                           
  2455                           ;main.c: 313:             lcdPrint("Tent. esauriti\0");
  2456     03B0  309D               	movlw	low (STR_18| (0+32768))
  2457     03B1  1683               	bsf	3,5	;RP0=1, select bank1
  2458     03B2  1303               	bcf	3,6	;RP1=0, select bank1
  2459     03B3  00A2               	movwf	lcdPrint@str^(0+128)
  2460     03B4  3087               	movlw	high (STR_18| (0+32768))
  2461     03B5  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2462     03B6  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2463     03BB                     l3764:
  2464                           
  2465                           ;main.c: 315:             maxFail = 3;
  2466     03BB  3003               	movlw	3
  2467     03BC  1683               	bsf	3,5	;RP0=1, select bank3
  2468     03BD  1703               	bsf	3,6	;RP1=1, select bank3
  2469     03BE  00EE               	movwf	_maxFail^(0+384)
  2470     03BF                     l3766:
  2471                           
  2472                           ;main.c: 316:             iT = old_iT = 0;
  2473     03BF  019C               	clrf	_old_iT^(0+384)
  2474     03C0  019D               	clrf	_iT^(0+384)
  2475     03C1                     l3768:
  2476                           
  2477                           ;main.c: 317:             compare = 0;
  2478     03C1  019A               	clrf	_compare^(0+384)
  2479     03C2                     l3770:
  2480                           
  2481                           ;main.c: 319:             packet[0] = '0';
  2482     03C2  3030               	movlw	48
  2483     03C3  00B3               	movwf	_packet^(0+384)
  2484     03C4                     l3772:
  2485                           
  2486                           ;main.c: 320:             packet[1] = '/';
  2487     03C4  302F               	movlw	47
  2488     03C5  00B4               	movwf	(_packet^(0+384)+1)
  2489     03C6                     l3774:
  2490                           
  2491                           ;main.c: 321:             packet[2] = '\0';
  2492     03C6  01B5               	clrf	(_packet^(0+384)+2)
  2493     03C7                     l3776:
  2494                           
  2495                           ;main.c: 322:             ConcatToPacket(packet, PIC_ID, '/');
  2496     03C7  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2497     03C8  1683               	bsf	3,5	;RP0=1, select bank1
  2498     03C9  1303               	bcf	3,6	;RP1=0, select bank1
  2499     03CA  00B1               	movwf	ConcatToPacket@str^(0+128)
  2500     03CB  3001               	movlw	1
  2501     03CC  00B2               	movwf	(ConcatToPacket@str+1)^(0+128)
  2502     03CD  302F               	movlw	47
  2503     03CE  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2504     03CF  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2505     03D0  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  2506     03D5                     l3778:
  2507                           
  2508                           ;main.c: 323:             ConcatToPacket(packet, "1/0", ' ');
  2509     03D5  3017               	movlw	low (STR_19| (0+32768))
  2510     03D6  1683               	bsf	3,5	;RP0=1, select bank1
  2511     03D7  1303               	bcf	3,6	;RP1=0, select bank1
  2512     03D8  00B1               	movwf	ConcatToPacket@str^(0+128)
  2513     03D9  3088               	movlw	high (STR_19| (0+32768))
  2514     03DA  00B2               	movwf	(ConcatToPacket@str^(0+128)+1)
  2515     03DB  3020               	movlw	32
  2516     03DC  00B3               	movwf	ConcatToPacket@delim^(0+128)
  2517     03DD  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2518     03DE  160A  118A  27B6  120A  118A  	fcall	_ConcatToPacket
  2519     03E3                     l3780:
  2520                           
  2521                           ;main.c: 324:             UART_TxString(packet, 0);
  2522     03E3  1683               	bsf	3,5	;RP0=1, select bank1
  2523     03E4  1303               	bcf	3,6	;RP1=0, select bank1
  2524     03E5  01BF               	clrf	UART_TxString@is_ACK^(0+128)
  2525     03E6  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2526     03E7  120A  158A  2406  120A  118A  	fcall	_UART_TxString
  2527     03EC                     l3782:
  2528                           
  2529                           ;main.c: 328:         if(iT != old_iT && compare)
  2530     03EC  1683               	bsf	3,5	;RP0=1, select bank3
  2531     03ED  1703               	bsf	3,6	;RP1=1, select bank3
  2532     03EE  081D               	movf	_iT^(0+384),w
  2533     03EF  061C               	xorwf	_old_iT^(0+384),w
  2534     03F0  1903               	skipnz
  2535     03F1  2BF3               	goto	u3991
  2536     03F2  2BF4               	goto	u3990
  2537     03F3                     u3991:
  2538     03F3  2C21               	goto	l3792
  2539     03F4                     u3990:
  2540     03F4                     l3784:
  2541     03F4  081A               	movf	_compare^(0+384),w
  2542     03F5  1903               	btfsc	3,2
  2543     03F6  2BF8               	goto	u4001
  2544     03F7  2BF9               	goto	u4000
  2545     03F8                     u4001:
  2546     03F8  2C21               	goto	l3792
  2547     03F9                     u4000:
  2548     03F9                     l3786:
  2549                           
  2550                           ;main.c: 329:         {;main.c: 331:             lcdSend(0x01, 0);
  2551     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2552     03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2553     03FB  01BC               	clrf	lcdSend@tipo
  2554     03FC  3001               	movlw	1
  2555     03FD  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2556     0402                     l3788:
  2557                           
  2558                           ;main.c: 332:             lcdPrint("#=conf. *=canc.\0\0"),
  2559     0402  3025               	movlw	low (STR_20| (0+32768))
  2560     0403  1683               	bsf	3,5	;RP0=1, select bank1
  2561     0404  1303               	bcf	3,6	;RP1=0, select bank1
  2562     0405  00A2               	movwf	lcdPrint@str^(0+128)
  2563     0406  3087               	movlw	high (STR_20| (0+32768))
  2564     0407  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  2565     0408  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2566     040D                     l3790:
  2567     040D  1283               	bcf	3,5	;RP0=0, select bank0
  2568     040E  1303               	bcf	3,6	;RP1=0, select bank0
  2569     040F  01BC               	clrf	lcdSend@tipo
  2570     0410  30C0               	movlw	192
  2571     0411  160A  118A  2613  120A  118A  	fcall	_lcdSend
  2572                           
  2573                           ;main.c: 334:             lcdPrint(datoTastierino);
  2574     0416  30A2               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2575     0417  1683               	bsf	3,5	;RP0=1, select bank1
  2576     0418  1303               	bcf	3,6	;RP1=0, select bank1
  2577     0419  00A2               	movwf	lcdPrint@str^(0+128)
  2578     041A  3001               	movlw	1
  2579     041B  00A3               	movwf	(lcdPrint@str+1)^(0+128)
  2580     041C  120A  158A  2077  120A  118A  	fcall	_lcdPrint
  2581     0421                     l3792:
  2582                           
  2583                           ;main.c: 337:         old_iT = iT;
  2584     0421  1683               	bsf	3,5	;RP0=1, select bank3
  2585     0422  1703               	bsf	3,6	;RP1=1, select bank3
  2586     0423  081D               	movf	_iT^(0+384),w
  2587     0424  009C               	movwf	_old_iT^(0+384)
  2588     0425  286E               	goto	l3564
  2589     0426  120A  118A  2810   	ljmp	start
  2590     0429                     __end_of_main:
  2591                           
  2592                           	psect	text1
  2593     0429                     __ptext1:	
  2594 ;; *************** function _read_NumPad *****************
  2595 ;; Defined at:
  2596 ;;		line 642 in file "main.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  id              2   41[BANK1 ] int 
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2610 ;;      Params:         0       0       0       0       0
  2611 ;;      Locals:         0       0       2       0       0
  2612 ;;      Temps:          0       0      10       0       0
  2613 ;;      Totals:         0       0      12       0       0
  2614 ;;Total ram usage:       12 bytes
  2615 ;; Hardware stack levels used: 1
  2616 ;; Hardware stack levels required when called: 6
  2617 ;; This function calls:
  2618 ;;		_CompareStrings
  2619 ;;		_Fill
  2620 ;;		___awmod
  2621 ;;		___wmul
  2622 ;;		_eeprom_write
  2623 ;;		_rand
  2624 ;;		_srand
  2625 ;; This function is called by:
  2626 ;;		_main
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630     0429                     _read_NumPad:	
  2631                           ;psect for function _read_NumPad
  2632                           
  2633     0429                     l3370:	
  2634                           ;incstack = 0
  2635                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2636                           
  2637                           
  2638                           ;main.c: 645:     TRISD |= 0x0F;
  2639     0429  300F               	movlw	15
  2640     042A  1683               	bsf	3,5	;RP0=1, select bank1
  2641     042B  1303               	bcf	3,6	;RP1=0, select bank1
  2642     042C  00BF               	movwf	??_read_NumPad^(0+128)
  2643     042D  083F               	movf	??_read_NumPad^(0+128),w
  2644     042E  0488               	iorwf	8,f	;volatile
  2645     042F                     l3372:
  2646                           
  2647                           ;main.c: 646:     for(colScan = 0; colScan < 3; colScan++)
  2648     042F  01EE               	clrf	_colScan^(0+128)
  2649     0430                     l3378:
  2650                           
  2651                           ;main.c: 647:     {;main.c: 650:         PORTB |= 0x07;
  2652     0430  3007               	movlw	7
  2653     0431  00BF               	movwf	??_read_NumPad^(0+128)
  2654     0432  083F               	movf	??_read_NumPad^(0+128),w
  2655     0433  1283               	bcf	3,5	;RP0=0, select bank0
  2656     0434  1303               	bcf	3,6	;RP1=0, select bank0
  2657     0435  0486               	iorwf	6,f	;volatile
  2658     0436                     l3380:
  2659                           
  2660                           ;main.c: 652:         PORTB &= colMask[colScan];
  2661     0436  1683               	bsf	3,5	;RP0=1, select bank1
  2662     0437  1303               	bcf	3,6	;RP1=0, select bank1
  2663     0438  086E               	movf	_colScan^(0+128),w
  2664     0439  3E22               	addlw	low (_colMask| (0+32768))
  2665     043A  0084               	movwf	4
  2666     043B  3087               	movlw	high (_colMask| (0+32768))
  2667     043C  1803               	skipnc
  2668     043D  3E01               	addlw	1
  2669     043E  1283               	bcf	3,5	;RP0=0, select bank0
  2670     043F  1303               	bcf	3,6	;RP1=0, select bank0
  2671     0440  00FF               	movwf	btemp+1
  2672     0441  120A  118A  2700  120A  118A  	fcall	stringtab
  2673     0446  1683               	bsf	3,5	;RP0=1, select bank1
  2674     0447  1303               	bcf	3,6	;RP1=0, select bank1
  2675     0448  00BF               	movwf	??_read_NumPad^(0+128)
  2676     0449  083F               	movf	??_read_NumPad^(0+128),w
  2677     044A  1283               	bcf	3,5	;RP0=0, select bank0
  2678     044B  1303               	bcf	3,6	;RP1=0, select bank0
  2679     044C  0586               	andwf	6,f	;volatile
  2680     044D                     l3382:
  2681                           
  2682                           ;main.c: 654:         for(rowScan = 0; rowScan < 4; rowScan++)
  2683     044D  1683               	bsf	3,5	;RP0=1, select bank1
  2684     044E  1303               	bcf	3,6	;RP1=0, select bank1
  2685     044F  01ED               	clrf	_rowScan^(0+128)
  2686     0450                     l3388:
  2687                           
  2688                           ;main.c: 655:         {;main.c: 657:             if(!(PORTD & rowMask[rowScan]))
  2689     0450  086D               	movf	_rowScan^(0+128),w
  2690     0451  3E1E               	addlw	low (_rowMask| (0+32768))
  2691     0452  0084               	movwf	4
  2692     0453  3087               	movlw	high (_rowMask| (0+32768))
  2693     0454  1803               	skipnc
  2694     0455  3E01               	addlw	1
  2695     0456  1283               	bcf	3,5	;RP0=0, select bank0
  2696     0457  1303               	bcf	3,6	;RP1=0, select bank0
  2697     0458  00FF               	movwf	btemp+1
  2698     0459  120A  118A  2700  120A  118A  	fcall	stringtab
  2699     045E  0508               	andwf	8,w	;volatile
  2700     045F  1D03               	btfss	3,2
  2701     0460  2C62               	goto	u3491
  2702     0461  2C63               	goto	u3490
  2703     0462                     u3491:
  2704     0462  2C92               	goto	l275
  2705     0463                     u3490:
  2706     0463                     l3390:
  2707                           
  2708                           ;main.c: 658:             {;main.c: 660:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  2709     0463  3021               	movlw	33
  2710     0464  1683               	bsf	3,5	;RP0=1, select bank1
  2711     0465  1303               	bcf	3,6	;RP1=0, select bank1
  2712     0466  00C0               	movwf	(??_read_NumPad^(0+128)+1)
  2713     0467  3075               	movlw	117
  2714     0468  00BF               	movwf	??_read_NumPad^(0+128)
  2715     0469                     u4017:
  2716     0469  0BBF               	decfsz	??_read_NumPad^(0+128),f
  2717     046A  2C69               	goto	u4017
  2718     046B  0BC0               	decfsz	(??_read_NumPad^(0+128)+1),f
  2719     046C  2C69               	goto	u4017
  2720     046D  2C6E               	nop2
  2721     046E                     l3392:
  2722                           
  2723                           ;main.c: 661:                 if(!(PORTD & rowMask[rowScan]))
  2724     046E  1683               	bsf	3,5	;RP0=1, select bank1
  2725     046F  1303               	bcf	3,6	;RP1=0, select bank1
  2726     0470  086D               	movf	_rowScan^(0+128),w
  2727     0471  3E1E               	addlw	low (_rowMask| (0+32768))
  2728     0472  0084               	movwf	4
  2729     0473  3087               	movlw	high (_rowMask| (0+32768))
  2730     0474  1803               	skipnc
  2731     0475  3E01               	addlw	1
  2732     0476  1283               	bcf	3,5	;RP0=0, select bank0
  2733     0477  1303               	bcf	3,6	;RP1=0, select bank0
  2734     0478  00FF               	movwf	btemp+1
  2735     0479  120A  118A  2700  120A  118A  	fcall	stringtab
  2736     047E  0508               	andwf	8,w	;volatile
  2737     047F  1D03               	btfss	3,2
  2738     0480  2C82               	goto	u3501
  2739     0481  2C83               	goto	u3500
  2740     0482                     u3501:
  2741     0482  2C92               	goto	l275
  2742     0483                     u3500:
  2743     0483                     l3394:
  2744                           
  2745                           ;main.c: 662:                 {;main.c: 666:                     keypressed = rowScan+(4
      +                          *colScan);
  2746     0483  1683               	bsf	3,5	;RP0=1, select bank1
  2747     0484  1303               	bcf	3,6	;RP1=0, select bank1
  2748     0485  086E               	movf	_colScan^(0+128),w
  2749     0486  00BF               	movwf	??_read_NumPad^(0+128)
  2750     0487  3002               	movlw	2
  2751     0488                     u3515:
  2752     0488  1003               	clrc
  2753     0489  0DBF               	rlf	??_read_NumPad^(0+128),f
  2754     048A  3EFF               	addlw	-1
  2755     048B  1D03               	skipz
  2756     048C  2C88               	goto	u3515
  2757     048D  086D               	movf	_rowScan^(0+128),w
  2758     048E  073F               	addwf	??_read_NumPad^(0+128),w
  2759     048F  00EF               	movwf	_keypressed^(0+128)
  2760     0490                     l3396:
  2761                           
  2762                           ;main.c: 668:                     keyf = 1;
  2763     0490  01EC               	clrf	_keyf^(0+128)
  2764     0491  0AEC               	incf	_keyf^(0+128),f
  2765     0492                     l275:	
  2766                           ;main.c: 670:             }
  2767                           
  2768                           
  2769                           ;main.c: 671:         }
  2770     0492  3001               	movlw	1
  2771     0493  1683               	bsf	3,5	;RP0=1, select bank1
  2772     0494  1303               	bcf	3,6	;RP1=0, select bank1
  2773     0495  00BF               	movwf	??_read_NumPad^(0+128)
  2774     0496  083F               	movf	??_read_NumPad^(0+128),w
  2775     0497  07ED               	addwf	_rowScan^(0+128),f
  2776     0498                     l3398:
  2777     0498  3004               	movlw	4
  2778     0499  026D               	subwf	_rowScan^(0+128),w
  2779     049A  1C03               	skipc
  2780     049B  2C9D               	goto	u3521
  2781     049C  2C9E               	goto	u3520
  2782     049D                     u3521:
  2783     049D  2C50               	goto	l3388
  2784     049E                     u3520:
  2785     049E                     l3400:
  2786                           
  2787                           ;main.c: 673:         if(keyf)
  2788     049E  086C               	movf	_keyf^(0+128),w
  2789     049F  1903               	btfsc	3,2
  2790     04A0  2CA2               	goto	u3531
  2791     04A1  2CA3               	goto	u3530
  2792     04A2                     u3531:
  2793     04A2  2E46               	goto	l3484
  2794     04A3                     u3530:
  2795     04A3                     l3402:
  2796                           
  2797                           ;main.c: 674:         {;main.c: 675:             keyf = 0;
  2798     04A3  01EC               	clrf	_keyf^(0+128)
  2799     04A4                     l3404:
  2800                           
  2801                           ;main.c: 678:             if(keypressed == 8)
  2802     04A4  3008               	movlw	8
  2803     04A5  066F               	xorwf	_keypressed^(0+128),w
  2804     04A6  1D03               	btfss	3,2
  2805     04A7  2CA9               	goto	u3541
  2806     04A8  2CAA               	goto	u3540
  2807     04A9                     u3541:
  2808     04A9  2DAE               	goto	l3444
  2809     04AA                     u3540:
  2810     04AA                     l3406:
  2811                           
  2812                           ;main.c: 679:             {;main.c: 681:                 if(initialize)
  2813     04AA  1683               	bsf	3,5	;RP0=1, select bank3
  2814     04AB  1703               	bsf	3,6	;RP1=1, select bank3
  2815     04AC  086F               	movf	_initialize^(0+384),w
  2816     04AD  1903               	btfsc	3,2
  2817     04AE  2CB0               	goto	u3551
  2818     04AF  2CB1               	goto	u3550
  2819     04B0                     u3551:
  2820     04B0  2D30               	goto	l3424
  2821     04B1                     u3550:
  2822     04B1                     l3408:
  2823                           
  2824                           ;main.c: 682:                 {;main.c: 684:                     if(i_id < 3)
  2825     04B1  3003               	movlw	3
  2826     04B2  0221               	subwf	_i_id^(0+384),w
  2827     04B3  1803               	skipnc
  2828     04B4  2CB6               	goto	u3561
  2829     04B5  2CB7               	goto	u3560
  2830     04B6                     u3561:
  2831     04B6  2CBD               	goto	l3412
  2832     04B7                     u3560:
  2833     04B7                     l3410:
  2834                           
  2835                           ;main.c: 685:                     {;main.c: 687:                         Fill(PIC_ID);
  2836     04B7  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2837     04B8  120A  158A  224B  120A  118A  	fcall	_Fill
  2838     04BD                     l3412:
  2839                           
  2840                           ;main.c: 690:                     int id = (PIC_ID[0] - '0') * 100 + (PIC_ID[1] - '0') *
      +                           10 + (PIC_ID[2] - '0');
  2841     04BD  1683               	bsf	3,5	;RP0=1, select bank3
  2842     04BE  1703               	bsf	3,6	;RP1=1, select bank3
  2843     04BF  0846               	movf	_PIC_ID^(0+384),w
  2844     04C0  1683               	bsf	3,5	;RP0=1, select bank1
  2845     04C1  1303               	bcf	3,6	;RP1=0, select bank1
  2846     04C2  00BF               	movwf	??_read_NumPad^(0+128)
  2847     04C3  01C0               	clrf	(??_read_NumPad^(0+128)+1)
  2848     04C4  083F               	movf	??_read_NumPad^(0+128),w
  2849     04C5  00B9               	movwf	___wmul@multiplier^(0+128)
  2850     04C6  0840               	movf	(??_read_NumPad+1)^(0+128),w
  2851     04C7  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  2852     04C8  3064               	movlw	100
  2853     04C9  00BB               	movwf	___wmul@multiplicand^(0+128)
  2854     04CA  3000               	movlw	0
  2855     04CB  00BC               	movwf	(___wmul@multiplicand^(0+128)+1)
  2856     04CC  160A  118A  25EC  120A  118A  	fcall	___wmul
  2857     04D1  1683               	bsf	3,5	;RP0=1, select bank1
  2858     04D2  1303               	bcf	3,6	;RP1=0, select bank1
  2859     04D3  0839               	movf	?___wmul^(0+128),w
  2860     04D4  00C1               	movwf	(??_read_NumPad+2)^(0+128)
  2861     04D5  083A               	movf	(?___wmul+1)^(0+128),w
  2862     04D6  00C2               	movwf	((??_read_NumPad+2)^(0+128)+1)
  2863     04D7  1683               	bsf	3,5	;RP0=1, select bank3
  2864     04D8  1703               	bsf	3,6	;RP1=1, select bank3
  2865     04D9  0847               	movf	(_PIC_ID^(0+384)+1),w
  2866     04DA  1683               	bsf	3,5	;RP0=1, select bank1
  2867     04DB  1303               	bcf	3,6	;RP1=0, select bank1
  2868     04DC  00C3               	movwf	(??_read_NumPad+4)^(0+128)
  2869     04DD  01C4               	clrf	((??_read_NumPad+4)^(0+128)+1)
  2870     04DE  0843               	movf	(??_read_NumPad+4)^(0+128),w
  2871     04DF  00B9               	movwf	___wmul@multiplier^(0+128)
  2872     04E0  0844               	movf	(??_read_NumPad+5)^(0+128),w
  2873     04E1  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  2874     04E2  300A               	movlw	10
  2875     04E3  00BB               	movwf	___wmul@multiplicand^(0+128)
  2876     04E4  3000               	movlw	0
  2877     04E5  00BC               	movwf	(___wmul@multiplicand^(0+128)+1)
  2878     04E6  160A  118A  25EC  120A  118A  	fcall	___wmul
  2879     04EB  1683               	bsf	3,5	;RP0=1, select bank1
  2880     04EC  1303               	bcf	3,6	;RP1=0, select bank1
  2881     04ED  0839               	movf	?___wmul^(0+128),w
  2882     04EE  0741               	addwf	(??_read_NumPad+2)^(0+128),w
  2883     04EF  00C5               	movwf	(??_read_NumPad+6)^(0+128)
  2884     04F0  083A               	movf	(?___wmul+1)^(0+128),w
  2885     04F1  1803               	skipnc
  2886     04F2  0A3A               	incf	(?___wmul+1)^(0+128),w
  2887     04F3  0742               	addwf	(??_read_NumPad+3)^(0+128),w
  2888     04F4  00C6               	movwf	(??_read_NumPad+7)^(0+128)
  2889     04F5  1683               	bsf	3,5	;RP0=1, select bank3
  2890     04F6  1703               	bsf	3,6	;RP1=1, select bank3
  2891     04F7  0848               	movf	(_PIC_ID^(0+384)+2),w
  2892     04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2893     04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2894     04FA  0745               	addwf	(??_read_NumPad+6)^(0+128),w
  2895     04FB  00C7               	movwf	(??_read_NumPad+8)^(0+128)
  2896     04FC  3000               	movlw	0
  2897     04FD  1803               	skipnc
  2898     04FE  3001               	movlw	1
  2899     04FF  0746               	addwf	(??_read_NumPad+7)^(0+128),w
  2900     0500  00C8               	movwf	(??_read_NumPad+9)^(0+128)
  2901     0501  0847               	movf	(??_read_NumPad+8)^(0+128),w
  2902     0502  3E30               	addlw	48
  2903     0503  00C9               	movwf	read_NumPad@id^(0+128)
  2904     0504  0848               	movf	(??_read_NumPad+9)^(0+128),w
  2905     0505  1803               	skipnc
  2906     0506  3E01               	addlw	1
  2907     0507  3EEB               	addlw	235
  2908     0508  00CA               	movwf	(read_NumPad@id+1)^(0+128)
  2909     0509                     l3414:
  2910                           
  2911                           ;main.c: 692:                     if(id <= 250)
  2912     0509  084A               	movf	(read_NumPad@id+1)^(0+128),w
  2913     050A  3A80               	xorlw	128
  2914     050B  00FF               	movwf	btemp+1
  2915     050C  3080               	movlw	128
  2916     050D  027F               	subwf	btemp+1,w
  2917     050E  1D03               	skipz
  2918     050F  2D12               	goto	u3575
  2919     0510  30FB               	movlw	251
  2920     0511  0249               	subwf	read_NumPad@id^(0+128),w
  2921     0512                     u3575:
  2922     0512  1803               	skipnc
  2923     0513  2D15               	goto	u3571
  2924     0514  2D16               	goto	u3570
  2925     0515                     u3571:
  2926     0515  2D28               	goto	l281
  2927     0516                     u3570:
  2928     0516                     l3416:
  2929                           
  2930                           ;main.c: 693:                     {;main.c: 695:                         eeprom_write(0,
      +                           id);
  2931     0516  1683               	bsf	3,5	;RP0=1, select bank1
  2932     0517  1303               	bcf	3,6	;RP1=0, select bank1
  2933     0518  0849               	movf	read_NumPad@id^(0+128),w
  2934     0519  1283               	bcf	3,5	;RP0=0, select bank0
  2935     051A  1303               	bcf	3,6	;RP1=0, select bank0
  2936     051B  00BC               	movwf	eeprom_write@value
  2937     051C  3000               	movlw	0
  2938     051D  160A  118A  2676  120A  118A  	fcall	_eeprom_write
  2939     0522                     l3418:
  2940                           
  2941                           ;main.c: 696:                         pr_succ = 1;
  2942     0522  1683               	bsf	3,5	;RP0=1, select bank3
  2943     0523  1703               	bsf	3,6	;RP1=1, select bank3
  2944     0524  0195               	clrf	_pr_succ^(0+384)
  2945     0525  0A95               	incf	_pr_succ^(0+384),f
  2946     0526                     l3420:
  2947                           
  2948                           ;main.c: 698:                         initialize = 0;
  2949     0526  01EF               	clrf	_initialize^(0+384)
  2950                           
  2951                           ;main.c: 699:                     }
  2952     0527  2E33               	goto	l3480
  2953     0528                     l281:	
  2954                           ;main.c: 701:                     else
  2955                           
  2956                           
  2957                           ;main.c: 702:                     {;main.c: 703:                         pr_err_max = 1;
  2958     0528  1683               	bsf	3,5	;RP0=1, select bank3
  2959     0529  1703               	bsf	3,6	;RP1=1, select bank3
  2960     052A  0196               	clrf	_pr_err_max^(0+384)
  2961     052B  0A96               	incf	_pr_err_max^(0+384),f
  2962     052C                     l3422:
  2963                           
  2964                           ;main.c: 705:                         PIC_ID[0] = '\0';
  2965     052C  01C6               	clrf	_PIC_ID^(0+384)
  2966                           
  2967                           ;main.c: 706:                         i_id = old_i_id = 0;
  2968     052D  01A0               	clrf	_old_i_id^(0+384)
  2969     052E  01A1               	clrf	_i_id^(0+384)
  2970     052F  2E33               	goto	l3480
  2971     0530                     l3424:
  2972     0530  081A               	movf	_compare^(0+384),w
  2973     0531  1D03               	btfss	3,2
  2974     0532  2D34               	goto	u3581
  2975     0533  2D35               	goto	u3580
  2976     0534                     u3581:
  2977     0534  2D84               	goto	l3432
  2978     0535                     u3580:
  2979     0535                     l3426:
  2980     0535  304C               	movlw	76
  2981     0536  1683               	bsf	3,5	;RP0=1, select bank1
  2982     0537  1303               	bcf	3,6	;RP1=0, select bank1
  2983     0538  0664               	xorwf	_seconds^(0+128),w
  2984     0539  301D               	movlw	29
  2985     053A  1903               	skipnz
  2986     053B  0665               	xorwf	(_seconds+1)^(0+128),w
  2987     053C  0466               	iorwf	(_seconds+2)^(0+128),w
  2988     053D  0467               	iorwf	(_seconds+3)^(0+128),w
  2989     053E  1903               	btfsc	3,2
  2990     053F  2D41               	goto	u3591
  2991     0540  2D42               	goto	u3590
  2992     0541                     u3591:
  2993     0541  2D84               	goto	l3432
  2994     0542                     u3590:
  2995     0542                     l3428:
  2996                           
  2997                           ;main.c: 711:                 {;main.c: 713:                     srand(milliseconds);
  2998     0542  1683               	bsf	3,5	;RP0=1, select bank1
  2999     0543  1303               	bcf	3,6	;RP1=0, select bank1
  3000     0544  0869               	movf	(_milliseconds+1)^(0+128),w
  3001     0545  1283               	bcf	3,5	;RP0=0, select bank0
  3002     0546  1303               	bcf	3,6	;RP1=0, select bank0
  3003     0547  00BD               	movwf	srand@x+1
  3004     0548  1683               	bsf	3,5	;RP0=1, select bank1
  3005     0549  1303               	bcf	3,6	;RP1=0, select bank1
  3006     054A  0868               	movf	_milliseconds^(0+128),w
  3007     054B  1283               	bcf	3,5	;RP0=0, select bank0
  3008     054C  1303               	bcf	3,6	;RP1=0, select bank0
  3009     054D  00BC               	movwf	srand@x
  3010     054E  160A  118A  2557  120A  118A  	fcall	_srand
  3011                           
  3012                           ;main.c: 715:                     num_rand = ((rand()%8999)+1000);
  3013     0553  3027               	movlw	39
  3014     0554  1683               	bsf	3,5	;RP0=1, select bank1
  3015     0555  1303               	bcf	3,6	;RP1=0, select bank1
  3016     0556  00B3               	movwf	___awmod@divisor^(0+128)
  3017     0557  3023               	movlw	35
  3018     0558  00B4               	movwf	(___awmod@divisor^(0+128)+1)
  3019     0559  120A  158A  2321  120A  118A  	fcall	_rand
  3020     055E  1683               	bsf	3,5	;RP0=1, select bank1
  3021     055F  1303               	bcf	3,6	;RP1=0, select bank1
  3022     0560  082D               	movf	(?_rand+1)^(0+128),w
  3023     0561  00B6               	movwf	(___awmod@dividend+1)^(0+128)
  3024     0562  082C               	movf	?_rand^(0+128),w
  3025     0563  00B5               	movwf	___awmod@dividend^(0+128)
  3026     0564  120A  158A  2187  120A  118A  	fcall	___awmod
  3027     0569  1683               	bsf	3,5	;RP0=1, select bank1
  3028     056A  1303               	bcf	3,6	;RP1=0, select bank1
  3029     056B  0833               	movf	?___awmod^(0+128),w
  3030     056C  3EE8               	addlw	232
  3031     056D  1683               	bsf	3,5	;RP0=1, select bank3
  3032     056E  1703               	bsf	3,6	;RP1=1, select bank3
  3033     056F  0092               	movwf	_num_rand^(0+384)
  3034     0570  1683               	bsf	3,5	;RP0=1, select bank1
  3035     0571  1303               	bcf	3,6	;RP1=0, select bank1
  3036     0572  0834               	movf	(?___awmod+1)^(0+128),w
  3037     0573  1803               	skipnc
  3038     0574  3E01               	addlw	1
  3039     0575  3E03               	addlw	3
  3040     0576  1683               	bsf	3,5	;RP0=1, select bank3
  3041     0577  1703               	bsf	3,6	;RP1=1, select bank3
  3042     0578  0093               	movwf	(_num_rand+1)^(0+384)
  3043     0579                     l3430:
  3044                           
  3045                           ;main.c: 717:                     seconds = 0;
  3046     0579  3000               	movlw	0
  3047     057A  1683               	bsf	3,5	;RP0=1, select bank1
  3048     057B  1303               	bcf	3,6	;RP1=0, select bank1
  3049     057C  00E7               	movwf	(_seconds+3)^(0+128)
  3050     057D  3000               	movlw	0
  3051     057E  00E6               	movwf	(_seconds+2)^(0+128)
  3052     057F  3000               	movlw	0
  3053     0580  00E5               	movwf	(_seconds+1)^(0+128)
  3054     0581  3000               	movlw	0
  3055     0582  00E4               	movwf	_seconds^(0+128)
  3056                           
  3057                           ;main.c: 718:                 }
  3058     0583  2E33               	goto	l3480
  3059     0584                     l3432:
  3060     0584  1683               	bsf	3,5	;RP0=1, select bank3
  3061     0585  1703               	bsf	3,6	;RP1=1, select bank3
  3062     0586  081A               	movf	_compare^(0+384),w
  3063     0587  1903               	btfsc	3,2
  3064     0588  2D8A               	goto	u3601
  3065     0589  2D8B               	goto	u3600
  3066     058A                     u3601:
  3067     058A  2DA2               	goto	l3438
  3068     058B                     u3600:
  3069     058B                     l3434:
  3070     058B  303F               	movlw	(low (_datoSeriale| 0))& (0+255)
  3071     058C  1683               	bsf	3,5	;RP0=1, select bank1
  3072     058D  1303               	bcf	3,6	;RP1=0, select bank1
  3073     058E  00A5               	movwf	CompareStrings@str1^(0+128)
  3074     058F  3000               	movlw	0
  3075     0590  00A6               	movwf	(CompareStrings@str1+1)^(0+128)
  3076     0591  30A2               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  3077     0592  00A7               	movwf	CompareStrings@str2^(0+128)
  3078     0593  120A  158A  22B1  120A  118A  	fcall	_CompareStrings
  3079     0598  3A00               	xorlw	0
  3080     0599  1903               	skipnz
  3081     059A  2D9C               	goto	u3611
  3082     059B  2D9D               	goto	u3610
  3083     059C                     u3611:
  3084     059C  2DA2               	goto	l3438
  3085     059D                     u3610:
  3086     059D                     l3436:
  3087                           
  3088                           ;main.c: 721:                 {;main.c: 722:                     success = 1;
  3089     059D  1683               	bsf	3,5	;RP0=1, select bank3
  3090     059E  1703               	bsf	3,6	;RP1=1, select bank3
  3091     059F  0199               	clrf	_success^(0+384)
  3092     05A0  0A99               	incf	_success^(0+384),f
  3093                           
  3094                           ;main.c: 723:                 }
  3095     05A1  2E33               	goto	l3480
  3096     05A2                     l3438:
  3097     05A2  1683               	bsf	3,5	;RP0=1, select bank3
  3098     05A3  1703               	bsf	3,6	;RP1=1, select bank3
  3099     05A4  081A               	movf	_compare^(0+384),w
  3100     05A5  1903               	btfsc	3,2
  3101     05A6  2DA8               	goto	u3621
  3102     05A7  2DA9               	goto	u3620
  3103     05A8                     u3621:
  3104     05A8  2E33               	goto	l3480
  3105     05A9                     u3620:
  3106     05A9                     l3440:
  3107                           
  3108                           ;main.c: 726:                 {;main.c: 727:                     maxFail--;
  3109     05A9  3001               	movlw	1
  3110     05AA  02EE               	subwf	_maxFail^(0+384),f
  3111     05AB                     l3442:
  3112                           
  3113                           ;main.c: 728:                     fail = 1;
  3114     05AB  0198               	clrf	_fail^(0+384)
  3115     05AC  0A98               	incf	_fail^(0+384),f
  3116     05AD  2E33               	goto	l3480
  3117     05AE                     l3444:
  3118     05AE  086F               	movf	_keypressed^(0+128),w
  3119     05AF  1D03               	btfss	3,2
  3120     05B0  2DB2               	goto	u3631
  3121     05B1  2DB3               	goto	u3630
  3122     05B2                     u3631:
  3123     05B2  2DD9               	goto	l3462
  3124     05B3                     u3630:
  3125     05B3                     l3446:
  3126                           
  3127                           ;main.c: 733:             {;main.c: 735:                 if(compare && iT > 0)
  3128     05B3  1683               	bsf	3,5	;RP0=1, select bank3
  3129     05B4  1703               	bsf	3,6	;RP1=1, select bank3
  3130     05B5  081A               	movf	_compare^(0+384),w
  3131     05B6  1903               	btfsc	3,2
  3132     05B7  2DB9               	goto	u3641
  3133     05B8  2DBA               	goto	u3640
  3134     05B9                     u3641:
  3135     05B9  2DC7               	goto	l3454
  3136     05BA                     u3640:
  3137     05BA                     l3448:
  3138     05BA  081D               	movf	_iT^(0+384),w
  3139     05BB  1903               	btfsc	3,2
  3140     05BC  2DBE               	goto	u3651
  3141     05BD  2DBF               	goto	u3650
  3142     05BE                     u3651:
  3143     05BE  2DC7               	goto	l3454
  3144     05BF                     u3650:
  3145     05BF                     l3450:
  3146                           
  3147                           ;main.c: 736:                 {;main.c: 738:                     iT--;
  3148     05BF  3001               	movlw	1
  3149     05C0  029D               	subwf	_iT^(0+384),f
  3150     05C1                     l3452:
  3151                           
  3152                           ;main.c: 739:                     datoTastierino[iT] = '\0';
  3153     05C1  081D               	movf	_iT^(0+384),w
  3154     05C2  3EA2               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3155     05C3  0084               	movwf	4
  3156     05C4  1783               	bsf	3,7	;select IRP bank3
  3157     05C5  0180               	clrf	0
  3158                           
  3159                           ;main.c: 740:                 }
  3160     05C6  2E33               	goto	l3480
  3161     05C7                     l3454:
  3162     05C7  086F               	movf	_initialize^(0+384),w
  3163     05C8  1903               	btfsc	3,2
  3164     05C9  2DCB               	goto	u3661
  3165     05CA  2DCC               	goto	u3660
  3166     05CB                     u3661:
  3167     05CB  2E33               	goto	l3480
  3168     05CC                     u3660:
  3169     05CC                     l3456:
  3170     05CC  0821               	movf	_i_id^(0+384),w
  3171     05CD  1903               	btfsc	3,2
  3172     05CE  2DD0               	goto	u3671
  3173     05CF  2DD1               	goto	u3670
  3174     05D0                     u3671:
  3175     05D0  2E33               	goto	l3480
  3176     05D1                     u3670:
  3177     05D1                     l3458:
  3178                           
  3179                           ;main.c: 743:                 {;main.c: 745:                     i_id--;
  3180     05D1  3001               	movlw	1
  3181     05D2  02A1               	subwf	_i_id^(0+384),f
  3182     05D3                     l3460:
  3183                           
  3184                           ;main.c: 746:                     PIC_ID[i_id] = '\0';
  3185     05D3  0821               	movf	_i_id^(0+384),w
  3186     05D4  3EC6               	addlw	(low (_PIC_ID| (0+256)))& (0+255)
  3187     05D5  0084               	movwf	4
  3188     05D6  1783               	bsf	3,7	;select IRP bank3
  3189     05D7  0180               	clrf	0
  3190     05D8  2E33               	goto	l3480
  3191     05D9                     l3462:
  3192     05D9  1683               	bsf	3,5	;RP0=1, select bank3
  3193     05DA  1703               	bsf	3,6	;RP1=1, select bank3
  3194     05DB  081A               	movf	_compare^(0+384),w
  3195     05DC  1903               	btfsc	3,2
  3196     05DD  2DDF               	goto	u3681
  3197     05DE  2DE0               	goto	u3680
  3198     05DF                     u3681:
  3199     05DF  2E04               	goto	l3470
  3200     05E0                     u3680:
  3201     05E0                     l3464:
  3202                           
  3203                           ;main.c: 751:             {;main.c: 753:                 datoTastierino[iT++] = keys[key
      +                          pressed];
  3204     05E0  1683               	bsf	3,5	;RP0=1, select bank1
  3205     05E1  1303               	bcf	3,6	;RP1=0, select bank1
  3206     05E2  086F               	movf	_keypressed^(0+128),w
  3207     05E3  3E12               	addlw	low (_keys| (0+32768))
  3208     05E4  0084               	movwf	4
  3209     05E5  3087               	movlw	high (_keys| (0+32768))
  3210     05E6  1803               	skipnc
  3211     05E7  3E01               	addlw	1
  3212     05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3213     05E9  1303               	bcf	3,6	;RP1=0, select bank0
  3214     05EA  00FF               	movwf	btemp+1
  3215     05EB  120A  118A  2700  120A  118A  	fcall	stringtab
  3216     05F0  1683               	bsf	3,5	;RP0=1, select bank1
  3217     05F1  1303               	bcf	3,6	;RP1=0, select bank1
  3218     05F2  00BF               	movwf	??_read_NumPad^(0+128)
  3219     05F3  1683               	bsf	3,5	;RP0=1, select bank3
  3220     05F4  1703               	bsf	3,6	;RP1=1, select bank3
  3221     05F5  081D               	movf	_iT^(0+384),w
  3222     05F6  3EA2               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3223     05F7  0084               	movwf	4
  3224     05F8  1683               	bsf	3,5	;RP0=1, select bank1
  3225     05F9  1303               	bcf	3,6	;RP1=0, select bank1
  3226     05FA  083F               	movf	??_read_NumPad^(0+128),w
  3227     05FB  1783               	bsf	3,7	;select IRP bank3
  3228     05FC  0080               	movwf	0
  3229     05FD                     l3466:
  3230     05FD  3001               	movlw	1
  3231     05FE  00BF               	movwf	??_read_NumPad^(0+128)
  3232     05FF  083F               	movf	??_read_NumPad^(0+128),w
  3233     0600  1683               	bsf	3,5	;RP0=1, select bank3
  3234     0601  1703               	bsf	3,6	;RP1=1, select bank3
  3235     0602  079D               	addwf	_iT^(0+384),f
  3236     0603  2DC1               	goto	l3452
  3237     0604                     l3470:
  3238     0604  086F               	movf	_initialize^(0+384),w
  3239     0605  1903               	btfsc	3,2
  3240     0606  2E08               	goto	u3691
  3241     0607  2E09               	goto	u3690
  3242     0608                     u3691:
  3243     0608  2E33               	goto	l3480
  3244     0609                     u3690:
  3245     0609                     l3472:
  3246     0609  3003               	movlw	3
  3247     060A  0221               	subwf	_i_id^(0+384),w
  3248     060B  1803               	skipnc
  3249     060C  2E0E               	goto	u3701
  3250     060D  2E0F               	goto	u3700
  3251     060E                     u3701:
  3252     060E  2E33               	goto	l3480
  3253     060F                     u3700:
  3254     060F                     l3474:
  3255                           
  3256                           ;main.c: 758:             {;main.c: 760:                 PIC_ID[i_id++] = keys[keypresse
      +                          d];
  3257     060F  1683               	bsf	3,5	;RP0=1, select bank1
  3258     0610  1303               	bcf	3,6	;RP1=0, select bank1
  3259     0611  086F               	movf	_keypressed^(0+128),w
  3260     0612  3E12               	addlw	low (_keys| (0+32768))
  3261     0613  0084               	movwf	4
  3262     0614  3087               	movlw	high (_keys| (0+32768))
  3263     0615  1803               	skipnc
  3264     0616  3E01               	addlw	1
  3265     0617  1283               	bcf	3,5	;RP0=0, select bank0
  3266     0618  1303               	bcf	3,6	;RP1=0, select bank0
  3267     0619  00FF               	movwf	btemp+1
  3268     061A  120A  118A  2700  120A  118A  	fcall	stringtab
  3269     061F  1683               	bsf	3,5	;RP0=1, select bank1
  3270     0620  1303               	bcf	3,6	;RP1=0, select bank1
  3271     0621  00BF               	movwf	??_read_NumPad^(0+128)
  3272     0622  1683               	bsf	3,5	;RP0=1, select bank3
  3273     0623  1703               	bsf	3,6	;RP1=1, select bank3
  3274     0624  0821               	movf	_i_id^(0+384),w
  3275     0625  3EC6               	addlw	(low (_PIC_ID| (0+256)))& (0+255)
  3276     0626  0084               	movwf	4
  3277     0627  1683               	bsf	3,5	;RP0=1, select bank1
  3278     0628  1303               	bcf	3,6	;RP1=0, select bank1
  3279     0629  083F               	movf	??_read_NumPad^(0+128),w
  3280     062A  1783               	bsf	3,7	;select IRP bank3
  3281     062B  0080               	movwf	0
  3282     062C                     l3476:
  3283     062C  3001               	movlw	1
  3284     062D  00BF               	movwf	??_read_NumPad^(0+128)
  3285     062E  083F               	movf	??_read_NumPad^(0+128),w
  3286     062F  1683               	bsf	3,5	;RP0=1, select bank3
  3287     0630  1703               	bsf	3,6	;RP1=1, select bank3
  3288     0631  07A1               	addwf	_i_id^(0+384),f
  3289     0632  2DD3               	goto	l3460
  3290     0633                     l3480:
  3291                           
  3292                           ;main.c: 764:             PORTD |= 0x0F;
  3293     0633  300F               	movlw	15
  3294     0634  1303               	bcf	3,6	;RP1=0, select bank1
  3295     0635  00BF               	movwf	??_read_NumPad^(0+128)
  3296     0636  083F               	movf	??_read_NumPad^(0+128),w
  3297     0637  1283               	bcf	3,5	;RP0=0, select bank0
  3298     0638  1303               	bcf	3,6	;RP1=0, select bank0
  3299     0639  0488               	iorwf	8,f	;volatile
  3300     063A                     l3482:	
  3301                           ;main.c: 767:             while(((PORTD & 0x0F) != 0x0F))
  3302                           
  3303                           
  3304                           ;main.c: 767:             while(((PORTD & 0x0F) != 0x0F))
  3305     063A  300F               	movlw	15
  3306     063B  1283               	bcf	3,5	;RP0=0, select bank0
  3307     063C  0508               	andwf	8,w	;volatile
  3308     063D  1683               	bsf	3,5	;RP0=1, select bank1
  3309     063E  1303               	bcf	3,6	;RP1=0, select bank1
  3310     063F  00BF               	movwf	??_read_NumPad^(0+128)
  3311     0640  300F               	movlw	15
  3312     0641  063F               	xorwf	??_read_NumPad^(0+128),w
  3313     0642  1D03               	btfss	3,2
  3314     0643  2E45               	goto	u3711
  3315     0644  2E46               	goto	u3710
  3316     0645                     u3711:
  3317     0645  2E3A               	goto	l3482
  3318     0646                     u3710:
  3319     0646                     l3484:
  3320                           
  3321                           ;main.c: 772:     }
  3322     0646  3001               	movlw	1
  3323     0647  00BF               	movwf	??_read_NumPad^(0+128)
  3324     0648  083F               	movf	??_read_NumPad^(0+128),w
  3325     0649  07EE               	addwf	_colScan^(0+128),f
  3326     064A                     l3486:
  3327     064A  3003               	movlw	3
  3328     064B  026E               	subwf	_colScan^(0+128),w
  3329     064C  1C03               	skipc
  3330     064D  2E4F               	goto	u3721
  3331     064E  2E50               	goto	u3720
  3332     064F                     u3721:
  3333     064F  2C30               	goto	l3378
  3334     0650                     u3720:
  3335     0650                     l301:
  3336     0650  0008               	return
  3337     0651                     __end_of_read_NumPad:
  3338                           
  3339                           	psect	text2
  3340     1676                     __ptext2:	
  3341 ;; *************** function _eeprom_write *****************
  3342 ;; Defined at:
  3343 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  addr            1    wreg     unsigned char 
  3346 ;;  value           1   28[BANK0 ] unsigned char 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  addr            1    0[BANK1 ] unsigned char 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg, status,2, status,0
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3358 ;;      Params:         0       1       0       0       0
  3359 ;;      Locals:         0       0       1       0       0
  3360 ;;      Temps:          0       1       0       0       0
  3361 ;;      Totals:         0       2       1       0       0
  3362 ;;Total ram usage:        3 bytes
  3363 ;; Hardware stack levels used: 1
  3364 ;; Hardware stack levels required when called: 4
  3365 ;; This function calls:
  3366 ;;		Nothing
  3367 ;; This function is called by:
  3368 ;;		_read_NumPad
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372     1676                     _eeprom_write:	
  3373                           ;psect for function _eeprom_write
  3374                           
  3375                           
  3376                           ;incstack = 0
  3377                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3378                           ;eeprom_write@addr stored from wreg
  3379     1676  1683               	bsf	3,5	;RP0=1, select bank1
  3380     1677  1303               	bcf	3,6	;RP1=0, select bank1
  3381     1678  00A0               	movwf	eeprom_write@addr^(0+128)
  3382     1679                     l441:	
  3383                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  3384                           
  3385     1679                     l442:
  3386     1679  1683               	bsf	3,5	;RP0=1, select bank3
  3387     167A  1703               	bsf	3,6	;RP1=1, select bank3
  3388     167B  188C               	btfsc	12,1	;volsfr
  3389     167C  2E7E               	goto	u3351
  3390     167D  2E7F               	goto	u3350
  3391     167E                     u3351:
  3392     167E  2E79               	goto	l442
  3393     167F                     u3350:
  3394     167F                     l3286:
  3395     167F  1683               	bsf	3,5	;RP0=1, select bank1
  3396     1680  1303               	bcf	3,6	;RP1=0, select bank1
  3397     1681  0820               	movf	eeprom_write@addr^(0+128),w
  3398     1682  1283               	bcf	3,5	;RP0=0, select bank2
  3399     1683  1703               	bsf	3,6	;RP1=1, select bank2
  3400     1684  008D               	movwf	13	;volatile
  3401     1685  1283               	bcf	3,5	;RP0=0, select bank0
  3402     1686  1303               	bcf	3,6	;RP1=0, select bank0
  3403     1687  083C               	movf	eeprom_write@value,w
  3404     1688  1283               	bcf	3,5	;RP0=0, select bank2
  3405     1689  1703               	bsf	3,6	;RP1=1, select bank2
  3406     168A  008C               	movwf	12	;volatile
  3407     168B                     l3288:
  3408     168B  303F               	movlw	63
  3409     168C  1283               	bcf	3,5	;RP0=0, select bank0
  3410     168D  1303               	bcf	3,6	;RP1=0, select bank0
  3411     168E  00BD               	movwf	??_eeprom_write
  3412     168F  083D               	movf	??_eeprom_write,w
  3413     1690  1683               	bsf	3,5	;RP0=1, select bank3
  3414     1691  1703               	bsf	3,6	;RP1=1, select bank3
  3415     1692  058C               	andwf	12,f	;volsfr
  3416     1693                     l3290:
  3417     1693  1283               	bcf	3,5	;RP0=0, select bank0
  3418     1694  1303               	bcf	3,6	;RP1=0, select bank0
  3419     1695  1003               	bcf	3,0	;volatile
  3420     1696                     l3292:
  3421     1696  1F8B               	btfss	11,7	;volatile
  3422     1697  2E99               	goto	u3361
  3423     1698  2E9A               	goto	u3360
  3424     1699                     u3361:
  3425     1699  2E9B               	goto	l445
  3426     169A                     u3360:
  3427     169A                     l3294:
  3428     169A  1403               	bsf	3,0	;volatile
  3429     169B                     l445:
  3430     169B  138B               	bcf	11,7	;volatile
  3431     169C  1683               	bsf	3,5	;RP0=1, select bank3
  3432     169D  1703               	bsf	3,6	;RP1=1, select bank3
  3433     169E  150C               	bsf	12,2	;volsfr
  3434     169F                     l3296:
  3435     169F  3055               	movlw	85
  3436     16A0  008D               	movwf	13	;volsfr
  3437     16A1  30AA               	movlw	170
  3438     16A2  008D               	movwf	13	;volsfr
  3439     16A3                     l3298:
  3440     16A3  148C               	bsf	12,1	;volsfr
  3441     16A4                     l3300:
  3442     16A4  110C               	bcf	12,2	;volsfr
  3443     16A5                     l3302:
  3444     16A5  1283               	bcf	3,5	;RP0=0, select bank0
  3445     16A6  1303               	bcf	3,6	;RP1=0, select bank0
  3446     16A7  1C03               	btfss	3,0	;volatile
  3447     16A8  2EAA               	goto	u3371
  3448     16A9  2EAB               	goto	u3370
  3449     16AA                     u3371:
  3450     16AA  2EAC               	goto	l448
  3451     16AB                     u3370:
  3452     16AB                     l3304:
  3453     16AB  178B               	bsf	11,7	;volatile
  3454     16AC                     l448:
  3455     16AC  0008               	return
  3456     16AD                     __end_of_eeprom_write:
  3457                           
  3458                           	psect	text3
  3459     0AB1                     __ptext3:	
  3460 ;; *************** function _CompareStrings *****************
  3461 ;; Defined at:
  3462 ;;		line 586 in file "main.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  str1            2    5[BANK1 ] PTR unsigned char 
  3465 ;;		 -> datoSeriale(17), id_dest(4), 
  3466 ;;  str2            1    7[BANK1 ] PTR unsigned char 
  3467 ;;		 -> datoTastierino(17), PIC_ID(4), 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  i               1   12[BANK1 ] unsigned char 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      unsigned char 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3479 ;;      Params:         0       0       3       0       0
  3480 ;;      Locals:         0       0       1       0       0
  3481 ;;      Temps:          0       0       4       0       0
  3482 ;;      Totals:         0       0       8       0       0
  3483 ;;Total ram usage:        8 bytes
  3484 ;; Hardware stack levels used: 1
  3485 ;; Hardware stack levels required when called: 5
  3486 ;; This function calls:
  3487 ;;		_Length
  3488 ;; This function is called by:
  3489 ;;		_main
  3490 ;;		_read_NumPad
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494     0AB1                     _CompareStrings:	
  3495                           ;psect for function _CompareStrings
  3496                           
  3497     0AB1                     l3160:	
  3498                           ;incstack = 0
  3499                           ; Regs used in _CompareStrings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3500                           
  3501                           
  3502                           ;main.c: 586: char CompareStrings(char *str1, char *str2);main.c: 587: {;main.c: 589:   
      +                            if(Length(str1) != Length(str2))
  3503     0AB1  1683               	bsf	3,5	;RP0=1, select bank1
  3504     0AB2  1303               	bcf	3,6	;RP1=0, select bank1
  3505     0AB3  0825               	movf	CompareStrings@str1^(0+128),w
  3506     0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  3507     0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  3508     0AB6  00BC               	movwf	Length@str
  3509     0AB7  1683               	bsf	3,5	;RP0=1, select bank1
  3510     0AB8  1303               	bcf	3,6	;RP1=0, select bank1
  3511     0AB9  0826               	movf	(CompareStrings@str1+1)^(0+128),w
  3512     0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  3513     0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  3514     0ABC  00BD               	movwf	Length@str+1
  3515     0ABD  160A  118A  2640  120A  158A  	fcall	_Length
  3516     0AC2  1283               	bcf	3,5	;RP0=0, select bank0
  3517     0AC3  1303               	bcf	3,6	;RP1=0, select bank0
  3518     0AC4  083C               	movf	?_Length,w
  3519     0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  3520     0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  3521     0AC7  00A8               	movwf	??_CompareStrings^(0+128)
  3522     0AC8  1283               	bcf	3,5	;RP0=0, select bank0
  3523     0AC9  1303               	bcf	3,6	;RP1=0, select bank0
  3524     0ACA  083D               	movf	?_Length+1,w
  3525     0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  3526     0ACC  1303               	bcf	3,6	;RP1=0, select bank1
  3527     0ACD  00A9               	movwf	(??_CompareStrings^(0+128)+1)
  3528     0ACE  0827               	movf	CompareStrings@str2^(0+128),w
  3529     0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  3530     0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  3531     0AD1  00BC               	movwf	Length@str
  3532     0AD2  3001               	movlw	1
  3533     0AD3  00BD               	movwf	Length@str+1
  3534     0AD4  160A  118A  2640  120A  158A  	fcall	_Length
  3535     0AD9  1283               	bcf	3,5	;RP0=0, select bank0
  3536     0ADA  1303               	bcf	3,6	;RP1=0, select bank0
  3537     0ADB  083D               	movf	?_Length+1,w
  3538     0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  3539     0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  3540     0ADE  0629               	xorwf	(??_CompareStrings+1)^(0+128),w
  3541     0ADF  1D03               	skipz
  3542     0AE0  2AE7               	goto	u3235
  3543     0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  3544     0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  3545     0AE3  083C               	movf	?_Length,w
  3546     0AE4  1683               	bsf	3,5	;RP0=1, select bank1
  3547     0AE5  1303               	bcf	3,6	;RP1=0, select bank1
  3548     0AE6  0628               	xorwf	??_CompareStrings^(0+128),w
  3549     0AE7                     u3235:
  3550     0AE7  1903               	skipnz
  3551     0AE8  2AEA               	goto	u3231
  3552     0AE9  2AEB               	goto	u3230
  3553     0AEA                     u3231:
  3554     0AEA  2AED               	goto	l3168
  3555     0AEB                     u3230:
  3556     0AEB                     l3162:
  3557                           
  3558                           ;main.c: 590:         return 0;
  3559     0AEB  3000               	movlw	0
  3560     0AEC  2B20               	goto	l251
  3561     0AED                     l3168:
  3562                           
  3563                           ;main.c: 592:     {;main.c: 593:         char i = 0;
  3564     0AED  01AC               	clrf	CompareStrings@i^(0+128)
  3565                           
  3566                           ;main.c: 596:         while(str1[i] != '\0')
  3567     0AEE  2B0E               	goto	l3178
  3568     0AEF                     l3170:
  3569                           
  3570                           ;main.c: 597:         {;main.c: 598:             if(str1[i] != str2[i])
  3571     0AEF  082C               	movf	CompareStrings@i^(0+128),w
  3572     0AF0  0727               	addwf	CompareStrings@str2^(0+128),w
  3573     0AF1  00A8               	movwf	??_CompareStrings^(0+128)
  3574     0AF2  0828               	movf	??_CompareStrings^(0+128),w
  3575     0AF3  0084               	movwf	4
  3576     0AF4  1783               	bsf	3,7	;select IRP bank2
  3577     0AF5  0800               	movf	0,w
  3578     0AF6  00A9               	movwf	(??_CompareStrings+1)^(0+128)
  3579     0AF7  082C               	movf	CompareStrings@i^(0+128),w
  3580     0AF8  0725               	addwf	CompareStrings@str1^(0+128),w
  3581     0AF9  00AA               	movwf	(??_CompareStrings+2)^(0+128)
  3582     0AFA  0826               	movf	(CompareStrings@str1+1)^(0+128),w
  3583     0AFB  1803               	skipnc
  3584     0AFC  3E01               	addlw	1
  3585     0AFD  00AB               	movwf	((??_CompareStrings+2)^(0+128)+1)
  3586     0AFE  082A               	movf	(??_CompareStrings+2)^(0+128),w
  3587     0AFF  0084               	movwf	4
  3588     0B00  1783               	bsf	3,7
  3589     0B01  1C2B               	btfss	(??_CompareStrings+3)^(0+128),0
  3590     0B02  1383               	bcf	3,7
  3591     0B03  0800               	movf	0,w
  3592     0B04  0629               	xorwf	(??_CompareStrings+1)^(0+128),w
  3593     0B05  1903               	skipnz
  3594     0B06  2B08               	goto	u3241
  3595     0B07  2B09               	goto	u3240
  3596     0B08                     u3241:
  3597     0B08  2B0A               	goto	l3176
  3598     0B09                     u3240:
  3599     0B09  2AEB               	goto	l3162
  3600     0B0A                     l3176:
  3601                           
  3602                           ;main.c: 601:             i++;
  3603     0B0A  3001               	movlw	1
  3604     0B0B  00A8               	movwf	??_CompareStrings^(0+128)
  3605     0B0C  0828               	movf	??_CompareStrings^(0+128),w
  3606     0B0D  07AC               	addwf	CompareStrings@i^(0+128),f
  3607     0B0E                     l3178:
  3608                           
  3609                           ;main.c: 596:         while(str1[i] != '\0')
  3610     0B0E  082C               	movf	CompareStrings@i^(0+128),w
  3611     0B0F  0725               	addwf	CompareStrings@str1^(0+128),w
  3612     0B10  00A8               	movwf	??_CompareStrings^(0+128)
  3613     0B11  0826               	movf	(CompareStrings@str1+1)^(0+128),w
  3614     0B12  1803               	skipnc
  3615     0B13  3E01               	addlw	1
  3616     0B14  00A9               	movwf	(??_CompareStrings^(0+128)+1)
  3617     0B15  0828               	movf	??_CompareStrings^(0+128),w
  3618     0B16  0084               	movwf	4
  3619     0B17  1783               	bsf	3,7
  3620     0B18  1C29               	btfss	(??_CompareStrings+1)^(0+128),0
  3621     0B19  1383               	bcf	3,7
  3622     0B1A  0800               	movf	0,w
  3623     0B1B  1D03               	btfss	3,2
  3624     0B1C  2B1E               	goto	u3251
  3625     0B1D  2B1F               	goto	u3250
  3626     0B1E                     u3251:
  3627     0B1E  2AEF               	goto	l3170
  3628     0B1F                     u3250:
  3629     0B1F                     l3180:
  3630                           
  3631                           ;main.c: 604:         return 1;
  3632     0B1F  3001               	movlw	1
  3633     0B20                     l251:
  3634     0B20  0008               	return
  3635     0B21                     __end_of_CompareStrings:
  3636                           
  3637                           	psect	text4
  3638     0B92                     __ptext4:	
  3639 ;; *************** function _init_PIC *****************
  3640 ;; Defined at:
  3641 ;;		line 343 in file "main.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  id              2    2[BANK3 ] int 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3655 ;;      Params:         0       0       0       0       0
  3656 ;;      Locals:         0       0       0       2       0
  3657 ;;      Temps:          0       0       0       2       0
  3658 ;;      Totals:         0       0       0       4       0
  3659 ;;Total ram usage:        4 bytes
  3660 ;; Hardware stack levels used: 1
  3661 ;; Hardware stack levels required when called: 7
  3662 ;; This function calls:
  3663 ;;		_ConvertToString
  3664 ;;		_Fill
  3665 ;;		_UART_init
  3666 ;;		_eeprom_read
  3667 ;;		_init_LCD
  3668 ;;		_init_NumPad
  3669 ;;		_init_Timer0
  3670 ;;		_lcdPrint
  3671 ;;		_lcdSend
  3672 ;; This function is called by:
  3673 ;;		_main
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677     0B92                     _init_PIC:	
  3678                           ;psect for function _init_PIC
  3679                           
  3680     0B92                     l3352:	
  3681                           ;incstack = 0
  3682                           ; Regs used in _init_PIC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3683                           
  3684                           
  3685                           ;main.c: 346:     UART_init(115200);
  3686     0B92  3000               	movlw	0
  3687     0B93  1683               	bsf	3,5	;RP0=1, select bank1
  3688     0B94  1303               	bcf	3,6	;RP1=0, select bank1
  3689     0B95  00DA               	movwf	(UART_init@baudrate+3)^(0+128)
  3690     0B96  3001               	movlw	1
  3691     0B97  00D9               	movwf	(UART_init@baudrate+2)^(0+128)
  3692     0B98  30C2               	movlw	194
  3693     0B99  00D8               	movwf	(UART_init@baudrate+1)^(0+128)
  3694     0B9A  3000               	movlw	0
  3695     0B9B  00D7               	movwf	UART_init@baudrate^(0+128)
  3696     0B9C  160A  118A  26E9  120A  158A  	fcall	_UART_init
  3697                           
  3698                           ;main.c: 347:     init_LCD();
  3699     0BA1  120A  158A  21E6  120A  158A  	fcall	_init_LCD
  3700                           
  3701                           ;main.c: 348:     init_NumPad();
  3702     0BA6  160A  118A  257C  120A  158A  	fcall	_init_NumPad
  3703                           
  3704                           ;main.c: 349:     init_Timer0();
  3705     0BAB  160A  118A  258D  120A  158A  	fcall	_init_Timer0
  3706                           
  3707                           ;main.c: 352:     int id = (int)eeprom_read(0);
  3708     0BB0  3000               	movlw	0
  3709     0BB1  160A  118A  25A6  120A  158A  	fcall	_eeprom_read
  3710     0BB6  1683               	bsf	3,5	;RP0=1, select bank3
  3711     0BB7  1703               	bsf	3,6	;RP1=1, select bank3
  3712     0BB8  00CA               	movwf	??_init_PIC^(0+384)
  3713     0BB9  01CB               	clrf	(??_init_PIC^(0+384)+1)
  3714     0BBA  084A               	movf	??_init_PIC^(0+384),w
  3715     0BBB  00CC               	movwf	init_PIC@id^(0+384)
  3716     0BBC  084B               	movf	(??_init_PIC+1)^(0+384),w
  3717     0BBD  00CD               	movwf	(init_PIC@id+1)^(0+384)
  3718     0BBE                     l3354:
  3719                           
  3720                           ;main.c: 354:     if(id == 255)
  3721     0BBE  0A4C               	incf	init_PIC@id^(0+384),w
  3722     0BBF  044D               	iorwf	(init_PIC@id+1)^(0+384),w
  3723     0BC0  1D03               	btfss	3,2
  3724     0BC1  2BC3               	goto	u3481
  3725     0BC2  2BC4               	goto	u3480
  3726     0BC3                     u3481:
  3727     0BC3  2BE4               	goto	l3362
  3728     0BC4                     u3480:
  3729     0BC4                     l3356:
  3730                           
  3731                           ;main.c: 355:     {;main.c: 356:         lcdPrint("Inser. ID PIC:\0");
  3732     0BC4  308D               	movlw	low (STR_21| (0+32768))
  3733     0BC5  1683               	bsf	3,5	;RP0=1, select bank1
  3734     0BC6  1303               	bcf	3,6	;RP1=0, select bank1
  3735     0BC7  00A2               	movwf	lcdPrint@str^(0+128)
  3736     0BC8  3087               	movlw	high (STR_21| (0+32768))
  3737     0BC9  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  3738     0BCA  120A  158A  2077  120A  158A  	fcall	_lcdPrint
  3739     0BCF                     l3358:
  3740                           
  3741                           ;main.c: 357:         lcdSend(0xC0, 0);
  3742     0BCF  1283               	bcf	3,5	;RP0=0, select bank0
  3743     0BD0  1303               	bcf	3,6	;RP1=0, select bank0
  3744     0BD1  01BC               	clrf	lcdSend@tipo
  3745     0BD2  30C0               	movlw	192
  3746     0BD3  160A  118A  2613  120A  158A  	fcall	_lcdSend
  3747     0BD8                     l3360:
  3748                           
  3749                           ;main.c: 358:         lcdPrint("MIN=0,MAX=250\0");
  3750     0BD8  30AD               	movlw	low (STR_22| (0+32768))
  3751     0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  3752     0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  3753     0BDB  00A2               	movwf	lcdPrint@str^(0+128)
  3754     0BDC  3087               	movlw	high (STR_22| (0+32768))
  3755     0BDD  00A3               	movwf	(lcdPrint@str^(0+128)+1)
  3756     0BDE  120A  158A  2077  120A  158A  	fcall	_lcdPrint
  3757                           
  3758                           ;main.c: 359:     }
  3759     0BE3  2C05               	goto	l178
  3760     0BE4                     l3362:
  3761                           
  3762                           ;main.c: 362:     {;main.c: 363:         ConvertToString(id, PIC_ID);
  3763     0BE4  084C               	movf	init_PIC@id^(0+384),w
  3764     0BE5  1683               	bsf	3,5	;RP0=1, select bank1
  3765     0BE6  1303               	bcf	3,6	;RP1=0, select bank1
  3766     0BE7  00D7               	movwf	ConvertToString@n^(0+128)
  3767     0BE8  1683               	bsf	3,5	;RP0=1, select bank3
  3768     0BE9  1703               	bsf	3,6	;RP1=1, select bank3
  3769     0BEA  084D               	movf	(init_PIC@id+1)^(0+384),w
  3770     0BEB  1683               	bsf	3,5	;RP0=1, select bank1
  3771     0BEC  1303               	bcf	3,6	;RP1=0, select bank1
  3772     0BED  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  3773     0BEE  3000               	movlw	0
  3774     0BEF  1BD8               	btfsc	(ConvertToString@n+1)^(0+128),7
  3775     0BF0  30FF               	movlw	255
  3776     0BF1  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  3777     0BF2  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  3778     0BF3  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  3779     0BF4  00DB               	movwf	ConvertToString@str^(0+128)
  3780     0BF5  120A  158A  2726  120A  158A  	fcall	_ConvertToString
  3781     0BFA                     l3364:
  3782                           
  3783                           ;main.c: 365:         Fill(PIC_ID);
  3784     0BFA  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  3785     0BFB  120A  158A  224B  120A  158A  	fcall	_Fill
  3786     0C00                     l3366:
  3787                           
  3788                           ;main.c: 366:         initialize = 0;
  3789     0C00  1683               	bsf	3,5	;RP0=1, select bank3
  3790     0C01  1703               	bsf	3,6	;RP1=1, select bank3
  3791     0C02  01EF               	clrf	_initialize^(0+384)
  3792     0C03                     l3368:
  3793                           
  3794                           ;main.c: 367:         pr_start = 1;
  3795     0C03  0197               	clrf	_pr_start^(0+384)
  3796     0C04  0A97               	incf	_pr_start^(0+384),f
  3797     0C05                     l178:
  3798     0C05  0008               	return
  3799     0C06                     __end_of_init_PIC:
  3800                           
  3801                           	psect	text5
  3802     0877                     __ptext5:	
  3803 ;; *************** function _lcdPrint *****************
  3804 ;; Defined at:
  3805 ;;		line 419 in file "main.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  str             2    2[BANK1 ] PTR unsigned char 
  3808 ;;		 -> STR_22(15), STR_21(16), datoTastierino(17), STR_20(18), 
  3809 ;;		 -> STR_18(16), STR_17(13), STR_16(15), STR_14(12), 
  3810 ;;		 -> STR_13(13), STR_12(18), STR_10(16), STR_9(10), 
  3811 ;;		 -> main@num_rand_s_228(16), PIC_ID(4), STR_8(17), STR_7(18), 
  3812 ;;		 -> STR_6(10), main@num_rand_s(16), STR_5(12), STR_4(10), 
  3813 ;;		 -> STR_3(8), STR_2(17), STR_1(11), 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  n               2    7[BANK1 ] int 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3825 ;;      Params:         0       0       2       0       0
  3826 ;;      Locals:         0       0       2       0       0
  3827 ;;      Temps:          0       0       3       0       0
  3828 ;;      Totals:         0       0       7       0       0
  3829 ;;Total ram usage:        7 bytes
  3830 ;; Hardware stack levels used: 1
  3831 ;; Hardware stack levels required when called: 5
  3832 ;; This function calls:
  3833 ;;		_lcdSend
  3834 ;; This function is called by:
  3835 ;;		_main
  3836 ;;		_init_PIC
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840     0877                     _lcdPrint:	
  3841                           ;psect for function _lcdPrint
  3842                           
  3843     0877                     l3122:	
  3844                           ;incstack = 0
  3845                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3846                           
  3847                           
  3848                           ;main.c: 419: void lcdPrint(char *str);main.c: 420: {;main.c: 421:     int n = 0;
  3849     0877  1683               	bsf	3,5	;RP0=1, select bank1
  3850     0878  1303               	bcf	3,6	;RP1=0, select bank1
  3851     0879  01A7               	clrf	lcdPrint@n^(0+128)
  3852     087A  01A8               	clrf	(lcdPrint@n+1)^(0+128)
  3853                           
  3854                           ;main.c: 423:     while(str[n] != '\0')
  3855     087B  28AA               	goto	l3128
  3856     087C                     l3124:
  3857                           
  3858                           ;main.c: 424:     {;main.c: 426:         lcdSend(str[n++], 1);
  3859     087C  01BC               	clrf	lcdSend@tipo
  3860     087D  0ABC               	incf	lcdSend@tipo,f
  3861     087E  1683               	bsf	3,5	;RP0=1, select bank1
  3862     087F  1303               	bcf	3,6	;RP1=0, select bank1
  3863     0880  0827               	movf	lcdPrint@n^(0+128),w
  3864     0881  0722               	addwf	lcdPrint@str^(0+128),w
  3865     0882  00A5               	movwf	(??_lcdPrint+1)^(0+128)
  3866     0883  0823               	movf	(lcdPrint@str+1)^(0+128),w
  3867     0884  00A4               	movwf	??_lcdPrint^(0+128)
  3868     0885  1803               	skipnc
  3869     0886  0AA4               	incf	??_lcdPrint^(0+128),f
  3870     0887  1FA7               	btfss	lcdPrint@n^(0+128),7
  3871     0888  288A               	goto	u3170
  3872     0889  03A4               	decf	??_lcdPrint^(0+128),f
  3873     088A                     u3170:
  3874     088A  1683               	bsf	3,5	;RP0=1, select bank1
  3875     088B  1303               	bcf	3,6	;RP1=0, select bank1
  3876     088C  0824               	movf	??_lcdPrint^(0+128),w
  3877     088D  00A6               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3878     088E  0826               	movf	(??_lcdPrint+2)^(0+128),w
  3879     088F  1283               	bcf	3,5	;RP0=0, select bank0
  3880     0890  1303               	bcf	3,6	;RP1=0, select bank0
  3881     0891  00FF               	movwf	btemp+1
  3882     0892  1683               	bsf	3,5	;RP0=1, select bank1
  3883     0893  1303               	bcf	3,6	;RP1=0, select bank1
  3884     0894  0825               	movf	(??_lcdPrint+1)^(0+128),w
  3885     0895  0084               	movwf	4
  3886     0896  1283               	bcf	3,5	;RP0=0, select bank0
  3887     0897  1303               	bcf	3,6	;RP1=0, select bank0
  3888     0898  120A  118A  2700  120A  158A  	fcall	stringtab
  3889     089D  160A  118A  2613  120A  158A  	fcall	_lcdSend
  3890     08A2                     l3126:
  3891     08A2  3001               	movlw	1
  3892     08A3  1683               	bsf	3,5	;RP0=1, select bank1
  3893     08A4  1303               	bcf	3,6	;RP1=0, select bank1
  3894     08A5  07A7               	addwf	lcdPrint@n^(0+128),f
  3895     08A6  1803               	skipnc
  3896     08A7  0AA8               	incf	(lcdPrint@n+1)^(0+128),f
  3897     08A8  3000               	movlw	0
  3898     08A9  07A8               	addwf	(lcdPrint@n+1)^(0+128),f
  3899     08AA                     l3128:
  3900                           
  3901                           ;main.c: 423:     while(str[n] != '\0')
  3902     08AA  0827               	movf	lcdPrint@n^(0+128),w
  3903     08AB  0722               	addwf	lcdPrint@str^(0+128),w
  3904     08AC  00A5               	movwf	(??_lcdPrint+1)^(0+128)
  3905     08AD  0823               	movf	(lcdPrint@str+1)^(0+128),w
  3906     08AE  00A4               	movwf	??_lcdPrint^(0+128)
  3907     08AF  1803               	skipnc
  3908     08B0  0AA4               	incf	??_lcdPrint^(0+128),f
  3909     08B1  1FA7               	btfss	lcdPrint@n^(0+128),7
  3910     08B2  28B4               	goto	u3180
  3911     08B3  03A4               	decf	??_lcdPrint^(0+128),f
  3912     08B4                     u3180:
  3913     08B4  1683               	bsf	3,5	;RP0=1, select bank1
  3914     08B5  1303               	bcf	3,6	;RP1=0, select bank1
  3915     08B6  0824               	movf	??_lcdPrint^(0+128),w
  3916     08B7  00A6               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3917     08B8  0826               	movf	(??_lcdPrint+2)^(0+128),w
  3918     08B9  1283               	bcf	3,5	;RP0=0, select bank0
  3919     08BA  1303               	bcf	3,6	;RP1=0, select bank0
  3920     08BB  00FF               	movwf	btemp+1
  3921     08BC  1683               	bsf	3,5	;RP0=1, select bank1
  3922     08BD  1303               	bcf	3,6	;RP1=0, select bank1
  3923     08BE  0825               	movf	(??_lcdPrint+1)^(0+128),w
  3924     08BF  0084               	movwf	4
  3925     08C0  1283               	bcf	3,5	;RP0=0, select bank0
  3926     08C1  1303               	bcf	3,6	;RP1=0, select bank0
  3927     08C2  120A  118A  2700  120A  158A  	fcall	stringtab
  3928     08C7  3A00               	xorlw	0
  3929     08C8  1D03               	skipz
  3930     08C9  28CB               	goto	u3191
  3931     08CA  28CC               	goto	u3190
  3932     08CB                     u3191:
  3933     08CB  287C               	goto	l3124
  3934     08CC                     u3190:
  3935     08CC                     l193:
  3936     08CC  0008               	return
  3937     08CD                     __end_of_lcdPrint:
  3938                           
  3939                           	psect	text6
  3940     158D                     __ptext6:	
  3941 ;; *************** function _init_Timer0 *****************
  3942 ;; Defined at:
  3943 ;;		line 371 in file "main.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;		None
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3957 ;;      Params:         0       0       0       0       0
  3958 ;;      Locals:         0       0       0       0       0
  3959 ;;      Temps:          0       1       0       0       0
  3960 ;;      Totals:         0       1       0       0       0
  3961 ;;Total ram usage:        1 bytes
  3962 ;; Hardware stack levels used: 1
  3963 ;; Hardware stack levels required when called: 4
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_init_PIC
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971     158D                     _init_Timer0:	
  3972                           ;psect for function _init_Timer0
  3973                           
  3974     158D                     l3224:	
  3975                           ;incstack = 0
  3976                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  3977                           
  3978                           
  3979                           ;main.c: 374:     INTCON |= 0xA0;
  3980     158D  30A0               	movlw	160
  3981     158E  1283               	bcf	3,5	;RP0=0, select bank0
  3982     158F  1303               	bcf	3,6	;RP1=0, select bank0
  3983     1590  00BC               	movwf	??_init_Timer0
  3984     1591  083C               	movf	??_init_Timer0,w
  3985     1592  048B               	iorwf	11,f	;volatile
  3986     1593                     l3226:
  3987                           
  3988                           ;main.c: 375:     OPTION_REG = 0x06;
  3989     1593  3006               	movlw	6
  3990     1594  1683               	bsf	3,5	;RP0=1, select bank1
  3991     1595  1303               	bcf	3,6	;RP1=0, select bank1
  3992     1596  0081               	movwf	1	;volatile
  3993     1597                     l3228:
  3994                           
  3995                           ;main.c: 376:     TMR0 = 131;
  3996     1597  3083               	movlw	131
  3997     1598  1283               	bcf	3,5	;RP0=0, select bank0
  3998     1599  1303               	bcf	3,6	;RP1=0, select bank0
  3999     159A  0081               	movwf	1	;volatile
  4000     159B                     l3230:
  4001                           
  4002                           ;main.c: 378:     milliseconds = 0;
  4003     159B  3000               	movlw	0
  4004     159C  1683               	bsf	3,5	;RP0=1, select bank1
  4005     159D  1303               	bcf	3,6	;RP1=0, select bank1
  4006     159E  00EB               	movwf	(_milliseconds+3)^(0+128)
  4007     159F  3000               	movlw	0
  4008     15A0  00EA               	movwf	(_milliseconds+2)^(0+128)
  4009     15A1  3000               	movlw	0
  4010     15A2  00E9               	movwf	(_milliseconds+1)^(0+128)
  4011     15A3  3000               	movlw	0
  4012     15A4  00E8               	movwf	_milliseconds^(0+128)
  4013     15A5                     l181:
  4014     15A5  0008               	return
  4015     15A6                     __end_of_init_Timer0:
  4016                           
  4017                           	psect	text7
  4018     157C                     __ptext7:	
  4019 ;; *************** function _init_NumPad *****************
  4020 ;; Defined at:
  4021 ;;		line 635 in file "main.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		wreg, status,2, status,0
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4035 ;;      Params:         0       0       0       0       0
  4036 ;;      Locals:         0       0       0       0       0
  4037 ;;      Temps:          0       1       0       0       0
  4038 ;;      Totals:         0       1       0       0       0
  4039 ;;Total ram usage:        1 bytes
  4040 ;; Hardware stack levels used: 1
  4041 ;; Hardware stack levels required when called: 4
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_init_PIC
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049     157C                     _init_NumPad:	
  4050                           ;psect for function _init_NumPad
  4051                           
  4052     157C                     l3222:	
  4053                           ;incstack = 0
  4054                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  4055                           
  4056                           
  4057                           ;main.c: 638:     TRISD |= 0x0F;
  4058     157C  300F               	movlw	15
  4059     157D  1283               	bcf	3,5	;RP0=0, select bank0
  4060     157E  1303               	bcf	3,6	;RP1=0, select bank0
  4061     157F  00BC               	movwf	??_init_NumPad
  4062     1580  083C               	movf	??_init_NumPad,w
  4063     1581  1683               	bsf	3,5	;RP0=1, select bank1
  4064     1582  1303               	bcf	3,6	;RP1=0, select bank1
  4065     1583  0488               	iorwf	8,f	;volatile
  4066                           
  4067                           ;main.c: 639:     TRISB &= 0xF0;
  4068     1584  30F0               	movlw	240
  4069     1585  1283               	bcf	3,5	;RP0=0, select bank0
  4070     1586  1303               	bcf	3,6	;RP1=0, select bank0
  4071     1587  00BC               	movwf	??_init_NumPad
  4072     1588  083C               	movf	??_init_NumPad,w
  4073     1589  1683               	bsf	3,5	;RP0=1, select bank1
  4074     158A  1303               	bcf	3,6	;RP1=0, select bank1
  4075     158B  0586               	andwf	6,f	;volatile
  4076     158C                     l268:
  4077     158C  0008               	return
  4078     158D                     __end_of_init_NumPad:
  4079                           
  4080                           	psect	text8
  4081     09E6                     __ptext8:	
  4082 ;; *************** function _init_LCD *****************
  4083 ;; Defined at:
  4084 ;;		line 381 in file "main.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;		None
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;		None
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		wreg, status,2, status,0, pclath, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4098 ;;      Params:         0       0       0       0       0
  4099 ;;      Locals:         0       0       0       0       0
  4100 ;;      Temps:          0       0       2       0       0
  4101 ;;      Totals:         0       0       2       0       0
  4102 ;;Total ram usage:        2 bytes
  4103 ;; Hardware stack levels used: 1
  4104 ;; Hardware stack levels required when called: 5
  4105 ;; This function calls:
  4106 ;;		_lcdSend
  4107 ;; This function is called by:
  4108 ;;		_init_PIC
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112     09E6                     _init_LCD:	
  4113                           ;psect for function _init_LCD
  4114                           
  4115     09E6                     l3200:	
  4116                           ;incstack = 0
  4117                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  4118                           
  4119                           
  4120                           ;main.c: 385:     PORTEbits.RE2 = 0;
  4121     09E6  1283               	bcf	3,5	;RP0=0, select bank0
  4122     09E7  1303               	bcf	3,6	;RP1=0, select bank0
  4123     09E8  1109               	bcf	9,2	;volatile
  4124                           
  4125                           ;main.c: 386:     PORTEbits.RE1 = 0;
  4126     09E9  1089               	bcf	9,1	;volatile
  4127     09EA                     l3202:
  4128                           
  4129                           ;main.c: 387:     _delay((unsigned long)((20)*(20000000/4000.0)));
  4130     09EA  3082               	movlw	130
  4131     09EB  1683               	bsf	3,5	;RP0=1, select bank1
  4132     09EC  1303               	bcf	3,6	;RP1=0, select bank1
  4133     09ED  00A3               	movwf	(??_init_LCD^(0+128)+1)
  4134     09EE  30DD               	movlw	221
  4135     09EF  00A2               	movwf	??_init_LCD^(0+128)
  4136     09F0                     u4027:
  4137     09F0  0BA2               	decfsz	??_init_LCD^(0+128),f
  4138     09F1  29F0               	goto	u4027
  4139     09F2  0BA3               	decfsz	(??_init_LCD^(0+128)+1),f
  4140     09F3  29F0               	goto	u4027
  4141     09F4                     l3204:
  4142                           
  4143                           ;main.c: 388:     PORTEbits.RE1 = 1;
  4144     09F4  1283               	bcf	3,5	;RP0=0, select bank0
  4145     09F5  1303               	bcf	3,6	;RP1=0, select bank0
  4146     09F6  1489               	bsf	9,1	;volatile
  4147     09F7                     l3206:
  4148                           
  4149                           ;main.c: 390:     lcdSend(0x38, 0);
  4150     09F7  01BC               	clrf	lcdSend@tipo
  4151     09F8  3038               	movlw	56
  4152     09F9  160A  118A  2613  120A  158A  	fcall	_lcdSend
  4153     09FE                     l3208:
  4154                           
  4155                           ;main.c: 391:     _delay((unsigned long)((5)*(20000000/4000.0)));
  4156     09FE  3021               	movlw	33
  4157     09FF  1683               	bsf	3,5	;RP0=1, select bank1
  4158     0A00  1303               	bcf	3,6	;RP1=0, select bank1
  4159     0A01  00A3               	movwf	(??_init_LCD^(0+128)+1)
  4160     0A02  3075               	movlw	117
  4161     0A03  00A2               	movwf	??_init_LCD^(0+128)
  4162     0A04                     u4037:
  4163     0A04  0BA2               	decfsz	??_init_LCD^(0+128),f
  4164     0A05  2A04               	goto	u4037
  4165     0A06  0BA3               	decfsz	(??_init_LCD^(0+128)+1),f
  4166     0A07  2A04               	goto	u4037
  4167     0A08  2A09               	nop2
  4168                           
  4169                           ;main.c: 392:     lcdSend(0x38, 0);
  4170     0A09  1283               	bcf	3,5	;RP0=0, select bank0
  4171     0A0A  1303               	bcf	3,6	;RP1=0, select bank0
  4172     0A0B  01BC               	clrf	lcdSend@tipo
  4173     0A0C  3038               	movlw	56
  4174     0A0D  160A  118A  2613  120A  158A  	fcall	_lcdSend
  4175     0A12                     l3210:
  4176                           
  4177                           ;main.c: 393:     _delay((unsigned long)((1)*(20000000/4000.0)));
  4178     0A12  3007               	movlw	7
  4179     0A13  1683               	bsf	3,5	;RP0=1, select bank1
  4180     0A14  1303               	bcf	3,6	;RP1=0, select bank1
  4181     0A15  00A3               	movwf	(??_init_LCD^(0+128)+1)
  4182     0A16  307C               	movlw	124
  4183     0A17  00A2               	movwf	??_init_LCD^(0+128)
  4184     0A18                     u4047:
  4185     0A18  0BA2               	decfsz	??_init_LCD^(0+128),f
  4186     0A19  2A18               	goto	u4047
  4187     0A1A  0BA3               	decfsz	(??_init_LCD^(0+128)+1),f
  4188     0A1B  2A18               	goto	u4047
  4189     0A1C  0000               	nop
  4190     0A1D                     l3212:
  4191                           
  4192                           ;main.c: 394:     lcdSend(0x38, 0);
  4193     0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  4194     0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  4195     0A1F  01BC               	clrf	lcdSend@tipo
  4196     0A20  3038               	movlw	56
  4197     0A21  160A  118A  2613  120A  158A  	fcall	_lcdSend
  4198     0A26                     l3214:
  4199                           
  4200                           ;main.c: 395:     lcdSend(0x08, 0);
  4201     0A26  1283               	bcf	3,5	;RP0=0, select bank0
  4202     0A27  1303               	bcf	3,6	;RP1=0, select bank0
  4203     0A28  01BC               	clrf	lcdSend@tipo
  4204     0A29  3008               	movlw	8
  4205     0A2A  160A  118A  2613  120A  158A  	fcall	_lcdSend
  4206     0A2F                     l3216:
  4207                           
  4208                           ;main.c: 396:     lcdSend(0x0F, 0);
  4209     0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  4210     0A30  1303               	bcf	3,6	;RP1=0, select bank0
  4211     0A31  01BC               	clrf	lcdSend@tipo
  4212     0A32  300F               	movlw	15
  4213     0A33  160A  118A  2613  120A  158A  	fcall	_lcdSend
  4214     0A38                     l3218:
  4215                           
  4216                           ;main.c: 397:     lcdSend(0x01, 0);
  4217     0A38  1283               	bcf	3,5	;RP0=0, select bank0
  4218     0A39  1303               	bcf	3,6	;RP1=0, select bank0
  4219     0A3A  01BC               	clrf	lcdSend@tipo
  4220     0A3B  3001               	movlw	1
  4221     0A3C  160A  118A  2613  120A  158A  	fcall	_lcdSend
  4222     0A41                     l3220:
  4223                           
  4224                           ;main.c: 399:     lcdSend(0x0C, 0);
  4225     0A41  1283               	bcf	3,5	;RP0=0, select bank0
  4226     0A42  1303               	bcf	3,6	;RP1=0, select bank0
  4227     0A43  01BC               	clrf	lcdSend@tipo
  4228     0A44  300C               	movlw	12
  4229     0A45  160A  118A  2613  120A  158A  	fcall	_lcdSend
  4230     0A4A                     l184:
  4231     0A4A  0008               	return
  4232     0A4B                     __end_of_init_LCD:
  4233                           
  4234                           	psect	text9
  4235     1613                     __ptext9:	
  4236 ;; *************** function _lcdSend *****************
  4237 ;; Defined at:
  4238 ;;		line 402 in file "main.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;  dato            1    wreg     unsigned char 
  4241 ;;  tipo            1   28[BANK0 ] unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  dato            1   29[BANK0 ] unsigned char 
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4253 ;;      Params:         0       1       0       0       0
  4254 ;;      Locals:         0       1       0       0       0
  4255 ;;      Temps:          0       0       2       0       0
  4256 ;;      Totals:         0       2       2       0       0
  4257 ;;Total ram usage:        4 bytes
  4258 ;; Hardware stack levels used: 1
  4259 ;; Hardware stack levels required when called: 4
  4260 ;; This function calls:
  4261 ;;		Nothing
  4262 ;; This function is called by:
  4263 ;;		_main
  4264 ;;		_init_PIC
  4265 ;;		_init_LCD
  4266 ;;		_lcdPrint
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270     1613                     _lcdSend:	
  4271                           ;psect for function _lcdSend
  4272                           
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  4276                           ;lcdSend@dato stored from wreg
  4277     1613  1283               	bcf	3,5	;RP0=0, select bank0
  4278     1614  1303               	bcf	3,6	;RP1=0, select bank0
  4279     1615  00BD               	movwf	lcdSend@dato
  4280     1616                     l2992:
  4281                           
  4282                           ;main.c: 402: void lcdSend(char dato, char tipo);main.c: 403: {;main.c: 406:     TRISD =
      +                           0x00;
  4283     1616  1683               	bsf	3,5	;RP0=1, select bank1
  4284     1617  1303               	bcf	3,6	;RP1=0, select bank1
  4285     1618  0188               	clrf	8	;volatile
  4286     1619                     l2994:
  4287                           
  4288                           ;main.c: 407:     TRISEbits.TRISE1 = 0;
  4289     1619  1089               	bcf	9,1	;volatile
  4290     161A                     l2996:
  4291                           
  4292                           ;main.c: 408:     TRISEbits.TRISE2 = 0;
  4293     161A  1109               	bcf	9,2	;volatile
  4294     161B                     l2998:
  4295                           
  4296                           ;main.c: 410:     PORTEbits.RE1 = 1;
  4297     161B  1283               	bcf	3,5	;RP0=0, select bank0
  4298     161C  1303               	bcf	3,6	;RP1=0, select bank0
  4299     161D  1489               	bsf	9,1	;volatile
  4300     161E                     l3000:
  4301                           
  4302                           ;main.c: 411:     PORTD = dato;
  4303     161E  083D               	movf	lcdSend@dato,w
  4304     161F  0088               	movwf	8	;volatile
  4305     1620                     l3002:
  4306                           
  4307                           ;main.c: 412:     PORTEbits.RE2 = tipo;
  4308     1620  0C3C               	rrf	lcdSend@tipo,w
  4309     1621  1C03               	skipc
  4310     1622  1109               	bcf	9,2	;volatile
  4311     1623  1803               	skipnc
  4312     1624  1509               	bsf	9,2	;volatile
  4313     1625                     l3004:
  4314                           
  4315                           ;main.c: 413:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4316     1625  3014               	movlw	20
  4317     1626  1683               	bsf	3,5	;RP0=1, select bank1
  4318     1627  1303               	bcf	3,6	;RP1=0, select bank1
  4319     1628  00A1               	movwf	(??_lcdSend^(0+128)+1)
  4320     1629  3079               	movlw	121
  4321     162A  00A0               	movwf	??_lcdSend^(0+128)
  4322     162B                     u4057:
  4323     162B  0BA0               	decfsz	??_lcdSend^(0+128),f
  4324     162C  2E2B               	goto	u4057
  4325     162D  0BA1               	decfsz	(??_lcdSend^(0+128)+1),f
  4326     162E  2E2B               	goto	u4057
  4327     162F                     l3006:
  4328                           
  4329                           ;main.c: 414:     PORTEbits.RE1 = 0;
  4330     162F  1283               	bcf	3,5	;RP0=0, select bank0
  4331     1630  1303               	bcf	3,6	;RP1=0, select bank0
  4332     1631  1089               	bcf	9,1	;volatile
  4333     1632                     l3008:
  4334                           
  4335                           ;main.c: 415:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4336     1632  3014               	movlw	20
  4337     1633  1683               	bsf	3,5	;RP0=1, select bank1
  4338     1634  1303               	bcf	3,6	;RP1=0, select bank1
  4339     1635  00A1               	movwf	(??_lcdSend^(0+128)+1)
  4340     1636  3079               	movlw	121
  4341     1637  00A0               	movwf	??_lcdSend^(0+128)
  4342     1638                     u4067:
  4343     1638  0BA0               	decfsz	??_lcdSend^(0+128),f
  4344     1639  2E38               	goto	u4067
  4345     163A  0BA1               	decfsz	(??_lcdSend^(0+128)+1),f
  4346     163B  2E38               	goto	u4067
  4347     163C                     l3010:
  4348                           
  4349                           ;main.c: 416:     PORTEbits.RE1 = 1;
  4350     163C  1283               	bcf	3,5	;RP0=0, select bank0
  4351     163D  1303               	bcf	3,6	;RP1=0, select bank0
  4352     163E  1489               	bsf	9,1	;volatile
  4353     163F                     l187:
  4354     163F  0008               	return
  4355     1640                     __end_of_lcdSend:
  4356                           
  4357                           	psect	text10
  4358     15A6                     __ptext10:	
  4359 ;; *************** function _eeprom_read *****************
  4360 ;; Defined at:
  4361 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  addr            1    wreg     unsigned char 
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  addr            1   29[BANK0 ] unsigned char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      unsigned char 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4375 ;;      Params:         0       0       0       0       0
  4376 ;;      Locals:         0       1       0       0       0
  4377 ;;      Temps:          0       1       0       0       0
  4378 ;;      Totals:         0       2       0       0       0
  4379 ;;Total ram usage:        2 bytes
  4380 ;; Hardware stack levels used: 1
  4381 ;; Hardware stack levels required when called: 4
  4382 ;; This function calls:
  4383 ;;		Nothing
  4384 ;; This function is called by:
  4385 ;;		_init_PIC
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389     15A6                     _eeprom_read:	
  4390                           ;psect for function _eeprom_read
  4391                           
  4392                           
  4393                           ;incstack = 0
  4394                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4395                           ;eeprom_read@addr stored from wreg
  4396     15A6  1283               	bcf	3,5	;RP0=0, select bank0
  4397     15A7  1303               	bcf	3,6	;RP1=0, select bank0
  4398     15A8  00BD               	movwf	eeprom_read@addr
  4399     15A9                     l422:	
  4400                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 8:  do
  4401                           
  4402     15A9  0064               	clrwdt	;# 
  4403     15AA  1683               	bsf	3,5	;RP0=1, select bank3
  4404     15AB  1703               	bsf	3,6	;RP1=1, select bank3
  4405     15AC  188C               	btfsc	12,1	;volsfr
  4406     15AD  2DAF               	goto	u3271
  4407     15AE  2DB2               	goto	u3270
  4408     15AF                     u3271:
  4409     15AF  1283               	bcf	3,5	;RP0=0, select bank0
  4410     15B0  1303               	bcf	3,6	;RP1=0, select bank0
  4411     15B1  2DA9               	goto	l422
  4412     15B2                     u3270:
  4413     15B2                     l3232:
  4414                           
  4415                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4416     15B2  1283               	bcf	3,5	;RP0=0, select bank0
  4417     15B3  1303               	bcf	3,6	;RP1=0, select bank0
  4418     15B4  083D               	movf	eeprom_read@addr,w
  4419     15B5  1283               	bcf	3,5	;RP0=0, select bank2
  4420     15B6  1703               	bsf	3,6	;RP1=1, select bank2
  4421     15B7  008D               	movwf	13	;volatile
  4422     15B8  303F               	movlw	63
  4423     15B9  1283               	bcf	3,5	;RP0=0, select bank0
  4424     15BA  1303               	bcf	3,6	;RP1=0, select bank0
  4425     15BB  00BC               	movwf	??_eeprom_read
  4426     15BC  083C               	movf	??_eeprom_read,w
  4427     15BD  1683               	bsf	3,5	;RP0=1, select bank3
  4428     15BE  1703               	bsf	3,6	;RP1=1, select bank3
  4429     15BF  058C               	andwf	12,f	;volsfr
  4430     15C0  140C               	bsf	12,0	;volsfr
  4431     15C1  1283               	bcf	3,5	;RP0=0, select bank2
  4432     15C2  1703               	bsf	3,6	;RP1=1, select bank2
  4433     15C3  080C               	movf	12,w	;volatile
  4434     15C4                     l424:
  4435     15C4  0008               	return
  4436     15C5                     __end_of_eeprom_read:
  4437                           
  4438                           	psect	text11
  4439     16E9                     __ptext11:	
  4440 ;; *************** function _UART_init *****************
  4441 ;; Defined at:
  4442 ;;		line 775 in file "main.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  baudrate        4   55[BANK1 ] long 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;		None
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      void 
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0, pclath, cstack
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4456 ;;      Params:         0       0       4       0       0
  4457 ;;      Locals:         0       0       0       0       0
  4458 ;;      Temps:          0       0       4       0       0
  4459 ;;      Totals:         0       0       8       0       0
  4460 ;;Total ram usage:        8 bytes
  4461 ;; Hardware stack levels used: 1
  4462 ;; Hardware stack levels required when called: 5
  4463 ;; This function calls:
  4464 ;;		___aldiv
  4465 ;; This function is called by:
  4466 ;;		_init_PIC
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470     16E9                     _UART_init:	
  4471                           ;psect for function _UART_init
  4472                           
  4473     16E9                     l3184:	
  4474                           ;incstack = 0
  4475                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  4476                           
  4477                           
  4478                           ;main.c: 775: void UART_init(long int baudrate);main.c: 776: {;main.c: 778:     TRISC &=
      +                           ~0x40;
  4479     16E9  30BF               	movlw	191
  4480     16EA  1683               	bsf	3,5	;RP0=1, select bank1
  4481     16EB  1303               	bcf	3,6	;RP1=0, select bank1
  4482     16EC  00DB               	movwf	??_UART_init^(0+128)
  4483     16ED  085B               	movf	??_UART_init^(0+128),w
  4484     16EE  0587               	andwf	7,f	;volatile
  4485     16EF                     l3186:
  4486                           
  4487                           ;main.c: 779:     TRISC |= 0x80;
  4488     16EF  1787               	bsf	7,7	;volatile
  4489                           
  4490                           ;main.c: 780:     TXSTA |= 0x24;
  4491     16F0  3024               	movlw	36
  4492     16F1  00DB               	movwf	??_UART_init^(0+128)
  4493     16F2  085B               	movf	??_UART_init^(0+128),w
  4494     16F3  0498               	iorwf	24,f	;volatile
  4495     16F4                     l3188:
  4496                           
  4497                           ;main.c: 781:     RCSTA |= 0x80;
  4498     16F4  1283               	bcf	3,5	;RP0=0, select bank0
  4499     16F5  1303               	bcf	3,6	;RP1=0, select bank0
  4500     16F6  1798               	bsf	24,7	;volatile
  4501     16F7                     l3190:
  4502                           
  4503                           ;main.c: 782:     RCSTA |= 0x10;
  4504     16F7  1618               	bsf	24,4	;volatile
  4505     16F8                     l3192:
  4506                           
  4507                           ;main.c: 785:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  4508     16F8  1683               	bsf	3,5	;RP0=1, select bank1
  4509     16F9  1303               	bcf	3,6	;RP1=0, select bank1
  4510     16FA  0857               	movf	UART_init@baudrate^(0+128),w
  4511     16FB  00DB               	movwf	??_UART_init^(0+128)
  4512     16FC  0858               	movf	(UART_init@baudrate+1)^(0+128),w
  4513     16FD  00DC               	movwf	(??_UART_init^(0+128)+1)
  4514     16FE  0859               	movf	(UART_init@baudrate+2)^(0+128),w
  4515     16FF  00DD               	movwf	(??_UART_init^(0+128)+2)
  4516     1700  085A               	movf	(UART_init@baudrate+3)^(0+128),w
  4517     1701  00DE               	movwf	(??_UART_init^(0+128)+3)
  4518     1702  3006               	movlw	6
  4519     1703                     u3265:
  4520     1703  1003               	clrc
  4521     1704  0DDB               	rlf	??_UART_init^(0+128),f
  4522     1705  0DDC               	rlf	(??_UART_init^(0+128)+1),f
  4523     1706  0DDD               	rlf	(??_UART_init^(0+128)+2),f
  4524     1707  0DDE               	rlf	(??_UART_init^(0+128)+3),f
  4525     1708                     u3260:
  4526     1708  3EFF               	addlw	-1
  4527     1709  1D03               	skipz
  4528     170A  2F03               	goto	u3265
  4529     170B  085E               	movf	(??_UART_init+3)^(0+128),w
  4530     170C  00CB               	movwf	(___aldiv@divisor+3)^(0+128)
  4531     170D  085D               	movf	(??_UART_init+2)^(0+128),w
  4532     170E  00CA               	movwf	(___aldiv@divisor+2)^(0+128)
  4533     170F  085C               	movf	(??_UART_init+1)^(0+128),w
  4534     1710  00C9               	movwf	(___aldiv@divisor+1)^(0+128)
  4535     1711  085B               	movf	??_UART_init^(0+128),w
  4536     1712  00C8               	movwf	___aldiv@divisor^(0+128)
  4537     1713  3001               	movlw	1
  4538     1714  00CF               	movwf	(___aldiv@dividend+3)^(0+128)
  4539     1715  3031               	movlw	49
  4540     1716  00CE               	movwf	(___aldiv@dividend+2)^(0+128)
  4541     1717  302D               	movlw	45
  4542     1718  00CD               	movwf	(___aldiv@dividend+1)^(0+128)
  4543     1719  3000               	movlw	0
  4544     171A  00CC               	movwf	___aldiv@dividend^(0+128)
  4545     171B  120A  158A  2689  160A  118A  	fcall	___aldiv
  4546     1720  1683               	bsf	3,5	;RP0=1, select bank1
  4547     1721  1303               	bcf	3,6	;RP1=0, select bank1
  4548     1722  0848               	movf	?___aldiv^(0+128),w
  4549     1723  3EFF               	addlw	255
  4550     1724  0099               	movwf	25	;volatile
  4551     1725                     l3194:
  4552                           
  4553                           ;main.c: 788:     INTCON |= 0x80;
  4554     1725  178B               	bsf	11,7	;volatile
  4555     1726                     l3196:
  4556                           
  4557                           ;main.c: 790:     INTCON |= 0x40;
  4558     1726  170B               	bsf	11,6	;volatile
  4559     1727                     l3198:
  4560                           
  4561                           ;main.c: 792:     PIE1 |= 0x20;
  4562     1727  168C               	bsf	12,5	;volatile
  4563     1728                     l304:
  4564     1728  0008               	return
  4565     1729                     __end_of_UART_init:
  4566                           
  4567                           	psect	text12
  4568     0A4B                     __ptext12:	
  4569 ;; *************** function _Fill *****************
  4570 ;; Defined at:
  4571 ;;		line 608 in file "main.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  id              1    wreg     PTR unsigned char 
  4574 ;;		 -> PIC_ID(4), 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  id              1    8[BANK1 ] PTR unsigned char 
  4577 ;;		 -> PIC_ID(4), 
  4578 ;;  length          2    6[BANK1 ] int 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      void 
  4581 ;; Registers used:
  4582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4588 ;;      Params:         0       0       0       0       0
  4589 ;;      Locals:         0       0       3       0       0
  4590 ;;      Temps:          0       0       1       0       0
  4591 ;;      Totals:         0       0       4       0       0
  4592 ;;Total ram usage:        4 bytes
  4593 ;; Hardware stack levels used: 1
  4594 ;; Hardware stack levels required when called: 5
  4595 ;; This function calls:
  4596 ;;		_Length
  4597 ;; This function is called by:
  4598 ;;		_init_PIC
  4599 ;;		_read_NumPad
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603     0A4B                     _Fill:	
  4604                           ;psect for function _Fill
  4605                           
  4606                           
  4607                           ;incstack = 0
  4608                           ; Regs used in _Fill: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4609                           ;Fill@id stored from wreg
  4610     0A4B  1683               	bsf	3,5	;RP0=1, select bank1
  4611     0A4C  1303               	bcf	3,6	;RP1=0, select bank1
  4612     0A4D  00A8               	movwf	Fill@id^(0+128)
  4613     0A4E                     l3236:
  4614                           
  4615                           ;main.c: 608: void Fill(char* id);main.c: 609: {;main.c: 610:     int length = Length(id
      +                          );
  4616     0A4E  0828               	movf	Fill@id^(0+128),w
  4617     0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  4618     0A50  1303               	bcf	3,6	;RP1=0, select bank0
  4619     0A51  00BC               	movwf	Length@str
  4620     0A52  3001               	movlw	1
  4621     0A53  00BD               	movwf	Length@str+1
  4622     0A54  160A  118A  2640  120A  158A  	fcall	_Length
  4623     0A59  1283               	bcf	3,5	;RP0=0, select bank0
  4624     0A5A  1303               	bcf	3,6	;RP1=0, select bank0
  4625     0A5B  083D               	movf	?_Length+1,w
  4626     0A5C  1683               	bsf	3,5	;RP0=1, select bank1
  4627     0A5D  1303               	bcf	3,6	;RP1=0, select bank1
  4628     0A5E  00A7               	movwf	(Fill@length+1)^(0+128)
  4629     0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  4630     0A60  1303               	bcf	3,6	;RP1=0, select bank0
  4631     0A61  083C               	movf	?_Length,w
  4632     0A62  1683               	bsf	3,5	;RP0=1, select bank1
  4633     0A63  1303               	bcf	3,6	;RP1=0, select bank1
  4634     0A64  00A6               	movwf	Fill@length^(0+128)
  4635     0A65                     l3238:
  4636                           
  4637                           ;main.c: 612:     if(length < 3)
  4638     0A65  0827               	movf	(Fill@length+1)^(0+128),w
  4639     0A66  3A80               	xorlw	128
  4640     0A67  00FF               	movwf	btemp+1
  4641     0A68  3080               	movlw	128
  4642     0A69  027F               	subwf	btemp+1,w
  4643     0A6A  1D03               	skipz
  4644     0A6B  2A6E               	goto	u3285
  4645     0A6C  3003               	movlw	3
  4646     0A6D  0226               	subwf	Fill@length^(0+128),w
  4647     0A6E                     u3285:
  4648     0A6E  1803               	skipnc
  4649     0A6F  2A71               	goto	u3281
  4650     0A70  2A72               	goto	u3280
  4651     0A71                     u3281:
  4652     0A71  2AB0               	goto	l265
  4653     0A72                     u3280:
  4654     0A72  2AA1               	goto	l3256
  4655     0A73                     l3242:
  4656                           
  4657                           ;main.c: 617:                 id[3] = '\0';
  4658     0A73  0828               	movf	Fill@id^(0+128),w
  4659     0A74  3E03               	addlw	3
  4660     0A75  0084               	movwf	4
  4661     0A76  1783               	bsf	3,7	;select IRP bank2
  4662     0A77  0180               	clrf	0
  4663                           
  4664                           ;main.c: 618:                 id[2] = id[0];
  4665     0A78  0828               	movf	Fill@id^(0+128),w
  4666     0A79  0084               	movwf	4
  4667     0A7A  0800               	movf	0,w
  4668     0A7B  00A5               	movwf	??_Fill^(0+128)
  4669     0A7C  0828               	movf	Fill@id^(0+128),w
  4670     0A7D  3E02               	addlw	2
  4671     0A7E  0084               	movwf	4
  4672     0A7F  0825               	movf	??_Fill^(0+128),w
  4673     0A80  0080               	movwf	0
  4674     0A81                     l3244:
  4675                           
  4676                           ;main.c: 619:                 id[1] = '0';
  4677     0A81  0A28               	incf	Fill@id^(0+128),w
  4678     0A82  0084               	movwf	4
  4679     0A83  3030               	movlw	48
  4680     0A84  0080               	movwf	0
  4681     0A85                     l3246:
  4682                           
  4683                           ;main.c: 620:                 id[0] = '0';
  4684     0A85  0828               	movf	Fill@id^(0+128),w
  4685     0A86  0084               	movwf	4
  4686     0A87  3030               	movlw	48
  4687     0A88  0080               	movwf	0
  4688                           
  4689                           ;main.c: 621:                 break;
  4690     0A89  2AB0               	goto	l265
  4691     0A8A                     l3248:
  4692                           
  4693                           ;main.c: 623:                 id[3] = '\0';
  4694     0A8A  0828               	movf	Fill@id^(0+128),w
  4695     0A8B  3E03               	addlw	3
  4696     0A8C  0084               	movwf	4
  4697     0A8D  1783               	bsf	3,7	;select IRP bank2
  4698     0A8E  0180               	clrf	0
  4699                           
  4700                           ;main.c: 624:                 id[2] = id[1];
  4701     0A8F  0A28               	incf	Fill@id^(0+128),w
  4702     0A90  0084               	movwf	4
  4703     0A91  0800               	movf	0,w
  4704     0A92  00A5               	movwf	??_Fill^(0+128)
  4705     0A93  0828               	movf	Fill@id^(0+128),w
  4706     0A94  3E02               	addlw	2
  4707     0A95  0084               	movwf	4
  4708     0A96  0825               	movf	??_Fill^(0+128),w
  4709     0A97  0080               	movwf	0
  4710     0A98                     l3250:
  4711                           
  4712                           ;main.c: 625:                 id[1] = id[0];
  4713     0A98  0828               	movf	Fill@id^(0+128),w
  4714     0A99  0084               	movwf	4
  4715     0A9A  0800               	movf	0,w
  4716     0A9B  00A5               	movwf	??_Fill^(0+128)
  4717     0A9C  0A28               	incf	Fill@id^(0+128),w
  4718     0A9D  0084               	movwf	4
  4719     0A9E  0825               	movf	??_Fill^(0+128),w
  4720     0A9F  0080               	movwf	0
  4721     0AA0  2A85               	goto	l3246
  4722     0AA1                     l3256:
  4723                           
  4724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4725                           ; Switch size 1, requested type "simple"
  4726                           ; Number of cases is 1, Range of values is 0 to 0
  4727                           ; switch strategies available:
  4728                           ; Name         Instructions Cycles
  4729                           ; simple_byte            4     3 (average)
  4730                           ; direct_byte           11     8 (fixed)
  4731                           ; jumptable            260     6 (fixed)
  4732                           ;	Chosen strategy is simple_byte
  4733     0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  4734     0AA2  1303               	bcf	3,6	;RP1=0, select bank1
  4735     0AA3  0827               	movf	(Fill@length+1)^(0+128),w
  4736     0AA4  3A00               	xorlw	0	; case 0
  4737     0AA5  1903               	skipnz
  4738     0AA6  2AA8               	goto	l3844
  4739     0AA7  2AB0               	goto	l265
  4740     0AA8                     l3844:
  4741                           
  4742                           ; Switch size 1, requested type "simple"
  4743                           ; Number of cases is 2, Range of values is 1 to 2
  4744                           ; switch strategies available:
  4745                           ; Name         Instructions Cycles
  4746                           ; simple_byte            7     4 (average)
  4747                           ; direct_byte           17    11 (fixed)
  4748                           ; jumptable            263     9 (fixed)
  4749                           ;	Chosen strategy is simple_byte
  4750     0AA8  0826               	movf	Fill@length^(0+128),w
  4751     0AA9  3A01               	xorlw	1	; case 1
  4752     0AAA  1903               	skipnz
  4753     0AAB  2A73               	goto	l3242
  4754     0AAC  3A03               	xorlw	3	; case 2
  4755     0AAD  1903               	skipnz
  4756     0AAE  2A8A               	goto	l3248
  4757     0AAF  2AB0               	goto	l265
  4758     0AB0                     l265:
  4759     0AB0  0008               	return
  4760     0AB1                     __end_of_Fill:
  4761                           
  4762                           	psect	text13
  4763     0F26                     __ptext13:	
  4764 ;; *************** function _ConvertToString *****************
  4765 ;; Defined at:
  4766 ;;		line 441 in file "main.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  n               4   55[BANK1 ] long 
  4769 ;;  str             1   59[BANK1 ] PTR unsigned char 
  4770 ;;		 -> main@num_rand_s_228(16), PIC_ID(4), main@num_rand_s(16), 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  temp            2   61[BANK1 ] int 
  4773 ;;  i               2   65[BANK1 ] int 
  4774 ;;  j               2   63[BANK1 ] int 
  4775 ;;  n_cifre         1   67[BANK1 ] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      void 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4785 ;;      Params:         0       0       5       0       0
  4786 ;;      Locals:         0       0       7       0       0
  4787 ;;      Temps:          0       0       1       0       0
  4788 ;;      Totals:         0       0      13       0       0
  4789 ;;Total ram usage:       13 bytes
  4790 ;; Hardware stack levels used: 1
  4791 ;; Hardware stack levels required when called: 6
  4792 ;; This function calls:
  4793 ;;		___aldiv
  4794 ;;		___almod
  4795 ;;		___lmul
  4796 ;;		_pow
  4797 ;; This function is called by:
  4798 ;;		_main
  4799 ;;		_init_PIC
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803     0F26                     _ConvertToString:	
  4804                           ;psect for function _ConvertToString
  4805                           
  4806     0F26                     l3130:	
  4807                           ;incstack = 0
  4808                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4809                           
  4810                           
  4811                           ;main.c: 441: void ConvertToString(long n, char* str);main.c: 442: {;main.c: 445:     in
      +                          t i = 0, j = 0;
  4812     0F26  1683               	bsf	3,5	;RP0=1, select bank1
  4813     0F27  1303               	bcf	3,6	;RP1=0, select bank1
  4814     0F28  01E1               	clrf	ConvertToString@i^(0+128)
  4815     0F29  01E2               	clrf	(ConvertToString@i+1)^(0+128)
  4816     0F2A  01DF               	clrf	ConvertToString@j^(0+128)
  4817     0F2B  01E0               	clrf	(ConvertToString@j+1)^(0+128)
  4818     0F2C                     l3132:
  4819                           
  4820                           ;main.c: 446:     if(n < 0)
  4821     0F2C  1FDA               	btfss	(ConvertToString@n+3)^(0+128),7
  4822     0F2D  2F2F               	goto	u3201
  4823     0F2E  2F30               	goto	u3200
  4824     0F2F                     u3201:
  4825     0F2F  2F58               	goto	l3140
  4826     0F30                     u3200:
  4827     0F30                     l3134:
  4828                           
  4829                           ;main.c: 447:     {;main.c: 448:         i = 1;
  4830     0F30  3001               	movlw	1
  4831     0F31  00E1               	movwf	ConvertToString@i^(0+128)
  4832     0F32  3000               	movlw	0
  4833     0F33  00E2               	movwf	(ConvertToString@i^(0+128)+1)
  4834     0F34                     l3136:
  4835                           
  4836                           ;main.c: 449:         str[0] = '-';
  4837     0F34  085B               	movf	ConvertToString@str^(0+128),w
  4838     0F35  0084               	movwf	4
  4839     0F36  302D               	movlw	45
  4840     0F37  1783               	bsf	3,7	;select IRP bank2
  4841     0F38  0080               	movwf	0
  4842     0F39                     l3138:
  4843                           
  4844                           ;main.c: 450:         n *= -1;
  4845     0F39  30FF               	movlw	255
  4846     0F3A  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  4847     0F3B  30FF               	movlw	255
  4848     0F3C  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  4849     0F3D  30FF               	movlw	255
  4850     0F3E  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  4851     0F3F  30FF               	movlw	255
  4852     0F40  00A0               	movwf	___lmul@multiplier^(0+128)
  4853     0F41  085A               	movf	(ConvertToString@n+3)^(0+128),w
  4854     0F42  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4855     0F43  0859               	movf	(ConvertToString@n+2)^(0+128),w
  4856     0F44  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4857     0F45  0858               	movf	(ConvertToString@n+1)^(0+128),w
  4858     0F46  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4859     0F47  0857               	movf	ConvertToString@n^(0+128),w
  4860     0F48  00A4               	movwf	___lmul@multiplicand^(0+128)
  4861     0F49  120A  158A  2027  120A  158A  	fcall	___lmul
  4862     0F4E  1683               	bsf	3,5	;RP0=1, select bank1
  4863     0F4F  1303               	bcf	3,6	;RP1=0, select bank1
  4864     0F50  0823               	movf	(?___lmul+3)^(0+128),w
  4865     0F51  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  4866     0F52  0822               	movf	(?___lmul+2)^(0+128),w
  4867     0F53  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  4868     0F54  0821               	movf	(?___lmul+1)^(0+128),w
  4869     0F55  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  4870     0F56  0820               	movf	?___lmul^(0+128),w
  4871     0F57  00D7               	movwf	ConvertToString@n^(0+128)
  4872     0F58                     l3140:
  4873                           
  4874                           ;main.c: 453:     char n_cifre = 1;
  4875     0F58  01E3               	clrf	ConvertToString@n_cifre^(0+128)
  4876     0F59  0AE3               	incf	ConvertToString@n_cifre^(0+128),f
  4877                           
  4878                           ;main.c: 455:     while(n / pow(10, n_cifre))
  4879     0F5A  2F5F               	goto	l3144
  4880     0F5B                     l3142:
  4881                           
  4882                           ;main.c: 456:         n_cifre++;
  4883     0F5B  3001               	movlw	1
  4884     0F5C  00DC               	movwf	??_ConvertToString^(0+128)
  4885     0F5D  085C               	movf	??_ConvertToString^(0+128),w
  4886     0F5E  07E3               	addwf	ConvertToString@n_cifre^(0+128),f
  4887     0F5F                     l3144:
  4888                           
  4889                           ;main.c: 455:     while(n / pow(10, n_cifre))
  4890     0F5F  0863               	movf	ConvertToString@n_cifre^(0+128),w
  4891     0F60  00BF               	movwf	pow@exp^(0+128)
  4892     0F61  300A               	movlw	10
  4893     0F62  160A  118A  26AD  120A  158A  	fcall	_pow
  4894     0F67  1683               	bsf	3,5	;RP0=1, select bank1
  4895     0F68  1303               	bcf	3,6	;RP1=0, select bank1
  4896     0F69  083F               	movf	?_pow^(0+128),w
  4897     0F6A  00C8               	movwf	___aldiv@divisor^(0+128)
  4898     0F6B  0840               	movf	(?_pow+1)^(0+128),w
  4899     0F6C  00C9               	movwf	(___aldiv@divisor+1)^(0+128)
  4900     0F6D  3000               	movlw	0
  4901     0F6E  1BC9               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4902     0F6F  30FF               	movlw	255
  4903     0F70  00CA               	movwf	(___aldiv@divisor+2)^(0+128)
  4904     0F71  00CB               	movwf	(___aldiv@divisor+3)^(0+128)
  4905     0F72  085A               	movf	(ConvertToString@n+3)^(0+128),w
  4906     0F73  00CF               	movwf	(___aldiv@dividend+3)^(0+128)
  4907     0F74  0859               	movf	(ConvertToString@n+2)^(0+128),w
  4908     0F75  00CE               	movwf	(___aldiv@dividend+2)^(0+128)
  4909     0F76  0858               	movf	(ConvertToString@n+1)^(0+128),w
  4910     0F77  00CD               	movwf	(___aldiv@dividend+1)^(0+128)
  4911     0F78  0857               	movf	ConvertToString@n^(0+128),w
  4912     0F79  00CC               	movwf	___aldiv@dividend^(0+128)
  4913     0F7A  120A  158A  2689  120A  158A  	fcall	___aldiv
  4914     0F7F  1683               	bsf	3,5	;RP0=1, select bank1
  4915     0F80  1303               	bcf	3,6	;RP1=0, select bank1
  4916     0F81  084B               	movf	(?___aldiv+3)^(0+128),w
  4917     0F82  044A               	iorwf	(?___aldiv+2)^(0+128),w
  4918     0F83  0449               	iorwf	(?___aldiv+1)^(0+128),w
  4919     0F84  0448               	iorwf	?___aldiv^(0+128),w
  4920     0F85  1D03               	skipz
  4921     0F86  2F88               	goto	u3211
  4922     0F87  2F89               	goto	u3210
  4923     0F88                     u3211:
  4924     0F88  2F5B               	goto	l3142
  4925     0F89                     u3210:
  4926     0F89  2FE9               	goto	l3156
  4927     0F8A                     l3146:
  4928                           
  4929                           ;main.c: 459:     {;main.c: 460:         int temp = pow(10, (char)(n_cifre - 1 - j));
  4930     0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  4931     0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  4932     0F8C  085F               	movf	ConvertToString@j^(0+128),w
  4933     0F8D  0263               	subwf	ConvertToString@n_cifre^(0+128),w
  4934     0F8E  3EFF               	addlw	255
  4935     0F8F  00BF               	movwf	pow@exp^(0+128)
  4936     0F90  300A               	movlw	10
  4937     0F91  160A  118A  26AD  120A  158A  	fcall	_pow
  4938     0F96  1683               	bsf	3,5	;RP0=1, select bank1
  4939     0F97  1303               	bcf	3,6	;RP1=0, select bank1
  4940     0F98  0840               	movf	(?_pow+1)^(0+128),w
  4941     0F99  00DE               	movwf	(ConvertToString@temp+1)^(0+128)
  4942     0F9A  083F               	movf	?_pow^(0+128),w
  4943     0F9B  00DD               	movwf	ConvertToString@temp^(0+128)
  4944     0F9C                     l3148:
  4945                           
  4946                           ;main.c: 462:         str[i] = (char)(n/temp) + '0';
  4947     0F9C  0861               	movf	ConvertToString@i^(0+128),w
  4948     0F9D  075B               	addwf	ConvertToString@str^(0+128),w
  4949     0F9E  00DC               	movwf	??_ConvertToString^(0+128)
  4950     0F9F  085C               	movf	??_ConvertToString^(0+128),w
  4951     0FA0  0084               	movwf	4
  4952     0FA1  085D               	movf	ConvertToString@temp^(0+128),w
  4953     0FA2  00C8               	movwf	___aldiv@divisor^(0+128)
  4954     0FA3  085E               	movf	(ConvertToString@temp+1)^(0+128),w
  4955     0FA4  00C9               	movwf	(___aldiv@divisor+1)^(0+128)
  4956     0FA5  3000               	movlw	0
  4957     0FA6  1BC9               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4958     0FA7  30FF               	movlw	255
  4959     0FA8  00CA               	movwf	(___aldiv@divisor+2)^(0+128)
  4960     0FA9  00CB               	movwf	(___aldiv@divisor+3)^(0+128)
  4961     0FAA  085A               	movf	(ConvertToString@n+3)^(0+128),w
  4962     0FAB  00CF               	movwf	(___aldiv@dividend+3)^(0+128)
  4963     0FAC  0859               	movf	(ConvertToString@n+2)^(0+128),w
  4964     0FAD  00CE               	movwf	(___aldiv@dividend+2)^(0+128)
  4965     0FAE  0858               	movf	(ConvertToString@n+1)^(0+128),w
  4966     0FAF  00CD               	movwf	(___aldiv@dividend+1)^(0+128)
  4967     0FB0  0857               	movf	ConvertToString@n^(0+128),w
  4968     0FB1  00CC               	movwf	___aldiv@dividend^(0+128)
  4969     0FB2  120A  158A  2689  120A  158A  	fcall	___aldiv
  4970     0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  4971     0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  4972     0FB9  0848               	movf	?___aldiv^(0+128),w
  4973     0FBA  3E30               	addlw	48
  4974     0FBB  1783               	bsf	3,7	;select IRP bank2
  4975     0FBC  0080               	movwf	0
  4976     0FBD                     l3150:
  4977                           
  4978                           ;main.c: 464:         n = n % temp;
  4979     0FBD  085D               	movf	ConvertToString@temp^(0+128),w
  4980     0FBE  00A0               	movwf	___almod@divisor^(0+128)
  4981     0FBF  085E               	movf	(ConvertToString@temp+1)^(0+128),w
  4982     0FC0  00A1               	movwf	(___almod@divisor+1)^(0+128)
  4983     0FC1  3000               	movlw	0
  4984     0FC2  1BA1               	btfsc	(___almod@divisor+1)^(0+128),7
  4985     0FC3  30FF               	movlw	255
  4986     0FC4  00A2               	movwf	(___almod@divisor+2)^(0+128)
  4987     0FC5  00A3               	movwf	(___almod@divisor+3)^(0+128)
  4988     0FC6  085A               	movf	(ConvertToString@n+3)^(0+128),w
  4989     0FC7  00A7               	movwf	(___almod@dividend+3)^(0+128)
  4990     0FC8  0859               	movf	(ConvertToString@n+2)^(0+128),w
  4991     0FC9  00A6               	movwf	(___almod@dividend+2)^(0+128)
  4992     0FCA  0858               	movf	(ConvertToString@n+1)^(0+128),w
  4993     0FCB  00A5               	movwf	(___almod@dividend+1)^(0+128)
  4994     0FCC  0857               	movf	ConvertToString@n^(0+128),w
  4995     0FCD  00A4               	movwf	___almod@dividend^(0+128)
  4996     0FCE  120A  158A  25FA  120A  158A  	fcall	___almod
  4997     0FD3  1683               	bsf	3,5	;RP0=1, select bank1
  4998     0FD4  1303               	bcf	3,6	;RP1=0, select bank1
  4999     0FD5  0823               	movf	(?___almod+3)^(0+128),w
  5000     0FD6  00DA               	movwf	(ConvertToString@n+3)^(0+128)
  5001     0FD7  0822               	movf	(?___almod+2)^(0+128),w
  5002     0FD8  00D9               	movwf	(ConvertToString@n+2)^(0+128)
  5003     0FD9  0821               	movf	(?___almod+1)^(0+128),w
  5004     0FDA  00D8               	movwf	(ConvertToString@n+1)^(0+128)
  5005     0FDB  0820               	movf	?___almod^(0+128),w
  5006     0FDC  00D7               	movwf	ConvertToString@n^(0+128)
  5007     0FDD                     l3152:
  5008                           
  5009                           ;main.c: 465:         i++;
  5010     0FDD  3001               	movlw	1
  5011     0FDE  07E1               	addwf	ConvertToString@i^(0+128),f
  5012     0FDF  1803               	skipnc
  5013     0FE0  0AE2               	incf	(ConvertToString@i+1)^(0+128),f
  5014     0FE1  3000               	movlw	0
  5015     0FE2  07E2               	addwf	(ConvertToString@i+1)^(0+128),f
  5016     0FE3                     l3154:
  5017                           
  5018                           ;main.c: 466:         j++;
  5019     0FE3  3001               	movlw	1
  5020     0FE4  07DF               	addwf	ConvertToString@j^(0+128),f
  5021     0FE5  1803               	skipnc
  5022     0FE6  0AE0               	incf	(ConvertToString@j+1)^(0+128),f
  5023     0FE7  3000               	movlw	0
  5024     0FE8  07E0               	addwf	(ConvertToString@j+1)^(0+128),f
  5025     0FE9                     l3156:
  5026                           
  5027                           ;main.c: 458:     while(j < n_cifre)
  5028     0FE9  0860               	movf	(ConvertToString@j+1)^(0+128),w
  5029     0FEA  3A80               	xorlw	128
  5030     0FEB  00DC               	movwf	??_ConvertToString^(0+128)
  5031     0FEC  3080               	movlw	128
  5032     0FED  025C               	subwf	??_ConvertToString^(0+128),w
  5033     0FEE  1D03               	skipz
  5034     0FEF  2FF2               	goto	u3225
  5035     0FF0  0863               	movf	ConvertToString@n_cifre^(0+128),w
  5036     0FF1  025F               	subwf	ConvertToString@j^(0+128),w
  5037     0FF2                     u3225:
  5038     0FF2  1C03               	skipc
  5039     0FF3  2FF5               	goto	u3221
  5040     0FF4  2FF6               	goto	u3220
  5041     0FF5                     u3221:
  5042     0FF5  2F8A               	goto	l3146
  5043     0FF6                     u3220:
  5044     0FF6                     l3158:
  5045                           
  5046                           ;main.c: 469:     str[i] = '\0';
  5047     0FF6  1683               	bsf	3,5	;RP0=1, select bank1
  5048     0FF7  1303               	bcf	3,6	;RP1=0, select bank1
  5049     0FF8  0861               	movf	ConvertToString@i^(0+128),w
  5050     0FF9  075B               	addwf	ConvertToString@str^(0+128),w
  5051     0FFA  00DC               	movwf	??_ConvertToString^(0+128)
  5052     0FFB  085C               	movf	??_ConvertToString^(0+128),w
  5053     0FFC  0084               	movwf	4
  5054     0FFD  1783               	bsf	3,7	;select IRP bank2
  5055     0FFE  0180               	clrf	0
  5056     0FFF                     l209:
  5057     0FFF  0008               	return
  5058     1000                     __end_of_ConvertToString:
  5059                           
  5060                           	psect	text14
  5061     16AD                     __ptext14:	
  5062 ;; *************** function _pow *****************
  5063 ;; Defined at:
  5064 ;;		line 430 in file "main.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  b               1    wreg     unsigned char 
  5067 ;;  exp             1   31[BANK1 ] unsigned char 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  b               1   35[BANK1 ] unsigned char 
  5070 ;;  i               2   36[BANK1 ] int 
  5071 ;;  n               2   38[BANK1 ] int 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  2   31[BANK1 ] int 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0, pclath, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5081 ;;      Params:         0       0       2       0       0
  5082 ;;      Locals:         0       0       5       0       0
  5083 ;;      Temps:          0       0       2       0       0
  5084 ;;      Totals:         0       0       9       0       0
  5085 ;;Total ram usage:        9 bytes
  5086 ;; Hardware stack levels used: 1
  5087 ;; Hardware stack levels required when called: 5
  5088 ;; This function calls:
  5089 ;;		___wmul
  5090 ;; This function is called by:
  5091 ;;		_ConvertToString
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095     16AD                     _pow:	
  5096                           ;psect for function _pow
  5097                           
  5098                           
  5099                           ;incstack = 0
  5100                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  5101                           ;pow@b stored from wreg
  5102     16AD  1683               	bsf	3,5	;RP0=1, select bank1
  5103     16AE  1303               	bcf	3,6	;RP1=0, select bank1
  5104     16AF  00C3               	movwf	pow@b^(0+128)
  5105     16B0                     l3012:
  5106                           
  5107                           ;main.c: 430: int pow(char b, char exp);main.c: 431: {;main.c: 432:     int n = 1;
  5108     16B0  3001               	movlw	1
  5109     16B1  00C6               	movwf	pow@n^(0+128)
  5110     16B2  3000               	movlw	0
  5111     16B3  00C7               	movwf	(pow@n^(0+128)+1)
  5112     16B4                     l3014:
  5113                           
  5114                           ;main.c: 433:     for(int i = 0; i < exp; i++)
  5115     16B4  01C4               	clrf	pow@i^(0+128)
  5116     16B5  01C5               	clrf	(pow@i+1)^(0+128)
  5117     16B6  2ED5               	goto	l3020
  5118     16B7                     l3016:
  5119                           
  5120                           ;main.c: 434:     {;main.c: 435:         n *= b;
  5121     16B7  1683               	bsf	3,5	;RP0=1, select bank1
  5122     16B8  1303               	bcf	3,6	;RP1=0, select bank1
  5123     16B9  0843               	movf	pow@b^(0+128),w
  5124     16BA  00C1               	movwf	??_pow^(0+128)
  5125     16BB  01C2               	clrf	(??_pow^(0+128)+1)
  5126     16BC  0841               	movf	??_pow^(0+128),w
  5127     16BD  00B9               	movwf	___wmul@multiplier^(0+128)
  5128     16BE  0842               	movf	(??_pow+1)^(0+128),w
  5129     16BF  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  5130     16C0  0847               	movf	(pow@n+1)^(0+128),w
  5131     16C1  00BC               	movwf	(___wmul@multiplicand+1)^(0+128)
  5132     16C2  0846               	movf	pow@n^(0+128),w
  5133     16C3  00BB               	movwf	___wmul@multiplicand^(0+128)
  5134     16C4  160A  118A  25EC  160A  118A  	fcall	___wmul
  5135     16C9  1683               	bsf	3,5	;RP0=1, select bank1
  5136     16CA  1303               	bcf	3,6	;RP1=0, select bank1
  5137     16CB  083A               	movf	(?___wmul+1)^(0+128),w
  5138     16CC  00C7               	movwf	(pow@n+1)^(0+128)
  5139     16CD  0839               	movf	?___wmul^(0+128),w
  5140     16CE  00C6               	movwf	pow@n^(0+128)
  5141     16CF                     l3018:
  5142                           
  5143                           ;main.c: 436:     }
  5144     16CF  3001               	movlw	1
  5145     16D0  07C4               	addwf	pow@i^(0+128),f
  5146     16D1  1803               	skipnc
  5147     16D2  0AC5               	incf	(pow@i+1)^(0+128),f
  5148     16D3  3000               	movlw	0
  5149     16D4  07C5               	addwf	(pow@i+1)^(0+128),f
  5150     16D5                     l3020:
  5151     16D5  0845               	movf	(pow@i+1)^(0+128),w
  5152     16D6  3A80               	xorlw	128
  5153     16D7  00C1               	movwf	??_pow^(0+128)
  5154     16D8  3080               	movlw	128
  5155     16D9  0241               	subwf	??_pow^(0+128),w
  5156     16DA  1D03               	skipz
  5157     16DB  2EDE               	goto	u2905
  5158     16DC  083F               	movf	pow@exp^(0+128),w
  5159     16DD  0244               	subwf	pow@i^(0+128),w
  5160     16DE                     u2905:
  5161     16DE  1C03               	skipc
  5162     16DF  2EE1               	goto	u2901
  5163     16E0  2EE2               	goto	u2900
  5164     16E1                     u2901:
  5165     16E1  2EB7               	goto	l3016
  5166     16E2                     u2900:
  5167     16E2                     l3022:
  5168                           
  5169                           ;main.c: 437:     return n;
  5170     16E2  1683               	bsf	3,5	;RP0=1, select bank1
  5171     16E3  1303               	bcf	3,6	;RP1=0, select bank1
  5172     16E4  0847               	movf	(pow@n+1)^(0+128),w
  5173     16E5  00C0               	movwf	(?_pow+1)^(0+128)
  5174     16E6  0846               	movf	pow@n^(0+128),w
  5175     16E7  00BF               	movwf	?_pow^(0+128)
  5176     16E8                     l199:
  5177     16E8  0008               	return
  5178     16E9                     __end_of_pow:
  5179                           
  5180                           	psect	text15
  5181     0DFA                     __ptext15:	
  5182 ;; *************** function ___almod *****************
  5183 ;; Defined at:
  5184 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  divisor         4    0[BANK1 ] long 
  5187 ;;  dividend        4    4[BANK1 ] long 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  sign            1    9[BANK1 ] unsigned char 
  5190 ;;  counter         1    8[BANK1 ] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  4    0[BANK1 ] long 
  5193 ;; Registers used:
  5194 ;;		wreg, status,2, status,0
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5200 ;;      Params:         0       0       8       0       0
  5201 ;;      Locals:         0       0       2       0       0
  5202 ;;      Temps:          0       1       0       0       0
  5203 ;;      Totals:         0       1      10       0       0
  5204 ;;Total ram usage:       11 bytes
  5205 ;; Hardware stack levels used: 1
  5206 ;; Hardware stack levels required when called: 4
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_ConvertToString
  5211 ;; This function uses a non-reentrant model
  5212 ;;
  5213                           
  5214     0DFA                     ___almod:	
  5215                           ;psect for function ___almod
  5216                           
  5217     0DFA                     l3090:	
  5218                           ;incstack = 0
  5219                           ; Regs used in ___almod: [wreg+status,2+status,0]
  5220                           
  5221     0DFA  1683               	bsf	3,5	;RP0=1, select bank1
  5222     0DFB  1303               	bcf	3,6	;RP1=0, select bank1
  5223     0DFC  01A9               	clrf	___almod@sign^(0+128)
  5224     0DFD                     l3092:
  5225     0DFD  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  5226     0DFE  2E00               	goto	u3081
  5227     0DFF  2E01               	goto	u3080
  5228     0E00                     u3081:
  5229     0E00  2E0E               	goto	l530
  5230     0E01                     u3080:
  5231     0E01                     l3094:
  5232     0E01  09A4               	comf	___almod@dividend^(0+128),f
  5233     0E02  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5234     0E03  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5235     0E04  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5236     0E05  0AA4               	incf	___almod@dividend^(0+128),f
  5237     0E06  1903               	skipnz
  5238     0E07  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5239     0E08  1903               	skipnz
  5240     0E09  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5241     0E0A  1903               	skipnz
  5242     0E0B  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5243     0E0C  01A9               	clrf	___almod@sign^(0+128)
  5244     0E0D  0AA9               	incf	___almod@sign^(0+128),f
  5245     0E0E                     l530:
  5246     0E0E  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5247     0E0F  2E11               	goto	u3091
  5248     0E10  2E12               	goto	u3090
  5249     0E11                     u3091:
  5250     0E11  2E1D               	goto	l3098
  5251     0E12                     u3090:
  5252     0E12                     l3096:
  5253     0E12  09A0               	comf	___almod@divisor^(0+128),f
  5254     0E13  09A1               	comf	(___almod@divisor+1)^(0+128),f
  5255     0E14  09A2               	comf	(___almod@divisor+2)^(0+128),f
  5256     0E15  09A3               	comf	(___almod@divisor+3)^(0+128),f
  5257     0E16  0AA0               	incf	___almod@divisor^(0+128),f
  5258     0E17  1903               	skipnz
  5259     0E18  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  5260     0E19  1903               	skipnz
  5261     0E1A  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  5262     0E1B  1903               	skipnz
  5263     0E1C  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  5264     0E1D                     l3098:
  5265     0E1D  0823               	movf	(___almod@divisor+3)^(0+128),w
  5266     0E1E  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  5267     0E1F  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  5268     0E20  0420               	iorwf	___almod@divisor^(0+128),w
  5269     0E21  1903               	skipnz
  5270     0E22  2E24               	goto	u3101
  5271     0E23  2E25               	goto	u3100
  5272     0E24                     u3101:
  5273     0E24  2E70               	goto	l3114
  5274     0E25                     u3100:
  5275     0E25                     l3100:
  5276     0E25  01A8               	clrf	___almod@counter^(0+128)
  5277     0E26  0AA8               	incf	___almod@counter^(0+128),f
  5278     0E27  2E3D               	goto	l3104
  5279     0E28                     l3102:
  5280     0E28  3001               	movlw	1
  5281     0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5282     0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5283     0E2B  00BC               	movwf	??___almod
  5284     0E2C                     u3115:
  5285     0E2C  1003               	clrc
  5286     0E2D  1683               	bsf	3,5	;RP0=1, select bank1
  5287     0E2E  1303               	bcf	3,6	;RP1=0, select bank1
  5288     0E2F  0DA0               	rlf	___almod@divisor^(0+128),f
  5289     0E30  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  5290     0E31  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  5291     0E32  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  5292     0E33  1283               	bcf	3,5	;RP0=0, select bank0
  5293     0E34  1303               	bcf	3,6	;RP1=0, select bank0
  5294     0E35  0BBC               	decfsz	??___almod,f
  5295     0E36  2E2C               	goto	u3115
  5296     0E37  3001               	movlw	1
  5297     0E38  00BC               	movwf	??___almod
  5298     0E39  083C               	movf	??___almod,w
  5299     0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  5300     0E3B  1303               	bcf	3,6	;RP1=0, select bank1
  5301     0E3C  07A8               	addwf	___almod@counter^(0+128),f
  5302     0E3D                     l3104:
  5303     0E3D  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5304     0E3E  2E40               	goto	u3121
  5305     0E3F  2E41               	goto	u3120
  5306     0E40                     u3121:
  5307     0E40  2E28               	goto	l3102
  5308     0E41                     u3120:
  5309     0E41                     l3106:
  5310     0E41  0823               	movf	(___almod@divisor+3)^(0+128),w
  5311     0E42  0227               	subwf	(___almod@dividend+3)^(0+128),w
  5312     0E43  1D03               	skipz
  5313     0E44  2E4F               	goto	u3135
  5314     0E45  0822               	movf	(___almod@divisor+2)^(0+128),w
  5315     0E46  0226               	subwf	(___almod@dividend+2)^(0+128),w
  5316     0E47  1D03               	skipz
  5317     0E48  2E4F               	goto	u3135
  5318     0E49  0821               	movf	(___almod@divisor+1)^(0+128),w
  5319     0E4A  0225               	subwf	(___almod@dividend+1)^(0+128),w
  5320     0E4B  1D03               	skipz
  5321     0E4C  2E4F               	goto	u3135
  5322     0E4D  0820               	movf	___almod@divisor^(0+128),w
  5323     0E4E  0224               	subwf	___almod@dividend^(0+128),w
  5324     0E4F                     u3135:
  5325     0E4F  1C03               	skipc
  5326     0E50  2E52               	goto	u3131
  5327     0E51  2E53               	goto	u3130
  5328     0E52                     u3131:
  5329     0E52  2E61               	goto	l3110
  5330     0E53                     u3130:
  5331     0E53                     l3108:
  5332     0E53  0820               	movf	___almod@divisor^(0+128),w
  5333     0E54  02A4               	subwf	___almod@dividend^(0+128),f
  5334     0E55  0821               	movf	(___almod@divisor+1)^(0+128),w
  5335     0E56  1C03               	skipc
  5336     0E57  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  5337     0E58  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  5338     0E59  0822               	movf	(___almod@divisor+2)^(0+128),w
  5339     0E5A  1C03               	skipc
  5340     0E5B  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  5341     0E5C  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  5342     0E5D  0823               	movf	(___almod@divisor+3)^(0+128),w
  5343     0E5E  1C03               	skipc
  5344     0E5F  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  5345     0E60  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  5346     0E61                     l3110:
  5347     0E61  3001               	movlw	1
  5348     0E62                     u3145:
  5349     0E62  1003               	clrc
  5350     0E63  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  5351     0E64  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  5352     0E65  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  5353     0E66  0CA0               	rrf	___almod@divisor^(0+128),f
  5354     0E67  3EFF               	addlw	-1
  5355     0E68  1D03               	skipz
  5356     0E69  2E62               	goto	u3145
  5357     0E6A                     l3112:
  5358     0E6A  3001               	movlw	1
  5359     0E6B  02A8               	subwf	___almod@counter^(0+128),f
  5360     0E6C  1D03               	btfss	3,2
  5361     0E6D  2E6F               	goto	u3151
  5362     0E6E  2E70               	goto	u3150
  5363     0E6F                     u3151:
  5364     0E6F  2E41               	goto	l3106
  5365     0E70                     u3150:
  5366     0E70                     l3114:
  5367     0E70  0829               	movf	___almod@sign^(0+128),w
  5368     0E71  1903               	btfsc	3,2
  5369     0E72  2E74               	goto	u3161
  5370     0E73  2E75               	goto	u3160
  5371     0E74                     u3161:
  5372     0E74  2E80               	goto	l3118
  5373     0E75                     u3160:
  5374     0E75                     l3116:
  5375     0E75  09A4               	comf	___almod@dividend^(0+128),f
  5376     0E76  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5377     0E77  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5378     0E78  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5379     0E79  0AA4               	incf	___almod@dividend^(0+128),f
  5380     0E7A  1903               	skipnz
  5381     0E7B  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5382     0E7C  1903               	skipnz
  5383     0E7D  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5384     0E7E  1903               	skipnz
  5385     0E7F  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5386     0E80                     l3118:
  5387     0E80  0827               	movf	(___almod@dividend+3)^(0+128),w
  5388     0E81  00A3               	movwf	(?___almod+3)^(0+128)
  5389     0E82  0826               	movf	(___almod@dividend+2)^(0+128),w
  5390     0E83  00A2               	movwf	(?___almod+2)^(0+128)
  5391     0E84  0825               	movf	(___almod@dividend+1)^(0+128),w
  5392     0E85  00A1               	movwf	(?___almod+1)^(0+128)
  5393     0E86  0824               	movf	___almod@dividend^(0+128),w
  5394     0E87  00A0               	movwf	?___almod^(0+128)
  5395     0E88                     l540:
  5396     0E88  0008               	return
  5397     0E89                     __end_of___almod:
  5398                           
  5399                           	psect	text16
  5400     0E89                     __ptext16:	
  5401 ;; *************** function ___aldiv *****************
  5402 ;; Defined at:
  5403 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  divisor         4   40[BANK1 ] long 
  5406 ;;  dividend        4   44[BANK1 ] long 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;  quotient        4   51[BANK1 ] long 
  5409 ;;  sign            1   50[BANK1 ] unsigned char 
  5410 ;;  counter         1   49[BANK1 ] unsigned char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  4   40[BANK1 ] long 
  5413 ;; Registers used:
  5414 ;;		wreg, status,2, status,0
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5420 ;;      Params:         0       0       8       0       0
  5421 ;;      Locals:         0       0       6       0       0
  5422 ;;      Temps:          0       0       1       0       0
  5423 ;;      Totals:         0       0      15       0       0
  5424 ;;Total ram usage:       15 bytes
  5425 ;; Hardware stack levels used: 1
  5426 ;; Hardware stack levels required when called: 4
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_ConvertToString
  5431 ;;		_UART_init
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435     0E89                     ___aldiv:	
  5436                           ;psect for function ___aldiv
  5437                           
  5438     0E89                     l3050:	
  5439                           ;incstack = 0
  5440                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5441                           
  5442     0E89  1683               	bsf	3,5	;RP0=1, select bank1
  5443     0E8A  1303               	bcf	3,6	;RP1=0, select bank1
  5444     0E8B  01D2               	clrf	___aldiv@sign^(0+128)
  5445     0E8C                     l3052:
  5446     0E8C  1FCB               	btfss	(___aldiv@divisor+3)^(0+128),7
  5447     0E8D  2E8F               	goto	u2981
  5448     0E8E  2E90               	goto	u2980
  5449     0E8F                     u2981:
  5450     0E8F  2E9D               	goto	l517
  5451     0E90                     u2980:
  5452     0E90                     l3054:
  5453     0E90  09C8               	comf	___aldiv@divisor^(0+128),f
  5454     0E91  09C9               	comf	(___aldiv@divisor+1)^(0+128),f
  5455     0E92  09CA               	comf	(___aldiv@divisor+2)^(0+128),f
  5456     0E93  09CB               	comf	(___aldiv@divisor+3)^(0+128),f
  5457     0E94  0AC8               	incf	___aldiv@divisor^(0+128),f
  5458     0E95  1903               	skipnz
  5459     0E96  0AC9               	incf	(___aldiv@divisor+1)^(0+128),f
  5460     0E97  1903               	skipnz
  5461     0E98  0ACA               	incf	(___aldiv@divisor+2)^(0+128),f
  5462     0E99  1903               	skipnz
  5463     0E9A  0ACB               	incf	(___aldiv@divisor+3)^(0+128),f
  5464     0E9B  01D2               	clrf	___aldiv@sign^(0+128)
  5465     0E9C  0AD2               	incf	___aldiv@sign^(0+128),f
  5466     0E9D                     l517:
  5467     0E9D  1FCF               	btfss	(___aldiv@dividend+3)^(0+128),7
  5468     0E9E  2EA0               	goto	u2991
  5469     0E9F  2EA1               	goto	u2990
  5470     0EA0                     u2991:
  5471     0EA0  2EB0               	goto	l3060
  5472     0EA1                     u2990:
  5473     0EA1                     l3056:
  5474     0EA1  09CC               	comf	___aldiv@dividend^(0+128),f
  5475     0EA2  09CD               	comf	(___aldiv@dividend+1)^(0+128),f
  5476     0EA3  09CE               	comf	(___aldiv@dividend+2)^(0+128),f
  5477     0EA4  09CF               	comf	(___aldiv@dividend+3)^(0+128),f
  5478     0EA5  0ACC               	incf	___aldiv@dividend^(0+128),f
  5479     0EA6  1903               	skipnz
  5480     0EA7  0ACD               	incf	(___aldiv@dividend+1)^(0+128),f
  5481     0EA8  1903               	skipnz
  5482     0EA9  0ACE               	incf	(___aldiv@dividend+2)^(0+128),f
  5483     0EAA  1903               	skipnz
  5484     0EAB  0ACF               	incf	(___aldiv@dividend+3)^(0+128),f
  5485     0EAC                     l3058:
  5486     0EAC  3001               	movlw	1
  5487     0EAD  00D0               	movwf	??___aldiv^(0+128)
  5488     0EAE  0850               	movf	??___aldiv^(0+128),w
  5489     0EAF  06D2               	xorwf	___aldiv@sign^(0+128),f
  5490     0EB0                     l3060:
  5491     0EB0  3000               	movlw	0
  5492     0EB1  00D6               	movwf	(___aldiv@quotient+3)^(0+128)
  5493     0EB2  3000               	movlw	0
  5494     0EB3  00D5               	movwf	(___aldiv@quotient+2)^(0+128)
  5495     0EB4  3000               	movlw	0
  5496     0EB5  00D4               	movwf	(___aldiv@quotient+1)^(0+128)
  5497     0EB6  3000               	movlw	0
  5498     0EB7  00D3               	movwf	___aldiv@quotient^(0+128)
  5499     0EB8                     l3062:
  5500     0EB8  084B               	movf	(___aldiv@divisor+3)^(0+128),w
  5501     0EB9  044A               	iorwf	(___aldiv@divisor+2)^(0+128),w
  5502     0EBA  0449               	iorwf	(___aldiv@divisor+1)^(0+128),w
  5503     0EBB  0448               	iorwf	___aldiv@divisor^(0+128),w
  5504     0EBC  1903               	skipnz
  5505     0EBD  2EBF               	goto	u3001
  5506     0EBE  2EC0               	goto	u3000
  5507     0EBF                     u3001:
  5508     0EBF  2F0D               	goto	l3082
  5509     0EC0                     u3000:
  5510     0EC0                     l3064:
  5511     0EC0  01D1               	clrf	___aldiv@counter^(0+128)
  5512     0EC1  0AD1               	incf	___aldiv@counter^(0+128),f
  5513     0EC2  2ED0               	goto	l3068
  5514     0EC3                     l3066:
  5515     0EC3  3001               	movlw	1
  5516     0EC4  00D0               	movwf	??___aldiv^(0+128)
  5517     0EC5                     u3015:
  5518     0EC5  1003               	clrc
  5519     0EC6  0DC8               	rlf	___aldiv@divisor^(0+128),f
  5520     0EC7  0DC9               	rlf	(___aldiv@divisor+1)^(0+128),f
  5521     0EC8  0DCA               	rlf	(___aldiv@divisor+2)^(0+128),f
  5522     0EC9  0DCB               	rlf	(___aldiv@divisor+3)^(0+128),f
  5523     0ECA  0BD0               	decfsz	??___aldiv^(0+128),f
  5524     0ECB  2EC5               	goto	u3015
  5525     0ECC  3001               	movlw	1
  5526     0ECD  00D0               	movwf	??___aldiv^(0+128)
  5527     0ECE  0850               	movf	??___aldiv^(0+128),w
  5528     0ECF  07D1               	addwf	___aldiv@counter^(0+128),f
  5529     0ED0                     l3068:
  5530     0ED0  1FCB               	btfss	(___aldiv@divisor+3)^(0+128),7
  5531     0ED1  2ED3               	goto	u3021
  5532     0ED2  2ED4               	goto	u3020
  5533     0ED3                     u3021:
  5534     0ED3  2EC3               	goto	l3066
  5535     0ED4                     u3020:
  5536     0ED4                     l3070:
  5537     0ED4  3001               	movlw	1
  5538     0ED5  00D0               	movwf	??___aldiv^(0+128)
  5539     0ED6                     u3035:
  5540     0ED6  1003               	clrc
  5541     0ED7  0DD3               	rlf	___aldiv@quotient^(0+128),f
  5542     0ED8  0DD4               	rlf	(___aldiv@quotient+1)^(0+128),f
  5543     0ED9  0DD5               	rlf	(___aldiv@quotient+2)^(0+128),f
  5544     0EDA  0DD6               	rlf	(___aldiv@quotient+3)^(0+128),f
  5545     0EDB  0BD0               	decfsz	??___aldiv^(0+128),f
  5546     0EDC  2ED6               	goto	u3035
  5547     0EDD                     l3072:
  5548     0EDD  084B               	movf	(___aldiv@divisor+3)^(0+128),w
  5549     0EDE  024F               	subwf	(___aldiv@dividend+3)^(0+128),w
  5550     0EDF  1D03               	skipz
  5551     0EE0  2EEB               	goto	u3045
  5552     0EE1  084A               	movf	(___aldiv@divisor+2)^(0+128),w
  5553     0EE2  024E               	subwf	(___aldiv@dividend+2)^(0+128),w
  5554     0EE3  1D03               	skipz
  5555     0EE4  2EEB               	goto	u3045
  5556     0EE5  0849               	movf	(___aldiv@divisor+1)^(0+128),w
  5557     0EE6  024D               	subwf	(___aldiv@dividend+1)^(0+128),w
  5558     0EE7  1D03               	skipz
  5559     0EE8  2EEB               	goto	u3045
  5560     0EE9  0848               	movf	___aldiv@divisor^(0+128),w
  5561     0EEA  024C               	subwf	___aldiv@dividend^(0+128),w
  5562     0EEB                     u3045:
  5563     0EEB  1C03               	skipc
  5564     0EEC  2EEE               	goto	u3041
  5565     0EED  2EEF               	goto	u3040
  5566     0EEE                     u3041:
  5567     0EEE  2EFE               	goto	l3078
  5568     0EEF                     u3040:
  5569     0EEF                     l3074:
  5570     0EEF  0848               	movf	___aldiv@divisor^(0+128),w
  5571     0EF0  02CC               	subwf	___aldiv@dividend^(0+128),f
  5572     0EF1  0849               	movf	(___aldiv@divisor+1)^(0+128),w
  5573     0EF2  1C03               	skipc
  5574     0EF3  0F49               	incfsz	(___aldiv@divisor+1)^(0+128),w
  5575     0EF4  02CD               	subwf	(___aldiv@dividend+1)^(0+128),f
  5576     0EF5  084A               	movf	(___aldiv@divisor+2)^(0+128),w
  5577     0EF6  1C03               	skipc
  5578     0EF7  0F4A               	incfsz	(___aldiv@divisor+2)^(0+128),w
  5579     0EF8  02CE               	subwf	(___aldiv@dividend+2)^(0+128),f
  5580     0EF9  084B               	movf	(___aldiv@divisor+3)^(0+128),w
  5581     0EFA  1C03               	skipc
  5582     0EFB  0F4B               	incfsz	(___aldiv@divisor+3)^(0+128),w
  5583     0EFC  02CF               	subwf	(___aldiv@dividend+3)^(0+128),f
  5584     0EFD                     l3076:
  5585     0EFD  1453               	bsf	___aldiv@quotient^(0+128),0
  5586     0EFE                     l3078:
  5587     0EFE  3001               	movlw	1
  5588     0EFF                     u3055:
  5589     0EFF  1003               	clrc
  5590     0F00  0CCB               	rrf	(___aldiv@divisor+3)^(0+128),f
  5591     0F01  0CCA               	rrf	(___aldiv@divisor+2)^(0+128),f
  5592     0F02  0CC9               	rrf	(___aldiv@divisor+1)^(0+128),f
  5593     0F03  0CC8               	rrf	___aldiv@divisor^(0+128),f
  5594     0F04  3EFF               	addlw	-1
  5595     0F05  1D03               	skipz
  5596     0F06  2EFF               	goto	u3055
  5597     0F07                     l3080:
  5598     0F07  3001               	movlw	1
  5599     0F08  02D1               	subwf	___aldiv@counter^(0+128),f
  5600     0F09  1D03               	btfss	3,2
  5601     0F0A  2F0C               	goto	u3061
  5602     0F0B  2F0D               	goto	u3060
  5603     0F0C                     u3061:
  5604     0F0C  2ED4               	goto	l3070
  5605     0F0D                     u3060:
  5606     0F0D                     l3082:
  5607     0F0D  0852               	movf	___aldiv@sign^(0+128),w
  5608     0F0E  1903               	btfsc	3,2
  5609     0F0F  2F11               	goto	u3071
  5610     0F10  2F12               	goto	u3070
  5611     0F11                     u3071:
  5612     0F11  2F1D               	goto	l3086
  5613     0F12                     u3070:
  5614     0F12                     l3084:
  5615     0F12  09D3               	comf	___aldiv@quotient^(0+128),f
  5616     0F13  09D4               	comf	(___aldiv@quotient+1)^(0+128),f
  5617     0F14  09D5               	comf	(___aldiv@quotient+2)^(0+128),f
  5618     0F15  09D6               	comf	(___aldiv@quotient+3)^(0+128),f
  5619     0F16  0AD3               	incf	___aldiv@quotient^(0+128),f
  5620     0F17  1903               	skipnz
  5621     0F18  0AD4               	incf	(___aldiv@quotient+1)^(0+128),f
  5622     0F19  1903               	skipnz
  5623     0F1A  0AD5               	incf	(___aldiv@quotient+2)^(0+128),f
  5624     0F1B  1903               	skipnz
  5625     0F1C  0AD6               	incf	(___aldiv@quotient+3)^(0+128),f
  5626     0F1D                     l3086:
  5627     0F1D  0856               	movf	(___aldiv@quotient+3)^(0+128),w
  5628     0F1E  00CB               	movwf	(?___aldiv+3)^(0+128)
  5629     0F1F  0855               	movf	(___aldiv@quotient+2)^(0+128),w
  5630     0F20  00CA               	movwf	(?___aldiv+2)^(0+128)
  5631     0F21  0854               	movf	(___aldiv@quotient+1)^(0+128),w
  5632     0F22  00C9               	movwf	(?___aldiv+1)^(0+128)
  5633     0F23  0853               	movf	___aldiv@quotient^(0+128),w
  5634     0F24  00C8               	movwf	?___aldiv^(0+128)
  5635     0F25                     l527:
  5636     0F25  0008               	return
  5637     0F26                     __end_of___aldiv:
  5638                           
  5639                           	psect	text17
  5640     0C06                     __ptext17:	
  5641 ;; *************** function _UART_TxString *****************
  5642 ;; Defined at:
  5643 ;;		line 805 in file "main.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  str             1    wreg     PTR const unsigned char 
  5646 ;;		 -> packet(15), 
  5647 ;;  is_ACK          1   31[BANK1 ] unsigned char 
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  str             1   35[BANK1 ] PTR const unsigned char 
  5650 ;;		 -> packet(15), 
  5651 ;;  n               2   33[BANK1 ] unsigned int 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5661 ;;      Params:         0       0       1       0       0
  5662 ;;      Locals:         0       0       3       0       0
  5663 ;;      Temps:          0       0       1       0       0
  5664 ;;      Totals:         0       0       5       0       0
  5665 ;;Total ram usage:        5 bytes
  5666 ;; Hardware stack levels used: 1
  5667 ;; Hardware stack levels required when called: 6
  5668 ;; This function calls:
  5669 ;;		_UART_TxChar
  5670 ;;		___awmod
  5671 ;;		___wmul
  5672 ;;		_rand
  5673 ;;		_srand
  5674 ;; This function is called by:
  5675 ;;		_main
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679     0C06                     _UART_TxString:	
  5680                           ;psect for function _UART_TxString
  5681                           
  5682                           
  5683                           ;incstack = 0
  5684                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5685                           ;UART_TxString@str stored from wreg
  5686     0C06  1683               	bsf	3,5	;RP0=1, select bank1
  5687     0C07  1303               	bcf	3,6	;RP1=0, select bank1
  5688     0C08  00C3               	movwf	UART_TxString@str^(0+128)
  5689     0C09                     l3504:
  5690                           
  5691                           ;main.c: 805: void UART_TxString(const char *str, char is_ACK);main.c: 806: {;main.c: 80
      +                          7:     unsigned int n = 0;
  5692     0C09  01C1               	clrf	UART_TxString@n^(0+128)
  5693     0C0A  01C2               	clrf	(UART_TxString@n+1)^(0+128)
  5694                           
  5695                           ;main.c: 809:     while(str[n] != '\0')
  5696     0C0B  2C1F               	goto	l3510
  5697     0C0C                     l3506:
  5698                           
  5699                           ;main.c: 810:     {;main.c: 811:         UART_TxChar(str[n]);
  5700     0C0C  0841               	movf	UART_TxString@n^(0+128),w
  5701     0C0D  0743               	addwf	UART_TxString@str^(0+128),w
  5702     0C0E  00C0               	movwf	??_UART_TxString^(0+128)
  5703     0C0F  0840               	movf	??_UART_TxString^(0+128),w
  5704     0C10  0084               	movwf	4
  5705     0C11  0800               	movf	0,w
  5706     0C12  160A  118A  256E  120A  158A  	fcall	_UART_TxChar
  5707     0C17                     l3508:
  5708                           
  5709                           ;main.c: 812:         n++;
  5710     0C17  3001               	movlw	1
  5711     0C18  1683               	bsf	3,5	;RP0=1, select bank1
  5712     0C19  1303               	bcf	3,6	;RP1=0, select bank1
  5713     0C1A  07C1               	addwf	UART_TxString@n^(0+128),f
  5714     0C1B  1803               	skipnc
  5715     0C1C  0AC2               	incf	(UART_TxString@n+1)^(0+128),f
  5716     0C1D  3000               	movlw	0
  5717     0C1E  07C2               	addwf	(UART_TxString@n+1)^(0+128),f
  5718     0C1F                     l3510:
  5719                           
  5720                           ;main.c: 809:     while(str[n] != '\0')
  5721     0C1F  0841               	movf	UART_TxString@n^(0+128),w
  5722     0C20  0743               	addwf	UART_TxString@str^(0+128),w
  5723     0C21  00C0               	movwf	??_UART_TxString^(0+128)
  5724     0C22  0840               	movf	??_UART_TxString^(0+128),w
  5725     0C23  0084               	movwf	4
  5726     0C24  1783               	bsf	3,7	;select IRP bank2
  5727     0C25  0800               	movf	0,w
  5728     0C26  1D03               	btfss	3,2
  5729     0C27  2C29               	goto	u3741
  5730     0C28  2C2A               	goto	u3740
  5731     0C29                     u3741:
  5732     0C29  2C0C               	goto	l3506
  5733     0C2A                     u3740:
  5734     0C2A                     l3512:
  5735                           
  5736                           ;main.c: 815:     if(is_ACK == 0)
  5737     0C2A  083F               	movf	UART_TxString@is_ACK^(0+128),w
  5738     0C2B  1D03               	btfss	3,2
  5739     0C2C  2C2E               	goto	u3751
  5740     0C2D  2C2F               	goto	u3750
  5741     0C2E                     u3751:
  5742     0C2E  2C7A               	goto	l317
  5743     0C2F                     u3750:
  5744     0C2F                     l3514:
  5745                           
  5746                           ;main.c: 816:     {;main.c: 819:         srand(milliseconds);
  5747     0C2F  0869               	movf	(_milliseconds+1)^(0+128),w
  5748     0C30  1283               	bcf	3,5	;RP0=0, select bank0
  5749     0C31  1303               	bcf	3,6	;RP1=0, select bank0
  5750     0C32  00BD               	movwf	srand@x+1
  5751     0C33  1683               	bsf	3,5	;RP0=1, select bank1
  5752     0C34  1303               	bcf	3,6	;RP1=0, select bank1
  5753     0C35  0868               	movf	_milliseconds^(0+128),w
  5754     0C36  1283               	bcf	3,5	;RP0=0, select bank0
  5755     0C37  1303               	bcf	3,6	;RP1=0, select bank0
  5756     0C38  00BC               	movwf	srand@x
  5757     0C39  160A  118A  2557  120A  158A  	fcall	_srand
  5758     0C3E                     l3516:
  5759                           
  5760                           ;main.c: 820:         milliseconds = 0;
  5761     0C3E  3000               	movlw	0
  5762     0C3F  1683               	bsf	3,5	;RP0=1, select bank1
  5763     0C40  1303               	bcf	3,6	;RP1=0, select bank1
  5764     0C41  00EB               	movwf	(_milliseconds+3)^(0+128)
  5765     0C42  3000               	movlw	0
  5766     0C43  00EA               	movwf	(_milliseconds+2)^(0+128)
  5767     0C44  3000               	movlw	0
  5768     0C45  00E9               	movwf	(_milliseconds+1)^(0+128)
  5769     0C46  3000               	movlw	0
  5770     0C47  00E8               	movwf	_milliseconds^(0+128)
  5771     0C48                     l3518:
  5772                           
  5773                           ;main.c: 822:         seconds = ((rand()%10)+5) * 250;
  5774     0C48  300A               	movlw	10
  5775     0C49  00B3               	movwf	___awmod@divisor^(0+128)
  5776     0C4A  3000               	movlw	0
  5777     0C4B  00B4               	movwf	(___awmod@divisor^(0+128)+1)
  5778     0C4C  120A  158A  2321  120A  158A  	fcall	_rand
  5779     0C51  1683               	bsf	3,5	;RP0=1, select bank1
  5780     0C52  1303               	bcf	3,6	;RP1=0, select bank1
  5781     0C53  082D               	movf	(?_rand+1)^(0+128),w
  5782     0C54  00B6               	movwf	(___awmod@dividend+1)^(0+128)
  5783     0C55  082C               	movf	?_rand^(0+128),w
  5784     0C56  00B5               	movwf	___awmod@dividend^(0+128)
  5785     0C57  120A  158A  2187  120A  158A  	fcall	___awmod
  5786     0C5C  1683               	bsf	3,5	;RP0=1, select bank1
  5787     0C5D  1303               	bcf	3,6	;RP1=0, select bank1
  5788     0C5E  0833               	movf	?___awmod^(0+128),w
  5789     0C5F  3E05               	addlw	5
  5790     0C60  00B9               	movwf	___wmul@multiplier^(0+128)
  5791     0C61  0834               	movf	(?___awmod+1)^(0+128),w
  5792     0C62  1803               	skipnc
  5793     0C63  3E01               	addlw	1
  5794     0C64  3E00               	addlw	0
  5795     0C65  00BA               	movwf	(___wmul@multiplier+1)^(0+128)
  5796     0C66  30FA               	movlw	250
  5797     0C67  00BB               	movwf	___wmul@multiplicand^(0+128)
  5798     0C68  3000               	movlw	0
  5799     0C69  00BC               	movwf	(___wmul@multiplicand^(0+128)+1)
  5800     0C6A  160A  118A  25EC  120A  158A  	fcall	___wmul
  5801     0C6F  1683               	bsf	3,5	;RP0=1, select bank1
  5802     0C70  1303               	bcf	3,6	;RP1=0, select bank1
  5803     0C71  0839               	movf	?___wmul^(0+128),w
  5804     0C72  00E4               	movwf	_seconds^(0+128)
  5805     0C73  083A               	movf	(?___wmul+1)^(0+128),w
  5806     0C74  00E5               	movwf	(_seconds+1)^(0+128)
  5807     0C75  3000               	movlw	0
  5808     0C76  1BE5               	btfsc	(_seconds+1)^(0+128),7
  5809     0C77  30FF               	movlw	255
  5810     0C78  00E6               	movwf	(_seconds+2)^(0+128)
  5811     0C79  00E7               	movwf	(_seconds+3)^(0+128)
  5812     0C7A                     l317:
  5813     0C7A  0008               	return
  5814     0C7B                     __end_of_UART_TxString:
  5815                           
  5816                           	psect	text18
  5817     1557                     __ptext18:	
  5818 ;; *************** function _srand *****************
  5819 ;; Defined at:
  5820 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  x               2   28[BANK0 ] unsigned int 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;		None
  5825 ;; Return value:  Size  Location     Type
  5826 ;;                  1    wreg      void 
  5827 ;; Registers used:
  5828 ;;		wreg
  5829 ;; Tracked objects:
  5830 ;;		On entry : 0/0
  5831 ;;		On exit  : 0/0
  5832 ;;		Unchanged: 0/0
  5833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5834 ;;      Params:         0       2       0       0       0
  5835 ;;      Locals:         0       0       0       0       0
  5836 ;;      Temps:          0       0       0       0       0
  5837 ;;      Totals:         0       2       0       0       0
  5838 ;;Total ram usage:        2 bytes
  5839 ;; Hardware stack levels used: 1
  5840 ;; Hardware stack levels required when called: 4
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_read_NumPad
  5845 ;;		_UART_TxString
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849     1557                     _srand:	
  5850                           ;psect for function _srand
  5851                           
  5852     1557                     l2314:	
  5853                           ;incstack = 0
  5854                           ; Regs used in _srand: [wreg]
  5855                           
  5856     1557  1283               	bcf	3,5	;RP0=0, select bank0
  5857     1558  1303               	bcf	3,6	;RP1=0, select bank0
  5858     1559  083C               	movf	srand@x,w
  5859     155A  00D0               	movwf	_randx
  5860     155B  083D               	movf	srand@x+1,w
  5861     155C  00D1               	movwf	_randx+1
  5862     155D  01D2               	clrf	_randx+2
  5863     155E  01D3               	clrf	_randx+3
  5864     155F                     l905:
  5865     155F  0008               	return
  5866     1560                     __end_of_srand:
  5867                           
  5868                           	psect	text19
  5869     0B21                     __ptext19:	
  5870 ;; *************** function _rand *****************
  5871 ;; Defined at:
  5872 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;		None
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  2   12[BANK1 ] int 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0, pclath, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5886 ;;      Params:         0       0       2       0       0
  5887 ;;      Locals:         0       0       0       0       0
  5888 ;;      Temps:          0       0       5       0       0
  5889 ;;      Totals:         0       0       7       0       0
  5890 ;;Total ram usage:        7 bytes
  5891 ;; Hardware stack levels used: 1
  5892 ;; Hardware stack levels required when called: 5
  5893 ;; This function calls:
  5894 ;;		___lmul
  5895 ;; This function is called by:
  5896 ;;		_read_NumPad
  5897 ;;		_UART_TxString
  5898 ;; This function uses a non-reentrant model
  5899 ;;
  5900                           
  5901     0B21                     _rand:	
  5902                           ;psect for function _rand
  5903                           
  5904     0B21                     l3306:	
  5905                           ;incstack = 0
  5906                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  5907                           
  5908     0B21  1283               	bcf	3,5	;RP0=0, select bank0
  5909     0B22  1303               	bcf	3,6	;RP1=0, select bank0
  5910     0B23  0853               	movf	_randx+3,w
  5911     0B24  1683               	bsf	3,5	;RP0=1, select bank1
  5912     0B25  1303               	bcf	3,6	;RP1=0, select bank1
  5913     0B26  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  5914     0B27  1283               	bcf	3,5	;RP0=0, select bank0
  5915     0B28  1303               	bcf	3,6	;RP1=0, select bank0
  5916     0B29  0852               	movf	_randx+2,w
  5917     0B2A  1683               	bsf	3,5	;RP0=1, select bank1
  5918     0B2B  1303               	bcf	3,6	;RP1=0, select bank1
  5919     0B2C  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  5920     0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  5921     0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  5922     0B2F  0851               	movf	_randx+1,w
  5923     0B30  1683               	bsf	3,5	;RP0=1, select bank1
  5924     0B31  1303               	bcf	3,6	;RP1=0, select bank1
  5925     0B32  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  5926     0B33  1283               	bcf	3,5	;RP0=0, select bank0
  5927     0B34  1303               	bcf	3,6	;RP1=0, select bank0
  5928     0B35  0850               	movf	_randx,w
  5929     0B36  1683               	bsf	3,5	;RP0=1, select bank1
  5930     0B37  1303               	bcf	3,6	;RP1=0, select bank1
  5931     0B38  00A0               	movwf	___lmul@multiplier^(0+128)
  5932     0B39  3041               	movlw	65
  5933     0B3A  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  5934     0B3B  30C6               	movlw	198
  5935     0B3C  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  5936     0B3D  304E               	movlw	78
  5937     0B3E  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  5938     0B3F  306D               	movlw	109
  5939     0B40  00A4               	movwf	___lmul@multiplicand^(0+128)
  5940     0B41  120A  158A  2027  120A  158A  	fcall	___lmul
  5941     0B46  1683               	bsf	3,5	;RP0=1, select bank1
  5942     0B47  1303               	bcf	3,6	;RP1=0, select bank1
  5943     0B48  0823               	movf	(?___lmul+3)^(0+128),w
  5944     0B49  1283               	bcf	3,5	;RP0=0, select bank0
  5945     0B4A  1303               	bcf	3,6	;RP1=0, select bank0
  5946     0B4B  00D3               	movwf	_randx+3
  5947     0B4C  1683               	bsf	3,5	;RP0=1, select bank1
  5948     0B4D  1303               	bcf	3,6	;RP1=0, select bank1
  5949     0B4E  0822               	movf	(?___lmul+2)^(0+128),w
  5950     0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  5951     0B50  1303               	bcf	3,6	;RP1=0, select bank0
  5952     0B51  00D2               	movwf	_randx+2
  5953     0B52  1683               	bsf	3,5	;RP0=1, select bank1
  5954     0B53  1303               	bcf	3,6	;RP1=0, select bank1
  5955     0B54  0821               	movf	(?___lmul+1)^(0+128),w
  5956     0B55  1283               	bcf	3,5	;RP0=0, select bank0
  5957     0B56  1303               	bcf	3,6	;RP1=0, select bank0
  5958     0B57  00D1               	movwf	_randx+1
  5959     0B58  1683               	bsf	3,5	;RP0=1, select bank1
  5960     0B59  1303               	bcf	3,6	;RP1=0, select bank1
  5961     0B5A  0820               	movf	?___lmul^(0+128),w
  5962     0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  5963     0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  5964     0B5D  00D0               	movwf	_randx
  5965     0B5E                     l3308:
  5966     0B5E  3039               	movlw	57
  5967     0B5F  07D0               	addwf	_randx,f
  5968     0B60  3030               	movlw	48
  5969     0B61  1803               	skipnc
  5970     0B62  3031               	movlw	49
  5971     0B63  07D1               	addwf	_randx+1,f
  5972     0B64  3000               	movlw	0
  5973     0B65  1803               	skipnc
  5974     0B66  3001               	movlw	1
  5975     0B67  07D2               	addwf	_randx+2,f
  5976     0B68  3000               	movlw	0
  5977     0B69  1803               	skipnc
  5978     0B6A  3001               	movlw	1
  5979     0B6B  07D3               	addwf	_randx+3,f
  5980     0B6C                     l3310:
  5981     0B6C  0850               	movf	_randx,w
  5982     0B6D  1683               	bsf	3,5	;RP0=1, select bank1
  5983     0B6E  1303               	bcf	3,6	;RP1=0, select bank1
  5984     0B6F  00AE               	movwf	??_rand^(0+128)
  5985     0B70  1283               	bcf	3,5	;RP0=0, select bank0
  5986     0B71  1303               	bcf	3,6	;RP1=0, select bank0
  5987     0B72  0851               	movf	_randx+1,w
  5988     0B73  1683               	bsf	3,5	;RP0=1, select bank1
  5989     0B74  1303               	bcf	3,6	;RP1=0, select bank1
  5990     0B75  00AF               	movwf	(??_rand^(0+128)+1)
  5991     0B76  1283               	bcf	3,5	;RP0=0, select bank0
  5992     0B77  1303               	bcf	3,6	;RP1=0, select bank0
  5993     0B78  0852               	movf	_randx+2,w
  5994     0B79  1683               	bsf	3,5	;RP0=1, select bank1
  5995     0B7A  1303               	bcf	3,6	;RP1=0, select bank1
  5996     0B7B  00B0               	movwf	(??_rand^(0+128)+2)
  5997     0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  5998     0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  5999     0B7E  0853               	movf	_randx+3,w
  6000     0B7F  1683               	bsf	3,5	;RP0=1, select bank1
  6001     0B80  1303               	bcf	3,6	;RP1=0, select bank1
  6002     0B81  00B1               	movwf	(??_rand^(0+128)+3)
  6003     0B82  3010               	movlw	16
  6004     0B83  00B2               	movwf	(??_rand+4)^(0+128)
  6005     0B84                     u3385:
  6006     0B84  0D31               	rlf	(??_rand^(0+128)+3),w
  6007     0B85  0CB1               	rrf	(??_rand^(0+128)+3),f
  6008     0B86  0CB0               	rrf	(??_rand^(0+128)+2),f
  6009     0B87  0CAF               	rrf	(??_rand^(0+128)+1),f
  6010     0B88  0CAE               	rrf	??_rand^(0+128),f
  6011     0B89                     u3380:
  6012     0B89  0BB2               	decfsz	(??_rand+4)^(0+128),f
  6013     0B8A  2B84               	goto	u3385
  6014     0B8B  30FF               	movlw	255
  6015     0B8C  052E               	andwf	??_rand^(0+128),w
  6016     0B8D  00AC               	movwf	?_rand^(0+128)
  6017     0B8E  307F               	movlw	127
  6018     0B8F  052F               	andwf	(??_rand+1)^(0+128),w
  6019     0B90  00AD               	movwf	(?_rand+1)^(0+128)
  6020     0B91                     l908:
  6021     0B91  0008               	return
  6022     0B92                     __end_of_rand:
  6023                           
  6024                           	psect	text20
  6025     0827                     __ptext20:	
  6026 ;; *************** function ___lmul *****************
  6027 ;; Defined at:
  6028 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  multiplier      4    0[BANK1 ] unsigned long 
  6031 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  product         4    8[BANK1 ] unsigned long 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  4    0[BANK1 ] unsigned long 
  6036 ;; Registers used:
  6037 ;;		wreg, status,2, status,0
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6043 ;;      Params:         0       0       8       0       0
  6044 ;;      Locals:         0       0       4       0       0
  6045 ;;      Temps:          0       1       0       0       0
  6046 ;;      Totals:         0       1      12       0       0
  6047 ;;Total ram usage:       13 bytes
  6048 ;; Hardware stack levels used: 1
  6049 ;; Hardware stack levels required when called: 4
  6050 ;; This function calls:
  6051 ;;		Nothing
  6052 ;; This function is called by:
  6053 ;;		_ConvertToString
  6054 ;;		_rand
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058     0827                     ___lmul:	
  6059                           ;psect for function ___lmul
  6060                           
  6061     0827                     l3036:	
  6062                           ;incstack = 0
  6063                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6064                           
  6065     0827  3000               	movlw	0
  6066     0828  1683               	bsf	3,5	;RP0=1, select bank1
  6067     0829  1303               	bcf	3,6	;RP1=0, select bank1
  6068     082A  00AB               	movwf	(___lmul@product+3)^(0+128)
  6069     082B  3000               	movlw	0
  6070     082C  00AA               	movwf	(___lmul@product+2)^(0+128)
  6071     082D  3000               	movlw	0
  6072     082E  00A9               	movwf	(___lmul@product+1)^(0+128)
  6073     082F  3000               	movlw	0
  6074     0830  00A8               	movwf	___lmul@product^(0+128)
  6075     0831                     l3038:
  6076     0831  1C20               	btfss	___lmul@multiplier^(0+128),0
  6077     0832  2834               	goto	u2931
  6078     0833  2835               	goto	u2930
  6079     0834                     u2931:
  6080     0834  284C               	goto	l3042
  6081     0835                     u2930:
  6082     0835                     l3040:
  6083     0835  0824               	movf	___lmul@multiplicand^(0+128),w
  6084     0836  07A8               	addwf	___lmul@product^(0+128),f
  6085     0837  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  6086     0838  1103               	clrz
  6087     0839  1803               	skipnc
  6088     083A  3E01               	addlw	1
  6089     083B  1903               	skipnz
  6090     083C  283E               	goto	u2941
  6091     083D  07A9               	addwf	(___lmul@product+1)^(0+128),f
  6092     083E                     u2941:
  6093     083E  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  6094     083F  1103               	clrz
  6095     0840  1803               	skipnc
  6096     0841  3E01               	addlw	1
  6097     0842  1903               	skipnz
  6098     0843  2845               	goto	u2942
  6099     0844  07AA               	addwf	(___lmul@product+2)^(0+128),f
  6100     0845                     u2942:
  6101     0845  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  6102     0846  1103               	clrz
  6103     0847  1803               	skipnc
  6104     0848  3E01               	addlw	1
  6105     0849  1903               	skipnz
  6106     084A  284C               	goto	u2943
  6107     084B  07AB               	addwf	(___lmul@product+3)^(0+128),f
  6108     084C                     u2943:
  6109     084C                     l3042:
  6110     084C  3001               	movlw	1
  6111     084D  1283               	bcf	3,5	;RP0=0, select bank0
  6112     084E  1303               	bcf	3,6	;RP1=0, select bank0
  6113     084F  00BC               	movwf	??___lmul
  6114     0850                     u2955:
  6115     0850  1003               	clrc
  6116     0851  1683               	bsf	3,5	;RP0=1, select bank1
  6117     0852  1303               	bcf	3,6	;RP1=0, select bank1
  6118     0853  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  6119     0854  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  6120     0855  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  6121     0856  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  6122     0857  1283               	bcf	3,5	;RP0=0, select bank0
  6123     0858  1303               	bcf	3,6	;RP1=0, select bank0
  6124     0859  0BBC               	decfsz	??___lmul,f
  6125     085A  2850               	goto	u2955
  6126     085B                     l3044:
  6127     085B  3001               	movlw	1
  6128     085C                     u2965:
  6129     085C  1003               	clrc
  6130     085D  1683               	bsf	3,5	;RP0=1, select bank1
  6131     085E  1303               	bcf	3,6	;RP1=0, select bank1
  6132     085F  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  6133     0860  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  6134     0861  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  6135     0862  0CA0               	rrf	___lmul@multiplier^(0+128),f
  6136     0863  3EFF               	addlw	-1
  6137     0864  1D03               	skipz
  6138     0865  285C               	goto	u2965
  6139     0866  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  6140     0867  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  6141     0868  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  6142     0869  0420               	iorwf	___lmul@multiplier^(0+128),w
  6143     086A  1D03               	skipz
  6144     086B  286D               	goto	u2971
  6145     086C  286E               	goto	u2970
  6146     086D                     u2971:
  6147     086D  2831               	goto	l3038
  6148     086E                     u2970:
  6149     086E                     l3046:
  6150     086E  082B               	movf	(___lmul@product+3)^(0+128),w
  6151     086F  00A3               	movwf	(?___lmul+3)^(0+128)
  6152     0870  082A               	movf	(___lmul@product+2)^(0+128),w
  6153     0871  00A2               	movwf	(?___lmul+2)^(0+128)
  6154     0872  0829               	movf	(___lmul@product+1)^(0+128),w
  6155     0873  00A1               	movwf	(?___lmul+1)^(0+128)
  6156     0874  0828               	movf	___lmul@product^(0+128),w
  6157     0875  00A0               	movwf	?___lmul^(0+128)
  6158     0876                     l466:
  6159     0876  0008               	return
  6160     0877                     __end_of___lmul:
  6161                           
  6162                           	psect	text21
  6163     15EC                     __ptext21:	
  6164 ;; *************** function ___wmul *****************
  6165 ;; Defined at:
  6166 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  multiplier      2   25[BANK1 ] unsigned int 
  6169 ;;  multiplicand    2   27[BANK1 ] unsigned int 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  product         2   29[BANK1 ] unsigned int 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  2   25[BANK1 ] unsigned int 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6181 ;;      Params:         0       0       4       0       0
  6182 ;;      Locals:         0       0       2       0       0
  6183 ;;      Temps:          0       0       0       0       0
  6184 ;;      Totals:         0       0       6       0       0
  6185 ;;Total ram usage:        6 bytes
  6186 ;; Hardware stack levels used: 1
  6187 ;; Hardware stack levels required when called: 4
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_pow
  6192 ;;		_read_NumPad
  6193 ;;		_UART_TxString
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197     15EC                     ___wmul:	
  6198                           ;psect for function ___wmul
  6199                           
  6200     15EC                     l2978:	
  6201                           ;incstack = 0
  6202                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6203                           
  6204     15EC  1683               	bsf	3,5	;RP0=1, select bank1
  6205     15ED  1303               	bcf	3,6	;RP1=0, select bank1
  6206     15EE  01BD               	clrf	___wmul@product^(0+128)
  6207     15EF  01BE               	clrf	(___wmul@product+1)^(0+128)
  6208     15F0                     l2980:
  6209     15F0  1C39               	btfss	___wmul@multiplier^(0+128),0
  6210     15F1  2DF3               	goto	u2861
  6211     15F2  2DF4               	goto	u2860
  6212     15F3                     u2861:
  6213     15F3  2DFA               	goto	l452
  6214     15F4                     u2860:
  6215     15F4                     l2982:
  6216     15F4  083B               	movf	___wmul@multiplicand^(0+128),w
  6217     15F5  07BD               	addwf	___wmul@product^(0+128),f
  6218     15F6  1803               	skipnc
  6219     15F7  0ABE               	incf	(___wmul@product+1)^(0+128),f
  6220     15F8  083C               	movf	(___wmul@multiplicand+1)^(0+128),w
  6221     15F9  07BE               	addwf	(___wmul@product+1)^(0+128),f
  6222     15FA                     l452:
  6223     15FA  3001               	movlw	1
  6224     15FB                     u2875:
  6225     15FB  1003               	clrc
  6226     15FC  0DBB               	rlf	___wmul@multiplicand^(0+128),f
  6227     15FD  0DBC               	rlf	(___wmul@multiplicand+1)^(0+128),f
  6228     15FE  3EFF               	addlw	-1
  6229     15FF  1D03               	skipz
  6230     1600  2DFB               	goto	u2875
  6231     1601                     l2984:
  6232     1601  3001               	movlw	1
  6233     1602                     u2885:
  6234     1602  1003               	clrc
  6235     1603  0CBA               	rrf	(___wmul@multiplier+1)^(0+128),f
  6236     1604  0CB9               	rrf	___wmul@multiplier^(0+128),f
  6237     1605  3EFF               	addlw	-1
  6238     1606  1D03               	skipz
  6239     1607  2E02               	goto	u2885
  6240     1608                     l2986:
  6241     1608  0839               	movf	___wmul@multiplier^(0+128),w
  6242     1609  043A               	iorwf	(___wmul@multiplier+1)^(0+128),w
  6243     160A  1D03               	btfss	3,2
  6244     160B  2E0D               	goto	u2891
  6245     160C  2E0E               	goto	u2890
  6246     160D                     u2891:
  6247     160D  2DF0               	goto	l2980
  6248     160E                     u2890:
  6249     160E                     l2988:
  6250     160E  083E               	movf	(___wmul@product+1)^(0+128),w
  6251     160F  00BA               	movwf	(?___wmul+1)^(0+128)
  6252     1610  083D               	movf	___wmul@product^(0+128),w
  6253     1611  00B9               	movwf	?___wmul^(0+128)
  6254     1612                     l454:
  6255     1612  0008               	return
  6256     1613                     __end_of___wmul:
  6257                           
  6258                           	psect	text22
  6259     0987                     __ptext22:	
  6260 ;; *************** function ___awmod *****************
  6261 ;; Defined at:
  6262 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  divisor         2   19[BANK1 ] int 
  6265 ;;  dividend        2   21[BANK1 ] int 
  6266 ;; Auto vars:     Size  Location     Type
  6267 ;;  sign            1   24[BANK1 ] unsigned char 
  6268 ;;  counter         1   23[BANK1 ] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  2   19[BANK1 ] int 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6278 ;;      Params:         0       0       4       0       0
  6279 ;;      Locals:         0       0       2       0       0
  6280 ;;      Temps:          0       1       0       0       0
  6281 ;;      Totals:         0       1       6       0       0
  6282 ;;Total ram usage:        7 bytes
  6283 ;; Hardware stack levels used: 1
  6284 ;; Hardware stack levels required when called: 4
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		_read_NumPad
  6289 ;;		_UART_TxString
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293     0987                     ___awmod:	
  6294                           ;psect for function ___awmod
  6295                           
  6296     0987                     l3314:	
  6297                           ;incstack = 0
  6298                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6299                           
  6300     0987  1683               	bsf	3,5	;RP0=1, select bank1
  6301     0988  1303               	bcf	3,6	;RP1=0, select bank1
  6302     0989  01B8               	clrf	___awmod@sign^(0+128)
  6303     098A                     l3316:
  6304     098A  1FB6               	btfss	(___awmod@dividend+1)^(0+128),7
  6305     098B  298D               	goto	u3391
  6306     098C  298E               	goto	u3390
  6307     098D                     u3391:
  6308     098D  2995               	goto	l3322
  6309     098E                     u3390:
  6310     098E                     l3318:
  6311     098E  09B5               	comf	___awmod@dividend^(0+128),f
  6312     098F  09B6               	comf	(___awmod@dividend+1)^(0+128),f
  6313     0990  0AB5               	incf	___awmod@dividend^(0+128),f
  6314     0991  1903               	skipnz
  6315     0992  0AB6               	incf	(___awmod@dividend+1)^(0+128),f
  6316     0993                     l3320:
  6317     0993  01B8               	clrf	___awmod@sign^(0+128)
  6318     0994  0AB8               	incf	___awmod@sign^(0+128),f
  6319     0995                     l3322:
  6320     0995  1FB4               	btfss	(___awmod@divisor+1)^(0+128),7
  6321     0996  2998               	goto	u3401
  6322     0997  2999               	goto	u3400
  6323     0998                     u3401:
  6324     0998  299E               	goto	l3326
  6325     0999                     u3400:
  6326     0999                     l3324:
  6327     0999  09B3               	comf	___awmod@divisor^(0+128),f
  6328     099A  09B4               	comf	(___awmod@divisor+1)^(0+128),f
  6329     099B  0AB3               	incf	___awmod@divisor^(0+128),f
  6330     099C  1903               	skipnz
  6331     099D  0AB4               	incf	(___awmod@divisor+1)^(0+128),f
  6332     099E                     l3326:
  6333     099E  0833               	movf	___awmod@divisor^(0+128),w
  6334     099F  0434               	iorwf	(___awmod@divisor+1)^(0+128),w
  6335     09A0  1903               	btfsc	3,2
  6336     09A1  29A3               	goto	u3411
  6337     09A2  29A4               	goto	u3410
  6338     09A3                     u3411:
  6339     09A3  29D7               	goto	l3344
  6340     09A4                     u3410:
  6341     09A4                     l3328:
  6342     09A4  01B7               	clrf	___awmod@counter^(0+128)
  6343     09A5  0AB7               	incf	___awmod@counter^(0+128),f
  6344     09A6  29B6               	goto	l3334
  6345     09A7                     l3330:
  6346     09A7  3001               	movlw	1
  6347     09A8                     u3425:
  6348     09A8  1003               	clrc
  6349     09A9  0DB3               	rlf	___awmod@divisor^(0+128),f
  6350     09AA  0DB4               	rlf	(___awmod@divisor+1)^(0+128),f
  6351     09AB  3EFF               	addlw	-1
  6352     09AC  1D03               	skipz
  6353     09AD  29A8               	goto	u3425
  6354     09AE                     l3332:
  6355     09AE  3001               	movlw	1
  6356     09AF  1283               	bcf	3,5	;RP0=0, select bank0
  6357     09B0  1303               	bcf	3,6	;RP1=0, select bank0
  6358     09B1  00BD               	movwf	??___awmod
  6359     09B2  083D               	movf	??___awmod,w
  6360     09B3  1683               	bsf	3,5	;RP0=1, select bank1
  6361     09B4  1303               	bcf	3,6	;RP1=0, select bank1
  6362     09B5  07B7               	addwf	___awmod@counter^(0+128),f
  6363     09B6                     l3334:
  6364     09B6  1FB4               	btfss	(___awmod@divisor+1)^(0+128),7
  6365     09B7  29B9               	goto	u3431
  6366     09B8  29BA               	goto	u3430
  6367     09B9                     u3431:
  6368     09B9  29A7               	goto	l3330
  6369     09BA                     u3430:
  6370     09BA                     l3336:
  6371     09BA  0834               	movf	(___awmod@divisor+1)^(0+128),w
  6372     09BB  0236               	subwf	(___awmod@dividend+1)^(0+128),w
  6373     09BC  1D03               	skipz
  6374     09BD  29C0               	goto	u3445
  6375     09BE  0833               	movf	___awmod@divisor^(0+128),w
  6376     09BF  0235               	subwf	___awmod@dividend^(0+128),w
  6377     09C0                     u3445:
  6378     09C0  1C03               	skipc
  6379     09C1  29C3               	goto	u3441
  6380     09C2  29C4               	goto	u3440
  6381     09C3                     u3441:
  6382     09C3  29CA               	goto	l3340
  6383     09C4                     u3440:
  6384     09C4                     l3338:
  6385     09C4  0833               	movf	___awmod@divisor^(0+128),w
  6386     09C5  02B5               	subwf	___awmod@dividend^(0+128),f
  6387     09C6  0834               	movf	(___awmod@divisor+1)^(0+128),w
  6388     09C7  1C03               	skipc
  6389     09C8  03B6               	decf	(___awmod@dividend+1)^(0+128),f
  6390     09C9  02B6               	subwf	(___awmod@dividend+1)^(0+128),f
  6391     09CA                     l3340:
  6392     09CA  3001               	movlw	1
  6393     09CB                     u3455:
  6394     09CB  1003               	clrc
  6395     09CC  0CB4               	rrf	(___awmod@divisor+1)^(0+128),f
  6396     09CD  0CB3               	rrf	___awmod@divisor^(0+128),f
  6397     09CE  3EFF               	addlw	-1
  6398     09CF  1D03               	skipz
  6399     09D0  29CB               	goto	u3455
  6400     09D1                     l3342:
  6401     09D1  3001               	movlw	1
  6402     09D2  02B7               	subwf	___awmod@counter^(0+128),f
  6403     09D3  1D03               	btfss	3,2
  6404     09D4  29D6               	goto	u3461
  6405     09D5  29D7               	goto	u3460
  6406     09D6                     u3461:
  6407     09D6  29BA               	goto	l3336
  6408     09D7                     u3460:
  6409     09D7                     l3344:
  6410     09D7  0838               	movf	___awmod@sign^(0+128),w
  6411     09D8  1903               	btfsc	3,2
  6412     09D9  29DB               	goto	u3471
  6413     09DA  29DC               	goto	u3470
  6414     09DB                     u3471:
  6415     09DB  29E1               	goto	l3348
  6416     09DC                     u3470:
  6417     09DC                     l3346:
  6418     09DC  09B5               	comf	___awmod@dividend^(0+128),f
  6419     09DD  09B6               	comf	(___awmod@dividend+1)^(0+128),f
  6420     09DE  0AB5               	incf	___awmod@dividend^(0+128),f
  6421     09DF  1903               	skipnz
  6422     09E0  0AB6               	incf	(___awmod@dividend+1)^(0+128),f
  6423     09E1                     l3348:
  6424     09E1  0836               	movf	(___awmod@dividend+1)^(0+128),w
  6425     09E2  00B4               	movwf	(?___awmod+1)^(0+128)
  6426     09E3  0835               	movf	___awmod@dividend^(0+128),w
  6427     09E4  00B3               	movwf	?___awmod^(0+128)
  6428     09E5                     l618:
  6429     09E5  0008               	return
  6430     09E6                     __end_of___awmod:
  6431                           
  6432                           	psect	text23
  6433     156E                     __ptext23:	
  6434 ;; *************** function _UART_TxChar *****************
  6435 ;; Defined at:
  6436 ;;		line 795 in file "main.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  ch              1    wreg     unsigned char 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;  ch              1   29[BANK0 ] unsigned char 
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2, status,0
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6450 ;;      Params:         0       0       0       0       0
  6451 ;;      Locals:         0       1       0       0       0
  6452 ;;      Temps:          0       1       0       0       0
  6453 ;;      Totals:         0       2       0       0       0
  6454 ;;Total ram usage:        2 bytes
  6455 ;; Hardware stack levels used: 1
  6456 ;; Hardware stack levels required when called: 4
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_UART_TxString
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464     156E                     _UART_TxChar:	
  6465                           ;psect for function _UART_TxChar
  6466                           
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  6470                           ;UART_TxChar@ch stored from wreg
  6471     156E  1283               	bcf	3,5	;RP0=0, select bank0
  6472     156F  1303               	bcf	3,6	;RP1=0, select bank0
  6473     1570  00BD               	movwf	UART_TxChar@ch
  6474     1571                     l2324:
  6475     1571                     l307:	
  6476                           ;main.c: 795: void UART_TxChar(char ch);main.c: 796: {;main.c: 798:     while(!(PIR1 & 0
      +                          x10));
  6477                           
  6478     1571  1E0C               	btfss	12,4	;volatile
  6479     1572  2D74               	goto	u2001
  6480     1573  2D75               	goto	u2000
  6481     1574                     u2001:
  6482     1574  2D71               	goto	l307
  6483     1575                     u2000:
  6484     1575                     l2326:
  6485                           
  6486                           ;main.c: 800:     PIR1 &= ~0x10;
  6487     1575  30EF               	movlw	239
  6488     1576  00BC               	movwf	??_UART_TxChar
  6489     1577  083C               	movf	??_UART_TxChar,w
  6490     1578  058C               	andwf	12,f	;volatile
  6491     1579                     l2328:
  6492                           
  6493                           ;main.c: 802:     TXREG = ch;
  6494     1579  083D               	movf	UART_TxChar@ch,w
  6495     157A  0099               	movwf	25	;volatile
  6496     157B                     l310:
  6497     157B  0008               	return
  6498     157C                     __end_of_UART_TxChar:
  6499                           
  6500                           	psect	text24
  6501     0651                     __ptext24:	
  6502 ;; *************** function _SplitPacket *****************
  6503 ;; Defined at:
  6504 ;;		line 523 in file "main.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  pkt             1    wreg     PTR unsigned char 
  6507 ;;		 -> dato(50), 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  pkt             1   22[BANK1 ] PTR unsigned char 
  6510 ;;		 -> dato(50), 
  6511 ;;  i               2   23[BANK1 ] int 
  6512 ;;  part            5   13[BANK1 ] unsigned char [5]
  6513 ;;  i_part          2   20[BANK1 ] int 
  6514 ;;  section         2   18[BANK1 ] int 
  6515 ;;  len             2   11[BANK1 ] int 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      void 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6525 ;;      Params:         0       0       0       0       0
  6526 ;;      Locals:         0       0      14       0       0
  6527 ;;      Temps:          0       0       3       0       0
  6528 ;;      Totals:         0       0      17       0       0
  6529 ;;Total ram usage:       17 bytes
  6530 ;; Hardware stack levels used: 1
  6531 ;; Hardware stack levels required when called: 5
  6532 ;; This function calls:
  6533 ;;		_Length
  6534 ;;		_strcopy
  6535 ;; This function is called by:
  6536 ;;		_main
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540     0651                     _SplitPacket:	
  6541                           ;psect for function _SplitPacket
  6542                           
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _SplitPacket: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6546                           ;SplitPacket@pkt stored from wreg
  6547     0651  1683               	bsf	3,5	;RP0=1, select bank1
  6548     0652  1303               	bcf	3,6	;RP1=0, select bank1
  6549     0653  00B6               	movwf	SplitPacket@pkt^(0+128)
  6550     0654                     l3520:
  6551                           
  6552                           ;main.c: 523: void SplitPacket(char* pkt);main.c: 524: {;main.c: 526:     char part[5];;
      +                          main.c: 529:     int i_part = 0, section = 0, len = Length(pkt);
  6553     0654  01B4               	clrf	SplitPacket@i_part^(0+128)
  6554     0655  01B5               	clrf	(SplitPacket@i_part+1)^(0+128)
  6555     0656  01B2               	clrf	SplitPacket@section^(0+128)
  6556     0657  01B3               	clrf	(SplitPacket@section+1)^(0+128)
  6557     0658                     l3522:
  6558     0658  0836               	movf	SplitPacket@pkt^(0+128),w
  6559     0659  1283               	bcf	3,5	;RP0=0, select bank0
  6560     065A  1303               	bcf	3,6	;RP1=0, select bank0
  6561     065B  00BC               	movwf	Length@str
  6562     065C  3001               	movlw	1
  6563     065D  00BD               	movwf	Length@str+1
  6564     065E  160A  118A  2640  120A  118A  	fcall	_Length
  6565     0663  1283               	bcf	3,5	;RP0=0, select bank0
  6566     0664  1303               	bcf	3,6	;RP1=0, select bank0
  6567     0665  083D               	movf	?_Length+1,w
  6568     0666  1683               	bsf	3,5	;RP0=1, select bank1
  6569     0667  1303               	bcf	3,6	;RP1=0, select bank1
  6570     0668  00AC               	movwf	(SplitPacket@len+1)^(0+128)
  6571     0669  1283               	bcf	3,5	;RP0=0, select bank0
  6572     066A  1303               	bcf	3,6	;RP1=0, select bank0
  6573     066B  083C               	movf	?_Length,w
  6574     066C  1683               	bsf	3,5	;RP0=1, select bank1
  6575     066D  1303               	bcf	3,6	;RP1=0, select bank1
  6576     066E  00AB               	movwf	SplitPacket@len^(0+128)
  6577     066F                     l3524:
  6578                           
  6579                           ;main.c: 532:     for(int i = 0; i < len + 1; i++)
  6580     066F  01B7               	clrf	SplitPacket@i^(0+128)
  6581     0670  01B8               	clrf	(SplitPacket@i+1)^(0+128)
  6582     0671  2EE7               	goto	l3554
  6583     0672                     l3526:
  6584                           
  6585                           ;main.c: 533:     {;main.c: 535:         if(pkt[i] != '/' && pkt[i] != '\0')
  6586     0672  1683               	bsf	3,5	;RP0=1, select bank1
  6587     0673  1303               	bcf	3,6	;RP1=0, select bank1
  6588     0674  0837               	movf	SplitPacket@i^(0+128),w
  6589     0675  0736               	addwf	SplitPacket@pkt^(0+128),w
  6590     0676  00A8               	movwf	??_SplitPacket^(0+128)
  6591     0677  0828               	movf	??_SplitPacket^(0+128),w
  6592     0678  0084               	movwf	4
  6593     0679  302F               	movlw	47
  6594     067A  1783               	bsf	3,7	;select IRP bank2
  6595     067B  0600               	xorwf	0,w
  6596     067C  1903               	btfsc	3,2
  6597     067D  2E7F               	goto	u3761
  6598     067E  2E80               	goto	u3760
  6599     067F                     u3761:
  6600     067F  2EC4               	goto	l3546
  6601     0680                     u3760:
  6602     0680                     l3528:
  6603     0680  0837               	movf	SplitPacket@i^(0+128),w
  6604     0681  0736               	addwf	SplitPacket@pkt^(0+128),w
  6605     0682  00A8               	movwf	??_SplitPacket^(0+128)
  6606     0683  0828               	movf	??_SplitPacket^(0+128),w
  6607     0684  0084               	movwf	4
  6608     0685  0800               	movf	0,w
  6609     0686  1903               	btfsc	3,2
  6610     0687  2E89               	goto	u3771
  6611     0688  2E8A               	goto	u3770
  6612     0689                     u3771:
  6613     0689  2EC4               	goto	l3546
  6614     068A                     u3770:
  6615     068A                     l3530:
  6616                           
  6617                           ;main.c: 536:         {;main.c: 538:             part[i_part] = pkt[i];
  6618     068A  0837               	movf	SplitPacket@i^(0+128),w
  6619     068B  0736               	addwf	SplitPacket@pkt^(0+128),w
  6620     068C  00A8               	movwf	??_SplitPacket^(0+128)
  6621     068D  0828               	movf	??_SplitPacket^(0+128),w
  6622     068E  0084               	movwf	4
  6623     068F  0800               	movf	0,w
  6624     0690  00A9               	movwf	(??_SplitPacket+1)^(0+128)
  6625     0691  0834               	movf	SplitPacket@i_part^(0+128),w
  6626     0692  3EAD               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6627     0693  0084               	movwf	4
  6628     0694  0829               	movf	(??_SplitPacket+1)^(0+128),w
  6629     0695  1383               	bcf	3,7	;select IRP bank1
  6630     0696  0080               	movwf	0
  6631     0697                     l3532:
  6632                           
  6633                           ;main.c: 539:             i_part++;
  6634     0697  3001               	movlw	1
  6635     0698  07B4               	addwf	SplitPacket@i_part^(0+128),f
  6636     0699  1803               	skipnc
  6637     069A  0AB5               	incf	(SplitPacket@i_part+1)^(0+128),f
  6638     069B  3000               	movlw	0
  6639     069C  07B5               	addwf	(SplitPacket@i_part+1)^(0+128),f
  6640     069D                     l3534:
  6641                           
  6642                           ;main.c: 540:             part[i_part] = '\0';
  6643     069D  0834               	movf	SplitPacket@i_part^(0+128),w
  6644     069E  3EAD               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6645     069F  0084               	movwf	4
  6646     06A0  0180               	clrf	0
  6647                           
  6648                           ;main.c: 541:         }
  6649     06A1  2EE1               	goto	l3552
  6650     06A2                     l3536:
  6651                           
  6652                           ;main.c: 549:                     source = part[0];
  6653     06A2  082D               	movf	SplitPacket@part^(0+128),w
  6654     06A3  1683               	bsf	3,5	;RP0=1, select bank3
  6655     06A4  1703               	bsf	3,6	;RP1=1, select bank3
  6656     06A5  009F               	movwf	_source^(0+384)
  6657                           
  6658                           ;main.c: 550:                     break;
  6659     06A6  2ED7               	goto	l3548
  6660     06A7                     l3538:
  6661                           
  6662                           ;main.c: 552:                     strcopy(id_dest, part);
  6663     06A7  30C2               	movlw	(low (_id_dest| (0+256)))& (0+255)
  6664     06A8  00A0               	movwf	strcopy@dest^(0+128)
  6665     06A9  3001               	movlw	1
  6666     06AA  00A1               	movwf	(strcopy@dest+1)^(0+128)
  6667     06AB  30AD               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6668     06AC  00A2               	movwf	strcopy@source^(0+128)
  6669     06AD  120A  158A  2128  120A  118A  	fcall	_strcopy
  6670                           
  6671                           ;main.c: 553:                     break;
  6672     06B2  2ED7               	goto	l3548
  6673     06B3                     l3540:
  6674                           
  6675                           ;main.c: 555:                     type = part[0];
  6676     06B3  082D               	movf	SplitPacket@part^(0+128),w
  6677     06B4  1683               	bsf	3,5	;RP0=1, select bank3
  6678     06B5  1703               	bsf	3,6	;RP1=1, select bank3
  6679     06B6  009E               	movwf	_type^(0+384)
  6680                           
  6681                           ;main.c: 556:                     break;
  6682     06B7  2ED7               	goto	l3548
  6683     06B8                     l3542:
  6684                           
  6685                           ;main.c: 558:                     strcopy(datoSeriale, part);
  6686     06B8  303F               	movlw	(low (_datoSeriale| 0))& (0+255)
  6687     06B9  00A0               	movwf	strcopy@dest^(0+128)
  6688     06BA  3000               	movlw	0
  6689     06BB  00A1               	movwf	(strcopy@dest+1)^(0+128)
  6690     06BC  30AD               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6691     06BD  00A2               	movwf	strcopy@source^(0+128)
  6692     06BE  120A  158A  2128  120A  118A  	fcall	_strcopy
  6693                           
  6694                           ;main.c: 559:                     break;
  6695     06C3  2ED7               	goto	l3548
  6696     06C4                     l3546:
  6697                           
  6698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6699                           ; Switch size 1, requested type "simple"
  6700                           ; Number of cases is 1, Range of values is 0 to 0
  6701                           ; switch strategies available:
  6702                           ; Name         Instructions Cycles
  6703                           ; simple_byte            4     3 (average)
  6704                           ; direct_byte           11     8 (fixed)
  6705                           ; jumptable            260     6 (fixed)
  6706                           ;	Chosen strategy is simple_byte
  6707     06C4  0833               	movf	(SplitPacket@section+1)^(0+128),w
  6708     06C5  3A00               	xorlw	0	; case 0
  6709     06C6  1903               	skipnz
  6710     06C7  2EC9               	goto	l3846
  6711     06C8  2ED7               	goto	l3548
  6712     06C9                     l3846:
  6713                           
  6714                           ; Switch size 1, requested type "simple"
  6715                           ; Number of cases is 4, Range of values is 0 to 3
  6716                           ; switch strategies available:
  6717                           ; Name         Instructions Cycles
  6718                           ; simple_byte           13     7 (average)
  6719                           ; direct_byte           20     8 (fixed)
  6720                           ; jumptable            260     6 (fixed)
  6721                           ;	Chosen strategy is simple_byte
  6722     06C9  0832               	movf	SplitPacket@section^(0+128),w
  6723     06CA  3A00               	xorlw	0	; case 0
  6724     06CB  1903               	skipnz
  6725     06CC  2EA2               	goto	l3536
  6726     06CD  3A01               	xorlw	1	; case 1
  6727     06CE  1903               	skipnz
  6728     06CF  2EA7               	goto	l3538
  6729     06D0  3A03               	xorlw	3	; case 2
  6730     06D1  1903               	skipnz
  6731     06D2  2EB3               	goto	l3540
  6732     06D3  3A01               	xorlw	1	; case 3
  6733     06D4  1903               	skipnz
  6734     06D5  2EB8               	goto	l3542
  6735     06D6  2ED7               	goto	l3548
  6736     06D7                     l3548:
  6737                           
  6738                           ;main.c: 564:             section++;
  6739     06D7  3001               	movlw	1
  6740     06D8  1683               	bsf	3,5	;RP0=1, select bank1
  6741     06D9  1303               	bcf	3,6	;RP1=0, select bank1
  6742     06DA  07B2               	addwf	SplitPacket@section^(0+128),f
  6743     06DB  1803               	skipnc
  6744     06DC  0AB3               	incf	(SplitPacket@section+1)^(0+128),f
  6745     06DD  3000               	movlw	0
  6746     06DE  07B3               	addwf	(SplitPacket@section+1)^(0+128),f
  6747     06DF                     l3550:
  6748                           
  6749                           ;main.c: 566:             i_part = 0;
  6750     06DF  01B4               	clrf	SplitPacket@i_part^(0+128)
  6751     06E0  01B5               	clrf	(SplitPacket@i_part+1)^(0+128)
  6752     06E1                     l3552:
  6753                           
  6754                           ;main.c: 568:     }
  6755     06E1  3001               	movlw	1
  6756     06E2  07B7               	addwf	SplitPacket@i^(0+128),f
  6757     06E3  1803               	skipnc
  6758     06E4  0AB8               	incf	(SplitPacket@i+1)^(0+128),f
  6759     06E5  3000               	movlw	0
  6760     06E6  07B8               	addwf	(SplitPacket@i+1)^(0+128),f
  6761     06E7                     l3554:
  6762     06E7  082B               	movf	SplitPacket@len^(0+128),w
  6763     06E8  3E01               	addlw	1
  6764     06E9  00A8               	movwf	??_SplitPacket^(0+128)
  6765     06EA  082C               	movf	(SplitPacket@len+1)^(0+128),w
  6766     06EB  1803               	skipnc
  6767     06EC  3E01               	addlw	1
  6768     06ED  3E00               	addlw	0
  6769     06EE  00A9               	movwf	(??_SplitPacket+1)^(0+128)
  6770     06EF  0838               	movf	(SplitPacket@i+1)^(0+128),w
  6771     06F0  3A80               	xorlw	128
  6772     06F1  00AA               	movwf	(??_SplitPacket+2)^(0+128)
  6773     06F2  0829               	movf	(??_SplitPacket+1)^(0+128),w
  6774     06F3  3A80               	xorlw	128
  6775     06F4  022A               	subwf	(??_SplitPacket+2)^(0+128),w
  6776     06F5  1D03               	skipz
  6777     06F6  2EF9               	goto	u3785
  6778     06F7  0828               	movf	??_SplitPacket^(0+128),w
  6779     06F8  0237               	subwf	SplitPacket@i^(0+128),w
  6780     06F9                     u3785:
  6781     06F9  1C03               	skipc
  6782     06FA  2EFC               	goto	u3781
  6783     06FB  2EFD               	goto	u3780
  6784     06FC                     u3781:
  6785     06FC  2E72               	goto	l3526
  6786     06FD                     u3780:
  6787     06FD                     l241:
  6788     06FD  0008               	return
  6789     06FE                     __end_of_SplitPacket:
  6790                           
  6791                           	psect	text25
  6792     0928                     __ptext25:	
  6793 ;; *************** function _strcopy *****************
  6794 ;; Defined at:
  6795 ;;		line 571 in file "main.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;  dest            2    0[BANK1 ] PTR unsigned char 
  6798 ;;		 -> datoSeriale(17), id_dest(4), 
  6799 ;;  source          1    2[BANK1 ] PTR unsigned char 
  6800 ;;		 -> SplitPacket@part(5), 
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;  n               2   28[BANK0 ] int 
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6812 ;;      Params:         0       0       3       0       0
  6813 ;;      Locals:         0       2       0       0       0
  6814 ;;      Temps:          0       0       5       0       0
  6815 ;;      Totals:         0       2       8       0       0
  6816 ;;Total ram usage:       10 bytes
  6817 ;; Hardware stack levels used: 1
  6818 ;; Hardware stack levels required when called: 4
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_SplitPacket
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826     0928                     _strcopy:	
  6827                           ;psect for function _strcopy
  6828                           
  6829     0928                     l3276:	
  6830                           ;incstack = 0
  6831                           ; Regs used in _strcopy: [wreg-fsr0h+status,2+status,0]
  6832                           
  6833                           
  6834                           ;main.c: 571: void strcopy(char* dest, char* source);main.c: 572: {;main.c: 573:     int
      +                           n = 0;
  6835     0928  1283               	bcf	3,5	;RP0=0, select bank0
  6836     0929  1303               	bcf	3,6	;RP1=0, select bank0
  6837     092A  01BC               	clrf	strcopy@n
  6838     092B  01BD               	clrf	strcopy@n+1
  6839                           
  6840                           ;main.c: 576:     while(source[n] != '\0')
  6841     092C  295D               	goto	l3282
  6842     092D                     l3278:
  6843                           
  6844                           ;main.c: 577:     {;main.c: 578:         dest[n] = source[n];
  6845     092D  1283               	bcf	3,5	;RP0=0, select bank0
  6846     092E  1303               	bcf	3,6	;RP1=0, select bank0
  6847     092F  083C               	movf	strcopy@n,w
  6848     0930  1683               	bsf	3,5	;RP0=1, select bank1
  6849     0931  1303               	bcf	3,6	;RP1=0, select bank1
  6850     0932  0722               	addwf	strcopy@source^(0+128),w
  6851     0933  00A3               	movwf	??_strcopy^(0+128)
  6852     0934  0823               	movf	??_strcopy^(0+128),w
  6853     0935  0084               	movwf	4
  6854     0936  0800               	movf	0,w
  6855     0937  00A4               	movwf	(??_strcopy+1)^(0+128)
  6856     0938  1283               	bcf	3,5	;RP0=0, select bank0
  6857     0939  1303               	bcf	3,6	;RP1=0, select bank0
  6858     093A  083C               	movf	strcopy@n,w
  6859     093B  1683               	bsf	3,5	;RP0=1, select bank1
  6860     093C  1303               	bcf	3,6	;RP1=0, select bank1
  6861     093D  0720               	addwf	strcopy@dest^(0+128),w
  6862     093E  00A6               	movwf	(??_strcopy+3)^(0+128)
  6863     093F  0821               	movf	(strcopy@dest+1)^(0+128),w
  6864     0940  00A5               	movwf	(??_strcopy+2)^(0+128)
  6865     0941  1803               	skipnc
  6866     0942  0AA5               	incf	(??_strcopy+2)^(0+128),f
  6867     0943  1283               	bcf	3,5	;RP0=0, select bank0
  6868     0944  1303               	bcf	3,6	;RP1=0, select bank0
  6869     0945  1FBC               	btfss	strcopy@n,7
  6870     0946  294A               	goto	u3320
  6871     0947  1683               	bsf	3,5	;RP0=1, select bank1
  6872     0948  1303               	bcf	3,6	;RP1=0, select bank1
  6873     0949  03A5               	decf	(??_strcopy+2)^(0+128),f
  6874     094A                     u3320:
  6875     094A  1683               	bsf	3,5	;RP0=1, select bank1
  6876     094B  1303               	bcf	3,6	;RP1=0, select bank1
  6877     094C  0825               	movf	(??_strcopy+2)^(0+128),w
  6878     094D  00A7               	movwf	((??_strcopy+3)^(0+128)+1)
  6879     094E  0826               	movf	(??_strcopy+3)^(0+128),w
  6880     094F  0084               	movwf	4
  6881     0950  1783               	bsf	3,7
  6882     0951  1C27               	btfss	(??_strcopy+4)^(0+128),0
  6883     0952  1383               	bcf	3,7
  6884     0953  0824               	movf	(??_strcopy+1)^(0+128),w
  6885     0954  0080               	movwf	0
  6886     0955                     l3280:
  6887                           
  6888                           ;main.c: 579:         n++;
  6889     0955  3001               	movlw	1
  6890     0956  1283               	bcf	3,5	;RP0=0, select bank0
  6891     0957  1303               	bcf	3,6	;RP1=0, select bank0
  6892     0958  07BC               	addwf	strcopy@n,f
  6893     0959  1803               	skipnc
  6894     095A  0ABD               	incf	strcopy@n+1,f
  6895     095B  3000               	movlw	0
  6896     095C  07BD               	addwf	strcopy@n+1,f
  6897     095D                     l3282:
  6898                           
  6899                           ;main.c: 576:     while(source[n] != '\0')
  6900     095D  083C               	movf	strcopy@n,w
  6901     095E  1683               	bsf	3,5	;RP0=1, select bank1
  6902     095F  1303               	bcf	3,6	;RP1=0, select bank1
  6903     0960  0722               	addwf	strcopy@source^(0+128),w
  6904     0961  00A3               	movwf	??_strcopy^(0+128)
  6905     0962  0823               	movf	??_strcopy^(0+128),w
  6906     0963  0084               	movwf	4
  6907     0964  1383               	bcf	3,7	;select IRP bank0
  6908     0965  0800               	movf	0,w
  6909     0966  1D03               	btfss	3,2
  6910     0967  2969               	goto	u3331
  6911     0968  296A               	goto	u3330
  6912     0969                     u3331:
  6913     0969  292D               	goto	l3278
  6914     096A                     u3330:
  6915     096A                     l3284:
  6916                           
  6917                           ;main.c: 583:     dest[n] = '\0';
  6918     096A  1283               	bcf	3,5	;RP0=0, select bank0
  6919     096B  1303               	bcf	3,6	;RP1=0, select bank0
  6920     096C  083C               	movf	strcopy@n,w
  6921     096D  1683               	bsf	3,5	;RP0=1, select bank1
  6922     096E  1303               	bcf	3,6	;RP1=0, select bank1
  6923     096F  0720               	addwf	strcopy@dest^(0+128),w
  6924     0970  00A4               	movwf	(??_strcopy+1)^(0+128)
  6925     0971  0821               	movf	(strcopy@dest+1)^(0+128),w
  6926     0972  00A3               	movwf	??_strcopy^(0+128)
  6927     0973  1803               	skipnc
  6928     0974  0AA3               	incf	??_strcopy^(0+128),f
  6929     0975  1283               	bcf	3,5	;RP0=0, select bank0
  6930     0976  1303               	bcf	3,6	;RP1=0, select bank0
  6931     0977  1FBC               	btfss	strcopy@n,7
  6932     0978  297C               	goto	u3340
  6933     0979  1683               	bsf	3,5	;RP0=1, select bank1
  6934     097A  1303               	bcf	3,6	;RP1=0, select bank1
  6935     097B  03A3               	decf	??_strcopy^(0+128),f
  6936     097C                     u3340:
  6937     097C  1683               	bsf	3,5	;RP0=1, select bank1
  6938     097D  1303               	bcf	3,6	;RP1=0, select bank1
  6939     097E  0823               	movf	??_strcopy^(0+128),w
  6940     097F  00A5               	movwf	((??_strcopy+1)^(0+128)+1)
  6941     0980  0824               	movf	(??_strcopy+1)^(0+128),w
  6942     0981  0084               	movwf	4
  6943     0982  1783               	bsf	3,7
  6944     0983  1C25               	btfss	(??_strcopy+2)^(0+128),0
  6945     0984  1383               	bcf	3,7
  6946     0985  0180               	clrf	0
  6947     0986                     l247:
  6948     0986  0008               	return
  6949     0987                     __end_of_strcopy:
  6950                           
  6951                           	psect	text26
  6952     17B6                     __ptext26:	
  6953 ;; *************** function _ConcatToPacket *****************
  6954 ;; Defined at:
  6955 ;;		line 473 in file "main.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;  pkt             1    wreg     PTR unsigned char 
  6958 ;;		 -> packet(15), 
  6959 ;;  str             2   17[BANK1 ] PTR unsigned char 
  6960 ;;		 -> STR_19(4), STR_15(4), STR_11(2), main@num_rand_s_228(16), 
  6961 ;;		 -> PIC_ID(4), 
  6962 ;;  delim           1   19[BANK1 ] unsigned char 
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  pkt             1   23[BANK1 ] PTR unsigned char 
  6965 ;;		 -> packet(15), 
  6966 ;;  packet_lengt    2   21[BANK1 ] int 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6976 ;;      Params:         0       0       3       0       0
  6977 ;;      Locals:         0       0       3       0       0
  6978 ;;      Temps:          0       0       1       0       0
  6979 ;;      Totals:         0       0       7       0       0
  6980 ;;Total ram usage:        7 bytes
  6981 ;; Hardware stack levels used: 1
  6982 ;; Hardware stack levels required when called: 6
  6983 ;; This function calls:
  6984 ;;		_strcat
  6985 ;; This function is called by:
  6986 ;;		_main
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990     17B6                     _ConcatToPacket:	
  6991                           ;psect for function _ConcatToPacket
  6992                           
  6993                           
  6994                           ;incstack = 0
  6995                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6996                           ;ConcatToPacket@pkt stored from wreg
  6997     17B6  1683               	bsf	3,5	;RP0=1, select bank1
  6998     17B7  1303               	bcf	3,6	;RP1=0, select bank1
  6999     17B8  00B7               	movwf	ConcatToPacket@pkt^(0+128)
  7000     17B9                     l3488:
  7001                           
  7002                           ;main.c: 473: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 474: {;main.
      +                          c: 476:     int packet_length = strcat(pkt, str);
  7003     17B9  0831               	movf	ConcatToPacket@str^(0+128),w
  7004     17BA  00A5               	movwf	strcat@source^(0+128)
  7005     17BB  0832               	movf	(ConcatToPacket@str+1)^(0+128),w
  7006     17BC  00A6               	movwf	(strcat@source+1)^(0+128)
  7007     17BD  0837               	movf	ConcatToPacket@pkt^(0+128),w
  7008     17BE  120A  158A  24F4  160A  118A  	fcall	_strcat
  7009     17C3  1683               	bsf	3,5	;RP0=1, select bank1
  7010     17C4  1303               	bcf	3,6	;RP1=0, select bank1
  7011     17C5  0826               	movf	(?_strcat+1)^(0+128),w
  7012     17C6  00B6               	movwf	(ConcatToPacket@packet_length+1)^(0+128)
  7013     17C7  0825               	movf	?_strcat^(0+128),w
  7014     17C8  00B5               	movwf	ConcatToPacket@packet_length^(0+128)
  7015     17C9                     l3490:
  7016                           
  7017                           ;main.c: 478:     if(delim != ' ')
  7018     17C9  3020               	movlw	32
  7019     17CA  0633               	xorwf	ConcatToPacket@delim^(0+128),w
  7020     17CB  1903               	btfsc	3,2
  7021     17CC  2FCE               	goto	u3731
  7022     17CD  2FCF               	goto	u3730
  7023     17CE                     u3731:
  7024     17CE  2FDE               	goto	l3496
  7025     17CF                     u3730:
  7026     17CF                     l3492:
  7027                           
  7028                           ;main.c: 479:     {;main.c: 481:         pkt[packet_length] = delim;
  7029     17CF  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7030     17D0  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7031     17D1  00B4               	movwf	??_ConcatToPacket^(0+128)
  7032     17D2  0834               	movf	??_ConcatToPacket^(0+128),w
  7033     17D3  0084               	movwf	4
  7034     17D4  0833               	movf	ConcatToPacket@delim^(0+128),w
  7035     17D5  1783               	bsf	3,7	;select IRP bank2
  7036     17D6  0080               	movwf	0
  7037     17D7                     l3494:
  7038                           
  7039                           ;main.c: 482:         packet_length++;
  7040     17D7  3001               	movlw	1
  7041     17D8  07B5               	addwf	ConcatToPacket@packet_length^(0+128),f
  7042     17D9  1803               	skipnc
  7043     17DA  0AB6               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  7044     17DB  3000               	movlw	0
  7045     17DC  07B6               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7046                           
  7047                           ;main.c: 483:     }
  7048     17DD  2FF9               	goto	l3502
  7049     17DE                     l3496:
  7050                           
  7051                           ;main.c: 486:     {;main.c: 488:         pkt[packet_length] = '\r';
  7052     17DE  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7053     17DF  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7054     17E0  00B4               	movwf	??_ConcatToPacket^(0+128)
  7055     17E1  0834               	movf	??_ConcatToPacket^(0+128),w
  7056     17E2  0084               	movwf	4
  7057     17E3  300D               	movlw	13
  7058     17E4  1783               	bsf	3,7	;select IRP bank2
  7059     17E5  0080               	movwf	0
  7060     17E6                     l3498:
  7061                           
  7062                           ;main.c: 489:         packet_length++;
  7063     17E6  3001               	movlw	1
  7064     17E7  07B5               	addwf	ConcatToPacket@packet_length^(0+128),f
  7065     17E8  1803               	skipnc
  7066     17E9  0AB6               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  7067     17EA  3000               	movlw	0
  7068     17EB  07B6               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7069     17EC                     l3500:
  7070                           
  7071                           ;main.c: 490:         pkt[packet_length] = '\n';
  7072     17EC  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7073     17ED  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7074     17EE  00B4               	movwf	??_ConcatToPacket^(0+128)
  7075     17EF  0834               	movf	??_ConcatToPacket^(0+128),w
  7076     17F0  0084               	movwf	4
  7077     17F1  300A               	movlw	10
  7078     17F2  0080               	movwf	0
  7079                           
  7080                           ;main.c: 491:         packet_length++;
  7081     17F3  3001               	movlw	1
  7082     17F4  07B5               	addwf	ConcatToPacket@packet_length^(0+128),f
  7083     17F5  1803               	skipnc
  7084     17F6  0AB6               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  7085     17F7  3000               	movlw	0
  7086     17F8  07B6               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7087     17F9                     l3502:
  7088                           
  7089                           ;main.c: 494:     pkt[packet_length] = '\0';
  7090     17F9  0835               	movf	ConcatToPacket@packet_length^(0+128),w
  7091     17FA  0737               	addwf	ConcatToPacket@pkt^(0+128),w
  7092     17FB  00B4               	movwf	??_ConcatToPacket^(0+128)
  7093     17FC  0834               	movf	??_ConcatToPacket^(0+128),w
  7094     17FD  0084               	movwf	4
  7095     17FE  0180               	clrf	0
  7096     17FF                     l214:
  7097     17FF  0008               	return
  7098     1800                     __end_of_ConcatToPacket:
  7099                           
  7100                           	psect	text27
  7101     0CF4                     __ptext27:	
  7102 ;; *************** function _strcat *****************
  7103 ;; Defined at:
  7104 ;;		line 506 in file "main.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;  dest            1    wreg     PTR unsigned char 
  7107 ;;		 -> packet(15), 
  7108 ;;  source          2    5[BANK1 ] PTR unsigned char 
  7109 ;;		 -> STR_19(4), STR_15(4), STR_11(2), main@num_rand_s_228(16), 
  7110 ;;		 -> PIC_ID(4), 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  dest            1   12[BANK1 ] PTR unsigned char 
  7113 ;;		 -> packet(15), 
  7114 ;;  length_dest     2   15[BANK1 ] int 
  7115 ;;  n               2   13[BANK1 ] int 
  7116 ;; Return value:  Size  Location     Type
  7117 ;;                  2    5[BANK1 ] int 
  7118 ;; Registers used:
  7119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7120 ;; Tracked objects:
  7121 ;;		On entry : 0/0
  7122 ;;		On exit  : 0/0
  7123 ;;		Unchanged: 0/0
  7124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7125 ;;      Params:         0       0       2       0       0
  7126 ;;      Locals:         0       0       5       0       0
  7127 ;;      Temps:          0       0       5       0       0
  7128 ;;      Totals:         0       0      12       0       0
  7129 ;;Total ram usage:       12 bytes
  7130 ;; Hardware stack levels used: 1
  7131 ;; Hardware stack levels required when called: 5
  7132 ;; This function calls:
  7133 ;;		_Length
  7134 ;; This function is called by:
  7135 ;;		_ConcatToPacket
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139     0CF4                     _strcat:	
  7140                           ;psect for function _strcat
  7141                           
  7142                           
  7143                           ;incstack = 0
  7144                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7145                           ;strcat@dest stored from wreg
  7146     0CF4  1683               	bsf	3,5	;RP0=1, select bank1
  7147     0CF5  1303               	bcf	3,6	;RP1=0, select bank1
  7148     0CF6  00AC               	movwf	strcat@dest^(0+128)
  7149     0CF7                     l3262:
  7150                           
  7151                           ;main.c: 506: int strcat(char* dest, char* source);main.c: 507: {;main.c: 509:     int n
      +                           = 0, length_dest = Length(dest);
  7152     0CF7  01AD               	clrf	strcat@n^(0+128)
  7153     0CF8  01AE               	clrf	(strcat@n+1)^(0+128)
  7154     0CF9                     l3264:
  7155     0CF9  082C               	movf	strcat@dest^(0+128),w
  7156     0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  7157     0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  7158     0CFC  00BC               	movwf	Length@str
  7159     0CFD  3001               	movlw	1
  7160     0CFE  00BD               	movwf	Length@str+1
  7161     0CFF  160A  118A  2640  120A  158A  	fcall	_Length
  7162     0D04  1283               	bcf	3,5	;RP0=0, select bank0
  7163     0D05  1303               	bcf	3,6	;RP1=0, select bank0
  7164     0D06  083D               	movf	?_Length+1,w
  7165     0D07  1683               	bsf	3,5	;RP0=1, select bank1
  7166     0D08  1303               	bcf	3,6	;RP1=0, select bank1
  7167     0D09  00B0               	movwf	(strcat@length_dest+1)^(0+128)
  7168     0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  7169     0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  7170     0D0C  083C               	movf	?_Length,w
  7171     0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  7172     0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  7173     0D0F  00AF               	movwf	strcat@length_dest^(0+128)
  7174                           
  7175                           ;main.c: 512:     while(source[n] != '\0')
  7176     0D10  2D47               	goto	l223
  7177     0D11                     l3266:
  7178                           
  7179                           ;main.c: 513:     {;main.c: 514:         dest[length_dest] = source[n];
  7180     0D11  1683               	bsf	3,5	;RP0=1, select bank1
  7181     0D12  1303               	bcf	3,6	;RP1=0, select bank1
  7182     0D13  082D               	movf	strcat@n^(0+128),w
  7183     0D14  0725               	addwf	strcat@source^(0+128),w
  7184     0D15  00A8               	movwf	(??_strcat+1)^(0+128)
  7185     0D16  0826               	movf	(strcat@source+1)^(0+128),w
  7186     0D17  00A7               	movwf	??_strcat^(0+128)
  7187     0D18  1803               	skipnc
  7188     0D19  0AA7               	incf	??_strcat^(0+128),f
  7189     0D1A  1FAD               	btfss	strcat@n^(0+128),7
  7190     0D1B  2D1D               	goto	u3290
  7191     0D1C  03A7               	decf	??_strcat^(0+128),f
  7192     0D1D                     u3290:
  7193     0D1D  1683               	bsf	3,5	;RP0=1, select bank1
  7194     0D1E  1303               	bcf	3,6	;RP1=0, select bank1
  7195     0D1F  0827               	movf	??_strcat^(0+128),w
  7196     0D20  00A9               	movwf	((??_strcat+1)^(0+128)+1)
  7197     0D21  0829               	movf	(??_strcat+2)^(0+128),w
  7198     0D22  1283               	bcf	3,5	;RP0=0, select bank0
  7199     0D23  1303               	bcf	3,6	;RP1=0, select bank0
  7200     0D24  00FF               	movwf	btemp+1
  7201     0D25  1683               	bsf	3,5	;RP0=1, select bank1
  7202     0D26  1303               	bcf	3,6	;RP1=0, select bank1
  7203     0D27  0828               	movf	(??_strcat+1)^(0+128),w
  7204     0D28  0084               	movwf	4
  7205     0D29  1283               	bcf	3,5	;RP0=0, select bank0
  7206     0D2A  1303               	bcf	3,6	;RP1=0, select bank0
  7207     0D2B  120A  118A  2700  120A  158A  	fcall	stringtab
  7208     0D30  1683               	bsf	3,5	;RP0=1, select bank1
  7209     0D31  1303               	bcf	3,6	;RP1=0, select bank1
  7210     0D32  00AA               	movwf	(??_strcat+3)^(0+128)
  7211     0D33  082F               	movf	strcat@length_dest^(0+128),w
  7212     0D34  072C               	addwf	strcat@dest^(0+128),w
  7213     0D35  00AB               	movwf	(??_strcat+4)^(0+128)
  7214     0D36  082B               	movf	(??_strcat+4)^(0+128),w
  7215     0D37  0084               	movwf	4
  7216     0D38  082A               	movf	(??_strcat+3)^(0+128),w
  7217     0D39  1783               	bsf	3,7	;select IRP bank2
  7218     0D3A  0080               	movwf	0
  7219     0D3B                     l3268:
  7220                           
  7221                           ;main.c: 515:         n++;
  7222     0D3B  3001               	movlw	1
  7223     0D3C  07AD               	addwf	strcat@n^(0+128),f
  7224     0D3D  1803               	skipnc
  7225     0D3E  0AAE               	incf	(strcat@n+1)^(0+128),f
  7226     0D3F  3000               	movlw	0
  7227     0D40  07AE               	addwf	(strcat@n+1)^(0+128),f
  7228     0D41                     l3270:
  7229                           
  7230                           ;main.c: 516:         length_dest++;
  7231     0D41  3001               	movlw	1
  7232     0D42  07AF               	addwf	strcat@length_dest^(0+128),f
  7233     0D43  1803               	skipnc
  7234     0D44  0AB0               	incf	(strcat@length_dest+1)^(0+128),f
  7235     0D45  3000               	movlw	0
  7236     0D46  07B0               	addwf	(strcat@length_dest+1)^(0+128),f
  7237     0D47                     l223:	
  7238                           ;main.c: 517:     }
  7239                           
  7240                           
  7241                           ;main.c: 512:     while(source[n] != '\0')
  7242     0D47  082D               	movf	strcat@n^(0+128),w
  7243     0D48  0725               	addwf	strcat@source^(0+128),w
  7244     0D49  00A8               	movwf	(??_strcat+1)^(0+128)
  7245     0D4A  0826               	movf	(strcat@source+1)^(0+128),w
  7246     0D4B  00A7               	movwf	??_strcat^(0+128)
  7247     0D4C  1803               	skipnc
  7248     0D4D  0AA7               	incf	??_strcat^(0+128),f
  7249     0D4E  1FAD               	btfss	strcat@n^(0+128),7
  7250     0D4F  2D51               	goto	u3300
  7251     0D50  03A7               	decf	??_strcat^(0+128),f
  7252     0D51                     u3300:
  7253     0D51  1683               	bsf	3,5	;RP0=1, select bank1
  7254     0D52  1303               	bcf	3,6	;RP1=0, select bank1
  7255     0D53  0827               	movf	??_strcat^(0+128),w
  7256     0D54  00A9               	movwf	((??_strcat+1)^(0+128)+1)
  7257     0D55  0829               	movf	(??_strcat+2)^(0+128),w
  7258     0D56  1283               	bcf	3,5	;RP0=0, select bank0
  7259     0D57  1303               	bcf	3,6	;RP1=0, select bank0
  7260     0D58  00FF               	movwf	btemp+1
  7261     0D59  1683               	bsf	3,5	;RP0=1, select bank1
  7262     0D5A  1303               	bcf	3,6	;RP1=0, select bank1
  7263     0D5B  0828               	movf	(??_strcat+1)^(0+128),w
  7264     0D5C  0084               	movwf	4
  7265     0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  7266     0D5E  1303               	bcf	3,6	;RP1=0, select bank0
  7267     0D5F  120A  118A  2700  120A  158A  	fcall	stringtab
  7268     0D64  3A00               	xorlw	0
  7269     0D65  1D03               	skipz
  7270     0D66  2D68               	goto	u3311
  7271     0D67  2D69               	goto	u3310
  7272     0D68                     u3311:
  7273     0D68  2D11               	goto	l3266
  7274     0D69                     u3310:
  7275     0D69                     l3272:
  7276                           
  7277                           ;main.c: 520:     return length_dest;
  7278     0D69  1683               	bsf	3,5	;RP0=1, select bank1
  7279     0D6A  1303               	bcf	3,6	;RP1=0, select bank1
  7280     0D6B  0830               	movf	(strcat@length_dest+1)^(0+128),w
  7281     0D6C  00A6               	movwf	(?_strcat+1)^(0+128)
  7282     0D6D  082F               	movf	strcat@length_dest^(0+128),w
  7283     0D6E  00A5               	movwf	?_strcat^(0+128)
  7284     0D6F                     l226:
  7285     0D6F  0008               	return
  7286     0D70                     __end_of_strcat:
  7287                           
  7288                           	psect	text28
  7289     1640                     __ptext28:	
  7290 ;; *************** function _Length *****************
  7291 ;; Defined at:
  7292 ;;		line 497 in file "main.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;  str             2   28[BANK0 ] PTR unsigned char 
  7295 ;;		 -> datoSeriale(17), datoTastierino(17), id_dest(4), dato(50), 
  7296 ;;		 -> packet(15), PIC_ID(4), 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  len             2    3[BANK1 ] int 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  2   28[BANK0 ] int 
  7301 ;; Registers used:
  7302 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7308 ;;      Params:         0       2       0       0       0
  7309 ;;      Locals:         0       0       2       0       0
  7310 ;;      Temps:          0       0       3       0       0
  7311 ;;      Totals:         0       2       5       0       0
  7312 ;;Total ram usage:        7 bytes
  7313 ;; Hardware stack levels used: 1
  7314 ;; Hardware stack levels required when called: 4
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_strcat
  7319 ;;		_SplitPacket
  7320 ;;		_CompareStrings
  7321 ;;		_Fill
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325     1640                     _Length:	
  7326                           ;psect for function _Length
  7327                           
  7328     1640                     l3026:	
  7329                           ;incstack = 0
  7330                           ; Regs used in _Length: [wreg-fsr0h+status,2+status,0]
  7331                           
  7332                           
  7333                           ;main.c: 497: int Length(char *str);main.c: 498: {;main.c: 499:     int len = 0;
  7334     1640  1683               	bsf	3,5	;RP0=1, select bank1
  7335     1641  1303               	bcf	3,6	;RP1=0, select bank1
  7336     1642  01A3               	clrf	Length@len^(0+128)
  7337     1643  01A4               	clrf	(Length@len+1)^(0+128)
  7338                           
  7339                           ;main.c: 501:     while(str[len] != '\0') { len++; }
  7340     1644  2E4B               	goto	l3030
  7341     1645                     l3028:
  7342     1645  3001               	movlw	1
  7343     1646  07A3               	addwf	Length@len^(0+128),f
  7344     1647  1803               	skipnc
  7345     1648  0AA4               	incf	(Length@len+1)^(0+128),f
  7346     1649  3000               	movlw	0
  7347     164A  07A4               	addwf	(Length@len+1)^(0+128),f
  7348     164B                     l3030:
  7349     164B  0823               	movf	Length@len^(0+128),w
  7350     164C  1283               	bcf	3,5	;RP0=0, select bank0
  7351     164D  1303               	bcf	3,6	;RP1=0, select bank0
  7352     164E  073C               	addwf	Length@str,w
  7353     164F  1683               	bsf	3,5	;RP0=1, select bank1
  7354     1650  1303               	bcf	3,6	;RP1=0, select bank1
  7355     1651  00A1               	movwf	(??_Length+1)^(0+128)
  7356     1652  1283               	bcf	3,5	;RP0=0, select bank0
  7357     1653  1303               	bcf	3,6	;RP1=0, select bank0
  7358     1654  083D               	movf	Length@str+1,w
  7359     1655  1683               	bsf	3,5	;RP0=1, select bank1
  7360     1656  1303               	bcf	3,6	;RP1=0, select bank1
  7361     1657  00A0               	movwf	??_Length^(0+128)
  7362     1658  1803               	skipnc
  7363     1659  0AA0               	incf	??_Length^(0+128),f
  7364     165A  1FA3               	btfss	Length@len^(0+128),7
  7365     165B  2E5D               	goto	u2910
  7366     165C  03A0               	decf	??_Length^(0+128),f
  7367     165D                     u2910:
  7368     165D  1683               	bsf	3,5	;RP0=1, select bank1
  7369     165E  1303               	bcf	3,6	;RP1=0, select bank1
  7370     165F  0820               	movf	??_Length^(0+128),w
  7371     1660  00A2               	movwf	((??_Length+1)^(0+128)+1)
  7372     1661  0821               	movf	(??_Length+1)^(0+128),w
  7373     1662  0084               	movwf	4
  7374     1663  1783               	bsf	3,7
  7375     1664  1C22               	btfss	(??_Length+2)^(0+128),0
  7376     1665  1383               	bcf	3,7
  7377     1666  0800               	movf	0,w
  7378     1667  1D03               	btfss	3,2
  7379     1668  2E6A               	goto	u2921
  7380     1669  2E6B               	goto	u2920
  7381     166A                     u2921:
  7382     166A  2E45               	goto	l3028
  7383     166B                     u2920:
  7384     166B                     l3032:
  7385                           
  7386                           ;main.c: 503:     return len;
  7387     166B  0824               	movf	(Length@len+1)^(0+128),w
  7388     166C  1283               	bcf	3,5	;RP0=0, select bank0
  7389     166D  1303               	bcf	3,6	;RP1=0, select bank0
  7390     166E  00BD               	movwf	?_Length+1
  7391     166F  1683               	bsf	3,5	;RP0=1, select bank1
  7392     1670  1303               	bcf	3,6	;RP1=0, select bank1
  7393     1671  0823               	movf	Length@len^(0+128),w
  7394     1672  1283               	bcf	3,5	;RP0=0, select bank0
  7395     1673  1303               	bcf	3,6	;RP1=0, select bank0
  7396     1674  00BC               	movwf	?_Length
  7397     1675                     l220:
  7398     1675  0008               	return
  7399     1676                     __end_of_Length:
  7400                           
  7401                           	psect	text29
  7402     0D70                     __ptext29:	
  7403 ;; *************** function _IRS *****************
  7404 ;; Defined at:
  7405 ;;		line 826 in file "main.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;		None
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7419 ;;      Params:         0       0       0       0       0
  7420 ;;      Locals:         0       0       0       0       0
  7421 ;;      Temps:          0       4       0       0       0
  7422 ;;      Totals:         0       4       0       0       0
  7423 ;;Total ram usage:        4 bytes
  7424 ;; Hardware stack levels used: 1
  7425 ;; Hardware stack levels required when called: 3
  7426 ;; This function calls:
  7427 ;;		i1_UART_TxString
  7428 ;; This function is called by:
  7429 ;;		Interrupt level 1
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433     0D70                     _IRS:	
  7434                           ;psect for function _IRS
  7435                           
  7436     0D70                     i1l2894:
  7437                           
  7438                           ;main.c: 829:     if(RCIF)
  7439     0D70  1E8C               	btfss	12,5	;volatile
  7440     0D71  2D73               	goto	u280_21
  7441     0D72  2D74               	goto	u280_20
  7442     0D73                     u280_21:
  7443     0D73  2D89               	goto	i1l2906
  7444     0D74                     u280_20:
  7445     0D74                     i1l2896:
  7446                           
  7447                           ;main.c: 830:     {;main.c: 831:         dato[iS++] = RCREG;
  7448     0D74  083E               	movf	_iS,w
  7449     0D75  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7450     0D76  0084               	movwf	4
  7451     0D77  081A               	movf	26,w	;volatile
  7452     0D78  1783               	bsf	3,7	;select IRP bank2
  7453     0D79  0080               	movwf	0
  7454     0D7A                     i1l2898:
  7455     0D7A  3001               	movlw	1
  7456     0D7B  00B8               	movwf	??_IRS
  7457     0D7C  0838               	movf	??_IRS,w
  7458     0D7D  07BE               	addwf	_iS,f
  7459     0D7E                     i1l2900:
  7460                           
  7461                           ;main.c: 832:         dato[iS] = '\0';
  7462     0D7E  083E               	movf	_iS,w
  7463     0D7F  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7464     0D80  0084               	movwf	4
  7465     0D81  0180               	clrf	0
  7466     0D82                     i1l2902:
  7467                           
  7468                           ;main.c: 833:         recieved = 1;
  7469     0D82  1683               	bsf	3,5	;RP0=1, select bank3
  7470     0D83  1703               	bsf	3,6	;RP1=1, select bank3
  7471     0D84  019B               	clrf	_recieved^(0+384)
  7472     0D85  0A9B               	incf	_recieved^(0+384),f
  7473     0D86                     i1l2904:
  7474                           
  7475                           ;main.c: 834:         RCIF = 0;
  7476     0D86  1283               	bcf	3,5	;RP0=0, select bank0
  7477     0D87  1303               	bcf	3,6	;RP1=0, select bank0
  7478     0D88  128C               	bcf	12,5	;volatile
  7479     0D89                     i1l2906:
  7480                           
  7481                           ;main.c: 837:     if(T0IF)
  7482     0D89  1D0B               	btfss	11,2	;volatile
  7483     0D8A  2D8C               	goto	u281_21
  7484     0D8B  2D8D               	goto	u281_20
  7485     0D8C                     u281_21:
  7486     0D8C  2DEF               	goto	i1l329
  7487     0D8D                     u281_20:
  7488     0D8D                     i1l2908:
  7489                           
  7490                           ;main.c: 838:     {;main.c: 839:         TMR0 = 131;
  7491     0D8D  3083               	movlw	131
  7492     0D8E  0081               	movwf	1	;volatile
  7493                           
  7494                           ;main.c: 840:         milliseconds++;
  7495     0D8F  3001               	movlw	1
  7496     0D90  1683               	bsf	3,5	;RP0=1, select bank1
  7497     0D91  1303               	bcf	3,6	;RP1=0, select bank1
  7498     0D92  07E8               	addwf	_milliseconds^(0+128),f
  7499     0D93  3000               	movlw	0
  7500     0D94  1803               	skipnc
  7501     0D95  3001               	movlw	1
  7502     0D96  07E9               	addwf	(_milliseconds+1)^(0+128),f
  7503     0D97  3000               	movlw	0
  7504     0D98  1803               	skipnc
  7505     0D99  3001               	movlw	1
  7506     0D9A  07EA               	addwf	(_milliseconds+2)^(0+128),f
  7507     0D9B  3000               	movlw	0
  7508     0D9C  1803               	skipnc
  7509     0D9D  3001               	movlw	1
  7510     0D9E  07EB               	addwf	(_milliseconds+3)^(0+128),f
  7511                           
  7512                           ;main.c: 842:         if(seconds != 0 && milliseconds > seconds)
  7513     0D9F  0867               	movf	(_seconds+3)^(0+128),w
  7514     0DA0  0466               	iorwf	(_seconds+2)^(0+128),w
  7515     0DA1  0465               	iorwf	(_seconds+1)^(0+128),w
  7516     0DA2  0464               	iorwf	_seconds^(0+128),w
  7517     0DA3  1903               	skipnz
  7518     0DA4  2DA6               	goto	u282_21
  7519     0DA5  2DA7               	goto	u282_20
  7520     0DA6                     u282_21:
  7521     0DA6  2DEE               	goto	i1l2926
  7522     0DA7                     u282_20:
  7523     0DA7                     i1l2910:
  7524     0DA7  086B               	movf	(_milliseconds+3)^(0+128),w
  7525     0DA8  0267               	subwf	(_seconds+3)^(0+128),w
  7526     0DA9  1D03               	skipz
  7527     0DAA  2DB5               	goto	u283_25
  7528     0DAB  086A               	movf	(_milliseconds+2)^(0+128),w
  7529     0DAC  0266               	subwf	(_seconds+2)^(0+128),w
  7530     0DAD  1D03               	skipz
  7531     0DAE  2DB5               	goto	u283_25
  7532     0DAF  0869               	movf	(_milliseconds+1)^(0+128),w
  7533     0DB0  0265               	subwf	(_seconds+1)^(0+128),w
  7534     0DB1  1D03               	skipz
  7535     0DB2  2DB5               	goto	u283_25
  7536     0DB3  0868               	movf	_milliseconds^(0+128),w
  7537     0DB4  0264               	subwf	_seconds^(0+128),w
  7538     0DB5                     u283_25:
  7539     0DB5  1803               	skipnc
  7540     0DB6  2DB8               	goto	u283_21
  7541     0DB7  2DB9               	goto	u283_20
  7542     0DB8                     u283_21:
  7543     0DB8  2DEE               	goto	i1l2926
  7544     0DB9                     u283_20:
  7545     0DB9                     i1l2912:
  7546                           
  7547                           ;main.c: 843:         {;main.c: 845:             if(seconds == 1000)
  7548     0DB9  30E8               	movlw	232
  7549     0DBA  0664               	xorwf	_seconds^(0+128),w
  7550     0DBB  3003               	movlw	3
  7551     0DBC  1903               	skipnz
  7552     0DBD  0665               	xorwf	(_seconds+1)^(0+128),w
  7553     0DBE  0466               	iorwf	(_seconds+2)^(0+128),w
  7554     0DBF  0467               	iorwf	(_seconds+3)^(0+128),w
  7555     0DC0  1D03               	btfss	3,2
  7556     0DC1  2DC3               	goto	u284_21
  7557     0DC2  2DC4               	goto	u284_20
  7558     0DC3                     u284_21:
  7559     0DC3  2DD3               	goto	i1l2918
  7560     0DC4                     u284_20:
  7561     0DC4                     i1l2914:
  7562                           
  7563                           ;main.c: 846:             {;main.c: 847:                 pr_start = 1;
  7564     0DC4  1683               	bsf	3,5	;RP0=1, select bank3
  7565     0DC5  1703               	bsf	3,6	;RP1=1, select bank3
  7566     0DC6  0197               	clrf	_pr_start^(0+384)
  7567     0DC7  0A97               	incf	_pr_start^(0+384),f
  7568     0DC8                     i1l2916:
  7569                           
  7570                           ;main.c: 848:                 seconds = 0;
  7571     0DC8  3000               	movlw	0
  7572     0DC9  1683               	bsf	3,5	;RP0=1, select bank1
  7573     0DCA  1303               	bcf	3,6	;RP1=0, select bank1
  7574     0DCB  00E7               	movwf	(_seconds+3)^(0+128)
  7575     0DCC  3000               	movlw	0
  7576     0DCD  00E6               	movwf	(_seconds+2)^(0+128)
  7577     0DCE  3000               	movlw	0
  7578     0DCF  00E5               	movwf	(_seconds+1)^(0+128)
  7579     0DD0  3000               	movlw	0
  7580     0DD1  00E4               	movwf	_seconds^(0+128)
  7581                           
  7582                           ;main.c: 849:             }
  7583     0DD2  2DEE               	goto	i1l2926
  7584     0DD3                     i1l2918:
  7585     0DD3  304C               	movlw	76
  7586     0DD4  1683               	bsf	3,5	;RP0=1, select bank1
  7587     0DD5  1303               	bcf	3,6	;RP1=0, select bank1
  7588     0DD6  0664               	xorwf	_seconds^(0+128),w
  7589     0DD7  301D               	movlw	29
  7590     0DD8  1903               	skipnz
  7591     0DD9  0665               	xorwf	(_seconds+1)^(0+128),w
  7592     0DDA  0466               	iorwf	(_seconds+2)^(0+128),w
  7593     0DDB  0467               	iorwf	(_seconds+3)^(0+128),w
  7594     0DDC  1D03               	btfss	3,2
  7595     0DDD  2DDF               	goto	u285_21
  7596     0DDE  2DE0               	goto	u285_20
  7597     0DDF                     u285_21:
  7598     0DDF  2DE5               	goto	i1l2924
  7599     0DE0                     u285_20:
  7600     0DE0                     i1l2920:
  7601                           
  7602                           ;main.c: 852:             {;main.c: 853:                 pr_countdown = 1;
  7603     0DE0  1683               	bsf	3,5	;RP0=1, select bank3
  7604     0DE1  1703               	bsf	3,6	;RP1=1, select bank3
  7605     0DE2  0194               	clrf	_pr_countdown^(0+384)
  7606     0DE3  0A94               	incf	_pr_countdown^(0+384),f
  7607     0DE4  2DC8               	goto	i1l2916
  7608     0DE5                     i1l2924:
  7609                           
  7610                           ;main.c: 858:             {;main.c: 860:                 UART_TxString(packet, 0);
  7611     0DE5  1283               	bcf	3,5	;RP0=0, select bank0
  7612     0DE6  1303               	bcf	3,6	;RP1=0, select bank0
  7613     0DE7  01B3               	clrf	i1UART_TxString@is_ACK
  7614     0DE8  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  7615     0DE9  120A  158A  247B  120A  158A  	fcall	i1_UART_TxString
  7616     0DEE                     i1l2926:
  7617                           
  7618                           ;main.c: 863:         T0IF = 0;
  7619     0DEE  110B               	bcf	11,2	;volatile
  7620     0DEF                     i1l329:
  7621     0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  7622     0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  7623     0DF1  083B               	movf	??_IRS+3,w
  7624     0DF2  008A               	movwf	10
  7625     0DF3  083A               	movf	??_IRS+2,w
  7626     0DF4  0084               	movwf	4
  7627     0DF5  0E39               	swapf	??_IRS+1,w
  7628     0DF6  0083               	movwf	3
  7629     0DF7  0EFE               	swapf	btemp,f
  7630     0DF8  0E7E               	swapf	btemp,w
  7631     0DF9  0009               	retfie
  7632     0DFA                     __end_of_IRS:
  7633                           
  7634                           	psect	intentry
  7635     0004                     __pintentry:	
  7636                           ;incstack = 0
  7637                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7638                           
  7639     0004                     interrupt_function:
  7640     007E                     saved_w	set	btemp
  7641     0004  00FE               	movwf	btemp
  7642     0005  0E03               	swapf	3,w
  7643     0006  1283               	bcf	3,5	;RP0=0, select bank0
  7644     0007  1303               	bcf	3,6	;RP1=0, select bank0
  7645     0008  00B9               	movwf	??_IRS+1
  7646     0009  0804               	movf	4,w
  7647     000A  00BA               	movwf	??_IRS+2
  7648     000B  080A               	movf	10,w
  7649     000C  00BB               	movwf	??_IRS+3
  7650     000D  120A  158A  2D70   	ljmp	_IRS
  7651                           
  7652                           	psect	text30
  7653     0C7B                     __ptext30:	
  7654 ;; *************** function i1_UART_TxString *****************
  7655 ;; Defined at:
  7656 ;;		line 805 in file "main.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;  str             1    wreg     PTR const unsigned char 
  7659 ;;		 -> packet(15), 
  7660 ;;  is_ACK          1   19[BANK0 ] unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  str             1   21[BANK0 ] PTR const unsigned char 
  7663 ;;		 -> packet(15), 
  7664 ;;  n               2   22[BANK0 ] unsigned int 
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  1    wreg      void 
  7667 ;; Registers used:
  7668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7674 ;;      Params:         0       1       0       0       0
  7675 ;;      Locals:         0       3       0       0       0
  7676 ;;      Temps:          0       1       0       0       0
  7677 ;;      Totals:         0       5       0       0       0
  7678 ;;Total ram usage:        5 bytes
  7679 ;; Hardware stack levels used: 1
  7680 ;; Hardware stack levels required when called: 2
  7681 ;; This function calls:
  7682 ;;		i1_UART_TxChar
  7683 ;;		i1___awmod
  7684 ;;		i1___wmul
  7685 ;;		i1_rand
  7686 ;;		i1_srand
  7687 ;; This function is called by:
  7688 ;;		_IRS
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692     0C7B                     i1_UART_TxString:	
  7693                           ;psect for function i1_UART_TxString
  7694                           
  7695                           
  7696                           ;incstack = 0
  7697                           ; Regs used in i1_UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7698                           ;i1UART_TxString@str stored from wreg
  7699     0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  7700     0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  7701     0C7D  00B5               	movwf	i1UART_TxString@str
  7702     0C7E                     i1l2646:
  7703                           
  7704                           ;main.c: 805: void UART_TxString(const char *str, char is_ACK);main.c: 806: {;main.c: 80
      +                          7:     unsigned int n = 0;
  7705     0C7E  01B6               	clrf	i1UART_TxString@n
  7706     0C7F  01B7               	clrf	i1UART_TxString@n+1
  7707                           
  7708                           ;main.c: 809:     while(str[n] != '\0')
  7709     0C80  2C94               	goto	i1l2652
  7710     0C81                     i1l2648:
  7711                           
  7712                           ;main.c: 810:     {;main.c: 811:         UART_TxChar(str[n]);
  7713     0C81  0836               	movf	i1UART_TxString@n,w
  7714     0C82  0735               	addwf	i1UART_TxString@str,w
  7715     0C83  00B4               	movwf	??i1_UART_TxString
  7716     0C84  0834               	movf	??i1_UART_TxString,w
  7717     0C85  0084               	movwf	4
  7718     0C86  0800               	movf	0,w
  7719     0C87  160A  118A  2560  120A  158A  	fcall	i1_UART_TxChar
  7720     0C8C                     i1l2650:
  7721                           
  7722                           ;main.c: 812:         n++;
  7723     0C8C  3001               	movlw	1
  7724     0C8D  1283               	bcf	3,5	;RP0=0, select bank0
  7725     0C8E  1303               	bcf	3,6	;RP1=0, select bank0
  7726     0C8F  07B6               	addwf	i1UART_TxString@n,f
  7727     0C90  1803               	skipnc
  7728     0C91  0AB7               	incf	i1UART_TxString@n+1,f
  7729     0C92  3000               	movlw	0
  7730     0C93  07B7               	addwf	i1UART_TxString@n+1,f
  7731     0C94                     i1l2652:
  7732                           
  7733                           ;main.c: 809:     while(str[n] != '\0')
  7734     0C94  0836               	movf	i1UART_TxString@n,w
  7735     0C95  0735               	addwf	i1UART_TxString@str,w
  7736     0C96  00B4               	movwf	??i1_UART_TxString
  7737     0C97  0834               	movf	??i1_UART_TxString,w
  7738     0C98  0084               	movwf	4
  7739     0C99  1783               	bsf	3,7	;select IRP bank2
  7740     0C9A  0800               	movf	0,w
  7741     0C9B  1D03               	btfss	3,2
  7742     0C9C  2C9E               	goto	u256_21
  7743     0C9D  2C9F               	goto	u256_20
  7744     0C9E                     u256_21:
  7745     0C9E  2C81               	goto	i1l2648
  7746     0C9F                     u256_20:
  7747     0C9F                     i1l2654:
  7748                           
  7749                           ;main.c: 815:     if(is_ACK == 0)
  7750     0C9F  0833               	movf	i1UART_TxString@is_ACK,w
  7751     0CA0  1D03               	btfss	3,2
  7752     0CA1  2CA3               	goto	u257_21
  7753     0CA2  2CA4               	goto	u257_20
  7754     0CA3                     u257_21:
  7755     0CA3  2CF3               	goto	i1l317
  7756     0CA4                     u257_20:
  7757     0CA4                     i1l2656:
  7758                           
  7759                           ;main.c: 816:     {;main.c: 819:         srand(milliseconds);
  7760     0CA4  1683               	bsf	3,5	;RP0=1, select bank1
  7761     0CA5  1303               	bcf	3,6	;RP1=0, select bank1
  7762     0CA6  0869               	movf	(_milliseconds+1)^(0+128),w
  7763     0CA7  00F1               	movwf	i1srand@x+1
  7764     0CA8  0868               	movf	_milliseconds^(0+128),w
  7765     0CA9  00F0               	movwf	i1srand@x
  7766     0CAA  160A  118A  254E  120A  158A  	fcall	i1_srand
  7767     0CAF                     i1l2658:
  7768                           
  7769                           ;main.c: 820:         milliseconds = 0;
  7770     0CAF  3000               	movlw	0
  7771     0CB0  1683               	bsf	3,5	;RP0=1, select bank1
  7772     0CB1  1303               	bcf	3,6	;RP1=0, select bank1
  7773     0CB2  00EB               	movwf	(_milliseconds+3)^(0+128)
  7774     0CB3  3000               	movlw	0
  7775     0CB4  00EA               	movwf	(_milliseconds+2)^(0+128)
  7776     0CB5  3000               	movlw	0
  7777     0CB6  00E9               	movwf	(_milliseconds+1)^(0+128)
  7778     0CB7  3000               	movlw	0
  7779     0CB8  00E8               	movwf	_milliseconds^(0+128)
  7780     0CB9                     i1l2660:
  7781                           
  7782                           ;main.c: 822:         seconds = ((rand()%10)+5) * 250;
  7783     0CB9  300A               	movlw	10
  7784     0CBA  1283               	bcf	3,5	;RP0=0, select bank0
  7785     0CBB  1303               	bcf	3,6	;RP1=0, select bank0
  7786     0CBC  00A7               	movwf	i1___awmod@divisor
  7787     0CBD  3000               	movlw	0
  7788     0CBE  00A8               	movwf	i1___awmod@divisor+1
  7789     0CBF  160A  118A  276F  120A  158A  	fcall	i1_rand
  7790     0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  7791     0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  7792     0CC6  0821               	movf	?i1_rand+1,w
  7793     0CC7  00AA               	movwf	i1___awmod@dividend+1
  7794     0CC8  0820               	movf	?i1_rand,w
  7795     0CC9  00A9               	movwf	i1___awmod@dividend
  7796     0CCA  120A  158A  20CD  120A  158A  	fcall	i1___awmod
  7797     0CCF  1283               	bcf	3,5	;RP0=0, select bank0
  7798     0CD0  1303               	bcf	3,6	;RP1=0, select bank0
  7799     0CD1  0827               	movf	?i1___awmod,w
  7800     0CD2  3E05               	addlw	5
  7801     0CD3  00AD               	movwf	i1___wmul@multiplier
  7802     0CD4  0828               	movf	?i1___awmod+1,w
  7803     0CD5  1803               	skipnc
  7804     0CD6  3E01               	addlw	1
  7805     0CD7  3E00               	addlw	0
  7806     0CD8  00AE               	movwf	i1___wmul@multiplier+1
  7807     0CD9  30FA               	movlw	250
  7808     0CDA  00AF               	movwf	i1___wmul@multiplicand
  7809     0CDB  3000               	movlw	0
  7810     0CDC  00B0               	movwf	i1___wmul@multiplicand+1
  7811     0CDD  160A  118A  25C5  120A  158A  	fcall	i1___wmul
  7812     0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  7813     0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  7814     0CE4  082D               	movf	?i1___wmul,w
  7815     0CE5  1683               	bsf	3,5	;RP0=1, select bank1
  7816     0CE6  1303               	bcf	3,6	;RP1=0, select bank1
  7817     0CE7  00E4               	movwf	_seconds^(0+128)
  7818     0CE8  1283               	bcf	3,5	;RP0=0, select bank0
  7819     0CE9  1303               	bcf	3,6	;RP1=0, select bank0
  7820     0CEA  082E               	movf	?i1___wmul+1,w
  7821     0CEB  1683               	bsf	3,5	;RP0=1, select bank1
  7822     0CEC  1303               	bcf	3,6	;RP1=0, select bank1
  7823     0CED  00E5               	movwf	(_seconds+1)^(0+128)
  7824     0CEE  3000               	movlw	0
  7825     0CEF  1BE5               	btfsc	(_seconds+1)^(0+128),7
  7826     0CF0  30FF               	movlw	255
  7827     0CF1  00E6               	movwf	(_seconds+2)^(0+128)
  7828     0CF2  00E7               	movwf	(_seconds+3)^(0+128)
  7829     0CF3                     i1l317:
  7830     0CF3  0008               	return
  7831     0CF4                     __end_ofi1_UART_TxString:
  7832                           
  7833                           	psect	text31
  7834     154E                     __ptext31:	
  7835 ;; *************** function i1_srand *****************
  7836 ;; Defined at:
  7837 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  x               2    0[COMMON] unsigned int 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;		None
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  1    wreg      void 
  7844 ;; Registers used:
  7845 ;;		wreg
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7851 ;;      Params:         2       0       0       0       0
  7852 ;;      Locals:         0       0       0       0       0
  7853 ;;      Temps:          0       0       0       0       0
  7854 ;;      Totals:         2       0       0       0       0
  7855 ;;Total ram usage:        2 bytes
  7856 ;; Hardware stack levels used: 1
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		i1_UART_TxString
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864     154E                     i1_srand:	
  7865                           ;psect for function i1_srand
  7866                           
  7867     154E                     i1l2426:	
  7868                           ;incstack = 0
  7869                           ; Regs used in i1_srand: [wreg]
  7870                           
  7871     154E  0870               	movf	i1srand@x,w
  7872     154F  1283               	bcf	3,5	;RP0=0, select bank0
  7873     1550  1303               	bcf	3,6	;RP1=0, select bank0
  7874     1551  00D0               	movwf	_randx
  7875     1552  0871               	movf	i1srand@x+1,w
  7876     1553  00D1               	movwf	_randx+1
  7877     1554  01D2               	clrf	_randx+2
  7878     1555  01D3               	clrf	_randx+3
  7879     1556                     i1l905:
  7880     1556  0008               	return
  7881     1557                     __end_ofi1_srand:
  7882                           
  7883                           	psect	text32
  7884     176F                     __ptext32:	
  7885 ;; *************** function i1_rand *****************
  7886 ;; Defined at:
  7887 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  2    0[BANK0 ] int 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0, pclath, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7901 ;;      Params:         0       2       0       0       0
  7902 ;;      Locals:         0       0       0       0       0
  7903 ;;      Temps:          0       5       0       0       0
  7904 ;;      Totals:         0       7       0       0       0
  7905 ;;Total ram usage:        7 bytes
  7906 ;; Hardware stack levels used: 1
  7907 ;; Hardware stack levels required when called: 1
  7908 ;; This function calls:
  7909 ;;		i1___lmul
  7910 ;; This function is called by:
  7911 ;;		i1_UART_TxString
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915     176F                     i1_rand:	
  7916                           ;psect for function i1_rand
  7917                           
  7918     176F                     i1l2428:	
  7919                           ;incstack = 0
  7920                           ; Regs used in i1_rand: [wreg+status,2+status,0+pclath+cstack]
  7921                           
  7922     176F  1283               	bcf	3,5	;RP0=0, select bank0
  7923     1770  1303               	bcf	3,6	;RP1=0, select bank0
  7924     1771  0853               	movf	_randx+3,w
  7925     1772  00F3               	movwf	i1___lmul@multiplier+3
  7926     1773  0852               	movf	_randx+2,w
  7927     1774  00F2               	movwf	i1___lmul@multiplier+2
  7928     1775  0851               	movf	_randx+1,w
  7929     1776  00F1               	movwf	i1___lmul@multiplier+1
  7930     1777  0850               	movf	_randx,w
  7931     1778  00F0               	movwf	i1___lmul@multiplier
  7932     1779  3041               	movlw	65
  7933     177A  00F7               	movwf	i1___lmul@multiplicand+3
  7934     177B  30C6               	movlw	198
  7935     177C  00F6               	movwf	i1___lmul@multiplicand+2
  7936     177D  304E               	movlw	78
  7937     177E  00F5               	movwf	i1___lmul@multiplicand+1
  7938     177F  306D               	movlw	109
  7939     1780  00F4               	movwf	i1___lmul@multiplicand
  7940     1781  160A  118A  2729  160A  118A  	fcall	i1___lmul
  7941     1786  0873               	movf	?i1___lmul+3,w
  7942     1787  1283               	bcf	3,5	;RP0=0, select bank0
  7943     1788  1303               	bcf	3,6	;RP1=0, select bank0
  7944     1789  00D3               	movwf	_randx+3
  7945     178A  0872               	movf	?i1___lmul+2,w
  7946     178B  00D2               	movwf	_randx+2
  7947     178C  0871               	movf	?i1___lmul+1,w
  7948     178D  00D1               	movwf	_randx+1
  7949     178E  0870               	movf	?i1___lmul,w
  7950     178F  00D0               	movwf	_randx
  7951     1790                     i1l2430:
  7952     1790  3039               	movlw	57
  7953     1791  07D0               	addwf	_randx,f
  7954     1792  3030               	movlw	48
  7955     1793  1803               	skipnc
  7956     1794  3031               	movlw	49
  7957     1795  07D1               	addwf	_randx+1,f
  7958     1796  3000               	movlw	0
  7959     1797  1803               	skipnc
  7960     1798  3001               	movlw	1
  7961     1799  07D2               	addwf	_randx+2,f
  7962     179A  3000               	movlw	0
  7963     179B  1803               	skipnc
  7964     179C  3001               	movlw	1
  7965     179D  07D3               	addwf	_randx+3,f
  7966     179E                     i1l2432:
  7967     179E  0850               	movf	_randx,w
  7968     179F  00A2               	movwf	??i1_rand
  7969     17A0  0851               	movf	_randx+1,w
  7970     17A1  00A3               	movwf	??i1_rand+1
  7971     17A2  0852               	movf	_randx+2,w
  7972     17A3  00A4               	movwf	??i1_rand+2
  7973     17A4  0853               	movf	_randx+3,w
  7974     17A5  00A5               	movwf	??i1_rand+3
  7975     17A6  3010               	movlw	16
  7976     17A7  00A6               	movwf	??i1_rand+4
  7977     17A8                     u224_25:
  7978     17A8  0D25               	rlf	??i1_rand+3,w
  7979     17A9  0CA5               	rrf	??i1_rand+3,f
  7980     17AA  0CA4               	rrf	??i1_rand+2,f
  7981     17AB  0CA3               	rrf	??i1_rand+1,f
  7982     17AC  0CA2               	rrf	??i1_rand,f
  7983     17AD                     u224_20:
  7984     17AD  0BA6               	decfsz	??i1_rand+4,f
  7985     17AE  2FA8               	goto	u224_25
  7986     17AF  30FF               	movlw	255
  7987     17B0  0522               	andwf	??i1_rand,w
  7988     17B1  00A0               	movwf	?i1_rand
  7989     17B2  307F               	movlw	127
  7990     17B3  0523               	andwf	??i1_rand+1,w
  7991     17B4  00A1               	movwf	?i1_rand+1
  7992     17B5                     i1l908:
  7993     17B5  0008               	return
  7994     17B6                     __end_ofi1_rand:
  7995                           
  7996                           	psect	text33
  7997     1729                     __ptext33:	
  7998 ;; *************** function i1___lmul *****************
  7999 ;; Defined at:
  8000 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;  multiplier      4    0[COMMON] unsigned long 
  8003 ;;  multiplicand    4    4[COMMON] unsigned long 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  product         4    9[COMMON] unsigned long 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  4    0[COMMON] unsigned long 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8015 ;;      Params:         8       0       0       0       0
  8016 ;;      Locals:         4       0       0       0       0
  8017 ;;      Temps:          1       0       0       0       0
  8018 ;;      Totals:        13       0       0       0       0
  8019 ;;Total ram usage:       13 bytes
  8020 ;; Hardware stack levels used: 1
  8021 ;; This function calls:
  8022 ;;		Nothing
  8023 ;; This function is called by:
  8024 ;;		i1_rand
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028     1729                     i1___lmul:	
  8029                           ;psect for function i1___lmul
  8030                           
  8031     1729                     i1l2116:	
  8032                           ;incstack = 0
  8033                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  8034                           
  8035     1729  3000               	movlw	0
  8036     172A  00FC               	movwf	i1___lmul@product+3
  8037     172B  3000               	movlw	0
  8038     172C  00FB               	movwf	i1___lmul@product+2
  8039     172D  3000               	movlw	0
  8040     172E  00FA               	movwf	i1___lmul@product+1
  8041     172F  3000               	movlw	0
  8042     1730  00F9               	movwf	i1___lmul@product
  8043     1731                     i1l2118:
  8044     1731  1C70               	btfss	i1___lmul@multiplier,0
  8045     1732  2F34               	goto	u173_21
  8046     1733  2F35               	goto	u173_20
  8047     1734                     u173_21:
  8048     1734  2F4C               	goto	i1l2122
  8049     1735                     u173_20:
  8050     1735                     i1l2120:
  8051     1735  0874               	movf	i1___lmul@multiplicand,w
  8052     1736  07F9               	addwf	i1___lmul@product,f
  8053     1737  0875               	movf	i1___lmul@multiplicand+1,w
  8054     1738  1103               	clrz
  8055     1739  1803               	skipnc
  8056     173A  3E01               	addlw	1
  8057     173B  1903               	skipnz
  8058     173C  2F3E               	goto	u174_21
  8059     173D  07FA               	addwf	i1___lmul@product+1,f
  8060     173E                     u174_21:
  8061     173E  0876               	movf	i1___lmul@multiplicand+2,w
  8062     173F  1103               	clrz
  8063     1740  1803               	skipnc
  8064     1741  3E01               	addlw	1
  8065     1742  1903               	skipnz
  8066     1743  2F45               	goto	u174_22
  8067     1744  07FB               	addwf	i1___lmul@product+2,f
  8068     1745                     u174_22:
  8069     1745  0877               	movf	i1___lmul@multiplicand+3,w
  8070     1746  1103               	clrz
  8071     1747  1803               	skipnc
  8072     1748  3E01               	addlw	1
  8073     1749  1903               	skipnz
  8074     174A  2F4C               	goto	u174_23
  8075     174B  07FC               	addwf	i1___lmul@product+3,f
  8076     174C                     u174_23:
  8077     174C                     i1l2122:
  8078     174C  3001               	movlw	1
  8079     174D  00F8               	movwf	??i1___lmul
  8080     174E                     u175_25:
  8081     174E  1003               	clrc
  8082     174F  0DF4               	rlf	i1___lmul@multiplicand,f
  8083     1750  0DF5               	rlf	i1___lmul@multiplicand+1,f
  8084     1751  0DF6               	rlf	i1___lmul@multiplicand+2,f
  8085     1752  0DF7               	rlf	i1___lmul@multiplicand+3,f
  8086     1753  0BF8               	decfsz	??i1___lmul,f
  8087     1754  2F4E               	goto	u175_25
  8088     1755                     i1l2124:
  8089     1755  3001               	movlw	1
  8090     1756                     u176_25:
  8091     1756  1003               	clrc
  8092     1757  0CF3               	rrf	i1___lmul@multiplier+3,f
  8093     1758  0CF2               	rrf	i1___lmul@multiplier+2,f
  8094     1759  0CF1               	rrf	i1___lmul@multiplier+1,f
  8095     175A  0CF0               	rrf	i1___lmul@multiplier,f
  8096     175B  3EFF               	addlw	-1
  8097     175C  1D03               	skipz
  8098     175D  2F56               	goto	u176_25
  8099     175E  0873               	movf	i1___lmul@multiplier+3,w
  8100     175F  0472               	iorwf	i1___lmul@multiplier+2,w
  8101     1760  0471               	iorwf	i1___lmul@multiplier+1,w
  8102     1761  0470               	iorwf	i1___lmul@multiplier,w
  8103     1762  1D03               	skipz
  8104     1763  2F65               	goto	u177_21
  8105     1764  2F66               	goto	u177_20
  8106     1765                     u177_21:
  8107     1765  2F31               	goto	i1l2118
  8108     1766                     u177_20:
  8109     1766                     i1l2126:
  8110     1766  087C               	movf	i1___lmul@product+3,w
  8111     1767  00F3               	movwf	?i1___lmul+3
  8112     1768  087B               	movf	i1___lmul@product+2,w
  8113     1769  00F2               	movwf	?i1___lmul+2
  8114     176A  087A               	movf	i1___lmul@product+1,w
  8115     176B  00F1               	movwf	?i1___lmul+1
  8116     176C  0879               	movf	i1___lmul@product,w
  8117     176D  00F0               	movwf	?i1___lmul
  8118     176E                     i1l466:
  8119     176E  0008               	return
  8120     176F                     __end_ofi1___lmul:
  8121                           
  8122                           	psect	text34
  8123     15C5                     __ptext34:	
  8124 ;; *************** function i1___wmul *****************
  8125 ;; Defined at:
  8126 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;  multiplier      2   13[BANK0 ] unsigned int 
  8129 ;;  multiplicand    2   15[BANK0 ] unsigned int 
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  product         2   17[BANK0 ] unsigned int 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  2   13[BANK0 ] unsigned int 
  8134 ;; Registers used:
  8135 ;;		wreg, status,2, status,0
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8141 ;;      Params:         0       4       0       0       0
  8142 ;;      Locals:         0       2       0       0       0
  8143 ;;      Temps:          0       0       0       0       0
  8144 ;;      Totals:         0       6       0       0       0
  8145 ;;Total ram usage:        6 bytes
  8146 ;; Hardware stack levels used: 1
  8147 ;; This function calls:
  8148 ;;		Nothing
  8149 ;; This function is called by:
  8150 ;;		i1_UART_TxString
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154     15C5                     i1___wmul:	
  8155                           ;psect for function i1___wmul
  8156                           
  8157     15C5                     i1l2374:	
  8158                           ;incstack = 0
  8159                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  8160                           
  8161     15C5  1283               	bcf	3,5	;RP0=0, select bank0
  8162     15C6  1303               	bcf	3,6	;RP1=0, select bank0
  8163     15C7  01B1               	clrf	i1___wmul@product
  8164     15C8  01B2               	clrf	i1___wmul@product+1
  8165     15C9                     i1l2376:
  8166     15C9  1C2D               	btfss	i1___wmul@multiplier,0
  8167     15CA  2DCC               	goto	u211_21
  8168     15CB  2DCD               	goto	u211_20
  8169     15CC                     u211_21:
  8170     15CC  2DD3               	goto	i1l452
  8171     15CD                     u211_20:
  8172     15CD                     i1l2378:
  8173     15CD  082F               	movf	i1___wmul@multiplicand,w
  8174     15CE  07B1               	addwf	i1___wmul@product,f
  8175     15CF  1803               	skipnc
  8176     15D0  0AB2               	incf	i1___wmul@product+1,f
  8177     15D1  0830               	movf	i1___wmul@multiplicand+1,w
  8178     15D2  07B2               	addwf	i1___wmul@product+1,f
  8179     15D3                     i1l452:
  8180     15D3  3001               	movlw	1
  8181     15D4                     u212_25:
  8182     15D4  1003               	clrc
  8183     15D5  0DAF               	rlf	i1___wmul@multiplicand,f
  8184     15D6  0DB0               	rlf	i1___wmul@multiplicand+1,f
  8185     15D7  3EFF               	addlw	-1
  8186     15D8  1D03               	skipz
  8187     15D9  2DD4               	goto	u212_25
  8188     15DA                     i1l2380:
  8189     15DA  3001               	movlw	1
  8190     15DB                     u213_25:
  8191     15DB  1003               	clrc
  8192     15DC  0CAE               	rrf	i1___wmul@multiplier+1,f
  8193     15DD  0CAD               	rrf	i1___wmul@multiplier,f
  8194     15DE  3EFF               	addlw	-1
  8195     15DF  1D03               	skipz
  8196     15E0  2DDB               	goto	u213_25
  8197     15E1                     i1l2382:
  8198     15E1  082D               	movf	i1___wmul@multiplier,w
  8199     15E2  042E               	iorwf	i1___wmul@multiplier+1,w
  8200     15E3  1D03               	btfss	3,2
  8201     15E4  2DE6               	goto	u214_21
  8202     15E5  2DE7               	goto	u214_20
  8203     15E6                     u214_21:
  8204     15E6  2DC9               	goto	i1l2376
  8205     15E7                     u214_20:
  8206     15E7                     i1l2384:
  8207     15E7  0832               	movf	i1___wmul@product+1,w
  8208     15E8  00AE               	movwf	?i1___wmul+1
  8209     15E9  0831               	movf	i1___wmul@product,w
  8210     15EA  00AD               	movwf	?i1___wmul
  8211     15EB                     i1l454:
  8212     15EB  0008               	return
  8213     15EC                     __end_ofi1___wmul:
  8214                           
  8215                           	psect	text35
  8216     08CD                     __ptext35:	
  8217 ;; *************** function i1___awmod *****************
  8218 ;; Defined at:
  8219 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  divisor         2    7[BANK0 ] int 
  8222 ;;  dividend        2    9[BANK0 ] int 
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;  sign            1   12[BANK0 ] unsigned char 
  8225 ;;  counter         1   11[BANK0 ] unsigned char 
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  2    7[BANK0 ] int 
  8228 ;; Registers used:
  8229 ;;		wreg, status,2, status,0
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8235 ;;      Params:         0       4       0       0       0
  8236 ;;      Locals:         0       2       0       0       0
  8237 ;;      Temps:          1       0       0       0       0
  8238 ;;      Totals:         1       6       0       0       0
  8239 ;;Total ram usage:        7 bytes
  8240 ;; Hardware stack levels used: 1
  8241 ;; This function calls:
  8242 ;;		Nothing
  8243 ;; This function is called by:
  8244 ;;		i1_UART_TxString
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248     08CD                     i1___awmod:	
  8249                           ;psect for function i1___awmod
  8250                           
  8251     08CD                     i1l2388:	
  8252                           ;incstack = 0
  8253                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  8254                           
  8255     08CD  1283               	bcf	3,5	;RP0=0, select bank0
  8256     08CE  1303               	bcf	3,6	;RP1=0, select bank0
  8257     08CF  01AC               	clrf	i1___awmod@sign
  8258     08D0                     i1l2390:
  8259     08D0  1FAA               	btfss	i1___awmod@dividend+1,7
  8260     08D1  28D3               	goto	u215_21
  8261     08D2  28D4               	goto	u215_20
  8262     08D3                     u215_21:
  8263     08D3  28DB               	goto	i1l2396
  8264     08D4                     u215_20:
  8265     08D4                     i1l2392:
  8266     08D4  09A9               	comf	i1___awmod@dividend,f
  8267     08D5  09AA               	comf	i1___awmod@dividend+1,f
  8268     08D6  0AA9               	incf	i1___awmod@dividend,f
  8269     08D7  1903               	skipnz
  8270     08D8  0AAA               	incf	i1___awmod@dividend+1,f
  8271     08D9                     i1l2394:
  8272     08D9  01AC               	clrf	i1___awmod@sign
  8273     08DA  0AAC               	incf	i1___awmod@sign,f
  8274     08DB                     i1l2396:
  8275     08DB  1FA8               	btfss	i1___awmod@divisor+1,7
  8276     08DC  28DE               	goto	u216_21
  8277     08DD  28DF               	goto	u216_20
  8278     08DE                     u216_21:
  8279     08DE  28E4               	goto	i1l2400
  8280     08DF                     u216_20:
  8281     08DF                     i1l2398:
  8282     08DF  09A7               	comf	i1___awmod@divisor,f
  8283     08E0  09A8               	comf	i1___awmod@divisor+1,f
  8284     08E1  0AA7               	incf	i1___awmod@divisor,f
  8285     08E2  1903               	skipnz
  8286     08E3  0AA8               	incf	i1___awmod@divisor+1,f
  8287     08E4                     i1l2400:
  8288     08E4  0827               	movf	i1___awmod@divisor,w
  8289     08E5  0428               	iorwf	i1___awmod@divisor+1,w
  8290     08E6  1903               	btfsc	3,2
  8291     08E7  28E9               	goto	u217_21
  8292     08E8  28EA               	goto	u217_20
  8293     08E9                     u217_21:
  8294     08E9  2919               	goto	i1l2418
  8295     08EA                     u217_20:
  8296     08EA                     i1l2402:
  8297     08EA  01AB               	clrf	i1___awmod@counter
  8298     08EB  0AAB               	incf	i1___awmod@counter,f
  8299     08EC  28F8               	goto	i1l2408
  8300     08ED                     i1l2404:
  8301     08ED  3001               	movlw	1
  8302     08EE                     u218_25:
  8303     08EE  1003               	clrc
  8304     08EF  0DA7               	rlf	i1___awmod@divisor,f
  8305     08F0  0DA8               	rlf	i1___awmod@divisor+1,f
  8306     08F1  3EFF               	addlw	-1
  8307     08F2  1D03               	skipz
  8308     08F3  28EE               	goto	u218_25
  8309     08F4                     i1l2406:
  8310     08F4  3001               	movlw	1
  8311     08F5  00FD               	movwf	??i1___awmod
  8312     08F6  087D               	movf	??i1___awmod,w
  8313     08F7  07AB               	addwf	i1___awmod@counter,f
  8314     08F8                     i1l2408:
  8315     08F8  1FA8               	btfss	i1___awmod@divisor+1,7
  8316     08F9  28FB               	goto	u219_21
  8317     08FA  28FC               	goto	u219_20
  8318     08FB                     u219_21:
  8319     08FB  28ED               	goto	i1l2404
  8320     08FC                     u219_20:
  8321     08FC                     i1l2410:
  8322     08FC  0828               	movf	i1___awmod@divisor+1,w
  8323     08FD  022A               	subwf	i1___awmod@dividend+1,w
  8324     08FE  1D03               	skipz
  8325     08FF  2902               	goto	u220_25
  8326     0900  0827               	movf	i1___awmod@divisor,w
  8327     0901  0229               	subwf	i1___awmod@dividend,w
  8328     0902                     u220_25:
  8329     0902  1C03               	skipc
  8330     0903  2905               	goto	u220_21
  8331     0904  2906               	goto	u220_20
  8332     0905                     u220_21:
  8333     0905  290C               	goto	i1l2414
  8334     0906                     u220_20:
  8335     0906                     i1l2412:
  8336     0906  0827               	movf	i1___awmod@divisor,w
  8337     0907  02A9               	subwf	i1___awmod@dividend,f
  8338     0908  0828               	movf	i1___awmod@divisor+1,w
  8339     0909  1C03               	skipc
  8340     090A  03AA               	decf	i1___awmod@dividend+1,f
  8341     090B  02AA               	subwf	i1___awmod@dividend+1,f
  8342     090C                     i1l2414:
  8343     090C  3001               	movlw	1
  8344     090D                     u221_25:
  8345     090D  1003               	clrc
  8346     090E  0CA8               	rrf	i1___awmod@divisor+1,f
  8347     090F  0CA7               	rrf	i1___awmod@divisor,f
  8348     0910  3EFF               	addlw	-1
  8349     0911  1D03               	skipz
  8350     0912  290D               	goto	u221_25
  8351     0913                     i1l2416:
  8352     0913  3001               	movlw	1
  8353     0914  02AB               	subwf	i1___awmod@counter,f
  8354     0915  1D03               	btfss	3,2
  8355     0916  2918               	goto	u222_21
  8356     0917  2919               	goto	u222_20
  8357     0918                     u222_21:
  8358     0918  28FC               	goto	i1l2410
  8359     0919                     u222_20:
  8360     0919                     i1l2418:
  8361     0919  082C               	movf	i1___awmod@sign,w
  8362     091A  1903               	btfsc	3,2
  8363     091B  291D               	goto	u223_21
  8364     091C  291E               	goto	u223_20
  8365     091D                     u223_21:
  8366     091D  2923               	goto	i1l2422
  8367     091E                     u223_20:
  8368     091E                     i1l2420:
  8369     091E  09A9               	comf	i1___awmod@dividend,f
  8370     091F  09AA               	comf	i1___awmod@dividend+1,f
  8371     0920  0AA9               	incf	i1___awmod@dividend,f
  8372     0921  1903               	skipnz
  8373     0922  0AAA               	incf	i1___awmod@dividend+1,f
  8374     0923                     i1l2422:
  8375     0923  082A               	movf	i1___awmod@dividend+1,w
  8376     0924  00A8               	movwf	?i1___awmod+1
  8377     0925  0829               	movf	i1___awmod@dividend,w
  8378     0926  00A7               	movwf	?i1___awmod
  8379     0927                     i1l618:
  8380     0927  0008               	return
  8381     0928                     __end_ofi1___awmod:
  8382                           
  8383                           	psect	text36
  8384     1560                     __ptext36:	
  8385 ;; *************** function i1_UART_TxChar *****************
  8386 ;; Defined at:
  8387 ;;		line 795 in file "main.c"
  8388 ;; Parameters:    Size  Location     Type
  8389 ;;  ch              1    wreg     unsigned char 
  8390 ;; Auto vars:     Size  Location     Type
  8391 ;;  ch              1    1[COMMON] unsigned char 
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  1    wreg      void 
  8394 ;; Registers used:
  8395 ;;		wreg, status,2, status,0
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8401 ;;      Params:         0       0       0       0       0
  8402 ;;      Locals:         1       0       0       0       0
  8403 ;;      Temps:          1       0       0       0       0
  8404 ;;      Totals:         2       0       0       0       0
  8405 ;;Total ram usage:        2 bytes
  8406 ;; Hardware stack levels used: 1
  8407 ;; This function calls:
  8408 ;;		Nothing
  8409 ;; This function is called by:
  8410 ;;		i1_UART_TxString
  8411 ;; This function uses a non-reentrant model
  8412 ;;
  8413                           
  8414     1560                     i1_UART_TxChar:	
  8415                           ;psect for function i1_UART_TxChar
  8416                           
  8417                           
  8418                           ;incstack = 0
  8419                           ; Regs used in i1_UART_TxChar: [wreg+status,2+status,0]
  8420                           ;i1UART_TxChar@ch stored from wreg
  8421     1560  00F1               	movwf	i1UART_TxChar@ch
  8422     1561                     i1l2368:
  8423     1561                     i1l307:	
  8424                           ;main.c: 795: void UART_TxChar(char ch);main.c: 796: {;main.c: 798:     while(!(PIR1 & 0
      +                          x10));
  8425                           
  8426     1561  1283               	bcf	3,5	;RP0=0, select bank0
  8427     1562  1303               	bcf	3,6	;RP1=0, select bank0
  8428     1563  1E0C               	btfss	12,4	;volatile
  8429     1564  2D66               	goto	u210_21
  8430     1565  2D67               	goto	u210_20
  8431     1566                     u210_21:
  8432     1566  2D61               	goto	i1l307
  8433     1567                     u210_20:
  8434     1567                     i1l2370:
  8435                           
  8436                           ;main.c: 800:     PIR1 &= ~0x10;
  8437     1567  30EF               	movlw	239
  8438     1568  00F0               	movwf	??i1_UART_TxChar
  8439     1569  0870               	movf	??i1_UART_TxChar,w
  8440     156A  058C               	andwf	12,f	;volatile
  8441     156B                     i1l2372:
  8442                           
  8443                           ;main.c: 802:     TXREG = ch;
  8444     156B  0871               	movf	i1UART_TxChar@ch,w
  8445     156C  0099               	movwf	25	;volatile
  8446     156D                     i1l310:
  8447     156D  0008               	return
  8448     156E                     __end_ofi1_UART_TxChar:
  8449     007E                     btemp	set	126	;btemp
  8450     007E                     wtemp0	set	126
  8451                           
  8452                           	psect	idloc
  8453                           
  8454                           ;Config register IDLOC0 @ 0x2000
  8455                           ;	unspecified, using default values
  8456     2000                     	org	8192
  8457     2000  3FFF               	dw	16383
  8458                           
  8459                           ;Config register IDLOC1 @ 0x2001
  8460                           ;	unspecified, using default values
  8461     2001                     	org	8193
  8462     2001  3FFF               	dw	16383
  8463                           
  8464                           ;Config register IDLOC2 @ 0x2002
  8465                           ;	unspecified, using default values
  8466     2002                     	org	8194
  8467     2002  3FFF               	dw	16383
  8468                           
  8469                           ;Config register IDLOC3 @ 0x2003
  8470                           ;	unspecified, using default values
  8471     2003                     	org	8195
  8472     2003  3FFF               	dw	16383
  8473                           
  8474                           	psect	config
  8475                           
  8476                           ;Config register CONFIG @ 0x2007
  8477                           ;	Oscillator Selection bits
  8478                           ;	FOSC = HS, HS oscillator
  8479                           ;	Watchdog Timer Enable bit
  8480                           ;	WDTE = OFF, WDT disabled
  8481                           ;	Power-up Timer Enable bit
  8482                           ;	PWRTE = ON, PWRT enabled
  8483                           ;	Brown-out Reset Enable bit
  8484                           ;	BOREN = ON, BOR enabled
  8485                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  8486                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  8487                           ;	Data EEPROM Memory Code Protection bit
  8488                           ;	CPD = OFF, Data EEPROM code protection off
  8489                           ;	Flash Program Memory Write Enable bits
  8490                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  8491                           ;	In-Circuit Debugger Mode bit
  8492                           ;	DEBUG = 0x1, unprogrammed default
  8493                           ;	Flash Program Memory Code Protection bit
  8494                           ;	CP = OFF, Code protection off
  8495     2007                     	org	8199
  8496     2007  3FF2               	dw	16370

Data Sizes:
    Strings     252
    Constant    19
    Data        7
    BSS         137
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      52
    BANK1            80     68      80
    BANK3            96     36      96
    BANK2            96      0      50

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Fill@id	PTR unsigned char  size(1) Largest target is 4
		 -> PIC_ID(BANK3[4]), 

    CompareStrings@str2	PTR unsigned char  size(1) Largest target is 17
		 -> datoTastierino(BANK3[17]), PIC_ID(BANK3[4]), 

    CompareStrings@str1	PTR unsigned char  size(2) Largest target is 17
		 -> datoSeriale(BANK0[17]), id_dest(BANK3[4]), 

    strcopy@source	PTR unsigned char  size(1) Largest target is 5
		 -> SplitPacket@part(BANK1[5]), 

    strcopy@dest	PTR unsigned char  size(2) Largest target is 17
		 -> datoSeriale(BANK0[17]), id_dest(BANK3[4]), 

    SplitPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> dato(BANK2[50]), 

    strcat@source	PTR unsigned char  size(2) Largest target is 16
		 -> STR_19(CODE[4]), STR_15(CODE[4]), STR_11(CODE[2]), main@num_rand_s_228(BANK3[16]), 
		 -> PIC_ID(BANK3[4]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Length@str	PTR unsigned char  size(2) Largest target is 50
		 -> datoSeriale(BANK0[17]), datoTastierino(BANK3[17]), id_dest(BANK3[4]), dato(BANK2[50]), 
		 -> packet(BANK3[15]), PIC_ID(BANK3[4]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_19(CODE[4]), STR_15(CODE[4]), STR_11(CODE[2]), main@num_rand_s_228(BANK3[16]), 
		 -> PIC_ID(BANK3[4]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    ConvertToString@str	PTR unsigned char  size(1) Largest target is 16
		 -> main@num_rand_s_228(BANK3[16]), PIC_ID(BANK3[4]), main@num_rand_s(BANK3[16]), 

    lcdPrint@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_22(CODE[15]), STR_21(CODE[16]), datoTastierino(BANK3[17]), STR_20(CODE[18]), 
		 -> STR_18(CODE[16]), STR_17(CODE[13]), STR_16(CODE[15]), STR_14(CODE[12]), 
		 -> STR_13(CODE[13]), STR_12(CODE[18]), STR_10(CODE[16]), STR_9(CODE[10]), 
		 -> main@num_rand_s_228(BANK3[16]), PIC_ID(BANK3[4]), STR_8(CODE[17]), STR_7(CODE[18]), 
		 -> STR_6(CODE[10]), main@num_rand_s(BANK3[16]), STR_5(CODE[12]), STR_4(CODE[10]), 
		 -> STR_3(CODE[8]), STR_2(CODE[17]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IRS in COMMON

    i1_UART_TxString->i1___awmod
    i1_rand->i1___lmul
    i1___wmul->i1___awmod

Critical Paths under _main in BANK0

    _main->_lcdSend
    _read_NumPad->___awmod
    _read_NumPad->_eeprom_write
    _read_NumPad->_srand
    _CompareStrings->_Length
    _init_PIC->_eeprom_read
    _init_PIC->_lcdSend
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _Fill->_Length
    _UART_TxString->_UART_TxChar
    _UART_TxString->___awmod
    _UART_TxString->_srand
    _rand->___lmul
    ___wmul->___awmod
    _SplitPacket->_Length
    _SplitPacket->_strcopy
    _strcat->_Length

Critical Paths under _IRS in BANK0

    _IRS->i1_UART_TxString
    i1_UART_TxString->i1___wmul
    i1___wmul->i1___awmod
    i1___awmod->i1_rand

Critical Paths under _main in BANK1

    _main->_ConvertToString
    _read_NumPad->___wmul
    _CompareStrings->_Length
    _init_PIC->_ConvertToString
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _Fill->_Length
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _UART_TxString->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _SplitPacket->_strcopy
    _ConcatToPacket->_strcat
    _strcat->_Length

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_init_PIC

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   41790
                                              4 BANK3     32    32      0
                     _CompareStrings
                     _ConcatToPacket
                    _ConvertToString
                        _SplitPacket
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                         12    12      0    4287
                                             31 BANK1     12    12      0
                     _CompareStrings
                               _Fill
                            ___awmod
                             ___wmul
                       _eeprom_write
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     152
                                             28 BANK0      2     1      1
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _CompareStrings                                       8     5      3     943
                                              5 BANK1      8     5      3
                             _Length
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             4     4      0   16890
                                              0 BANK3      4     4      0
                    _ConvertToString
                               _Fill
                          _UART_init
                        _eeprom_read
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
                           _lcdPrint
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2    4962
                                              2 BANK1      7     5      2
                            _lcdSend
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                             28 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                             28 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0    2762
                                              2 BANK1      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1    2762
                                             28 BANK0      2     1      1
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      31
                                             28 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4    1106
                                             55 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) _Fill                                                 4     4      0     808
                                              5 BANK1      4     4      0
                             _Length
 ---------------------------------------------------------------------------------
 (2) _ConvertToString                                     13     8      5    4394
                                             55 BANK1     13     8      5
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                  9     7      2    1203
                                             31 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     613
                                             28 BANK0      1     1      0
                                              0 BANK1     10     2      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     985
                                             40 BANK1     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        5     4      1    3097
                                             31 BANK1      5     4      1
                        _UART_TxChar
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     174
                                             28 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             12 BANK1      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                             28 BANK0      1     1      0
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                             25 BANK1      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                             29 BANK0      1     1      0
                                             19 BANK1      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      22
                                             28 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SplitPacket                                         17    17      0    1449
                                              8 BANK1     17    17      0
                             _Length
                            _strcopy
 ---------------------------------------------------------------------------------
 (2) _strcopy                                             10     7      3     514
                                             28 BANK0      2     2      0
                                              0 BANK1      8     5      3
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    2797
                                             17 BANK1      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                              12    10      2     685
                                              5 BANK1     12    10      2
                             _Length
 ---------------------------------------------------------------------------------
 (3) _Length                                               7     5      2     299
                                             28 BANK0      2     0      2
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IRS                                                  4     4      0     844
                                             24 BANK0      4     4      0
                    i1_UART_TxString
 ---------------------------------------------------------------------------------
 (6) i1_UART_TxString                                      5     4      1     844
                                             19 BANK0      5     4      1
                      i1_UART_TxChar
                          i1___awmod
                           i1___wmul
                             i1_rand
                            i1_srand
 ---------------------------------------------------------------------------------
 (7) i1_srand                                              2     0      2      48
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) i1_rand                                               7     5      2     144
                                              0 BANK0      7     5      2
                           i1___lmul
 ---------------------------------------------------------------------------------
 (8) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                             13 BANK0      6     2      4
                          i1___awmod (ARG)
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            7     3      4     348
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UART_TxChar                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CompareStrings
     _Length
   _ConcatToPacket
     _strcat
       _Length
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
     ___almod
     ___lmul
     _pow
   _SplitPacket
     _Length
     _strcopy
   _UART_TxString
     _UART_TxChar
     ___awmod
     ___wmul
     _rand
     _srand
   _init_PIC
     _ConvertToString
     _Fill
       _Length
     _UART_init
       ___aldiv
     _eeprom_read
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
     _lcdPrint
       _lcdSend
     _lcdSend
   _lcdPrint
   _lcdSend
   _read_NumPad
     _CompareStrings
     _Fill
     ___awmod
     ___wmul
     _eeprom_write
     _rand
     _srand

 _IRS (ROOT)
   i1_UART_TxString
     i1_UART_TxChar
     i1___awmod
       i1_rand (ARG)
         i1___lmul
     i1___wmul
       i1___awmod (ARG)
       i1_rand (ARG)
     i1_rand
     i1_srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     24      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      32      11       52.1%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     44      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      34       5       65.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     124      12        0.0%
ABS                  0      0     124       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Jul 03 15:52:52 2023

                          pc 0002             ??_CompareStrings 00A8                           _iS 003E  
                         _iT 019D                           fsr 0004          ___wmul@multiplicand 00BB  
           i1___wmul@product 0031                          l220 1675                          l301 0650  
                        l214 17FF                          l310 157B                          l223 0D47  
                        l304 1728                          l241 06FD                          l209 0FFF  
                        l226 0D6F                          l307 1571                          l251 0B20  
                        l317 0C7A                          l181 15A5                          l422 15A9  
                        l247 0986                          l424 15C4                          l184 0A4A  
                        l265 0AB0                          l193 08CC                          l441 1679  
                        l281 0528                          l530 0E0E                          l178 0C05  
                        l442 1679                          l187 163F                          l275 0492  
                        l452 15FA                          l540 0E88                          l268 158C  
                        l517 0E9D                          l445 169B                          l454 1612  
                        l527 0F25                          l199 16E8                          l448 16AC  
                        l618 09E5                          l466 0876                          l905 155F  
                        l908 0B91                          _IRS 0D70           i1UART_TxString@str 0035  
                        _pow 16AD                          fsr0 0004                          indf 0000  
               ___awmod@sign 00B8                         ?_IRS 0070                         l3000 161E  
                       l3010 163C                         l3002 1620                         l3100 0E25  
                       l3020 16D5                         l3012 16B0                         l3004 1625  
                       l3030 164B                         l3110 0E61                         l3102 0E28  
                       l3022 16E2                         l3014 16B4                         l3006 162F  
                       l3032 166B                         l3040 0835                         l3112 0E6A  
                       l3104 0E3D                         l3016 16B7                         l3008 1632  
                       l3200 09E6                         l3026 1640                         l3042 084C  
                       l2314 1557                         l3050 0E89                         l3106 0E41  
                       l3114 0E70                         l3018 16CF                         l3130 0F26  
                       l3210 0A12                         l3202 09EA                         l3122 0877  
                       l3028 1645                         l2324 1571                         l3044 085B  
                       l3036 0827                         l3060 0EB0                         l3052 0E8C  
                       l3116 0E75                         l3108 0E53                         l3140 0F58  
                       l3132 0F2C                         l3220 0A41                         l3212 0A1D  
                       l3204 09F4                         l3124 087C                         l3300 16A4  
                       l2326 1575                         l3046 086E                         l3038 0831  
                       l3310 0B6C                         l3070 0ED4                         l3062 0EB8  
                       l3054 0E90                         l3118 0E80                         l3150 0FBD  
                       l3142 0F5B                         l3134 0F30                         l3214 0A26  
                       l3206 09F7                         l3222 157C                         l3230 159B  
                       l3126 08A2                         l3302 16A5                         l2328 1579  
                       l3320 0993                         l3080 0F07                         l3072 0EDD  
                       l3064 0EC0                         l3056 0EA1                         l3152 0FDD  
                       l3144 0F5F                         l3136 0F34                         l3232 15B2  
                       l3216 0A2F                         l3208 09FE                         l3224 158D  
                       l3128 08AA                         l3160 0AB1                         l3304 16AB  
                       l3400 049E                         l3330 09A7                         l3322 0995  
                       l3314 0987                         l3306 0B21                         l3074 0EEF  
                       l3066 0EC3                         l3082 0F0D                         l3058 0EAC  
                       l3090 0DFA                         l3154 0FE3                         l3146 0F8A  
                       l3138 0F39                         l3250 0A98                         l3242 0A73  
                       l3218 0A38                         l3226 1593                         l3170 0AEF  
                       l3162 0AEB                         l3410 04B7                         l3402 04A3  
                       l3500 17EC                         l3340 09CA                         l3332 09AE  
                       l3324 0999                         l3316 098A                         l3308 0B5E  
                       l3084 0F12                         l3076 0EFD                         l3068 0ED0  
                       l3092 0DFD                         l3148 0F9C                         l3156 0FE9  
                       l3244 0A81                         l3236 0A4E                         l3228 1597  
                       l3180 0B1F                         l3420 0526                         l3412 04BD  
                       l3404 04A4                         l3270 0D41                         l3262 0CF7  
                       l3502 17F9                         l3342 09D1                         l3334 09B6  
                       l3326 099E                         l3318 098E                         l3510 0C1F  
                       l3086 0F1D                         l3078 0EFE                         l3094 0E01  
                       l3158 0FF6                         l3246 0A85                         l3238 0A65  
                       l3190 16F7                         l3430 0579                         l3422 052C  
                       l3414 0509                         l3406 04AA                         l3272 0D69  
                       l3264 0CF9                         l3280 0955                         l3520 0654  
                       l3336 09BA                         l3328 09A4                         l3344 09D7  
                       l3512 0C2A                         l3504 0C09                         l3096 0E12  
                       l3248 0A8A                         l3256 0AA1                         l3192 16F8  
                       l3184 16E9                         l3360 0BD8                         l3352 0B92  
                       l3176 0B0A                         l3168 0AED                         l3440 05A9  
                       l3432 0584                         l3416 0516                         l3408 04B1  
                       l3424 0530                         l3600 010C                         l3266 0D11  
                       l3282 095D                         l3530 068A                         l3522 0658  
                       l3346 09DC                         l3338 09C4                         l3514 0C2F  
                       l3506 0C0C                         l3098 0E1D                         l3194 1725  
                       l3186 16EF                         l3362 0BE4                         l3354 0BBE  
                       l3178 0B0E                         l3290 1693                         l3450 05BF  
                       l3442 05AB                         l3434 058B                         l3426 0535  
                       l3418 0522                         l3370 0429                         l3610 014E  
                       l3602 0124                         l3268 0D3B                         l3284 096A  
                       l3276 0928                         l3540 06B3                         l3532 0697  
                       l3524 066F                         l3348 09E1                         l3516 0C3E  
                       l3508 0C17                         l3196 1726                         l3188 16F4  
                       l3364 0BFA                         l3356 0BC4                         l3292 1696  
                       l3460 05D3                         l3452 05C1                         l3436 059D  
                       l3428 0542                         l3444 05AE                         l3380 0436  
                       l3372 042F                         l3700 02C6                         l3620 016C  
                       l3604 012F                         l3612 0151                         l3278 092D  
                       l3550 06DF                         l3542 06B8                         l3534 069D  
                       l3526 0672                         l3518 0C48                         l3198 1727  
                       l3366 0C00                         l3358 0BCF                         l3294 169A  
                       l3286 167F                         l3470 0604                         l3454 05C7  
                       l3446 05B3                         l3462 05D9                         l3438 05A2  
                       l3390 0463                         l3382 044D                         l3702 02D8  
                       l3710 0303                         l3630 01A2                         l3622 0177  
                       l3614 0156                         l3606 013A                         l3536 06A2  
                       l3552 06E1                         l3528 0680                         l3368 0C03  
                       l3296 169F                         l3288 168B                         l3472 0609  
                       l3464 05E0                         l3456 05CC                         l3448 05BA  
                       l3480 0633                         l3392 046E                         l3720 0324  
                       l3712 0306                         l3704 02E0                         l3640 01E4  
                       l3632 01BA                         l3616 015E                         l3624 018B  
                       l3608 0143                         l3490 17C9                         l3538 06A7  
                       l3546 06C4                         l3554 06E7                         l3298 16A3  
                       l3482 063A                         l3474 060F                         l3466 05FD  
                       l3458 05D1                         l3394 0483                         l3378 0430  
                       l3730 032E                         l3722 0328                         l3706 02E6  
                       l3714 0309                         l3650 01FD                         l3642 01E8  
                       l3634 01C5                         l3626 018F                         l3618 0163  
                       l3570 0089                         l3562 0069                         l3492 17CF  
                       l3548 06D7                         l3476 062C                         l3484 0646  
                       l3396 0490                         l3388 0450                         l3732 0330  
                       l3724 0329                         l3716 0310                         l3740 0357  
                       l3708 02F1                         l3660 021D                         l3652 01FF  
                       l3644 01EA                         l3636 01D0                         l3628 0199  
                       l3580 00B9                         l3572 009D                         l3564 006E  
                       l3494 17D7                         l3486 064A                         l3398 0498  
                       l3750 037B                         l3742 035C                         l3734 0331  
                       l3726 032A                         l3718 0319                         l3670 024A  
                       l3662 0222                         l3654 0200                         l3646 01EB  
                       l3638 01D9                         l3590 00E9                         l3582 00CD  
                       l3566 0075                         l3574 00A0                         l3496 17DE  
                       l3488 17B9                         l3760 03A7                         l3752 038F  
                       l3744 0362                         l3736 033F                         l3728 032C  
                       l3680 0275                         l3672 024E                         l3664 0228  
                       l3656 020E                         l3648 01F9                         l3592 00F3  
                       l3576 00A5                         l3584 00D0                         l3568 007E  
                       l3498 17E6                         l3770 03C2                         l3762 03B0  
                       l3754 039C                         l3746 0367                         l3738 034D  
                       l3690 0293                         l3682 0279                         l3674 024F  
                       l3666 0230                         l3658 0217                         l3594 00FB  
                       l3586 00D5                         l3578 00AE                         l2980 15F0  
                       l3844 0AA8                         l3780 03E3                         l3772 03C4  
                       l3764 03BB                         l3756 03A0                         l3748 0370  
                       l3692 029C                         l3684 027D                         l3676 025D  
                       l3668 0242                         l3588 00DE                         l3596 00FE  
                       l3846 06C9                         l2982 15F4                         l3790 040D  
                       l3774 03C6                         l3766 03BF                         l3758 03A2  
                       l3782 03EC                         l3694 02A7                         l3686 027F  
                       l3678 026B                         l3598 0103                         l2984 1601  
                       l2992 1616                         l3784 03F4                         l3792 0421  
                       l3776 03C7                         l3768 03C1                         l3696 02B4  
                       l3688 0288                         l2986 1608                         l2978 15EC  
                       l2994 1619                         l3786 03F9                         l3778 03D5  
                       l3698 02BE                         l2988 160E                         l2996 161A  
                       l3788 0402                         l2998 161B                         ?_pow 00BF  
                       STR_1 07F0                         STR_2 076C                         STR_3 080F  
                       STR_4 0805                         STR_5 07E4                         STR_6 07FB  
                       STR_7 0737                         STR_8 075B                         STR_9 07FB  
                       _T0IF 005A                         u2000 1575                         u2001 1574  
                       u3000 0EC0                         u3001 0EBF                         u3020 0ED4  
                       u3100 0E25                         u3021 0ED3                         u3101 0E24  
                       u3015 0EC5                         u3040 0EEF                         u3120 0E41  
                       u3200 0F30                         u4000 03F9                         u3041 0EEE  
                       u3121 0E40                         u3201 0F2F                         u4001 03F8  
                       u3130 0E53                         u3210 0F89                         u3035 0ED6  
                       u3131 0E52                         u3115 0E2C                         u3211 0F88  
                       u3300 0D51                         u3060 0F0D                         u3220 0FF6  
                       u3061 0F0C                         u3045 0EEB                         u3221 0FF5  
                       u3310 0D69                         u3070 0F12                         u3150 0E70  
                       u3230 0AEB                         u3311 0D68                         u3071 0F11  
                       u3055 0EFF                         u3151 0E6F                         u3135 0E4F  
                       u3231 0AEA                         u3320 094A                         u3400 0999  
                       u3160 0E75                         u3080 0E01                         u3240 0B09  
                       u3401 0998                         u3161 0E74                         u3145 0E62  
                       u3081 0E00                         u3225 0FF2                         u3241 0B08  
                       u4017 0469                         u3330 096A                         u3410 09A4  
                       u3090 0E12                         u3170 088A                         u3250 0B1F  
                       u3331 0969                         u3411 09A3                         u3091 0E11  
                       u4027 09F0                         u3251 0B1E                         u3235 0AE7  
                       u3340 097C                         u3260 1708                         u3180 08B4  
                       u3500 0483                         u4037 0A04                         u3501 0482  
                       u3430 09BA                         u3270 15B2                         u3190 08CC  
                       u3350 167F                         u3431 09B9                         u3271 15AF  
                       u4047 0A18                         u3191 08CB                         u3351 167E  
                       _PIE1 008C                         u3440 09C4                         u3280 0A72  
                       u3360 169A                         u3600 058B                         u3520 049E  
                       u3441 09C3                         u3425 09A8                         u3281 0A71  
                       u3265 1703                         u4057 162B                         u3361 1699  
                       u3601 058A                         u3521 049D                         u3290 0D1D  
                       u3370 16AB                         u3610 059D                         u3530 04A3  
                       u4067 1638                         u3371 16AA                         u3611 059C  
                       u3531 04A2                         u3515 0488                         u3460 09D7  
                       u3380 0B89                         u2900 16E2                         u3700 060F  
                       u3620 05A9                         u3540 04AA                         u3461 09D6  
                       u3445 09C0                         u2901 16E1                         u3285 0A6E  
                       u3701 060E                         u3621 05A8                         u3541 04A9  
                       u2910 165D                         u3470 09DC                         u3390 098E  
                       u3710 0646                         u3630 05B3                         u3550 04B1  
                       u3471 09DB                         u3455 09CB                         u3391 098D  
                       u3711 0645                         u3631 05B2                         u3551 04B0  
                       u2920 166B                         u3480 0BC4                         u3720 0650  
                       u3640 05BA                         u3560 04B7                         u3800 00A5  
                       u2921 166A                         u3385 0B84                         u2905 16DE  
                       u3481 0BC3                         u3721 064F                         u3641 05B9  
                       u3561 04B6                         u3801 00A4                         u3730 17CF  
                       u2930 0835                         u3650 05BF                         u3570 0516  
                       u3490 0463                         u3810 00D5                         u3731 17CE  
                       u2931 0834                         u3651 05BE                         u3571 0515  
                       u3491 0462                         u3811 00D4                         u2860 15F4  
                       u3740 0C2A                         u3660 05CC                         u3580 0535  
                       u3900 02C6                         u3820 0103                         u2861 15F3  
                       u2941 083E                         u3741 0C29                         u3661 05CB  
                       u3581 0534                         u3901 02C5                         u3821 0102  
                       u2942 0845                         u3750 0C2F                         u3670 05D1  
                       u3590 0542                         u3910 02D8                         u3830 015E  
                       u2943 084C                         u3751 0C2E                         u3671 05D0  
                       u3591 0541                         u3575 0512                         u3911 02D7  
                       u3831 015D                         u3760 0680                         u3680 05E0  
                       u3920 02E0                         u3840 0163                         u3761 067F  
                       u3681 05DF                         u3921 02DF                         u3841 0162  
                       u3770 068A                         u2890 160E                         u2970 086E  
                       u3690 0609                         u3930 02E6                         u3850 0199  
                       u3771 0689                         u2891 160D                         u2875 15FB  
                       u2971 086D                         u2955 0850                         u3691 0608  
                       u3931 02E5                         u3851 0198                         u3780 06FD  
                       u2980 0E90                         u3940 0310                         u3860 0222  
                       _RCIF 0065                         u3781 06FC                         u2885 1602  
                       u2965 085C                         u2981 0E8F                         u3941 030F  
                       u3861 0221                         u2990 0EA1                         u3950 035C  
                       u3870 0230                         u3790 0075                         u2991 0EA0  
                       u3951 035B                         u3871 022F                         u3855 0195  
                       u3791 0074                         u3960 0362                         u3880 0242  
                       u3785 06F9                         u3961 0361                         u3881 0241  
                       _PIR1 000C                         u3970 0367                         u3890 024A  
                       u3971 0366                         u3891 0249                         u3980 03A7  
                       u3981 03A6                         u3990 03F4                         u3991 03F3  
                       _TMR0 0001               ??_eeprom_write 003D                         _Fill 0A4B  
                       _fail 0198                         _i_id 01A1                         _dato 0110  
                       _main 0069            ConcatToPacket@pkt 00B7                         _keyf 00EC  
                       _keys 0712                         _rand 0B21            ConcatToPacket@str 00B1  
                       btemp 007E                         _type 019E                         pow@b 00C3  
                       pow@i 00C4                         pow@n 00C6                         start 0010  
            __end_ofi1_srand 1557                        ??_IRS 0038                        ??_pow 00C1  
               ?_init_NumPad 0070                 ?_init_Timer0 0070                        ?_Fill 0070  
            __end_of___aldiv 0F26              __end_of___almod 0E89                        ?_main 0070  
                      ?_rand 00AC                        _EEADR 010D                        STR_10 077D  
                      STR_11 081F                        STR_12 0749                        STR_20 0725  
                      STR_13 07CB                        STR_21 078D                        STR_14 07D8  
                      STR_22 07AD                        STR_15 081B                        STR_16 07BC  
                      STR_17 07CB                        STR_18 079D                        STR_19 0817  
            __end_of___awmod 09E6                 ?_read_NumPad 0070                        i1l310 156D  
                      i1l307 1561                        i1l317 0CF3                        i1l329 0DEF  
                      i1l452 15D3                        i1l454 15EB                        i1l618 0927  
                      i1l466 176E                        i1l905 1556                        i1l908 17B5  
                      _RCREG 001A                        _RCSTA 0018                        _SPBRG 0099  
                      _PORTB 0006                        _PORTD 0008                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _TXREG 0019  
                      _TXSTA 0098              __end_of_colMask 0725          ___lmul@multiplicand 00A4  
            __end_of_lcdSend 1640               i1___awmod@sign 002C                        _randx 0050  
                      _srand 1557             __end_ofi1___lmul 176F                        pclath 000A  
           __end_ofi1___wmul 15EC              __end_of_rowMask 0722                        status 0003  
        i1___wmul@multiplier 002D                        wtemp0 007E              __end_of_strcopy 0987  
         main@num_rand_s_228 01DE             ?i1_UART_TxString 0033                 __end_of_Fill 0AB1  
            __initialization 0013                 __end_of_main 0429                 __end_of_keys 071E  
               __end_of_rand 0B92          i1___lmul@multiplier 0070                       ??_Fill 00A5  
                     ??_main 003E                       ??_rand 00AE            strcat@length_dest 00AF  
                     _EEDATA 010C                       _EECON1 018C                       _EECON2 018D  
                     ?_srand 003C                       i1l2120 1735                       i1l2122 174C  
                     i1l2124 1755                       i1l2116 1729                       i1l2126 1766  
                     i1l2118 1731                       i1l2400 08E4                       i1l2410 08FC  
                     i1l2402 08EA                       i1l2420 091E                       i1l2412 0906  
                     i1l2404 08ED                       i1l2422 0923                       i1l2414 090C  
                     i1l2406 08F4                       i1l2430 1790                       i1l2416 0913  
                     i1l2408 08F8                       i1l2432 179E                       i1l2370 1567  
                     i1l2418 0919                       i1l2426 154E                       i1l2372 156B  
                     i1l2380 15DA                       i1l2428 176F                       i1l2390 08D0  
                     i1l2382 15E1                       i1l2374 15C5                       u210_20 1567  
                     i1l2368 1561                       i1l2392 08D4                       i1l2384 15E7  
                     i1l2376 15C9                       u210_21 1566                       i1l2394 08D9  
                     i1l2378 15CD                       i1l2650 0C8C                       i1l2396 08DB  
                     i1l2388 08CD                       i1l2660 0CB9                       i1l2652 0C94  
                     i1l2900 0D7E                       i1l2398 08DF                       i1l2654 0C9F  
                     i1l2646 0C7E                       i1l2910 0DA7                       i1l2902 0D82  
                     u211_20 15CD                       i1l2656 0CA4                       i1l2648 0C81  
                     i1l2920 0DE0                       i1l2912 0DB9                       i1l2904 0D86  
                     u211_21 15CC                       i1l2658 0CAF                       i1l2914 0DC4  
                     i1l2906 0D89                       i1l2924 0DE5                       i1l2916 0DC8  
                     i1l2908 0D8D                       i1l2918 0DD3                       i1l2926 0DEE  
                     u220_20 0906                       u220_21 0905                       u220_25 0902  
                     u212_25 15D4                       i1l2894 0D70                       i1l2896 0D74  
                     i1l2898 0D7A                       u221_25 090D                       u213_25 15DB  
                     u222_20 0919                       u214_20 15E7                       u222_21 0918  
                     u214_21 15E6                       u223_20 091E                       u215_20 08D4  
                     u223_21 091D                       u215_21 08D3                       u216_20 08DF  
                     u224_20 17AD                       u216_21 08DE                       u224_25 17A8  
                     u217_20 08EA                       _INTCON 000B                       u217_21 08E9  
                     u218_25 08EE                       u219_20 08FC                       u219_21 08FB  
                     u173_20 1735                       u173_21 1734                       u174_21 173E  
                     u174_22 1745                       u174_23 174C                       u175_25 174E  
                     u256_20 0C9F                       u280_20 0D74                       u256_21 0C9E  
                     u280_21 0D73                       u176_25 1756                       u177_20 1766  
                     u257_20 0CA4                       u281_20 0D8D                       u177_21 1765  
                     u257_21 0CA3                       u281_21 0D8C                       u282_20 0DA7  
                     u282_21 0DA6                       u283_20 0DB9                       u283_21 0DB8  
                     u283_25 0DB5                       u284_20 0DC4                       u284_21 0DC3  
                     u285_20 0DE0                       u285_21 0DDF                       _PIC_ID 01C6  
                  ??i1_srand 0072                       Fill@id 00A8        i1UART_TxString@is_ACK 0033  
                     i1_rand 176F                 ?_UART_TxChar 0070                       _Length 1640  
           __end_of_lcdPrint 08CD                       ___lmul 0827                    ??___aldiv 00D0  
                  ??___almod 003C                       ___wmul 15EC            __end_of_UART_init 1729  
                  ??___awmod 003D          ConcatToPacket@delim 00B3             __end_of_init_LCD 0A4B  
           __end_of_init_PIC 0C06                       _packet 01B3                       _old_iT 019C  
            ___awmod@divisor 00B3         __end_of_eeprom_write 16AD              ___awmod@counter 00B7  
                  ??_lcdSend 00A0                       _source 019F                       _strcat 0CF4  
          __end_ofi1___awmod 0928                       saved_w 007E                       pow@exp 00BF  
                     srand@x 003C                    ??_strcopy 00A3               _datoTastierino 01A2  
    __end_of__initialization 0065              eeprom_read@addr 003D        __end_of_UART_TxString 0C7B  
              ??_SplitPacket 00A8               __pcstackCOMMON 0070                 __pidataBANK0 0823  
               __pidataBANK1 0003                 __pidataBANK3 06FE                __end_of_srand 1560  
                  ?i1___lmul 0070                    ?i1___wmul 002D            eeprom_write@value 003C  
                    ??_srand 003E                   __pbssBANK0 003E                   __pbssBANK1 00E4  
                 __pbssBANK2 0110                   __pbssBANK3 0190                      ?i1_rand 0020  
               strcat@source 00A5                      ?_Length 003C                   __pmaintext 0069  
                    ?___lmul 00A0                      ?___wmul 00B9                   __pintentry 0004  
             ___lmul@product 00A8          __end_of_SplitPacket 06FE                   ??i1___lmul 0078  
                    ?_strcat 00A5                   ??i1___wmul 007E                    ?_lcdPrint 00A2  
     ConvertToString@n_cifre 00E3                   __stringtab 0700                    ?_init_LCD 0070  
                  ?_init_PIC 0070                      i1_srand 154E            ??_ConvertToString 00DC  
                    ___aldiv 0E89                      ___almod 0DFA                      ___awmod 0987  
                    _colMask 0722                   _initialize 01EF                      _colScan 00EE  
                    _id_dest 01C2                      _lcdSend 1613                      __ptext1 0429  
                    __ptext2 1676                      __ptext3 0AB1                      __ptext4 0B92  
                    __ptext5 0877                      __ptext6 158D                      __ptext7 157C  
                    __ptext8 09E6                      __ptext9 1613               _ConcatToPacket 17B6  
                    _compare 019A                      _maxFail 01EE             ___awmod@dividend 00B5  
           ___aldiv@dividend 00CC                      _seconds 00E4                   _keypressed 00EF  
                    _pr_succ 0195                      _rowMask 071E                      _rowScan 00ED  
                    _success 0199                   ??_lcdPrint 00A4                      clrloop0 1547  
                    _strcopy 0928         end_of_initialization 0065               main@num_rand_s 01CE  
                 ??_init_LCD 00A2                   ??_init_PIC 01CA                 _eeprom_write 1676  
             UART_TxString@n 00C1                   _pr_err_max 0196                i1_UART_TxChar 1560  
                _SplitPacket 0651             ___aldiv@quotient 00D3                 __pstringtext 0700  
                    strcat@n 00AD        i1___wmul@multiplicand 002F       __end_of_ConcatToPacket 1800  
                  _UART_init 16E9                    _PORTEbits 0009                    _TRISEbits 0089  
                  i1___awmod 08CD                ??_eeprom_read 003C                    Length@len 00A3  
                  Length@str 003C               ?i1_UART_TxChar 0070               __end_ofi1_rand 17B6  
             __end_of_Length 1676               __end_of___lmul 0877               __end_of___wmul 1613  
            ?_ConcatToPacket 00B1                   ?_UART_init 00D7               __end_of_strcat 0D70  
      i1___lmul@multiplicand 0074          start_initialization 0013                  __end_of_IRS 0DFA  
                __end_of_pow 16E9                   ?i1___awmod 0027                   init_PIC@id 01CC  
                   ??i1_rand 0022                     ??_Length 00A0              CompareStrings@i 00AC  
                   ??___lmul 003C                     ??___wmul 003E          __end_of_eeprom_read 15C5  
              ??_init_NumPad 003C                  __pdataBANK0 0050                  __pdataBANK1 00EF  
                __pdataBANK3 01EE                ??_init_Timer0 003C           i1___awmod@dividend 0029  
              ??_read_NumPad 00BF                     ??_strcat 00A7               _CompareStrings 0AB1  
                  ___latbits 0002                __pcstackBANK0 0020                __pcstackBANK1 00A0  
              __pcstackBANK3 01CA            ??i1_UART_TxString 0034             i1___lmul@product 0079  
            _ConvertToString 0F26             eeprom_write@addr 00A0                     ?i1_srand 0070  
                _datoSeriale 003F              ??i1_UART_TxChar 0070                     ?___aldiv 00C8  
                   ?___almod 00A0                     ?___awmod 00B3             ___almod@dividend 00A4  
                ??_UART_init 00DB                     ?_lcdSend 003C       __end_of_CompareStrings 0B21  
        __end_of_init_NumPad 158D          __end_of_init_Timer0 15A6                UART_TxChar@ch 003D  
                strcopy@dest 00A0                  ??i1___awmod 007D          __end_of_read_NumPad 0651  
                   ?_strcopy 00A0              ___aldiv@divisor 00C8            interrupt_function 0004  
            ___aldiv@counter 00D1               ___wmul@product 00BD          UART_TxString@is_ACK 00BF  
               _milliseconds 00E8                    clear_ram0 1546                  _eeprom_read 15A6  
              ??_UART_TxChar 003C                _UART_TxString 0C06                 ?_SplitPacket 0070  
               _old_num_rand 0190             ConvertToString@i 00E1             ConvertToString@j 00DF  
           ConvertToString@n 00D7                    lcdPrint@n 00A7                     i1___lmul 1729  
                __stringbase 0712            ___wmul@multiplier 00B9                     i1___wmul 15C5  
            ?_CompareStrings 00A5             i1UART_TxString@n 0036      __end_of_ConvertToString 1000  
          ___lmul@multiplier 00A0                     i1srand@x 0070           CompareStrings@str1 00A5  
         CompareStrings@str2 00A7                   _EECON1bits 018C               ?_UART_TxString 00BF  
           ??_ConcatToPacket 00B4            i1___awmod@divisor 0027            i1___awmod@counter 002B  
        __end_of_UART_TxChar 157C                  _init_NumPad 157C                  _init_Timer0 158D  
         __end_of__stringtab 0712                strcopy@source 00A2                  _read_NumPad 0429  
                 strcat@dest 00AC                     __ptext10 15A6                     __ptext11 16E9  
                   __ptext20 0827                     __ptext12 0A4B                     __ptext21 15EC  
                   __ptext13 0F26                     __ptext30 0C7B                     __ptext22 0987  
                   __ptext14 16AD                     __ptext31 154E                     __ptext23 156E  
                   __ptext15 0DFA                     __ptext32 176F                     __ptext24 0651  
                   __ptext16 0E89                     __ptext33 1729                     __ptext25 0928  
                   __ptext17 0C06                     __ptext34 15C5                     __ptext26 17B6  
                   __ptext18 1557                     __ptext35 08CD                     __ptext27 0CF4  
                   __ptext19 0B21                     __ptext36 1560                     __ptext28 1640  
                   __ptext29 0D70                     _lcdPrint 0877             UART_TxString@str 00C3  
              read_NumPad@id 00C9              ___almod@divisor 00A0  ConcatToPacket@packet_length 00B5  
            ___almod@counter 00A8              i1UART_TxChar@ch 0071                     _init_LCD 09E6  
                   _init_PIC 0B92                 _pr_countdown 0194                     _old_i_id 01A0  
                   _recieved 019B                     _pr_start 0197                     _num_rand 0192  
            i1_UART_TxString 0C7B                   _INTCONbits 000B             ?_ConvertToString 00D7  
                   intlevel1 0000            UART_init@baudrate 00D7              ??_UART_TxString 00C0  
        ConvertToString@temp 00DD           SplitPacket@section 00B2                    stringcode 070A  
                _UART_TxChar 156E                   Fill@length 00A6                   _OPTION_REG 0081  
          SplitPacket@i_part 00B4                  lcdSend@dato 003D                  lcdSend@tipo 003C  
         ConvertToString@str 00DB                     strcopy@n 003C                     stringtab 0700  
               ___aldiv@sign 00D2                  lcdPrint@str 00A2                 ___almod@sign 00A9  
              ?_eeprom_write 003C                   _STATUSbits 0003                 ?_eeprom_read 0070  
            SplitPacket@part 00AD               SplitPacket@len 00AB      __end_ofi1_UART_TxString 0CF4  
      __end_ofi1_UART_TxChar 156E               SplitPacket@pkt 00B6                 SplitPacket@i 00B7  
