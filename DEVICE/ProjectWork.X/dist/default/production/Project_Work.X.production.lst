

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jun 28 13:08:21 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    58                           	dabs	1,0x7E,2
    59     0000                     
    60                           ; Version 2.40
    61                           ; Generated 17/11/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC16F877A Definitions
    93                           ; 
    94                           ; SFR Addresses
    95     0000                     	;# 
    96     0001                     	;# 
    97     0002                     	;# 
    98     0003                     	;# 
    99     0004                     	;# 
   100     0005                     	;# 
   101     0006                     	;# 
   102     0007                     	;# 
   103     0008                     	;# 
   104     0009                     	;# 
   105     000A                     	;# 
   106     000B                     	;# 
   107     000C                     	;# 
   108     000D                     	;# 
   109     000E                     	;# 
   110     000E                     	;# 
   111     000F                     	;# 
   112     0010                     	;# 
   113     0011                     	;# 
   114     0012                     	;# 
   115     0013                     	;# 
   116     0014                     	;# 
   117     0015                     	;# 
   118     0015                     	;# 
   119     0016                     	;# 
   120     0017                     	;# 
   121     0018                     	;# 
   122     0019                     	;# 
   123     001A                     	;# 
   124     001B                     	;# 
   125     001B                     	;# 
   126     001C                     	;# 
   127     001D                     	;# 
   128     001E                     	;# 
   129     001F                     	;# 
   130     0081                     	;# 
   131     0085                     	;# 
   132     0086                     	;# 
   133     0087                     	;# 
   134     0088                     	;# 
   135     0089                     	;# 
   136     008C                     	;# 
   137     008D                     	;# 
   138     008E                     	;# 
   139     0091                     	;# 
   140     0092                     	;# 
   141     0093                     	;# 
   142     0094                     	;# 
   143     0098                     	;# 
   144     0099                     	;# 
   145     009C                     	;# 
   146     009D                     	;# 
   147     009E                     	;# 
   148     009F                     	;# 
   149     010C                     	;# 
   150     010D                     	;# 
   151     010E                     	;# 
   152     010F                     	;# 
   153     018C                     	;# 
   154     018D                     	;# 
   155     0000                     	;# 
   156     0001                     	;# 
   157     0002                     	;# 
   158     0003                     	;# 
   159     0004                     	;# 
   160     0005                     	;# 
   161     0006                     	;# 
   162     0007                     	;# 
   163     0008                     	;# 
   164     0009                     	;# 
   165     000A                     	;# 
   166     000B                     	;# 
   167     000C                     	;# 
   168     000D                     	;# 
   169     000E                     	;# 
   170     000E                     	;# 
   171     000F                     	;# 
   172     0010                     	;# 
   173     0011                     	;# 
   174     0012                     	;# 
   175     0013                     	;# 
   176     0014                     	;# 
   177     0015                     	;# 
   178     0015                     	;# 
   179     0016                     	;# 
   180     0017                     	;# 
   181     0018                     	;# 
   182     0019                     	;# 
   183     001A                     	;# 
   184     001B                     	;# 
   185     001B                     	;# 
   186     001C                     	;# 
   187     001D                     	;# 
   188     001E                     	;# 
   189     001F                     	;# 
   190     0081                     	;# 
   191     0085                     	;# 
   192     0086                     	;# 
   193     0087                     	;# 
   194     0088                     	;# 
   195     0089                     	;# 
   196     008C                     	;# 
   197     008D                     	;# 
   198     008E                     	;# 
   199     0091                     	;# 
   200     0092                     	;# 
   201     0093                     	;# 
   202     0094                     	;# 
   203     0098                     	;# 
   204     0099                     	;# 
   205     009C                     	;# 
   206     009D                     	;# 
   207     009E                     	;# 
   208     009F                     	;# 
   209     010C                     	;# 
   210     010D                     	;# 
   211     010E                     	;# 
   212     010F                     	;# 
   213     018C                     	;# 
   214     018D                     	;# 
   215     0000                     	;# 
   216     0001                     	;# 
   217     0002                     	;# 
   218     0003                     	;# 
   219     0004                     	;# 
   220     0005                     	;# 
   221     0006                     	;# 
   222     0007                     	;# 
   223     0008                     	;# 
   224     0009                     	;# 
   225     000A                     	;# 
   226     000B                     	;# 
   227     000C                     	;# 
   228     000D                     	;# 
   229     000E                     	;# 
   230     000E                     	;# 
   231     000F                     	;# 
   232     0010                     	;# 
   233     0011                     	;# 
   234     0012                     	;# 
   235     0013                     	;# 
   236     0014                     	;# 
   237     0015                     	;# 
   238     0015                     	;# 
   239     0016                     	;# 
   240     0017                     	;# 
   241     0018                     	;# 
   242     0019                     	;# 
   243     001A                     	;# 
   244     001B                     	;# 
   245     001B                     	;# 
   246     001C                     	;# 
   247     001D                     	;# 
   248     001E                     	;# 
   249     001F                     	;# 
   250     0081                     	;# 
   251     0085                     	;# 
   252     0086                     	;# 
   253     0087                     	;# 
   254     0088                     	;# 
   255     0089                     	;# 
   256     008C                     	;# 
   257     008D                     	;# 
   258     008E                     	;# 
   259     0091                     	;# 
   260     0092                     	;# 
   261     0093                     	;# 
   262     0094                     	;# 
   263     0098                     	;# 
   264     0099                     	;# 
   265     009C                     	;# 
   266     009D                     	;# 
   267     009E                     	;# 
   268     009F                     	;# 
   269     010C                     	;# 
   270     010D                     	;# 
   271     010E                     	;# 
   272     010F                     	;# 
   273     018C                     	;# 
   274     018D                     	;# 
   275     0000                     	;# 
   276     0001                     	;# 
   277     0002                     	;# 
   278     0003                     	;# 
   279     0004                     	;# 
   280     0005                     	;# 
   281     0006                     	;# 
   282     0007                     	;# 
   283     0008                     	;# 
   284     0009                     	;# 
   285     000A                     	;# 
   286     000B                     	;# 
   287     000C                     	;# 
   288     000D                     	;# 
   289     000E                     	;# 
   290     000E                     	;# 
   291     000F                     	;# 
   292     0010                     	;# 
   293     0011                     	;# 
   294     0012                     	;# 
   295     0013                     	;# 
   296     0014                     	;# 
   297     0015                     	;# 
   298     0015                     	;# 
   299     0016                     	;# 
   300     0017                     	;# 
   301     0018                     	;# 
   302     0019                     	;# 
   303     001A                     	;# 
   304     001B                     	;# 
   305     001B                     	;# 
   306     001C                     	;# 
   307     001D                     	;# 
   308     001E                     	;# 
   309     001F                     	;# 
   310     0081                     	;# 
   311     0085                     	;# 
   312     0086                     	;# 
   313     0087                     	;# 
   314     0088                     	;# 
   315     0089                     	;# 
   316     008C                     	;# 
   317     008D                     	;# 
   318     008E                     	;# 
   319     0091                     	;# 
   320     0092                     	;# 
   321     0093                     	;# 
   322     0094                     	;# 
   323     0098                     	;# 
   324     0099                     	;# 
   325     009C                     	;# 
   326     009D                     	;# 
   327     009E                     	;# 
   328     009F                     	;# 
   329     010C                     	;# 
   330     010D                     	;# 
   331     010E                     	;# 
   332     010F                     	;# 
   333     018C                     	;# 
   334     018D                     	;# 
   335                           
   336                           	psect	idataBANK0
   337     1610                     __pidataBANK0:
   338                           
   339                           ;initializer for _randx
   340     1610  3401               	retlw	1
   341     1611  3400               	retlw	0
   342     1612  3400               	retlw	0
   343     1613  3400               	retlw	0
   344                           
   345                           	psect	idataBANK1
   346     160D                     __pidataBANK1:
   347                           
   348                           ;initializer for _maxFail
   349     160D  3403               	retlw	3
   350                           
   351                           ;initializer for _initialize
   352     160E  3401               	retlw	1
   353                           
   354                           ;initializer for _keypressed
   355     160F  3463               	retlw	99
   356                           
   357                           	psect	strings
   358     0800                     __pstrings:
   359     0800                     stringtab:
   360     0800                     __stringtab:
   361                           
   362                           ;	String table - string pointers are 1 byte each
   363     0800  1BFF               	btfsc	btemp+1,7
   364     0801  280A               	ljmp	stringcode
   365     0802  1383               	bcf	3,7
   366     0803  187F               	btfsc	btemp+1,0
   367     0804  1783               	bsf	3,7
   368     0805  0800               	movf	0,w
   369     0806  0A84               	incf	4,f
   370     0807  1903               	skipnz
   371     0808  0AFF               	incf	btemp+1,f
   372     0809  0008               	return
   373     080A                     stringcode:
   374     080A                     stringdir:
   375     080A  3008               	movlw	high stringdir
   376     080B  008A               	movwf	10
   377     080C  0804               	movf	4,w
   378     080D  0A84               	incf	4,f
   379     080E  0782               	addwf	2,f
   380     080F                     __stringbase:
   381     080F  3400               	retlw	0
   382     0810                     __end_of__stringtab:
   383     0810                     _keys:
   384     0810  342A               	retlw	42
   385     0811  3437               	retlw	55
   386     0812  3434               	retlw	52
   387     0813  3431               	retlw	49
   388     0814  3430               	retlw	48
   389     0815  3438               	retlw	56
   390     0816  3435               	retlw	53
   391     0817  3432               	retlw	50
   392     0818  3423               	retlw	35
   393     0819  3439               	retlw	57
   394     081A  3436               	retlw	54
   395     081B  3433               	retlw	51
   396     081C                     __end_of_keys:
   397     081C                     _rowMask:
   398     081C  3401               	retlw	1
   399     081D  3402               	retlw	2
   400     081E  3404               	retlw	4
   401     081F  3408               	retlw	8
   402     0820                     __end_of_rowMask:
   403     0820                     _colMask:
   404     0820  34FE               	retlw	254
   405     0821  34FD               	retlw	253
   406     0822  34FB               	retlw	251
   407     0823                     __end_of_colMask:
   408     000B                     _INTCONbits	set	11
   409     0003                     _STATUSbits	set	3
   410     001A                     _RCREG	set	26
   411     0019                     _TXREG	set	25
   412     000C                     _PIR1	set	12
   413     0018                     _RCSTA	set	24
   414     0006                     _PORTB	set	6
   415     0008                     _PORTD	set	8
   416     0009                     _PORTEbits	set	9
   417     0001                     _TMR0	set	1
   418     000B                     _INTCON	set	11
   419     005A                     _T0IF	set	90
   420     0065                     _RCIF	set	101
   421     008C                     _PIE1	set	140
   422     0099                     _SPBRG	set	153
   423     0098                     _TXSTA	set	152
   424     0087                     _TRISC	set	135
   425     0086                     _TRISB	set	134
   426     0089                     _TRISEbits	set	137
   427     0088                     _TRISD	set	136
   428     0081                     _OPTION_REG	set	129
   429     010C                     _EEDATA	set	268
   430     010D                     _EEADR	set	269
   431     018D                     _EECON2	set	397
   432     018C                     _EECON1	set	396
   433     018C                     _EECON1bits	set	396
   434     0823                     STR_17:
   435     0823  3423               	retlw	35	;'#'
   436     0824  343D               	retlw	61	;'='
   437     0825  3463               	retlw	99	;'c'
   438     0826  346F               	retlw	111	;'o'
   439     0827  346E               	retlw	110	;'n'
   440     0828  3466               	retlw	102	;'f'
   441     0829  342E               	retlw	46	;'.'
   442     082A  3420               	retlw	32	;' '
   443     082B  342A               	retlw	42	;'*'
   444     082C  343D               	retlw	61	;'='
   445     082D  3463               	retlw	99	;'c'
   446     082E  3461               	retlw	97	;'a'
   447     082F  346E               	retlw	110	;'n'
   448     0830  3463               	retlw	99	;'c'
   449     0831  342E               	retlw	46	;'.'
   450     0832  3400               	retlw	0
   451     0833  3400               	retlw	0
   452     0834  3400               	retlw	0
   453     0835                     STR_9:
   454     0835  3449               	retlw	73	;'I'
   455     0836  346E               	retlw	110	;'n'
   456     0837  3473               	retlw	115	;'s'
   457     0838  3465               	retlw	101	;'e'
   458     0839  3472               	retlw	114	;'r'
   459     083A  3469               	retlw	105	;'i'
   460     083B  3473               	retlw	115	;'s'
   461     083C  3463               	retlw	99	;'c'
   462     083D  3469               	retlw	105	;'i'
   463     083E  3420               	retlw	32	;' '
   464     083F  3463               	retlw	99	;'c'
   465     0840  346F               	retlw	111	;'o'
   466     0841  3464               	retlw	100	;'d'
   467     0842  3469               	retlw	105	;'i'
   468     0843  3463               	retlw	99	;'c'
   469     0844  3465               	retlw	101	;'e'
   470     0845  3400               	retlw	0
   471     0846  3400               	retlw	0
   472     0847                     STR_7:
   473     0847  3423               	retlw	35	;'#'
   474     0848  343D               	retlw	61	;'='
   475     0849  3463               	retlw	99	;'c'
   476     084A  346F               	retlw	111	;'o'
   477     084B  346E               	retlw	110	;'n'
   478     084C  3466               	retlw	102	;'f'
   479     084D  342E               	retlw	46	;'.'
   480     084E  3420               	retlw	32	;' '
   481     084F  342A               	retlw	42	;'*'
   482     0850  343D               	retlw	61	;'='
   483     0851  3463               	retlw	99	;'c'
   484     0852  3461               	retlw	97	;'a'
   485     0853  346E               	retlw	110	;'n'
   486     0854  3463               	retlw	99	;'c'
   487     0855  342E               	retlw	46	;'.'
   488     0856  3400               	retlw	0
   489     0857  3400               	retlw	0
   490     0858                     STR_19:
   491     0858  344D               	retlw	77	;'M'
   492     0859  3449               	retlw	73	;'I'
   493     085A  344E               	retlw	78	;'N'
   494     085B  343D               	retlw	61	;'='
   495     085C  3430               	retlw	48	;'0'
   496     085D  3430               	retlw	48	;'0'
   497     085E  3430               	retlw	48	;'0'
   498     085F  342C               	retlw	44	;','
   499     0860  344D               	retlw	77	;'M'
   500     0861  3441               	retlw	65	;'A'
   501     0862  3458               	retlw	88	;'X'
   502     0863  343D               	retlw	61	;'='
   503     0864  3432               	retlw	50	;'2'
   504     0865  3435               	retlw	53	;'5'
   505     0866  3430               	retlw	48	;'0'
   506     0867  3400               	retlw	0
   507     0868  3400               	retlw	0
   508     0869                     STR_18:
   509     0869  3449               	retlw	73	;'I'
   510     086A  346E               	retlw	110	;'n'
   511     086B  3473               	retlw	115	;'s'
   512     086C  3465               	retlw	101	;'e'
   513     086D  3472               	retlw	114	;'r'
   514     086E  342E               	retlw	46	;'.'
   515     086F  3420               	retlw	32	;' '
   516     0870  3449               	retlw	73	;'I'
   517     0871  3444               	retlw	68	;'D'
   518     0872  3420               	retlw	32	;' '
   519     0873  3450               	retlw	80	;'P'
   520     0874  3449               	retlw	73	;'I'
   521     0875  3443               	retlw	67	;'C'
   522     0876  343A               	retlw	58	;':'
   523     0877  3400               	retlw	0
   524     0878  3400               	retlw	0
   525     0879                     STR_15:
   526     0879  3454               	retlw	84	;'T'
   527     087A  3465               	retlw	101	;'e'
   528     087B  346E               	retlw	110	;'n'
   529     087C  3474               	retlw	116	;'t'
   530     087D  342E               	retlw	46	;'.'
   531     087E  3420               	retlw	32	;' '
   532     087F  3465               	retlw	101	;'e'
   533     0880  3473               	retlw	115	;'s'
   534     0881  3461               	retlw	97	;'a'
   535     0882  3475               	retlw	117	;'u'
   536     0883  3472               	retlw	114	;'r'
   537     0884  3469               	retlw	105	;'i'
   538     0885  3474               	retlw	116	;'t'
   539     0886  3469               	retlw	105	;'i'
   540     0887  3400               	retlw	0
   541     0888  3400               	retlw	0
   542     0889                     STR_13:
   543     0889  3443               	retlw	67	;'C'
   544     088A  346F               	retlw	111	;'o'
   545     088B  3464               	retlw	100	;'d'
   546     088C  3469               	retlw	105	;'i'
   547     088D  3463               	retlw	99	;'c'
   548     088E  3465               	retlw	101	;'e'
   549     088F  3420               	retlw	32	;' '
   550     0890  3465               	retlw	101	;'e'
   551     0891  3472               	retlw	114	;'r'
   552     0892  3472               	retlw	114	;'r'
   553     0893  3461               	retlw	97	;'a'
   554     0894  3474               	retlw	116	;'t'
   555     0895  346F               	retlw	111	;'o'
   556     0896  3400               	retlw	0
   557     0897  3400               	retlw	0
   558     0898                     STR_3:
   559     0898  3449               	retlw	73	;'I'
   560     0899  3444               	retlw	68	;'D'
   561     089A  3420               	retlw	32	;' '
   562     089B  343D               	retlw	61	;'='
   563     089C  3420               	retlw	32	;' '
   564     089D  3433               	retlw	51	;'3'
   565     089E  3420               	retlw	32	;' '
   566     089F  3463               	retlw	99	;'c'
   567     08A0  3468               	retlw	104	;'h'
   568     08A1  3461               	retlw	97	;'a'
   569     08A2  3472               	retlw	114	;'r'
   570     08A3  3473               	retlw	115	;'s'
   571     08A4  3400               	retlw	0
   572     08A5  3400               	retlw	0
   573     08A6                     STR_10:
   574     08A6  3454               	retlw	84	;'T'
   575     08A7  3465               	retlw	101	;'e'
   576     08A8  346E               	retlw	110	;'n'
   577     08A9  3474               	retlw	116	;'t'
   578     08AA  3461               	retlw	97	;'a'
   579     08AB  3474               	retlw	116	;'t'
   580     08AC  3469               	retlw	105	;'i'
   581     08AD  3476               	retlw	118	;'v'
   582     08AE  3469               	retlw	105	;'i'
   583     08AF  343A               	retlw	58	;':'
   584     08B0  3420               	retlw	32	;' '
   585     08B1  3400               	retlw	0
   586     08B2  3400               	retlw	0
   587     08B3                     STR_11:
   588     08B3  3442               	retlw	66	;'B'
   589     08B4  3465               	retlw	101	;'e'
   590     08B5  346E               	retlw	110	;'n'
   591     08B6  3476               	retlw	118	;'v'
   592     08B7  3465               	retlw	101	;'e'
   593     08B8  346E               	retlw	110	;'n'
   594     08B9  3475               	retlw	117	;'u'
   595     08BA  3474               	retlw	116	;'t'
   596     08BB  346F               	retlw	111	;'o'
   597     08BC  3421               	retlw	33	;'!'
   598     08BD  3400               	retlw	0
   599     08BE  3400               	retlw	0
   600     08BF                     STR_6:
   601     08BF  3449               	retlw	73	;'I'
   602     08C0  3444               	retlw	68	;'D'
   603     08C1  3420               	retlw	32	;' '
   604     08C2  3453               	retlw	83	;'S'
   605     08C3  3461               	retlw	97	;'a'
   606     08C4  346C               	retlw	108	;'l'
   607     08C5  3476               	retlw	118	;'v'
   608     08C6  3461               	retlw	97	;'a'
   609     08C7  3474               	retlw	116	;'t'
   610     08C8  346F               	retlw	111	;'o'
   611     08C9  3400               	retlw	0
   612     08CA  3400               	retlw	0
   613     08CB                     STR_1:
   614     08CB  3450               	retlw	80	;'P'
   615     08CC  3472               	retlw	114	;'r'
   616     08CD  3465               	retlw	101	;'e'
   617     08CE  346D               	retlw	109	;'m'
   618     08CF  3469               	retlw	105	;'i'
   619     08D0  3420               	retlw	32	;' '
   620     08D1  3427               	retlw	39	;'''
   621     08D2  3423               	retlw	35	;'#'
   622     08D3  3427               	retlw	39	;'''
   623     08D4  3400               	retlw	0
   624     08D5  3400               	retlw	0
   625     08D6                     STR_5:
   626     08D6  3449               	retlw	73	;'I'
   627     08D7  3444               	retlw	68	;'D'
   628     08D8  3420               	retlw	32	;' '
   629     08D9  343E               	retlw	62	;'>'
   630     08DA  3420               	retlw	32	;' '
   631     08DB  3432               	retlw	50	;'2'
   632     08DC  3435               	retlw	53	;'5'
   633     08DD  3430               	retlw	48	;'0'
   634     08DE  3400               	retlw	0
   635     08DF  3400               	retlw	0
   636     08E0                     STR_2:
   637     08E0  3445               	retlw	69	;'E'
   638     08E1  3452               	retlw	82	;'R'
   639     08E2  3452               	retlw	82	;'R'
   640     08E3  344F               	retlw	79	;'O'
   641     08E4  3452               	retlw	82	;'R'
   642     08E5  3445               	retlw	69	;'E'
   643     08E6  3400               	retlw	0
   644     08E7  3400               	retlw	0
   645     08E8                     STR_16:
   646     08E8  3431               	retlw	49	;'1'
   647     08E9  342F               	retlw	47	;'/'
   648     08EA  3430               	retlw	48	;'0'
   649     08EB  3400               	retlw	0
   650     08EC                     STR_12:
   651     08EC  3431               	retlw	49	;'1'
   652     08ED  342F               	retlw	47	;'/'
   653     08EE  3431               	retlw	49	;'1'
   654     08EF  3400               	retlw	0
   655     08F0                     STR_8:
   656     08F0  3432               	retlw	50	;'2'
   657     08F1  3400               	retlw	0
   658     08A6                     
   659                           	psect	cinit
   660     0013                     start_initialization:	
   661                           ; #config settings
   662                           
   663     0013                     __initialization:
   664                           
   665                           ; Initialize objects allocated to BANK1
   666     0013  1683               	bsf	3,5	;RP0=1, select bank1
   667     0014  1303               	bcf	3,6	;RP1=0, select bank1
   668     0015  160A  118A  260D  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   669     001A  00ED               	movwf	__pdataBANK1& (0+127)
   670     001B  160A  118A  260E  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   671     0020  00EE               	movwf	(__pdataBANK1+1)& (0+127)
   672     0021  160A  118A  260F  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   673     0026  00EF               	movwf	(__pdataBANK1+2)& (0+127)
   674                           
   675                           ; Initialize objects allocated to BANK0
   676     0027  1283               	bcf	3,5	;RP0=0, select bank0
   677     0028  1303               	bcf	3,6	;RP1=0, select bank0
   678     0029  160A  118A  2610  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   679     002E  00D3               	movwf	__pdataBANK0& (0+127)
   680     002F  160A  118A  2611  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   681     0034  00D4               	movwf	(__pdataBANK0+1)& (0+127)
   682     0035  160A  118A  2612  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   683     003A  00D5               	movwf	(__pdataBANK0+2)& (0+127)
   684     003B  160A  118A  2613  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   685     0040  00D6               	movwf	(__pdataBANK0+3)& (0+127)
   686                           
   687                           ; Clear objects allocated to BANK3
   688     0041  1783               	bsf	3,7	;select IRP bank2
   689     0042  3090               	movlw	low __pbssBANK3
   690     0043  0084               	movwf	4
   691     0044  30C7               	movlw	low (__pbssBANK3+55)
   692     0045  160A  118A  2614  120A  118A  	fcall	clear_ram0
   693                           
   694                           ; Clear objects allocated to BANK2
   695     004A  3010               	movlw	low __pbssBANK2
   696     004B  0084               	movwf	4
   697     004C  3042               	movlw	low (__pbssBANK2+50)
   698     004D  160A  118A  2614  120A  118A  	fcall	clear_ram0
   699                           
   700                           ; Clear objects allocated to BANK1
   701     0052  1383               	bcf	3,7	;select IRP bank0
   702     0053  30E2               	movlw	low __pbssBANK1
   703     0054  0084               	movwf	4
   704     0055  30ED               	movlw	low (__pbssBANK1+11)
   705     0056  160A  118A  2614  120A  118A  	fcall	clear_ram0
   706                           
   707                           ; Clear objects allocated to BANK0
   708     005B  303C               	movlw	low __pbssBANK0
   709     005C  0084               	movwf	4
   710     005D  3053               	movlw	low (__pbssBANK0+23)
   711     005E  160A  118A  2614  120A  118A  	fcall	clear_ram0
   712     0063                     end_of_initialization:	
   713                           ;End of C runtime variable initialization code
   714                           
   715     0063                     __end_of__initialization:
   716     0063  0183               	clrf	3
   717     0064  120A  118A  2867   	ljmp	_main	;jump to C main() function
   718                           
   719                           	psect	bssBANK0
   720     003C                     __pbssBANK0:
   721     003C                     _seconds:
   722     003C                     	ds	4
   723     0040                     _milliseconds:
   724     0040                     	ds	4
   725     0044                     _old_i_id:
   726     0044                     	ds	2
   727     0046                     _pr_succ:
   728     0046                     	ds	1
   729     0047                     _pr_err_max:
   730     0047                     	ds	1
   731     0048                     _pr_err_len:
   732     0048                     	ds	1
   733     0049                     _pr_start:
   734     0049                     	ds	1
   735     004A                     _fail:
   736     004A                     	ds	1
   737     004B                     _success:
   738     004B                     	ds	1
   739     004C                     _recieved:
   740     004C                     	ds	1
   741     004D                     _old_iT:
   742     004D                     	ds	1
   743     004E                     _iS:
   744     004E                     	ds	1
   745     004F                     _PIC_ID:
   746     004F                     	ds	4
   747                           
   748                           	psect	dataBANK0
   749     0053                     __pdataBANK0:
   750     0053                     _randx:
   751     0053                     	ds	4
   752                           
   753                           	psect	bssBANK1
   754     00E2                     __pbssBANK1:
   755     00E2                     _num_rand:
   756     00E2                     	ds	2
   757     00E4                     _i_id:
   758     00E4                     	ds	2
   759     00E6                     _compare:
   760     00E6                     	ds	1
   761     00E7                     _iT:
   762     00E7                     	ds	1
   763     00E8                     _type:
   764     00E8                     	ds	1
   765     00E9                     _source:
   766     00E9                     	ds	1
   767     00EA                     _keyf:
   768     00EA                     	ds	1
   769     00EB                     _rowScan:
   770     00EB                     	ds	1
   771     00EC                     _colScan:
   772     00EC                     	ds	1
   773                           
   774                           	psect	dataBANK1
   775     00ED                     __pdataBANK1:
   776     00ED                     _maxFail:
   777     00ED                     	ds	1
   778     00EE                     _initialize:
   779     00EE                     	ds	1
   780     00EF                     _keypressed:
   781     00EF                     	ds	1
   782                           
   783                           	psect	bssBANK3
   784     0190                     __pbssBANK3:
   785     0190                     _old_num_rand:
   786     0190                     	ds	2
   787     0192                     _datoTastierino:
   788     0192                     	ds	17
   789     01A3                     _datoSeriale:
   790     01A3                     	ds	17
   791     01B4                     _packet:
   792     01B4                     	ds	15
   793     01C3                     _id_dest:
   794     01C3                     	ds	4
   795                           
   796                           	psect	bssBANK2
   797     0110                     __pbssBANK2:
   798     0110                     _dato:
   799     0110                     	ds	50
   800                           
   801                           	psect	clrtext
   802     1614                     clear_ram0:	
   803                           ;	Called with FSR containing the base address, and
   804                           ;	W with the last address+1
   805                           
   806     1614  0064               	clrwdt	;clear the watchdog before getting into this loop
   807     1615                     clrloop0:
   808     1615  0180               	clrf	0	;clear RAM location pointed to by FSR
   809     1616  0A84               	incf	4,f	;increment pointer
   810     1617  0604               	xorwf	4,w	;XOR with final address
   811     1618  1903               	btfsc	3,2	;have we reached the end yet?
   812     1619  3400               	retlw	0	;all done for this memory range, return
   813     161A  0604               	xorwf	4,w	;XOR again to restore value
   814     161B  2E15               	goto	clrloop0	;do the next byte
   815                           
   816                           	psect	cstackBANK3
   817     01C7                     __pcstackBANK3:
   818     01C7                     ConvertToString@temp:
   819                           
   820                           ; 2 bytes @ 0x0
   821     01C7                     	ds	2
   822     01C9                     ConvertToString@j:
   823                           
   824                           ; 2 bytes @ 0x2
   825     01C9                     	ds	2
   826     01CB                     ConvertToString@i:
   827                           
   828                           ; 2 bytes @ 0x4
   829     01CB                     	ds	2
   830     01CD                     ConvertToString@n_cifre:
   831                           
   832                           ; 1 bytes @ 0x6
   833     01CD                     	ds	1
   834     01CE                     ??_init_PIC:
   835                           
   836                           ; 1 bytes @ 0x7
   837     01CE                     	ds	2
   838     01D0                     init_PIC@id:
   839                           
   840                           ; 2 bytes @ 0x9
   841     01D0                     	ds	2
   842     01D2                     main@num_rand_s:
   843                           
   844                           ; 16 bytes @ 0xB
   845     01D2                     	ds	16
   846                           
   847                           	psect	cstackBANK1
   848     00A0                     __pcstackBANK1:
   849     00A0                     ?_lcdSend:
   850     00A0                     ??_init_NumPad:	
   851                           ; 1 bytes @ 0x0
   852                           
   853     00A0                     ??_init_Timer0:	
   854                           ; 1 bytes @ 0x0
   855                           
   856     00A0                     ??_eeprom_read:	
   857                           ; 1 bytes @ 0x0
   858                           
   859     00A0                     ?_strcopy:	
   860                           ; 1 bytes @ 0x0
   861                           
   862     00A0                     ?_eeprom_write:	
   863                           ; 1 bytes @ 0x0
   864                           
   865     00A0                     ?_srand:	
   866                           ; 1 bytes @ 0x0
   867                           
   868     00A0                     ??_UART_TxChar:	
   869                           ; 1 bytes @ 0x0
   870                           
   871     00A0                     ?_Length:	
   872                           ; 1 bytes @ 0x0
   873                           
   874     00A0                     ?___lmul:	
   875                           ; 2 bytes @ 0x0
   876                           
   877     00A0                     ?___almod:	
   878                           ; 4 bytes @ 0x0
   879                           
   880     00A0                     lcdSend@tipo:	
   881                           ; 4 bytes @ 0x0
   882                           
   883     00A0                     strcopy@source:	
   884                           ; 1 bytes @ 0x0
   885                           
   886     00A0                     eeprom_write@value:	
   887                           ; 1 bytes @ 0x0
   888                           
   889     00A0                     Length@str:	
   890                           ; 1 bytes @ 0x0
   891                           
   892     00A0                     srand@x:	
   893                           ; 2 bytes @ 0x0
   894                           
   895     00A0                     ___lmul@multiplier:	
   896                           ; 2 bytes @ 0x0
   897                           
   898     00A0                     ___almod@divisor:	
   899                           ; 4 bytes @ 0x0
   900                           
   901                           
   902                           ; 4 bytes @ 0x0
   903     00A0                     	ds	1
   904     00A1                     ??_lcdSend:
   905     00A1                     ??_strcopy:	
   906                           ; 1 bytes @ 0x1
   907                           
   908     00A1                     ??_eeprom_write:	
   909                           ; 1 bytes @ 0x1
   910                           
   911     00A1                     UART_TxChar@ch:	
   912                           ; 1 bytes @ 0x1
   913                           
   914     00A1                     eeprom_read@addr:	
   915                           ; 1 bytes @ 0x1
   916                           
   917                           
   918                           ; 1 bytes @ 0x1
   919     00A1                     	ds	1
   920     00A2                     ??_srand:
   921     00A2                     ??_Length:	
   922                           ; 1 bytes @ 0x2
   923                           
   924     00A2                     eeprom_write@addr:	
   925                           ; 1 bytes @ 0x2
   926                           
   927                           
   928                           ; 1 bytes @ 0x2
   929     00A2                     	ds	1
   930     00A3                     lcdSend@dato:
   931                           
   932                           ; 1 bytes @ 0x3
   933     00A3                     	ds	1
   934     00A4                     ?_lcdPrint:
   935     00A4                     ??_init_LCD:	
   936                           ; 1 bytes @ 0x4
   937                           
   938     00A4                     strcopy@dest:	
   939                           ; 1 bytes @ 0x4
   940                           
   941     00A4                     lcdPrint@str:	
   942                           ; 1 bytes @ 0x4
   943                           
   944     00A4                     ___lmul@multiplicand:	
   945                           ; 2 bytes @ 0x4
   946                           
   947     00A4                     ___almod@dividend:	
   948                           ; 4 bytes @ 0x4
   949                           
   950                           
   951                           ; 4 bytes @ 0x4
   952     00A4                     	ds	1
   953     00A5                     Length@len:
   954     00A5                     strcopy@n:	
   955                           ; 2 bytes @ 0x5
   956                           
   957                           
   958                           ; 2 bytes @ 0x5
   959     00A5                     	ds	1
   960     00A6                     ??_lcdPrint:
   961                           
   962                           ; 1 bytes @ 0x6
   963     00A6                     	ds	1
   964     00A7                     ??_SplitPacket:
   965     00A7                     ?_CompareStrings:	
   966                           ; 1 bytes @ 0x7
   967                           
   968     00A7                     ??_Fill:	
   969                           ; 1 bytes @ 0x7
   970                           
   971     00A7                     ?_strcat:	
   972                           ; 1 bytes @ 0x7
   973                           
   974     00A7                     strcat@source:	
   975                           ; 2 bytes @ 0x7
   976                           
   977     00A7                     CompareStrings@str2:	
   978                           ; 2 bytes @ 0x7
   979                           
   980                           
   981                           ; 2 bytes @ 0x7
   982     00A7                     	ds	1
   983     00A8                     ??___lmul:
   984     00A8                     ??___almod:	
   985                           ; 1 bytes @ 0x8
   986                           
   987     00A8                     Fill@length:	
   988                           ; 1 bytes @ 0x8
   989                           
   990                           
   991                           ; 2 bytes @ 0x8
   992     00A8                     	ds	1
   993     00A9                     ??_CompareStrings:
   994     00A9                     ??_strcat:	
   995                           ; 1 bytes @ 0x9
   996                           
   997     00A9                     ___almod@counter:	
   998                           ; 1 bytes @ 0x9
   999                           
  1000     00A9                     lcdPrint@n:	
  1001                           ; 1 bytes @ 0x9
  1002                           
  1003     00A9                     ___lmul@product:	
  1004                           ; 2 bytes @ 0x9
  1005                           
  1006                           
  1007                           ; 4 bytes @ 0x9
  1008     00A9                     	ds	1
  1009     00AA                     Fill@id:
  1010     00AA                     ___almod@sign:	
  1011                           ; 1 bytes @ 0xA
  1012                           
  1013     00AA                     SplitPacket@len:	
  1014                           ; 1 bytes @ 0xA
  1015                           
  1016                           
  1017                           ; 2 bytes @ 0xA
  1018     00AA                     	ds	2
  1019     00AC                     SplitPacket@part:
  1020                           
  1021                           ; 5 bytes @ 0xC
  1022     00AC                     	ds	1
  1023     00AD                     ?_rand:
  1024     00AD                     CompareStrings@i:	
  1025                           ; 2 bytes @ 0xD
  1026                           
  1027                           
  1028                           ; 1 bytes @ 0xD
  1029     00AD                     	ds	1
  1030     00AE                     strcat@dest:
  1031     00AE                     CompareStrings@str1:	
  1032                           ; 1 bytes @ 0xE
  1033                           
  1034                           
  1035                           ; 1 bytes @ 0xE
  1036     00AE                     	ds	1
  1037     00AF                     ??_rand:
  1038     00AF                     strcat@n:	
  1039                           ; 1 bytes @ 0xF
  1040                           
  1041                           
  1042                           ; 2 bytes @ 0xF
  1043     00AF                     	ds	2
  1044     00B1                     strcat@length_dest:
  1045     00B1                     SplitPacket@section:	
  1046                           ; 2 bytes @ 0x11
  1047                           
  1048                           
  1049                           ; 2 bytes @ 0x11
  1050     00B1                     	ds	2
  1051     00B3                     ?_ConcatToPacket:
  1052     00B3                     ConcatToPacket@str:	
  1053                           ; 1 bytes @ 0x13
  1054                           
  1055     00B3                     SplitPacket@i_part:	
  1056                           ; 2 bytes @ 0x13
  1057                           
  1058                           
  1059                           ; 2 bytes @ 0x13
  1060     00B3                     	ds	1
  1061     00B4                     ?___awmod:
  1062     00B4                     ___awmod@divisor:	
  1063                           ; 2 bytes @ 0x14
  1064                           
  1065                           
  1066                           ; 2 bytes @ 0x14
  1067     00B4                     	ds	1
  1068     00B5                     ConcatToPacket@delim:
  1069     00B5                     SplitPacket@pkt:	
  1070                           ; 1 bytes @ 0x15
  1071                           
  1072                           
  1073                           ; 1 bytes @ 0x15
  1074     00B5                     	ds	1
  1075     00B6                     ??_ConcatToPacket:
  1076     00B6                     SplitPacket@i:	
  1077                           ; 1 bytes @ 0x16
  1078                           
  1079     00B6                     ___awmod@dividend:	
  1080                           ; 2 bytes @ 0x16
  1081                           
  1082                           
  1083                           ; 2 bytes @ 0x16
  1084     00B6                     	ds	1
  1085     00B7                     ConcatToPacket@packet_length:
  1086                           
  1087                           ; 2 bytes @ 0x17
  1088     00B7                     	ds	1
  1089     00B8                     ??___awmod:
  1090                           
  1091                           ; 1 bytes @ 0x18
  1092     00B8                     	ds	1
  1093     00B9                     ConcatToPacket@pkt:
  1094     00B9                     ___awmod@counter:	
  1095                           ; 1 bytes @ 0x19
  1096                           
  1097                           
  1098                           ; 1 bytes @ 0x19
  1099     00B9                     	ds	1
  1100     00BA                     ___awmod@sign:
  1101                           
  1102                           ; 1 bytes @ 0x1A
  1103     00BA                     	ds	1
  1104     00BB                     ?___wmul:
  1105     00BB                     ___wmul@multiplier:	
  1106                           ; 2 bytes @ 0x1B
  1107                           
  1108                           
  1109                           ; 2 bytes @ 0x1B
  1110     00BB                     	ds	2
  1111     00BD                     ___wmul@multiplicand:
  1112                           
  1113                           ; 2 bytes @ 0x1D
  1114     00BD                     	ds	2
  1115     00BF                     ??___wmul:
  1116     00BF                     ___wmul@product:	
  1117                           ; 1 bytes @ 0x1F
  1118                           
  1119                           
  1120                           ; 2 bytes @ 0x1F
  1121     00BF                     	ds	2
  1122     00C1                     ??_read_NumPad:
  1123     00C1                     ?_UART_TxString:	
  1124                           ; 1 bytes @ 0x21
  1125                           
  1126     00C1                     ?_pow:	
  1127                           ; 1 bytes @ 0x21
  1128                           
  1129     00C1                     pow@exp:	
  1130                           ; 2 bytes @ 0x21
  1131                           
  1132     00C1                     UART_TxString@is_ACK:	
  1133                           ; 1 bytes @ 0x21
  1134                           
  1135                           
  1136                           ; 1 bytes @ 0x21
  1137     00C1                     	ds	1
  1138     00C2                     ??_UART_TxString:
  1139                           
  1140                           ; 1 bytes @ 0x22
  1141     00C2                     	ds	1
  1142     00C3                     ??_pow:
  1143     00C3                     UART_TxString@n:	
  1144                           ; 1 bytes @ 0x23
  1145                           
  1146                           
  1147                           ; 2 bytes @ 0x23
  1148     00C3                     	ds	2
  1149     00C5                     pow@b:
  1150     00C5                     UART_TxString@str:	
  1151                           ; 1 bytes @ 0x25
  1152                           
  1153                           
  1154                           ; 1 bytes @ 0x25
  1155     00C5                     	ds	1
  1156     00C6                     pow@i:
  1157                           
  1158                           ; 2 bytes @ 0x26
  1159     00C6                     	ds	2
  1160     00C8                     pow@n:
  1161                           
  1162                           ; 2 bytes @ 0x28
  1163     00C8                     	ds	2
  1164     00CA                     ?___aldiv:
  1165     00CA                     ___aldiv@divisor:	
  1166                           ; 4 bytes @ 0x2A
  1167                           
  1168                           
  1169                           ; 4 bytes @ 0x2A
  1170     00CA                     	ds	1
  1171     00CB                     read_NumPad@id:
  1172                           
  1173                           ; 2 bytes @ 0x2B
  1174     00CB                     	ds	3
  1175     00CE                     ___aldiv@dividend:
  1176                           
  1177                           ; 4 bytes @ 0x2E
  1178     00CE                     	ds	4
  1179     00D2                     ??___aldiv:
  1180                           
  1181                           ; 1 bytes @ 0x32
  1182     00D2                     	ds	1
  1183     00D3                     ___aldiv@counter:
  1184                           
  1185                           ; 1 bytes @ 0x33
  1186     00D3                     	ds	1
  1187     00D4                     ___aldiv@sign:
  1188                           
  1189                           ; 1 bytes @ 0x34
  1190     00D4                     	ds	1
  1191     00D5                     ___aldiv@quotient:
  1192                           
  1193                           ; 4 bytes @ 0x35
  1194     00D5                     	ds	4
  1195     00D9                     ?_ConvertToString:
  1196     00D9                     ?_UART_init:	
  1197                           ; 1 bytes @ 0x39
  1198                           
  1199     00D9                     ConvertToString@n:	
  1200                           ; 1 bytes @ 0x39
  1201                           
  1202     00D9                     UART_init@baudrate:	
  1203                           ; 4 bytes @ 0x39
  1204                           
  1205                           
  1206                           ; 4 bytes @ 0x39
  1207     00D9                     	ds	4
  1208     00DD                     ??_UART_init:
  1209     00DD                     ConvertToString@str:	
  1210                           ; 1 bytes @ 0x3D
  1211                           
  1212                           
  1213                           ; 2 bytes @ 0x3D
  1214     00DD                     	ds	2
  1215     00DF                     ??_ConvertToString:
  1216                           
  1217                           ; 1 bytes @ 0x3F
  1218     00DF                     	ds	3
  1219     00E2                     ??_main:
  1220                           
  1221                           	psect	cstackCOMMON
  1222     0070                     __pcstackCOMMON:	
  1223                           ; 1 bytes @ 0x42
  1224                           
  1225     0070                     ?_init_PIC:
  1226     0070                     ?_read_NumPad:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229     0070                     ?_SplitPacket:	
  1230                           ; 1 bytes @ 0x0
  1231                           
  1232     0070                     ?_init_LCD:	
  1233                           ; 1 bytes @ 0x0
  1234                           
  1235     0070                     ?_init_NumPad:	
  1236                           ; 1 bytes @ 0x0
  1237                           
  1238     0070                     ?_init_Timer0:	
  1239                           ; 1 bytes @ 0x0
  1240                           
  1241     0070                     ?_eeprom_read:	
  1242                           ; 1 bytes @ 0x0
  1243                           
  1244     0070                     ?_Fill:	
  1245                           ; 1 bytes @ 0x0
  1246                           
  1247     0070                     ?_main:	
  1248                           ; 1 bytes @ 0x0
  1249                           
  1250     0070                     ?_UART_TxChar:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253     0070                     ?_IRS:	
  1254                           ; 1 bytes @ 0x0
  1255                           
  1256     0070                     ?i1_UART_TxChar:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259     0070                     ??i1_UART_TxChar:	
  1260                           ; 1 bytes @ 0x0
  1261                           
  1262     0070                     ?i1_srand:	
  1263                           ; 1 bytes @ 0x0
  1264                           
  1265     0070                     ?i1___lmul:	
  1266                           ; 1 bytes @ 0x0
  1267                           
  1268     0070                     i1srand@x:	
  1269                           ; 4 bytes @ 0x0
  1270                           
  1271     0070                     i1___lmul@multiplier:	
  1272                           ; 2 bytes @ 0x0
  1273                           
  1274                           
  1275                           ; 4 bytes @ 0x0
  1276     0070                     	ds	1
  1277     0071                     i1UART_TxChar@ch:
  1278                           
  1279                           ; 1 bytes @ 0x1
  1280     0071                     	ds	1
  1281     0072                     ??i1_srand:
  1282                           
  1283                           ; 1 bytes @ 0x2
  1284     0072                     	ds	2
  1285     0074                     i1___lmul@multiplicand:
  1286                           
  1287                           ; 4 bytes @ 0x4
  1288     0074                     	ds	4
  1289     0078                     ??i1___lmul:
  1290                           
  1291                           ; 1 bytes @ 0x8
  1292     0078                     	ds	1
  1293     0079                     i1___lmul@product:
  1294                           
  1295                           ; 4 bytes @ 0x9
  1296     0079                     	ds	4
  1297     007D                     ??i1___awmod:
  1298                           
  1299                           ; 1 bytes @ 0xD
  1300     007D                     	ds	1
  1301     007E                     ??i1___wmul:
  1302                           
  1303                           	psect	cstackBANK0
  1304     0020                     __pcstackBANK0:	
  1305                           ; 1 bytes @ 0xE
  1306                           
  1307     0020                     ?i1_rand:
  1308                           
  1309                           ; 2 bytes @ 0x0
  1310     0020                     	ds	2
  1311     0022                     ??i1_rand:
  1312                           
  1313                           ; 1 bytes @ 0x2
  1314     0022                     	ds	5
  1315     0027                     ?i1___awmod:
  1316     0027                     i1___awmod@divisor:	
  1317                           ; 2 bytes @ 0x7
  1318                           
  1319                           
  1320                           ; 2 bytes @ 0x7
  1321     0027                     	ds	2
  1322     0029                     i1___awmod@dividend:
  1323                           
  1324                           ; 2 bytes @ 0x9
  1325     0029                     	ds	2
  1326     002B                     i1___awmod@counter:
  1327                           
  1328                           ; 1 bytes @ 0xB
  1329     002B                     	ds	1
  1330     002C                     i1___awmod@sign:
  1331                           
  1332                           ; 1 bytes @ 0xC
  1333     002C                     	ds	1
  1334     002D                     ?i1___wmul:
  1335     002D                     i1___wmul@multiplier:	
  1336                           ; 2 bytes @ 0xD
  1337                           
  1338                           
  1339                           ; 2 bytes @ 0xD
  1340     002D                     	ds	2
  1341     002F                     i1___wmul@multiplicand:
  1342                           
  1343                           ; 2 bytes @ 0xF
  1344     002F                     	ds	2
  1345     0031                     i1___wmul@product:
  1346                           
  1347                           ; 2 bytes @ 0x11
  1348     0031                     	ds	2
  1349     0033                     ?i1_UART_TxString:
  1350     0033                     i1UART_TxString@is_ACK:	
  1351                           ; 1 bytes @ 0x13
  1352                           
  1353                           
  1354                           ; 1 bytes @ 0x13
  1355     0033                     	ds	1
  1356     0034                     ??i1_UART_TxString:
  1357                           
  1358                           ; 1 bytes @ 0x14
  1359     0034                     	ds	1
  1360     0035                     i1UART_TxString@str:
  1361                           
  1362                           ; 1 bytes @ 0x15
  1363     0035                     	ds	1
  1364     0036                     i1UART_TxString@n:
  1365                           
  1366                           ; 2 bytes @ 0x16
  1367     0036                     	ds	2
  1368     0038                     ??_IRS:
  1369                           
  1370                           ; 1 bytes @ 0x18
  1371     0038                     	ds	4
  1372                           
  1373                           	psect	maintext
  1374     0067                     __pmaintext:	
  1375 ;;
  1376 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1377 ;;
  1378 ;; *************** function _main *****************
  1379 ;; Defined at:
  1380 ;;		line 125 in file "main.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;  num_rand_s     16   11[BANK3 ] unsigned char [16]
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : B00/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1394 ;;      Params:         0       0       0       0       0
  1395 ;;      Locals:         0       0       0      16       0
  1396 ;;      Temps:          0       0       0       0       0
  1397 ;;      Totals:         0       0       0      16       0
  1398 ;;Total ram usage:       16 bytes
  1399 ;; Hardware stack levels required when called: 8
  1400 ;; This function calls:
  1401 ;;		_CompareStrings
  1402 ;;		_ConcatToPacket
  1403 ;;		_ConvertToString
  1404 ;;		_SplitPacket
  1405 ;;		_UART_TxString
  1406 ;;		_init_PIC
  1407 ;;		_lcdPrint
  1408 ;;		_lcdSend
  1409 ;;		_read_NumPad
  1410 ;; This function is called by:
  1411 ;;		Startup code after reset
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415     0067                     _main:	
  1416                           ;psect for function _main
  1417                           
  1418     0067                     l3849:	
  1419                           ;incstack = 0
  1420                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1421                           
  1422                           
  1423                           ;main.c: 128:     init_PIC();
  1424     0067  120A  158A  25E7  120A  118A  	fcall	_init_PIC
  1425     006C                     l3851:
  1426                           
  1427                           ;main.c: 131:     {;main.c: 132:         if(pr_start)
  1428     006C  1283               	bcf	3,5	;RP0=0, select bank0
  1429     006D  1303               	bcf	3,6	;RP1=0, select bank0
  1430     006E  0849               	movf	_pr_start,w
  1431     006F  1903               	btfsc	3,2
  1432     0070  2872               	goto	u4071
  1433     0071  2873               	goto	u4070
  1434     0072                     u4071:
  1435     0072  288A               	goto	l3859
  1436     0073                     u4070:
  1437     0073                     l3853:
  1438                           
  1439                           ;main.c: 133:         {;main.c: 134:             lcdSend(0x01, 0);
  1440     0073  1683               	bsf	3,5	;RP0=1, select bank1
  1441     0074  1303               	bcf	3,6	;RP1=0, select bank1
  1442     0075  01A0               	clrf	lcdSend@tipo^(0+128)
  1443     0076  3001               	movlw	1
  1444     0077  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1445     007C                     l3855:
  1446                           
  1447                           ;main.c: 135:             lcdPrint("Premi '#'\0");
  1448     007C  30BC               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1449     007D  1683               	bsf	3,5	;RP0=1, select bank1
  1450     007E  1303               	bcf	3,6	;RP1=0, select bank1
  1451     007F  00A4               	movwf	lcdPrint@str^(0+128)
  1452     0080  3080               	movlw	128
  1453     0081  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1454     0082  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1455     0087                     l3857:
  1456                           
  1457                           ;main.c: 136:             pr_start = 0;
  1458     0087  1283               	bcf	3,5	;RP0=0, select bank0
  1459     0088  1303               	bcf	3,6	;RP1=0, select bank0
  1460     0089  01C9               	clrf	_pr_start
  1461     008A                     l3859:
  1462                           
  1463                           ;main.c: 138:         if(pr_err_len)
  1464     008A  0848               	movf	_pr_err_len,w
  1465     008B  1903               	btfsc	3,2
  1466     008C  288E               	goto	u4081
  1467     008D  288F               	goto	u4080
  1468     008E                     u4081:
  1469     008E  28BA               	goto	l3869
  1470     008F                     u4080:
  1471     008F                     l3861:
  1472                           
  1473                           ;main.c: 139:         {;main.c: 141:             lcdSend(0x01, 0);
  1474     008F  1683               	bsf	3,5	;RP0=1, select bank1
  1475     0090  1303               	bcf	3,6	;RP1=0, select bank1
  1476     0091  01A0               	clrf	lcdSend@tipo^(0+128)
  1477     0092  3001               	movlw	1
  1478     0093  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1479     0098                     l3863:
  1480                           
  1481                           ;main.c: 142:             lcdPrint("ERRORE\0");
  1482     0098  30D1               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1483     0099  1683               	bsf	3,5	;RP0=1, select bank1
  1484     009A  1303               	bcf	3,6	;RP1=0, select bank1
  1485     009B  00A4               	movwf	lcdPrint@str^(0+128)
  1486     009C  3080               	movlw	128
  1487     009D  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1488     009E  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1489     00A3                     l3865:
  1490                           
  1491                           ;main.c: 143:             lcdSend(0xC0, 0);
  1492     00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1493     00A4  1303               	bcf	3,6	;RP1=0, select bank1
  1494     00A5  01A0               	clrf	lcdSend@tipo^(0+128)
  1495     00A6  30C0               	movlw	192
  1496     00A7  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1497                           
  1498                           ;main.c: 144:             lcdPrint("ID = 3 chars\0");
  1499     00AC  3089               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1500     00AD  1683               	bsf	3,5	;RP0=1, select bank1
  1501     00AE  1303               	bcf	3,6	;RP1=0, select bank1
  1502     00AF  00A4               	movwf	lcdPrint@str^(0+128)
  1503     00B0  3080               	movlw	128
  1504     00B1  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1505     00B2  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1506     00B7                     l3867:
  1507                           
  1508                           ;main.c: 145:             pr_err_len = 0;
  1509     00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1510     00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1511     00B9  01C8               	clrf	_pr_err_len
  1512     00BA                     l3869:
  1513                           
  1514                           ;main.c: 147:         if(pr_err_max)
  1515     00BA  0847               	movf	_pr_err_max,w
  1516     00BB  1903               	btfsc	3,2
  1517     00BC  28BE               	goto	u4091
  1518     00BD  28BF               	goto	u4090
  1519     00BE                     u4091:
  1520     00BE  28EA               	goto	l3879
  1521     00BF                     u4090:
  1522     00BF                     l3871:
  1523                           
  1524                           ;main.c: 148:         {;main.c: 150:             lcdSend(0x01, 0);
  1525     00BF  1683               	bsf	3,5	;RP0=1, select bank1
  1526     00C0  1303               	bcf	3,6	;RP1=0, select bank1
  1527     00C1  01A0               	clrf	lcdSend@tipo^(0+128)
  1528     00C2  3001               	movlw	1
  1529     00C3  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1530     00C8                     l3873:
  1531                           
  1532                           ;main.c: 151:             lcdPrint("ERRORE\0");
  1533     00C8  30D1               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1534     00C9  1683               	bsf	3,5	;RP0=1, select bank1
  1535     00CA  1303               	bcf	3,6	;RP1=0, select bank1
  1536     00CB  00A4               	movwf	lcdPrint@str^(0+128)
  1537     00CC  3080               	movlw	128
  1538     00CD  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1539     00CE  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1540     00D3                     l3875:
  1541                           
  1542                           ;main.c: 152:             lcdSend(0xC0, 0);
  1543     00D3  1683               	bsf	3,5	;RP0=1, select bank1
  1544     00D4  1303               	bcf	3,6	;RP1=0, select bank1
  1545     00D5  01A0               	clrf	lcdSend@tipo^(0+128)
  1546     00D6  30C0               	movlw	192
  1547     00D7  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1548                           
  1549                           ;main.c: 153:             lcdPrint("ID > 250\0");
  1550     00DC  30C7               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1551     00DD  1683               	bsf	3,5	;RP0=1, select bank1
  1552     00DE  1303               	bcf	3,6	;RP1=0, select bank1
  1553     00DF  00A4               	movwf	lcdPrint@str^(0+128)
  1554     00E0  3080               	movlw	128
  1555     00E1  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1556     00E2  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1557     00E7                     l3877:
  1558                           
  1559                           ;main.c: 154:             pr_err_max = 0;
  1560     00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1561     00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1562     00E9  01C7               	clrf	_pr_err_max
  1563     00EA                     l3879:
  1564                           
  1565                           ;main.c: 156:         if(pr_succ)
  1566     00EA  0846               	movf	_pr_succ,w
  1567     00EB  1903               	btfsc	3,2
  1568     00EC  28EE               	goto	u4101
  1569     00ED  28EF               	goto	u4100
  1570     00EE                     u4101:
  1571     00EE  2916               	goto	l3891
  1572     00EF                     u4100:
  1573     00EF                     l3881:
  1574                           
  1575                           ;main.c: 157:         {;main.c: 159:             lcdSend(0x01, 0);
  1576     00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1577     00F0  1303               	bcf	3,6	;RP1=0, select bank1
  1578     00F1  01A0               	clrf	lcdSend@tipo^(0+128)
  1579     00F2  3001               	movlw	1
  1580     00F3  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1581     00F8                     l3883:
  1582                           
  1583                           ;main.c: 160:             lcdPrint("ID Salvato\0");
  1584     00F8  30B0               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1585     00F9  1683               	bsf	3,5	;RP0=1, select bank1
  1586     00FA  1303               	bcf	3,6	;RP1=0, select bank1
  1587     00FB  00A4               	movwf	lcdPrint@str^(0+128)
  1588     00FC  3080               	movlw	128
  1589     00FD  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1590     00FE  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1591     0103                     l3885:
  1592                           
  1593                           ;main.c: 162:             milliseconds = 0;
  1594     0103  3000               	movlw	0
  1595     0104  1283               	bcf	3,5	;RP0=0, select bank0
  1596     0105  1303               	bcf	3,6	;RP1=0, select bank0
  1597     0106  00C3               	movwf	_milliseconds+3
  1598     0107  3000               	movlw	0
  1599     0108  00C2               	movwf	_milliseconds+2
  1600     0109  3000               	movlw	0
  1601     010A  00C1               	movwf	_milliseconds+1
  1602     010B  3000               	movlw	0
  1603     010C  00C0               	movwf	_milliseconds
  1604     010D                     l3887:
  1605                           
  1606                           ;main.c: 163:             seconds = 1000;
  1607     010D  3000               	movlw	0
  1608     010E  00BF               	movwf	_seconds+3
  1609     010F  3000               	movlw	0
  1610     0110  00BE               	movwf	_seconds+2
  1611     0111  3003               	movlw	3
  1612     0112  00BD               	movwf	_seconds+1
  1613     0113  30E8               	movlw	232
  1614     0114  00BC               	movwf	_seconds
  1615     0115                     l3889:
  1616                           
  1617                           ;main.c: 164:             pr_succ = 0;
  1618     0115  01C6               	clrf	_pr_succ
  1619     0116                     l3891:
  1620                           
  1621                           ;main.c: 168:         read_NumPad();
  1622     0116  120A  118A  23EF  120A  118A  	fcall	_read_NumPad
  1623     011B                     l3893:
  1624                           
  1625                           ;main.c: 171:         if(i_id != old_i_id && initialize)
  1626     011B  1283               	bcf	3,5	;RP0=0, select bank0
  1627     011C  1303               	bcf	3,6	;RP1=0, select bank0
  1628     011D  0845               	movf	_old_i_id+1,w
  1629     011E  1683               	bsf	3,5	;RP0=1, select bank1
  1630     011F  1303               	bcf	3,6	;RP1=0, select bank1
  1631     0120  0665               	xorwf	(_i_id+1)^(0+128),w
  1632     0121  1D03               	skipz
  1633     0122  2929               	goto	u4115
  1634     0123  1283               	bcf	3,5	;RP0=0, select bank0
  1635     0124  1303               	bcf	3,6	;RP1=0, select bank0
  1636     0125  0844               	movf	_old_i_id,w
  1637     0126  1683               	bsf	3,5	;RP0=1, select bank1
  1638     0127  1303               	bcf	3,6	;RP1=0, select bank1
  1639     0128  0664               	xorwf	_i_id^(0+128),w
  1640     0129                     u4115:
  1641     0129  1903               	skipnz
  1642     012A  292C               	goto	u4111
  1643     012B  292D               	goto	u4110
  1644     012C                     u4111:
  1645     012C  2958               	goto	l3903
  1646     012D                     u4110:
  1647     012D                     l3895:
  1648     012D  086E               	movf	_initialize^(0+128),w
  1649     012E  1903               	btfsc	3,2
  1650     012F  2931               	goto	u4121
  1651     0130  2932               	goto	u4120
  1652     0131                     u4121:
  1653     0131  2958               	goto	l3903
  1654     0132                     u4120:
  1655     0132                     l3897:
  1656                           
  1657                           ;main.c: 172:         {;main.c: 174:             lcdSend(0x01, 0);
  1658     0132  01A0               	clrf	lcdSend@tipo^(0+128)
  1659     0133  3001               	movlw	1
  1660     0134  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1661     0139                     l3899:
  1662                           
  1663                           ;main.c: 175:             lcdPrint("#=conf. *=canc.\0");
  1664     0139  3038               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1665     013A  1683               	bsf	3,5	;RP0=1, select bank1
  1666     013B  1303               	bcf	3,6	;RP1=0, select bank1
  1667     013C  00A4               	movwf	lcdPrint@str^(0+128)
  1668     013D  3080               	movlw	128
  1669     013E  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1670     013F  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1671     0144                     l3901:
  1672                           
  1673                           ;main.c: 176:             lcdSend(0xC0, 0);
  1674     0144  1683               	bsf	3,5	;RP0=1, select bank1
  1675     0145  1303               	bcf	3,6	;RP1=0, select bank1
  1676     0146  01A0               	clrf	lcdSend@tipo^(0+128)
  1677     0147  30C0               	movlw	192
  1678     0148  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1679                           
  1680                           ;main.c: 177:             lcdPrint(PIC_ID);
  1681     014D  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1682     014E  1683               	bsf	3,5	;RP0=1, select bank1
  1683     014F  1303               	bcf	3,6	;RP1=0, select bank1
  1684     0150  00A4               	movwf	lcdPrint@str^(0+128)
  1685     0151  3000               	movlw	0
  1686     0152  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1687     0153  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1688     0158                     l3903:
  1689                           
  1690                           ;main.c: 180:         old_i_id = i_id;
  1691     0158  1683               	bsf	3,5	;RP0=1, select bank1
  1692     0159  1303               	bcf	3,6	;RP1=0, select bank1
  1693     015A  0865               	movf	(_i_id+1)^(0+128),w
  1694     015B  1283               	bcf	3,5	;RP0=0, select bank0
  1695     015C  1303               	bcf	3,6	;RP1=0, select bank0
  1696     015D  00C5               	movwf	_old_i_id+1
  1697     015E  1683               	bsf	3,5	;RP0=1, select bank1
  1698     015F  1303               	bcf	3,6	;RP1=0, select bank1
  1699     0160  0864               	movf	_i_id^(0+128),w
  1700     0161  1283               	bcf	3,5	;RP0=0, select bank0
  1701     0162  1303               	bcf	3,6	;RP1=0, select bank0
  1702     0163  00C4               	movwf	_old_i_id
  1703     0164                     l3905:
  1704                           
  1705                           ;main.c: 184:         if(num_rand != old_num_rand)
  1706     0164  1683               	bsf	3,5	;RP0=1, select bank3
  1707     0165  1703               	bsf	3,6	;RP1=1, select bank3
  1708     0166  0811               	movf	(_old_num_rand+1)^(0+384),w
  1709     0167  1683               	bsf	3,5	;RP0=1, select bank1
  1710     0168  1303               	bcf	3,6	;RP1=0, select bank1
  1711     0169  0663               	xorwf	(_num_rand+1)^(0+128),w
  1712     016A  1D03               	skipz
  1713     016B  2972               	goto	u4135
  1714     016C  1683               	bsf	3,5	;RP0=1, select bank3
  1715     016D  1703               	bsf	3,6	;RP1=1, select bank3
  1716     016E  0810               	movf	_old_num_rand^(0+384),w
  1717     016F  1683               	bsf	3,5	;RP0=1, select bank1
  1718     0170  1303               	bcf	3,6	;RP1=0, select bank1
  1719     0171  0662               	xorwf	_num_rand^(0+128),w
  1720     0172                     u4135:
  1721     0172  1903               	skipnz
  1722     0173  2975               	goto	u4131
  1723     0174  2976               	goto	u4130
  1724     0175                     u4131:
  1725     0175  29CF               	goto	l3931
  1726     0176                     u4130:
  1727     0176                     l3907:
  1728                           
  1729                           ;main.c: 185:         {;main.c: 187:             lcdSend(0x01, 0);
  1730     0176  01A0               	clrf	lcdSend@tipo^(0+128)
  1731     0177  3001               	movlw	1
  1732     0178  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1733     017D                     l3909:
  1734                           
  1735                           ;main.c: 189:             char num_rand_s[16];;main.c: 190:             ConvertToString(
      +                          num_rand, num_rand_s);
  1736     017D  1683               	bsf	3,5	;RP0=1, select bank1
  1737     017E  1303               	bcf	3,6	;RP1=0, select bank1
  1738     017F  0862               	movf	_num_rand^(0+128),w
  1739     0180  00D9               	movwf	ConvertToString@n^(0+128)
  1740     0181  0863               	movf	(_num_rand+1)^(0+128),w
  1741     0182  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  1742     0183  3000               	movlw	0
  1743     0184  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  1744     0185  30FF               	movlw	255
  1745     0186  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  1746     0187  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  1747     0188  30D2               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1748     0189  00DD               	movwf	ConvertToString@str^(0+128)
  1749     018A  3001               	movlw	1
  1750     018B  00DE               	movwf	(ConvertToString@str+1)^(0+128)
  1751     018C  120A  118A  25F4  120A  118A  	fcall	_ConvertToString
  1752     0191                     l3911:
  1753                           
  1754                           ;main.c: 191:             lcdPrint(num_rand_s);
  1755     0191  30D2               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1756     0192  1683               	bsf	3,5	;RP0=1, select bank1
  1757     0193  1303               	bcf	3,6	;RP1=0, select bank1
  1758     0194  00A4               	movwf	lcdPrint@str^(0+128)
  1759     0195  3001               	movlw	1
  1760     0196  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1761     0197  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1762     019C                     l3913:
  1763                           
  1764                           ;main.c: 203:             packet[0] = '0';
  1765     019C  3030               	movlw	48
  1766     019D  1683               	bsf	3,5	;RP0=1, select bank3
  1767     019E  1703               	bsf	3,6	;RP1=1, select bank3
  1768     019F  00B4               	movwf	_packet^(0+384)
  1769     01A0                     l3915:
  1770                           
  1771                           ;main.c: 204:             packet[1] = '/';
  1772     01A0  302F               	movlw	47
  1773     01A1  00B5               	movwf	(_packet^(0+384)+1)
  1774     01A2                     l3917:
  1775                           
  1776                           ;main.c: 205:             packet[2] = '\0';
  1777     01A2  01B6               	clrf	(_packet^(0+384)+2)
  1778     01A3                     l3919:
  1779                           
  1780                           ;main.c: 207:             ConcatToPacket(packet, PIC_ID, '/');
  1781     01A3  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1782     01A4  1683               	bsf	3,5	;RP0=1, select bank1
  1783     01A5  1303               	bcf	3,6	;RP1=0, select bank1
  1784     01A6  00B3               	movwf	ConcatToPacket@str^(0+128)
  1785     01A7  3000               	movlw	0
  1786     01A8  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1787     01A9  302F               	movlw	47
  1788     01AA  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1789     01AB  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1790     01AC  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  1791     01B1                     l3921:
  1792                           
  1793                           ;main.c: 209:             packet[6] = '0';
  1794     01B1  3030               	movlw	48
  1795     01B2  1683               	bsf	3,5	;RP0=1, select bank3
  1796     01B3  1703               	bsf	3,6	;RP1=1, select bank3
  1797     01B4  00BA               	movwf	(_packet^(0+384)+6)
  1798     01B5                     l3923:
  1799                           
  1800                           ;main.c: 210:             packet[7] = '/';
  1801     01B5  302F               	movlw	47
  1802     01B6  00BB               	movwf	(_packet^(0+384)+7)
  1803     01B7                     l3925:
  1804                           
  1805                           ;main.c: 211:             packet[8] = '\0';
  1806     01B7  01BC               	clrf	(_packet^(0+384)+8)
  1807     01B8                     l3927:
  1808                           
  1809                           ;main.c: 213:             ConcatToPacket(packet, num_rand_s, ' ');
  1810     01B8  30D2               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1811     01B9  1683               	bsf	3,5	;RP0=1, select bank1
  1812     01BA  1303               	bcf	3,6	;RP1=0, select bank1
  1813     01BB  00B3               	movwf	ConcatToPacket@str^(0+128)
  1814     01BC  3001               	movlw	1
  1815     01BD  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1816     01BE  3020               	movlw	32
  1817     01BF  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1818     01C0  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1819     01C1  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  1820     01C6                     l3929:
  1821                           
  1822                           ;main.c: 215:             UART_TxString(packet, 0);
  1823     01C6  1683               	bsf	3,5	;RP0=1, select bank1
  1824     01C7  1303               	bcf	3,6	;RP1=0, select bank1
  1825     01C8  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  1826     01C9  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1827     01CA  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  1828     01CF                     l3931:
  1829                           
  1830                           ;main.c: 218:         old_num_rand = num_rand;
  1831     01CF  1683               	bsf	3,5	;RP0=1, select bank1
  1832     01D0  1303               	bcf	3,6	;RP1=0, select bank1
  1833     01D1  0863               	movf	(_num_rand+1)^(0+128),w
  1834     01D2  1683               	bsf	3,5	;RP0=1, select bank3
  1835     01D3  1703               	bsf	3,6	;RP1=1, select bank3
  1836     01D4  0091               	movwf	(_old_num_rand+1)^(0+384)
  1837     01D5  1683               	bsf	3,5	;RP0=1, select bank1
  1838     01D6  1303               	bcf	3,6	;RP1=0, select bank1
  1839     01D7  0862               	movf	_num_rand^(0+128),w
  1840     01D8  1683               	bsf	3,5	;RP0=1, select bank3
  1841     01D9  1703               	bsf	3,6	;RP1=1, select bank3
  1842     01DA  0090               	movwf	_old_num_rand^(0+384)
  1843     01DB                     l3933:
  1844                           
  1845                           ;main.c: 221:         if(recieved)
  1846     01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1847     01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1848     01DD  084C               	movf	_recieved,w
  1849     01DE  1903               	btfsc	3,2
  1850     01DF  29E1               	goto	u4141
  1851     01E0  29E2               	goto	u4140
  1852     01E1                     u4141:
  1853     01E1  2AB9               	goto	l3985
  1854     01E2                     u4140:
  1855     01E2                     l3935:
  1856                           
  1857                           ;main.c: 222:         {;main.c: 223:             SplitPacket(dato);
  1858     01E2  3010               	movlw	(low (_dato| (0+256)))& (0+255)
  1859     01E3  120A  158A  2765  120A  118A  	fcall	_SplitPacket
  1860     01E8                     l3937:
  1861                           
  1862                           ;main.c: 225:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '0')
  1863     01E8  3031               	movlw	49
  1864     01E9  1683               	bsf	3,5	;RP0=1, select bank1
  1865     01EA  1303               	bcf	3,6	;RP1=0, select bank1
  1866     01EB  0669               	xorwf	_source^(0+128),w
  1867     01EC  1D03               	btfss	3,2
  1868     01ED  29EF               	goto	u4151
  1869     01EE  29F0               	goto	u4150
  1870     01EF                     u4151:
  1871     01EF  2A73               	goto	l3969
  1872     01F0                     u4150:
  1873     01F0                     l3939:
  1874     01F0  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1875     01F1  00A7               	movwf	CompareStrings@str2^(0+128)
  1876     01F2  3000               	movlw	0
  1877     01F3  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  1878     01F4  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  1879     01F5  120A  158A  2249  120A  118A  	fcall	_CompareStrings
  1880     01FA  3A00               	xorlw	0
  1881     01FB  1903               	skipnz
  1882     01FC  29FE               	goto	u4161
  1883     01FD  29FF               	goto	u4160
  1884     01FE                     u4161:
  1885     01FE  2A73               	goto	l3969
  1886     01FF                     u4160:
  1887     01FF                     l3941:
  1888     01FF  3030               	movlw	48
  1889     0200  1683               	bsf	3,5	;RP0=1, select bank1
  1890     0201  1303               	bcf	3,6	;RP1=0, select bank1
  1891     0202  0668               	xorwf	_type^(0+128),w
  1892     0203  1D03               	btfss	3,2
  1893     0204  2A06               	goto	u4171
  1894     0205  2A07               	goto	u4170
  1895     0206                     u4171:
  1896     0206  2A73               	goto	l3969
  1897     0207                     u4170:
  1898     0207                     l3943:
  1899                           
  1900                           ;main.c: 226:             {;main.c: 228:                 packet[0] = '0';
  1901     0207  3030               	movlw	48
  1902     0208  1683               	bsf	3,5	;RP0=1, select bank3
  1903     0209  1703               	bsf	3,6	;RP1=1, select bank3
  1904     020A  00B4               	movwf	_packet^(0+384)
  1905                           
  1906                           ;main.c: 229:                 packet[1] = '/';
  1907     020B  302F               	movlw	47
  1908     020C  00B5               	movwf	(_packet^(0+384)+1)
  1909     020D                     l3945:
  1910                           
  1911                           ;main.c: 230:                 packet[2] = '\0';
  1912     020D  01B6               	clrf	(_packet^(0+384)+2)
  1913     020E                     l3947:
  1914                           
  1915                           ;main.c: 231:                 ConcatToPacket(packet, PIC_ID, '/');
  1916     020E  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  1917     020F  1683               	bsf	3,5	;RP0=1, select bank1
  1918     0210  1303               	bcf	3,6	;RP1=0, select bank1
  1919     0211  00B3               	movwf	ConcatToPacket@str^(0+128)
  1920     0212  3000               	movlw	0
  1921     0213  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1922     0214  302F               	movlw	47
  1923     0215  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1924     0216  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1925     0217  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  1926     021C                     l3949:
  1927                           
  1928                           ;main.c: 232:                 ConcatToPacket(packet, "2", ' ');
  1929     021C  30E1               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1930     021D  1683               	bsf	3,5	;RP0=1, select bank1
  1931     021E  1303               	bcf	3,6	;RP1=0, select bank1
  1932     021F  00B3               	movwf	ConcatToPacket@str^(0+128)
  1933     0220  3080               	movlw	128
  1934     0221  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1935     0222  3020               	movlw	32
  1936     0223  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1937     0224  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1938     0225  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  1939     022A                     l3951:
  1940                           
  1941                           ;main.c: 233:                 UART_TxString(packet, 1);
  1942     022A  1683               	bsf	3,5	;RP0=1, select bank1
  1943     022B  1303               	bcf	3,6	;RP1=0, select bank1
  1944     022C  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  1945     022D  0AC1               	incf	UART_TxString@is_ACK^(0+128),f
  1946     022E  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  1947     022F  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  1948     0234                     l3953:
  1949                           
  1950                           ;main.c: 235:                 compare = 1;
  1951     0234  1683               	bsf	3,5	;RP0=1, select bank1
  1952     0235  1303               	bcf	3,6	;RP1=0, select bank1
  1953     0236  01E6               	clrf	_compare^(0+128)
  1954     0237  0AE6               	incf	_compare^(0+128),f
  1955     0238                     l3955:
  1956                           
  1957                           ;main.c: 236:                 old_num_rand = num_rand = 0;
  1958     0238  01E2               	clrf	_num_rand^(0+128)
  1959     0239  01E3               	clrf	(_num_rand+1)^(0+128)
  1960     023A  1683               	bsf	3,5	;RP0=1, select bank3
  1961     023B  1703               	bsf	3,6	;RP1=1, select bank3
  1962     023C  0190               	clrf	_old_num_rand^(0+384)
  1963     023D  0191               	clrf	(_old_num_rand+1)^(0+384)
  1964     023E                     l3957:
  1965                           
  1966                           ;main.c: 238:                 maxFail = 3;
  1967     023E  3003               	movlw	3
  1968     023F  1683               	bsf	3,5	;RP0=1, select bank1
  1969     0240  1303               	bcf	3,6	;RP1=0, select bank1
  1970     0241  00ED               	movwf	_maxFail^(0+128)
  1971     0242                     l3959:
  1972                           
  1973                           ;main.c: 240:                 lcdSend(0x01, 0);
  1974     0242  01A0               	clrf	lcdSend@tipo^(0+128)
  1975     0243  3001               	movlw	1
  1976     0244  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1977     0249                     l3961:
  1978                           
  1979                           ;main.c: 241:                 lcdPrint("Inserisci codice\0");
  1980     0249  3026               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1981     024A  1683               	bsf	3,5	;RP0=1, select bank1
  1982     024B  1303               	bcf	3,6	;RP1=0, select bank1
  1983     024C  00A4               	movwf	lcdPrint@str^(0+128)
  1984     024D  3080               	movlw	128
  1985     024E  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1986     024F  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  1987     0254                     l3963:
  1988                           
  1989                           ;main.c: 242:                 lcdSend(0xC0, 0);
  1990     0254  1683               	bsf	3,5	;RP0=1, select bank1
  1991     0255  1303               	bcf	3,6	;RP1=0, select bank1
  1992     0256  01A0               	clrf	lcdSend@tipo^(0+128)
  1993     0257  30C0               	movlw	192
  1994     0258  160A  118A  2714  120A  118A  	fcall	_lcdSend
  1995     025D                     l3965:
  1996                           
  1997                           ;main.c: 243:                 lcdPrint("Tentativi: \0");
  1998     025D  3097               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1999     025E  1683               	bsf	3,5	;RP0=1, select bank1
  2000     025F  1303               	bcf	3,6	;RP1=0, select bank1
  2001     0260  00A4               	movwf	lcdPrint@str^(0+128)
  2002     0261  3080               	movlw	128
  2003     0262  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2004     0263  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  2005     0268                     l3967:
  2006                           
  2007                           ;main.c: 244:                 lcdSend(maxFail + '0', 1);
  2008     0268  1683               	bsf	3,5	;RP0=1, select bank1
  2009     0269  1303               	bcf	3,6	;RP1=0, select bank1
  2010     026A  01A0               	clrf	lcdSend@tipo^(0+128)
  2011     026B  0AA0               	incf	lcdSend@tipo^(0+128),f
  2012     026C  086D               	movf	_maxFail^(0+128),w
  2013     026D  3E30               	addlw	48
  2014     026E  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2015     0273                     l3969:
  2016                           
  2017                           ;main.c: 247:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '2')
  2018     0273  3031               	movlw	49
  2019     0274  1683               	bsf	3,5	;RP0=1, select bank1
  2020     0275  1303               	bcf	3,6	;RP1=0, select bank1
  2021     0276  0669               	xorwf	_source^(0+128),w
  2022     0277  1D03               	btfss	3,2
  2023     0278  2A7A               	goto	u4181
  2024     0279  2A7B               	goto	u4180
  2025     027A                     u4181:
  2026     027A  2AB5               	goto	l3981
  2027     027B                     u4180:
  2028     027B                     l3971:
  2029     027B  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  2030     027C  00A7               	movwf	CompareStrings@str2^(0+128)
  2031     027D  3000               	movlw	0
  2032     027E  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  2033     027F  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  2034     0280  120A  158A  2249  120A  118A  	fcall	_CompareStrings
  2035     0285  3A00               	xorlw	0
  2036     0286  1903               	skipnz
  2037     0287  2A89               	goto	u4191
  2038     0288  2A8A               	goto	u4190
  2039     0289                     u4191:
  2040     0289  2AB5               	goto	l3981
  2041     028A                     u4190:
  2042     028A                     l3973:
  2043     028A  3032               	movlw	50
  2044     028B  1683               	bsf	3,5	;RP0=1, select bank1
  2045     028C  1303               	bcf	3,6	;RP1=0, select bank1
  2046     028D  0668               	xorwf	_type^(0+128),w
  2047     028E  1D03               	btfss	3,2
  2048     028F  2A91               	goto	u4201
  2049     0290  2A92               	goto	u4200
  2050     0291                     u4201:
  2051     0291  2AB5               	goto	l3981
  2052     0292                     u4200:
  2053     0292                     l3975:
  2054                           
  2055                           ;main.c: 248:             {;main.c: 250:                 if(num_rand != 0)
  2056     0292  0862               	movf	_num_rand^(0+128),w
  2057     0293  0463               	iorwf	(_num_rand+1)^(0+128),w
  2058     0294  1903               	btfsc	3,2
  2059     0295  2A97               	goto	u4211
  2060     0296  2A98               	goto	u4210
  2061     0297                     u4211:
  2062     0297  2AA3               	goto	l3979
  2063     0298                     u4210:
  2064     0298                     l3977:
  2065                           
  2066                           ;main.c: 251:                     seconds = 0;
  2067     0298  3000               	movlw	0
  2068     0299  1283               	bcf	3,5	;RP0=0, select bank0
  2069     029A  1303               	bcf	3,6	;RP1=0, select bank0
  2070     029B  00BF               	movwf	_seconds+3
  2071     029C  3000               	movlw	0
  2072     029D  00BE               	movwf	_seconds+2
  2073     029E  3000               	movlw	0
  2074     029F  00BD               	movwf	_seconds+1
  2075     02A0  3000               	movlw	0
  2076     02A1  00BC               	movwf	_seconds
  2077     02A2  2AB5               	goto	l3981
  2078     02A3                     l3979:
  2079                           
  2080                           ;main.c: 254:                 {;main.c: 255:                     milliseconds = 0;
  2081     02A3  3000               	movlw	0
  2082     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2083     02A5  1303               	bcf	3,6	;RP1=0, select bank0
  2084     02A6  00C3               	movwf	_milliseconds+3
  2085     02A7  3000               	movlw	0
  2086     02A8  00C2               	movwf	_milliseconds+2
  2087     02A9  3000               	movlw	0
  2088     02AA  00C1               	movwf	_milliseconds+1
  2089     02AB  3000               	movlw	0
  2090     02AC  00C0               	movwf	_milliseconds
  2091                           
  2092                           ;main.c: 256:                     seconds = 1000;
  2093     02AD  3000               	movlw	0
  2094     02AE  00BF               	movwf	_seconds+3
  2095     02AF  3000               	movlw	0
  2096     02B0  00BE               	movwf	_seconds+2
  2097     02B1  3003               	movlw	3
  2098     02B2  00BD               	movwf	_seconds+1
  2099     02B3  30E8               	movlw	232
  2100     02B4  00BC               	movwf	_seconds
  2101     02B5                     l3981:
  2102                           
  2103                           ;main.c: 259:             recieved = 0;
  2104     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2105     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2106     02B7  01CC               	clrf	_recieved
  2107     02B8                     l3983:
  2108                           
  2109                           ;main.c: 260:             iS = 0;
  2110     02B8  01CE               	clrf	_iS
  2111     02B9                     l3985:
  2112                           
  2113                           ;main.c: 265:         if(success)
  2114     02B9  084B               	movf	_success,w
  2115     02BA  1903               	btfsc	3,2
  2116     02BB  2ABD               	goto	u4221
  2117     02BC  2ABE               	goto	u4220
  2118     02BD                     u4221:
  2119     02BD  2B0D               	goto	l4011
  2120     02BE                     u4220:
  2121     02BE                     l3987:
  2122                           
  2123                           ;main.c: 266:         {;main.c: 268:             lcdSend(0x01, 0);
  2124     02BE  1683               	bsf	3,5	;RP0=1, select bank1
  2125     02BF  1303               	bcf	3,6	;RP1=0, select bank1
  2126     02C0  01A0               	clrf	lcdSend@tipo^(0+128)
  2127     02C1  3001               	movlw	1
  2128     02C2  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2129     02C7                     l3989:
  2130                           
  2131                           ;main.c: 269:             lcdPrint("Benvenuto!\0");
  2132     02C7  30A4               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2133     02C8  1683               	bsf	3,5	;RP0=1, select bank1
  2134     02C9  1303               	bcf	3,6	;RP1=0, select bank1
  2135     02CA  00A4               	movwf	lcdPrint@str^(0+128)
  2136     02CB  3080               	movlw	128
  2137     02CC  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2138     02CD  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  2139     02D2                     l3991:
  2140                           
  2141                           ;main.c: 270:             iT = old_iT = 0;
  2142     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  2143     02D3  1303               	bcf	3,6	;RP1=0, select bank0
  2144     02D4  01CD               	clrf	_old_iT
  2145     02D5  1683               	bsf	3,5	;RP0=1, select bank1
  2146     02D6  1303               	bcf	3,6	;RP1=0, select bank1
  2147     02D7  01E7               	clrf	_iT^(0+128)
  2148     02D8                     l3993:
  2149                           
  2150                           ;main.c: 271:             success = 0;
  2151     02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2152     02D9  1303               	bcf	3,6	;RP1=0, select bank0
  2153     02DA  01CB               	clrf	_success
  2154     02DB                     l3995:
  2155                           
  2156                           ;main.c: 273:             compare = 0;
  2157     02DB  1683               	bsf	3,5	;RP0=1, select bank1
  2158     02DC  1303               	bcf	3,6	;RP1=0, select bank1
  2159     02DD  01E6               	clrf	_compare^(0+128)
  2160     02DE                     l3997:
  2161                           
  2162                           ;main.c: 274:             maxFail = 3;
  2163     02DE  3003               	movlw	3
  2164     02DF  00ED               	movwf	_maxFail^(0+128)
  2165     02E0                     l3999:
  2166                           
  2167                           ;main.c: 276:             packet[0] = '0';
  2168     02E0  3030               	movlw	48
  2169     02E1  1683               	bsf	3,5	;RP0=1, select bank3
  2170     02E2  1703               	bsf	3,6	;RP1=1, select bank3
  2171     02E3  00B4               	movwf	_packet^(0+384)
  2172     02E4                     l4001:
  2173                           
  2174                           ;main.c: 277:             packet[1] = '/';
  2175     02E4  302F               	movlw	47
  2176     02E5  00B5               	movwf	(_packet^(0+384)+1)
  2177     02E6                     l4003:
  2178                           
  2179                           ;main.c: 278:             packet[2] = '\0';
  2180     02E6  01B6               	clrf	(_packet^(0+384)+2)
  2181     02E7                     l4005:
  2182                           
  2183                           ;main.c: 279:             ConcatToPacket(packet, PIC_ID, '/');
  2184     02E7  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  2185     02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2186     02E9  1303               	bcf	3,6	;RP1=0, select bank1
  2187     02EA  00B3               	movwf	ConcatToPacket@str^(0+128)
  2188     02EB  3000               	movlw	0
  2189     02EC  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2190     02ED  302F               	movlw	47
  2191     02EE  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2192     02EF  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2193     02F0  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  2194     02F5                     l4007:
  2195                           
  2196                           ;main.c: 280:             ConcatToPacket(packet, "1/1", ' ');
  2197     02F5  30DD               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2198     02F6  1683               	bsf	3,5	;RP0=1, select bank1
  2199     02F7  1303               	bcf	3,6	;RP1=0, select bank1
  2200     02F8  00B3               	movwf	ConcatToPacket@str^(0+128)
  2201     02F9  3080               	movlw	128
  2202     02FA  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2203     02FB  3020               	movlw	32
  2204     02FC  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2205     02FD  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2206     02FE  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  2207     0303                     l4009:
  2208                           
  2209                           ;main.c: 281:             UART_TxString(packet, 0);
  2210     0303  1683               	bsf	3,5	;RP0=1, select bank1
  2211     0304  1303               	bcf	3,6	;RP1=0, select bank1
  2212     0305  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2213     0306  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2214     0307  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  2215                           
  2216                           ;main.c: 282:         }
  2217     030C  2BAE               	goto	l4053
  2218     030D                     l4011:
  2219     030D  1683               	bsf	3,5	;RP0=1, select bank1
  2220     030E  1303               	bcf	3,6	;RP1=0, select bank1
  2221     030F  086D               	movf	_maxFail^(0+128),w
  2222     0310  1903               	btfsc	3,2
  2223     0311  2B13               	goto	u4231
  2224     0312  2B14               	goto	u4230
  2225     0313                     u4231:
  2226     0313  2B5E               	goto	l4029
  2227     0314                     u4230:
  2228     0314                     l4013:
  2229     0314  3003               	movlw	3
  2230     0315  026D               	subwf	_maxFail^(0+128),w
  2231     0316  1803               	skipnc
  2232     0317  2B19               	goto	u4241
  2233     0318  2B1A               	goto	u4240
  2234     0319                     u4241:
  2235     0319  2B5E               	goto	l4029
  2236     031A                     u4240:
  2237     031A                     l4015:
  2238     031A  1283               	bcf	3,5	;RP0=0, select bank0
  2239     031B  1303               	bcf	3,6	;RP1=0, select bank0
  2240     031C  084A               	movf	_fail,w
  2241     031D  1903               	btfsc	3,2
  2242     031E  2B20               	goto	u4251
  2243     031F  2B21               	goto	u4250
  2244     0320                     u4251:
  2245     0320  2B5E               	goto	l4029
  2246     0321                     u4250:
  2247     0321                     l4017:
  2248                           
  2249                           ;main.c: 285:         {;main.c: 287:             lcdSend(0x01, 0);
  2250     0321  1683               	bsf	3,5	;RP0=1, select bank1
  2251     0322  1303               	bcf	3,6	;RP1=0, select bank1
  2252     0323  01A0               	clrf	lcdSend@tipo^(0+128)
  2253     0324  3001               	movlw	1
  2254     0325  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2255     032A                     l4019:
  2256                           
  2257                           ;main.c: 288:             lcdPrint("Codice errato\0");
  2258     032A  307A               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2259     032B  1683               	bsf	3,5	;RP0=1, select bank1
  2260     032C  1303               	bcf	3,6	;RP1=0, select bank1
  2261     032D  00A4               	movwf	lcdPrint@str^(0+128)
  2262     032E  3080               	movlw	128
  2263     032F  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2264     0330  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  2265     0335                     l4021:
  2266                           
  2267                           ;main.c: 289:             lcdSend(0xC0, 0);
  2268     0335  1683               	bsf	3,5	;RP0=1, select bank1
  2269     0336  1303               	bcf	3,6	;RP1=0, select bank1
  2270     0337  01A0               	clrf	lcdSend@tipo^(0+128)
  2271     0338  30C0               	movlw	192
  2272     0339  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2273                           
  2274                           ;main.c: 290:             lcdPrint("Tentativi: \0");
  2275     033E  3097               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2276     033F  1683               	bsf	3,5	;RP0=1, select bank1
  2277     0340  1303               	bcf	3,6	;RP1=0, select bank1
  2278     0341  00A4               	movwf	lcdPrint@str^(0+128)
  2279     0342  3080               	movlw	128
  2280     0343  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2281     0344  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  2282     0349                     l4023:
  2283                           
  2284                           ;main.c: 291:             lcdSend(maxFail + '0', 1);
  2285     0349  1683               	bsf	3,5	;RP0=1, select bank1
  2286     034A  1303               	bcf	3,6	;RP1=0, select bank1
  2287     034B  01A0               	clrf	lcdSend@tipo^(0+128)
  2288     034C  0AA0               	incf	lcdSend@tipo^(0+128),f
  2289     034D  086D               	movf	_maxFail^(0+128),w
  2290     034E  3E30               	addlw	48
  2291     034F  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2292     0354                     l4025:
  2293                           
  2294                           ;main.c: 292:             iT = old_iT = 0;
  2295     0354  1283               	bcf	3,5	;RP0=0, select bank0
  2296     0355  1303               	bcf	3,6	;RP1=0, select bank0
  2297     0356  01CD               	clrf	_old_iT
  2298     0357  1683               	bsf	3,5	;RP0=1, select bank1
  2299     0358  1303               	bcf	3,6	;RP1=0, select bank1
  2300     0359  01E7               	clrf	_iT^(0+128)
  2301     035A                     l4027:
  2302                           
  2303                           ;main.c: 293:             fail = 0;
  2304     035A  1283               	bcf	3,5	;RP0=0, select bank0
  2305     035B  1303               	bcf	3,6	;RP1=0, select bank0
  2306     035C  01CA               	clrf	_fail
  2307                           
  2308                           ;main.c: 294:         }
  2309     035D  2BAE               	goto	l4053
  2310     035E                     l4029:
  2311     035E  1683               	bsf	3,5	;RP0=1, select bank1
  2312     035F  1303               	bcf	3,6	;RP1=0, select bank1
  2313     0360  086D               	movf	_maxFail^(0+128),w
  2314     0361  1D03               	btfss	3,2
  2315     0362  2B64               	goto	u4261
  2316     0363  2B65               	goto	u4260
  2317     0364                     u4261:
  2318     0364  2BAE               	goto	l4053
  2319     0365                     u4260:
  2320     0365                     l4031:
  2321                           
  2322                           ;main.c: 297:         {;main.c: 299:             lcdSend(0x01, 0);
  2323     0365  01A0               	clrf	lcdSend@tipo^(0+128)
  2324     0366  3001               	movlw	1
  2325     0367  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2326     036C                     l4033:
  2327                           
  2328                           ;main.c: 300:             lcdPrint("Tent. esauriti\0");
  2329     036C  306A               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2330     036D  1683               	bsf	3,5	;RP0=1, select bank1
  2331     036E  1303               	bcf	3,6	;RP1=0, select bank1
  2332     036F  00A4               	movwf	lcdPrint@str^(0+128)
  2333     0370  3080               	movlw	128
  2334     0371  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2335     0372  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  2336     0377                     l4035:
  2337                           
  2338                           ;main.c: 302:             maxFail = 3;
  2339     0377  3003               	movlw	3
  2340     0378  1683               	bsf	3,5	;RP0=1, select bank1
  2341     0379  1303               	bcf	3,6	;RP1=0, select bank1
  2342     037A  00ED               	movwf	_maxFail^(0+128)
  2343     037B                     l4037:
  2344                           
  2345                           ;main.c: 303:             iT = old_iT = 0;
  2346     037B  1283               	bcf	3,5	;RP0=0, select bank0
  2347     037C  1303               	bcf	3,6	;RP1=0, select bank0
  2348     037D  01CD               	clrf	_old_iT
  2349     037E  1683               	bsf	3,5	;RP0=1, select bank1
  2350     037F  1303               	bcf	3,6	;RP1=0, select bank1
  2351     0380  01E7               	clrf	_iT^(0+128)
  2352     0381                     l4039:
  2353                           
  2354                           ;main.c: 304:             compare = 0;
  2355     0381  01E6               	clrf	_compare^(0+128)
  2356     0382                     l4041:
  2357                           
  2358                           ;main.c: 306:             packet[0] = '0';
  2359     0382  3030               	movlw	48
  2360     0383  1683               	bsf	3,5	;RP0=1, select bank3
  2361     0384  1703               	bsf	3,6	;RP1=1, select bank3
  2362     0385  00B4               	movwf	_packet^(0+384)
  2363     0386                     l4043:
  2364                           
  2365                           ;main.c: 307:             packet[1] = '/';
  2366     0386  302F               	movlw	47
  2367     0387  00B5               	movwf	(_packet^(0+384)+1)
  2368     0388                     l4045:
  2369                           
  2370                           ;main.c: 308:             packet[2] = '\0';
  2371     0388  01B6               	clrf	(_packet^(0+384)+2)
  2372     0389                     l4047:
  2373                           
  2374                           ;main.c: 309:             ConcatToPacket(packet, PIC_ID, '/');
  2375     0389  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  2376     038A  1683               	bsf	3,5	;RP0=1, select bank1
  2377     038B  1303               	bcf	3,6	;RP1=0, select bank1
  2378     038C  00B3               	movwf	ConcatToPacket@str^(0+128)
  2379     038D  3000               	movlw	0
  2380     038E  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2381     038F  302F               	movlw	47
  2382     0390  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2383     0391  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2384     0392  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  2385     0397                     l4049:
  2386                           
  2387                           ;main.c: 310:             ConcatToPacket(packet, "1/0", ' ');
  2388     0397  30D9               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2389     0398  1683               	bsf	3,5	;RP0=1, select bank1
  2390     0399  1303               	bcf	3,6	;RP1=0, select bank1
  2391     039A  00B3               	movwf	ConcatToPacket@str^(0+128)
  2392     039B  3080               	movlw	128
  2393     039C  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2394     039D  3020               	movlw	32
  2395     039E  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2396     039F  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2397     03A0  120A  158A  21A9  120A  118A  	fcall	_ConcatToPacket
  2398     03A5                     l4051:
  2399                           
  2400                           ;main.c: 311:             UART_TxString(packet, 0);
  2401     03A5  1683               	bsf	3,5	;RP0=1, select bank1
  2402     03A6  1303               	bcf	3,6	;RP1=0, select bank1
  2403     03A7  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2404     03A8  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  2405     03A9  120A  158A  265F  120A  118A  	fcall	_UART_TxString
  2406     03AE                     l4053:
  2407                           
  2408                           ;main.c: 315:         if(iT != old_iT && compare)
  2409     03AE  1683               	bsf	3,5	;RP0=1, select bank1
  2410     03AF  1303               	bcf	3,6	;RP1=0, select bank1
  2411     03B0  0867               	movf	_iT^(0+128),w
  2412     03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2413     03B2  1303               	bcf	3,6	;RP1=0, select bank0
  2414     03B3  064D               	xorwf	_old_iT,w
  2415     03B4  1903               	skipnz
  2416     03B5  2BB7               	goto	u4271
  2417     03B6  2BB8               	goto	u4270
  2418     03B7                     u4271:
  2419     03B7  2BE5               	goto	l4063
  2420     03B8                     u4270:
  2421     03B8                     l4055:
  2422     03B8  1683               	bsf	3,5	;RP0=1, select bank1
  2423     03B9  1303               	bcf	3,6	;RP1=0, select bank1
  2424     03BA  0866               	movf	_compare^(0+128),w
  2425     03BB  1903               	btfsc	3,2
  2426     03BC  2BBE               	goto	u4281
  2427     03BD  2BBF               	goto	u4280
  2428     03BE                     u4281:
  2429     03BE  2BE5               	goto	l4063
  2430     03BF                     u4280:
  2431     03BF                     l4057:
  2432                           
  2433                           ;main.c: 316:         {;main.c: 318:             lcdSend(0x01, 0);
  2434     03BF  01A0               	clrf	lcdSend@tipo^(0+128)
  2435     03C0  3001               	movlw	1
  2436     03C1  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2437     03C6                     l4059:
  2438                           
  2439                           ;main.c: 319:             lcdPrint("#=conf. *=canc.\0\0"),
  2440     03C6  3014               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2441     03C7  1683               	bsf	3,5	;RP0=1, select bank1
  2442     03C8  1303               	bcf	3,6	;RP1=0, select bank1
  2443     03C9  00A4               	movwf	lcdPrint@str^(0+128)
  2444     03CA  3080               	movlw	128
  2445     03CB  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2446     03CC  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  2447     03D1                     l4061:
  2448     03D1  1683               	bsf	3,5	;RP0=1, select bank1
  2449     03D2  1303               	bcf	3,6	;RP1=0, select bank1
  2450     03D3  01A0               	clrf	lcdSend@tipo^(0+128)
  2451     03D4  30C0               	movlw	192
  2452     03D5  160A  118A  2714  120A  118A  	fcall	_lcdSend
  2453                           
  2454                           ;main.c: 321:             lcdPrint(datoTastierino);
  2455     03DA  3092               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2456     03DB  1683               	bsf	3,5	;RP0=1, select bank1
  2457     03DC  1303               	bcf	3,6	;RP1=0, select bank1
  2458     03DD  00A4               	movwf	lcdPrint@str^(0+128)
  2459     03DE  3001               	movlw	1
  2460     03DF  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2461     03E0  120A  158A  21F3  120A  118A  	fcall	_lcdPrint
  2462     03E5                     l4063:
  2463                           
  2464                           ;main.c: 324:         old_iT = iT;
  2465     03E5  1683               	bsf	3,5	;RP0=1, select bank1
  2466     03E6  1303               	bcf	3,6	;RP1=0, select bank1
  2467     03E7  0867               	movf	_iT^(0+128),w
  2468     03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2469     03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2470     03EA  00CD               	movwf	_old_iT
  2471     03EB  286C               	goto	l3851
  2472     03EC  120A  118A  2810   	ljmp	start
  2473     03EF                     __end_of_main:
  2474                           
  2475                           	psect	text1
  2476     03EF                     __ptext1:	
  2477 ;; *************** function _read_NumPad *****************
  2478 ;; Defined at:
  2479 ;;		line 625 in file "main.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  id              2   43[BANK1 ] int 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2493 ;;      Params:         0       0       0       0       0
  2494 ;;      Locals:         0       0       2       0       0
  2495 ;;      Temps:          0       0      10       0       0
  2496 ;;      Totals:         0       0      12       0       0
  2497 ;;Total ram usage:       12 bytes
  2498 ;; Hardware stack levels used: 1
  2499 ;; Hardware stack levels required when called: 6
  2500 ;; This function calls:
  2501 ;;		_CompareStrings
  2502 ;;		___awmod
  2503 ;;		___wmul
  2504 ;;		_eeprom_write
  2505 ;;		_rand
  2506 ;;		_srand
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512     03EF                     _read_NumPad:	
  2513                           ;psect for function _read_NumPad
  2514                           
  2515     03EF                     l3341:	
  2516                           ;incstack = 0
  2517                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2518                           
  2519                           
  2520                           ;main.c: 628:     TRISD |= 0x0F;
  2521     03EF  300F               	movlw	15
  2522     03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2523     03F1  1303               	bcf	3,6	;RP1=0, select bank1
  2524     03F2  00C1               	movwf	??_read_NumPad^(0+128)
  2525     03F3  0841               	movf	??_read_NumPad^(0+128),w
  2526     03F4  0488               	iorwf	8,f	;volatile
  2527     03F5                     l3343:
  2528                           
  2529                           ;main.c: 629:     for(colScan = 0; colScan < 3; colScan++)
  2530     03F5  01EC               	clrf	_colScan^(0+128)
  2531     03F6                     l3349:
  2532                           
  2533                           ;main.c: 630:     {;main.c: 633:         PORTB |= 0x07;
  2534     03F6  3007               	movlw	7
  2535     03F7  00C1               	movwf	??_read_NumPad^(0+128)
  2536     03F8  0841               	movf	??_read_NumPad^(0+128),w
  2537     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2538     03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2539     03FB  0486               	iorwf	6,f	;volatile
  2540     03FC                     l3351:
  2541                           
  2542                           ;main.c: 635:         PORTB &= colMask[colScan];
  2543     03FC  1683               	bsf	3,5	;RP0=1, select bank1
  2544     03FD  1303               	bcf	3,6	;RP1=0, select bank1
  2545     03FE  086C               	movf	_colScan^(0+128),w
  2546     03FF  3E11               	addlw	low ((_colMask-__stringbase)| (0+32768))
  2547     0400  0084               	movwf	4
  2548     0401  120A  158A  200A  120A  118A  	fcall	stringdir
  2549     0406  00C1               	movwf	??_read_NumPad^(0+128)
  2550     0407  0841               	movf	??_read_NumPad^(0+128),w
  2551     0408  1283               	bcf	3,5	;RP0=0, select bank0
  2552     0409  1303               	bcf	3,6	;RP1=0, select bank0
  2553     040A  0586               	andwf	6,f	;volatile
  2554     040B                     l3353:
  2555                           
  2556                           ;main.c: 637:         for(rowScan = 0; rowScan < 4; rowScan++)
  2557     040B  1683               	bsf	3,5	;RP0=1, select bank1
  2558     040C  1303               	bcf	3,6	;RP1=0, select bank1
  2559     040D  01EB               	clrf	_rowScan^(0+128)
  2560     040E                     l3359:
  2561                           
  2562                           ;main.c: 638:         {;main.c: 640:             if(!(PORTD & rowMask[rowScan]))
  2563     040E  086B               	movf	_rowScan^(0+128),w
  2564     040F  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  2565     0410  0084               	movwf	4
  2566     0411  120A  158A  200A  120A  118A  	fcall	stringdir
  2567     0416  1283               	bcf	3,5	;RP0=0, select bank0
  2568     0417  1303               	bcf	3,6	;RP1=0, select bank0
  2569     0418  0508               	andwf	8,w	;volatile
  2570     0419  1D03               	btfss	3,2
  2571     041A  2C1C               	goto	u3481
  2572     041B  2C1D               	goto	u3480
  2573     041C                     u3481:
  2574     041C  2C48               	goto	l275
  2575     041D                     u3480:
  2576     041D                     l3361:
  2577                           
  2578                           ;main.c: 641:             {;main.c: 643:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  2579     041D  3021               	movlw	33
  2580     041E  1683               	bsf	3,5	;RP0=1, select bank1
  2581     041F  1303               	bcf	3,6	;RP1=0, select bank1
  2582     0420  00C2               	movwf	(??_read_NumPad^(0+128)+1)
  2583     0421  3075               	movlw	117
  2584     0422  00C1               	movwf	??_read_NumPad^(0+128)
  2585     0423                     u4297:
  2586     0423  0BC1               	decfsz	??_read_NumPad^(0+128),f
  2587     0424  2C23               	goto	u4297
  2588     0425  0BC2               	decfsz	(??_read_NumPad^(0+128)+1),f
  2589     0426  2C23               	goto	u4297
  2590     0427  2C28               	nop2
  2591     0428                     l3363:
  2592                           
  2593                           ;main.c: 644:                 if(!(PORTD & rowMask[rowScan]))
  2594     0428  1683               	bsf	3,5	;RP0=1, select bank1
  2595     0429  1303               	bcf	3,6	;RP1=0, select bank1
  2596     042A  086B               	movf	_rowScan^(0+128),w
  2597     042B  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  2598     042C  0084               	movwf	4
  2599     042D  120A  158A  200A  120A  118A  	fcall	stringdir
  2600     0432  1283               	bcf	3,5	;RP0=0, select bank0
  2601     0433  1303               	bcf	3,6	;RP1=0, select bank0
  2602     0434  0508               	andwf	8,w	;volatile
  2603     0435  1D03               	btfss	3,2
  2604     0436  2C38               	goto	u3491
  2605     0437  2C39               	goto	u3490
  2606     0438                     u3491:
  2607     0438  2C48               	goto	l275
  2608     0439                     u3490:
  2609     0439                     l3365:
  2610                           
  2611                           ;main.c: 645:                 {;main.c: 649:                     keypressed = rowScan+(4
      +                          *colScan);
  2612     0439  1683               	bsf	3,5	;RP0=1, select bank1
  2613     043A  1303               	bcf	3,6	;RP1=0, select bank1
  2614     043B  086C               	movf	_colScan^(0+128),w
  2615     043C  00C1               	movwf	??_read_NumPad^(0+128)
  2616     043D  3002               	movlw	2
  2617     043E                     u3505:
  2618     043E  1003               	clrc
  2619     043F  0DC1               	rlf	??_read_NumPad^(0+128),f
  2620     0440  3EFF               	addlw	-1
  2621     0441  1D03               	skipz
  2622     0442  2C3E               	goto	u3505
  2623     0443  086B               	movf	_rowScan^(0+128),w
  2624     0444  0741               	addwf	??_read_NumPad^(0+128),w
  2625     0445  00EF               	movwf	_keypressed^(0+128)
  2626     0446                     l3367:
  2627                           
  2628                           ;main.c: 651:                     keyf = 1;
  2629     0446  01EA               	clrf	_keyf^(0+128)
  2630     0447  0AEA               	incf	_keyf^(0+128),f
  2631     0448                     l275:	
  2632                           ;main.c: 653:             }
  2633                           
  2634                           
  2635                           ;main.c: 654:         }
  2636     0448  3001               	movlw	1
  2637     0449  1683               	bsf	3,5	;RP0=1, select bank1
  2638     044A  1303               	bcf	3,6	;RP1=0, select bank1
  2639     044B  00C1               	movwf	??_read_NumPad^(0+128)
  2640     044C  0841               	movf	??_read_NumPad^(0+128),w
  2641     044D  07EB               	addwf	_rowScan^(0+128),f
  2642     044E                     l3369:
  2643     044E  3004               	movlw	4
  2644     044F  026B               	subwf	_rowScan^(0+128),w
  2645     0450  1C03               	skipc
  2646     0451  2C53               	goto	u3511
  2647     0452  2C54               	goto	u3510
  2648     0453                     u3511:
  2649     0453  2C0E               	goto	l3359
  2650     0454                     u3510:
  2651     0454                     l3371:
  2652                           
  2653                           ;main.c: 656:         if(keyf)
  2654     0454  086A               	movf	_keyf^(0+128),w
  2655     0455  1903               	btfsc	3,2
  2656     0456  2C58               	goto	u3521
  2657     0457  2C59               	goto	u3520
  2658     0458                     u3521:
  2659     0458  2DE9               	goto	l3457
  2660     0459                     u3520:
  2661     0459                     l3373:
  2662                           
  2663                           ;main.c: 657:         {;main.c: 658:             keyf = 0;
  2664     0459  01EA               	clrf	_keyf^(0+128)
  2665     045A                     l3375:
  2666                           
  2667                           ;main.c: 661:             if(keypressed == 8)
  2668     045A  3008               	movlw	8
  2669     045B  066F               	xorwf	_keypressed^(0+128),w
  2670     045C  1D03               	btfss	3,2
  2671     045D  2C5F               	goto	u3531
  2672     045E  2C60               	goto	u3530
  2673     045F                     u3531:
  2674     045F  2D5B               	goto	l3417
  2675     0460                     u3530:
  2676     0460                     l3377:
  2677                           
  2678                           ;main.c: 662:             {;main.c: 664:                 if(initialize && i_id == 3)
  2679     0460  086E               	movf	_initialize^(0+128),w
  2680     0461  1903               	btfsc	3,2
  2681     0462  2C64               	goto	u3541
  2682     0463  2C65               	goto	u3540
  2683     0464                     u3541:
  2684     0464  2CE4               	goto	l3393
  2685     0465                     u3540:
  2686     0465                     l3379:
  2687     0465  3003               	movlw	3
  2688     0466  0664               	xorwf	_i_id^(0+128),w
  2689     0467  0465               	iorwf	(_i_id+1)^(0+128),w
  2690     0468  1D03               	btfss	3,2
  2691     0469  2C6B               	goto	u3551
  2692     046A  2C6C               	goto	u3550
  2693     046B                     u3551:
  2694     046B  2CE4               	goto	l3393
  2695     046C                     u3550:
  2696     046C                     l3381:
  2697                           
  2698                           ;main.c: 665:                 {;main.c: 667:                     int id = (PIC_ID[0] - '
      +                          0') * 100 + (PIC_ID[1] - '0') * 10 + (PIC_ID[2] - '0');
  2699     046C  1283               	bcf	3,5	;RP0=0, select bank0
  2700     046D  1303               	bcf	3,6	;RP1=0, select bank0
  2701     046E  084F               	movf	_PIC_ID,w
  2702     046F  1683               	bsf	3,5	;RP0=1, select bank1
  2703     0470  1303               	bcf	3,6	;RP1=0, select bank1
  2704     0471  00C1               	movwf	??_read_NumPad^(0+128)
  2705     0472  01C2               	clrf	(??_read_NumPad^(0+128)+1)
  2706     0473  0841               	movf	??_read_NumPad^(0+128),w
  2707     0474  00BB               	movwf	___wmul@multiplier^(0+128)
  2708     0475  0842               	movf	(??_read_NumPad+1)^(0+128),w
  2709     0476  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2710     0477  3064               	movlw	100
  2711     0478  00BD               	movwf	___wmul@multiplicand^(0+128)
  2712     0479  3000               	movlw	0
  2713     047A  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2714     047B  160A  118A  26BF  120A  118A  	fcall	___wmul
  2715     0480  1683               	bsf	3,5	;RP0=1, select bank1
  2716     0481  1303               	bcf	3,6	;RP1=0, select bank1
  2717     0482  083B               	movf	?___wmul^(0+128),w
  2718     0483  00C3               	movwf	(??_read_NumPad+2)^(0+128)
  2719     0484  083C               	movf	(?___wmul+1)^(0+128),w
  2720     0485  00C4               	movwf	((??_read_NumPad+2)^(0+128)+1)
  2721     0486  1283               	bcf	3,5	;RP0=0, select bank0
  2722     0487  1303               	bcf	3,6	;RP1=0, select bank0
  2723     0488  0850               	movf	_PIC_ID+1,w
  2724     0489  1683               	bsf	3,5	;RP0=1, select bank1
  2725     048A  1303               	bcf	3,6	;RP1=0, select bank1
  2726     048B  00C5               	movwf	(??_read_NumPad+4)^(0+128)
  2727     048C  01C6               	clrf	((??_read_NumPad+4)^(0+128)+1)
  2728     048D  0845               	movf	(??_read_NumPad+4)^(0+128),w
  2729     048E  00BB               	movwf	___wmul@multiplier^(0+128)
  2730     048F  0846               	movf	(??_read_NumPad+5)^(0+128),w
  2731     0490  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2732     0491  300A               	movlw	10
  2733     0492  00BD               	movwf	___wmul@multiplicand^(0+128)
  2734     0493  3000               	movlw	0
  2735     0494  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2736     0495  160A  118A  26BF  120A  118A  	fcall	___wmul
  2737     049A  1683               	bsf	3,5	;RP0=1, select bank1
  2738     049B  1303               	bcf	3,6	;RP1=0, select bank1
  2739     049C  083B               	movf	?___wmul^(0+128),w
  2740     049D  0743               	addwf	(??_read_NumPad+2)^(0+128),w
  2741     049E  00C7               	movwf	(??_read_NumPad+6)^(0+128)
  2742     049F  083C               	movf	(?___wmul+1)^(0+128),w
  2743     04A0  1803               	skipnc
  2744     04A1  0A3C               	incf	(?___wmul+1)^(0+128),w
  2745     04A2  0744               	addwf	(??_read_NumPad+3)^(0+128),w
  2746     04A3  00C8               	movwf	(??_read_NumPad+7)^(0+128)
  2747     04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2748     04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2749     04A6  0851               	movf	_PIC_ID+2,w
  2750     04A7  1683               	bsf	3,5	;RP0=1, select bank1
  2751     04A8  1303               	bcf	3,6	;RP1=0, select bank1
  2752     04A9  0747               	addwf	(??_read_NumPad+6)^(0+128),w
  2753     04AA  00C9               	movwf	(??_read_NumPad+8)^(0+128)
  2754     04AB  3000               	movlw	0
  2755     04AC  1803               	skipnc
  2756     04AD  3001               	movlw	1
  2757     04AE  0748               	addwf	(??_read_NumPad+7)^(0+128),w
  2758     04AF  00CA               	movwf	(??_read_NumPad+9)^(0+128)
  2759     04B0  0849               	movf	(??_read_NumPad+8)^(0+128),w
  2760     04B1  3E30               	addlw	48
  2761     04B2  00CB               	movwf	read_NumPad@id^(0+128)
  2762     04B3  084A               	movf	(??_read_NumPad+9)^(0+128),w
  2763     04B4  1803               	skipnc
  2764     04B5  3E01               	addlw	1
  2765     04B6  3EEB               	addlw	235
  2766     04B7  00CC               	movwf	(read_NumPad@id+1)^(0+128)
  2767     04B8                     l3383:
  2768                           
  2769                           ;main.c: 669:                     if(id <= 250)
  2770     04B8  084C               	movf	(read_NumPad@id+1)^(0+128),w
  2771     04B9  3A80               	xorlw	128
  2772     04BA  00FF               	movwf	btemp+1
  2773     04BB  3080               	movlw	128
  2774     04BC  027F               	subwf	btemp+1,w
  2775     04BD  1D03               	skipz
  2776     04BE  2CC1               	goto	u3565
  2777     04BF  30FB               	movlw	251
  2778     04C0  024B               	subwf	read_NumPad@id^(0+128),w
  2779     04C1                     u3565:
  2780     04C1  1803               	skipnc
  2781     04C2  2CC4               	goto	u3561
  2782     04C3  2CC5               	goto	u3560
  2783     04C4                     u3561:
  2784     04C4  2CD7               	goto	l280
  2785     04C5                     u3560:
  2786     04C5                     l3385:
  2787                           
  2788                           ;main.c: 670:                     {;main.c: 672:                         eeprom_write(0,
      +                           id);
  2789     04C5  1683               	bsf	3,5	;RP0=1, select bank1
  2790     04C6  1303               	bcf	3,6	;RP1=0, select bank1
  2791     04C7  084B               	movf	read_NumPad@id^(0+128),w
  2792     04C8  00A0               	movwf	eeprom_write@value^(0+128)
  2793     04C9  3000               	movlw	0
  2794     04CA  160A  118A  2747  120A  118A  	fcall	_eeprom_write
  2795     04CF                     l3387:
  2796                           
  2797                           ;main.c: 673:                         pr_succ = 1;
  2798     04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2799     04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2800     04D1  01C6               	clrf	_pr_succ
  2801     04D2  0AC6               	incf	_pr_succ,f
  2802     04D3                     l3389:
  2803                           
  2804                           ;main.c: 675:                         initialize = 0;
  2805     04D3  1683               	bsf	3,5	;RP0=1, select bank1
  2806     04D4  1303               	bcf	3,6	;RP1=0, select bank1
  2807     04D5  01EE               	clrf	_initialize^(0+128)
  2808                           
  2809                           ;main.c: 676:                     }
  2810     04D6  2DD5               	goto	l3453
  2811     04D7                     l280:	
  2812                           ;main.c: 678:                     else
  2813                           
  2814                           
  2815                           ;main.c: 679:                     {;main.c: 680:                         pr_err_max = 1;
  2816     04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2817     04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2818     04D9  01C7               	clrf	_pr_err_max
  2819     04DA  0AC7               	incf	_pr_err_max,f
  2820     04DB                     l3391:
  2821                           
  2822                           ;main.c: 682:                         PIC_ID[0] = '\0';
  2823     04DB  01CF               	clrf	_PIC_ID
  2824                           
  2825                           ;main.c: 683:                         i_id = old_i_id = 0;
  2826     04DC  01C4               	clrf	_old_i_id
  2827     04DD  01C5               	clrf	_old_i_id+1
  2828     04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2829     04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2830     04E0  01E4               	clrf	_i_id^(0+128)
  2831     04E1  01E5               	clrf	(_i_id+1)^(0+128)
  2832     04E2  2DD5               	goto	l3453
  2833     04E3                     l281:	
  2834                           ;main.c: 684:                     }
  2835                           
  2836                           
  2837                           ;main.c: 685:                 }
  2838     04E3  2DD5               	goto	l3453
  2839     04E4                     l3393:
  2840     04E4  086E               	movf	_initialize^(0+128),w
  2841     04E5  1903               	btfsc	3,2
  2842     04E6  2CE8               	goto	u3571
  2843     04E7  2CE9               	goto	u3570
  2844     04E8                     u3571:
  2845     04E8  2CFB               	goto	l3401
  2846     04E9                     u3570:
  2847     04E9                     l3395:
  2848     04E9  0865               	movf	(_i_id+1)^(0+128),w
  2849     04EA  3A80               	xorlw	128
  2850     04EB  00FF               	movwf	btemp+1
  2851     04EC  3080               	movlw	128
  2852     04ED  027F               	subwf	btemp+1,w
  2853     04EE  1D03               	skipz
  2854     04EF  2CF2               	goto	u3585
  2855     04F0  3003               	movlw	3
  2856     04F1  0264               	subwf	_i_id^(0+128),w
  2857     04F2                     u3585:
  2858     04F2  1803               	skipnc
  2859     04F3  2CF5               	goto	u3581
  2860     04F4  2CF6               	goto	u3580
  2861     04F5                     u3581:
  2862     04F5  2CFB               	goto	l3401
  2863     04F6                     u3580:
  2864     04F6                     l3397:
  2865                           
  2866                           ;main.c: 688:                 {;main.c: 689:                     pr_err_len = 1;
  2867     04F6  1283               	bcf	3,5	;RP0=0, select bank0
  2868     04F7  1303               	bcf	3,6	;RP1=0, select bank0
  2869     04F8  01C8               	clrf	_pr_err_len
  2870     04F9  0AC8               	incf	_pr_err_len,f
  2871     04FA  2CDB               	goto	l3391
  2872     04FB                     l3401:
  2873     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  2874     04FC  1303               	bcf	3,6	;RP1=0, select bank1
  2875     04FD  0866               	movf	_compare^(0+128),w
  2876     04FE  1D03               	btfss	3,2
  2877     04FF  2D01               	goto	u3591
  2878     0500  2D02               	goto	u3590
  2879     0501                     u3591:
  2880     0501  2D34               	goto	l3405
  2881     0502                     u3590:
  2882     0502                     l3403:
  2883                           
  2884                           ;main.c: 696:                 {;main.c: 698:                     srand(milliseconds);
  2885     0502  1283               	bcf	3,5	;RP0=0, select bank0
  2886     0503  1303               	bcf	3,6	;RP1=0, select bank0
  2887     0504  0841               	movf	_milliseconds+1,w
  2888     0505  1683               	bsf	3,5	;RP0=1, select bank1
  2889     0506  1303               	bcf	3,6	;RP1=0, select bank1
  2890     0507  00A1               	movwf	(srand@x+1)^(0+128)
  2891     0508  1283               	bcf	3,5	;RP0=0, select bank0
  2892     0509  1303               	bcf	3,6	;RP1=0, select bank0
  2893     050A  0840               	movf	_milliseconds,w
  2894     050B  1683               	bsf	3,5	;RP0=1, select bank1
  2895     050C  1303               	bcf	3,6	;RP1=0, select bank1
  2896     050D  00A0               	movwf	srand@x^(0+128)
  2897     050E  160A  118A  263E  120A  118A  	fcall	_srand
  2898                           
  2899                           ;main.c: 700:                     num_rand = ((rand()%8999)+1000);
  2900     0513  3027               	movlw	39
  2901     0514  1683               	bsf	3,5	;RP0=1, select bank1
  2902     0515  1303               	bcf	3,6	;RP1=0, select bank1
  2903     0516  00B4               	movwf	___awmod@divisor^(0+128)
  2904     0517  3023               	movlw	35
  2905     0518  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  2906     0519  120A  158A  248A  120A  118A  	fcall	_rand
  2907     051E  1683               	bsf	3,5	;RP0=1, select bank1
  2908     051F  1303               	bcf	3,6	;RP1=0, select bank1
  2909     0520  082E               	movf	(?_rand+1)^(0+128),w
  2910     0521  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  2911     0522  082D               	movf	?_rand^(0+128),w
  2912     0523  00B6               	movwf	___awmod@dividend^(0+128)
  2913     0524  120A  158A  22FB  120A  118A  	fcall	___awmod
  2914     0529  1683               	bsf	3,5	;RP0=1, select bank1
  2915     052A  1303               	bcf	3,6	;RP1=0, select bank1
  2916     052B  0834               	movf	?___awmod^(0+128),w
  2917     052C  3EE8               	addlw	232
  2918     052D  00E2               	movwf	_num_rand^(0+128)
  2919     052E  0835               	movf	(?___awmod+1)^(0+128),w
  2920     052F  1803               	skipnc
  2921     0530  3E01               	addlw	1
  2922     0531  3E03               	addlw	3
  2923     0532  00E3               	movwf	(_num_rand+1)^(0+128)
  2924                           
  2925                           ;main.c: 701:                 }
  2926     0533  2DD5               	goto	l3453
  2927     0534                     l3405:
  2928     0534  0866               	movf	_compare^(0+128),w
  2929     0535  1903               	btfsc	3,2
  2930     0536  2D38               	goto	u3601
  2931     0537  2D39               	goto	u3600
  2932     0538                     u3601:
  2933     0538  2D4D               	goto	l3411
  2934     0539                     u3600:
  2935     0539                     l3407:
  2936     0539  3092               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2937     053A  00A7               	movwf	CompareStrings@str2^(0+128)
  2938     053B  3001               	movlw	1
  2939     053C  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  2940     053D  30A3               	movlw	(low (_datoSeriale| (0+256)))& (0+255)
  2941     053E  120A  158A  2249  120A  118A  	fcall	_CompareStrings
  2942     0543  3A00               	xorlw	0
  2943     0544  1903               	skipnz
  2944     0545  2D47               	goto	u3611
  2945     0546  2D48               	goto	u3610
  2946     0547                     u3611:
  2947     0547  2D4D               	goto	l3411
  2948     0548                     u3610:
  2949     0548                     l3409:
  2950                           
  2951                           ;main.c: 704:                 {;main.c: 705:                     success = 1;
  2952     0548  1283               	bcf	3,5	;RP0=0, select bank0
  2953     0549  1303               	bcf	3,6	;RP1=0, select bank0
  2954     054A  01CB               	clrf	_success
  2955     054B  0ACB               	incf	_success,f
  2956                           
  2957                           ;main.c: 706:                 }
  2958     054C  2DD5               	goto	l3453
  2959     054D                     l3411:
  2960     054D  1683               	bsf	3,5	;RP0=1, select bank1
  2961     054E  1303               	bcf	3,6	;RP1=0, select bank1
  2962     054F  0866               	movf	_compare^(0+128),w
  2963     0550  1903               	btfsc	3,2
  2964     0551  2D53               	goto	u3621
  2965     0552  2D54               	goto	u3620
  2966     0553                     u3621:
  2967     0553  2CE3               	goto	l281
  2968     0554                     u3620:
  2969     0554                     l3413:
  2970                           
  2971                           ;main.c: 709:                 {;main.c: 710:                     maxFail--;
  2972     0554  3001               	movlw	1
  2973     0555  02ED               	subwf	_maxFail^(0+128),f
  2974     0556                     l3415:
  2975                           
  2976                           ;main.c: 711:                     fail = 1;
  2977     0556  1283               	bcf	3,5	;RP0=0, select bank0
  2978     0557  1303               	bcf	3,6	;RP1=0, select bank0
  2979     0558  01CA               	clrf	_fail
  2980     0559  0ACA               	incf	_fail,f
  2981     055A  2DD5               	goto	l3453
  2982     055B                     l3417:
  2983     055B  086F               	movf	_keypressed^(0+128),w
  2984     055C  1D03               	btfss	3,2
  2985     055D  2D5F               	goto	u3631
  2986     055E  2D60               	goto	u3630
  2987     055F                     u3631:
  2988     055F  2D92               	goto	l3435
  2989     0560                     u3630:
  2990     0560                     l3419:
  2991                           
  2992                           ;main.c: 716:             {;main.c: 718:                 if(compare && iT > 0)
  2993     0560  0866               	movf	_compare^(0+128),w
  2994     0561  1903               	btfsc	3,2
  2995     0562  2D64               	goto	u3641
  2996     0563  2D65               	goto	u3640
  2997     0564                     u3641:
  2998     0564  2D72               	goto	l3427
  2999     0565                     u3640:
  3000     0565                     l3421:
  3001     0565  0867               	movf	_iT^(0+128),w
  3002     0566  1903               	btfsc	3,2
  3003     0567  2D69               	goto	u3651
  3004     0568  2D6A               	goto	u3650
  3005     0569                     u3651:
  3006     0569  2D72               	goto	l3427
  3007     056A                     u3650:
  3008     056A                     l3423:
  3009                           
  3010                           ;main.c: 719:                 {;main.c: 721:                     iT--;
  3011     056A  3001               	movlw	1
  3012     056B  02E7               	subwf	_iT^(0+128),f
  3013     056C                     l3425:
  3014                           
  3015                           ;main.c: 722:                     datoTastierino[iT] = '\0';
  3016     056C  0867               	movf	_iT^(0+128),w
  3017     056D  3E92               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3018     056E  0084               	movwf	4
  3019     056F  1783               	bsf	3,7	;select IRP bank3
  3020     0570  0180               	clrf	0
  3021                           
  3022                           ;main.c: 723:                 }
  3023     0571  2DD5               	goto	l3453
  3024     0572                     l3427:
  3025     0572  086E               	movf	_initialize^(0+128),w
  3026     0573  1903               	btfsc	3,2
  3027     0574  2D76               	goto	u3661
  3028     0575  2D77               	goto	u3660
  3029     0576                     u3661:
  3030     0576  2DD5               	goto	l3453
  3031     0577                     u3660:
  3032     0577                     l3429:
  3033     0577  0865               	movf	(_i_id+1)^(0+128),w
  3034     0578  3A80               	xorlw	128
  3035     0579  00FF               	movwf	btemp+1
  3036     057A  3080               	movlw	128
  3037     057B  027F               	subwf	btemp+1,w
  3038     057C  1D03               	skipz
  3039     057D  2D80               	goto	u3675
  3040     057E  3001               	movlw	1
  3041     057F  0264               	subwf	_i_id^(0+128),w
  3042     0580                     u3675:
  3043     0580  1C03               	skipc
  3044     0581  2D83               	goto	u3671
  3045     0582  2D84               	goto	u3670
  3046     0583                     u3671:
  3047     0583  2DD5               	goto	l3453
  3048     0584                     u3670:
  3049     0584                     l3431:
  3050                           
  3051                           ;main.c: 726:                 {;main.c: 728:                     i_id--;
  3052     0584  30FF               	movlw	255
  3053     0585  1683               	bsf	3,5	;RP0=1, select bank1
  3054     0586  1303               	bcf	3,6	;RP1=0, select bank1
  3055     0587  07E4               	addwf	_i_id^(0+128),f
  3056     0588  1803               	skipnc
  3057     0589  0AE5               	incf	(_i_id+1)^(0+128),f
  3058     058A  30FF               	movlw	255
  3059     058B  07E5               	addwf	(_i_id+1)^(0+128),f
  3060     058C                     l3433:
  3061                           
  3062                           ;main.c: 729:                     PIC_ID[i_id] = '\0';
  3063     058C  0864               	movf	_i_id^(0+128),w
  3064     058D  3E4F               	addlw	(low (_PIC_ID| 0))& (0+255)
  3065     058E  0084               	movwf	4
  3066     058F  1383               	bcf	3,7	;select IRP bank0
  3067     0590  0180               	clrf	0
  3068     0591  2DD5               	goto	l3453
  3069     0592                     l3435:
  3070     0592  0866               	movf	_compare^(0+128),w
  3071     0593  1903               	btfsc	3,2
  3072     0594  2D96               	goto	u3681
  3073     0595  2D97               	goto	u3680
  3074     0596                     u3681:
  3075     0596  2DAB               	goto	l3443
  3076     0597                     u3680:
  3077     0597                     l3437:
  3078                           
  3079                           ;main.c: 734:             {;main.c: 736:                 datoTastierino[iT++] = keys[key
      +                          pressed];
  3080     0597  086F               	movf	_keypressed^(0+128),w
  3081     0598  3E01               	addlw	low ((_keys-__stringbase)| (0+32768))
  3082     0599  0084               	movwf	4
  3083     059A  120A  158A  200A  120A  118A  	fcall	stringdir
  3084     059F  00C1               	movwf	??_read_NumPad^(0+128)
  3085     05A0  0867               	movf	_iT^(0+128),w
  3086     05A1  3E92               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3087     05A2  0084               	movwf	4
  3088     05A3  0841               	movf	??_read_NumPad^(0+128),w
  3089     05A4  1783               	bsf	3,7	;select IRP bank3
  3090     05A5  0080               	movwf	0
  3091     05A6                     l3439:
  3092     05A6  3001               	movlw	1
  3093     05A7  00C1               	movwf	??_read_NumPad^(0+128)
  3094     05A8  0841               	movf	??_read_NumPad^(0+128),w
  3095     05A9  07E7               	addwf	_iT^(0+128),f
  3096     05AA  2D6C               	goto	l3425
  3097     05AB                     l3443:
  3098     05AB  086E               	movf	_initialize^(0+128),w
  3099     05AC  1903               	btfsc	3,2
  3100     05AD  2DAF               	goto	u3691
  3101     05AE  2DB0               	goto	u3690
  3102     05AF                     u3691:
  3103     05AF  2DD5               	goto	l3453
  3104     05B0                     u3690:
  3105     05B0                     l3445:
  3106     05B0  0865               	movf	(_i_id+1)^(0+128),w
  3107     05B1  3A80               	xorlw	128
  3108     05B2  00FF               	movwf	btemp+1
  3109     05B3  3080               	movlw	128
  3110     05B4  027F               	subwf	btemp+1,w
  3111     05B5  1D03               	skipz
  3112     05B6  2DB9               	goto	u3705
  3113     05B7  3003               	movlw	3
  3114     05B8  0264               	subwf	_i_id^(0+128),w
  3115     05B9                     u3705:
  3116     05B9  1803               	skipnc
  3117     05BA  2DBC               	goto	u3701
  3118     05BB  2DBD               	goto	u3700
  3119     05BC                     u3701:
  3120     05BC  2DD5               	goto	l3453
  3121     05BD                     u3700:
  3122     05BD                     l3447:
  3123                           
  3124                           ;main.c: 741:             {;main.c: 743:                 PIC_ID[i_id++] = keys[keypresse
      +                          d];
  3125     05BD  1683               	bsf	3,5	;RP0=1, select bank1
  3126     05BE  1303               	bcf	3,6	;RP1=0, select bank1
  3127     05BF  086F               	movf	_keypressed^(0+128),w
  3128     05C0  3E01               	addlw	low ((_keys-__stringbase)| (0+32768))
  3129     05C1  0084               	movwf	4
  3130     05C2  120A  158A  200A  120A  118A  	fcall	stringdir
  3131     05C7  00C1               	movwf	??_read_NumPad^(0+128)
  3132     05C8  0864               	movf	_i_id^(0+128),w
  3133     05C9  3E4F               	addlw	(low (_PIC_ID| 0))& (0+255)
  3134     05CA  0084               	movwf	4
  3135     05CB  0841               	movf	??_read_NumPad^(0+128),w
  3136     05CC  1383               	bcf	3,7	;select IRP bank0
  3137     05CD  0080               	movwf	0
  3138     05CE                     l3449:
  3139     05CE  3001               	movlw	1
  3140     05CF  07E4               	addwf	_i_id^(0+128),f
  3141     05D0  1803               	skipnc
  3142     05D1  0AE5               	incf	(_i_id+1)^(0+128),f
  3143     05D2  3000               	movlw	0
  3144     05D3  07E5               	addwf	(_i_id+1)^(0+128),f
  3145     05D4  2D8C               	goto	l3433
  3146     05D5                     l3453:
  3147                           
  3148                           ;main.c: 747:             PORTD |= 0x0F;
  3149     05D5  300F               	movlw	15
  3150     05D6  1683               	bsf	3,5	;RP0=1, select bank1
  3151     05D7  1303               	bcf	3,6	;RP1=0, select bank1
  3152     05D8  00C1               	movwf	??_read_NumPad^(0+128)
  3153     05D9  0841               	movf	??_read_NumPad^(0+128),w
  3154     05DA  1283               	bcf	3,5	;RP0=0, select bank0
  3155     05DB  1303               	bcf	3,6	;RP1=0, select bank0
  3156     05DC  0488               	iorwf	8,f	;volatile
  3157     05DD                     l3455:	
  3158                           ;main.c: 750:             while(((PORTD & 0x0F) != 0x0F))
  3159                           
  3160                           
  3161                           ;main.c: 750:             while(((PORTD & 0x0F) != 0x0F))
  3162     05DD  300F               	movlw	15
  3163     05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3164     05DF  0508               	andwf	8,w	;volatile
  3165     05E0  1683               	bsf	3,5	;RP0=1, select bank1
  3166     05E1  1303               	bcf	3,6	;RP1=0, select bank1
  3167     05E2  00C1               	movwf	??_read_NumPad^(0+128)
  3168     05E3  300F               	movlw	15
  3169     05E4  0641               	xorwf	??_read_NumPad^(0+128),w
  3170     05E5  1D03               	btfss	3,2
  3171     05E6  2DE8               	goto	u3711
  3172     05E7  2DE9               	goto	u3710
  3173     05E8                     u3711:
  3174     05E8  2DDD               	goto	l3455
  3175     05E9                     u3710:
  3176     05E9                     l3457:
  3177                           
  3178                           ;main.c: 755:     }
  3179     05E9  3001               	movlw	1
  3180     05EA  00C1               	movwf	??_read_NumPad^(0+128)
  3181     05EB  0841               	movf	??_read_NumPad^(0+128),w
  3182     05EC  07EC               	addwf	_colScan^(0+128),f
  3183     05ED                     l3459:
  3184     05ED  3003               	movlw	3
  3185     05EE  026C               	subwf	_colScan^(0+128),w
  3186     05EF  1C03               	skipc
  3187     05F0  2DF2               	goto	u3721
  3188     05F1  2DF3               	goto	u3720
  3189     05F2                     u3721:
  3190     05F2  2BF6               	goto	l3349
  3191     05F3                     u3720:
  3192     05F3                     l302:
  3193     05F3  0008               	return
  3194     05F4                     __end_of_read_NumPad:
  3195                           
  3196                           	psect	text2
  3197     1747                     __ptext2:	
  3198 ;; *************** function _eeprom_write *****************
  3199 ;; Defined at:
  3200 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  addr            1    wreg     unsigned char 
  3203 ;;  value           1    0[BANK1 ] unsigned char 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  addr            1    2[BANK1 ] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      void 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3215 ;;      Params:         0       0       1       0       0
  3216 ;;      Locals:         0       0       1       0       0
  3217 ;;      Temps:          0       0       1       0       0
  3218 ;;      Totals:         0       0       3       0       0
  3219 ;;Total ram usage:        3 bytes
  3220 ;; Hardware stack levels used: 1
  3221 ;; Hardware stack levels required when called: 4
  3222 ;; This function calls:
  3223 ;;		Nothing
  3224 ;; This function is called by:
  3225 ;;		_read_NumPad
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229     1747                     _eeprom_write:	
  3230                           ;psect for function _eeprom_write
  3231                           
  3232                           
  3233                           ;incstack = 0
  3234                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3235                           ;eeprom_write@addr stored from wreg
  3236     1747  1683               	bsf	3,5	;RP0=1, select bank1
  3237     1748  1303               	bcf	3,6	;RP1=0, select bank1
  3238     1749  00A2               	movwf	eeprom_write@addr^(0+128)
  3239     174A                     l440:	
  3240                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  3241                           
  3242     174A                     l441:
  3243     174A  1683               	bsf	3,5	;RP0=1, select bank3
  3244     174B  1703               	bsf	3,6	;RP1=1, select bank3
  3245     174C  188C               	btfsc	12,1	;volsfr
  3246     174D  2F4F               	goto	u3331
  3247     174E  2F50               	goto	u3330
  3248     174F                     u3331:
  3249     174F  2F4A               	goto	l441
  3250     1750                     u3330:
  3251     1750                     l3249:
  3252     1750  1683               	bsf	3,5	;RP0=1, select bank1
  3253     1751  1303               	bcf	3,6	;RP1=0, select bank1
  3254     1752  0822               	movf	eeprom_write@addr^(0+128),w
  3255     1753  1283               	bcf	3,5	;RP0=0, select bank2
  3256     1754  1703               	bsf	3,6	;RP1=1, select bank2
  3257     1755  008D               	movwf	13	;volatile
  3258     1756  1683               	bsf	3,5	;RP0=1, select bank1
  3259     1757  1303               	bcf	3,6	;RP1=0, select bank1
  3260     1758  0820               	movf	eeprom_write@value^(0+128),w
  3261     1759  1283               	bcf	3,5	;RP0=0, select bank2
  3262     175A  1703               	bsf	3,6	;RP1=1, select bank2
  3263     175B  008C               	movwf	12	;volatile
  3264     175C                     l3251:
  3265     175C  303F               	movlw	63
  3266     175D  1683               	bsf	3,5	;RP0=1, select bank1
  3267     175E  1303               	bcf	3,6	;RP1=0, select bank1
  3268     175F  00A1               	movwf	??_eeprom_write^(0+128)
  3269     1760  0821               	movf	??_eeprom_write^(0+128),w
  3270     1761  1683               	bsf	3,5	;RP0=1, select bank3
  3271     1762  1703               	bsf	3,6	;RP1=1, select bank3
  3272     1763  058C               	andwf	12,f	;volsfr
  3273     1764                     l3253:
  3274     1764  1283               	bcf	3,5	;RP0=0, select bank0
  3275     1765  1303               	bcf	3,6	;RP1=0, select bank0
  3276     1766  1003               	bcf	3,0	;volatile
  3277     1767                     l3255:
  3278     1767  1F8B               	btfss	11,7	;volatile
  3279     1768  2F6A               	goto	u3341
  3280     1769  2F6B               	goto	u3340
  3281     176A                     u3341:
  3282     176A  2F6C               	goto	l444
  3283     176B                     u3340:
  3284     176B                     l3257:
  3285     176B  1403               	bsf	3,0	;volatile
  3286     176C                     l444:
  3287     176C  138B               	bcf	11,7	;volatile
  3288     176D  1683               	bsf	3,5	;RP0=1, select bank3
  3289     176E  1703               	bsf	3,6	;RP1=1, select bank3
  3290     176F  150C               	bsf	12,2	;volsfr
  3291     1770                     l3259:
  3292     1770  3055               	movlw	85
  3293     1771  008D               	movwf	13	;volsfr
  3294     1772  30AA               	movlw	170
  3295     1773  008D               	movwf	13	;volsfr
  3296     1774                     l3261:
  3297     1774  148C               	bsf	12,1	;volsfr
  3298     1775                     l3263:
  3299     1775  110C               	bcf	12,2	;volsfr
  3300     1776                     l3265:
  3301     1776  1283               	bcf	3,5	;RP0=0, select bank0
  3302     1777  1303               	bcf	3,6	;RP1=0, select bank0
  3303     1778  1C03               	btfss	3,0	;volatile
  3304     1779  2F7B               	goto	u3351
  3305     177A  2F7C               	goto	u3350
  3306     177B                     u3351:
  3307     177B  2F7D               	goto	l447
  3308     177C                     u3350:
  3309     177C                     l3267:
  3310     177C  178B               	bsf	11,7	;volatile
  3311     177D                     l447:
  3312     177D  0008               	return
  3313     177E                     __end_of_eeprom_write:
  3314                           
  3315                           	psect	text3
  3316     0A49                     __ptext3:	
  3317 ;; *************** function _CompareStrings *****************
  3318 ;; Defined at:
  3319 ;;		line 569 in file "main.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  str1            1    wreg     PTR unsigned char 
  3322 ;;		 -> datoSeriale(17), id_dest(4), 
  3323 ;;  str2            2    7[BANK1 ] PTR unsigned char 
  3324 ;;		 -> datoTastierino(17), PIC_ID(4), 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  str1            1   14[BANK1 ] PTR unsigned char 
  3327 ;;		 -> datoSeriale(17), id_dest(4), 
  3328 ;;  i               1   13[BANK1 ] unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      unsigned char 
  3331 ;; Registers used:
  3332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3338 ;;      Params:         0       0       2       0       0
  3339 ;;      Locals:         0       0       2       0       0
  3340 ;;      Temps:          0       0       4       0       0
  3341 ;;      Totals:         0       0       8       0       0
  3342 ;;Total ram usage:        8 bytes
  3343 ;; Hardware stack levels used: 1
  3344 ;; Hardware stack levels required when called: 5
  3345 ;; This function calls:
  3346 ;;		_Length
  3347 ;; This function is called by:
  3348 ;;		_main
  3349 ;;		_read_NumPad
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353     0A49                     _CompareStrings:	
  3354                           ;psect for function _CompareStrings
  3355                           
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _CompareStrings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3359                           ;CompareStrings@str1 stored from wreg
  3360     0A49  1683               	bsf	3,5	;RP0=1, select bank1
  3361     0A4A  1303               	bcf	3,6	;RP1=0, select bank1
  3362     0A4B  00AE               	movwf	CompareStrings@str1^(0+128)
  3363     0A4C                     l3123:
  3364                           
  3365                           ;main.c: 569: char CompareStrings(char *str1, char *str2);main.c: 570: {;main.c: 572:   
      +                            if(Length(str1) != Length(str2))
  3366     0A4C  082E               	movf	CompareStrings@str1^(0+128),w
  3367     0A4D  00A0               	movwf	Length@str^(0+128)
  3368     0A4E  3001               	movlw	1
  3369     0A4F  00A1               	movwf	(Length@str+1)^(0+128)
  3370     0A50  120A  158A  20F2  120A  158A  	fcall	_Length
  3371     0A55  1683               	bsf	3,5	;RP0=1, select bank1
  3372     0A56  1303               	bcf	3,6	;RP1=0, select bank1
  3373     0A57  0820               	movf	?_Length^(0+128),w
  3374     0A58  00A9               	movwf	??_CompareStrings^(0+128)
  3375     0A59  0821               	movf	(?_Length+1)^(0+128),w
  3376     0A5A  00AA               	movwf	(??_CompareStrings^(0+128)+1)
  3377     0A5B  0827               	movf	CompareStrings@str2^(0+128),w
  3378     0A5C  00A0               	movwf	Length@str^(0+128)
  3379     0A5D  0828               	movf	(CompareStrings@str2+1)^(0+128),w
  3380     0A5E  00A1               	movwf	(Length@str+1)^(0+128)
  3381     0A5F  120A  158A  20F2  120A  158A  	fcall	_Length
  3382     0A64  1683               	bsf	3,5	;RP0=1, select bank1
  3383     0A65  1303               	bcf	3,6	;RP1=0, select bank1
  3384     0A66  0821               	movf	(?_Length+1)^(0+128),w
  3385     0A67  062A               	xorwf	(??_CompareStrings+1)^(0+128),w
  3386     0A68  1D03               	skipz
  3387     0A69  2A6C               	goto	u3235
  3388     0A6A  0820               	movf	?_Length^(0+128),w
  3389     0A6B  0629               	xorwf	??_CompareStrings^(0+128),w
  3390     0A6C                     u3235:
  3391     0A6C  1903               	skipnz
  3392     0A6D  2A6F               	goto	u3231
  3393     0A6E  2A70               	goto	u3230
  3394     0A6F                     u3231:
  3395     0A6F  2A72               	goto	l3131
  3396     0A70                     u3230:
  3397     0A70                     l3125:
  3398                           
  3399                           ;main.c: 573:         return 0;
  3400     0A70  3000               	movlw	0
  3401     0A71  2A9F               	goto	l251
  3402     0A72                     l3131:
  3403                           
  3404                           ;main.c: 575:     {;main.c: 576:         char i = 0;
  3405     0A72  01AD               	clrf	CompareStrings@i^(0+128)
  3406                           
  3407                           ;main.c: 579:         while(str1[i] != '\0')
  3408     0A73  2A93               	goto	l3141
  3409     0A74                     l3133:
  3410                           
  3411                           ;main.c: 580:         {;main.c: 581:             if(str1[i] != str2[i])
  3412     0A74  082D               	movf	CompareStrings@i^(0+128),w
  3413     0A75  0727               	addwf	CompareStrings@str2^(0+128),w
  3414     0A76  00A9               	movwf	??_CompareStrings^(0+128)
  3415     0A77  0828               	movf	(CompareStrings@str2+1)^(0+128),w
  3416     0A78  1803               	skipnc
  3417     0A79  3E01               	addlw	1
  3418     0A7A  00AA               	movwf	(??_CompareStrings^(0+128)+1)
  3419     0A7B  0829               	movf	??_CompareStrings^(0+128),w
  3420     0A7C  0084               	movwf	4
  3421     0A7D  1783               	bsf	3,7
  3422     0A7E  1C2A               	btfss	(??_CompareStrings+1)^(0+128),0
  3423     0A7F  1383               	bcf	3,7
  3424     0A80  0800               	movf	0,w
  3425     0A81  00AB               	movwf	(??_CompareStrings+2)^(0+128)
  3426     0A82  082D               	movf	CompareStrings@i^(0+128),w
  3427     0A83  072E               	addwf	CompareStrings@str1^(0+128),w
  3428     0A84  00AC               	movwf	(??_CompareStrings+3)^(0+128)
  3429     0A85  082C               	movf	(??_CompareStrings+3)^(0+128),w
  3430     0A86  0084               	movwf	4
  3431     0A87  1783               	bsf	3,7	;select IRP bank2
  3432     0A88  0800               	movf	0,w
  3433     0A89  062B               	xorwf	(??_CompareStrings+2)^(0+128),w
  3434     0A8A  1903               	skipnz
  3435     0A8B  2A8D               	goto	u3241
  3436     0A8C  2A8E               	goto	u3240
  3437     0A8D                     u3241:
  3438     0A8D  2A8F               	goto	l3139
  3439     0A8E                     u3240:
  3440     0A8E  2A70               	goto	l3125
  3441     0A8F                     l3139:
  3442                           
  3443                           ;main.c: 584:             i++;
  3444     0A8F  3001               	movlw	1
  3445     0A90  00A9               	movwf	??_CompareStrings^(0+128)
  3446     0A91  0829               	movf	??_CompareStrings^(0+128),w
  3447     0A92  07AD               	addwf	CompareStrings@i^(0+128),f
  3448     0A93                     l3141:
  3449                           
  3450                           ;main.c: 579:         while(str1[i] != '\0')
  3451     0A93  082D               	movf	CompareStrings@i^(0+128),w
  3452     0A94  072E               	addwf	CompareStrings@str1^(0+128),w
  3453     0A95  00A9               	movwf	??_CompareStrings^(0+128)
  3454     0A96  0829               	movf	??_CompareStrings^(0+128),w
  3455     0A97  0084               	movwf	4
  3456     0A98  1783               	bsf	3,7	;select IRP bank2
  3457     0A99  0800               	movf	0,w
  3458     0A9A  1D03               	btfss	3,2
  3459     0A9B  2A9D               	goto	u3251
  3460     0A9C  2A9E               	goto	u3250
  3461     0A9D                     u3251:
  3462     0A9D  2A74               	goto	l3133
  3463     0A9E                     u3250:
  3464     0A9E                     l3143:
  3465                           
  3466                           ;main.c: 587:         return 1;
  3467     0A9E  3001               	movlw	1
  3468     0A9F                     l251:
  3469     0A9F  0008               	return
  3470     0AA0                     __end_of_CompareStrings:
  3471                           
  3472                           	psect	text4
  3473     0DE7                     __ptext4:	
  3474 ;; *************** function _init_PIC *****************
  3475 ;; Defined at:
  3476 ;;		line 330 in file "main.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  id              2    9[BANK3 ] int 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      void 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3490 ;;      Params:         0       0       0       0       0
  3491 ;;      Locals:         0       0       0       2       0
  3492 ;;      Temps:          0       0       0       2       0
  3493 ;;      Totals:         0       0       0       4       0
  3494 ;;Total ram usage:        4 bytes
  3495 ;; Hardware stack levels used: 1
  3496 ;; Hardware stack levels required when called: 7
  3497 ;; This function calls:
  3498 ;;		_ConvertToString
  3499 ;;		_Fill
  3500 ;;		_UART_init
  3501 ;;		_eeprom_read
  3502 ;;		_init_LCD
  3503 ;;		_init_NumPad
  3504 ;;		_init_Timer0
  3505 ;;		_lcdPrint
  3506 ;;		_lcdSend
  3507 ;; This function is called by:
  3508 ;;		_main
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512     0DE7                     _init_PIC:	
  3513                           ;psect for function _init_PIC
  3514                           
  3515     0DE7                     l3831:	
  3516                           ;incstack = 0
  3517                           ; Regs used in _init_PIC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3518                           
  3519                           
  3520                           ;main.c: 333:     UART_init(115200);
  3521     0DE7  3000               	movlw	0
  3522     0DE8  1683               	bsf	3,5	;RP0=1, select bank1
  3523     0DE9  1303               	bcf	3,6	;RP1=0, select bank1
  3524     0DEA  00DC               	movwf	(UART_init@baudrate+3)^(0+128)
  3525     0DEB  3001               	movlw	1
  3526     0DEC  00DB               	movwf	(UART_init@baudrate+2)^(0+128)
  3527     0DED  30C2               	movlw	194
  3528     0DEE  00DA               	movwf	(UART_init@baudrate+1)^(0+128)
  3529     0DEF  3000               	movlw	0
  3530     0DF0  00D9               	movwf	UART_init@baudrate^(0+128)
  3531     0DF1  120A  118A  27BF  120A  158A  	fcall	_UART_init
  3532                           
  3533                           ;main.c: 334:     init_LCD();
  3534     0DF6  120A  158A  23B4  120A  158A  	fcall	_init_LCD
  3535                           
  3536                           ;main.c: 335:     init_NumPad();
  3537     0DFB  160A  118A  2625  120A  158A  	fcall	_init_NumPad
  3538                           
  3539                           ;main.c: 336:     init_Timer0();
  3540     0E00  160A  118A  264D  120A  158A  	fcall	_init_Timer0
  3541                           
  3542                           ;main.c: 338:     int id = (int)eeprom_read(0);
  3543     0E05  3000               	movlw	0
  3544     0E06  160A  118A  2679  120A  158A  	fcall	_eeprom_read
  3545     0E0B  1683               	bsf	3,5	;RP0=1, select bank3
  3546     0E0C  1703               	bsf	3,6	;RP1=1, select bank3
  3547     0E0D  00CE               	movwf	??_init_PIC^(0+384)
  3548     0E0E  01CF               	clrf	(??_init_PIC^(0+384)+1)
  3549     0E0F  084E               	movf	??_init_PIC^(0+384),w
  3550     0E10  00D0               	movwf	init_PIC@id^(0+384)
  3551     0E11  084F               	movf	(??_init_PIC+1)^(0+384),w
  3552     0E12  00D1               	movwf	(init_PIC@id+1)^(0+384)
  3553     0E13                     l3833:
  3554                           
  3555                           ;main.c: 339:     if(id == 255)
  3556     0E13  0A50               	incf	init_PIC@id^(0+384),w
  3557     0E14  0451               	iorwf	(init_PIC@id+1)^(0+384),w
  3558     0E15  1D03               	btfss	3,2
  3559     0E16  2E18               	goto	u4061
  3560     0E17  2E19               	goto	u4060
  3561     0E18                     u4061:
  3562     0E18  2E39               	goto	l3841
  3563     0E19                     u4060:
  3564     0E19                     l3835:
  3565                           
  3566                           ;main.c: 340:     {;main.c: 341:         lcdPrint("Inser. ID PIC:\0");
  3567     0E19  305A               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  3568     0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  3569     0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  3570     0E1C  00A4               	movwf	lcdPrint@str^(0+128)
  3571     0E1D  3080               	movlw	128
  3572     0E1E  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  3573     0E1F  120A  158A  21F3  120A  158A  	fcall	_lcdPrint
  3574     0E24                     l3837:
  3575                           
  3576                           ;main.c: 342:         lcdSend(0xC0, 0);
  3577     0E24  1683               	bsf	3,5	;RP0=1, select bank1
  3578     0E25  1303               	bcf	3,6	;RP1=0, select bank1
  3579     0E26  01A0               	clrf	lcdSend@tipo^(0+128)
  3580     0E27  30C0               	movlw	192
  3581     0E28  160A  118A  2714  120A  158A  	fcall	_lcdSend
  3582     0E2D                     l3839:
  3583                           
  3584                           ;main.c: 343:         lcdPrint("MIN=000,MAX=250\0");
  3585     0E2D  3049               	movlw	(low ((STR_19-__stringbase)| (0+32768)))& (0+255)
  3586     0E2E  1683               	bsf	3,5	;RP0=1, select bank1
  3587     0E2F  1303               	bcf	3,6	;RP1=0, select bank1
  3588     0E30  00A4               	movwf	lcdPrint@str^(0+128)
  3589     0E31  3080               	movlw	128
  3590     0E32  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  3591     0E33  120A  158A  21F3  120A  158A  	fcall	_lcdPrint
  3592                           
  3593                           ;main.c: 344:     }
  3594     0E38  2E5E               	goto	l178
  3595     0E39                     l3841:
  3596                           
  3597                           ;main.c: 346:     {;main.c: 347:         ConvertToString(id, PIC_ID);
  3598     0E39  0850               	movf	init_PIC@id^(0+384),w
  3599     0E3A  1683               	bsf	3,5	;RP0=1, select bank1
  3600     0E3B  1303               	bcf	3,6	;RP1=0, select bank1
  3601     0E3C  00D9               	movwf	ConvertToString@n^(0+128)
  3602     0E3D  1683               	bsf	3,5	;RP0=1, select bank3
  3603     0E3E  1703               	bsf	3,6	;RP1=1, select bank3
  3604     0E3F  0851               	movf	(init_PIC@id+1)^(0+384),w
  3605     0E40  1683               	bsf	3,5	;RP0=1, select bank1
  3606     0E41  1303               	bcf	3,6	;RP1=0, select bank1
  3607     0E42  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  3608     0E43  3000               	movlw	0
  3609     0E44  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  3610     0E45  30FF               	movlw	255
  3611     0E46  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  3612     0E47  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  3613     0E48  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  3614     0E49  00DD               	movwf	ConvertToString@str^(0+128)
  3615     0E4A  3000               	movlw	0
  3616     0E4B  00DE               	movwf	(ConvertToString@str+1)^(0+128)
  3617     0E4C  120A  118A  25F4  120A  158A  	fcall	_ConvertToString
  3618     0E51                     l3843:
  3619                           
  3620                           ;main.c: 348:         Fill(PIC_ID);
  3621     0E51  304F               	movlw	(low (_PIC_ID| 0))& (0+255)
  3622     0E52  120A  158A  2356  120A  158A  	fcall	_Fill
  3623     0E57                     l3845:
  3624                           
  3625                           ;main.c: 349:         initialize = 0;
  3626     0E57  1683               	bsf	3,5	;RP0=1, select bank1
  3627     0E58  1303               	bcf	3,6	;RP1=0, select bank1
  3628     0E59  01EE               	clrf	_initialize^(0+128)
  3629     0E5A                     l3847:
  3630                           
  3631                           ;main.c: 350:         pr_start = 1;
  3632     0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  3633     0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  3634     0E5C  01C9               	clrf	_pr_start
  3635     0E5D  0AC9               	incf	_pr_start,f
  3636     0E5E                     l178:
  3637     0E5E  0008               	return
  3638     0E5F                     __end_of_init_PIC:
  3639                           
  3640                           	psect	text5
  3641     09F3                     __ptext5:	
  3642 ;; *************** function _lcdPrint *****************
  3643 ;; Defined at:
  3644 ;;		line 402 in file "main.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  str             2    4[BANK1 ] PTR unsigned char 
  3647 ;;		 -> STR_19(17), STR_18(16), datoTastierino(17), STR_17(18), 
  3648 ;;		 -> STR_15(16), STR_14(13), STR_13(15), STR_11(12), 
  3649 ;;		 -> STR_10(13), STR_9(18), main@num_rand_s(16), PIC_ID(4), 
  3650 ;;		 -> STR_7(17), STR_6(12), STR_5(10), STR_4(8), 
  3651 ;;		 -> STR_3(14), STR_2(8), STR_1(11), 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  n               2    9[BANK1 ] int 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3663 ;;      Params:         0       0       2       0       0
  3664 ;;      Locals:         0       0       2       0       0
  3665 ;;      Temps:          0       0       3       0       0
  3666 ;;      Totals:         0       0       7       0       0
  3667 ;;Total ram usage:        7 bytes
  3668 ;; Hardware stack levels used: 1
  3669 ;; Hardware stack levels required when called: 5
  3670 ;; This function calls:
  3671 ;;		_lcdSend
  3672 ;; This function is called by:
  3673 ;;		_main
  3674 ;;		_init_PIC
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678     09F3                     _lcdPrint:	
  3679                           ;psect for function _lcdPrint
  3680                           
  3681     09F3                     l3085:	
  3682                           ;incstack = 0
  3683                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3684                           
  3685                           
  3686                           ;main.c: 402: void lcdPrint(char *str);main.c: 403: {;main.c: 404:     int n = 0;
  3687     09F3  1683               	bsf	3,5	;RP0=1, select bank1
  3688     09F4  1303               	bcf	3,6	;RP1=0, select bank1
  3689     09F5  01A9               	clrf	lcdPrint@n^(0+128)
  3690     09F6  01AA               	clrf	(lcdPrint@n+1)^(0+128)
  3691                           
  3692                           ;main.c: 406:     while(str[n] != '\0')
  3693     09F7  2A26               	goto	l3091
  3694     09F8                     l3087:
  3695                           
  3696                           ;main.c: 407:     {;main.c: 409:         lcdSend(str[n++], 1);
  3697     09F8  1683               	bsf	3,5	;RP0=1, select bank1
  3698     09F9  1303               	bcf	3,6	;RP1=0, select bank1
  3699     09FA  01A0               	clrf	lcdSend@tipo^(0+128)
  3700     09FB  0AA0               	incf	lcdSend@tipo^(0+128),f
  3701     09FC  0829               	movf	lcdPrint@n^(0+128),w
  3702     09FD  0724               	addwf	lcdPrint@str^(0+128),w
  3703     09FE  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3704     09FF  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3705     0A00  00A6               	movwf	??_lcdPrint^(0+128)
  3706     0A01  1803               	skipnc
  3707     0A02  0AA6               	incf	??_lcdPrint^(0+128),f
  3708     0A03  1FA9               	btfss	lcdPrint@n^(0+128),7
  3709     0A04  2A06               	goto	u3150
  3710     0A05  03A6               	decf	??_lcdPrint^(0+128),f
  3711     0A06                     u3150:
  3712     0A06  1683               	bsf	3,5	;RP0=1, select bank1
  3713     0A07  1303               	bcf	3,6	;RP1=0, select bank1
  3714     0A08  0826               	movf	??_lcdPrint^(0+128),w
  3715     0A09  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3716     0A0A  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3717     0A0B  1283               	bcf	3,5	;RP0=0, select bank0
  3718     0A0C  1303               	bcf	3,6	;RP1=0, select bank0
  3719     0A0D  00FF               	movwf	btemp+1
  3720     0A0E  1683               	bsf	3,5	;RP0=1, select bank1
  3721     0A0F  1303               	bcf	3,6	;RP1=0, select bank1
  3722     0A10  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3723     0A11  0084               	movwf	4
  3724     0A12  1283               	bcf	3,5	;RP0=0, select bank0
  3725     0A13  1303               	bcf	3,6	;RP1=0, select bank0
  3726     0A14  120A  158A  2000  120A  158A  	fcall	stringtab
  3727     0A19  160A  118A  2714  120A  158A  	fcall	_lcdSend
  3728     0A1E                     l3089:
  3729     0A1E  3001               	movlw	1
  3730     0A1F  1683               	bsf	3,5	;RP0=1, select bank1
  3731     0A20  1303               	bcf	3,6	;RP1=0, select bank1
  3732     0A21  07A9               	addwf	lcdPrint@n^(0+128),f
  3733     0A22  1803               	skipnc
  3734     0A23  0AAA               	incf	(lcdPrint@n+1)^(0+128),f
  3735     0A24  3000               	movlw	0
  3736     0A25  07AA               	addwf	(lcdPrint@n+1)^(0+128),f
  3737     0A26                     l3091:
  3738                           
  3739                           ;main.c: 406:     while(str[n] != '\0')
  3740     0A26  0829               	movf	lcdPrint@n^(0+128),w
  3741     0A27  0724               	addwf	lcdPrint@str^(0+128),w
  3742     0A28  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3743     0A29  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3744     0A2A  00A6               	movwf	??_lcdPrint^(0+128)
  3745     0A2B  1803               	skipnc
  3746     0A2C  0AA6               	incf	??_lcdPrint^(0+128),f
  3747     0A2D  1FA9               	btfss	lcdPrint@n^(0+128),7
  3748     0A2E  2A30               	goto	u3160
  3749     0A2F  03A6               	decf	??_lcdPrint^(0+128),f
  3750     0A30                     u3160:
  3751     0A30  1683               	bsf	3,5	;RP0=1, select bank1
  3752     0A31  1303               	bcf	3,6	;RP1=0, select bank1
  3753     0A32  0826               	movf	??_lcdPrint^(0+128),w
  3754     0A33  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3755     0A34  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3756     0A35  1283               	bcf	3,5	;RP0=0, select bank0
  3757     0A36  1303               	bcf	3,6	;RP1=0, select bank0
  3758     0A37  00FF               	movwf	btemp+1
  3759     0A38  1683               	bsf	3,5	;RP0=1, select bank1
  3760     0A39  1303               	bcf	3,6	;RP1=0, select bank1
  3761     0A3A  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3762     0A3B  0084               	movwf	4
  3763     0A3C  1283               	bcf	3,5	;RP0=0, select bank0
  3764     0A3D  1303               	bcf	3,6	;RP1=0, select bank0
  3765     0A3E  120A  158A  2000  120A  158A  	fcall	stringtab
  3766     0A43  3A00               	xorlw	0
  3767     0A44  1D03               	skipz
  3768     0A45  2A47               	goto	u3171
  3769     0A46  2A48               	goto	u3170
  3770     0A47                     u3171:
  3771     0A47  29F8               	goto	l3087
  3772     0A48                     u3170:
  3773     0A48                     l193:
  3774     0A48  0008               	return
  3775     0A49                     __end_of_lcdPrint:
  3776                           
  3777                           	psect	text6
  3778     164D                     __ptext6:	
  3779 ;; *************** function _init_Timer0 *****************
  3780 ;; Defined at:
  3781 ;;		line 354 in file "main.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, status,2, status,0
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3795 ;;      Params:         0       0       0       0       0
  3796 ;;      Locals:         0       0       0       0       0
  3797 ;;      Temps:          0       0       1       0       0
  3798 ;;      Totals:         0       0       1       0       0
  3799 ;;Total ram usage:        1 bytes
  3800 ;; Hardware stack levels used: 1
  3801 ;; Hardware stack levels required when called: 4
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_init_PIC
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809     164D                     _init_Timer0:	
  3810                           ;psect for function _init_Timer0
  3811                           
  3812     164D                     l3187:	
  3813                           ;incstack = 0
  3814                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  3815                           
  3816                           
  3817                           ;main.c: 357:     INTCON |= 0xA0;
  3818     164D  30A0               	movlw	160
  3819     164E  1683               	bsf	3,5	;RP0=1, select bank1
  3820     164F  1303               	bcf	3,6	;RP1=0, select bank1
  3821     1650  00A0               	movwf	??_init_Timer0^(0+128)
  3822     1651  0820               	movf	??_init_Timer0^(0+128),w
  3823     1652  048B               	iorwf	11,f	;volatile
  3824     1653                     l3189:
  3825                           
  3826                           ;main.c: 358:     OPTION_REG = 0x06;
  3827     1653  3006               	movlw	6
  3828     1654  0081               	movwf	1	;volatile
  3829     1655                     l3191:
  3830                           
  3831                           ;main.c: 359:     TMR0 = 131;
  3832     1655  3083               	movlw	131
  3833     1656  1283               	bcf	3,5	;RP0=0, select bank0
  3834     1657  1303               	bcf	3,6	;RP1=0, select bank0
  3835     1658  0081               	movwf	1	;volatile
  3836     1659                     l3193:
  3837                           
  3838                           ;main.c: 361:     milliseconds = 0;
  3839     1659  3000               	movlw	0
  3840     165A  00C3               	movwf	_milliseconds+3
  3841     165B  3000               	movlw	0
  3842     165C  00C2               	movwf	_milliseconds+2
  3843     165D  3000               	movlw	0
  3844     165E  00C1               	movwf	_milliseconds+1
  3845     165F  3000               	movlw	0
  3846     1660  00C0               	movwf	_milliseconds
  3847     1661                     l181:
  3848     1661  0008               	return
  3849     1662                     __end_of_init_Timer0:
  3850                           
  3851                           	psect	text7
  3852     1625                     __ptext7:	
  3853 ;; *************** function _init_NumPad *****************
  3854 ;; Defined at:
  3855 ;;		line 618 in file "main.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;		None
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;		None
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      void 
  3862 ;; Registers used:
  3863 ;;		wreg, status,2, status,0
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3869 ;;      Params:         0       0       0       0       0
  3870 ;;      Locals:         0       0       0       0       0
  3871 ;;      Temps:          0       0       1       0       0
  3872 ;;      Totals:         0       0       1       0       0
  3873 ;;Total ram usage:        1 bytes
  3874 ;; Hardware stack levels used: 1
  3875 ;; Hardware stack levels required when called: 4
  3876 ;; This function calls:
  3877 ;;		Nothing
  3878 ;; This function is called by:
  3879 ;;		_init_PIC
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883     1625                     _init_NumPad:	
  3884                           ;psect for function _init_NumPad
  3885                           
  3886     1625                     l3185:	
  3887                           ;incstack = 0
  3888                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  3889                           
  3890                           
  3891                           ;main.c: 621:     TRISD |= 0x0F;
  3892     1625  300F               	movlw	15
  3893     1626  1683               	bsf	3,5	;RP0=1, select bank1
  3894     1627  1303               	bcf	3,6	;RP1=0, select bank1
  3895     1628  00A0               	movwf	??_init_NumPad^(0+128)
  3896     1629  0820               	movf	??_init_NumPad^(0+128),w
  3897     162A  0488               	iorwf	8,f	;volatile
  3898                           
  3899                           ;main.c: 622:     TRISB &= 0xF0;
  3900     162B  30F0               	movlw	240
  3901     162C  00A0               	movwf	??_init_NumPad^(0+128)
  3902     162D  0820               	movf	??_init_NumPad^(0+128),w
  3903     162E  0586               	andwf	6,f	;volatile
  3904     162F                     l268:
  3905     162F  0008               	return
  3906     1630                     __end_of_init_NumPad:
  3907                           
  3908                           	psect	text8
  3909     0BB4                     __ptext8:	
  3910 ;; *************** function _init_LCD *****************
  3911 ;; Defined at:
  3912 ;;		line 364 in file "main.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0, pclath, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3926 ;;      Params:         0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0
  3928 ;;      Temps:          0       0       2       0       0
  3929 ;;      Totals:         0       0       2       0       0
  3930 ;;Total ram usage:        2 bytes
  3931 ;; Hardware stack levels used: 1
  3932 ;; Hardware stack levels required when called: 5
  3933 ;; This function calls:
  3934 ;;		_lcdSend
  3935 ;; This function is called by:
  3936 ;;		_init_PIC
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940     0BB4                     _init_LCD:	
  3941                           ;psect for function _init_LCD
  3942                           
  3943     0BB4                     l3163:	
  3944                           ;incstack = 0
  3945                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  3946                           
  3947                           
  3948                           ;main.c: 368:     PORTEbits.RE2 = 0;
  3949     0BB4  1283               	bcf	3,5	;RP0=0, select bank0
  3950     0BB5  1303               	bcf	3,6	;RP1=0, select bank0
  3951     0BB6  1109               	bcf	9,2	;volatile
  3952                           
  3953                           ;main.c: 369:     PORTEbits.RE1 = 0;
  3954     0BB7  1089               	bcf	9,1	;volatile
  3955     0BB8                     l3165:
  3956                           
  3957                           ;main.c: 370:     _delay((unsigned long)((20)*(20000000/4000.0)));
  3958     0BB8  3082               	movlw	130
  3959     0BB9  1683               	bsf	3,5	;RP0=1, select bank1
  3960     0BBA  1303               	bcf	3,6	;RP1=0, select bank1
  3961     0BBB  00A5               	movwf	(??_init_LCD^(0+128)+1)
  3962     0BBC  30DD               	movlw	221
  3963     0BBD  00A4               	movwf	??_init_LCD^(0+128)
  3964     0BBE                     u4307:
  3965     0BBE  0BA4               	decfsz	??_init_LCD^(0+128),f
  3966     0BBF  2BBE               	goto	u4307
  3967     0BC0  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  3968     0BC1  2BBE               	goto	u4307
  3969     0BC2                     l3167:
  3970                           
  3971                           ;main.c: 371:     PORTEbits.RE1 = 1;
  3972     0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  3973     0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  3974     0BC4  1489               	bsf	9,1	;volatile
  3975     0BC5                     l3169:
  3976                           
  3977                           ;main.c: 373:     lcdSend(0x38, 0);
  3978     0BC5  1683               	bsf	3,5	;RP0=1, select bank1
  3979     0BC6  1303               	bcf	3,6	;RP1=0, select bank1
  3980     0BC7  01A0               	clrf	lcdSend@tipo^(0+128)
  3981     0BC8  3038               	movlw	56
  3982     0BC9  160A  118A  2714  120A  158A  	fcall	_lcdSend
  3983     0BCE                     l3171:
  3984                           
  3985                           ;main.c: 374:     _delay((unsigned long)((5)*(20000000/4000.0)));
  3986     0BCE  3021               	movlw	33
  3987     0BCF  1683               	bsf	3,5	;RP0=1, select bank1
  3988     0BD0  1303               	bcf	3,6	;RP1=0, select bank1
  3989     0BD1  00A5               	movwf	(??_init_LCD^(0+128)+1)
  3990     0BD2  3075               	movlw	117
  3991     0BD3  00A4               	movwf	??_init_LCD^(0+128)
  3992     0BD4                     u4317:
  3993     0BD4  0BA4               	decfsz	??_init_LCD^(0+128),f
  3994     0BD5  2BD4               	goto	u4317
  3995     0BD6  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  3996     0BD7  2BD4               	goto	u4317
  3997     0BD8  2BD9               	nop2
  3998                           
  3999                           ;main.c: 375:     lcdSend(0x38, 0);
  4000     0BD9  1683               	bsf	3,5	;RP0=1, select bank1
  4001     0BDA  1303               	bcf	3,6	;RP1=0, select bank1
  4002     0BDB  01A0               	clrf	lcdSend@tipo^(0+128)
  4003     0BDC  3038               	movlw	56
  4004     0BDD  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4005     0BE2                     l3173:
  4006                           
  4007                           ;main.c: 376:     _delay((unsigned long)((1)*(20000000/4000.0)));
  4008     0BE2  3007               	movlw	7
  4009     0BE3  1683               	bsf	3,5	;RP0=1, select bank1
  4010     0BE4  1303               	bcf	3,6	;RP1=0, select bank1
  4011     0BE5  00A5               	movwf	(??_init_LCD^(0+128)+1)
  4012     0BE6  307C               	movlw	124
  4013     0BE7  00A4               	movwf	??_init_LCD^(0+128)
  4014     0BE8                     u4327:
  4015     0BE8  0BA4               	decfsz	??_init_LCD^(0+128),f
  4016     0BE9  2BE8               	goto	u4327
  4017     0BEA  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  4018     0BEB  2BE8               	goto	u4327
  4019     0BEC  0000               	nop
  4020     0BED                     l3175:
  4021                           
  4022                           ;main.c: 377:     lcdSend(0x38, 0);
  4023     0BED  1683               	bsf	3,5	;RP0=1, select bank1
  4024     0BEE  1303               	bcf	3,6	;RP1=0, select bank1
  4025     0BEF  01A0               	clrf	lcdSend@tipo^(0+128)
  4026     0BF0  3038               	movlw	56
  4027     0BF1  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4028     0BF6                     l3177:
  4029                           
  4030                           ;main.c: 378:     lcdSend(0x08, 0);
  4031     0BF6  1683               	bsf	3,5	;RP0=1, select bank1
  4032     0BF7  1303               	bcf	3,6	;RP1=0, select bank1
  4033     0BF8  01A0               	clrf	lcdSend@tipo^(0+128)
  4034     0BF9  3008               	movlw	8
  4035     0BFA  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4036     0BFF                     l3179:
  4037                           
  4038                           ;main.c: 379:     lcdSend(0x0F, 0);
  4039     0BFF  1683               	bsf	3,5	;RP0=1, select bank1
  4040     0C00  1303               	bcf	3,6	;RP1=0, select bank1
  4041     0C01  01A0               	clrf	lcdSend@tipo^(0+128)
  4042     0C02  300F               	movlw	15
  4043     0C03  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4044     0C08                     l3181:
  4045                           
  4046                           ;main.c: 380:     lcdSend(0x01, 0);
  4047     0C08  1683               	bsf	3,5	;RP0=1, select bank1
  4048     0C09  1303               	bcf	3,6	;RP1=0, select bank1
  4049     0C0A  01A0               	clrf	lcdSend@tipo^(0+128)
  4050     0C0B  3001               	movlw	1
  4051     0C0C  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4052     0C11                     l3183:
  4053                           
  4054                           ;main.c: 382:     lcdSend(0x0C, 0);
  4055     0C11  1683               	bsf	3,5	;RP0=1, select bank1
  4056     0C12  1303               	bcf	3,6	;RP1=0, select bank1
  4057     0C13  01A0               	clrf	lcdSend@tipo^(0+128)
  4058     0C14  300C               	movlw	12
  4059     0C15  160A  118A  2714  120A  158A  	fcall	_lcdSend
  4060     0C1A                     l184:
  4061     0C1A  0008               	return
  4062     0C1B                     __end_of_init_LCD:
  4063                           
  4064                           	psect	text9
  4065     1714                     __ptext9:	
  4066 ;; *************** function _lcdSend *****************
  4067 ;; Defined at:
  4068 ;;		line 385 in file "main.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  dato            1    wreg     unsigned char 
  4071 ;;  tipo            1    0[BANK1 ] unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  dato            1    3[BANK1 ] unsigned char 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4083 ;;      Params:         0       0       1       0       0
  4084 ;;      Locals:         0       0       1       0       0
  4085 ;;      Temps:          0       0       2       0       0
  4086 ;;      Totals:         0       0       4       0       0
  4087 ;;Total ram usage:        4 bytes
  4088 ;; Hardware stack levels used: 1
  4089 ;; Hardware stack levels required when called: 4
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_main
  4094 ;;		_init_PIC
  4095 ;;		_init_LCD
  4096 ;;		_lcdPrint
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100     1714                     _lcdSend:	
  4101                           ;psect for function _lcdSend
  4102                           
  4103                           
  4104                           ;incstack = 0
  4105                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  4106                           ;lcdSend@dato stored from wreg
  4107     1714  1683               	bsf	3,5	;RP0=1, select bank1
  4108     1715  1303               	bcf	3,6	;RP1=0, select bank1
  4109     1716  00A3               	movwf	lcdSend@dato^(0+128)
  4110     1717                     l2955:
  4111                           
  4112                           ;main.c: 385: void lcdSend(char dato, char tipo);main.c: 386: {;main.c: 389:     TRISD =
      +                           0x00;
  4113     1717  0188               	clrf	8	;volatile
  4114     1718                     l2957:
  4115                           
  4116                           ;main.c: 390:     TRISEbits.TRISE1 = 0;
  4117     1718  1089               	bcf	9,1	;volatile
  4118     1719                     l2959:
  4119                           
  4120                           ;main.c: 391:     TRISEbits.TRISE2 = 0;
  4121     1719  1109               	bcf	9,2	;volatile
  4122     171A                     l2961:
  4123                           
  4124                           ;main.c: 393:     PORTEbits.RE1 = 1;
  4125     171A  1283               	bcf	3,5	;RP0=0, select bank0
  4126     171B  1303               	bcf	3,6	;RP1=0, select bank0
  4127     171C  1489               	bsf	9,1	;volatile
  4128     171D                     l2963:
  4129                           
  4130                           ;main.c: 394:     PORTD = dato;
  4131     171D  1683               	bsf	3,5	;RP0=1, select bank1
  4132     171E  1303               	bcf	3,6	;RP1=0, select bank1
  4133     171F  0823               	movf	lcdSend@dato^(0+128),w
  4134     1720  1283               	bcf	3,5	;RP0=0, select bank0
  4135     1721  1303               	bcf	3,6	;RP1=0, select bank0
  4136     1722  0088               	movwf	8	;volatile
  4137     1723                     l2965:
  4138                           
  4139                           ;main.c: 395:     PORTEbits.RE2 = tipo;
  4140     1723  1683               	bsf	3,5	;RP0=1, select bank1
  4141     1724  1303               	bcf	3,6	;RP1=0, select bank1
  4142     1725  0C20               	rrf	lcdSend@tipo^(0+128),w
  4143     1726  1283               	bcf	3,5	;RP0=0, select bank0
  4144     1727  1303               	bcf	3,6	;RP1=0, select bank0
  4145     1728  1C03               	skipc
  4146     1729  1109               	bcf	9,2	;volatile
  4147     172A  1803               	skipnc
  4148     172B  1509               	bsf	9,2	;volatile
  4149     172C                     l2967:
  4150                           
  4151                           ;main.c: 396:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4152     172C  3014               	movlw	20
  4153     172D  1683               	bsf	3,5	;RP0=1, select bank1
  4154     172E  1303               	bcf	3,6	;RP1=0, select bank1
  4155     172F  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4156     1730  3079               	movlw	121
  4157     1731  00A1               	movwf	??_lcdSend^(0+128)
  4158     1732                     u4337:
  4159     1732  0BA1               	decfsz	??_lcdSend^(0+128),f
  4160     1733  2F32               	goto	u4337
  4161     1734  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4162     1735  2F32               	goto	u4337
  4163     1736                     l2969:
  4164                           
  4165                           ;main.c: 397:     PORTEbits.RE1 = 0;
  4166     1736  1283               	bcf	3,5	;RP0=0, select bank0
  4167     1737  1303               	bcf	3,6	;RP1=0, select bank0
  4168     1738  1089               	bcf	9,1	;volatile
  4169     1739                     l2971:
  4170                           
  4171                           ;main.c: 398:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4172     1739  3014               	movlw	20
  4173     173A  1683               	bsf	3,5	;RP0=1, select bank1
  4174     173B  1303               	bcf	3,6	;RP1=0, select bank1
  4175     173C  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4176     173D  3079               	movlw	121
  4177     173E  00A1               	movwf	??_lcdSend^(0+128)
  4178     173F                     u4347:
  4179     173F  0BA1               	decfsz	??_lcdSend^(0+128),f
  4180     1740  2F3F               	goto	u4347
  4181     1741  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4182     1742  2F3F               	goto	u4347
  4183     1743                     l2973:
  4184                           
  4185                           ;main.c: 399:     PORTEbits.RE1 = 1;
  4186     1743  1283               	bcf	3,5	;RP0=0, select bank0
  4187     1744  1303               	bcf	3,6	;RP1=0, select bank0
  4188     1745  1489               	bsf	9,1	;volatile
  4189     1746                     l187:
  4190     1746  0008               	return
  4191     1747                     __end_of_lcdSend:
  4192                           
  4193                           	psect	text10
  4194     1679                     __ptext10:	
  4195 ;; *************** function _eeprom_read *****************
  4196 ;; Defined at:
  4197 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  addr            1    wreg     unsigned char 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  addr            1    1[BANK1 ] unsigned char 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      unsigned char 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4211 ;;      Params:         0       0       0       0       0
  4212 ;;      Locals:         0       0       1       0       0
  4213 ;;      Temps:          0       0       1       0       0
  4214 ;;      Totals:         0       0       2       0       0
  4215 ;;Total ram usage:        2 bytes
  4216 ;; Hardware stack levels used: 1
  4217 ;; Hardware stack levels required when called: 4
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_init_PIC
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225     1679                     _eeprom_read:	
  4226                           ;psect for function _eeprom_read
  4227                           
  4228                           
  4229                           ;incstack = 0
  4230                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4231                           ;eeprom_read@addr stored from wreg
  4232     1679  1683               	bsf	3,5	;RP0=1, select bank1
  4233     167A  1303               	bcf	3,6	;RP1=0, select bank1
  4234     167B  00A1               	movwf	eeprom_read@addr^(0+128)
  4235     167C                     l421:	
  4236                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 8:  do
  4237                           
  4238     167C  0064               	clrwdt	;# 
  4239     167D  1683               	bsf	3,5	;RP0=1, select bank3
  4240     167E  1703               	bsf	3,6	;RP1=1, select bank3
  4241     167F  188C               	btfsc	12,1	;volsfr
  4242     1680  2E82               	goto	u3271
  4243     1681  2E85               	goto	u3270
  4244     1682                     u3271:
  4245     1682  1683               	bsf	3,5	;RP0=1, select bank1
  4246     1683  1303               	bcf	3,6	;RP1=0, select bank1
  4247     1684  2E7C               	goto	l421
  4248     1685                     u3270:
  4249     1685                     l3195:
  4250                           
  4251                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4252     1685  1683               	bsf	3,5	;RP0=1, select bank1
  4253     1686  1303               	bcf	3,6	;RP1=0, select bank1
  4254     1687  0821               	movf	eeprom_read@addr^(0+128),w
  4255     1688  1283               	bcf	3,5	;RP0=0, select bank2
  4256     1689  1703               	bsf	3,6	;RP1=1, select bank2
  4257     168A  008D               	movwf	13	;volatile
  4258     168B  303F               	movlw	63
  4259     168C  1683               	bsf	3,5	;RP0=1, select bank1
  4260     168D  1303               	bcf	3,6	;RP1=0, select bank1
  4261     168E  00A0               	movwf	??_eeprom_read^(0+128)
  4262     168F  0820               	movf	??_eeprom_read^(0+128),w
  4263     1690  1683               	bsf	3,5	;RP0=1, select bank3
  4264     1691  1703               	bsf	3,6	;RP1=1, select bank3
  4265     1692  058C               	andwf	12,f	;volsfr
  4266     1693  140C               	bsf	12,0	;volsfr
  4267     1694  1283               	bcf	3,5	;RP0=0, select bank2
  4268     1695  1703               	bsf	3,6	;RP1=1, select bank2
  4269     1696  080C               	movf	12,w	;volatile
  4270     1697                     l423:
  4271     1697  0008               	return
  4272     1698                     __end_of_eeprom_read:
  4273                           
  4274                           	psect	text11
  4275     07BF                     __ptext11:	
  4276 ;; *************** function _UART_init *****************
  4277 ;; Defined at:
  4278 ;;		line 758 in file "main.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  baudrate        4   57[BANK1 ] long 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, pclath, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4292 ;;      Params:         0       0       4       0       0
  4293 ;;      Locals:         0       0       0       0       0
  4294 ;;      Temps:          0       0       4       0       0
  4295 ;;      Totals:         0       0       8       0       0
  4296 ;;Total ram usage:        8 bytes
  4297 ;; Hardware stack levels used: 1
  4298 ;; Hardware stack levels required when called: 5
  4299 ;; This function calls:
  4300 ;;		___aldiv
  4301 ;; This function is called by:
  4302 ;;		_init_PIC
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306     07BF                     _UART_init:	
  4307                           ;psect for function _UART_init
  4308                           
  4309     07BF                     l3147:	
  4310                           ;incstack = 0
  4311                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  4312                           
  4313                           
  4314                           ;main.c: 758: void UART_init(long int baudrate);main.c: 759: {;main.c: 761:     TRISC &=
      +                           ~0x40;
  4315     07BF  30BF               	movlw	191
  4316     07C0  1683               	bsf	3,5	;RP0=1, select bank1
  4317     07C1  1303               	bcf	3,6	;RP1=0, select bank1
  4318     07C2  00DD               	movwf	??_UART_init^(0+128)
  4319     07C3  085D               	movf	??_UART_init^(0+128),w
  4320     07C4  0587               	andwf	7,f	;volatile
  4321     07C5                     l3149:
  4322                           
  4323                           ;main.c: 762:     TRISC |= 0x80;
  4324     07C5  1787               	bsf	7,7	;volatile
  4325                           
  4326                           ;main.c: 763:     TXSTA |= 0x24;
  4327     07C6  3024               	movlw	36
  4328     07C7  00DD               	movwf	??_UART_init^(0+128)
  4329     07C8  085D               	movf	??_UART_init^(0+128),w
  4330     07C9  0498               	iorwf	24,f	;volatile
  4331     07CA                     l3151:
  4332                           
  4333                           ;main.c: 764:     RCSTA |= 0x80;
  4334     07CA  1283               	bcf	3,5	;RP0=0, select bank0
  4335     07CB  1303               	bcf	3,6	;RP1=0, select bank0
  4336     07CC  1798               	bsf	24,7	;volatile
  4337     07CD                     l3153:
  4338                           
  4339                           ;main.c: 765:     RCSTA |= 0x10;
  4340     07CD  1618               	bsf	24,4	;volatile
  4341     07CE                     l3155:
  4342                           
  4343                           ;main.c: 768:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  4344     07CE  1683               	bsf	3,5	;RP0=1, select bank1
  4345     07CF  1303               	bcf	3,6	;RP1=0, select bank1
  4346     07D0  0859               	movf	UART_init@baudrate^(0+128),w
  4347     07D1  00DD               	movwf	??_UART_init^(0+128)
  4348     07D2  085A               	movf	(UART_init@baudrate+1)^(0+128),w
  4349     07D3  00DE               	movwf	(??_UART_init^(0+128)+1)
  4350     07D4  085B               	movf	(UART_init@baudrate+2)^(0+128),w
  4351     07D5  00DF               	movwf	(??_UART_init^(0+128)+2)
  4352     07D6  085C               	movf	(UART_init@baudrate+3)^(0+128),w
  4353     07D7  00E0               	movwf	(??_UART_init^(0+128)+3)
  4354     07D8  3006               	movlw	6
  4355     07D9                     u3265:
  4356     07D9  1003               	clrc
  4357     07DA  0DDD               	rlf	??_UART_init^(0+128),f
  4358     07DB  0DDE               	rlf	(??_UART_init^(0+128)+1),f
  4359     07DC  0DDF               	rlf	(??_UART_init^(0+128)+2),f
  4360     07DD  0DE0               	rlf	(??_UART_init^(0+128)+3),f
  4361     07DE                     u3260:
  4362     07DE  3EFF               	addlw	-1
  4363     07DF  1D03               	skipz
  4364     07E0  2FD9               	goto	u3265
  4365     07E1  0860               	movf	(??_UART_init+3)^(0+128),w
  4366     07E2  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4367     07E3  085F               	movf	(??_UART_init+2)^(0+128),w
  4368     07E4  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4369     07E5  085E               	movf	(??_UART_init+1)^(0+128),w
  4370     07E6  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4371     07E7  085D               	movf	??_UART_init^(0+128),w
  4372     07E8  00CA               	movwf	___aldiv@divisor^(0+128)
  4373     07E9  3001               	movlw	1
  4374     07EA  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4375     07EB  3031               	movlw	49
  4376     07EC  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4377     07ED  302D               	movlw	45
  4378     07EE  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4379     07EF  3000               	movlw	0
  4380     07F0  00CE               	movwf	___aldiv@dividend^(0+128)
  4381     07F1  120A  118A  2722  120A  118A  	fcall	___aldiv
  4382     07F6  1683               	bsf	3,5	;RP0=1, select bank1
  4383     07F7  1303               	bcf	3,6	;RP1=0, select bank1
  4384     07F8  084A               	movf	?___aldiv^(0+128),w
  4385     07F9  3EFF               	addlw	255
  4386     07FA  0099               	movwf	25	;volatile
  4387     07FB                     l3157:
  4388                           
  4389                           ;main.c: 771:     INTCON |= 0x80;
  4390     07FB  178B               	bsf	11,7	;volatile
  4391     07FC                     l3159:
  4392                           
  4393                           ;main.c: 773:     INTCON |= 0x40;
  4394     07FC  170B               	bsf	11,6	;volatile
  4395     07FD                     l3161:
  4396                           
  4397                           ;main.c: 775:     PIE1 |= 0x20;
  4398     07FD  168C               	bsf	12,5	;volatile
  4399     07FE                     l305:
  4400     07FE  0008               	return
  4401     07FF                     __end_of_UART_init:
  4402                           
  4403                           	psect	text12
  4404     0B56                     __ptext12:	
  4405 ;; *************** function _Fill *****************
  4406 ;; Defined at:
  4407 ;;		line 591 in file "main.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;  id              1    wreg     PTR unsigned char 
  4410 ;;		 -> PIC_ID(4), 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;  id              1   10[BANK1 ] PTR unsigned char 
  4413 ;;		 -> PIC_ID(4), 
  4414 ;;  length          2    8[BANK1 ] int 
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  1    wreg      void 
  4417 ;; Registers used:
  4418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4424 ;;      Params:         0       0       0       0       0
  4425 ;;      Locals:         0       0       3       0       0
  4426 ;;      Temps:          0       0       1       0       0
  4427 ;;      Totals:         0       0       4       0       0
  4428 ;;Total ram usage:        4 bytes
  4429 ;; Hardware stack levels used: 1
  4430 ;; Hardware stack levels required when called: 5
  4431 ;; This function calls:
  4432 ;;		_Length
  4433 ;; This function is called by:
  4434 ;;		_init_PIC
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438     0B56                     _Fill:	
  4439                           ;psect for function _Fill
  4440                           
  4441                           
  4442                           ;incstack = 0
  4443                           ; Regs used in _Fill: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4444                           ;Fill@id stored from wreg
  4445     0B56  1683               	bsf	3,5	;RP0=1, select bank1
  4446     0B57  1303               	bcf	3,6	;RP1=0, select bank1
  4447     0B58  00AA               	movwf	Fill@id^(0+128)
  4448     0B59                     l3199:
  4449                           
  4450                           ;main.c: 591: void Fill(char* id);main.c: 592: {;main.c: 593:     int length = Length(id
      +                          );
  4451     0B59  082A               	movf	Fill@id^(0+128),w
  4452     0B5A  00A0               	movwf	Length@str^(0+128)
  4453     0B5B  3000               	movlw	0
  4454     0B5C  00A1               	movwf	(Length@str+1)^(0+128)
  4455     0B5D  120A  158A  20F2  120A  158A  	fcall	_Length
  4456     0B62  1683               	bsf	3,5	;RP0=1, select bank1
  4457     0B63  1303               	bcf	3,6	;RP1=0, select bank1
  4458     0B64  0821               	movf	(?_Length+1)^(0+128),w
  4459     0B65  00A9               	movwf	(Fill@length+1)^(0+128)
  4460     0B66  0820               	movf	?_Length^(0+128),w
  4461     0B67  00A8               	movwf	Fill@length^(0+128)
  4462     0B68                     l3201:
  4463                           
  4464                           ;main.c: 595:     if(length < 3)
  4465     0B68  0829               	movf	(Fill@length+1)^(0+128),w
  4466     0B69  3A80               	xorlw	128
  4467     0B6A  00FF               	movwf	btemp+1
  4468     0B6B  3080               	movlw	128
  4469     0B6C  027F               	subwf	btemp+1,w
  4470     0B6D  1D03               	skipz
  4471     0B6E  2B71               	goto	u3285
  4472     0B6F  3003               	movlw	3
  4473     0B70  0228               	subwf	Fill@length^(0+128),w
  4474     0B71                     u3285:
  4475     0B71  1803               	skipnc
  4476     0B72  2B74               	goto	u3281
  4477     0B73  2B75               	goto	u3280
  4478     0B74                     u3281:
  4479     0B74  2BB3               	goto	l265
  4480     0B75                     u3280:
  4481     0B75  2BA4               	goto	l3219
  4482     0B76                     l3205:
  4483                           
  4484                           ;main.c: 600:                 id[3] = '\0';
  4485     0B76  082A               	movf	Fill@id^(0+128),w
  4486     0B77  3E03               	addlw	3
  4487     0B78  0084               	movwf	4
  4488     0B79  1383               	bcf	3,7	;select IRP bank0
  4489     0B7A  0180               	clrf	0
  4490                           
  4491                           ;main.c: 601:                 id[2] = id[0];
  4492     0B7B  082A               	movf	Fill@id^(0+128),w
  4493     0B7C  0084               	movwf	4
  4494     0B7D  0800               	movf	0,w
  4495     0B7E  00A7               	movwf	??_Fill^(0+128)
  4496     0B7F  082A               	movf	Fill@id^(0+128),w
  4497     0B80  3E02               	addlw	2
  4498     0B81  0084               	movwf	4
  4499     0B82  0827               	movf	??_Fill^(0+128),w
  4500     0B83  0080               	movwf	0
  4501     0B84                     l3207:
  4502                           
  4503                           ;main.c: 602:                 id[1] = '0';
  4504     0B84  0A2A               	incf	Fill@id^(0+128),w
  4505     0B85  0084               	movwf	4
  4506     0B86  3030               	movlw	48
  4507     0B87  0080               	movwf	0
  4508     0B88                     l3209:
  4509                           
  4510                           ;main.c: 603:                 id[0] = '0';
  4511     0B88  082A               	movf	Fill@id^(0+128),w
  4512     0B89  0084               	movwf	4
  4513     0B8A  3030               	movlw	48
  4514     0B8B  0080               	movwf	0
  4515                           
  4516                           ;main.c: 604:                 break;
  4517     0B8C  2BB3               	goto	l265
  4518     0B8D                     l3211:
  4519                           
  4520                           ;main.c: 606:                 id[3] = '\0';
  4521     0B8D  082A               	movf	Fill@id^(0+128),w
  4522     0B8E  3E03               	addlw	3
  4523     0B8F  0084               	movwf	4
  4524     0B90  1383               	bcf	3,7	;select IRP bank0
  4525     0B91  0180               	clrf	0
  4526                           
  4527                           ;main.c: 607:                 id[2] = id[1];
  4528     0B92  0A2A               	incf	Fill@id^(0+128),w
  4529     0B93  0084               	movwf	4
  4530     0B94  0800               	movf	0,w
  4531     0B95  00A7               	movwf	??_Fill^(0+128)
  4532     0B96  082A               	movf	Fill@id^(0+128),w
  4533     0B97  3E02               	addlw	2
  4534     0B98  0084               	movwf	4
  4535     0B99  0827               	movf	??_Fill^(0+128),w
  4536     0B9A  0080               	movwf	0
  4537     0B9B                     l3213:
  4538                           
  4539                           ;main.c: 608:                 id[1] = id[0];
  4540     0B9B  082A               	movf	Fill@id^(0+128),w
  4541     0B9C  0084               	movwf	4
  4542     0B9D  0800               	movf	0,w
  4543     0B9E  00A7               	movwf	??_Fill^(0+128)
  4544     0B9F  0A2A               	incf	Fill@id^(0+128),w
  4545     0BA0  0084               	movwf	4
  4546     0BA1  0827               	movf	??_Fill^(0+128),w
  4547     0BA2  0080               	movwf	0
  4548     0BA3  2B88               	goto	l3209
  4549     0BA4                     l3219:
  4550                           
  4551                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4552                           ; Switch size 1, requested type "simple"
  4553                           ; Number of cases is 1, Range of values is 0 to 0
  4554                           ; switch strategies available:
  4555                           ; Name         Instructions Cycles
  4556                           ; simple_byte            4     3 (average)
  4557                           ; direct_byte           11     8 (fixed)
  4558                           ; jumptable            260     6 (fixed)
  4559                           ;	Chosen strategy is simple_byte
  4560     0BA4  1683               	bsf	3,5	;RP0=1, select bank1
  4561     0BA5  1303               	bcf	3,6	;RP1=0, select bank1
  4562     0BA6  0829               	movf	(Fill@length+1)^(0+128),w
  4563     0BA7  3A00               	xorlw	0	; case 0
  4564     0BA8  1903               	skipnz
  4565     0BA9  2BAB               	goto	l4115
  4566     0BAA  2BB3               	goto	l265
  4567     0BAB                     l4115:
  4568                           
  4569                           ; Switch size 1, requested type "simple"
  4570                           ; Number of cases is 2, Range of values is 1 to 2
  4571                           ; switch strategies available:
  4572                           ; Name         Instructions Cycles
  4573                           ; simple_byte            7     4 (average)
  4574                           ; direct_byte           17    11 (fixed)
  4575                           ; jumptable            263     9 (fixed)
  4576                           ;	Chosen strategy is simple_byte
  4577     0BAB  0828               	movf	Fill@length^(0+128),w
  4578     0BAC  3A01               	xorlw	1	; case 1
  4579     0BAD  1903               	skipnz
  4580     0BAE  2B76               	goto	l3205
  4581     0BAF  3A03               	xorlw	3	; case 2
  4582     0BB0  1903               	skipnz
  4583     0BB1  2B8D               	goto	l3211
  4584     0BB2  2BB3               	goto	l265
  4585     0BB3                     l265:
  4586     0BB3  0008               	return
  4587     0BB4                     __end_of_Fill:
  4588                           
  4589                           	psect	text13
  4590     05F4                     __ptext13:	
  4591 ;; *************** function _ConvertToString *****************
  4592 ;; Defined at:
  4593 ;;		line 424 in file "main.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  n               4   57[BANK1 ] long 
  4596 ;;  str             2   61[BANK1 ] PTR unsigned char 
  4597 ;;		 -> main@num_rand_s(16), PIC_ID(4), 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  temp            2    0[BANK3 ] int 
  4600 ;;  i               2    4[BANK3 ] int 
  4601 ;;  j               2    2[BANK3 ] int 
  4602 ;;  n_cifre         1    6[BANK3 ] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      void 
  4605 ;; Registers used:
  4606 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4612 ;;      Params:         0       0       6       0       0
  4613 ;;      Locals:         0       0       0       7       0
  4614 ;;      Temps:          0       0       3       0       0
  4615 ;;      Totals:         0       0       9       7       0
  4616 ;;Total ram usage:       16 bytes
  4617 ;; Hardware stack levels used: 1
  4618 ;; Hardware stack levels required when called: 6
  4619 ;; This function calls:
  4620 ;;		___aldiv
  4621 ;;		___almod
  4622 ;;		___lmul
  4623 ;;		_pow
  4624 ;; This function is called by:
  4625 ;;		_main
  4626 ;;		_init_PIC
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630     05F4                     _ConvertToString:	
  4631                           ;psect for function _ConvertToString
  4632                           
  4633     05F4                     l3801:	
  4634                           ;incstack = 0
  4635                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4636                           
  4637                           
  4638                           ;main.c: 424: void ConvertToString(long n, char* str);main.c: 425: {;main.c: 428:     in
      +                          t i = 0, j = 0;
  4639     05F4  1683               	bsf	3,5	;RP0=1, select bank3
  4640     05F5  1703               	bsf	3,6	;RP1=1, select bank3
  4641     05F6  01CB               	clrf	ConvertToString@i^(0+384)
  4642     05F7  01CC               	clrf	(ConvertToString@i+1)^(0+384)
  4643     05F8  01C9               	clrf	ConvertToString@j^(0+384)
  4644     05F9  01CA               	clrf	(ConvertToString@j+1)^(0+384)
  4645     05FA                     l3803:
  4646                           
  4647                           ;main.c: 429:     if(n < 0)
  4648     05FA  1683               	bsf	3,5	;RP0=1, select bank1
  4649     05FB  1303               	bcf	3,6	;RP1=0, select bank1
  4650     05FC  1FDC               	btfss	(ConvertToString@n+3)^(0+128),7
  4651     05FD  2DFF               	goto	u4011
  4652     05FE  2E00               	goto	u4010
  4653     05FF                     u4011:
  4654     05FF  2E2E               	goto	l3811
  4655     0600                     u4010:
  4656     0600                     l3805:
  4657                           
  4658                           ;main.c: 430:     {;main.c: 431:         i = 1;
  4659     0600  3001               	movlw	1
  4660     0601  1683               	bsf	3,5	;RP0=1, select bank3
  4661     0602  1703               	bsf	3,6	;RP1=1, select bank3
  4662     0603  00CB               	movwf	ConvertToString@i^(0+384)
  4663     0604  3000               	movlw	0
  4664     0605  00CC               	movwf	(ConvertToString@i^(0+384)+1)
  4665     0606                     l3807:
  4666                           
  4667                           ;main.c: 432:         str[0] = '-';
  4668     0606  1683               	bsf	3,5	;RP0=1, select bank1
  4669     0607  1303               	bcf	3,6	;RP1=0, select bank1
  4670     0608  085D               	movf	ConvertToString@str^(0+128),w
  4671     0609  0084               	movwf	4
  4672     060A  1783               	bsf	3,7
  4673     060B  1C5E               	btfss	(ConvertToString@str+1)^(0+128),0
  4674     060C  1383               	bcf	3,7
  4675     060D  302D               	movlw	45
  4676     060E  0080               	movwf	0
  4677     060F                     l3809:
  4678                           
  4679                           ;main.c: 433:         n *= -1;
  4680     060F  30FF               	movlw	255
  4681     0610  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  4682     0611  30FF               	movlw	255
  4683     0612  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  4684     0613  30FF               	movlw	255
  4685     0614  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  4686     0615  30FF               	movlw	255
  4687     0616  00A0               	movwf	___lmul@multiplier^(0+128)
  4688     0617  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4689     0618  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4690     0619  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4691     061A  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4692     061B  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4693     061C  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4694     061D  0859               	movf	ConvertToString@n^(0+128),w
  4695     061E  00A4               	movwf	___lmul@multiplicand^(0+128)
  4696     061F  120A  158A  2161  120A  118A  	fcall	___lmul
  4697     0624  1683               	bsf	3,5	;RP0=1, select bank1
  4698     0625  1303               	bcf	3,6	;RP1=0, select bank1
  4699     0626  0823               	movf	(?___lmul+3)^(0+128),w
  4700     0627  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4701     0628  0822               	movf	(?___lmul+2)^(0+128),w
  4702     0629  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4703     062A  0821               	movf	(?___lmul+1)^(0+128),w
  4704     062B  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4705     062C  0820               	movf	?___lmul^(0+128),w
  4706     062D  00D9               	movwf	ConvertToString@n^(0+128)
  4707     062E                     l3811:
  4708                           
  4709                           ;main.c: 436:     char n_cifre = 1;
  4710     062E  1683               	bsf	3,5	;RP0=1, select bank3
  4711     062F  1703               	bsf	3,6	;RP1=1, select bank3
  4712     0630  01CD               	clrf	ConvertToString@n_cifre^(0+384)
  4713     0631  0ACD               	incf	ConvertToString@n_cifre^(0+384),f
  4714                           
  4715                           ;main.c: 438:     while(n / pow(10, n_cifre))
  4716     0632  2E39               	goto	l3815
  4717     0633                     l3813:
  4718                           
  4719                           ;main.c: 439:         n_cifre++;
  4720     0633  3001               	movlw	1
  4721     0634  00DF               	movwf	??_ConvertToString^(0+128)
  4722     0635  085F               	movf	??_ConvertToString^(0+128),w
  4723     0636  1683               	bsf	3,5	;RP0=1, select bank3
  4724     0637  1703               	bsf	3,6	;RP1=1, select bank3
  4725     0638  07CD               	addwf	ConvertToString@n_cifre^(0+384),f
  4726     0639                     l3815:
  4727                           
  4728                           ;main.c: 438:     while(n / pow(10, n_cifre))
  4729     0639  084D               	movf	ConvertToString@n_cifre^(0+384),w
  4730     063A  1683               	bsf	3,5	;RP0=1, select bank1
  4731     063B  1303               	bcf	3,6	;RP1=0, select bank1
  4732     063C  00C1               	movwf	pow@exp^(0+128)
  4733     063D  300A               	movlw	10
  4734     063E  160A  118A  277E  120A  118A  	fcall	_pow
  4735     0643  1683               	bsf	3,5	;RP0=1, select bank1
  4736     0644  1303               	bcf	3,6	;RP1=0, select bank1
  4737     0645  0841               	movf	?_pow^(0+128),w
  4738     0646  00CA               	movwf	___aldiv@divisor^(0+128)
  4739     0647  0842               	movf	(?_pow+1)^(0+128),w
  4740     0648  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4741     0649  3000               	movlw	0
  4742     064A  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4743     064B  30FF               	movlw	255
  4744     064C  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4745     064D  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4746     064E  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4747     064F  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4748     0650  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4749     0651  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4750     0652  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4751     0653  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4752     0654  0859               	movf	ConvertToString@n^(0+128),w
  4753     0655  00CE               	movwf	___aldiv@dividend^(0+128)
  4754     0656  120A  118A  2722  120A  118A  	fcall	___aldiv
  4755     065B  1683               	bsf	3,5	;RP0=1, select bank1
  4756     065C  1303               	bcf	3,6	;RP1=0, select bank1
  4757     065D  084D               	movf	(?___aldiv+3)^(0+128),w
  4758     065E  044C               	iorwf	(?___aldiv+2)^(0+128),w
  4759     065F  044B               	iorwf	(?___aldiv+1)^(0+128),w
  4760     0660  044A               	iorwf	?___aldiv^(0+128),w
  4761     0661  1D03               	skipz
  4762     0662  2E64               	goto	u4021
  4763     0663  2E65               	goto	u4020
  4764     0664                     u4021:
  4765     0664  2E33               	goto	l3813
  4766     0665                     u4020:
  4767     0665  2EF2               	goto	l3827
  4768     0666                     l3817:
  4769                           
  4770                           ;main.c: 442:     {;main.c: 443:         int temp = pow(10, (char)(n_cifre - 1 - j));
  4771     0666  1683               	bsf	3,5	;RP0=1, select bank3
  4772     0667  1703               	bsf	3,6	;RP1=1, select bank3
  4773     0668  0849               	movf	ConvertToString@j^(0+384),w
  4774     0669  024D               	subwf	ConvertToString@n_cifre^(0+384),w
  4775     066A  3EFF               	addlw	255
  4776     066B  1683               	bsf	3,5	;RP0=1, select bank1
  4777     066C  1303               	bcf	3,6	;RP1=0, select bank1
  4778     066D  00C1               	movwf	pow@exp^(0+128)
  4779     066E  300A               	movlw	10
  4780     066F  160A  118A  277E  120A  118A  	fcall	_pow
  4781     0674  1683               	bsf	3,5	;RP0=1, select bank1
  4782     0675  1303               	bcf	3,6	;RP1=0, select bank1
  4783     0676  0842               	movf	(?_pow+1)^(0+128),w
  4784     0677  1683               	bsf	3,5	;RP0=1, select bank3
  4785     0678  1703               	bsf	3,6	;RP1=1, select bank3
  4786     0679  00C8               	movwf	(ConvertToString@temp+1)^(0+384)
  4787     067A  1683               	bsf	3,5	;RP0=1, select bank1
  4788     067B  1303               	bcf	3,6	;RP1=0, select bank1
  4789     067C  0841               	movf	?_pow^(0+128),w
  4790     067D  1683               	bsf	3,5	;RP0=1, select bank3
  4791     067E  1703               	bsf	3,6	;RP1=1, select bank3
  4792     067F  00C7               	movwf	ConvertToString@temp^(0+384)
  4793     0680                     l3819:
  4794                           
  4795                           ;main.c: 445:         str[i] = (char)(n/temp) + '0';
  4796     0680  084B               	movf	ConvertToString@i^(0+384),w
  4797     0681  1683               	bsf	3,5	;RP0=1, select bank1
  4798     0682  1303               	bcf	3,6	;RP1=0, select bank1
  4799     0683  075D               	addwf	ConvertToString@str^(0+128),w
  4800     0684  00E0               	movwf	(??_ConvertToString+1)^(0+128)
  4801     0685  085E               	movf	(ConvertToString@str+1)^(0+128),w
  4802     0686  00DF               	movwf	??_ConvertToString^(0+128)
  4803     0687  1803               	skipnc
  4804     0688  0ADF               	incf	??_ConvertToString^(0+128),f
  4805     0689  1683               	bsf	3,5	;RP0=1, select bank3
  4806     068A  1703               	bsf	3,6	;RP1=1, select bank3
  4807     068B  1FCB               	btfss	ConvertToString@i^(0+384),7
  4808     068C  2E90               	goto	u4030
  4809     068D  1683               	bsf	3,5	;RP0=1, select bank1
  4810     068E  1303               	bcf	3,6	;RP1=0, select bank1
  4811     068F  03DF               	decf	??_ConvertToString^(0+128),f
  4812     0690                     u4030:
  4813     0690  1683               	bsf	3,5	;RP0=1, select bank1
  4814     0691  1303               	bcf	3,6	;RP1=0, select bank1
  4815     0692  085F               	movf	??_ConvertToString^(0+128),w
  4816     0693  00E1               	movwf	((??_ConvertToString+1)^(0+128)+1)
  4817     0694  0860               	movf	(??_ConvertToString+1)^(0+128),w
  4818     0695  0084               	movwf	4
  4819     0696  1783               	bsf	3,7
  4820     0697  1C61               	btfss	(??_ConvertToString+2)^(0+128),0
  4821     0698  1383               	bcf	3,7
  4822     0699  1683               	bsf	3,5	;RP0=1, select bank3
  4823     069A  1703               	bsf	3,6	;RP1=1, select bank3
  4824     069B  0847               	movf	ConvertToString@temp^(0+384),w
  4825     069C  1683               	bsf	3,5	;RP0=1, select bank1
  4826     069D  1303               	bcf	3,6	;RP1=0, select bank1
  4827     069E  00CA               	movwf	___aldiv@divisor^(0+128)
  4828     069F  1683               	bsf	3,5	;RP0=1, select bank3
  4829     06A0  1703               	bsf	3,6	;RP1=1, select bank3
  4830     06A1  0848               	movf	(ConvertToString@temp+1)^(0+384),w
  4831     06A2  1683               	bsf	3,5	;RP0=1, select bank1
  4832     06A3  1303               	bcf	3,6	;RP1=0, select bank1
  4833     06A4  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4834     06A5  3000               	movlw	0
  4835     06A6  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4836     06A7  30FF               	movlw	255
  4837     06A8  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4838     06A9  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4839     06AA  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4840     06AB  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4841     06AC  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4842     06AD  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4843     06AE  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4844     06AF  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4845     06B0  0859               	movf	ConvertToString@n^(0+128),w
  4846     06B1  00CE               	movwf	___aldiv@dividend^(0+128)
  4847     06B2  120A  118A  2722  120A  118A  	fcall	___aldiv
  4848     06B7  1683               	bsf	3,5	;RP0=1, select bank1
  4849     06B8  1303               	bcf	3,6	;RP1=0, select bank1
  4850     06B9  084A               	movf	?___aldiv^(0+128),w
  4851     06BA  3E30               	addlw	48
  4852     06BB  0080               	movwf	0
  4853     06BC                     l3821:
  4854                           
  4855                           ;main.c: 447:         n = n % temp;
  4856     06BC  1683               	bsf	3,5	;RP0=1, select bank3
  4857     06BD  1703               	bsf	3,6	;RP1=1, select bank3
  4858     06BE  0847               	movf	ConvertToString@temp^(0+384),w
  4859     06BF  1683               	bsf	3,5	;RP0=1, select bank1
  4860     06C0  1303               	bcf	3,6	;RP1=0, select bank1
  4861     06C1  00A0               	movwf	___almod@divisor^(0+128)
  4862     06C2  1683               	bsf	3,5	;RP0=1, select bank3
  4863     06C3  1703               	bsf	3,6	;RP1=1, select bank3
  4864     06C4  0848               	movf	(ConvertToString@temp+1)^(0+384),w
  4865     06C5  1683               	bsf	3,5	;RP0=1, select bank1
  4866     06C6  1303               	bcf	3,6	;RP1=0, select bank1
  4867     06C7  00A1               	movwf	(___almod@divisor+1)^(0+128)
  4868     06C8  3000               	movlw	0
  4869     06C9  1BA1               	btfsc	(___almod@divisor+1)^(0+128),7
  4870     06CA  30FF               	movlw	255
  4871     06CB  00A2               	movwf	(___almod@divisor+2)^(0+128)
  4872     06CC  00A3               	movwf	(___almod@divisor+3)^(0+128)
  4873     06CD  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4874     06CE  00A7               	movwf	(___almod@dividend+3)^(0+128)
  4875     06CF  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4876     06D0  00A6               	movwf	(___almod@dividend+2)^(0+128)
  4877     06D1  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4878     06D2  00A5               	movwf	(___almod@dividend+1)^(0+128)
  4879     06D3  0859               	movf	ConvertToString@n^(0+128),w
  4880     06D4  00A4               	movwf	___almod@dividend^(0+128)
  4881     06D5  120A  158A  26DE  120A  118A  	fcall	___almod
  4882     06DA  1683               	bsf	3,5	;RP0=1, select bank1
  4883     06DB  1303               	bcf	3,6	;RP1=0, select bank1
  4884     06DC  0823               	movf	(?___almod+3)^(0+128),w
  4885     06DD  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4886     06DE  0822               	movf	(?___almod+2)^(0+128),w
  4887     06DF  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4888     06E0  0821               	movf	(?___almod+1)^(0+128),w
  4889     06E1  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4890     06E2  0820               	movf	?___almod^(0+128),w
  4891     06E3  00D9               	movwf	ConvertToString@n^(0+128)
  4892     06E4                     l3823:
  4893                           
  4894                           ;main.c: 448:         i++;
  4895     06E4  3001               	movlw	1
  4896     06E5  1683               	bsf	3,5	;RP0=1, select bank3
  4897     06E6  1703               	bsf	3,6	;RP1=1, select bank3
  4898     06E7  07CB               	addwf	ConvertToString@i^(0+384),f
  4899     06E8  1803               	skipnc
  4900     06E9  0ACC               	incf	(ConvertToString@i+1)^(0+384),f
  4901     06EA  3000               	movlw	0
  4902     06EB  07CC               	addwf	(ConvertToString@i+1)^(0+384),f
  4903     06EC                     l3825:
  4904                           
  4905                           ;main.c: 449:         j++;
  4906     06EC  3001               	movlw	1
  4907     06ED  07C9               	addwf	ConvertToString@j^(0+384),f
  4908     06EE  1803               	skipnc
  4909     06EF  0ACA               	incf	(ConvertToString@j+1)^(0+384),f
  4910     06F0  3000               	movlw	0
  4911     06F1  07CA               	addwf	(ConvertToString@j+1)^(0+384),f
  4912     06F2                     l3827:
  4913                           
  4914                           ;main.c: 441:     while(j < n_cifre)
  4915     06F2  1683               	bsf	3,5	;RP0=1, select bank3
  4916     06F3  1703               	bsf	3,6	;RP1=1, select bank3
  4917     06F4  084A               	movf	(ConvertToString@j+1)^(0+384),w
  4918     06F5  3A80               	xorlw	128
  4919     06F6  1683               	bsf	3,5	;RP0=1, select bank1
  4920     06F7  1303               	bcf	3,6	;RP1=0, select bank1
  4921     06F8  00DF               	movwf	??_ConvertToString^(0+128)
  4922     06F9  3080               	movlw	128
  4923     06FA  025F               	subwf	??_ConvertToString^(0+128),w
  4924     06FB  1D03               	skipz
  4925     06FC  2F01               	goto	u4045
  4926     06FD  1683               	bsf	3,5	;RP0=1, select bank3
  4927     06FE  1703               	bsf	3,6	;RP1=1, select bank3
  4928     06FF  084D               	movf	ConvertToString@n_cifre^(0+384),w
  4929     0700  0249               	subwf	ConvertToString@j^(0+384),w
  4930     0701                     u4045:
  4931     0701  1C03               	skipc
  4932     0702  2F04               	goto	u4041
  4933     0703  2F05               	goto	u4040
  4934     0704                     u4041:
  4935     0704  2E66               	goto	l3817
  4936     0705                     u4040:
  4937     0705                     l3829:
  4938                           
  4939                           ;main.c: 452:     str[i] = '\0';
  4940     0705  1683               	bsf	3,5	;RP0=1, select bank3
  4941     0706  1703               	bsf	3,6	;RP1=1, select bank3
  4942     0707  084B               	movf	ConvertToString@i^(0+384),w
  4943     0708  1683               	bsf	3,5	;RP0=1, select bank1
  4944     0709  1303               	bcf	3,6	;RP1=0, select bank1
  4945     070A  075D               	addwf	ConvertToString@str^(0+128),w
  4946     070B  00E0               	movwf	(??_ConvertToString+1)^(0+128)
  4947     070C  085E               	movf	(ConvertToString@str+1)^(0+128),w
  4948     070D  00DF               	movwf	??_ConvertToString^(0+128)
  4949     070E  1803               	skipnc
  4950     070F  0ADF               	incf	??_ConvertToString^(0+128),f
  4951     0710  1683               	bsf	3,5	;RP0=1, select bank3
  4952     0711  1703               	bsf	3,6	;RP1=1, select bank3
  4953     0712  1FCB               	btfss	ConvertToString@i^(0+384),7
  4954     0713  2F17               	goto	u4050
  4955     0714  1683               	bsf	3,5	;RP0=1, select bank1
  4956     0715  1303               	bcf	3,6	;RP1=0, select bank1
  4957     0716  03DF               	decf	??_ConvertToString^(0+128),f
  4958     0717                     u4050:
  4959     0717  1683               	bsf	3,5	;RP0=1, select bank1
  4960     0718  1303               	bcf	3,6	;RP1=0, select bank1
  4961     0719  085F               	movf	??_ConvertToString^(0+128),w
  4962     071A  00E1               	movwf	((??_ConvertToString+1)^(0+128)+1)
  4963     071B  0860               	movf	(??_ConvertToString+1)^(0+128),w
  4964     071C  0084               	movwf	4
  4965     071D  1783               	bsf	3,7
  4966     071E  1C61               	btfss	(??_ConvertToString+2)^(0+128),0
  4967     071F  1383               	bcf	3,7
  4968     0720  0180               	clrf	0
  4969     0721                     l209:
  4970     0721  0008               	return
  4971     0722                     __end_of_ConvertToString:
  4972                           
  4973                           	psect	text14
  4974     177E                     __ptext14:	
  4975 ;; *************** function _pow *****************
  4976 ;; Defined at:
  4977 ;;		line 413 in file "main.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  b               1    wreg     unsigned char 
  4980 ;;  exp             1   33[BANK1 ] unsigned char 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  b               1   37[BANK1 ] unsigned char 
  4983 ;;  i               2   38[BANK1 ] int 
  4984 ;;  n               2   40[BANK1 ] int 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  2   33[BANK1 ] int 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0, pclath, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4994 ;;      Params:         0       0       2       0       0
  4995 ;;      Locals:         0       0       5       0       0
  4996 ;;      Temps:          0       0       2       0       0
  4997 ;;      Totals:         0       0       9       0       0
  4998 ;;Total ram usage:        9 bytes
  4999 ;; Hardware stack levels used: 1
  5000 ;; Hardware stack levels required when called: 5
  5001 ;; This function calls:
  5002 ;;		___wmul
  5003 ;; This function is called by:
  5004 ;;		_ConvertToString
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008     177E                     _pow:	
  5009                           ;psect for function _pow
  5010                           
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  5014                           ;pow@b stored from wreg
  5015     177E  1683               	bsf	3,5	;RP0=1, select bank1
  5016     177F  1303               	bcf	3,6	;RP1=0, select bank1
  5017     1780  00C5               	movwf	pow@b^(0+128)
  5018     1781                     l2975:
  5019                           
  5020                           ;main.c: 413: int pow(char b, char exp);main.c: 414: {;main.c: 415:     int n = 1;
  5021     1781  3001               	movlw	1
  5022     1782  00C8               	movwf	pow@n^(0+128)
  5023     1783  3000               	movlw	0
  5024     1784  00C9               	movwf	(pow@n^(0+128)+1)
  5025     1785                     l2977:
  5026                           
  5027                           ;main.c: 416:     for(int i = 0; i < exp; i++)
  5028     1785  01C6               	clrf	pow@i^(0+128)
  5029     1786  01C7               	clrf	(pow@i+1)^(0+128)
  5030     1787  2FA6               	goto	l2983
  5031     1788                     l2979:
  5032                           
  5033                           ;main.c: 417:     {;main.c: 418:         n *= b;
  5034     1788  1683               	bsf	3,5	;RP0=1, select bank1
  5035     1789  1303               	bcf	3,6	;RP1=0, select bank1
  5036     178A  0845               	movf	pow@b^(0+128),w
  5037     178B  00C3               	movwf	??_pow^(0+128)
  5038     178C  01C4               	clrf	(??_pow^(0+128)+1)
  5039     178D  0843               	movf	??_pow^(0+128),w
  5040     178E  00BB               	movwf	___wmul@multiplier^(0+128)
  5041     178F  0844               	movf	(??_pow+1)^(0+128),w
  5042     1790  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  5043     1791  0849               	movf	(pow@n+1)^(0+128),w
  5044     1792  00BE               	movwf	(___wmul@multiplicand+1)^(0+128)
  5045     1793  0848               	movf	pow@n^(0+128),w
  5046     1794  00BD               	movwf	___wmul@multiplicand^(0+128)
  5047     1795  160A  118A  26BF  160A  118A  	fcall	___wmul
  5048     179A  1683               	bsf	3,5	;RP0=1, select bank1
  5049     179B  1303               	bcf	3,6	;RP1=0, select bank1
  5050     179C  083C               	movf	(?___wmul+1)^(0+128),w
  5051     179D  00C9               	movwf	(pow@n+1)^(0+128)
  5052     179E  083B               	movf	?___wmul^(0+128),w
  5053     179F  00C8               	movwf	pow@n^(0+128)
  5054     17A0                     l2981:
  5055                           
  5056                           ;main.c: 419:     }
  5057     17A0  3001               	movlw	1
  5058     17A1  07C6               	addwf	pow@i^(0+128),f
  5059     17A2  1803               	skipnc
  5060     17A3  0AC7               	incf	(pow@i+1)^(0+128),f
  5061     17A4  3000               	movlw	0
  5062     17A5  07C7               	addwf	(pow@i+1)^(0+128),f
  5063     17A6                     l2983:
  5064     17A6  0847               	movf	(pow@i+1)^(0+128),w
  5065     17A7  3A80               	xorlw	128
  5066     17A8  00C3               	movwf	??_pow^(0+128)
  5067     17A9  3080               	movlw	128
  5068     17AA  0243               	subwf	??_pow^(0+128),w
  5069     17AB  1D03               	skipz
  5070     17AC  2FAF               	goto	u2885
  5071     17AD  0841               	movf	pow@exp^(0+128),w
  5072     17AE  0246               	subwf	pow@i^(0+128),w
  5073     17AF                     u2885:
  5074     17AF  1C03               	skipc
  5075     17B0  2FB2               	goto	u2881
  5076     17B1  2FB3               	goto	u2880
  5077     17B2                     u2881:
  5078     17B2  2F88               	goto	l2979
  5079     17B3                     u2880:
  5080     17B3                     l2985:
  5081                           
  5082                           ;main.c: 420:     return n;
  5083     17B3  1683               	bsf	3,5	;RP0=1, select bank1
  5084     17B4  1303               	bcf	3,6	;RP1=0, select bank1
  5085     17B5  0849               	movf	(pow@n+1)^(0+128),w
  5086     17B6  00C2               	movwf	(?_pow+1)^(0+128)
  5087     17B7  0848               	movf	pow@n^(0+128),w
  5088     17B8  00C1               	movwf	?_pow^(0+128)
  5089     17B9                     l199:
  5090     17B9  0008               	return
  5091     17BA                     __end_of_pow:
  5092                           
  5093                           	psect	text15
  5094     0EDE                     __ptext15:	
  5095 ;; *************** function ___almod *****************
  5096 ;; Defined at:
  5097 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  divisor         4    0[BANK1 ] long 
  5100 ;;  dividend        4    4[BANK1 ] long 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;  sign            1   10[BANK1 ] unsigned char 
  5103 ;;  counter         1    9[BANK1 ] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  4    0[BANK1 ] long 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5113 ;;      Params:         0       0       8       0       0
  5114 ;;      Locals:         0       0       2       0       0
  5115 ;;      Temps:          0       0       1       0       0
  5116 ;;      Totals:         0       0      11       0       0
  5117 ;;Total ram usage:       11 bytes
  5118 ;; Hardware stack levels used: 1
  5119 ;; Hardware stack levels required when called: 4
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_ConvertToString
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127     0EDE                     ___almod:	
  5128                           ;psect for function ___almod
  5129                           
  5130     0EDE                     l3053:	
  5131                           ;incstack = 0
  5132                           ; Regs used in ___almod: [wreg+status,2+status,0]
  5133                           
  5134     0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  5135     0EDF  1303               	bcf	3,6	;RP1=0, select bank1
  5136     0EE0  01AA               	clrf	___almod@sign^(0+128)
  5137     0EE1                     l3055:
  5138     0EE1  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  5139     0EE2  2EE4               	goto	u3061
  5140     0EE3  2EE5               	goto	u3060
  5141     0EE4                     u3061:
  5142     0EE4  2EF2               	goto	l529
  5143     0EE5                     u3060:
  5144     0EE5                     l3057:
  5145     0EE5  09A4               	comf	___almod@dividend^(0+128),f
  5146     0EE6  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5147     0EE7  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5148     0EE8  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5149     0EE9  0AA4               	incf	___almod@dividend^(0+128),f
  5150     0EEA  1903               	skipnz
  5151     0EEB  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5152     0EEC  1903               	skipnz
  5153     0EED  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5154     0EEE  1903               	skipnz
  5155     0EEF  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5156     0EF0  01AA               	clrf	___almod@sign^(0+128)
  5157     0EF1  0AAA               	incf	___almod@sign^(0+128),f
  5158     0EF2                     l529:
  5159     0EF2  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5160     0EF3  2EF5               	goto	u3071
  5161     0EF4  2EF6               	goto	u3070
  5162     0EF5                     u3071:
  5163     0EF5  2F01               	goto	l3061
  5164     0EF6                     u3070:
  5165     0EF6                     l3059:
  5166     0EF6  09A0               	comf	___almod@divisor^(0+128),f
  5167     0EF7  09A1               	comf	(___almod@divisor+1)^(0+128),f
  5168     0EF8  09A2               	comf	(___almod@divisor+2)^(0+128),f
  5169     0EF9  09A3               	comf	(___almod@divisor+3)^(0+128),f
  5170     0EFA  0AA0               	incf	___almod@divisor^(0+128),f
  5171     0EFB  1903               	skipnz
  5172     0EFC  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  5173     0EFD  1903               	skipnz
  5174     0EFE  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  5175     0EFF  1903               	skipnz
  5176     0F00  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  5177     0F01                     l3061:
  5178     0F01  0823               	movf	(___almod@divisor+3)^(0+128),w
  5179     0F02  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  5180     0F03  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  5181     0F04  0420               	iorwf	___almod@divisor^(0+128),w
  5182     0F05  1903               	skipnz
  5183     0F06  2F08               	goto	u3081
  5184     0F07  2F09               	goto	u3080
  5185     0F08                     u3081:
  5186     0F08  2F4C               	goto	l3077
  5187     0F09                     u3080:
  5188     0F09                     l3063:
  5189     0F09  01A9               	clrf	___almod@counter^(0+128)
  5190     0F0A  0AA9               	incf	___almod@counter^(0+128),f
  5191     0F0B  2F19               	goto	l3067
  5192     0F0C                     l3065:
  5193     0F0C  3001               	movlw	1
  5194     0F0D  00A8               	movwf	??___almod^(0+128)
  5195     0F0E                     u3095:
  5196     0F0E  1003               	clrc
  5197     0F0F  0DA0               	rlf	___almod@divisor^(0+128),f
  5198     0F10  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  5199     0F11  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  5200     0F12  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  5201     0F13  0BA8               	decfsz	??___almod^(0+128),f
  5202     0F14  2F0E               	goto	u3095
  5203     0F15  3001               	movlw	1
  5204     0F16  00A8               	movwf	??___almod^(0+128)
  5205     0F17  0828               	movf	??___almod^(0+128),w
  5206     0F18  07A9               	addwf	___almod@counter^(0+128),f
  5207     0F19                     l3067:
  5208     0F19  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5209     0F1A  2F1C               	goto	u3101
  5210     0F1B  2F1D               	goto	u3100
  5211     0F1C                     u3101:
  5212     0F1C  2F0C               	goto	l3065
  5213     0F1D                     u3100:
  5214     0F1D                     l3069:
  5215     0F1D  0823               	movf	(___almod@divisor+3)^(0+128),w
  5216     0F1E  0227               	subwf	(___almod@dividend+3)^(0+128),w
  5217     0F1F  1D03               	skipz
  5218     0F20  2F2B               	goto	u3115
  5219     0F21  0822               	movf	(___almod@divisor+2)^(0+128),w
  5220     0F22  0226               	subwf	(___almod@dividend+2)^(0+128),w
  5221     0F23  1D03               	skipz
  5222     0F24  2F2B               	goto	u3115
  5223     0F25  0821               	movf	(___almod@divisor+1)^(0+128),w
  5224     0F26  0225               	subwf	(___almod@dividend+1)^(0+128),w
  5225     0F27  1D03               	skipz
  5226     0F28  2F2B               	goto	u3115
  5227     0F29  0820               	movf	___almod@divisor^(0+128),w
  5228     0F2A  0224               	subwf	___almod@dividend^(0+128),w
  5229     0F2B                     u3115:
  5230     0F2B  1C03               	skipc
  5231     0F2C  2F2E               	goto	u3111
  5232     0F2D  2F2F               	goto	u3110
  5233     0F2E                     u3111:
  5234     0F2E  2F3D               	goto	l3073
  5235     0F2F                     u3110:
  5236     0F2F                     l3071:
  5237     0F2F  0820               	movf	___almod@divisor^(0+128),w
  5238     0F30  02A4               	subwf	___almod@dividend^(0+128),f
  5239     0F31  0821               	movf	(___almod@divisor+1)^(0+128),w
  5240     0F32  1C03               	skipc
  5241     0F33  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  5242     0F34  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  5243     0F35  0822               	movf	(___almod@divisor+2)^(0+128),w
  5244     0F36  1C03               	skipc
  5245     0F37  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  5246     0F38  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  5247     0F39  0823               	movf	(___almod@divisor+3)^(0+128),w
  5248     0F3A  1C03               	skipc
  5249     0F3B  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  5250     0F3C  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  5251     0F3D                     l3073:
  5252     0F3D  3001               	movlw	1
  5253     0F3E                     u3125:
  5254     0F3E  1003               	clrc
  5255     0F3F  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  5256     0F40  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  5257     0F41  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  5258     0F42  0CA0               	rrf	___almod@divisor^(0+128),f
  5259     0F43  3EFF               	addlw	-1
  5260     0F44  1D03               	skipz
  5261     0F45  2F3E               	goto	u3125
  5262     0F46                     l3075:
  5263     0F46  3001               	movlw	1
  5264     0F47  02A9               	subwf	___almod@counter^(0+128),f
  5265     0F48  1D03               	btfss	3,2
  5266     0F49  2F4B               	goto	u3131
  5267     0F4A  2F4C               	goto	u3130
  5268     0F4B                     u3131:
  5269     0F4B  2F1D               	goto	l3069
  5270     0F4C                     u3130:
  5271     0F4C                     l3077:
  5272     0F4C  082A               	movf	___almod@sign^(0+128),w
  5273     0F4D  1903               	btfsc	3,2
  5274     0F4E  2F50               	goto	u3141
  5275     0F4F  2F51               	goto	u3140
  5276     0F50                     u3141:
  5277     0F50  2F5C               	goto	l3081
  5278     0F51                     u3140:
  5279     0F51                     l3079:
  5280     0F51  09A4               	comf	___almod@dividend^(0+128),f
  5281     0F52  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5282     0F53  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5283     0F54  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5284     0F55  0AA4               	incf	___almod@dividend^(0+128),f
  5285     0F56  1903               	skipnz
  5286     0F57  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5287     0F58  1903               	skipnz
  5288     0F59  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5289     0F5A  1903               	skipnz
  5290     0F5B  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5291     0F5C                     l3081:
  5292     0F5C  0827               	movf	(___almod@dividend+3)^(0+128),w
  5293     0F5D  00A3               	movwf	(?___almod+3)^(0+128)
  5294     0F5E  0826               	movf	(___almod@dividend+2)^(0+128),w
  5295     0F5F  00A2               	movwf	(?___almod+2)^(0+128)
  5296     0F60  0825               	movf	(___almod@dividend+1)^(0+128),w
  5297     0F61  00A1               	movwf	(?___almod+1)^(0+128)
  5298     0F62  0824               	movf	___almod@dividend^(0+128),w
  5299     0F63  00A0               	movwf	?___almod^(0+128)
  5300     0F64                     l539:
  5301     0F64  0008               	return
  5302     0F65                     __end_of___almod:
  5303                           
  5304                           	psect	text16
  5305     0722                     __ptext16:	
  5306 ;; *************** function ___aldiv *****************
  5307 ;; Defined at:
  5308 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;  divisor         4   42[BANK1 ] long 
  5311 ;;  dividend        4   46[BANK1 ] long 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  quotient        4   53[BANK1 ] long 
  5314 ;;  sign            1   52[BANK1 ] unsigned char 
  5315 ;;  counter         1   51[BANK1 ] unsigned char 
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  4   42[BANK1 ] long 
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5325 ;;      Params:         0       0       8       0       0
  5326 ;;      Locals:         0       0       6       0       0
  5327 ;;      Temps:          0       0       1       0       0
  5328 ;;      Totals:         0       0      15       0       0
  5329 ;;Total ram usage:       15 bytes
  5330 ;; Hardware stack levels used: 1
  5331 ;; Hardware stack levels required when called: 4
  5332 ;; This function calls:
  5333 ;;		Nothing
  5334 ;; This function is called by:
  5335 ;;		_ConvertToString
  5336 ;;		_UART_init
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340     0722                     ___aldiv:	
  5341                           ;psect for function ___aldiv
  5342                           
  5343     0722                     l3013:	
  5344                           ;incstack = 0
  5345                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5346                           
  5347     0722  1683               	bsf	3,5	;RP0=1, select bank1
  5348     0723  1303               	bcf	3,6	;RP1=0, select bank1
  5349     0724  01D4               	clrf	___aldiv@sign^(0+128)
  5350     0725                     l3015:
  5351     0725  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5352     0726  2F28               	goto	u2961
  5353     0727  2F29               	goto	u2960
  5354     0728                     u2961:
  5355     0728  2F36               	goto	l516
  5356     0729                     u2960:
  5357     0729                     l3017:
  5358     0729  09CA               	comf	___aldiv@divisor^(0+128),f
  5359     072A  09CB               	comf	(___aldiv@divisor+1)^(0+128),f
  5360     072B  09CC               	comf	(___aldiv@divisor+2)^(0+128),f
  5361     072C  09CD               	comf	(___aldiv@divisor+3)^(0+128),f
  5362     072D  0ACA               	incf	___aldiv@divisor^(0+128),f
  5363     072E  1903               	skipnz
  5364     072F  0ACB               	incf	(___aldiv@divisor+1)^(0+128),f
  5365     0730  1903               	skipnz
  5366     0731  0ACC               	incf	(___aldiv@divisor+2)^(0+128),f
  5367     0732  1903               	skipnz
  5368     0733  0ACD               	incf	(___aldiv@divisor+3)^(0+128),f
  5369     0734  01D4               	clrf	___aldiv@sign^(0+128)
  5370     0735  0AD4               	incf	___aldiv@sign^(0+128),f
  5371     0736                     l516:
  5372     0736  1FD1               	btfss	(___aldiv@dividend+3)^(0+128),7
  5373     0737  2F39               	goto	u2971
  5374     0738  2F3A               	goto	u2970
  5375     0739                     u2971:
  5376     0739  2F49               	goto	l3023
  5377     073A                     u2970:
  5378     073A                     l3019:
  5379     073A  09CE               	comf	___aldiv@dividend^(0+128),f
  5380     073B  09CF               	comf	(___aldiv@dividend+1)^(0+128),f
  5381     073C  09D0               	comf	(___aldiv@dividend+2)^(0+128),f
  5382     073D  09D1               	comf	(___aldiv@dividend+3)^(0+128),f
  5383     073E  0ACE               	incf	___aldiv@dividend^(0+128),f
  5384     073F  1903               	skipnz
  5385     0740  0ACF               	incf	(___aldiv@dividend+1)^(0+128),f
  5386     0741  1903               	skipnz
  5387     0742  0AD0               	incf	(___aldiv@dividend+2)^(0+128),f
  5388     0743  1903               	skipnz
  5389     0744  0AD1               	incf	(___aldiv@dividend+3)^(0+128),f
  5390     0745                     l3021:
  5391     0745  3001               	movlw	1
  5392     0746  00D2               	movwf	??___aldiv^(0+128)
  5393     0747  0852               	movf	??___aldiv^(0+128),w
  5394     0748  06D4               	xorwf	___aldiv@sign^(0+128),f
  5395     0749                     l3023:
  5396     0749  3000               	movlw	0
  5397     074A  00D8               	movwf	(___aldiv@quotient+3)^(0+128)
  5398     074B  3000               	movlw	0
  5399     074C  00D7               	movwf	(___aldiv@quotient+2)^(0+128)
  5400     074D  3000               	movlw	0
  5401     074E  00D6               	movwf	(___aldiv@quotient+1)^(0+128)
  5402     074F  3000               	movlw	0
  5403     0750  00D5               	movwf	___aldiv@quotient^(0+128)
  5404     0751                     l3025:
  5405     0751  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5406     0752  044C               	iorwf	(___aldiv@divisor+2)^(0+128),w
  5407     0753  044B               	iorwf	(___aldiv@divisor+1)^(0+128),w
  5408     0754  044A               	iorwf	___aldiv@divisor^(0+128),w
  5409     0755  1903               	skipnz
  5410     0756  2F58               	goto	u2981
  5411     0757  2F59               	goto	u2980
  5412     0758                     u2981:
  5413     0758  2FA6               	goto	l3045
  5414     0759                     u2980:
  5415     0759                     l3027:
  5416     0759  01D3               	clrf	___aldiv@counter^(0+128)
  5417     075A  0AD3               	incf	___aldiv@counter^(0+128),f
  5418     075B  2F69               	goto	l3031
  5419     075C                     l3029:
  5420     075C  3001               	movlw	1
  5421     075D  00D2               	movwf	??___aldiv^(0+128)
  5422     075E                     u2995:
  5423     075E  1003               	clrc
  5424     075F  0DCA               	rlf	___aldiv@divisor^(0+128),f
  5425     0760  0DCB               	rlf	(___aldiv@divisor+1)^(0+128),f
  5426     0761  0DCC               	rlf	(___aldiv@divisor+2)^(0+128),f
  5427     0762  0DCD               	rlf	(___aldiv@divisor+3)^(0+128),f
  5428     0763  0BD2               	decfsz	??___aldiv^(0+128),f
  5429     0764  2F5E               	goto	u2995
  5430     0765  3001               	movlw	1
  5431     0766  00D2               	movwf	??___aldiv^(0+128)
  5432     0767  0852               	movf	??___aldiv^(0+128),w
  5433     0768  07D3               	addwf	___aldiv@counter^(0+128),f
  5434     0769                     l3031:
  5435     0769  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5436     076A  2F6C               	goto	u3001
  5437     076B  2F6D               	goto	u3000
  5438     076C                     u3001:
  5439     076C  2F5C               	goto	l3029
  5440     076D                     u3000:
  5441     076D                     l3033:
  5442     076D  3001               	movlw	1
  5443     076E  00D2               	movwf	??___aldiv^(0+128)
  5444     076F                     u3015:
  5445     076F  1003               	clrc
  5446     0770  0DD5               	rlf	___aldiv@quotient^(0+128),f
  5447     0771  0DD6               	rlf	(___aldiv@quotient+1)^(0+128),f
  5448     0772  0DD7               	rlf	(___aldiv@quotient+2)^(0+128),f
  5449     0773  0DD8               	rlf	(___aldiv@quotient+3)^(0+128),f
  5450     0774  0BD2               	decfsz	??___aldiv^(0+128),f
  5451     0775  2F6F               	goto	u3015
  5452     0776                     l3035:
  5453     0776  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5454     0777  0251               	subwf	(___aldiv@dividend+3)^(0+128),w
  5455     0778  1D03               	skipz
  5456     0779  2F84               	goto	u3025
  5457     077A  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5458     077B  0250               	subwf	(___aldiv@dividend+2)^(0+128),w
  5459     077C  1D03               	skipz
  5460     077D  2F84               	goto	u3025
  5461     077E  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5462     077F  024F               	subwf	(___aldiv@dividend+1)^(0+128),w
  5463     0780  1D03               	skipz
  5464     0781  2F84               	goto	u3025
  5465     0782  084A               	movf	___aldiv@divisor^(0+128),w
  5466     0783  024E               	subwf	___aldiv@dividend^(0+128),w
  5467     0784                     u3025:
  5468     0784  1C03               	skipc
  5469     0785  2F87               	goto	u3021
  5470     0786  2F88               	goto	u3020
  5471     0787                     u3021:
  5472     0787  2F97               	goto	l3041
  5473     0788                     u3020:
  5474     0788                     l3037:
  5475     0788  084A               	movf	___aldiv@divisor^(0+128),w
  5476     0789  02CE               	subwf	___aldiv@dividend^(0+128),f
  5477     078A  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5478     078B  1C03               	skipc
  5479     078C  0F4B               	incfsz	(___aldiv@divisor+1)^(0+128),w
  5480     078D  02CF               	subwf	(___aldiv@dividend+1)^(0+128),f
  5481     078E  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5482     078F  1C03               	skipc
  5483     0790  0F4C               	incfsz	(___aldiv@divisor+2)^(0+128),w
  5484     0791  02D0               	subwf	(___aldiv@dividend+2)^(0+128),f
  5485     0792  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5486     0793  1C03               	skipc
  5487     0794  0F4D               	incfsz	(___aldiv@divisor+3)^(0+128),w
  5488     0795  02D1               	subwf	(___aldiv@dividend+3)^(0+128),f
  5489     0796                     l3039:
  5490     0796  1455               	bsf	___aldiv@quotient^(0+128),0
  5491     0797                     l3041:
  5492     0797  3001               	movlw	1
  5493     0798                     u3035:
  5494     0798  1003               	clrc
  5495     0799  0CCD               	rrf	(___aldiv@divisor+3)^(0+128),f
  5496     079A  0CCC               	rrf	(___aldiv@divisor+2)^(0+128),f
  5497     079B  0CCB               	rrf	(___aldiv@divisor+1)^(0+128),f
  5498     079C  0CCA               	rrf	___aldiv@divisor^(0+128),f
  5499     079D  3EFF               	addlw	-1
  5500     079E  1D03               	skipz
  5501     079F  2F98               	goto	u3035
  5502     07A0                     l3043:
  5503     07A0  3001               	movlw	1
  5504     07A1  02D3               	subwf	___aldiv@counter^(0+128),f
  5505     07A2  1D03               	btfss	3,2
  5506     07A3  2FA5               	goto	u3041
  5507     07A4  2FA6               	goto	u3040
  5508     07A5                     u3041:
  5509     07A5  2F6D               	goto	l3033
  5510     07A6                     u3040:
  5511     07A6                     l3045:
  5512     07A6  0854               	movf	___aldiv@sign^(0+128),w
  5513     07A7  1903               	btfsc	3,2
  5514     07A8  2FAA               	goto	u3051
  5515     07A9  2FAB               	goto	u3050
  5516     07AA                     u3051:
  5517     07AA  2FB6               	goto	l3049
  5518     07AB                     u3050:
  5519     07AB                     l3047:
  5520     07AB  09D5               	comf	___aldiv@quotient^(0+128),f
  5521     07AC  09D6               	comf	(___aldiv@quotient+1)^(0+128),f
  5522     07AD  09D7               	comf	(___aldiv@quotient+2)^(0+128),f
  5523     07AE  09D8               	comf	(___aldiv@quotient+3)^(0+128),f
  5524     07AF  0AD5               	incf	___aldiv@quotient^(0+128),f
  5525     07B0  1903               	skipnz
  5526     07B1  0AD6               	incf	(___aldiv@quotient+1)^(0+128),f
  5527     07B2  1903               	skipnz
  5528     07B3  0AD7               	incf	(___aldiv@quotient+2)^(0+128),f
  5529     07B4  1903               	skipnz
  5530     07B5  0AD8               	incf	(___aldiv@quotient+3)^(0+128),f
  5531     07B6                     l3049:
  5532     07B6  0858               	movf	(___aldiv@quotient+3)^(0+128),w
  5533     07B7  00CD               	movwf	(?___aldiv+3)^(0+128)
  5534     07B8  0857               	movf	(___aldiv@quotient+2)^(0+128),w
  5535     07B9  00CC               	movwf	(?___aldiv+2)^(0+128)
  5536     07BA  0856               	movf	(___aldiv@quotient+1)^(0+128),w
  5537     07BB  00CB               	movwf	(?___aldiv+1)^(0+128)
  5538     07BC  0855               	movf	___aldiv@quotient^(0+128),w
  5539     07BD  00CA               	movwf	?___aldiv^(0+128)
  5540     07BE                     l526:
  5541     07BE  0008               	return
  5542     07BF                     __end_of___aldiv:
  5543                           
  5544                           	psect	text17
  5545     0E5F                     __ptext17:	
  5546 ;; *************** function _UART_TxString *****************
  5547 ;; Defined at:
  5548 ;;		line 788 in file "main.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  str             1    wreg     PTR const unsigned char 
  5551 ;;		 -> packet(15), 
  5552 ;;  is_ACK          1   33[BANK1 ] unsigned char 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  str             1   37[BANK1 ] PTR const unsigned char 
  5555 ;;		 -> packet(15), 
  5556 ;;  n               2   35[BANK1 ] unsigned int 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5566 ;;      Params:         0       0       1       0       0
  5567 ;;      Locals:         0       0       3       0       0
  5568 ;;      Temps:          0       0       1       0       0
  5569 ;;      Totals:         0       0       5       0       0
  5570 ;;Total ram usage:        5 bytes
  5571 ;; Hardware stack levels used: 1
  5572 ;; Hardware stack levels required when called: 6
  5573 ;; This function calls:
  5574 ;;		_UART_TxChar
  5575 ;;		___awmod
  5576 ;;		___wmul
  5577 ;;		_rand
  5578 ;;		_srand
  5579 ;; This function is called by:
  5580 ;;		_main
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584     0E5F                     _UART_TxString:	
  5585                           ;psect for function _UART_TxString
  5586                           
  5587                           
  5588                           ;incstack = 0
  5589                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5590                           ;UART_TxString@str stored from wreg
  5591     0E5F  1683               	bsf	3,5	;RP0=1, select bank1
  5592     0E60  1303               	bcf	3,6	;RP1=0, select bank1
  5593     0E61  00C5               	movwf	UART_TxString@str^(0+128)
  5594     0E62                     l3477:
  5595                           
  5596                           ;main.c: 788: void UART_TxString(const char *str, char is_ACK);main.c: 789: {;main.c: 79
      +                          0:     unsigned int n = 0;
  5597     0E62  01C3               	clrf	UART_TxString@n^(0+128)
  5598     0E63  01C4               	clrf	(UART_TxString@n+1)^(0+128)
  5599                           
  5600                           ;main.c: 792:     while(str[n] != '\0')
  5601     0E64  2E78               	goto	l3483
  5602     0E65                     l3479:
  5603                           
  5604                           ;main.c: 793:     {;main.c: 794:         UART_TxChar(str[n]);
  5605     0E65  0843               	movf	UART_TxString@n^(0+128),w
  5606     0E66  0745               	addwf	UART_TxString@str^(0+128),w
  5607     0E67  00C2               	movwf	??_UART_TxString^(0+128)
  5608     0E68  0842               	movf	??_UART_TxString^(0+128),w
  5609     0E69  0084               	movwf	4
  5610     0E6A  0800               	movf	0,w
  5611     0E6B  160A  118A  2662  120A  158A  	fcall	_UART_TxChar
  5612     0E70                     l3481:
  5613                           
  5614                           ;main.c: 795:         n++;
  5615     0E70  3001               	movlw	1
  5616     0E71  1683               	bsf	3,5	;RP0=1, select bank1
  5617     0E72  1303               	bcf	3,6	;RP1=0, select bank1
  5618     0E73  07C3               	addwf	UART_TxString@n^(0+128),f
  5619     0E74  1803               	skipnc
  5620     0E75  0AC4               	incf	(UART_TxString@n+1)^(0+128),f
  5621     0E76  3000               	movlw	0
  5622     0E77  07C4               	addwf	(UART_TxString@n+1)^(0+128),f
  5623     0E78                     l3483:
  5624                           
  5625                           ;main.c: 792:     while(str[n] != '\0')
  5626     0E78  0843               	movf	UART_TxString@n^(0+128),w
  5627     0E79  0745               	addwf	UART_TxString@str^(0+128),w
  5628     0E7A  00C2               	movwf	??_UART_TxString^(0+128)
  5629     0E7B  0842               	movf	??_UART_TxString^(0+128),w
  5630     0E7C  0084               	movwf	4
  5631     0E7D  1783               	bsf	3,7	;select IRP bank2
  5632     0E7E  0800               	movf	0,w
  5633     0E7F  1D03               	btfss	3,2
  5634     0E80  2E82               	goto	u3741
  5635     0E81  2E83               	goto	u3740
  5636     0E82                     u3741:
  5637     0E82  2E65               	goto	l3479
  5638     0E83                     u3740:
  5639     0E83                     l3485:
  5640                           
  5641                           ;main.c: 798:     if(is_ACK == 0)
  5642     0E83  0841               	movf	UART_TxString@is_ACK^(0+128),w
  5643     0E84  1D03               	btfss	3,2
  5644     0E85  2E87               	goto	u3751
  5645     0E86  2E88               	goto	u3750
  5646     0E87                     u3751:
  5647     0E87  2EDD               	goto	l318
  5648     0E88                     u3750:
  5649     0E88                     l3487:
  5650                           
  5651                           ;main.c: 799:     {;main.c: 802:         srand(milliseconds);
  5652     0E88  1283               	bcf	3,5	;RP0=0, select bank0
  5653     0E89  1303               	bcf	3,6	;RP1=0, select bank0
  5654     0E8A  0841               	movf	_milliseconds+1,w
  5655     0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  5656     0E8C  1303               	bcf	3,6	;RP1=0, select bank1
  5657     0E8D  00A1               	movwf	(srand@x+1)^(0+128)
  5658     0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  5659     0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  5660     0E90  0840               	movf	_milliseconds,w
  5661     0E91  1683               	bsf	3,5	;RP0=1, select bank1
  5662     0E92  1303               	bcf	3,6	;RP1=0, select bank1
  5663     0E93  00A0               	movwf	srand@x^(0+128)
  5664     0E94  160A  118A  263E  120A  158A  	fcall	_srand
  5665     0E99                     l3489:
  5666                           
  5667                           ;main.c: 803:         milliseconds = 0;
  5668     0E99  3000               	movlw	0
  5669     0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  5670     0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  5671     0E9C  00C3               	movwf	_milliseconds+3
  5672     0E9D  3000               	movlw	0
  5673     0E9E  00C2               	movwf	_milliseconds+2
  5674     0E9F  3000               	movlw	0
  5675     0EA0  00C1               	movwf	_milliseconds+1
  5676     0EA1  3000               	movlw	0
  5677     0EA2  00C0               	movwf	_milliseconds
  5678     0EA3                     l3491:
  5679                           
  5680                           ;main.c: 805:         seconds = ((rand()%10)+5) * 250;
  5681     0EA3  300A               	movlw	10
  5682     0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  5683     0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  5684     0EA6  00B4               	movwf	___awmod@divisor^(0+128)
  5685     0EA7  3000               	movlw	0
  5686     0EA8  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  5687     0EA9  120A  158A  248A  120A  158A  	fcall	_rand
  5688     0EAE  1683               	bsf	3,5	;RP0=1, select bank1
  5689     0EAF  1303               	bcf	3,6	;RP1=0, select bank1
  5690     0EB0  082E               	movf	(?_rand+1)^(0+128),w
  5691     0EB1  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  5692     0EB2  082D               	movf	?_rand^(0+128),w
  5693     0EB3  00B6               	movwf	___awmod@dividend^(0+128)
  5694     0EB4  120A  158A  22FB  120A  158A  	fcall	___awmod
  5695     0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  5696     0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  5697     0EBB  0834               	movf	?___awmod^(0+128),w
  5698     0EBC  3E05               	addlw	5
  5699     0EBD  00BB               	movwf	___wmul@multiplier^(0+128)
  5700     0EBE  0835               	movf	(?___awmod+1)^(0+128),w
  5701     0EBF  1803               	skipnc
  5702     0EC0  3E01               	addlw	1
  5703     0EC1  3E00               	addlw	0
  5704     0EC2  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  5705     0EC3  30FA               	movlw	250
  5706     0EC4  00BD               	movwf	___wmul@multiplicand^(0+128)
  5707     0EC5  3000               	movlw	0
  5708     0EC6  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  5709     0EC7  160A  118A  26BF  120A  158A  	fcall	___wmul
  5710     0ECC  1683               	bsf	3,5	;RP0=1, select bank1
  5711     0ECD  1303               	bcf	3,6	;RP1=0, select bank1
  5712     0ECE  083B               	movf	?___wmul^(0+128),w
  5713     0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  5714     0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  5715     0ED1  00BC               	movwf	_seconds
  5716     0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  5717     0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  5718     0ED4  083C               	movf	(?___wmul+1)^(0+128),w
  5719     0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  5720     0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  5721     0ED7  00BD               	movwf	_seconds+1
  5722     0ED8  3000               	movlw	0
  5723     0ED9  1BBD               	btfsc	_seconds+1,7
  5724     0EDA  30FF               	movlw	255
  5725     0EDB  00BE               	movwf	_seconds+2
  5726     0EDC  00BF               	movwf	_seconds+3
  5727     0EDD                     l318:
  5728     0EDD  0008               	return
  5729     0EDE                     __end_of_UART_TxString:
  5730                           
  5731                           	psect	text18
  5732     163E                     __ptext18:	
  5733 ;; *************** function _srand *****************
  5734 ;; Defined at:
  5735 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;  x               2    0[BANK1 ] unsigned int 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;		None
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  1    wreg      void 
  5742 ;; Registers used:
  5743 ;;		wreg
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5749 ;;      Params:         0       0       2       0       0
  5750 ;;      Locals:         0       0       0       0       0
  5751 ;;      Temps:          0       0       0       0       0
  5752 ;;      Totals:         0       0       2       0       0
  5753 ;;Total ram usage:        2 bytes
  5754 ;; Hardware stack levels used: 1
  5755 ;; Hardware stack levels required when called: 4
  5756 ;; This function calls:
  5757 ;;		Nothing
  5758 ;; This function is called by:
  5759 ;;		_read_NumPad
  5760 ;;		_UART_TxString
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764     163E                     _srand:	
  5765                           ;psect for function _srand
  5766                           
  5767     163E                     l3269:	
  5768                           ;incstack = 0
  5769                           ; Regs used in _srand: [wreg]
  5770                           
  5771     163E  1683               	bsf	3,5	;RP0=1, select bank1
  5772     163F  1303               	bcf	3,6	;RP1=0, select bank1
  5773     1640  0820               	movf	srand@x^(0+128),w
  5774     1641  1283               	bcf	3,5	;RP0=0, select bank0
  5775     1642  1303               	bcf	3,6	;RP1=0, select bank0
  5776     1643  00D3               	movwf	_randx
  5777     1644  1683               	bsf	3,5	;RP0=1, select bank1
  5778     1645  1303               	bcf	3,6	;RP1=0, select bank1
  5779     1646  0821               	movf	(srand@x+1)^(0+128),w
  5780     1647  1283               	bcf	3,5	;RP0=0, select bank0
  5781     1648  1303               	bcf	3,6	;RP1=0, select bank0
  5782     1649  00D4               	movwf	_randx+1
  5783     164A  01D5               	clrf	_randx+2
  5784     164B  01D6               	clrf	_randx+3
  5785     164C                     l904:
  5786     164C  0008               	return
  5787     164D                     __end_of_srand:
  5788                           
  5789                           	psect	text19
  5790     0C8A                     __ptext19:	
  5791 ;; *************** function _rand *****************
  5792 ;; Defined at:
  5793 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;		None
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  2   13[BANK1 ] int 
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0, pclath, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5807 ;;      Params:         0       0       2       0       0
  5808 ;;      Locals:         0       0       0       0       0
  5809 ;;      Temps:          0       0       5       0       0
  5810 ;;      Totals:         0       0       7       0       0
  5811 ;;Total ram usage:        7 bytes
  5812 ;; Hardware stack levels used: 1
  5813 ;; Hardware stack levels required when called: 5
  5814 ;; This function calls:
  5815 ;;		___lmul
  5816 ;; This function is called by:
  5817 ;;		_read_NumPad
  5818 ;;		_UART_TxString
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822     0C8A                     _rand:	
  5823                           ;psect for function _rand
  5824                           
  5825     0C8A                     l3271:	
  5826                           ;incstack = 0
  5827                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  5828                           
  5829     0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  5830     0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  5831     0C8C  0856               	movf	_randx+3,w
  5832     0C8D  1683               	bsf	3,5	;RP0=1, select bank1
  5833     0C8E  1303               	bcf	3,6	;RP1=0, select bank1
  5834     0C8F  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  5835     0C90  1283               	bcf	3,5	;RP0=0, select bank0
  5836     0C91  1303               	bcf	3,6	;RP1=0, select bank0
  5837     0C92  0855               	movf	_randx+2,w
  5838     0C93  1683               	bsf	3,5	;RP0=1, select bank1
  5839     0C94  1303               	bcf	3,6	;RP1=0, select bank1
  5840     0C95  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  5841     0C96  1283               	bcf	3,5	;RP0=0, select bank0
  5842     0C97  1303               	bcf	3,6	;RP1=0, select bank0
  5843     0C98  0854               	movf	_randx+1,w
  5844     0C99  1683               	bsf	3,5	;RP0=1, select bank1
  5845     0C9A  1303               	bcf	3,6	;RP1=0, select bank1
  5846     0C9B  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  5847     0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  5848     0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  5849     0C9E  0853               	movf	_randx,w
  5850     0C9F  1683               	bsf	3,5	;RP0=1, select bank1
  5851     0CA0  1303               	bcf	3,6	;RP1=0, select bank1
  5852     0CA1  00A0               	movwf	___lmul@multiplier^(0+128)
  5853     0CA2  3041               	movlw	65
  5854     0CA3  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  5855     0CA4  30C6               	movlw	198
  5856     0CA5  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  5857     0CA6  304E               	movlw	78
  5858     0CA7  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  5859     0CA8  306D               	movlw	109
  5860     0CA9  00A4               	movwf	___lmul@multiplicand^(0+128)
  5861     0CAA  120A  158A  2161  120A  158A  	fcall	___lmul
  5862     0CAF  1683               	bsf	3,5	;RP0=1, select bank1
  5863     0CB0  1303               	bcf	3,6	;RP1=0, select bank1
  5864     0CB1  0823               	movf	(?___lmul+3)^(0+128),w
  5865     0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  5866     0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  5867     0CB4  00D6               	movwf	_randx+3
  5868     0CB5  1683               	bsf	3,5	;RP0=1, select bank1
  5869     0CB6  1303               	bcf	3,6	;RP1=0, select bank1
  5870     0CB7  0822               	movf	(?___lmul+2)^(0+128),w
  5871     0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  5872     0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  5873     0CBA  00D5               	movwf	_randx+2
  5874     0CBB  1683               	bsf	3,5	;RP0=1, select bank1
  5875     0CBC  1303               	bcf	3,6	;RP1=0, select bank1
  5876     0CBD  0821               	movf	(?___lmul+1)^(0+128),w
  5877     0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  5878     0CBF  1303               	bcf	3,6	;RP1=0, select bank0
  5879     0CC0  00D4               	movwf	_randx+1
  5880     0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  5881     0CC2  1303               	bcf	3,6	;RP1=0, select bank1
  5882     0CC3  0820               	movf	?___lmul^(0+128),w
  5883     0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  5884     0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  5885     0CC6  00D3               	movwf	_randx
  5886     0CC7                     l3273:
  5887     0CC7  3039               	movlw	57
  5888     0CC8  07D3               	addwf	_randx,f
  5889     0CC9  3030               	movlw	48
  5890     0CCA  1803               	skipnc
  5891     0CCB  3031               	movlw	49
  5892     0CCC  07D4               	addwf	_randx+1,f
  5893     0CCD  3000               	movlw	0
  5894     0CCE  1803               	skipnc
  5895     0CCF  3001               	movlw	1
  5896     0CD0  07D5               	addwf	_randx+2,f
  5897     0CD1  3000               	movlw	0
  5898     0CD2  1803               	skipnc
  5899     0CD3  3001               	movlw	1
  5900     0CD4  07D6               	addwf	_randx+3,f
  5901     0CD5                     l3275:
  5902     0CD5  0853               	movf	_randx,w
  5903     0CD6  1683               	bsf	3,5	;RP0=1, select bank1
  5904     0CD7  1303               	bcf	3,6	;RP1=0, select bank1
  5905     0CD8  00AF               	movwf	??_rand^(0+128)
  5906     0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  5907     0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  5908     0CDB  0854               	movf	_randx+1,w
  5909     0CDC  1683               	bsf	3,5	;RP0=1, select bank1
  5910     0CDD  1303               	bcf	3,6	;RP1=0, select bank1
  5911     0CDE  00B0               	movwf	(??_rand^(0+128)+1)
  5912     0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  5913     0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  5914     0CE1  0855               	movf	_randx+2,w
  5915     0CE2  1683               	bsf	3,5	;RP0=1, select bank1
  5916     0CE3  1303               	bcf	3,6	;RP1=0, select bank1
  5917     0CE4  00B1               	movwf	(??_rand^(0+128)+2)
  5918     0CE5  1283               	bcf	3,5	;RP0=0, select bank0
  5919     0CE6  1303               	bcf	3,6	;RP1=0, select bank0
  5920     0CE7  0856               	movf	_randx+3,w
  5921     0CE8  1683               	bsf	3,5	;RP0=1, select bank1
  5922     0CE9  1303               	bcf	3,6	;RP1=0, select bank1
  5923     0CEA  00B2               	movwf	(??_rand^(0+128)+3)
  5924     0CEB  3010               	movlw	16
  5925     0CEC  00B3               	movwf	(??_rand+4)^(0+128)
  5926     0CED                     u3365:
  5927     0CED  0D32               	rlf	(??_rand^(0+128)+3),w
  5928     0CEE  0CB2               	rrf	(??_rand^(0+128)+3),f
  5929     0CEF  0CB1               	rrf	(??_rand^(0+128)+2),f
  5930     0CF0  0CB0               	rrf	(??_rand^(0+128)+1),f
  5931     0CF1  0CAF               	rrf	??_rand^(0+128),f
  5932     0CF2                     u3360:
  5933     0CF2  0BB3               	decfsz	(??_rand+4)^(0+128),f
  5934     0CF3  2CED               	goto	u3365
  5935     0CF4  30FF               	movlw	255
  5936     0CF5  052F               	andwf	??_rand^(0+128),w
  5937     0CF6  00AD               	movwf	?_rand^(0+128)
  5938     0CF7  307F               	movlw	127
  5939     0CF8  0530               	andwf	(??_rand+1)^(0+128),w
  5940     0CF9  00AE               	movwf	(?_rand+1)^(0+128)
  5941     0CFA                     l907:
  5942     0CFA  0008               	return
  5943     0CFB                     __end_of_rand:
  5944                           
  5945                           	psect	text20
  5946     0961                     __ptext20:	
  5947 ;; *************** function ___lmul *****************
  5948 ;; Defined at:
  5949 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;  multiplier      4    0[BANK1 ] unsigned long 
  5952 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  product         4    9[BANK1 ] unsigned long 
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  4    0[BANK1 ] unsigned long 
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, status,0
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5964 ;;      Params:         0       0       8       0       0
  5965 ;;      Locals:         0       0       4       0       0
  5966 ;;      Temps:          0       0       1       0       0
  5967 ;;      Totals:         0       0      13       0       0
  5968 ;;Total ram usage:       13 bytes
  5969 ;; Hardware stack levels used: 1
  5970 ;; Hardware stack levels required when called: 4
  5971 ;; This function calls:
  5972 ;;		Nothing
  5973 ;; This function is called by:
  5974 ;;		_ConvertToString
  5975 ;;		_rand
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979     0961                     ___lmul:	
  5980                           ;psect for function ___lmul
  5981                           
  5982     0961                     l2999:	
  5983                           ;incstack = 0
  5984                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5985                           
  5986     0961  3000               	movlw	0
  5987     0962  1683               	bsf	3,5	;RP0=1, select bank1
  5988     0963  1303               	bcf	3,6	;RP1=0, select bank1
  5989     0964  00AC               	movwf	(___lmul@product+3)^(0+128)
  5990     0965  3000               	movlw	0
  5991     0966  00AB               	movwf	(___lmul@product+2)^(0+128)
  5992     0967  3000               	movlw	0
  5993     0968  00AA               	movwf	(___lmul@product+1)^(0+128)
  5994     0969  3000               	movlw	0
  5995     096A  00A9               	movwf	___lmul@product^(0+128)
  5996     096B                     l3001:
  5997     096B  1C20               	btfss	___lmul@multiplier^(0+128),0
  5998     096C  296E               	goto	u2911
  5999     096D  296F               	goto	u2910
  6000     096E                     u2911:
  6001     096E  2986               	goto	l3005
  6002     096F                     u2910:
  6003     096F                     l3003:
  6004     096F  0824               	movf	___lmul@multiplicand^(0+128),w
  6005     0970  07A9               	addwf	___lmul@product^(0+128),f
  6006     0971  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  6007     0972  1103               	clrz
  6008     0973  1803               	skipnc
  6009     0974  3E01               	addlw	1
  6010     0975  1903               	skipnz
  6011     0976  2978               	goto	u2921
  6012     0977  07AA               	addwf	(___lmul@product+1)^(0+128),f
  6013     0978                     u2921:
  6014     0978  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  6015     0979  1103               	clrz
  6016     097A  1803               	skipnc
  6017     097B  3E01               	addlw	1
  6018     097C  1903               	skipnz
  6019     097D  297F               	goto	u2922
  6020     097E  07AB               	addwf	(___lmul@product+2)^(0+128),f
  6021     097F                     u2922:
  6022     097F  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  6023     0980  1103               	clrz
  6024     0981  1803               	skipnc
  6025     0982  3E01               	addlw	1
  6026     0983  1903               	skipnz
  6027     0984  2986               	goto	u2923
  6028     0985  07AC               	addwf	(___lmul@product+3)^(0+128),f
  6029     0986                     u2923:
  6030     0986                     l3005:
  6031     0986  3001               	movlw	1
  6032     0987  00A8               	movwf	??___lmul^(0+128)
  6033     0988                     u2935:
  6034     0988  1003               	clrc
  6035     0989  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  6036     098A  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  6037     098B  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  6038     098C  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  6039     098D  0BA8               	decfsz	??___lmul^(0+128),f
  6040     098E  2988               	goto	u2935
  6041     098F                     l3007:
  6042     098F  3001               	movlw	1
  6043     0990                     u2945:
  6044     0990  1003               	clrc
  6045     0991  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  6046     0992  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  6047     0993  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  6048     0994  0CA0               	rrf	___lmul@multiplier^(0+128),f
  6049     0995  3EFF               	addlw	-1
  6050     0996  1D03               	skipz
  6051     0997  2990               	goto	u2945
  6052     0998  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  6053     0999  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  6054     099A  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  6055     099B  0420               	iorwf	___lmul@multiplier^(0+128),w
  6056     099C  1D03               	skipz
  6057     099D  299F               	goto	u2951
  6058     099E  29A0               	goto	u2950
  6059     099F                     u2951:
  6060     099F  296B               	goto	l3001
  6061     09A0                     u2950:
  6062     09A0                     l3009:
  6063     09A0  082C               	movf	(___lmul@product+3)^(0+128),w
  6064     09A1  00A3               	movwf	(?___lmul+3)^(0+128)
  6065     09A2  082B               	movf	(___lmul@product+2)^(0+128),w
  6066     09A3  00A2               	movwf	(?___lmul+2)^(0+128)
  6067     09A4  082A               	movf	(___lmul@product+1)^(0+128),w
  6068     09A5  00A1               	movwf	(?___lmul+1)^(0+128)
  6069     09A6  0829               	movf	___lmul@product^(0+128),w
  6070     09A7  00A0               	movwf	?___lmul^(0+128)
  6071     09A8                     l465:
  6072     09A8  0008               	return
  6073     09A9                     __end_of___lmul:
  6074                           
  6075                           	psect	text21
  6076     16BF                     __ptext21:	
  6077 ;; *************** function ___wmul *****************
  6078 ;; Defined at:
  6079 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  multiplier      2   27[BANK1 ] unsigned int 
  6082 ;;  multiplicand    2   29[BANK1 ] unsigned int 
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  product         2   31[BANK1 ] unsigned int 
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  2   27[BANK1 ] unsigned int 
  6087 ;; Registers used:
  6088 ;;		wreg, status,2, status,0
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6094 ;;      Params:         0       0       4       0       0
  6095 ;;      Locals:         0       0       2       0       0
  6096 ;;      Temps:          0       0       0       0       0
  6097 ;;      Totals:         0       0       6       0       0
  6098 ;;Total ram usage:        6 bytes
  6099 ;; Hardware stack levels used: 1
  6100 ;; Hardware stack levels required when called: 4
  6101 ;; This function calls:
  6102 ;;		Nothing
  6103 ;; This function is called by:
  6104 ;;		_pow
  6105 ;;		_read_NumPad
  6106 ;;		_UART_TxString
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110     16BF                     ___wmul:	
  6111                           ;psect for function ___wmul
  6112                           
  6113     16BF                     l2941:	
  6114                           ;incstack = 0
  6115                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6116                           
  6117     16BF  1683               	bsf	3,5	;RP0=1, select bank1
  6118     16C0  1303               	bcf	3,6	;RP1=0, select bank1
  6119     16C1  01BF               	clrf	___wmul@product^(0+128)
  6120     16C2  01C0               	clrf	(___wmul@product+1)^(0+128)
  6121     16C3                     l2943:
  6122     16C3  1C3B               	btfss	___wmul@multiplier^(0+128),0
  6123     16C4  2EC6               	goto	u2841
  6124     16C5  2EC7               	goto	u2840
  6125     16C6                     u2841:
  6126     16C6  2ECD               	goto	l451
  6127     16C7                     u2840:
  6128     16C7                     l2945:
  6129     16C7  083D               	movf	___wmul@multiplicand^(0+128),w
  6130     16C8  07BF               	addwf	___wmul@product^(0+128),f
  6131     16C9  1803               	skipnc
  6132     16CA  0AC0               	incf	(___wmul@product+1)^(0+128),f
  6133     16CB  083E               	movf	(___wmul@multiplicand+1)^(0+128),w
  6134     16CC  07C0               	addwf	(___wmul@product+1)^(0+128),f
  6135     16CD                     l451:
  6136     16CD  3001               	movlw	1
  6137     16CE                     u2855:
  6138     16CE  1003               	clrc
  6139     16CF  0DBD               	rlf	___wmul@multiplicand^(0+128),f
  6140     16D0  0DBE               	rlf	(___wmul@multiplicand+1)^(0+128),f
  6141     16D1  3EFF               	addlw	-1
  6142     16D2  1D03               	skipz
  6143     16D3  2ECE               	goto	u2855
  6144     16D4                     l2947:
  6145     16D4  3001               	movlw	1
  6146     16D5                     u2865:
  6147     16D5  1003               	clrc
  6148     16D6  0CBC               	rrf	(___wmul@multiplier+1)^(0+128),f
  6149     16D7  0CBB               	rrf	___wmul@multiplier^(0+128),f
  6150     16D8  3EFF               	addlw	-1
  6151     16D9  1D03               	skipz
  6152     16DA  2ED5               	goto	u2865
  6153     16DB                     l2949:
  6154     16DB  083B               	movf	___wmul@multiplier^(0+128),w
  6155     16DC  043C               	iorwf	(___wmul@multiplier+1)^(0+128),w
  6156     16DD  1D03               	btfss	3,2
  6157     16DE  2EE0               	goto	u2871
  6158     16DF  2EE1               	goto	u2870
  6159     16E0                     u2871:
  6160     16E0  2EC3               	goto	l2943
  6161     16E1                     u2870:
  6162     16E1                     l2951:
  6163     16E1  0840               	movf	(___wmul@product+1)^(0+128),w
  6164     16E2  00BC               	movwf	(?___wmul+1)^(0+128)
  6165     16E3  083F               	movf	___wmul@product^(0+128),w
  6166     16E4  00BB               	movwf	?___wmul^(0+128)
  6167     16E5                     l453:
  6168     16E5  0008               	return
  6169     16E6                     __end_of___wmul:
  6170                           
  6171                           	psect	text22
  6172     0AFB                     __ptext22:	
  6173 ;; *************** function ___awmod *****************
  6174 ;; Defined at:
  6175 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  divisor         2   20[BANK1 ] int 
  6178 ;;  dividend        2   22[BANK1 ] int 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;  sign            1   26[BANK1 ] unsigned char 
  6181 ;;  counter         1   25[BANK1 ] unsigned char 
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  2   20[BANK1 ] int 
  6184 ;; Registers used:
  6185 ;;		wreg, status,2, status,0
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6191 ;;      Params:         0       0       4       0       0
  6192 ;;      Locals:         0       0       2       0       0
  6193 ;;      Temps:          0       0       1       0       0
  6194 ;;      Totals:         0       0       7       0       0
  6195 ;;Total ram usage:        7 bytes
  6196 ;; Hardware stack levels used: 1
  6197 ;; Hardware stack levels required when called: 4
  6198 ;; This function calls:
  6199 ;;		Nothing
  6200 ;; This function is called by:
  6201 ;;		_read_NumPad
  6202 ;;		_UART_TxString
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206     0AFB                     ___awmod:	
  6207                           ;psect for function ___awmod
  6208                           
  6209     0AFB                     l3285:	
  6210                           ;incstack = 0
  6211                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6212                           
  6213     0AFB  1683               	bsf	3,5	;RP0=1, select bank1
  6214     0AFC  1303               	bcf	3,6	;RP1=0, select bank1
  6215     0AFD  01BA               	clrf	___awmod@sign^(0+128)
  6216     0AFE                     l3287:
  6217     0AFE  1FB7               	btfss	(___awmod@dividend+1)^(0+128),7
  6218     0AFF  2B01               	goto	u3381
  6219     0B00  2B02               	goto	u3380
  6220     0B01                     u3381:
  6221     0B01  2B09               	goto	l3293
  6222     0B02                     u3380:
  6223     0B02                     l3289:
  6224     0B02  09B6               	comf	___awmod@dividend^(0+128),f
  6225     0B03  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6226     0B04  0AB6               	incf	___awmod@dividend^(0+128),f
  6227     0B05  1903               	skipnz
  6228     0B06  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6229     0B07                     l3291:
  6230     0B07  01BA               	clrf	___awmod@sign^(0+128)
  6231     0B08  0ABA               	incf	___awmod@sign^(0+128),f
  6232     0B09                     l3293:
  6233     0B09  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6234     0B0A  2B0C               	goto	u3391
  6235     0B0B  2B0D               	goto	u3390
  6236     0B0C                     u3391:
  6237     0B0C  2B12               	goto	l3297
  6238     0B0D                     u3390:
  6239     0B0D                     l3295:
  6240     0B0D  09B4               	comf	___awmod@divisor^(0+128),f
  6241     0B0E  09B5               	comf	(___awmod@divisor+1)^(0+128),f
  6242     0B0F  0AB4               	incf	___awmod@divisor^(0+128),f
  6243     0B10  1903               	skipnz
  6244     0B11  0AB5               	incf	(___awmod@divisor+1)^(0+128),f
  6245     0B12                     l3297:
  6246     0B12  0834               	movf	___awmod@divisor^(0+128),w
  6247     0B13  0435               	iorwf	(___awmod@divisor+1)^(0+128),w
  6248     0B14  1903               	btfsc	3,2
  6249     0B15  2B17               	goto	u3401
  6250     0B16  2B18               	goto	u3400
  6251     0B17                     u3401:
  6252     0B17  2B47               	goto	l3315
  6253     0B18                     u3400:
  6254     0B18                     l3299:
  6255     0B18  01B9               	clrf	___awmod@counter^(0+128)
  6256     0B19  0AB9               	incf	___awmod@counter^(0+128),f
  6257     0B1A  2B26               	goto	l3305
  6258     0B1B                     l3301:
  6259     0B1B  3001               	movlw	1
  6260     0B1C                     u3415:
  6261     0B1C  1003               	clrc
  6262     0B1D  0DB4               	rlf	___awmod@divisor^(0+128),f
  6263     0B1E  0DB5               	rlf	(___awmod@divisor+1)^(0+128),f
  6264     0B1F  3EFF               	addlw	-1
  6265     0B20  1D03               	skipz
  6266     0B21  2B1C               	goto	u3415
  6267     0B22                     l3303:
  6268     0B22  3001               	movlw	1
  6269     0B23  00B8               	movwf	??___awmod^(0+128)
  6270     0B24  0838               	movf	??___awmod^(0+128),w
  6271     0B25  07B9               	addwf	___awmod@counter^(0+128),f
  6272     0B26                     l3305:
  6273     0B26  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6274     0B27  2B29               	goto	u3421
  6275     0B28  2B2A               	goto	u3420
  6276     0B29                     u3421:
  6277     0B29  2B1B               	goto	l3301
  6278     0B2A                     u3420:
  6279     0B2A                     l3307:
  6280     0B2A  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6281     0B2B  0237               	subwf	(___awmod@dividend+1)^(0+128),w
  6282     0B2C  1D03               	skipz
  6283     0B2D  2B30               	goto	u3435
  6284     0B2E  0834               	movf	___awmod@divisor^(0+128),w
  6285     0B2F  0236               	subwf	___awmod@dividend^(0+128),w
  6286     0B30                     u3435:
  6287     0B30  1C03               	skipc
  6288     0B31  2B33               	goto	u3431
  6289     0B32  2B34               	goto	u3430
  6290     0B33                     u3431:
  6291     0B33  2B3A               	goto	l3311
  6292     0B34                     u3430:
  6293     0B34                     l3309:
  6294     0B34  0834               	movf	___awmod@divisor^(0+128),w
  6295     0B35  02B6               	subwf	___awmod@dividend^(0+128),f
  6296     0B36  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6297     0B37  1C03               	skipc
  6298     0B38  03B7               	decf	(___awmod@dividend+1)^(0+128),f
  6299     0B39  02B7               	subwf	(___awmod@dividend+1)^(0+128),f
  6300     0B3A                     l3311:
  6301     0B3A  3001               	movlw	1
  6302     0B3B                     u3445:
  6303     0B3B  1003               	clrc
  6304     0B3C  0CB5               	rrf	(___awmod@divisor+1)^(0+128),f
  6305     0B3D  0CB4               	rrf	___awmod@divisor^(0+128),f
  6306     0B3E  3EFF               	addlw	-1
  6307     0B3F  1D03               	skipz
  6308     0B40  2B3B               	goto	u3445
  6309     0B41                     l3313:
  6310     0B41  3001               	movlw	1
  6311     0B42  02B9               	subwf	___awmod@counter^(0+128),f
  6312     0B43  1D03               	btfss	3,2
  6313     0B44  2B46               	goto	u3451
  6314     0B45  2B47               	goto	u3450
  6315     0B46                     u3451:
  6316     0B46  2B2A               	goto	l3307
  6317     0B47                     u3450:
  6318     0B47                     l3315:
  6319     0B47  083A               	movf	___awmod@sign^(0+128),w
  6320     0B48  1903               	btfsc	3,2
  6321     0B49  2B4B               	goto	u3461
  6322     0B4A  2B4C               	goto	u3460
  6323     0B4B                     u3461:
  6324     0B4B  2B51               	goto	l3319
  6325     0B4C                     u3460:
  6326     0B4C                     l3317:
  6327     0B4C  09B6               	comf	___awmod@dividend^(0+128),f
  6328     0B4D  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6329     0B4E  0AB6               	incf	___awmod@dividend^(0+128),f
  6330     0B4F  1903               	skipnz
  6331     0B50  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6332     0B51                     l3319:
  6333     0B51  0837               	movf	(___awmod@dividend+1)^(0+128),w
  6334     0B52  00B5               	movwf	(?___awmod+1)^(0+128)
  6335     0B53  0836               	movf	___awmod@dividend^(0+128),w
  6336     0B54  00B4               	movwf	?___awmod^(0+128)
  6337     0B55                     l617:
  6338     0B55  0008               	return
  6339     0B56                     __end_of___awmod:
  6340                           
  6341                           	psect	text23
  6342     1662                     __ptext23:	
  6343 ;; *************** function _UART_TxChar *****************
  6344 ;; Defined at:
  6345 ;;		line 778 in file "main.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  ch              1    wreg     unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  ch              1    1[BANK1 ] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  1    wreg      void 
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6359 ;;      Params:         0       0       0       0       0
  6360 ;;      Locals:         0       0       1       0       0
  6361 ;;      Temps:          0       0       1       0       0
  6362 ;;      Totals:         0       0       2       0       0
  6363 ;;Total ram usage:        2 bytes
  6364 ;; Hardware stack levels used: 1
  6365 ;; Hardware stack levels required when called: 4
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_UART_TxString
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373     1662                     _UART_TxChar:	
  6374                           ;psect for function _UART_TxChar
  6375                           
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  6379                           ;UART_TxChar@ch stored from wreg
  6380     1662  1683               	bsf	3,5	;RP0=1, select bank1
  6381     1663  1303               	bcf	3,6	;RP1=0, select bank1
  6382     1664  00A1               	movwf	UART_TxChar@ch^(0+128)
  6383     1665                     l3279:
  6384     1665                     l308:	
  6385                           ;main.c: 778: void UART_TxChar(char ch);main.c: 779: {;main.c: 781:     while(!(PIR1 & 0
      +                          x10));
  6386                           
  6387     1665  1283               	bcf	3,5	;RP0=0, select bank0
  6388     1666  1E0C               	btfss	12,4	;volatile
  6389     1667  2E69               	goto	u3371
  6390     1668  2E6A               	goto	u3370
  6391     1669                     u3371:
  6392     1669  2E65               	goto	l308
  6393     166A                     u3370:
  6394     166A                     l3281:
  6395                           
  6396                           ;main.c: 783:     PIR1 &= ~0x10;
  6397     166A  30EF               	movlw	239
  6398     166B  1683               	bsf	3,5	;RP0=1, select bank1
  6399     166C  1303               	bcf	3,6	;RP1=0, select bank1
  6400     166D  00A0               	movwf	??_UART_TxChar^(0+128)
  6401     166E  0820               	movf	??_UART_TxChar^(0+128),w
  6402     166F  1283               	bcf	3,5	;RP0=0, select bank0
  6403     1670  1303               	bcf	3,6	;RP1=0, select bank0
  6404     1671  058C               	andwf	12,f	;volatile
  6405     1672                     l3283:
  6406                           
  6407                           ;main.c: 785:     TXREG = ch;
  6408     1672  1683               	bsf	3,5	;RP0=1, select bank1
  6409     1673  1303               	bcf	3,6	;RP1=0, select bank1
  6410     1674  0821               	movf	UART_TxChar@ch^(0+128),w
  6411     1675  1283               	bcf	3,5	;RP0=0, select bank0
  6412     1676  1303               	bcf	3,6	;RP1=0, select bank0
  6413     1677  0099               	movwf	25	;volatile
  6414     1678                     l311:
  6415     1678  0008               	return
  6416     1679                     __end_of_UART_TxChar:
  6417                           
  6418                           	psect	text24
  6419     0F65                     __ptext24:	
  6420 ;; *************** function _SplitPacket *****************
  6421 ;; Defined at:
  6422 ;;		line 506 in file "main.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  pkt             1    wreg     PTR unsigned char 
  6425 ;;		 -> dato(50), 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;  pkt             1   21[BANK1 ] PTR unsigned char 
  6428 ;;		 -> dato(50), 
  6429 ;;  i               2   22[BANK1 ] int 
  6430 ;;  part            5   12[BANK1 ] unsigned char [5]
  6431 ;;  i_part          2   19[BANK1 ] int 
  6432 ;;  section         2   17[BANK1 ] int 
  6433 ;;  len             2   10[BANK1 ] int 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6443 ;;      Params:         0       0       0       0       0
  6444 ;;      Locals:         0       0      14       0       0
  6445 ;;      Temps:          0       0       3       0       0
  6446 ;;      Totals:         0       0      17       0       0
  6447 ;;Total ram usage:       17 bytes
  6448 ;; Hardware stack levels used: 1
  6449 ;; Hardware stack levels required when called: 5
  6450 ;; This function calls:
  6451 ;;		_Length
  6452 ;;		_strcopy
  6453 ;; This function is called by:
  6454 ;;		_main
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458     0F65                     _SplitPacket:	
  6459                           ;psect for function _SplitPacket
  6460                           
  6461                           
  6462                           ;incstack = 0
  6463                           ; Regs used in _SplitPacket: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6464                           ;SplitPacket@pkt stored from wreg
  6465     0F65  1683               	bsf	3,5	;RP0=1, select bank1
  6466     0F66  1303               	bcf	3,6	;RP1=0, select bank1
  6467     0F67  00B5               	movwf	SplitPacket@pkt^(0+128)
  6468     0F68                     l3493:
  6469                           
  6470                           ;main.c: 506: void SplitPacket(char* pkt);main.c: 507: {;main.c: 509:     char part[5];;
      +                          main.c: 512:     int i_part = 0, section = 0, len = Length(pkt);
  6471     0F68  01B3               	clrf	SplitPacket@i_part^(0+128)
  6472     0F69  01B4               	clrf	(SplitPacket@i_part+1)^(0+128)
  6473     0F6A  01B1               	clrf	SplitPacket@section^(0+128)
  6474     0F6B  01B2               	clrf	(SplitPacket@section+1)^(0+128)
  6475     0F6C                     l3495:
  6476     0F6C  0835               	movf	SplitPacket@pkt^(0+128),w
  6477     0F6D  00A0               	movwf	Length@str^(0+128)
  6478     0F6E  3001               	movlw	1
  6479     0F6F  00A1               	movwf	(Length@str+1)^(0+128)
  6480     0F70  120A  158A  20F2  120A  158A  	fcall	_Length
  6481     0F75  1683               	bsf	3,5	;RP0=1, select bank1
  6482     0F76  1303               	bcf	3,6	;RP1=0, select bank1
  6483     0F77  0821               	movf	(?_Length+1)^(0+128),w
  6484     0F78  00AB               	movwf	(SplitPacket@len+1)^(0+128)
  6485     0F79  0820               	movf	?_Length^(0+128),w
  6486     0F7A  00AA               	movwf	SplitPacket@len^(0+128)
  6487     0F7B                     l3497:
  6488                           
  6489                           ;main.c: 515:     for(int i = 0; i < len + 1; i++)
  6490     0F7B  01B6               	clrf	SplitPacket@i^(0+128)
  6491     0F7C  01B7               	clrf	(SplitPacket@i+1)^(0+128)
  6492     0F7D  2FE9               	goto	l3527
  6493     0F7E                     l3499:
  6494                           
  6495                           ;main.c: 516:     {;main.c: 518:         if(pkt[i] != '/' && pkt[i] != '\0')
  6496     0F7E  1683               	bsf	3,5	;RP0=1, select bank1
  6497     0F7F  1303               	bcf	3,6	;RP1=0, select bank1
  6498     0F80  0836               	movf	SplitPacket@i^(0+128),w
  6499     0F81  0735               	addwf	SplitPacket@pkt^(0+128),w
  6500     0F82  00A7               	movwf	??_SplitPacket^(0+128)
  6501     0F83  0827               	movf	??_SplitPacket^(0+128),w
  6502     0F84  0084               	movwf	4
  6503     0F85  302F               	movlw	47
  6504     0F86  1783               	bsf	3,7	;select IRP bank2
  6505     0F87  0600               	xorwf	0,w
  6506     0F88  1903               	btfsc	3,2
  6507     0F89  2F8B               	goto	u3761
  6508     0F8A  2F8C               	goto	u3760
  6509     0F8B                     u3761:
  6510     0F8B  2FC6               	goto	l3519
  6511     0F8C                     u3760:
  6512     0F8C                     l3501:
  6513     0F8C  0836               	movf	SplitPacket@i^(0+128),w
  6514     0F8D  0735               	addwf	SplitPacket@pkt^(0+128),w
  6515     0F8E  00A7               	movwf	??_SplitPacket^(0+128)
  6516     0F8F  0827               	movf	??_SplitPacket^(0+128),w
  6517     0F90  0084               	movwf	4
  6518     0F91  0800               	movf	0,w
  6519     0F92  1903               	btfsc	3,2
  6520     0F93  2F95               	goto	u3771
  6521     0F94  2F96               	goto	u3770
  6522     0F95                     u3771:
  6523     0F95  2FC6               	goto	l3519
  6524     0F96                     u3770:
  6525     0F96                     l3503:
  6526                           
  6527                           ;main.c: 519:         {;main.c: 521:             part[i_part] = pkt[i];
  6528     0F96  0836               	movf	SplitPacket@i^(0+128),w
  6529     0F97  0735               	addwf	SplitPacket@pkt^(0+128),w
  6530     0F98  00A7               	movwf	??_SplitPacket^(0+128)
  6531     0F99  0827               	movf	??_SplitPacket^(0+128),w
  6532     0F9A  0084               	movwf	4
  6533     0F9B  0800               	movf	0,w
  6534     0F9C  00A8               	movwf	(??_SplitPacket+1)^(0+128)
  6535     0F9D  0833               	movf	SplitPacket@i_part^(0+128),w
  6536     0F9E  3EAC               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6537     0F9F  0084               	movwf	4
  6538     0FA0  0828               	movf	(??_SplitPacket+1)^(0+128),w
  6539     0FA1  1383               	bcf	3,7	;select IRP bank1
  6540     0FA2  0080               	movwf	0
  6541     0FA3                     l3505:
  6542                           
  6543                           ;main.c: 522:             i_part++;
  6544     0FA3  3001               	movlw	1
  6545     0FA4  07B3               	addwf	SplitPacket@i_part^(0+128),f
  6546     0FA5  1803               	skipnc
  6547     0FA6  0AB4               	incf	(SplitPacket@i_part+1)^(0+128),f
  6548     0FA7  3000               	movlw	0
  6549     0FA8  07B4               	addwf	(SplitPacket@i_part+1)^(0+128),f
  6550     0FA9                     l3507:
  6551                           
  6552                           ;main.c: 523:             part[i_part] = '\0';
  6553     0FA9  0833               	movf	SplitPacket@i_part^(0+128),w
  6554     0FAA  3EAC               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6555     0FAB  0084               	movwf	4
  6556     0FAC  0180               	clrf	0
  6557                           
  6558                           ;main.c: 524:         }
  6559     0FAD  2FE3               	goto	l3525
  6560     0FAE                     l3509:
  6561                           
  6562                           ;main.c: 532:                     source = part[0];
  6563     0FAE  082C               	movf	SplitPacket@part^(0+128),w
  6564     0FAF  00E9               	movwf	_source^(0+128)
  6565                           
  6566                           ;main.c: 533:                     break;
  6567     0FB0  2FD9               	goto	l3521
  6568     0FB1                     l3511:
  6569                           
  6570                           ;main.c: 535:                     strcopy(id_dest, part);
  6571     0FB1  30AC               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6572     0FB2  00A0               	movwf	strcopy@source^(0+128)
  6573     0FB3  30C3               	movlw	(low (_id_dest| (0+256)))& (0+255)
  6574     0FB4  160A  118A  26E6  120A  158A  	fcall	_strcopy
  6575                           
  6576                           ;main.c: 536:                     break;
  6577     0FB9  2FD9               	goto	l3521
  6578     0FBA                     l3513:
  6579                           
  6580                           ;main.c: 538:                     type = part[0];
  6581     0FBA  082C               	movf	SplitPacket@part^(0+128),w
  6582     0FBB  00E8               	movwf	_type^(0+128)
  6583                           
  6584                           ;main.c: 539:                     break;
  6585     0FBC  2FD9               	goto	l3521
  6586     0FBD                     l3515:
  6587                           
  6588                           ;main.c: 541:                     strcopy(datoSeriale, part);
  6589     0FBD  30AC               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6590     0FBE  00A0               	movwf	strcopy@source^(0+128)
  6591     0FBF  30A3               	movlw	(low (_datoSeriale| (0+256)))& (0+255)
  6592     0FC0  160A  118A  26E6  120A  158A  	fcall	_strcopy
  6593                           
  6594                           ;main.c: 542:                     break;
  6595     0FC5  2FD9               	goto	l3521
  6596     0FC6                     l3519:
  6597                           
  6598                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6599                           ; Switch size 1, requested type "simple"
  6600                           ; Number of cases is 1, Range of values is 0 to 0
  6601                           ; switch strategies available:
  6602                           ; Name         Instructions Cycles
  6603                           ; simple_byte            4     3 (average)
  6604                           ; direct_byte           11     8 (fixed)
  6605                           ; jumptable            260     6 (fixed)
  6606                           ;	Chosen strategy is simple_byte
  6607     0FC6  0832               	movf	(SplitPacket@section+1)^(0+128),w
  6608     0FC7  3A00               	xorlw	0	; case 0
  6609     0FC8  1903               	skipnz
  6610     0FC9  2FCB               	goto	l4117
  6611     0FCA  2FD9               	goto	l3521
  6612     0FCB                     l4117:
  6613                           
  6614                           ; Switch size 1, requested type "simple"
  6615                           ; Number of cases is 4, Range of values is 0 to 3
  6616                           ; switch strategies available:
  6617                           ; Name         Instructions Cycles
  6618                           ; simple_byte           13     7 (average)
  6619                           ; direct_byte           20     8 (fixed)
  6620                           ; jumptable            260     6 (fixed)
  6621                           ;	Chosen strategy is simple_byte
  6622     0FCB  0831               	movf	SplitPacket@section^(0+128),w
  6623     0FCC  3A00               	xorlw	0	; case 0
  6624     0FCD  1903               	skipnz
  6625     0FCE  2FAE               	goto	l3509
  6626     0FCF  3A01               	xorlw	1	; case 1
  6627     0FD0  1903               	skipnz
  6628     0FD1  2FB1               	goto	l3511
  6629     0FD2  3A03               	xorlw	3	; case 2
  6630     0FD3  1903               	skipnz
  6631     0FD4  2FBA               	goto	l3513
  6632     0FD5  3A01               	xorlw	1	; case 3
  6633     0FD6  1903               	skipnz
  6634     0FD7  2FBD               	goto	l3515
  6635     0FD8  2FD9               	goto	l3521
  6636     0FD9                     l3521:
  6637                           
  6638                           ;main.c: 547:             section++;
  6639     0FD9  3001               	movlw	1
  6640     0FDA  1683               	bsf	3,5	;RP0=1, select bank1
  6641     0FDB  1303               	bcf	3,6	;RP1=0, select bank1
  6642     0FDC  07B1               	addwf	SplitPacket@section^(0+128),f
  6643     0FDD  1803               	skipnc
  6644     0FDE  0AB2               	incf	(SplitPacket@section+1)^(0+128),f
  6645     0FDF  3000               	movlw	0
  6646     0FE0  07B2               	addwf	(SplitPacket@section+1)^(0+128),f
  6647     0FE1                     l3523:
  6648                           
  6649                           ;main.c: 549:             i_part = 0;
  6650     0FE1  01B3               	clrf	SplitPacket@i_part^(0+128)
  6651     0FE2  01B4               	clrf	(SplitPacket@i_part+1)^(0+128)
  6652     0FE3                     l3525:
  6653                           
  6654                           ;main.c: 551:     }
  6655     0FE3  3001               	movlw	1
  6656     0FE4  07B6               	addwf	SplitPacket@i^(0+128),f
  6657     0FE5  1803               	skipnc
  6658     0FE6  0AB7               	incf	(SplitPacket@i+1)^(0+128),f
  6659     0FE7  3000               	movlw	0
  6660     0FE8  07B7               	addwf	(SplitPacket@i+1)^(0+128),f
  6661     0FE9                     l3527:
  6662     0FE9  082A               	movf	SplitPacket@len^(0+128),w
  6663     0FEA  3E01               	addlw	1
  6664     0FEB  00A7               	movwf	??_SplitPacket^(0+128)
  6665     0FEC  082B               	movf	(SplitPacket@len+1)^(0+128),w
  6666     0FED  1803               	skipnc
  6667     0FEE  3E01               	addlw	1
  6668     0FEF  3E00               	addlw	0
  6669     0FF0  00A8               	movwf	(??_SplitPacket+1)^(0+128)
  6670     0FF1  0837               	movf	(SplitPacket@i+1)^(0+128),w
  6671     0FF2  3A80               	xorlw	128
  6672     0FF3  00A9               	movwf	(??_SplitPacket+2)^(0+128)
  6673     0FF4  0828               	movf	(??_SplitPacket+1)^(0+128),w
  6674     0FF5  3A80               	xorlw	128
  6675     0FF6  0229               	subwf	(??_SplitPacket+2)^(0+128),w
  6676     0FF7  1D03               	skipz
  6677     0FF8  2FFB               	goto	u3785
  6678     0FF9  0827               	movf	??_SplitPacket^(0+128),w
  6679     0FFA  0236               	subwf	SplitPacket@i^(0+128),w
  6680     0FFB                     u3785:
  6681     0FFB  1C03               	skipc
  6682     0FFC  2FFE               	goto	u3781
  6683     0FFD  2FFF               	goto	u3780
  6684     0FFE                     u3781:
  6685     0FFE  2F7E               	goto	l3499
  6686     0FFF                     u3780:
  6687     0FFF                     l241:
  6688     0FFF  0008               	return
  6689     1000                     __end_of_SplitPacket:
  6690                           
  6691                           	psect	text25
  6692     16E6                     __ptext25:	
  6693 ;; *************** function _strcopy *****************
  6694 ;; Defined at:
  6695 ;;		line 554 in file "main.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;  dest            1    wreg     PTR unsigned char 
  6698 ;;		 -> datoSeriale(17), id_dest(4), 
  6699 ;;  source          1    0[BANK1 ] PTR unsigned char 
  6700 ;;		 -> SplitPacket@part(5), 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  dest            1    4[BANK1 ] PTR unsigned char 
  6703 ;;		 -> datoSeriale(17), id_dest(4), 
  6704 ;;  n               2    5[BANK1 ] int 
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6714 ;;      Params:         0       0       1       0       0
  6715 ;;      Locals:         0       0       3       0       0
  6716 ;;      Temps:          0       0       3       0       0
  6717 ;;      Totals:         0       0       7       0       0
  6718 ;;Total ram usage:        7 bytes
  6719 ;; Hardware stack levels used: 1
  6720 ;; Hardware stack levels required when called: 4
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_SplitPacket
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728     16E6                     _strcopy:	
  6729                           ;psect for function _strcopy
  6730                           
  6731                           
  6732                           ;incstack = 0
  6733                           ; Regs used in _strcopy: [wreg-fsr0h+status,2+status,0]
  6734                           ;strcopy@dest stored from wreg
  6735     16E6  1683               	bsf	3,5	;RP0=1, select bank1
  6736     16E7  1303               	bcf	3,6	;RP1=0, select bank1
  6737     16E8  00A4               	movwf	strcopy@dest^(0+128)
  6738     16E9                     l3239:
  6739                           
  6740                           ;main.c: 554: void strcopy(char* dest, char* source);main.c: 555: {;main.c: 556:     int
      +                           n = 0;
  6741     16E9  01A5               	clrf	strcopy@n^(0+128)
  6742     16EA  01A6               	clrf	(strcopy@n+1)^(0+128)
  6743                           
  6744                           ;main.c: 559:     while(source[n] != '\0')
  6745     16EB  2F01               	goto	l3245
  6746     16EC                     l3241:
  6747                           
  6748                           ;main.c: 560:     {;main.c: 561:         dest[n] = source[n];
  6749     16EC  0825               	movf	strcopy@n^(0+128),w
  6750     16ED  0720               	addwf	strcopy@source^(0+128),w
  6751     16EE  00A1               	movwf	??_strcopy^(0+128)
  6752     16EF  0821               	movf	??_strcopy^(0+128),w
  6753     16F0  0084               	movwf	4
  6754     16F1  0800               	movf	0,w
  6755     16F2  00A2               	movwf	(??_strcopy+1)^(0+128)
  6756     16F3  0825               	movf	strcopy@n^(0+128),w
  6757     16F4  0724               	addwf	strcopy@dest^(0+128),w
  6758     16F5  00A3               	movwf	(??_strcopy+2)^(0+128)
  6759     16F6  0823               	movf	(??_strcopy+2)^(0+128),w
  6760     16F7  0084               	movwf	4
  6761     16F8  0822               	movf	(??_strcopy+1)^(0+128),w
  6762     16F9  1783               	bsf	3,7	;select IRP bank2
  6763     16FA  0080               	movwf	0
  6764     16FB                     l3243:
  6765                           
  6766                           ;main.c: 562:         n++;
  6767     16FB  3001               	movlw	1
  6768     16FC  07A5               	addwf	strcopy@n^(0+128),f
  6769     16FD  1803               	skipnc
  6770     16FE  0AA6               	incf	(strcopy@n+1)^(0+128),f
  6771     16FF  3000               	movlw	0
  6772     1700  07A6               	addwf	(strcopy@n+1)^(0+128),f
  6773     1701                     l3245:
  6774                           
  6775                           ;main.c: 559:     while(source[n] != '\0')
  6776     1701  0825               	movf	strcopy@n^(0+128),w
  6777     1702  0720               	addwf	strcopy@source^(0+128),w
  6778     1703  00A1               	movwf	??_strcopy^(0+128)
  6779     1704  0821               	movf	??_strcopy^(0+128),w
  6780     1705  0084               	movwf	4
  6781     1706  1383               	bcf	3,7	;select IRP bank0
  6782     1707  0800               	movf	0,w
  6783     1708  1D03               	btfss	3,2
  6784     1709  2F0B               	goto	u3321
  6785     170A  2F0C               	goto	u3320
  6786     170B                     u3321:
  6787     170B  2EEC               	goto	l3241
  6788     170C                     u3320:
  6789     170C                     l3247:
  6790                           
  6791                           ;main.c: 566:     dest[n] = '\0';
  6792     170C  0825               	movf	strcopy@n^(0+128),w
  6793     170D  0724               	addwf	strcopy@dest^(0+128),w
  6794     170E  00A1               	movwf	??_strcopy^(0+128)
  6795     170F  0821               	movf	??_strcopy^(0+128),w
  6796     1710  0084               	movwf	4
  6797     1711  1783               	bsf	3,7	;select IRP bank2
  6798     1712  0180               	clrf	0
  6799     1713                     l247:
  6800     1713  0008               	return
  6801     1714                     __end_of_strcopy:
  6802                           
  6803                           	psect	text26
  6804     09A9                     __ptext26:	
  6805 ;; *************** function _ConcatToPacket *****************
  6806 ;; Defined at:
  6807 ;;		line 456 in file "main.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;  pkt             1    wreg     PTR unsigned char 
  6810 ;;		 -> packet(15), 
  6811 ;;  str             2   19[BANK1 ] PTR unsigned char 
  6812 ;;		 -> STR_16(4), STR_12(4), STR_8(2), main@num_rand_s(16), 
  6813 ;;		 -> PIC_ID(4), 
  6814 ;;  delim           1   21[BANK1 ] unsigned char 
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;  pkt             1   25[BANK1 ] PTR unsigned char 
  6817 ;;		 -> packet(15), 
  6818 ;;  packet_lengt    2   23[BANK1 ] int 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6828 ;;      Params:         0       0       3       0       0
  6829 ;;      Locals:         0       0       3       0       0
  6830 ;;      Temps:          0       0       1       0       0
  6831 ;;      Totals:         0       0       7       0       0
  6832 ;;Total ram usage:        7 bytes
  6833 ;; Hardware stack levels used: 1
  6834 ;; Hardware stack levels required when called: 6
  6835 ;; This function calls:
  6836 ;;		_strcat
  6837 ;; This function is called by:
  6838 ;;		_main
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842     09A9                     _ConcatToPacket:	
  6843                           ;psect for function _ConcatToPacket
  6844                           
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6848                           ;ConcatToPacket@pkt stored from wreg
  6849     09A9  1683               	bsf	3,5	;RP0=1, select bank1
  6850     09AA  1303               	bcf	3,6	;RP1=0, select bank1
  6851     09AB  00B9               	movwf	ConcatToPacket@pkt^(0+128)
  6852     09AC                     l3461:
  6853                           
  6854                           ;main.c: 456: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 457: {;main.
      +                          c: 459:     int packet_length = strcat(pkt, str);
  6855     09AC  0833               	movf	ConcatToPacket@str^(0+128),w
  6856     09AD  00A7               	movwf	strcat@source^(0+128)
  6857     09AE  0834               	movf	(ConcatToPacket@str+1)^(0+128),w
  6858     09AF  00A8               	movwf	(strcat@source+1)^(0+128)
  6859     09B0  0839               	movf	ConcatToPacket@pkt^(0+128),w
  6860     09B1  120A  158A  24FB  120A  158A  	fcall	_strcat
  6861     09B6  1683               	bsf	3,5	;RP0=1, select bank1
  6862     09B7  1303               	bcf	3,6	;RP1=0, select bank1
  6863     09B8  0828               	movf	(?_strcat+1)^(0+128),w
  6864     09B9  00B8               	movwf	(ConcatToPacket@packet_length+1)^(0+128)
  6865     09BA  0827               	movf	?_strcat^(0+128),w
  6866     09BB  00B7               	movwf	ConcatToPacket@packet_length^(0+128)
  6867     09BC                     l3463:
  6868                           
  6869                           ;main.c: 461:     if(delim != ' ')
  6870     09BC  3020               	movlw	32
  6871     09BD  0635               	xorwf	ConcatToPacket@delim^(0+128),w
  6872     09BE  1903               	btfsc	3,2
  6873     09BF  29C1               	goto	u3731
  6874     09C0  29C2               	goto	u3730
  6875     09C1                     u3731:
  6876     09C1  29D1               	goto	l3469
  6877     09C2                     u3730:
  6878     09C2                     l3465:
  6879                           
  6880                           ;main.c: 462:     {;main.c: 464:         pkt[packet_length] = delim;
  6881     09C2  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6882     09C3  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6883     09C4  00B6               	movwf	??_ConcatToPacket^(0+128)
  6884     09C5  0836               	movf	??_ConcatToPacket^(0+128),w
  6885     09C6  0084               	movwf	4
  6886     09C7  0835               	movf	ConcatToPacket@delim^(0+128),w
  6887     09C8  1783               	bsf	3,7	;select IRP bank2
  6888     09C9  0080               	movwf	0
  6889     09CA                     l3467:
  6890                           
  6891                           ;main.c: 465:         packet_length++;
  6892     09CA  3001               	movlw	1
  6893     09CB  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6894     09CC  1803               	skipnc
  6895     09CD  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6896     09CE  3000               	movlw	0
  6897     09CF  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6898                           
  6899                           ;main.c: 466:     }
  6900     09D0  29EC               	goto	l3475
  6901     09D1                     l3469:
  6902                           
  6903                           ;main.c: 469:     {;main.c: 471:         pkt[packet_length] = '\r';
  6904     09D1  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6905     09D2  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6906     09D3  00B6               	movwf	??_ConcatToPacket^(0+128)
  6907     09D4  0836               	movf	??_ConcatToPacket^(0+128),w
  6908     09D5  0084               	movwf	4
  6909     09D6  300D               	movlw	13
  6910     09D7  1783               	bsf	3,7	;select IRP bank2
  6911     09D8  0080               	movwf	0
  6912     09D9                     l3471:
  6913                           
  6914                           ;main.c: 472:         packet_length++;
  6915     09D9  3001               	movlw	1
  6916     09DA  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6917     09DB  1803               	skipnc
  6918     09DC  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6919     09DD  3000               	movlw	0
  6920     09DE  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6921     09DF                     l3473:
  6922                           
  6923                           ;main.c: 473:         pkt[packet_length] = '\n';
  6924     09DF  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6925     09E0  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6926     09E1  00B6               	movwf	??_ConcatToPacket^(0+128)
  6927     09E2  0836               	movf	??_ConcatToPacket^(0+128),w
  6928     09E3  0084               	movwf	4
  6929     09E4  300A               	movlw	10
  6930     09E5  0080               	movwf	0
  6931                           
  6932                           ;main.c: 474:         packet_length++;
  6933     09E6  3001               	movlw	1
  6934     09E7  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6935     09E8  1803               	skipnc
  6936     09E9  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6937     09EA  3000               	movlw	0
  6938     09EB  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6939     09EC                     l3475:
  6940                           
  6941                           ;main.c: 477:     pkt[packet_length] = '\0';
  6942     09EC  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6943     09ED  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6944     09EE  00B6               	movwf	??_ConcatToPacket^(0+128)
  6945     09EF  0836               	movf	??_ConcatToPacket^(0+128),w
  6946     09F0  0084               	movwf	4
  6947     09F1  0180               	clrf	0
  6948     09F2                     l214:
  6949     09F2  0008               	return
  6950     09F3                     __end_of_ConcatToPacket:
  6951                           
  6952                           	psect	text27
  6953     0CFB                     __ptext27:	
  6954 ;; *************** function _strcat *****************
  6955 ;; Defined at:
  6956 ;;		line 489 in file "main.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  dest            1    wreg     PTR unsigned char 
  6959 ;;		 -> packet(15), 
  6960 ;;  source          2    7[BANK1 ] PTR unsigned char 
  6961 ;;		 -> STR_16(4), STR_12(4), STR_8(2), main@num_rand_s(16), 
  6962 ;;		 -> PIC_ID(4), 
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  dest            1   14[BANK1 ] PTR unsigned char 
  6965 ;;		 -> packet(15), 
  6966 ;;  length_dest     2   17[BANK1 ] int 
  6967 ;;  n               2   15[BANK1 ] int 
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  2    7[BANK1 ] int 
  6970 ;; Registers used:
  6971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6977 ;;      Params:         0       0       2       0       0
  6978 ;;      Locals:         0       0       5       0       0
  6979 ;;      Temps:          0       0       5       0       0
  6980 ;;      Totals:         0       0      12       0       0
  6981 ;;Total ram usage:       12 bytes
  6982 ;; Hardware stack levels used: 1
  6983 ;; Hardware stack levels required when called: 5
  6984 ;; This function calls:
  6985 ;;		_Length
  6986 ;; This function is called by:
  6987 ;;		_ConcatToPacket
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991     0CFB                     _strcat:	
  6992                           ;psect for function _strcat
  6993                           
  6994                           
  6995                           ;incstack = 0
  6996                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6997                           ;strcat@dest stored from wreg
  6998     0CFB  1683               	bsf	3,5	;RP0=1, select bank1
  6999     0CFC  1303               	bcf	3,6	;RP1=0, select bank1
  7000     0CFD  00AE               	movwf	strcat@dest^(0+128)
  7001     0CFE                     l3225:
  7002                           
  7003                           ;main.c: 489: int strcat(char* dest, char* source);main.c: 490: {;main.c: 492:     int n
      +                           = 0, length_dest = Length(dest);
  7004     0CFE  01AF               	clrf	strcat@n^(0+128)
  7005     0CFF  01B0               	clrf	(strcat@n+1)^(0+128)
  7006     0D00                     l3227:
  7007     0D00  082E               	movf	strcat@dest^(0+128),w
  7008     0D01  00A0               	movwf	Length@str^(0+128)
  7009     0D02  3001               	movlw	1
  7010     0D03  00A1               	movwf	(Length@str+1)^(0+128)
  7011     0D04  120A  158A  20F2  120A  158A  	fcall	_Length
  7012     0D09  1683               	bsf	3,5	;RP0=1, select bank1
  7013     0D0A  1303               	bcf	3,6	;RP1=0, select bank1
  7014     0D0B  0821               	movf	(?_Length+1)^(0+128),w
  7015     0D0C  00B2               	movwf	(strcat@length_dest+1)^(0+128)
  7016     0D0D  0820               	movf	?_Length^(0+128),w
  7017     0D0E  00B1               	movwf	strcat@length_dest^(0+128)
  7018                           
  7019                           ;main.c: 495:     while(source[n] != '\0')
  7020     0D0F  2D46               	goto	l223
  7021     0D10                     l3229:
  7022                           
  7023                           ;main.c: 496:     {;main.c: 497:         dest[length_dest] = source[n];
  7024     0D10  1683               	bsf	3,5	;RP0=1, select bank1
  7025     0D11  1303               	bcf	3,6	;RP1=0, select bank1
  7026     0D12  082F               	movf	strcat@n^(0+128),w
  7027     0D13  0727               	addwf	strcat@source^(0+128),w
  7028     0D14  00AA               	movwf	(??_strcat+1)^(0+128)
  7029     0D15  0828               	movf	(strcat@source+1)^(0+128),w
  7030     0D16  00A9               	movwf	??_strcat^(0+128)
  7031     0D17  1803               	skipnc
  7032     0D18  0AA9               	incf	??_strcat^(0+128),f
  7033     0D19  1FAF               	btfss	strcat@n^(0+128),7
  7034     0D1A  2D1C               	goto	u3290
  7035     0D1B  03A9               	decf	??_strcat^(0+128),f
  7036     0D1C                     u3290:
  7037     0D1C  1683               	bsf	3,5	;RP0=1, select bank1
  7038     0D1D  1303               	bcf	3,6	;RP1=0, select bank1
  7039     0D1E  0829               	movf	??_strcat^(0+128),w
  7040     0D1F  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  7041     0D20  082B               	movf	(??_strcat+2)^(0+128),w
  7042     0D21  1283               	bcf	3,5	;RP0=0, select bank0
  7043     0D22  1303               	bcf	3,6	;RP1=0, select bank0
  7044     0D23  00FF               	movwf	btemp+1
  7045     0D24  1683               	bsf	3,5	;RP0=1, select bank1
  7046     0D25  1303               	bcf	3,6	;RP1=0, select bank1
  7047     0D26  082A               	movf	(??_strcat+1)^(0+128),w
  7048     0D27  0084               	movwf	4
  7049     0D28  1283               	bcf	3,5	;RP0=0, select bank0
  7050     0D29  1303               	bcf	3,6	;RP1=0, select bank0
  7051     0D2A  120A  158A  2000  120A  158A  	fcall	stringtab
  7052     0D2F  1683               	bsf	3,5	;RP0=1, select bank1
  7053     0D30  1303               	bcf	3,6	;RP1=0, select bank1
  7054     0D31  00AC               	movwf	(??_strcat+3)^(0+128)
  7055     0D32  0831               	movf	strcat@length_dest^(0+128),w
  7056     0D33  072E               	addwf	strcat@dest^(0+128),w
  7057     0D34  00AD               	movwf	(??_strcat+4)^(0+128)
  7058     0D35  082D               	movf	(??_strcat+4)^(0+128),w
  7059     0D36  0084               	movwf	4
  7060     0D37  082C               	movf	(??_strcat+3)^(0+128),w
  7061     0D38  1783               	bsf	3,7	;select IRP bank2
  7062     0D39  0080               	movwf	0
  7063     0D3A                     l3231:
  7064                           
  7065                           ;main.c: 498:         n++;
  7066     0D3A  3001               	movlw	1
  7067     0D3B  07AF               	addwf	strcat@n^(0+128),f
  7068     0D3C  1803               	skipnc
  7069     0D3D  0AB0               	incf	(strcat@n+1)^(0+128),f
  7070     0D3E  3000               	movlw	0
  7071     0D3F  07B0               	addwf	(strcat@n+1)^(0+128),f
  7072     0D40                     l3233:
  7073                           
  7074                           ;main.c: 499:         length_dest++;
  7075     0D40  3001               	movlw	1
  7076     0D41  07B1               	addwf	strcat@length_dest^(0+128),f
  7077     0D42  1803               	skipnc
  7078     0D43  0AB2               	incf	(strcat@length_dest+1)^(0+128),f
  7079     0D44  3000               	movlw	0
  7080     0D45  07B2               	addwf	(strcat@length_dest+1)^(0+128),f
  7081     0D46                     l223:	
  7082                           ;main.c: 500:     }
  7083                           
  7084                           
  7085                           ;main.c: 495:     while(source[n] != '\0')
  7086     0D46  082F               	movf	strcat@n^(0+128),w
  7087     0D47  0727               	addwf	strcat@source^(0+128),w
  7088     0D48  00AA               	movwf	(??_strcat+1)^(0+128)
  7089     0D49  0828               	movf	(strcat@source+1)^(0+128),w
  7090     0D4A  00A9               	movwf	??_strcat^(0+128)
  7091     0D4B  1803               	skipnc
  7092     0D4C  0AA9               	incf	??_strcat^(0+128),f
  7093     0D4D  1FAF               	btfss	strcat@n^(0+128),7
  7094     0D4E  2D50               	goto	u3300
  7095     0D4F  03A9               	decf	??_strcat^(0+128),f
  7096     0D50                     u3300:
  7097     0D50  1683               	bsf	3,5	;RP0=1, select bank1
  7098     0D51  1303               	bcf	3,6	;RP1=0, select bank1
  7099     0D52  0829               	movf	??_strcat^(0+128),w
  7100     0D53  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  7101     0D54  082B               	movf	(??_strcat+2)^(0+128),w
  7102     0D55  1283               	bcf	3,5	;RP0=0, select bank0
  7103     0D56  1303               	bcf	3,6	;RP1=0, select bank0
  7104     0D57  00FF               	movwf	btemp+1
  7105     0D58  1683               	bsf	3,5	;RP0=1, select bank1
  7106     0D59  1303               	bcf	3,6	;RP1=0, select bank1
  7107     0D5A  082A               	movf	(??_strcat+1)^(0+128),w
  7108     0D5B  0084               	movwf	4
  7109     0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  7110     0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  7111     0D5E  120A  158A  2000  120A  158A  	fcall	stringtab
  7112     0D63  3A00               	xorlw	0
  7113     0D64  1D03               	skipz
  7114     0D65  2D67               	goto	u3311
  7115     0D66  2D68               	goto	u3310
  7116     0D67                     u3311:
  7117     0D67  2D10               	goto	l3229
  7118     0D68                     u3310:
  7119     0D68                     l3235:
  7120                           
  7121                           ;main.c: 503:     return length_dest;
  7122     0D68  1683               	bsf	3,5	;RP0=1, select bank1
  7123     0D69  1303               	bcf	3,6	;RP1=0, select bank1
  7124     0D6A  0832               	movf	(strcat@length_dest+1)^(0+128),w
  7125     0D6B  00A8               	movwf	(?_strcat+1)^(0+128)
  7126     0D6C  0831               	movf	strcat@length_dest^(0+128),w
  7127     0D6D  00A7               	movwf	?_strcat^(0+128)
  7128     0D6E                     l226:
  7129     0D6E  0008               	return
  7130     0D6F                     __end_of_strcat:
  7131                           
  7132                           	psect	text28
  7133     08F2                     __ptext28:	
  7134 ;; *************** function _Length *****************
  7135 ;; Defined at:
  7136 ;;		line 480 in file "main.c"
  7137 ;; Parameters:    Size  Location     Type
  7138 ;;  str             2    0[BANK1 ] PTR unsigned char 
  7139 ;;		 -> datoSeriale(17), datoTastierino(17), id_dest(4), dato(50), 
  7140 ;;		 -> packet(15), PIC_ID(4), 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  len             2    5[BANK1 ] int 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  2    0[BANK1 ] int 
  7145 ;; Registers used:
  7146 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7152 ;;      Params:         0       0       2       0       0
  7153 ;;      Locals:         0       0       2       0       0
  7154 ;;      Temps:          0       0       3       0       0
  7155 ;;      Totals:         0       0       7       0       0
  7156 ;;Total ram usage:        7 bytes
  7157 ;; Hardware stack levels used: 1
  7158 ;; Hardware stack levels required when called: 4
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		_strcat
  7163 ;;		_SplitPacket
  7164 ;;		_CompareStrings
  7165 ;;		_Fill
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169     08F2                     _Length:	
  7170                           ;psect for function _Length
  7171                           
  7172     08F2                     l2989:	
  7173                           ;incstack = 0
  7174                           ; Regs used in _Length: [wreg-fsr0h+status,2+status,0]
  7175                           
  7176                           
  7177                           ;main.c: 480: int Length(char *str);main.c: 481: {;main.c: 482:     int len = 0;
  7178     08F2  1683               	bsf	3,5	;RP0=1, select bank1
  7179     08F3  1303               	bcf	3,6	;RP1=0, select bank1
  7180     08F4  01A5               	clrf	Length@len^(0+128)
  7181     08F5  01A6               	clrf	(Length@len+1)^(0+128)
  7182                           
  7183                           ;main.c: 484:     while(str[len] != '\0') { len++; }
  7184     08F6  28FD               	goto	l2993
  7185     08F7                     l2991:
  7186     08F7  3001               	movlw	1
  7187     08F8  07A5               	addwf	Length@len^(0+128),f
  7188     08F9  1803               	skipnc
  7189     08FA  0AA6               	incf	(Length@len+1)^(0+128),f
  7190     08FB  3000               	movlw	0
  7191     08FC  07A6               	addwf	(Length@len+1)^(0+128),f
  7192     08FD                     l2993:
  7193     08FD  0825               	movf	Length@len^(0+128),w
  7194     08FE  0720               	addwf	Length@str^(0+128),w
  7195     08FF  00A3               	movwf	(??_Length+1)^(0+128)
  7196     0900  0821               	movf	(Length@str+1)^(0+128),w
  7197     0901  00A2               	movwf	??_Length^(0+128)
  7198     0902  1803               	skipnc
  7199     0903  0AA2               	incf	??_Length^(0+128),f
  7200     0904  1FA5               	btfss	Length@len^(0+128),7
  7201     0905  2907               	goto	u2890
  7202     0906  03A2               	decf	??_Length^(0+128),f
  7203     0907                     u2890:
  7204     0907  1683               	bsf	3,5	;RP0=1, select bank1
  7205     0908  1303               	bcf	3,6	;RP1=0, select bank1
  7206     0909  0822               	movf	??_Length^(0+128),w
  7207     090A  00A4               	movwf	((??_Length+1)^(0+128)+1)
  7208     090B  0823               	movf	(??_Length+1)^(0+128),w
  7209     090C  0084               	movwf	4
  7210     090D  1783               	bsf	3,7
  7211     090E  1C24               	btfss	(??_Length+2)^(0+128),0
  7212     090F  1383               	bcf	3,7
  7213     0910  0800               	movf	0,w
  7214     0911  1D03               	btfss	3,2
  7215     0912  2914               	goto	u2901
  7216     0913  2915               	goto	u2900
  7217     0914                     u2901:
  7218     0914  28F7               	goto	l2991
  7219     0915                     u2900:
  7220     0915                     l2995:
  7221                           
  7222                           ;main.c: 486:     return len;
  7223     0915  0826               	movf	(Length@len+1)^(0+128),w
  7224     0916  00A1               	movwf	(?_Length+1)^(0+128)
  7225     0917  0825               	movf	Length@len^(0+128),w
  7226     0918  00A0               	movwf	?_Length^(0+128)
  7227     0919                     l220:
  7228     0919  0008               	return
  7229     091A                     __end_of_Length:
  7230                           
  7231                           	psect	text29
  7232     0D6F                     __ptext29:	
  7233 ;; *************** function _IRS *****************
  7234 ;; Defined at:
  7235 ;;		line 809 in file "main.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7249 ;;      Params:         0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0
  7251 ;;      Temps:          0       4       0       0       0
  7252 ;;      Totals:         0       4       0       0       0
  7253 ;;Total ram usage:        4 bytes
  7254 ;; Hardware stack levels used: 1
  7255 ;; Hardware stack levels required when called: 3
  7256 ;; This function calls:
  7257 ;;		i1_UART_TxString
  7258 ;; This function is called by:
  7259 ;;		Interrupt level 1
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263     0D6F                     _IRS:	
  7264                           ;psect for function _IRS
  7265                           
  7266     0D6F                     i1l2861:
  7267                           
  7268                           ;main.c: 812:     if(RCIF)
  7269     0D6F  1E8C               	btfss	12,5	;volatile
  7270     0D70  2D72               	goto	u279_21
  7271     0D71  2D73               	goto	u279_20
  7272     0D72                     u279_21:
  7273     0D72  2D84               	goto	i1l2873
  7274     0D73                     u279_20:
  7275     0D73                     i1l2863:
  7276                           
  7277                           ;main.c: 813:     {;main.c: 814:         dato[iS++] = RCREG;
  7278     0D73  084E               	movf	_iS,w
  7279     0D74  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7280     0D75  0084               	movwf	4
  7281     0D76  081A               	movf	26,w	;volatile
  7282     0D77  1783               	bsf	3,7	;select IRP bank2
  7283     0D78  0080               	movwf	0
  7284     0D79                     i1l2865:
  7285     0D79  3001               	movlw	1
  7286     0D7A  00B8               	movwf	??_IRS
  7287     0D7B  0838               	movf	??_IRS,w
  7288     0D7C  07CE               	addwf	_iS,f
  7289     0D7D                     i1l2867:
  7290                           
  7291                           ;main.c: 815:         dato[iS] = '\0';
  7292     0D7D  084E               	movf	_iS,w
  7293     0D7E  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7294     0D7F  0084               	movwf	4
  7295     0D80  0180               	clrf	0
  7296     0D81                     i1l2869:
  7297                           
  7298                           ;main.c: 816:         recieved = 1;
  7299     0D81  01CC               	clrf	_recieved
  7300     0D82  0ACC               	incf	_recieved,f
  7301     0D83                     i1l2871:
  7302                           
  7303                           ;main.c: 817:         RCIF = 0;
  7304     0D83  128C               	bcf	12,5	;volatile
  7305     0D84                     i1l2873:
  7306                           
  7307                           ;main.c: 820:     if(T0IF)
  7308     0D84  1D0B               	btfss	11,2	;volatile
  7309     0D85  2D87               	goto	u280_21
  7310     0D86  2D88               	goto	u280_20
  7311     0D87                     u280_21:
  7312     0D87  2DDC               	goto	i1l328
  7313     0D88                     u280_20:
  7314     0D88                     i1l2875:
  7315                           
  7316                           ;main.c: 821:     {;main.c: 822:         TMR0 = 131;
  7317     0D88  3083               	movlw	131
  7318     0D89  0081               	movwf	1	;volatile
  7319                           
  7320                           ;main.c: 823:         milliseconds++;
  7321     0D8A  3001               	movlw	1
  7322     0D8B  07C0               	addwf	_milliseconds,f
  7323     0D8C  3000               	movlw	0
  7324     0D8D  1803               	skipnc
  7325     0D8E  3001               	movlw	1
  7326     0D8F  07C1               	addwf	_milliseconds+1,f
  7327     0D90  3000               	movlw	0
  7328     0D91  1803               	skipnc
  7329     0D92  3001               	movlw	1
  7330     0D93  07C2               	addwf	_milliseconds+2,f
  7331     0D94  3000               	movlw	0
  7332     0D95  1803               	skipnc
  7333     0D96  3001               	movlw	1
  7334     0D97  07C3               	addwf	_milliseconds+3,f
  7335                           
  7336                           ;main.c: 824:         if(seconds != 0 && milliseconds > seconds)
  7337     0D98  083F               	movf	_seconds+3,w
  7338     0D99  043E               	iorwf	_seconds+2,w
  7339     0D9A  043D               	iorwf	_seconds+1,w
  7340     0D9B  043C               	iorwf	_seconds,w
  7341     0D9C  1903               	skipnz
  7342     0D9D  2D9F               	goto	u281_21
  7343     0D9E  2DA0               	goto	u281_20
  7344     0D9F                     u281_21:
  7345     0D9F  2DDB               	goto	i1l2889
  7346     0DA0                     u281_20:
  7347     0DA0                     i1l2877:
  7348     0DA0  0843               	movf	_milliseconds+3,w
  7349     0DA1  023F               	subwf	_seconds+3,w
  7350     0DA2  1D03               	skipz
  7351     0DA3  2DAE               	goto	u282_25
  7352     0DA4  0842               	movf	_milliseconds+2,w
  7353     0DA5  023E               	subwf	_seconds+2,w
  7354     0DA6  1D03               	skipz
  7355     0DA7  2DAE               	goto	u282_25
  7356     0DA8  0841               	movf	_milliseconds+1,w
  7357     0DA9  023D               	subwf	_seconds+1,w
  7358     0DAA  1D03               	skipz
  7359     0DAB  2DAE               	goto	u282_25
  7360     0DAC  0840               	movf	_milliseconds,w
  7361     0DAD  023C               	subwf	_seconds,w
  7362     0DAE                     u282_25:
  7363     0DAE  1803               	skipnc
  7364     0DAF  2DB1               	goto	u282_21
  7365     0DB0  2DB2               	goto	u282_20
  7366     0DB1                     u282_21:
  7367     0DB1  2DDB               	goto	i1l2889
  7368     0DB2                     u282_20:
  7369     0DB2                     i1l2879:
  7370                           
  7371                           ;main.c: 825:         {;main.c: 827:             if(seconds == 1000)
  7372     0DB2  30E8               	movlw	232
  7373     0DB3  063C               	xorwf	_seconds,w
  7374     0DB4  3003               	movlw	3
  7375     0DB5  1903               	skipnz
  7376     0DB6  063D               	xorwf	_seconds+1,w
  7377     0DB7  043E               	iorwf	_seconds+2,w
  7378     0DB8  043F               	iorwf	_seconds+3,w
  7379     0DB9  1D03               	btfss	3,2
  7380     0DBA  2DBC               	goto	u283_21
  7381     0DBB  2DBD               	goto	u283_20
  7382     0DBC                     u283_21:
  7383     0DBC  2DCA               	goto	i1l2885
  7384     0DBD                     u283_20:
  7385     0DBD                     i1l2881:
  7386                           
  7387                           ;main.c: 828:             {;main.c: 829:                 pr_start = 1;
  7388     0DBD  1283               	bcf	3,5	;RP0=0, select bank0
  7389     0DBE  1303               	bcf	3,6	;RP1=0, select bank0
  7390     0DBF  01C9               	clrf	_pr_start
  7391     0DC0  0AC9               	incf	_pr_start,f
  7392     0DC1                     i1l2883:
  7393                           
  7394                           ;main.c: 830:                 seconds = 0;
  7395     0DC1  3000               	movlw	0
  7396     0DC2  00BF               	movwf	_seconds+3
  7397     0DC3  3000               	movlw	0
  7398     0DC4  00BE               	movwf	_seconds+2
  7399     0DC5  3000               	movlw	0
  7400     0DC6  00BD               	movwf	_seconds+1
  7401     0DC7  3000               	movlw	0
  7402     0DC8  00BC               	movwf	_seconds
  7403                           
  7404                           ;main.c: 831:             }
  7405     0DC9  2DDB               	goto	i1l2889
  7406     0DCA                     i1l2885:
  7407                           
  7408                           ;main.c: 834:             {;main.c: 835:                 seconds = 0;
  7409     0DCA  3000               	movlw	0
  7410     0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  7411     0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  7412     0DCD  00BF               	movwf	_seconds+3
  7413     0DCE  3000               	movlw	0
  7414     0DCF  00BE               	movwf	_seconds+2
  7415     0DD0  3000               	movlw	0
  7416     0DD1  00BD               	movwf	_seconds+1
  7417     0DD2  3000               	movlw	0
  7418     0DD3  00BC               	movwf	_seconds
  7419     0DD4                     i1l2887:
  7420                           
  7421                           ;main.c: 836:                 UART_TxString(packet, 0);
  7422     0DD4  01B3               	clrf	i1UART_TxString@is_ACK
  7423     0DD5  30B4               	movlw	(low (_packet| (0+256)))& (0+255)
  7424     0DD6  120A  158A  241B  120A  158A  	fcall	i1_UART_TxString
  7425     0DDB                     i1l2889:
  7426                           
  7427                           ;main.c: 839:         T0IF = 0;
  7428     0DDB  110B               	bcf	11,2	;volatile
  7429     0DDC                     i1l328:
  7430     0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  7431     0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  7432     0DDE  083B               	movf	??_IRS+3,w
  7433     0DDF  008A               	movwf	10
  7434     0DE0  083A               	movf	??_IRS+2,w
  7435     0DE1  0084               	movwf	4
  7436     0DE2  0E39               	swapf	??_IRS+1,w
  7437     0DE3  0083               	movwf	3
  7438     0DE4  0EFE               	swapf	btemp,f
  7439     0DE5  0E7E               	swapf	btemp,w
  7440     0DE6  0009               	retfie
  7441     0DE7                     __end_of_IRS:
  7442                           
  7443                           	psect	intentry
  7444     0004                     __pintentry:	
  7445                           ;incstack = 0
  7446                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7447                           
  7448     0004                     interrupt_function:
  7449     007E                     saved_w	set	btemp
  7450     0004  00FE               	movwf	btemp
  7451     0005  0E03               	swapf	3,w
  7452     0006  1283               	bcf	3,5	;RP0=0, select bank0
  7453     0007  1303               	bcf	3,6	;RP1=0, select bank0
  7454     0008  00B9               	movwf	??_IRS+1
  7455     0009  0804               	movf	4,w
  7456     000A  00BA               	movwf	??_IRS+2
  7457     000B  080A               	movf	10,w
  7458     000C  00BB               	movwf	??_IRS+3
  7459     000D  120A  158A  2D6F   	ljmp	_IRS
  7460                           
  7461                           	psect	text30
  7462     0C1B                     __ptext30:	
  7463 ;; *************** function i1_UART_TxString *****************
  7464 ;; Defined at:
  7465 ;;		line 788 in file "main.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;  str             1    wreg     PTR const unsigned char 
  7468 ;;		 -> packet(15), 
  7469 ;;  is_ACK          1   19[BANK0 ] unsigned char 
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;  str             1   21[BANK0 ] PTR const unsigned char 
  7472 ;;		 -> packet(15), 
  7473 ;;  n               2   22[BANK0 ] unsigned int 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      void 
  7476 ;; Registers used:
  7477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7483 ;;      Params:         0       1       0       0       0
  7484 ;;      Locals:         0       3       0       0       0
  7485 ;;      Temps:          0       1       0       0       0
  7486 ;;      Totals:         0       5       0       0       0
  7487 ;;Total ram usage:        5 bytes
  7488 ;; Hardware stack levels used: 1
  7489 ;; Hardware stack levels required when called: 2
  7490 ;; This function calls:
  7491 ;;		i1_UART_TxChar
  7492 ;;		i1___awmod
  7493 ;;		i1___wmul
  7494 ;;		i1_rand
  7495 ;;		i1_srand
  7496 ;; This function is called by:
  7497 ;;		_IRS
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501     0C1B                     i1_UART_TxString:	
  7502                           ;psect for function i1_UART_TxString
  7503                           
  7504                           
  7505                           ;incstack = 0
  7506                           ; Regs used in i1_UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7507                           ;i1UART_TxString@str stored from wreg
  7508     0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  7509     0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  7510     0C1D  00B5               	movwf	i1UART_TxString@str
  7511     0C1E                     i1l2629:
  7512                           
  7513                           ;main.c: 788: void UART_TxString(const char *str, char is_ACK);main.c: 789: {;main.c: 79
      +                          0:     unsigned int n = 0;
  7514     0C1E  01B6               	clrf	i1UART_TxString@n
  7515     0C1F  01B7               	clrf	i1UART_TxString@n+1
  7516                           
  7517                           ;main.c: 792:     while(str[n] != '\0')
  7518     0C20  2C34               	goto	i1l2635
  7519     0C21                     i1l2631:
  7520                           
  7521                           ;main.c: 793:     {;main.c: 794:         UART_TxChar(str[n]);
  7522     0C21  0836               	movf	i1UART_TxString@n,w
  7523     0C22  0735               	addwf	i1UART_TxString@str,w
  7524     0C23  00B4               	movwf	??i1_UART_TxString
  7525     0C24  0834               	movf	??i1_UART_TxString,w
  7526     0C25  0084               	movwf	4
  7527     0C26  0800               	movf	0,w
  7528     0C27  160A  118A  2630  120A  158A  	fcall	i1_UART_TxChar
  7529     0C2C                     i1l2633:
  7530                           
  7531                           ;main.c: 795:         n++;
  7532     0C2C  3001               	movlw	1
  7533     0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  7534     0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  7535     0C2F  07B6               	addwf	i1UART_TxString@n,f
  7536     0C30  1803               	skipnc
  7537     0C31  0AB7               	incf	i1UART_TxString@n+1,f
  7538     0C32  3000               	movlw	0
  7539     0C33  07B7               	addwf	i1UART_TxString@n+1,f
  7540     0C34                     i1l2635:
  7541                           
  7542                           ;main.c: 792:     while(str[n] != '\0')
  7543     0C34  0836               	movf	i1UART_TxString@n,w
  7544     0C35  0735               	addwf	i1UART_TxString@str,w
  7545     0C36  00B4               	movwf	??i1_UART_TxString
  7546     0C37  0834               	movf	??i1_UART_TxString,w
  7547     0C38  0084               	movwf	4
  7548     0C39  1783               	bsf	3,7	;select IRP bank2
  7549     0C3A  0800               	movf	0,w
  7550     0C3B  1D03               	btfss	3,2
  7551     0C3C  2C3E               	goto	u255_21
  7552     0C3D  2C3F               	goto	u255_20
  7553     0C3E                     u255_21:
  7554     0C3E  2C21               	goto	i1l2631
  7555     0C3F                     u255_20:
  7556     0C3F                     i1l2637:
  7557                           
  7558                           ;main.c: 798:     if(is_ACK == 0)
  7559     0C3F  0833               	movf	i1UART_TxString@is_ACK,w
  7560     0C40  1D03               	btfss	3,2
  7561     0C41  2C43               	goto	u256_21
  7562     0C42  2C44               	goto	u256_20
  7563     0C43                     u256_21:
  7564     0C43  2C89               	goto	i1l318
  7565     0C44                     u256_20:
  7566     0C44                     i1l2639:
  7567                           
  7568                           ;main.c: 799:     {;main.c: 802:         srand(milliseconds);
  7569     0C44  0841               	movf	_milliseconds+1,w
  7570     0C45  00F1               	movwf	i1srand@x+1
  7571     0C46  0840               	movf	_milliseconds,w
  7572     0C47  00F0               	movwf	i1srand@x
  7573     0C48  160A  118A  261C  120A  158A  	fcall	i1_srand
  7574     0C4D                     i1l2641:
  7575                           
  7576                           ;main.c: 803:         milliseconds = 0;
  7577     0C4D  3000               	movlw	0
  7578     0C4E  1283               	bcf	3,5	;RP0=0, select bank0
  7579     0C4F  1303               	bcf	3,6	;RP1=0, select bank0
  7580     0C50  00C3               	movwf	_milliseconds+3
  7581     0C51  3000               	movlw	0
  7582     0C52  00C2               	movwf	_milliseconds+2
  7583     0C53  3000               	movlw	0
  7584     0C54  00C1               	movwf	_milliseconds+1
  7585     0C55  3000               	movlw	0
  7586     0C56  00C0               	movwf	_milliseconds
  7587     0C57                     i1l2643:
  7588                           
  7589                           ;main.c: 805:         seconds = ((rand()%10)+5) * 250;
  7590     0C57  300A               	movlw	10
  7591     0C58  00A7               	movwf	i1___awmod@divisor
  7592     0C59  3000               	movlw	0
  7593     0C5A  00A8               	movwf	i1___awmod@divisor+1
  7594     0C5B  120A  158A  211A  120A  158A  	fcall	i1_rand
  7595     0C60  1283               	bcf	3,5	;RP0=0, select bank0
  7596     0C61  1303               	bcf	3,6	;RP1=0, select bank0
  7597     0C62  0821               	movf	?i1_rand+1,w
  7598     0C63  00AA               	movwf	i1___awmod@dividend+1
  7599     0C64  0820               	movf	?i1_rand,w
  7600     0C65  00A9               	movwf	i1___awmod@dividend
  7601     0C66  120A  158A  22A0  120A  158A  	fcall	i1___awmod
  7602     0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  7603     0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  7604     0C6D  0827               	movf	?i1___awmod,w
  7605     0C6E  3E05               	addlw	5
  7606     0C6F  00AD               	movwf	i1___wmul@multiplier
  7607     0C70  0828               	movf	?i1___awmod+1,w
  7608     0C71  1803               	skipnc
  7609     0C72  3E01               	addlw	1
  7610     0C73  3E00               	addlw	0
  7611     0C74  00AE               	movwf	i1___wmul@multiplier+1
  7612     0C75  30FA               	movlw	250
  7613     0C76  00AF               	movwf	i1___wmul@multiplicand
  7614     0C77  3000               	movlw	0
  7615     0C78  00B0               	movwf	i1___wmul@multiplicand+1
  7616     0C79  160A  118A  2698  120A  158A  	fcall	i1___wmul
  7617     0C7E  1283               	bcf	3,5	;RP0=0, select bank0
  7618     0C7F  1303               	bcf	3,6	;RP1=0, select bank0
  7619     0C80  082D               	movf	?i1___wmul,w
  7620     0C81  00BC               	movwf	_seconds
  7621     0C82  082E               	movf	?i1___wmul+1,w
  7622     0C83  00BD               	movwf	_seconds+1
  7623     0C84  3000               	movlw	0
  7624     0C85  1BBD               	btfsc	_seconds+1,7
  7625     0C86  30FF               	movlw	255
  7626     0C87  00BE               	movwf	_seconds+2
  7627     0C88  00BF               	movwf	_seconds+3
  7628     0C89                     i1l318:
  7629     0C89  0008               	return
  7630     0C8A                     __end_ofi1_UART_TxString:
  7631                           
  7632                           	psect	text31
  7633     161C                     __ptext31:	
  7634 ;; *************** function i1_srand *****************
  7635 ;; Defined at:
  7636 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  x               2    0[COMMON] unsigned int 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;		None
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      void 
  7643 ;; Registers used:
  7644 ;;		wreg
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7650 ;;      Params:         2       0       0       0       0
  7651 ;;      Locals:         0       0       0       0       0
  7652 ;;      Temps:          0       0       0       0       0
  7653 ;;      Totals:         2       0       0       0       0
  7654 ;;Total ram usage:        2 bytes
  7655 ;; Hardware stack levels used: 1
  7656 ;; This function calls:
  7657 ;;		Nothing
  7658 ;; This function is called by:
  7659 ;;		i1_UART_TxString
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663     161C                     i1_srand:	
  7664                           ;psect for function i1_srand
  7665                           
  7666     161C                     i1l2407:	
  7667                           ;incstack = 0
  7668                           ; Regs used in i1_srand: [wreg]
  7669                           
  7670     161C  0870               	movf	i1srand@x,w
  7671     161D  1283               	bcf	3,5	;RP0=0, select bank0
  7672     161E  1303               	bcf	3,6	;RP1=0, select bank0
  7673     161F  00D3               	movwf	_randx
  7674     1620  0871               	movf	i1srand@x+1,w
  7675     1621  00D4               	movwf	_randx+1
  7676     1622  01D5               	clrf	_randx+2
  7677     1623  01D6               	clrf	_randx+3
  7678     1624                     i1l904:
  7679     1624  0008               	return
  7680     1625                     __end_ofi1_srand:
  7681                           
  7682                           	psect	text32
  7683     091A                     __ptext32:	
  7684 ;; *************** function i1_rand *****************
  7685 ;; Defined at:
  7686 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  2    0[BANK0 ] int 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2, status,0, pclath, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7700 ;;      Params:         0       2       0       0       0
  7701 ;;      Locals:         0       0       0       0       0
  7702 ;;      Temps:          0       5       0       0       0
  7703 ;;      Totals:         0       7       0       0       0
  7704 ;;Total ram usage:        7 bytes
  7705 ;; Hardware stack levels used: 1
  7706 ;; Hardware stack levels required when called: 1
  7707 ;; This function calls:
  7708 ;;		i1___lmul
  7709 ;; This function is called by:
  7710 ;;		i1_UART_TxString
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714     091A                     i1_rand:	
  7715                           ;psect for function i1_rand
  7716                           
  7717     091A                     i1l2409:	
  7718                           ;incstack = 0
  7719                           ; Regs used in i1_rand: [wreg+status,2+status,0+pclath+cstack]
  7720                           
  7721     091A  1283               	bcf	3,5	;RP0=0, select bank0
  7722     091B  1303               	bcf	3,6	;RP1=0, select bank0
  7723     091C  0856               	movf	_randx+3,w
  7724     091D  00F3               	movwf	i1___lmul@multiplier+3
  7725     091E  0855               	movf	_randx+2,w
  7726     091F  00F2               	movwf	i1___lmul@multiplier+2
  7727     0920  0854               	movf	_randx+1,w
  7728     0921  00F1               	movwf	i1___lmul@multiplier+1
  7729     0922  0853               	movf	_randx,w
  7730     0923  00F0               	movwf	i1___lmul@multiplier
  7731     0924  3041               	movlw	65
  7732     0925  00F7               	movwf	i1___lmul@multiplicand+3
  7733     0926  30C6               	movlw	198
  7734     0927  00F6               	movwf	i1___lmul@multiplicand+2
  7735     0928  304E               	movlw	78
  7736     0929  00F5               	movwf	i1___lmul@multiplicand+1
  7737     092A  306D               	movlw	109
  7738     092B  00F4               	movwf	i1___lmul@multiplicand
  7739     092C  160A  118A  27BA  120A  158A  	fcall	i1___lmul
  7740     0931  0873               	movf	?i1___lmul+3,w
  7741     0932  1283               	bcf	3,5	;RP0=0, select bank0
  7742     0933  1303               	bcf	3,6	;RP1=0, select bank0
  7743     0934  00D6               	movwf	_randx+3
  7744     0935  0872               	movf	?i1___lmul+2,w
  7745     0936  00D5               	movwf	_randx+2
  7746     0937  0871               	movf	?i1___lmul+1,w
  7747     0938  00D4               	movwf	_randx+1
  7748     0939  0870               	movf	?i1___lmul,w
  7749     093A  00D3               	movwf	_randx
  7750     093B                     i1l2411:
  7751     093B  3039               	movlw	57
  7752     093C  07D3               	addwf	_randx,f
  7753     093D  3030               	movlw	48
  7754     093E  1803               	skipnc
  7755     093F  3031               	movlw	49
  7756     0940  07D4               	addwf	_randx+1,f
  7757     0941  3000               	movlw	0
  7758     0942  1803               	skipnc
  7759     0943  3001               	movlw	1
  7760     0944  07D5               	addwf	_randx+2,f
  7761     0945  3000               	movlw	0
  7762     0946  1803               	skipnc
  7763     0947  3001               	movlw	1
  7764     0948  07D6               	addwf	_randx+3,f
  7765     0949                     i1l2413:
  7766     0949  0853               	movf	_randx,w
  7767     094A  00A2               	movwf	??i1_rand
  7768     094B  0854               	movf	_randx+1,w
  7769     094C  00A3               	movwf	??i1_rand+1
  7770     094D  0855               	movf	_randx+2,w
  7771     094E  00A4               	movwf	??i1_rand+2
  7772     094F  0856               	movf	_randx+3,w
  7773     0950  00A5               	movwf	??i1_rand+3
  7774     0951  3010               	movlw	16
  7775     0952  00A6               	movwf	??i1_rand+4
  7776     0953                     u222_25:
  7777     0953  0D25               	rlf	??i1_rand+3,w
  7778     0954  0CA5               	rrf	??i1_rand+3,f
  7779     0955  0CA4               	rrf	??i1_rand+2,f
  7780     0956  0CA3               	rrf	??i1_rand+1,f
  7781     0957  0CA2               	rrf	??i1_rand,f
  7782     0958                     u222_20:
  7783     0958  0BA6               	decfsz	??i1_rand+4,f
  7784     0959  2953               	goto	u222_25
  7785     095A  30FF               	movlw	255
  7786     095B  0522               	andwf	??i1_rand,w
  7787     095C  00A0               	movwf	?i1_rand
  7788     095D  307F               	movlw	127
  7789     095E  0523               	andwf	??i1_rand+1,w
  7790     095F  00A1               	movwf	?i1_rand+1
  7791     0960                     i1l907:
  7792     0960  0008               	return
  7793     0961                     __end_ofi1_rand:
  7794                           
  7795                           	psect	text33
  7796     17BA                     __ptext33:	
  7797 ;; *************** function i1___lmul *****************
  7798 ;; Defined at:
  7799 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  7800 ;; Parameters:    Size  Location     Type
  7801 ;;  multiplier      4    0[COMMON] unsigned long 
  7802 ;;  multiplicand    4    4[COMMON] unsigned long 
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;  product         4    9[COMMON] unsigned long 
  7805 ;; Return value:  Size  Location     Type
  7806 ;;                  4    0[COMMON] unsigned long 
  7807 ;; Registers used:
  7808 ;;		wreg, status,2, status,0
  7809 ;; Tracked objects:
  7810 ;;		On entry : 0/0
  7811 ;;		On exit  : 0/0
  7812 ;;		Unchanged: 0/0
  7813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7814 ;;      Params:         8       0       0       0       0
  7815 ;;      Locals:         4       0       0       0       0
  7816 ;;      Temps:          1       0       0       0       0
  7817 ;;      Totals:        13       0       0       0       0
  7818 ;;Total ram usage:       13 bytes
  7819 ;; Hardware stack levels used: 1
  7820 ;; This function calls:
  7821 ;;		Nothing
  7822 ;; This function is called by:
  7823 ;;		i1_rand
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827     17BA                     i1___lmul:	
  7828                           ;psect for function i1___lmul
  7829                           
  7830     17BA                     i1l2097:	
  7831                           ;incstack = 0
  7832                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  7833                           
  7834     17BA  3000               	movlw	0
  7835     17BB  00FC               	movwf	i1___lmul@product+3
  7836     17BC  3000               	movlw	0
  7837     17BD  00FB               	movwf	i1___lmul@product+2
  7838     17BE  3000               	movlw	0
  7839     17BF  00FA               	movwf	i1___lmul@product+1
  7840     17C0  3000               	movlw	0
  7841     17C1  00F9               	movwf	i1___lmul@product
  7842     17C2                     i1l2099:
  7843     17C2  1C70               	btfss	i1___lmul@multiplier,0
  7844     17C3  2FC5               	goto	u173_21
  7845     17C4  2FC6               	goto	u173_20
  7846     17C5                     u173_21:
  7847     17C5  2FDD               	goto	i1l2103
  7848     17C6                     u173_20:
  7849     17C6                     i1l2101:
  7850     17C6  0874               	movf	i1___lmul@multiplicand,w
  7851     17C7  07F9               	addwf	i1___lmul@product,f
  7852     17C8  0875               	movf	i1___lmul@multiplicand+1,w
  7853     17C9  1103               	clrz
  7854     17CA  1803               	skipnc
  7855     17CB  3E01               	addlw	1
  7856     17CC  1903               	skipnz
  7857     17CD  2FCF               	goto	u174_21
  7858     17CE  07FA               	addwf	i1___lmul@product+1,f
  7859     17CF                     u174_21:
  7860     17CF  0876               	movf	i1___lmul@multiplicand+2,w
  7861     17D0  1103               	clrz
  7862     17D1  1803               	skipnc
  7863     17D2  3E01               	addlw	1
  7864     17D3  1903               	skipnz
  7865     17D4  2FD6               	goto	u174_22
  7866     17D5  07FB               	addwf	i1___lmul@product+2,f
  7867     17D6                     u174_22:
  7868     17D6  0877               	movf	i1___lmul@multiplicand+3,w
  7869     17D7  1103               	clrz
  7870     17D8  1803               	skipnc
  7871     17D9  3E01               	addlw	1
  7872     17DA  1903               	skipnz
  7873     17DB  2FDD               	goto	u174_23
  7874     17DC  07FC               	addwf	i1___lmul@product+3,f
  7875     17DD                     u174_23:
  7876     17DD                     i1l2103:
  7877     17DD  3001               	movlw	1
  7878     17DE  00F8               	movwf	??i1___lmul
  7879     17DF                     u175_25:
  7880     17DF  1003               	clrc
  7881     17E0  0DF4               	rlf	i1___lmul@multiplicand,f
  7882     17E1  0DF5               	rlf	i1___lmul@multiplicand+1,f
  7883     17E2  0DF6               	rlf	i1___lmul@multiplicand+2,f
  7884     17E3  0DF7               	rlf	i1___lmul@multiplicand+3,f
  7885     17E4  0BF8               	decfsz	??i1___lmul,f
  7886     17E5  2FDF               	goto	u175_25
  7887     17E6                     i1l2105:
  7888     17E6  3001               	movlw	1
  7889     17E7                     u176_25:
  7890     17E7  1003               	clrc
  7891     17E8  0CF3               	rrf	i1___lmul@multiplier+3,f
  7892     17E9  0CF2               	rrf	i1___lmul@multiplier+2,f
  7893     17EA  0CF1               	rrf	i1___lmul@multiplier+1,f
  7894     17EB  0CF0               	rrf	i1___lmul@multiplier,f
  7895     17EC  3EFF               	addlw	-1
  7896     17ED  1D03               	skipz
  7897     17EE  2FE7               	goto	u176_25
  7898     17EF  0873               	movf	i1___lmul@multiplier+3,w
  7899     17F0  0472               	iorwf	i1___lmul@multiplier+2,w
  7900     17F1  0471               	iorwf	i1___lmul@multiplier+1,w
  7901     17F2  0470               	iorwf	i1___lmul@multiplier,w
  7902     17F3  1D03               	skipz
  7903     17F4  2FF6               	goto	u177_21
  7904     17F5  2FF7               	goto	u177_20
  7905     17F6                     u177_21:
  7906     17F6  2FC2               	goto	i1l2099
  7907     17F7                     u177_20:
  7908     17F7                     i1l2107:
  7909     17F7  087C               	movf	i1___lmul@product+3,w
  7910     17F8  00F3               	movwf	?i1___lmul+3
  7911     17F9  087B               	movf	i1___lmul@product+2,w
  7912     17FA  00F2               	movwf	?i1___lmul+2
  7913     17FB  087A               	movf	i1___lmul@product+1,w
  7914     17FC  00F1               	movwf	?i1___lmul+1
  7915     17FD  0879               	movf	i1___lmul@product,w
  7916     17FE  00F0               	movwf	?i1___lmul
  7917     17FF                     i1l465:
  7918     17FF  0008               	return
  7919     1800                     __end_ofi1___lmul:
  7920                           
  7921                           	psect	text34
  7922     1698                     __ptext34:	
  7923 ;; *************** function i1___wmul *****************
  7924 ;; Defined at:
  7925 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  multiplier      2   13[BANK0 ] unsigned int 
  7928 ;;  multiplicand    2   15[BANK0 ] unsigned int 
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  product         2   17[BANK0 ] unsigned int 
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  2   13[BANK0 ] unsigned int 
  7933 ;; Registers used:
  7934 ;;		wreg, status,2, status,0
  7935 ;; Tracked objects:
  7936 ;;		On entry : 0/0
  7937 ;;		On exit  : 0/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7940 ;;      Params:         0       4       0       0       0
  7941 ;;      Locals:         0       2       0       0       0
  7942 ;;      Temps:          0       0       0       0       0
  7943 ;;      Totals:         0       6       0       0       0
  7944 ;;Total ram usage:        6 bytes
  7945 ;; Hardware stack levels used: 1
  7946 ;; This function calls:
  7947 ;;		Nothing
  7948 ;; This function is called by:
  7949 ;;		i1_UART_TxString
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953     1698                     i1___wmul:	
  7954                           ;psect for function i1___wmul
  7955                           
  7956     1698                     i1l2355:	
  7957                           ;incstack = 0
  7958                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  7959                           
  7960     1698  1283               	bcf	3,5	;RP0=0, select bank0
  7961     1699  1303               	bcf	3,6	;RP1=0, select bank0
  7962     169A  01B1               	clrf	i1___wmul@product
  7963     169B  01B2               	clrf	i1___wmul@product+1
  7964     169C                     i1l2357:
  7965     169C  1C2D               	btfss	i1___wmul@multiplier,0
  7966     169D  2E9F               	goto	u209_21
  7967     169E  2EA0               	goto	u209_20
  7968     169F                     u209_21:
  7969     169F  2EA6               	goto	i1l451
  7970     16A0                     u209_20:
  7971     16A0                     i1l2359:
  7972     16A0  082F               	movf	i1___wmul@multiplicand,w
  7973     16A1  07B1               	addwf	i1___wmul@product,f
  7974     16A2  1803               	skipnc
  7975     16A3  0AB2               	incf	i1___wmul@product+1,f
  7976     16A4  0830               	movf	i1___wmul@multiplicand+1,w
  7977     16A5  07B2               	addwf	i1___wmul@product+1,f
  7978     16A6                     i1l451:
  7979     16A6  3001               	movlw	1
  7980     16A7                     u210_25:
  7981     16A7  1003               	clrc
  7982     16A8  0DAF               	rlf	i1___wmul@multiplicand,f
  7983     16A9  0DB0               	rlf	i1___wmul@multiplicand+1,f
  7984     16AA  3EFF               	addlw	-1
  7985     16AB  1D03               	skipz
  7986     16AC  2EA7               	goto	u210_25
  7987     16AD                     i1l2361:
  7988     16AD  3001               	movlw	1
  7989     16AE                     u211_25:
  7990     16AE  1003               	clrc
  7991     16AF  0CAE               	rrf	i1___wmul@multiplier+1,f
  7992     16B0  0CAD               	rrf	i1___wmul@multiplier,f
  7993     16B1  3EFF               	addlw	-1
  7994     16B2  1D03               	skipz
  7995     16B3  2EAE               	goto	u211_25
  7996     16B4                     i1l2363:
  7997     16B4  082D               	movf	i1___wmul@multiplier,w
  7998     16B5  042E               	iorwf	i1___wmul@multiplier+1,w
  7999     16B6  1D03               	btfss	3,2
  8000     16B7  2EB9               	goto	u212_21
  8001     16B8  2EBA               	goto	u212_20
  8002     16B9                     u212_21:
  8003     16B9  2E9C               	goto	i1l2357
  8004     16BA                     u212_20:
  8005     16BA                     i1l2365:
  8006     16BA  0832               	movf	i1___wmul@product+1,w
  8007     16BB  00AE               	movwf	?i1___wmul+1
  8008     16BC  0831               	movf	i1___wmul@product,w
  8009     16BD  00AD               	movwf	?i1___wmul
  8010     16BE                     i1l453:
  8011     16BE  0008               	return
  8012     16BF                     __end_ofi1___wmul:
  8013                           
  8014                           	psect	text35
  8015     0AA0                     __ptext35:	
  8016 ;; *************** function i1___awmod *****************
  8017 ;; Defined at:
  8018 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  divisor         2    7[BANK0 ] int 
  8021 ;;  dividend        2    9[BANK0 ] int 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  sign            1   12[BANK0 ] unsigned char 
  8024 ;;  counter         1   11[BANK0 ] unsigned char 
  8025 ;; Return value:  Size  Location     Type
  8026 ;;                  2    7[BANK0 ] int 
  8027 ;; Registers used:
  8028 ;;		wreg, status,2, status,0
  8029 ;; Tracked objects:
  8030 ;;		On entry : 0/0
  8031 ;;		On exit  : 0/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8034 ;;      Params:         0       4       0       0       0
  8035 ;;      Locals:         0       2       0       0       0
  8036 ;;      Temps:          1       0       0       0       0
  8037 ;;      Totals:         1       6       0       0       0
  8038 ;;Total ram usage:        7 bytes
  8039 ;; Hardware stack levels used: 1
  8040 ;; This function calls:
  8041 ;;		Nothing
  8042 ;; This function is called by:
  8043 ;;		i1_UART_TxString
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047     0AA0                     i1___awmod:	
  8048                           ;psect for function i1___awmod
  8049                           
  8050     0AA0                     i1l2369:	
  8051                           ;incstack = 0
  8052                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  8053                           
  8054     0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  8055     0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  8056     0AA2  01AC               	clrf	i1___awmod@sign
  8057     0AA3                     i1l2371:
  8058     0AA3  1FAA               	btfss	i1___awmod@dividend+1,7
  8059     0AA4  2AA6               	goto	u213_21
  8060     0AA5  2AA7               	goto	u213_20
  8061     0AA6                     u213_21:
  8062     0AA6  2AAE               	goto	i1l2377
  8063     0AA7                     u213_20:
  8064     0AA7                     i1l2373:
  8065     0AA7  09A9               	comf	i1___awmod@dividend,f
  8066     0AA8  09AA               	comf	i1___awmod@dividend+1,f
  8067     0AA9  0AA9               	incf	i1___awmod@dividend,f
  8068     0AAA  1903               	skipnz
  8069     0AAB  0AAA               	incf	i1___awmod@dividend+1,f
  8070     0AAC                     i1l2375:
  8071     0AAC  01AC               	clrf	i1___awmod@sign
  8072     0AAD  0AAC               	incf	i1___awmod@sign,f
  8073     0AAE                     i1l2377:
  8074     0AAE  1FA8               	btfss	i1___awmod@divisor+1,7
  8075     0AAF  2AB1               	goto	u214_21
  8076     0AB0  2AB2               	goto	u214_20
  8077     0AB1                     u214_21:
  8078     0AB1  2AB7               	goto	i1l2381
  8079     0AB2                     u214_20:
  8080     0AB2                     i1l2379:
  8081     0AB2  09A7               	comf	i1___awmod@divisor,f
  8082     0AB3  09A8               	comf	i1___awmod@divisor+1,f
  8083     0AB4  0AA7               	incf	i1___awmod@divisor,f
  8084     0AB5  1903               	skipnz
  8085     0AB6  0AA8               	incf	i1___awmod@divisor+1,f
  8086     0AB7                     i1l2381:
  8087     0AB7  0827               	movf	i1___awmod@divisor,w
  8088     0AB8  0428               	iorwf	i1___awmod@divisor+1,w
  8089     0AB9  1903               	btfsc	3,2
  8090     0ABA  2ABC               	goto	u215_21
  8091     0ABB  2ABD               	goto	u215_20
  8092     0ABC                     u215_21:
  8093     0ABC  2AEC               	goto	i1l2399
  8094     0ABD                     u215_20:
  8095     0ABD                     i1l2383:
  8096     0ABD  01AB               	clrf	i1___awmod@counter
  8097     0ABE  0AAB               	incf	i1___awmod@counter,f
  8098     0ABF  2ACB               	goto	i1l2389
  8099     0AC0                     i1l2385:
  8100     0AC0  3001               	movlw	1
  8101     0AC1                     u216_25:
  8102     0AC1  1003               	clrc
  8103     0AC2  0DA7               	rlf	i1___awmod@divisor,f
  8104     0AC3  0DA8               	rlf	i1___awmod@divisor+1,f
  8105     0AC4  3EFF               	addlw	-1
  8106     0AC5  1D03               	skipz
  8107     0AC6  2AC1               	goto	u216_25
  8108     0AC7                     i1l2387:
  8109     0AC7  3001               	movlw	1
  8110     0AC8  00FD               	movwf	??i1___awmod
  8111     0AC9  087D               	movf	??i1___awmod,w
  8112     0ACA  07AB               	addwf	i1___awmod@counter,f
  8113     0ACB                     i1l2389:
  8114     0ACB  1FA8               	btfss	i1___awmod@divisor+1,7
  8115     0ACC  2ACE               	goto	u217_21
  8116     0ACD  2ACF               	goto	u217_20
  8117     0ACE                     u217_21:
  8118     0ACE  2AC0               	goto	i1l2385
  8119     0ACF                     u217_20:
  8120     0ACF                     i1l2391:
  8121     0ACF  0828               	movf	i1___awmod@divisor+1,w
  8122     0AD0  022A               	subwf	i1___awmod@dividend+1,w
  8123     0AD1  1D03               	skipz
  8124     0AD2  2AD5               	goto	u218_25
  8125     0AD3  0827               	movf	i1___awmod@divisor,w
  8126     0AD4  0229               	subwf	i1___awmod@dividend,w
  8127     0AD5                     u218_25:
  8128     0AD5  1C03               	skipc
  8129     0AD6  2AD8               	goto	u218_21
  8130     0AD7  2AD9               	goto	u218_20
  8131     0AD8                     u218_21:
  8132     0AD8  2ADF               	goto	i1l2395
  8133     0AD9                     u218_20:
  8134     0AD9                     i1l2393:
  8135     0AD9  0827               	movf	i1___awmod@divisor,w
  8136     0ADA  02A9               	subwf	i1___awmod@dividend,f
  8137     0ADB  0828               	movf	i1___awmod@divisor+1,w
  8138     0ADC  1C03               	skipc
  8139     0ADD  03AA               	decf	i1___awmod@dividend+1,f
  8140     0ADE  02AA               	subwf	i1___awmod@dividend+1,f
  8141     0ADF                     i1l2395:
  8142     0ADF  3001               	movlw	1
  8143     0AE0                     u219_25:
  8144     0AE0  1003               	clrc
  8145     0AE1  0CA8               	rrf	i1___awmod@divisor+1,f
  8146     0AE2  0CA7               	rrf	i1___awmod@divisor,f
  8147     0AE3  3EFF               	addlw	-1
  8148     0AE4  1D03               	skipz
  8149     0AE5  2AE0               	goto	u219_25
  8150     0AE6                     i1l2397:
  8151     0AE6  3001               	movlw	1
  8152     0AE7  02AB               	subwf	i1___awmod@counter,f
  8153     0AE8  1D03               	btfss	3,2
  8154     0AE9  2AEB               	goto	u220_21
  8155     0AEA  2AEC               	goto	u220_20
  8156     0AEB                     u220_21:
  8157     0AEB  2ACF               	goto	i1l2391
  8158     0AEC                     u220_20:
  8159     0AEC                     i1l2399:
  8160     0AEC  082C               	movf	i1___awmod@sign,w
  8161     0AED  1903               	btfsc	3,2
  8162     0AEE  2AF0               	goto	u221_21
  8163     0AEF  2AF1               	goto	u221_20
  8164     0AF0                     u221_21:
  8165     0AF0  2AF6               	goto	i1l2403
  8166     0AF1                     u221_20:
  8167     0AF1                     i1l2401:
  8168     0AF1  09A9               	comf	i1___awmod@dividend,f
  8169     0AF2  09AA               	comf	i1___awmod@dividend+1,f
  8170     0AF3  0AA9               	incf	i1___awmod@dividend,f
  8171     0AF4  1903               	skipnz
  8172     0AF5  0AAA               	incf	i1___awmod@dividend+1,f
  8173     0AF6                     i1l2403:
  8174     0AF6  082A               	movf	i1___awmod@dividend+1,w
  8175     0AF7  00A8               	movwf	?i1___awmod+1
  8176     0AF8  0829               	movf	i1___awmod@dividend,w
  8177     0AF9  00A7               	movwf	?i1___awmod
  8178     0AFA                     i1l617:
  8179     0AFA  0008               	return
  8180     0AFB                     __end_ofi1___awmod:
  8181                           
  8182                           	psect	text36
  8183     1630                     __ptext36:	
  8184 ;; *************** function i1_UART_TxChar *****************
  8185 ;; Defined at:
  8186 ;;		line 778 in file "main.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;  ch              1    wreg     unsigned char 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  ch              1    1[COMMON] unsigned char 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, status,2, status,0
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8200 ;;      Params:         0       0       0       0       0
  8201 ;;      Locals:         1       0       0       0       0
  8202 ;;      Temps:          1       0       0       0       0
  8203 ;;      Totals:         2       0       0       0       0
  8204 ;;Total ram usage:        2 bytes
  8205 ;; Hardware stack levels used: 1
  8206 ;; This function calls:
  8207 ;;		Nothing
  8208 ;; This function is called by:
  8209 ;;		i1_UART_TxString
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213     1630                     i1_UART_TxChar:	
  8214                           ;psect for function i1_UART_TxChar
  8215                           
  8216                           
  8217                           ;incstack = 0
  8218                           ; Regs used in i1_UART_TxChar: [wreg+status,2+status,0]
  8219                           ;i1UART_TxChar@ch stored from wreg
  8220     1630  00F1               	movwf	i1UART_TxChar@ch
  8221     1631                     i1l2349:
  8222     1631                     i1l308:	
  8223                           ;main.c: 778: void UART_TxChar(char ch);main.c: 779: {;main.c: 781:     while(!(PIR1 & 0
      +                          x10));
  8224                           
  8225     1631  1283               	bcf	3,5	;RP0=0, select bank0
  8226     1632  1303               	bcf	3,6	;RP1=0, select bank0
  8227     1633  1E0C               	btfss	12,4	;volatile
  8228     1634  2E36               	goto	u208_21
  8229     1635  2E37               	goto	u208_20
  8230     1636                     u208_21:
  8231     1636  2E31               	goto	i1l308
  8232     1637                     u208_20:
  8233     1637                     i1l2351:
  8234                           
  8235                           ;main.c: 783:     PIR1 &= ~0x10;
  8236     1637  30EF               	movlw	239
  8237     1638  00F0               	movwf	??i1_UART_TxChar
  8238     1639  0870               	movf	??i1_UART_TxChar,w
  8239     163A  058C               	andwf	12,f	;volatile
  8240     163B                     i1l2353:
  8241                           
  8242                           ;main.c: 785:     TXREG = ch;
  8243     163B  0871               	movf	i1UART_TxChar@ch,w
  8244     163C  0099               	movwf	25	;volatile
  8245     163D                     i1l311:
  8246     163D  0008               	return
  8247     163E                     __end_ofi1_UART_TxChar:
  8248     007E                     btemp	set	126	;btemp
  8249     007E                     wtemp0	set	126
  8250                           
  8251                           	psect	config
  8252                           
  8253                           ;Config register CONFIG @ 0x2007
  8254                           ;	Oscillator Selection bits
  8255                           ;	FOSC = HS, HS oscillator
  8256                           ;	Watchdog Timer Enable bit
  8257                           ;	WDTE = OFF, WDT disabled
  8258                           ;	Power-up Timer Enable bit
  8259                           ;	PWRTE = ON, PWRT enabled
  8260                           ;	Brown-out Reset Enable bit
  8261                           ;	BOREN = ON, BOR enabled
  8262                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  8263                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  8264                           ;	Data EEPROM Memory Code Protection bit
  8265                           ;	CPD = OFF, Data EEPROM code protection off
  8266                           ;	Flash Program Memory Write Enable bits
  8267                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  8268                           ;	In-Circuit Debugger Mode bit
  8269                           ;	DEBUG = 0x1, unprogrammed default
  8270                           ;	Flash Program Memory Code Protection bit
  8271                           ;	CP = OFF, Code protection off
  8272     2007                     	org	8199
  8273     2007  3FF2               	dw	16370

Data Sizes:
    Strings     207
    Constant    19
    Data        7
    BSS         139
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      55
    BANK1            80     66      80
    BANK3            96     27      82
    BANK2            96      0      50

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Fill@id	PTR unsigned char  size(1) Largest target is 4
		 -> PIC_ID(BANK0[4]), 

    CompareStrings@str2	PTR unsigned char  size(2) Largest target is 17
		 -> datoTastierino(BANK3[17]), PIC_ID(BANK0[4]), 

    CompareStrings@str1	PTR unsigned char  size(1) Largest target is 17
		 -> datoSeriale(BANK3[17]), id_dest(BANK3[4]), 

    strcopy@source	PTR unsigned char  size(1) Largest target is 5
		 -> SplitPacket@part(BANK1[5]), 

    strcopy@dest	PTR unsigned char  size(1) Largest target is 17
		 -> datoSeriale(BANK3[17]), id_dest(BANK3[4]), 

    SplitPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> dato(BANK2[50]), 

    strcat@source	PTR unsigned char  size(2) Largest target is 16
		 -> STR_16(CODE[4]), STR_12(CODE[4]), STR_8(CODE[2]), main@num_rand_s(BANK3[16]), 
		 -> PIC_ID(BANK0[4]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Length@str	PTR unsigned char  size(2) Largest target is 50
		 -> datoSeriale(BANK3[17]), datoTastierino(BANK3[17]), id_dest(BANK3[4]), dato(BANK2[50]), 
		 -> packet(BANK3[15]), PIC_ID(BANK0[4]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_16(CODE[4]), STR_12(CODE[4]), STR_8(CODE[2]), main@num_rand_s(BANK3[16]), 
		 -> PIC_ID(BANK0[4]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    ConvertToString@str	PTR unsigned char  size(2) Largest target is 16
		 -> main@num_rand_s(BANK3[16]), PIC_ID(BANK0[4]), 

    lcdPrint@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_19(CODE[17]), STR_18(CODE[16]), datoTastierino(BANK3[17]), STR_17(CODE[18]), 
		 -> STR_15(CODE[16]), STR_14(CODE[13]), STR_13(CODE[15]), STR_11(CODE[12]), 
		 -> STR_10(CODE[13]), STR_9(CODE[18]), main@num_rand_s(BANK3[16]), PIC_ID(BANK0[4]), 
		 -> STR_7(CODE[17]), STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[8]), 
		 -> STR_3(CODE[14]), STR_2(CODE[8]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IRS in COMMON

    i1_UART_TxString->i1___awmod
    i1_rand->i1___lmul
    i1___wmul->i1___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _IRS in BANK0

    _IRS->i1_UART_TxString
    i1_UART_TxString->i1___wmul
    i1___wmul->i1___awmod
    i1___awmod->i1_rand

Critical Paths under _main in BANK1

    _main->_ConvertToString
    _read_NumPad->___wmul
    _CompareStrings->_Length
    _init_PIC->_ConvertToString
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _Fill->_Length
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _UART_TxString->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _SplitPacket->_Length
    _SplitPacket->_strcopy
    _ConcatToPacket->_strcat
    _strcat->_Length

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_init_PIC
    _init_PIC->_ConvertToString

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   39581
                                             11 BANK3     16    16      0
                     _CompareStrings
                     _ConcatToPacket
                    _ConvertToString
                        _SplitPacket
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                         12    12      0    3504
                                             33 BANK1     12    12      0
                     _CompareStrings
                            ___awmod
                             ___wmul
                       _eeprom_write
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     152
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (2) _CompareStrings                                       8     6      2     931
                                              7 BANK1      8     6      2
                             _Length
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             4     4      0   16080
                                              7 BANK3      4     4      0
                    _ConvertToString
                               _Fill
                          _UART_init
                        _eeprom_read
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
                           _lcdPrint
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2    4422
                                              4 BANK1      7     5      2
                            _lcdSend
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0    2582
                                              4 BANK1      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1    2582
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4    1106
                                             57 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) _Fill                                                 4     4      0     772
                                              7 BANK1      4     4      0
                             _Length
 ---------------------------------------------------------------------------------
 (2) _ConvertToString                                     16    10      6    4495
                                             57 BANK1      9     3      6
                                              0 BANK3      7     7      0
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                  9     7      2    1203
                                             33 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     613
                                              0 BANK1     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     985
                                             42 BANK1     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        5     4      1    3143
                                             33 BANK1      5     4      1
                        _UART_TxChar
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             13 BANK1      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                             27 BANK1      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                             20 BANK1      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SplitPacket                                         17    17      0    1441
                                              7 BANK1     17    17      0
                             _Length
                            _strcopy
 ---------------------------------------------------------------------------------
 (2) _strcopy                                              7     6      1     506
                                              0 BANK1      7     6      1
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    2797
                                             19 BANK1      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                              12    10      2     685
                                              7 BANK1     12    10      2
                             _Length
 ---------------------------------------------------------------------------------
 (3) _Length                                               7     5      2     299
                                              0 BANK1      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IRS                                                  4     4      0     844
                                             24 BANK0      4     4      0
                    i1_UART_TxString
 ---------------------------------------------------------------------------------
 (6) i1_UART_TxString                                      5     4      1     844
                                             19 BANK0      5     4      1
                      i1_UART_TxChar
                          i1___awmod
                           i1___wmul
                             i1_rand
                            i1_srand
 ---------------------------------------------------------------------------------
 (7) i1_srand                                              2     0      2      48
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) i1_rand                                               7     5      2     144
                                              0 BANK0      7     5      2
                           i1___lmul
 ---------------------------------------------------------------------------------
 (8) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                             13 BANK0      6     2      4
                          i1___awmod (ARG)
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            7     3      4     348
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UART_TxChar                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CompareStrings
     _Length
   _ConcatToPacket
     _strcat
       _Length
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
     ___almod
     ___lmul
     _pow
   _SplitPacket
     _Length
     _strcopy
   _UART_TxString
     _UART_TxChar
     ___awmod
     ___wmul
     _rand
     _srand
   _init_PIC
     _ConvertToString
     _Fill
       _Length
     _UART_init
       ___aldiv
     _eeprom_read
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
     _lcdPrint
       _lcdSend
     _lcdSend
   _lcdPrint
   _lcdSend
   _read_NumPad
     _CompareStrings
     ___awmod
     ___wmul
     _eeprom_write
     _rand
     _srand

 _IRS (ROOT)
   i1_UART_TxString
     i1_UART_TxChar
     i1___awmod
       i1_rand (ARG)
         i1___lmul
     i1___wmul
       i1___awmod (ARG)
       i1_rand (ARG)
     i1_rand
     i1_srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     1B      52       9       85.4%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      32      11       52.1%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     42      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      37       5       68.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     119      12        0.0%
ABS                  0      0     119       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jun 28 13:08:21 2023

                          pc 0002             ??_CompareStrings 00A9                           _iS 004E  
                         _iT 00E7                           fsr 0004          ___wmul@multiplicand 00BD  
           i1___wmul@product 0031                          l220 0919                          l214 09F2  
                        l302 05F3                          l223 0D46                          l311 1678  
                        l241 0FFF                          l209 0721                          l305 07FE  
                        l226 0D6E                          l251 0A9F                          l308 1665  
                        l421 167C                          l181 1661                          l318 0EDD  
                        l247 1713                          l423 1697                          l184 0C1A  
                        l440 174A                          l280 04D7                          l265 0BB3  
                        l193 0A48                          l441 174A                          l281 04E3  
                        l178 0E5E                          l451 16CD                          l187 1746  
                        l275 0448                          l516 0736                          l268 162F  
                        l444 176C                          l453 16E5                          l526 07BE  
                        l199 17B9                          l447 177D                          l617 0B55  
                        l465 09A8                          l529 0EF2                          l539 0F64  
                        l904 164C                          l907 0CFA                          _IRS 0D6F  
         i1UART_TxString@str 0035                          _pow 177E                          fsr0 0004  
                        indf 0000                 ___awmod@sign 00BA                         ?_IRS 0070  
                       l3001 096B                         l3003 096F                         l3005 0986  
                       l3021 0745                         l3013 0722                         l3007 098F  
                       l3031 0769                         l3023 0749                         l3015 0725  
                       l3009 09A0                         l3041 0797                         l3033 076D  
                       l3025 0751                         l3017 0729                         l3201 0B68  
                       l4001 02E4                         l3043 07A0                         l3035 0776  
                       l3027 0759                         l3019 073A                         l3211 0B8D  
                       l3131 0A72                         l3123 0A4C                         l4003 02E6  
                       l4011 030D                         l3301 0B1B                         l3037 0788  
                       l3029 075C                         l3045 07A6                         l3061 0F01  
                       l3053 0EDE                         l3213 0B9B                         l3205 0B76  
                       l3133 0A74                         l3141 0A93                         l3125 0A70  
                       l4021 0335                         l4013 0314                         l4005 02E7  
                       l3231 0D3A                         l3311 0B3A                         l3303 0B22  
                       l3047 07AB                         l3039 0796                         l3071 0F2F  
                       l3063 0F09                         l3055 0EE1                         l3207 0B84  
                       l3151 07CA                         l3143 0A9E                         l4031 0365  
                       l4023 0349                         l4015 031A                         l4007 02F5  
                       l3233 0D40                         l3225 0CFE                         l3241 16EC  
                       l3313 0B41                         l3305 0B26                         l3049 07B6  
                       l3081 0F5C                         l3073 0F3D                         l3065 0F0C  
                       l3057 0EE5                         l3209 0B88                         l3161 07FD  
                       l3153 07CD                         l3401 04FB                         l4041 0382  
                       l4033 036C                         l4025 0354                         l4017 0321  
                       l4009 0303                         l3235 0D68                         l3227 0D00  
                       l3243 16FB                         l3307 0B2A                         l3315 0B47  
                       l3075 0F46                         l3067 0F19                         l3059 0EF6  
                       l4115 0BAB                         l3219 0BA4                         l3155 07CE  
                       l3147 07BF                         l3171 0BCE                         l3163 0BB4  
                       l3091 0A26                         l3139 0A8F                         l3251 175C  
                       l3411 054D                         l3403 0502                         l4051 03A5  
                       l4043 0386                         l4035 0377                         l4027 035A  
                       l4019 032A                         l3229 0D10                         l3245 1701  
                       l4117 0FCB                         l3501 0F8C                         l3317 0B4C  
                       l3309 0B34                         l3069 0F1D                         l3077 0F4C  
                       l3157 07FB                         l3149 07C5                         l3181 0C08  
                       l3173 0BE2                         l3165 0BB8                         l3085 09F3  
                       l3261 1774                         l3253 1764                         l3421 0565  
                       l3413 0554                         l3405 0534                         l3341 03EF  
                       l4061 03D1                         l4045 0388                         l4037 037B  
                       l4029 035E                         l4053 03AE                         l3247 170C  
                       l3239 16E9                         l3511 0FB1                         l3503 0F96  
                       l3319 0B51                         l3271 0C8A                         l3079 0F51  
                       l3159 07FC                         l3183 0C11                         l3175 0BED  
                       l3167 0BC2                         l3191 1655                         l3087 09F8  
                       l3263 1775                         l3255 1767                         l3431 0584  
                       l3423 056A                         l3415 0556                         l3407 0539  
                       l3351 03FC                         l3343 03F5                         l4055 03B8  
                       l4063 03E5                         l4047 0389                         l4039 0381  
                       l3513 0FBA                         l3521 0FD9                         l3505 0FA3  
                       l3281 166A                         l3273 0CC7                         l3177 0BF6  
                       l3169 0BC5                         l3185 1625                         l3193 1659  
                       l3089 0A1E                         l3265 1776                         l3257 176B  
                       l3249 1750                         l3433 058C                         l3425 056C  
                       l3409 0548                         l3417 055B                         l3361 041D  
                       l3353 040B                         l4057 03BF                         l4049 0397  
                       l3523 0FE1                         l3515 0FBD                         l3507 0FA9  
                       l3283 1672                         l3291 0B07                         l3275 0CD5  
                       l3195 1685                         l3179 0BFF                         l3187 164D  
                       l3267 177C                         l3259 1770                         l3443 05AB  
                       l3427 0572                         l3419 0560                         l3435 0592  
                       l3371 0454                         l3363 0428                         l4059 03C6  
                       l3461 09AC                         l3509 0FAE                         l3525 0FE3  
                       l3293 0B09                         l3285 0AFB                         l3269 163E  
                       l3189 1653                         l3445 05B0                         l3437 0597  
                       l3429 0577                         l3453 05D5                         l3381 046C  
                       l3373 0459                         l3365 0439                         l3349 03F6  
                       l3471 09D9                         l3463 09BC                         l3519 0FC6  
                       l3527 0FE9                         l3279 1665                         l3295 0B0D  
                       l3287 0AFE                         l3199 0B59                         l3455 05DD  
                       l3447 05BD                         l3439 05A6                         l3391 04DB  
                       l3383 04B8                         l3375 045A                         l3367 0446  
                       l3359 040E                         l3473 09DF                         l3465 09C2  
                       l3297 0B12                         l3289 0B02                         l3481 0E70  
                       l3801 05F4                         l3449 05CE                         l3385 04C5  
                       l3393 04E4                         l3377 0460                         l3457 05E9  
                       l3369 044E                         l3475 09EC                         l3467 09CA  
                       l3299 0B18                         l3491 0EA3                         l3483 0E78  
                       l3811 062E                         l3803 05FA                         l3459 05ED  
                       l3395 04E9                         l3387 04CF                         l3379 0465  
                       l3469 09D1                         l3493 0F68                         l2941 16BF  
                       l3485 0E83                         l3477 0E62                         l3821 06BC  
                       l3813 0633                         l3805 0600                         l3397 04F6  
                       l3389 04D3                         l3901 0144                         l3495 0F6C  
                       l2951 16E1                         l2943 16C3                         l3487 0E88  
                       l3479 0E65                         l3823 06E4                         l3815 0639  
                       l3807 0606                         l3831 0DE7                         l3911 0191  
                       l3903 0158                         l3497 0F7B                         l2945 16C7  
                       l3489 0E99                         l3825 06EC                         l3817 0666  
                       l3809 060F                         l2961 171A                         l3841 0E39  
                       l3833 0E13                         l3921 01B1                         l3913 019C  
                       l3905 0164                         l3499 0F7E                         l2947 16D4  
                       l3819 0680                         l3827 06F2                         l2971 1739  
                       l2963 171D                         l2955 1717                         l3843 0E51  
                       l3835 0E19                         l3923 01B5                         l3915 01A0  
                       l3907 0176                         l3931 01CF                         l3851 006C  
                       l2949 16DB                         l2981 17A0                         l3829 0705  
                       l2973 1743                         l2965 1723                         l2957 1718  
                       l3845 0E57                         l3837 0E24                         l3941 01FF  
                       l3933 01DB                         l3925 01B7                         l3917 01A2  
                       l3909 017D                         l3861 008F                         l3853 0073  
                       l2991 08F7                         l2983 17A6                         l2975 1781  
                       l2967 172C                         l2959 1719                         l3847 0E5A  
                       l3839 0E2D                         l3951 022A                         l3943 0207  
                       l3935 01E2                         l3927 01B8                         l3919 01A3  
                       l3871 00BF                         l3863 0098                         l3855 007C  
                       l2993 08FD                         l2985 17B3                         l2977 1785  
                       l2969 1736                         l3961 0249                         l3953 0234  
                       l3945 020D                         l3937 01E8                         l3929 01C6  
                       l3881 00EF                         l3873 00C8                         l3865 00A3  
                       l3857 0087                         l3849 0067                         l2995 0915  
                       l2979 1788                         l3971 027B                         l3963 0254  
                       l3955 0238                         l3947 020E                         l3939 01F0  
                       l3883 00F8                         l3891 0116                         l3875 00D3  
                       l3867 00B7                         l3859 008A                         l2989 08F2  
                       l3973 028A                         l3981 02B5                         l3965 025D  
                       l3957 023E                         l3949 021C                         l3893 011B  
                       l3885 0103                         l3877 00E7                         l3869 00BA  
                       l2999 0961                         l3991 02D2                         l3983 02B8  
                       l3975 0292                         l3967 0268                         l3959 0242  
                       l3895 012D                         l3887 010D                         l3879 00EA  
                       l3993 02D8                         l3977 0298                         l3969 0273  
                       l3985 02B9                         l3897 0132                         l3889 0115  
                       l3995 02DB                         l3987 02BE                         l3979 02A3  
                       l3899 0139                         l3997 02DE                         l3989 02C7  
                       l3999 02E0                         ?_pow 00C1                         STR_1 08CB  
                       STR_2 08E0                         STR_3 0898                         STR_4 08E0  
                       STR_5 08D6                         STR_6 08BF                         STR_7 0847  
                       STR_8 08F0                         STR_9 0835                         _T0IF 005A  
                       u3000 076D                         u3001 076C                         u3020 0788  
                       u3100 0F1D                         u3021 0787                         u3101 0F1C  
                       u3110 0F2F                         u3015 076F                         u3111 0F2E  
                       u3040 07A6                         u3041 07A5                         u3025 0784  
                       u3050 07AB                         u3130 0F4C                         u4010 0600  
                       u3051 07AA                         u3035 0798                         u3131 0F4B  
                       u3115 0F2B                         u4011 05FF                         u3300 0D50  
                       u3140 0F51                         u3060 0EE5                         u4020 0665  
                       u4100 00EF                         u3141 0F50                         u3125 0F3E  
                       u3061 0EE4                         u4021 0664                         u4101 00EE  
                       u3310 0D68                         u3070 0EF6                         u4030 0690  
                       u3150 0A06                         u3230 0A70                         u4110 012D  
                       u3311 0D67                         u3071 0EF5                         u3231 0A6F  
                       u4111 012C                         u3320 170C                         u3400 0B18  
                       u3080 0F09                         u4040 0705                         u3160 0A30  
                       u3240 0A8E                         u4200 0292                         u4120 0132  
                       u3321 170B                         u3401 0B17                         u3081 0F08  
                       u4041 0704                         u3241 0A8D                         u4201 0291  
                       u4121 0131                         u4050 0717                         u3170 0A48  
                       u3250 0A9E                         u3330 1750                         u4210 0298  
                       u4130 0176                         u3171 0A47                         u3251 0A9D  
                       u3235 0A6C                         u3331 174F                         u4211 0297  
                       u4131 0175                         u4115 0129                         u3420 0B2A  
                       u3260 07DE                         u4060 0E19                         u3340 176B  
                       u4220 02BE                         u4140 01E2                         u3421 0B29  
                       u4045 0701                         u4061 0E18                         u3341 176A  
                       u4221 02BD                         u4141 01E1                         u3430 0B34  
                       u3270 1685                         u3350 177C                         u3510 0454  
                       u4230 0314                         u4150 01F0                         u4070 0073  
                       u3431 0B33                         u3415 0B1C                         u3095 0F0E  
                       u3271 1682                         u3351 177B                         u3511 0453  
                       u4231 0313                         u4151 01EF                         u4135 0172  
                       u4071 0072                         _PIE1 008C                         u3360 0CF2  
                       u3280 0B75                         u3600 0539                         u3520 0459  
                       u4240 031A                         u4160 01FF                         u4080 008F  
                       u3281 0B74                         u3265 07D9                         u3601 0538  
                       u3521 0458                         u3505 043E                         u4241 0319  
                       u4161 01FE                         u4081 008E                         u3290 0D1C  
                       u3370 166A                         u3450 0B47                         u3610 0548  
                       u3530 0460                         u4250 0321                         u4170 0207  
                       u4090 00BF                         u3371 1669                         u3451 0B46  
                       u3435 0B30                         u4307 0BBE                         u3611 0547  
                       u3531 045F                         u4251 0320                         u4171 0206  
                       u4091 00BE                         u2900 0915                         u3460 0B4C  
                       u3380 0B02                         u3700 05BD                         u3620 0554  
                       u3540 0465                         u4260 0365                         u4180 027B  
                       u2901 0914                         u3461 0B4B                         u3445 0B3B  
                       u3381 0B01                         u3365 0CED                         u3285 0B71  
                       u4317 0BD4                         u3701 05BC                         u3621 0553  
                       u3541 0464                         u4261 0364                         u4181 027A  
                       u3390 0B0D                         u2910 096F                         u3710 05E9  
                       u3630 0560                         u3550 046C                         u4270 03B8  
                       u4190 028A                         u3391 0B0C                         u2911 096E  
                       u4327 0BE8                         u3711 05E8                         u3631 055F  
                       u3551 046B                         u4271 03B7                         u4191 0289  
                       u2840 16C7                         u3720 05F3                         u3640 0565  
                       u3560 04C5                         u3480 041D                         u4280 03BF  
                       u2841 16C6                         u2921 0978                         u4337 1732  
                       u3721 05F2                         u3705 05B9                         u3641 0564  
                       u3561 04C4                         u3481 041C                         u4281 03BE  
                       u3730 09C2                         u2922 097F                         u3650 056A  
                       u3570 04E9                         u3490 0439                         u3731 09C1  
                       u2923 0986                         u4347 173F                         u3651 0569  
                       u3571 04E8                         u3491 0438                         u3740 0E83  
                       u3660 0577                         u3580 04F6                         u3741 0E82  
                       u3661 0576                         u3581 04F5                         u3565 04C1  
                       u2870 16E1                         u2950 09A0                         u3750 0E88  
                       u3670 0584                         u3590 0502                         u2871 16E0  
                       u2855 16CE                         u2951 099F                         u2935 0988  
                       u3751 0E87                         u3671 0583                         u3591 0501  
                       u3760 0F8C                         u2960 0729                         u2880 17B3  
                       u3680 0597                         u3761 0F8B                         u2865 16D5  
                       u2945 0990                         u2961 0728                         u2881 17B2  
                       u3681 0596                         u3585 04F2                         u4297 0423  
                       u2890 0907                         u3770 0F96                         u2970 073A  
                       u3690 05B0                         u3771 0F95                         u2971 0739  
                       u3691 05AF                         u3675 0580                         u3780 0FFF  
                       u2980 0759                         _RCIF 0065                         u3781 0FFE  
                       u2981 0758                         u2885 17AF                         u3785 0FFB  
                       _PIR1 000C                         u2995 075E                         _TMR0 0001  
             ??_eeprom_write 00A1                         _Fill 0B56                         _fail 004A  
                       _i_id 00E4                         _dato 0110                         _main 0067  
          ConcatToPacket@pkt 00B9                         _keyf 00EA                         _keys 0810  
                       _rand 0C8A            ConcatToPacket@str 00B3                         btemp 007E  
                       _type 00E8                         pow@b 00C5                         pow@i 00C6  
                       pow@n 00C8                         start 0010              __end_ofi1_srand 1625  
                      ??_IRS 0038                        ??_pow 00C3                 ?_init_NumPad 0070  
               ?_init_Timer0 0070                        ?_Fill 0070              __end_of___aldiv 07BF  
            __end_of___almod 0F65                        ?_main 0070                        ?_rand 00AD  
                      _EEADR 010D                        STR_10 08A6                        STR_11 08B3  
                      STR_12 08EC                        STR_13 0889                        STR_14 08A6  
                      STR_15 0879                        STR_16 08E8                        STR_17 0823  
                      STR_18 0869                        STR_19 0858              __end_of___awmod 0B56  
               ?_read_NumPad 0070                        i1l311 163D                        i1l308 1631  
                      i1l318 0C89                        i1l328 0DDC                        i1l451 16A6  
                      i1l453 16BE                        i1l617 0AFA                        i1l465 17FF  
                      i1l904 1624                        i1l907 0960                        _RCREG 001A  
                      _RCSTA 0018                        _SPBRG 0099                        _PORTB 0006  
                      _PORTD 0008                        _TRISB 0086                        _TRISC 0087  
                      _TRISD 0088                        _TXREG 0019                        _TXSTA 0098  
            __end_of_colMask 0823          ___lmul@multiplicand 00A4              __end_of_lcdSend 1747  
             i1___awmod@sign 002C                        _randx 0053                        _srand 163E  
           __end_ofi1___lmul 1800                        pclath 000A             __end_ofi1___wmul 16BF  
            __end_of_rowMask 0820                        status 0003          i1___wmul@multiplier 002D  
                      wtemp0 007E              __end_of_strcopy 1714             ?i1_UART_TxString 0033  
               __end_of_Fill 0BB4              __initialization 0013                 __end_of_main 03EF  
               __end_of_keys 081C                 __end_of_rand 0CFB          i1___lmul@multiplier 0070  
                     ??_Fill 00A7                       ??_main 00E2                       ??_rand 00AF  
          strcat@length_dest 00B1                       _EEDATA 010C                       _EECON1 018C  
                     _EECON2 018D                       ?_srand 00A0                       i1l2101 17C6  
                     i1l2103 17DD                       i1l2105 17E6                       i1l2107 17F7  
                     i1l2401 0AF1                       i1l2403 0AF6                       i1l2411 093B  
                     i1l2413 0949                       i1l2351 1637                       i1l2407 161C  
                     i1l2353 163B                       i1l2361 16AD                       i1l2097 17BA  
                     i1l2409 091A                       i1l2371 0AA3                       i1l2363 16B4  
                     i1l2355 1698                       i1l2099 17C2                       i1l2349 1631  
                     i1l2381 0AB7                       i1l2373 0AA7                       i1l2365 16BA  
                     i1l2357 169C                       i1l2391 0ACF                       i1l2383 0ABD  
                     i1l2375 0AAC                       i1l2359 16A0                       i1l2631 0C21  
                     i1l2393 0AD9                       i1l2385 0AC0                       i1l2377 0AAE  
                     i1l2369 0AA0                       i1l2641 0C4D                       i1l2633 0C2C  
                     i1l2395 0ADF                       i1l2387 0AC7                       i1l2379 0AB2  
                     i1l2643 0C57                       i1l2635 0C34                       i1l2397 0AE6  
                     i1l2389 0ACB                       u210_25 16A7                       i1l2637 0C3F  
                     i1l2629 0C1E                       i1l2399 0AEC                       i1l2639 0C44  
                     u211_25 16AE                       i1l2861 0D6F                       i1l2871 0D83  
                     i1l2863 0D73                       u220_20 0AEC                       u212_20 16BA  
                     u220_21 0AEB                       u212_21 16B9                       i1l2881 0DBD  
                     i1l2865 0D79                       i1l2873 0D84                       i1l2883 0DC1  
                     i1l2875 0D88                       i1l2867 0D7D                       i1l2885 0DCA  
                     i1l2877 0DA0                       i1l2869 0D81                       i1l2887 0DD4  
                     i1l2879 0DB2                       u221_20 0AF1                       u213_20 0AA7  
                     u221_21 0AF0                       u213_21 0AA6                       i1l2889 0DDB  
                     u214_20 0AB2                       u222_20 0958                       u214_21 0AB1  
                     u222_25 0953                       u215_20 0ABD                       u215_21 0ABC  
                     u208_20 1637                       u208_21 1636                       u216_25 0AC1  
                     u217_20 0ACF                       u209_20 16A0                       _INTCON 000B  
                     u217_21 0ACE                       u209_21 169F                       u218_20 0AD9  
                     u218_21 0AD8                       u218_25 0AD5                       u219_25 0AE0  
                     u173_20 17C6                       u173_21 17C5                       u174_21 17CF  
                     u174_22 17D6                       u174_23 17DD                       u255_20 0C3F  
                     u255_21 0C3E                       u175_25 17DF                       u256_20 0C44  
                     u280_20 0D88                       u256_21 0C43                       u280_21 0D87  
                     u176_25 17E7                       u177_20 17F7                       u281_20 0DA0  
                     u177_21 17F6                       u281_21 0D9F                       u282_20 0DB2  
                     u282_21 0DB1                       u282_25 0DAE                       u283_20 0DBD  
                     u283_21 0DBC                       _PIC_ID 004F                       u279_20 0D73  
                     u279_21 0D72                    ??i1_srand 0072                       Fill@id 00AA  
      i1UART_TxString@is_ACK 0033                       i1_rand 091A                 ?_UART_TxChar 0070  
                     _Length 08F2             __end_of_lcdPrint 0A49                       ___lmul 0961  
                  ??___aldiv 00D2                    ??___almod 00A8                       ___wmul 16BF  
          __end_of_UART_init 07FF                    ??___awmod 00B8          ConcatToPacket@delim 00B5  
           __end_of_init_LCD 0C1B             __end_of_init_PIC 0E5F                       _packet 01B4  
                     _old_iT 004D              ___awmod@divisor 00B4         __end_of_eeprom_write 177E  
            ___awmod@counter 00B9                    ??_lcdSend 00A1                       _source 00E9  
                     _strcat 0CFB            __end_ofi1___awmod 0AFB                       saved_w 007E  
                     pow@exp 00C1                       srand@x 00A0                    ??_strcopy 00A1  
             _datoTastierino 0192      __end_of__initialization 0063              eeprom_read@addr 00A1  
      __end_of_UART_TxString 0EDE                ??_SplitPacket 00A7               __pcstackCOMMON 0070  
               __pidataBANK0 1610                 __pidataBANK1 160D                __end_of_srand 164D  
                  ?i1___lmul 0070                    ?i1___wmul 002D            eeprom_write@value 00A0  
                    ??_srand 00A2                   __pbssBANK0 003C                   __pbssBANK1 00E2  
                 __pbssBANK2 0110                   __pbssBANK3 0190                      ?i1_rand 0020  
               strcat@source 00A7                      ?_Length 00A0                   __pmaintext 0067  
                    ?___lmul 00A0                      ?___wmul 00BB                   __pintentry 0004  
             ___lmul@product 00A9          __end_of_SplitPacket 1000                   ??i1___lmul 0078  
                    ?_strcat 00A7                   ??i1___wmul 007E                    ?_lcdPrint 00A4  
     ConvertToString@n_cifre 01CD                   __stringtab 0800                    ?_init_LCD 0070  
                  ?_init_PIC 0070                      i1_srand 161C            ??_ConvertToString 00DF  
                    ___aldiv 0722                      ___almod 0EDE                      ___awmod 0AFB  
                    _colMask 0820                   _initialize 00EE                      _colScan 00EC  
                    _id_dest 01C3                      _lcdSend 1714                      __ptext1 03EF  
                    __ptext2 1747                      __ptext3 0A49                      __ptext4 0DE7  
                    __ptext5 09F3                      __ptext6 164D                      __ptext7 1625  
                    __ptext8 0BB4                      __ptext9 1714               _ConcatToPacket 09A9  
                    _compare 00E6                      _maxFail 00ED             ___awmod@dividend 00B6  
           ___aldiv@dividend 00CE                      _seconds 003C                   _keypressed 00EF  
                    _pr_succ 0046                      _rowMask 081C                      _rowScan 00EB  
                    _success 004B                   ??_lcdPrint 00A6                      clrloop0 1615  
                    _strcopy 16E6         end_of_initialization 0063               main@num_rand_s 01D2  
                 ??_init_LCD 00A4                   ??_init_PIC 01CE                 _eeprom_write 1747  
             UART_TxString@n 00C3                   _pr_err_len 0048                   _pr_err_max 0047  
              i1_UART_TxChar 1630                  _SplitPacket 0F65             ___aldiv@quotient 00D5  
                    strcat@n 00AF        i1___wmul@multiplicand 002F       __end_of_ConcatToPacket 09F3  
                  _UART_init 07BF                    _PORTEbits 0009                    _TRISEbits 0089  
                  i1___awmod 0AA0                ??_eeprom_read 00A0                    Length@len 00A5  
                  Length@str 00A0               ?i1_UART_TxChar 0070               __end_ofi1_rand 0961  
             __end_of_Length 091A               __end_of___lmul 09A9               __end_of___wmul 16E6  
            ?_ConcatToPacket 00B3                   ?_UART_init 00D9               __end_of_strcat 0D6F  
      i1___lmul@multiplicand 0074          start_initialization 0013                  __end_of_IRS 0DE7  
                __end_of_pow 17BA                   ?i1___awmod 0027                   init_PIC@id 01D0  
                   ??i1_rand 0022                     ??_Length 00A2              CompareStrings@i 00AD  
                   ??___lmul 00A8                     ??___wmul 00BF          __end_of_eeprom_read 1698  
              ??_init_NumPad 00A0                  __pdataBANK0 0053                  __pdataBANK1 00ED  
              ??_init_Timer0 00A0           i1___awmod@dividend 0029                ??_read_NumPad 00C1  
                   ??_strcat 00A9               _CompareStrings 0A49                    ___latbits 0002  
              __pcstackBANK0 0020                __pcstackBANK1 00A0                __pcstackBANK3 01C7  
          ??i1_UART_TxString 0034             i1___lmul@product 0079              _ConvertToString 05F4  
           eeprom_write@addr 00A2                     ?i1_srand 0070                  _datoSeriale 01A3  
            ??i1_UART_TxChar 0070                     ?___aldiv 00CA                     ?___almod 00A0  
                   ?___awmod 00B4             ___almod@dividend 00A4                    __pstrings 0800  
                ??_UART_init 00DD                     ?_lcdSend 00A0       __end_of_CompareStrings 0AA0  
        __end_of_init_NumPad 1630          __end_of_init_Timer0 1662                UART_TxChar@ch 00A1  
                strcopy@dest 00A4                  ??i1___awmod 007D          __end_of_read_NumPad 05F4  
                   ?_strcopy 00A0              ___aldiv@divisor 00CA            interrupt_function 0004  
            ___aldiv@counter 00D3               ___wmul@product 00BF          UART_TxString@is_ACK 00C1  
               _milliseconds 0040                    clear_ram0 1614                  _eeprom_read 1679  
              ??_UART_TxChar 00A0                _UART_TxString 0E5F                 ?_SplitPacket 0070  
               _old_num_rand 0190             ConvertToString@i 01CB             ConvertToString@j 01C9  
           ConvertToString@n 00D9                    lcdPrint@n 00A9                     i1___lmul 17BA  
                __stringbase 080F            ___wmul@multiplier 00BB                     i1___wmul 1698  
            ?_CompareStrings 00A7             i1UART_TxString@n 0036      __end_of_ConvertToString 0722  
          ___lmul@multiplier 00A0                     i1srand@x 0070           CompareStrings@str1 00AE  
         CompareStrings@str2 00A7                   _EECON1bits 018C               ?_UART_TxString 00C1  
           ??_ConcatToPacket 00B6            i1___awmod@divisor 0027            i1___awmod@counter 002B  
        __end_of_UART_TxChar 1679                  _init_NumPad 1625                  _init_Timer0 164D  
         __end_of__stringtab 0810                strcopy@source 00A0                  _read_NumPad 03EF  
                 strcat@dest 00AE                     __ptext10 1679                     __ptext11 07BF  
                   __ptext20 0961                     __ptext12 0B56                     __ptext21 16BF  
                   __ptext13 05F4                     __ptext30 0C1B                     __ptext22 0AFB  
                   __ptext14 177E                     __ptext31 161C                     __ptext23 1662  
                   __ptext15 0EDE                     __ptext32 091A                     __ptext24 0F65  
                   __ptext16 0722                     __ptext33 17BA                     __ptext25 16E6  
                   __ptext17 0E5F                     __ptext34 1698                     __ptext26 09A9  
                   __ptext18 163E                     __ptext35 0AA0                     __ptext27 0CFB  
                   __ptext19 0C8A                     __ptext36 1630                     __ptext28 08F2  
                   __ptext29 0D6F                     _lcdPrint 09F3             UART_TxString@str 00C5  
              read_NumPad@id 00CB              ___almod@divisor 00A0  ConcatToPacket@packet_length 00B7  
            ___almod@counter 00A9              i1UART_TxChar@ch 0071                     _init_LCD 0BB4  
                   _init_PIC 0DE7                     _old_i_id 0044                     _recieved 004C  
                   _pr_start 0049                     _num_rand 00E2              i1_UART_TxString 0C1B  
                 _INTCONbits 000B             ?_ConvertToString 00D9                     intlevel1 0000  
          UART_init@baudrate 00D9              ??_UART_TxString 00C2          ConvertToString@temp 01C7  
         SplitPacket@section 00B1                    stringcode 080A                  _UART_TxChar 1662  
                 Fill@length 00A8                   _OPTION_REG 0081            SplitPacket@i_part 00B3  
                lcdSend@dato 00A3                  lcdSend@tipo 00A0           ConvertToString@str 00DD  
                   strcopy@n 00A5                     stringdir 080A                     stringtab 0800  
               ___aldiv@sign 00D4                  lcdPrint@str 00A4                 ___almod@sign 00AA  
              ?_eeprom_write 00A0                   _STATUSbits 0003                 ?_eeprom_read 0070  
            SplitPacket@part 00AC               SplitPacket@len 00AA      __end_ofi1_UART_TxString 0C8A  
      __end_ofi1_UART_TxChar 163E               SplitPacket@pkt 00B5                 SplitPacket@i 00B6  
