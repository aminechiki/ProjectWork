

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Jun 30 15:38:07 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	maintext,global,class=CODE,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    61                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    62                           	dabs	1,0x7E,2
    63     0000                     
    64                           ; Version 2.40
    65                           ; Generated 17/11/2021 GMT
    66                           ; 
    67                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution. Publication is not required when
    81                           ;        this file is used in an embedded application.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC16F877A Definitions
    97                           ; 
    98                           ; SFR Addresses
    99     0000                     	;# 
   100     0001                     	;# 
   101     0002                     	;# 
   102     0003                     	;# 
   103     0004                     	;# 
   104     0005                     	;# 
   105     0006                     	;# 
   106     0007                     	;# 
   107     0008                     	;# 
   108     0009                     	;# 
   109     000A                     	;# 
   110     000B                     	;# 
   111     000C                     	;# 
   112     000D                     	;# 
   113     000E                     	;# 
   114     000E                     	;# 
   115     000F                     	;# 
   116     0010                     	;# 
   117     0011                     	;# 
   118     0012                     	;# 
   119     0013                     	;# 
   120     0014                     	;# 
   121     0015                     	;# 
   122     0015                     	;# 
   123     0016                     	;# 
   124     0017                     	;# 
   125     0018                     	;# 
   126     0019                     	;# 
   127     001A                     	;# 
   128     001B                     	;# 
   129     001B                     	;# 
   130     001C                     	;# 
   131     001D                     	;# 
   132     001E                     	;# 
   133     001F                     	;# 
   134     0081                     	;# 
   135     0085                     	;# 
   136     0086                     	;# 
   137     0087                     	;# 
   138     0088                     	;# 
   139     0089                     	;# 
   140     008C                     	;# 
   141     008D                     	;# 
   142     008E                     	;# 
   143     0091                     	;# 
   144     0092                     	;# 
   145     0093                     	;# 
   146     0094                     	;# 
   147     0098                     	;# 
   148     0099                     	;# 
   149     009C                     	;# 
   150     009D                     	;# 
   151     009E                     	;# 
   152     009F                     	;# 
   153     010C                     	;# 
   154     010D                     	;# 
   155     010E                     	;# 
   156     010F                     	;# 
   157     018C                     	;# 
   158     018D                     	;# 
   159     0000                     	;# 
   160     0001                     	;# 
   161     0002                     	;# 
   162     0003                     	;# 
   163     0004                     	;# 
   164     0005                     	;# 
   165     0006                     	;# 
   166     0007                     	;# 
   167     0008                     	;# 
   168     0009                     	;# 
   169     000A                     	;# 
   170     000B                     	;# 
   171     000C                     	;# 
   172     000D                     	;# 
   173     000E                     	;# 
   174     000E                     	;# 
   175     000F                     	;# 
   176     0010                     	;# 
   177     0011                     	;# 
   178     0012                     	;# 
   179     0013                     	;# 
   180     0014                     	;# 
   181     0015                     	;# 
   182     0015                     	;# 
   183     0016                     	;# 
   184     0017                     	;# 
   185     0018                     	;# 
   186     0019                     	;# 
   187     001A                     	;# 
   188     001B                     	;# 
   189     001B                     	;# 
   190     001C                     	;# 
   191     001D                     	;# 
   192     001E                     	;# 
   193     001F                     	;# 
   194     0081                     	;# 
   195     0085                     	;# 
   196     0086                     	;# 
   197     0087                     	;# 
   198     0088                     	;# 
   199     0089                     	;# 
   200     008C                     	;# 
   201     008D                     	;# 
   202     008E                     	;# 
   203     0091                     	;# 
   204     0092                     	;# 
   205     0093                     	;# 
   206     0094                     	;# 
   207     0098                     	;# 
   208     0099                     	;# 
   209     009C                     	;# 
   210     009D                     	;# 
   211     009E                     	;# 
   212     009F                     	;# 
   213     010C                     	;# 
   214     010D                     	;# 
   215     010E                     	;# 
   216     010F                     	;# 
   217     018C                     	;# 
   218     018D                     	;# 
   219     0000                     	;# 
   220     0001                     	;# 
   221     0002                     	;# 
   222     0003                     	;# 
   223     0004                     	;# 
   224     0005                     	;# 
   225     0006                     	;# 
   226     0007                     	;# 
   227     0008                     	;# 
   228     0009                     	;# 
   229     000A                     	;# 
   230     000B                     	;# 
   231     000C                     	;# 
   232     000D                     	;# 
   233     000E                     	;# 
   234     000E                     	;# 
   235     000F                     	;# 
   236     0010                     	;# 
   237     0011                     	;# 
   238     0012                     	;# 
   239     0013                     	;# 
   240     0014                     	;# 
   241     0015                     	;# 
   242     0015                     	;# 
   243     0016                     	;# 
   244     0017                     	;# 
   245     0018                     	;# 
   246     0019                     	;# 
   247     001A                     	;# 
   248     001B                     	;# 
   249     001B                     	;# 
   250     001C                     	;# 
   251     001D                     	;# 
   252     001E                     	;# 
   253     001F                     	;# 
   254     0081                     	;# 
   255     0085                     	;# 
   256     0086                     	;# 
   257     0087                     	;# 
   258     0088                     	;# 
   259     0089                     	;# 
   260     008C                     	;# 
   261     008D                     	;# 
   262     008E                     	;# 
   263     0091                     	;# 
   264     0092                     	;# 
   265     0093                     	;# 
   266     0094                     	;# 
   267     0098                     	;# 
   268     0099                     	;# 
   269     009C                     	;# 
   270     009D                     	;# 
   271     009E                     	;# 
   272     009F                     	;# 
   273     010C                     	;# 
   274     010D                     	;# 
   275     010E                     	;# 
   276     010F                     	;# 
   277     018C                     	;# 
   278     018D                     	;# 
   279     0000                     	;# 
   280     0001                     	;# 
   281     0002                     	;# 
   282     0003                     	;# 
   283     0004                     	;# 
   284     0005                     	;# 
   285     0006                     	;# 
   286     0007                     	;# 
   287     0008                     	;# 
   288     0009                     	;# 
   289     000A                     	;# 
   290     000B                     	;# 
   291     000C                     	;# 
   292     000D                     	;# 
   293     000E                     	;# 
   294     000E                     	;# 
   295     000F                     	;# 
   296     0010                     	;# 
   297     0011                     	;# 
   298     0012                     	;# 
   299     0013                     	;# 
   300     0014                     	;# 
   301     0015                     	;# 
   302     0015                     	;# 
   303     0016                     	;# 
   304     0017                     	;# 
   305     0018                     	;# 
   306     0019                     	;# 
   307     001A                     	;# 
   308     001B                     	;# 
   309     001B                     	;# 
   310     001C                     	;# 
   311     001D                     	;# 
   312     001E                     	;# 
   313     001F                     	;# 
   314     0081                     	;# 
   315     0085                     	;# 
   316     0086                     	;# 
   317     0087                     	;# 
   318     0088                     	;# 
   319     0089                     	;# 
   320     008C                     	;# 
   321     008D                     	;# 
   322     008E                     	;# 
   323     0091                     	;# 
   324     0092                     	;# 
   325     0093                     	;# 
   326     0094                     	;# 
   327     0098                     	;# 
   328     0099                     	;# 
   329     009C                     	;# 
   330     009D                     	;# 
   331     009E                     	;# 
   332     009F                     	;# 
   333     010C                     	;# 
   334     010D                     	;# 
   335     010E                     	;# 
   336     010F                     	;# 
   337     018C                     	;# 
   338     018D                     	;# 
   339                           
   340                           	psect	idataBANK0
   341     0813                     __pidataBANK0:
   342                           
   343                           ;initializer for _randx
   344     0813  3401               	retlw	1
   345     0814  3400               	retlw	0
   346     0815  3400               	retlw	0
   347     0816  3400               	retlw	0
   348                           
   349                           	psect	idataBANK1
   350     0003                     __pidataBANK1:
   351                           
   352                           ;initializer for _keypressed
   353     0003  3463               	retlw	99
   354                           
   355                           	psect	idataBANK3
   356     0811                     __pidataBANK3:
   357                           
   358                           ;initializer for _maxFail
   359     0811  3403               	retlw	3
   360                           
   361                           ;initializer for _initialize
   362     0812  3401               	retlw	1
   363                           
   364                           	psect	stringtext
   365     0700                     __pstringtext:
   366     0700                     stringtab:
   367     0700                     __stringtab:
   368                           
   369                           ;	String table - string pointers are 2 bytes each
   370     0700  1BFF               	btfsc	btemp+1,7
   371     0701  2F0A               	ljmp	stringcode
   372     0702  1383               	bcf	3,7
   373     0703  187F               	btfsc	btemp+1,0
   374     0704  1783               	bsf	3,7
   375     0705  0800               	movf	0,w
   376     0706  0A84               	incf	4,f
   377     0707  1903               	skipnz
   378     0708  0AFF               	incf	btemp+1,f
   379     0709  0008               	return
   380     070A                     stringcode:
   381     070A  087F               	movf	btemp+1,w
   382     070B  397F               	andlw	127
   383     070C  008A               	movwf	10
   384     070D  0804               	movf	4,w
   385     070E  0A84               	incf	4,f
   386     070F  1903               	skipnz
   387     0710  0AFF               	incf	btemp+1,f
   388     0711  0082               	movwf	2
   389     0712                     __stringbase:
   390     0712                     __end_of__stringtab:
   391     0712                     _keys:
   392     0712  342A               	retlw	42
   393     0713  3437               	retlw	55
   394     0714  3434               	retlw	52
   395     0715  3431               	retlw	49
   396     0716  3430               	retlw	48
   397     0717  3438               	retlw	56
   398     0718  3435               	retlw	53
   399     0719  3432               	retlw	50
   400     071A  3423               	retlw	35
   401     071B  3439               	retlw	57
   402     071C  3436               	retlw	54
   403     071D  3433               	retlw	51
   404     071E                     __end_of_keys:
   405     071E                     _rowMask:
   406     071E  3401               	retlw	1
   407     071F  3402               	retlw	2
   408     0720  3404               	retlw	4
   409     0721  3408               	retlw	8
   410     0722                     __end_of_rowMask:
   411     0722                     _colMask:
   412     0722  34FE               	retlw	254
   413     0723  34FD               	retlw	253
   414     0724  34FB               	retlw	251
   415     0725                     __end_of_colMask:
   416     000B                     _INTCONbits	set	11
   417     0003                     _STATUSbits	set	3
   418     001A                     _RCREG	set	26
   419     0019                     _TXREG	set	25
   420     000C                     _PIR1	set	12
   421     0018                     _RCSTA	set	24
   422     0006                     _PORTB	set	6
   423     0008                     _PORTD	set	8
   424     0009                     _PORTEbits	set	9
   425     0001                     _TMR0	set	1
   426     000B                     _INTCON	set	11
   427     005A                     _T0IF	set	90
   428     0065                     _RCIF	set	101
   429     008C                     _PIE1	set	140
   430     0099                     _SPBRG	set	153
   431     0098                     _TXSTA	set	152
   432     0087                     _TRISC	set	135
   433     0086                     _TRISB	set	134
   434     0089                     _TRISEbits	set	137
   435     0088                     _TRISD	set	136
   436     0081                     _OPTION_REG	set	129
   437     010C                     _EEDATA	set	268
   438     010D                     _EEADR	set	269
   439     018D                     _EECON2	set	397
   440     018C                     _EECON1	set	396
   441     018C                     _EECON1bits	set	396
   442     0725                     STR_19:
   443     0725  3423               	retlw	35	;'#'
   444     0726  343D               	retlw	61	;'='
   445     0727  3463               	retlw	99	;'c'
   446     0728  346F               	retlw	111	;'o'
   447     0729  346E               	retlw	110	;'n'
   448     072A  3466               	retlw	102	;'f'
   449     072B  342E               	retlw	46	;'.'
   450     072C  3420               	retlw	32	;' '
   451     072D  342A               	retlw	42	;'*'
   452     072E  343D               	retlw	61	;'='
   453     072F  3463               	retlw	99	;'c'
   454     0730  3461               	retlw	97	;'a'
   455     0731  346E               	retlw	110	;'n'
   456     0732  3463               	retlw	99	;'c'
   457     0733  342E               	retlw	46	;'.'
   458     0734  3400               	retlw	0
   459     0735  3400               	retlw	0
   460     0736  3400               	retlw	0
   461     0737                     STR_6:
   462     0737  3423               	retlw	35	;'#'
   463     0738  3420               	retlw	32	;' '
   464     0739  3470               	retlw	112	;'p'
   465     073A  3465               	retlw	101	;'e'
   466     073B  3472               	retlw	114	;'r'
   467     073C  3420               	retlw	32	;' '
   468     073D  3461               	retlw	97	;'a'
   469     073E  346C               	retlw	108	;'l'
   470     073F  3474               	retlw	116	;'t'
   471     0740  3472               	retlw	114	;'r'
   472     0741  346F               	retlw	111	;'o'
   473     0742  3420               	retlw	32	;' '
   474     0743  3463               	retlw	99	;'c'
   475     0744  346F               	retlw	111	;'o'
   476     0745  3464               	retlw	100	;'d'
   477     0746  342E               	retlw	46	;'.'
   478     0747  3400               	retlw	0
   479     0748  3400               	retlw	0
   480     0749                     STR_11:
   481     0749  3449               	retlw	73	;'I'
   482     074A  346E               	retlw	110	;'n'
   483     074B  3473               	retlw	115	;'s'
   484     074C  3465               	retlw	101	;'e'
   485     074D  3472               	retlw	114	;'r'
   486     074E  3469               	retlw	105	;'i'
   487     074F  3473               	retlw	115	;'s'
   488     0750  3463               	retlw	99	;'c'
   489     0751  3469               	retlw	105	;'i'
   490     0752  3420               	retlw	32	;' '
   491     0753  3463               	retlw	99	;'c'
   492     0754  346F               	retlw	111	;'o'
   493     0755  3464               	retlw	100	;'d'
   494     0756  3469               	retlw	105	;'i'
   495     0757  3463               	retlw	99	;'c'
   496     0758  3465               	retlw	101	;'e'
   497     0759  3400               	retlw	0
   498     075A  3400               	retlw	0
   499     075B                     STR_7:
   500     075B  3423               	retlw	35	;'#'
   501     075C  343D               	retlw	61	;'='
   502     075D  3463               	retlw	99	;'c'
   503     075E  346F               	retlw	111	;'o'
   504     075F  346E               	retlw	110	;'n'
   505     0760  3466               	retlw	102	;'f'
   506     0761  342E               	retlw	46	;'.'
   507     0762  3420               	retlw	32	;' '
   508     0763  342A               	retlw	42	;'*'
   509     0764  343D               	retlw	61	;'='
   510     0765  3463               	retlw	99	;'c'
   511     0766  3461               	retlw	97	;'a'
   512     0767  346E               	retlw	110	;'n'
   513     0768  3463               	retlw	99	;'c'
   514     0769  342E               	retlw	46	;'.'
   515     076A  3400               	retlw	0
   516     076B  3400               	retlw	0
   517     076C                     STR_9:
   518     076C  3441               	retlw	65	;'A'
   519     076D  3474               	retlw	116	;'t'
   520     076E  3474               	retlw	116	;'t'
   521     076F  3465               	retlw	101	;'e'
   522     0770  346E               	retlw	110	;'n'
   523     0771  3464               	retlw	100	;'d'
   524     0772  3469               	retlw	105	;'i'
   525     0773  3420               	retlw	32	;' '
   526     0774  3433               	retlw	51	;'3'
   527     0775  3430               	retlw	48	;'0'
   528     0776  3473               	retlw	115	;'s'
   529     0777  342E               	retlw	46	;'.'
   530     0778  342E               	retlw	46	;'.'
   531     0779  342E               	retlw	46	;'.'
   532     077A  3400               	retlw	0
   533     077B  3400               	retlw	0
   534     077C                     STR_20:
   535     077C  3449               	retlw	73	;'I'
   536     077D  346E               	retlw	110	;'n'
   537     077E  3473               	retlw	115	;'s'
   538     077F  3465               	retlw	101	;'e'
   539     0780  3472               	retlw	114	;'r'
   540     0781  342E               	retlw	46	;'.'
   541     0782  3420               	retlw	32	;' '
   542     0783  3449               	retlw	73	;'I'
   543     0784  3444               	retlw	68	;'D'
   544     0785  3420               	retlw	32	;' '
   545     0786  3450               	retlw	80	;'P'
   546     0787  3449               	retlw	73	;'I'
   547     0788  3443               	retlw	67	;'C'
   548     0789  343A               	retlw	58	;':'
   549     078A  3400               	retlw	0
   550     078B  3400               	retlw	0
   551     078C                     STR_17:
   552     078C  3454               	retlw	84	;'T'
   553     078D  3465               	retlw	101	;'e'
   554     078E  346E               	retlw	110	;'n'
   555     078F  3474               	retlw	116	;'t'
   556     0790  342E               	retlw	46	;'.'
   557     0791  3420               	retlw	32	;' '
   558     0792  3465               	retlw	101	;'e'
   559     0793  3473               	retlw	115	;'s'
   560     0794  3461               	retlw	97	;'a'
   561     0795  3475               	retlw	117	;'u'
   562     0796  3472               	retlw	114	;'r'
   563     0797  3469               	retlw	105	;'i'
   564     0798  3474               	retlw	116	;'t'
   565     0799  3469               	retlw	105	;'i'
   566     079A  3400               	retlw	0
   567     079B  3400               	retlw	0
   568     079C                     STR_21:
   569     079C  344D               	retlw	77	;'M'
   570     079D  3449               	retlw	73	;'I'
   571     079E  344E               	retlw	78	;'N'
   572     079F  343D               	retlw	61	;'='
   573     07A0  3430               	retlw	48	;'0'
   574     07A1  342C               	retlw	44	;','
   575     07A2  344D               	retlw	77	;'M'
   576     07A3  3441               	retlw	65	;'A'
   577     07A4  3458               	retlw	88	;'X'
   578     07A5  343D               	retlw	61	;'='
   579     07A6  3432               	retlw	50	;'2'
   580     07A7  3435               	retlw	53	;'5'
   581     07A8  3430               	retlw	48	;'0'
   582     07A9  3400               	retlw	0
   583     07AA  3400               	retlw	0
   584     07AB                     STR_15:
   585     07AB  3443               	retlw	67	;'C'
   586     07AC  346F               	retlw	111	;'o'
   587     07AD  3464               	retlw	100	;'d'
   588     07AE  3469               	retlw	105	;'i'
   589     07AF  3463               	retlw	99	;'c'
   590     07B0  3465               	retlw	101	;'e'
   591     07B1  3420               	retlw	32	;' '
   592     07B2  3465               	retlw	101	;'e'
   593     07B3  3472               	retlw	114	;'r'
   594     07B4  3472               	retlw	114	;'r'
   595     07B5  3461               	retlw	97	;'a'
   596     07B6  3474               	retlw	116	;'t'
   597     07B7  346F               	retlw	111	;'o'
   598     07B8  3400               	retlw	0
   599     07B9  3400               	retlw	0
   600     07BA                     STR_12:
   601     07BA  3454               	retlw	84	;'T'
   602     07BB  3465               	retlw	101	;'e'
   603     07BC  346E               	retlw	110	;'n'
   604     07BD  3474               	retlw	116	;'t'
   605     07BE  3461               	retlw	97	;'a'
   606     07BF  3474               	retlw	116	;'t'
   607     07C0  3469               	retlw	105	;'i'
   608     07C1  3476               	retlw	118	;'v'
   609     07C2  3469               	retlw	105	;'i'
   610     07C3  343A               	retlw	58	;':'
   611     07C4  3420               	retlw	32	;' '
   612     07C5  3400               	retlw	0
   613     07C6  3400               	retlw	0
   614     07C7                     STR_13:
   615     07C7  3442               	retlw	66	;'B'
   616     07C8  3465               	retlw	101	;'e'
   617     07C9  346E               	retlw	110	;'n'
   618     07CA  3476               	retlw	118	;'v'
   619     07CB  3465               	retlw	101	;'e'
   620     07CC  346E               	retlw	110	;'n'
   621     07CD  3475               	retlw	117	;'u'
   622     07CE  3474               	retlw	116	;'t'
   623     07CF  346F               	retlw	111	;'o'
   624     07D0  3421               	retlw	33	;'!'
   625     07D1  3400               	retlw	0
   626     07D2  3400               	retlw	0
   627     07D3                     STR_4:
   628     07D3  3449               	retlw	73	;'I'
   629     07D4  3444               	retlw	68	;'D'
   630     07D5  3420               	retlw	32	;' '
   631     07D6  3453               	retlw	83	;'S'
   632     07D7  3461               	retlw	97	;'a'
   633     07D8  346C               	retlw	108	;'l'
   634     07D9  3476               	retlw	118	;'v'
   635     07DA  3461               	retlw	97	;'a'
   636     07DB  3474               	retlw	116	;'t'
   637     07DC  346F               	retlw	111	;'o'
   638     07DD  3400               	retlw	0
   639     07DE  3400               	retlw	0
   640     07DF                     STR_1:
   641     07DF  3450               	retlw	80	;'P'
   642     07E0  3472               	retlw	114	;'r'
   643     07E1  3465               	retlw	101	;'e'
   644     07E2  346D               	retlw	109	;'m'
   645     07E3  3469               	retlw	105	;'i'
   646     07E4  3420               	retlw	32	;' '
   647     07E5  3427               	retlw	39	;'''
   648     07E6  3423               	retlw	35	;'#'
   649     07E7  3427               	retlw	39	;'''
   650     07E8  3400               	retlw	0
   651     07E9  3400               	retlw	0
   652     07EA                     STR_5:
   653     07EA  3443               	retlw	67	;'C'
   654     07EB  346F               	retlw	111	;'o'
   655     07EC  3464               	retlw	100	;'d'
   656     07ED  3469               	retlw	105	;'i'
   657     07EE  3463               	retlw	99	;'c'
   658     07EF  3465               	retlw	101	;'e'
   659     07F0  343A               	retlw	58	;':'
   660     07F1  3420               	retlw	32	;' '
   661     07F2  3400               	retlw	0
   662     07F3  3400               	retlw	0
   663     07F4                     STR_3:
   664     07F4  3449               	retlw	73	;'I'
   665     07F5  3444               	retlw	68	;'D'
   666     07F6  3420               	retlw	32	;' '
   667     07F7  343E               	retlw	62	;'>'
   668     07F8  3420               	retlw	32	;' '
   669     07F9  3432               	retlw	50	;'2'
   670     07FA  3435               	retlw	53	;'5'
   671     07FB  3430               	retlw	48	;'0'
   672     07FC  3400               	retlw	0
   673     07FD  3400               	retlw	0
   674     07FE                     STR_2:
   675     07FE  3445               	retlw	69	;'E'
   676     07FF  3452               	retlw	82	;'R'
   677     0800  3452               	retlw	82	;'R'
   678     0801  344F               	retlw	79	;'O'
   679     0802  3452               	retlw	82	;'R'
   680     0803  3445               	retlw	69	;'E'
   681     0804  3400               	retlw	0
   682     0805  3400               	retlw	0
   683     0806                     STR_18:
   684     0806  3431               	retlw	49	;'1'
   685     0807  342F               	retlw	47	;'/'
   686     0808  3430               	retlw	48	;'0'
   687     0809  3400               	retlw	0
   688     080A                     STR_14:
   689     080A  3431               	retlw	49	;'1'
   690     080B  342F               	retlw	47	;'/'
   691     080C  3431               	retlw	49	;'1'
   692     080D  3400               	retlw	0
   693     080E                     STR_10:
   694     080E  3432               	retlw	50	;'2'
   695     080F  3400               	retlw	0
   696     07EA                     
   697                           	psect	cinit
   698     0013                     start_initialization:	
   699                           ; #config settings
   700                           
   701     0013                     __initialization:
   702                           
   703                           ; Initialize objects allocated to BANK3
   704     0013  1683               	bsf	3,5	;RP0=1, select bank3
   705     0014  1703               	bsf	3,6	;RP1=1, select bank3
   706     0015  120A  158A  2011  120A  118A  	fcall	__pidataBANK3	;fetch initializer
   707     001A  00D3               	movwf	__pdataBANK3& (0+127)
   708     001B  120A  158A  2012  120A  118A  	fcall	__pidataBANK3+1	;fetch initializer
   709     0020  00D4               	movwf	(__pdataBANK3+1)& (0+127)
   710                           
   711                           ; Initialize objects allocated to BANK1
   712     0021  1683               	bsf	3,5	;RP0=1, select bank1
   713     0022  1303               	bcf	3,6	;RP1=0, select bank1
   714     0023  120A  118A  2003  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   715     0028  00EE               	movwf	__pdataBANK1& (0+127)
   716                           
   717                           ; Initialize objects allocated to BANK0
   718     0029  1283               	bcf	3,5	;RP0=0, select bank0
   719     002A  1303               	bcf	3,6	;RP1=0, select bank0
   720     002B  120A  158A  2013  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   721     0030  00D0               	movwf	__pdataBANK0& (0+127)
   722     0031  120A  158A  2014  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   723     0036  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   724     0037  120A  158A  2015  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   725     003C  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   726     003D  120A  158A  2016  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   727     0042  00D3               	movwf	(__pdataBANK0+3)& (0+127)
   728                           
   729                           ; Clear objects allocated to BANK3
   730     0043  1783               	bsf	3,7	;select IRP bank2
   731     0044  3090               	movlw	low __pbssBANK3
   732     0045  0084               	movwf	4
   733     0046  30CA               	movlw	low (__pbssBANK3+58)
   734     0047  120A  118A  26F8  120A  118A  	fcall	clear_ram0
   735                           
   736                           ; Clear objects allocated to BANK2
   737     004C  3010               	movlw	low __pbssBANK2
   738     004D  0084               	movwf	4
   739     004E  3042               	movlw	low (__pbssBANK2+50)
   740     004F  120A  118A  26F8  120A  118A  	fcall	clear_ram0
   741                           
   742                           ; Clear objects allocated to BANK1
   743     0054  1383               	bcf	3,7	;select IRP bank0
   744     0055  30E3               	movlw	low __pbssBANK1
   745     0056  0084               	movwf	4
   746     0057  30EE               	movlw	low (__pbssBANK1+11)
   747     0058  120A  118A  26F8  120A  118A  	fcall	clear_ram0
   748                           
   749                           ; Clear objects allocated to BANK0
   750     005D  303C               	movlw	low __pbssBANK0
   751     005E  0084               	movwf	4
   752     005F  3050               	movlw	low (__pbssBANK0+20)
   753     0060  120A  118A  26F8  120A  118A  	fcall	clear_ram0
   754     0065                     end_of_initialization:	
   755                           ;End of C runtime variable initialization code
   756                           
   757     0065                     __end_of__initialization:
   758     0065  0183               	clrf	3
   759     0066  120A  118A  2869   	ljmp	_main	;jump to C main() function
   760                           
   761                           	psect	bssBANK0
   762     003C                     __pbssBANK0:
   763     003C                     _countSeconds:
   764     003C                     	ds	2
   765     003E                     _iS:
   766     003E                     	ds	1
   767     003F                     _datoSeriale:
   768     003F                     	ds	17
   769                           
   770                           	psect	dataBANK0
   771     0050                     __pdataBANK0:
   772     0050                     _randx:
   773     0050                     	ds	4
   774                           
   775                           	psect	bssBANK1
   776     00E3                     __pbssBANK1:
   777     00E3                     _seconds:
   778     00E3                     	ds	4
   779     00E7                     _milliseconds:
   780     00E7                     	ds	4
   781     00EB                     _keyf:
   782     00EB                     	ds	1
   783     00EC                     _rowScan:
   784     00EC                     	ds	1
   785     00ED                     _colScan:
   786     00ED                     	ds	1
   787                           
   788                           	psect	dataBANK1
   789     00EE                     __pdataBANK1:
   790     00EE                     _keypressed:
   791     00EE                     	ds	1
   792                           
   793                           	psect	bssBANK3
   794     0190                     __pbssBANK3:
   795     0190                     _old_num_rand:
   796     0190                     	ds	2
   797     0192                     _num_rand:
   798     0192                     	ds	2
   799     0194                     _pr_countdown:
   800     0194                     	ds	1
   801     0195                     _pr_succ:
   802     0195                     	ds	1
   803     0196                     _pr_err_max:
   804     0196                     	ds	1
   805     0197                     _pr_start:
   806     0197                     	ds	1
   807     0198                     _fail:
   808     0198                     	ds	1
   809     0199                     _success:
   810     0199                     	ds	1
   811     019A                     _compare:
   812     019A                     	ds	1
   813     019B                     _recieved:
   814     019B                     	ds	1
   815     019C                     _old_iT:
   816     019C                     	ds	1
   817     019D                     _iT:
   818     019D                     	ds	1
   819     019E                     _type:
   820     019E                     	ds	1
   821     019F                     _source:
   822     019F                     	ds	1
   823     01A0                     _old_i_id:
   824     01A0                     	ds	1
   825     01A1                     _i_id:
   826     01A1                     	ds	1
   827     01A2                     _datoTastierino:
   828     01A2                     	ds	17
   829     01B3                     _packet:
   830     01B3                     	ds	15
   831     01C2                     _id_dest:
   832     01C2                     	ds	4
   833     01C6                     _PIC_ID:
   834     01C6                     	ds	4
   835                           
   836                           	psect	dataBANK3
   837     01D3                     __pdataBANK3:
   838     01D3                     _maxFail:
   839     01D3                     	ds	1
   840     01D4                     _initialize:
   841     01D4                     	ds	1
   842                           
   843                           	psect	bssBANK2
   844     0110                     __pbssBANK2:
   845     0110                     _dato:
   846     0110                     	ds	50
   847                           
   848                           	psect	clrtext
   849     06F8                     clear_ram0:	
   850                           ;	Called with FSR containing the base address, and
   851                           ;	W with the last address+1
   852                           
   853     06F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   854     06F9                     clrloop0:
   855     06F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   856     06FA  0A84               	incf	4,f	;increment pointer
   857     06FB  0604               	xorwf	4,w	;XOR with final address
   858     06FC  1903               	btfsc	3,2	;have we reached the end yet?
   859     06FD  3400               	retlw	0	;all done for this memory range, return
   860     06FE  0604               	xorwf	4,w	;XOR again to restore value
   861     06FF  2EF9               	goto	clrloop0	;do the next byte
   862                           
   863                           	psect	cstackBANK3
   864     01CA                     __pcstackBANK3:
   865     01CA                     ConvertToString@temp:
   866                           
   867                           ; 2 bytes @ 0x0
   868     01CA                     	ds	2
   869     01CC                     ConvertToString@j:
   870                           
   871                           ; 2 bytes @ 0x2
   872     01CC                     	ds	2
   873     01CE                     ConvertToString@i:
   874                           
   875                           ; 2 bytes @ 0x4
   876     01CE                     	ds	2
   877     01D0                     ConvertToString@n_cifre:
   878                           
   879                           ; 1 bytes @ 0x6
   880     01D0                     	ds	1
   881     01D1                     init_PIC@id:
   882                           
   883                           ; 2 bytes @ 0x7
   884     01D1                     	ds	2
   885                           
   886                           	psect	cstackBANK2
   887     0142                     __pcstackBANK2:
   888     0142                     main@num_rand_s:
   889                           
   890                           ; 16 bytes @ 0x0
   891     0142                     	ds	16
   892     0152                     main@num_rand_s_228:
   893                           
   894                           ; 16 bytes @ 0x10
   895     0152                     	ds	16
   896                           
   897                           	psect	cstackBANK1
   898     00A0                     __pcstackBANK1:
   899     00A0                     ?_lcdSend:
   900     00A0                     ??_init_NumPad:	
   901                           ; 1 bytes @ 0x0
   902                           
   903     00A0                     ??_init_Timer0:	
   904                           ; 1 bytes @ 0x0
   905                           
   906     00A0                     ??_eeprom_read:	
   907                           ; 1 bytes @ 0x0
   908                           
   909     00A0                     ?_strcopy:	
   910                           ; 1 bytes @ 0x0
   911                           
   912     00A0                     ?_eeprom_write:	
   913                           ; 1 bytes @ 0x0
   914                           
   915     00A0                     ?_srand:	
   916                           ; 1 bytes @ 0x0
   917                           
   918     00A0                     ??_UART_TxChar:	
   919                           ; 1 bytes @ 0x0
   920                           
   921     00A0                     ?_Length:	
   922                           ; 1 bytes @ 0x0
   923                           
   924     00A0                     ?___lmul:	
   925                           ; 2 bytes @ 0x0
   926                           
   927     00A0                     ?___almod:	
   928                           ; 4 bytes @ 0x0
   929                           
   930     00A0                     lcdSend@tipo:	
   931                           ; 4 bytes @ 0x0
   932                           
   933     00A0                     eeprom_write@value:	
   934                           ; 1 bytes @ 0x0
   935                           
   936     00A0                     Length@str:	
   937                           ; 1 bytes @ 0x0
   938                           
   939     00A0                     strcopy@dest:	
   940                           ; 2 bytes @ 0x0
   941                           
   942     00A0                     srand@x:	
   943                           ; 2 bytes @ 0x0
   944                           
   945     00A0                     ___lmul@multiplier:	
   946                           ; 2 bytes @ 0x0
   947                           
   948     00A0                     ___almod@divisor:	
   949                           ; 4 bytes @ 0x0
   950                           
   951                           
   952                           ; 4 bytes @ 0x0
   953     00A0                     	ds	1
   954     00A1                     ??_lcdSend:
   955     00A1                     ??_eeprom_write:	
   956                           ; 1 bytes @ 0x1
   957                           
   958     00A1                     UART_TxChar@ch:	
   959                           ; 1 bytes @ 0x1
   960                           
   961     00A1                     eeprom_read@addr:	
   962                           ; 1 bytes @ 0x1
   963                           
   964                           
   965                           ; 1 bytes @ 0x1
   966     00A1                     	ds	1
   967     00A2                     ??_Length:
   968     00A2                     strcopy@source:	
   969                           ; 1 bytes @ 0x2
   970                           
   971     00A2                     eeprom_write@addr:	
   972                           ; 1 bytes @ 0x2
   973                           
   974                           
   975                           ; 1 bytes @ 0x2
   976     00A2                     	ds	1
   977     00A3                     ??_strcopy:
   978     00A3                     lcdSend@dato:	
   979                           ; 1 bytes @ 0x3
   980                           
   981                           
   982                           ; 1 bytes @ 0x3
   983     00A3                     	ds	1
   984     00A4                     ?_lcdPrint:
   985     00A4                     ??_init_LCD:	
   986                           ; 1 bytes @ 0x4
   987                           
   988     00A4                     lcdPrint@str:	
   989                           ; 1 bytes @ 0x4
   990                           
   991     00A4                     ___lmul@multiplicand:	
   992                           ; 2 bytes @ 0x4
   993                           
   994     00A4                     ___almod@dividend:	
   995                           ; 4 bytes @ 0x4
   996                           
   997                           
   998                           ; 4 bytes @ 0x4
   999     00A4                     	ds	1
  1000     00A5                     Length@len:
  1001                           
  1002                           ; 2 bytes @ 0x5
  1003     00A5                     	ds	1
  1004     00A6                     ??_lcdPrint:
  1005                           
  1006                           ; 1 bytes @ 0x6
  1007     00A6                     	ds	1
  1008     00A7                     ?_CompareStrings:
  1009     00A7                     ??_Fill:	
  1010                           ; 1 bytes @ 0x7
  1011                           
  1012     00A7                     ?_strcat:	
  1013                           ; 1 bytes @ 0x7
  1014                           
  1015     00A7                     strcat@source:	
  1016                           ; 2 bytes @ 0x7
  1017                           
  1018     00A7                     CompareStrings@str1:	
  1019                           ; 2 bytes @ 0x7
  1020                           
  1021                           
  1022                           ; 2 bytes @ 0x7
  1023     00A7                     	ds	1
  1024     00A8                     ??___lmul:
  1025     00A8                     ??___almod:	
  1026                           ; 1 bytes @ 0x8
  1027                           
  1028     00A8                     strcopy@n:	
  1029                           ; 1 bytes @ 0x8
  1030                           
  1031     00A8                     Fill@length:	
  1032                           ; 2 bytes @ 0x8
  1033                           
  1034                           
  1035                           ; 2 bytes @ 0x8
  1036     00A8                     	ds	1
  1037     00A9                     ??_strcat:
  1038     00A9                     CompareStrings@str2:	
  1039                           ; 1 bytes @ 0x9
  1040                           
  1041     00A9                     ___almod@counter:	
  1042                           ; 1 bytes @ 0x9
  1043                           
  1044     00A9                     lcdPrint@n:	
  1045                           ; 1 bytes @ 0x9
  1046                           
  1047     00A9                     ___lmul@product:	
  1048                           ; 2 bytes @ 0x9
  1049                           
  1050                           
  1051                           ; 4 bytes @ 0x9
  1052     00A9                     	ds	1
  1053     00AA                     ??_SplitPacket:
  1054     00AA                     ??_CompareStrings:	
  1055                           ; 1 bytes @ 0xA
  1056                           
  1057     00AA                     Fill@id:	
  1058                           ; 1 bytes @ 0xA
  1059                           
  1060     00AA                     ___almod@sign:	
  1061                           ; 1 bytes @ 0xA
  1062                           
  1063                           
  1064                           ; 1 bytes @ 0xA
  1065     00AA                     	ds	3
  1066     00AD                     ?_rand:
  1067     00AD                     SplitPacket@len:	
  1068                           ; 2 bytes @ 0xD
  1069                           
  1070                           
  1071                           ; 2 bytes @ 0xD
  1072     00AD                     	ds	1
  1073     00AE                     strcat@dest:
  1074     00AE                     CompareStrings@i:	
  1075                           ; 1 bytes @ 0xE
  1076                           
  1077                           
  1078                           ; 1 bytes @ 0xE
  1079     00AE                     	ds	1
  1080     00AF                     ??_rand:
  1081     00AF                     strcat@n:	
  1082                           ; 1 bytes @ 0xF
  1083                           
  1084     00AF                     SplitPacket@part:	
  1085                           ; 2 bytes @ 0xF
  1086                           
  1087                           
  1088                           ; 5 bytes @ 0xF
  1089     00AF                     	ds	2
  1090     00B1                     strcat@length_dest:
  1091                           
  1092                           ; 2 bytes @ 0x11
  1093     00B1                     	ds	2
  1094     00B3                     ?_ConcatToPacket:
  1095     00B3                     ConcatToPacket@str:	
  1096                           ; 1 bytes @ 0x13
  1097                           
  1098                           
  1099                           ; 2 bytes @ 0x13
  1100     00B3                     	ds	1
  1101     00B4                     ?___awmod:
  1102     00B4                     SplitPacket@section:	
  1103                           ; 2 bytes @ 0x14
  1104                           
  1105     00B4                     ___awmod@divisor:	
  1106                           ; 2 bytes @ 0x14
  1107                           
  1108                           
  1109                           ; 2 bytes @ 0x14
  1110     00B4                     	ds	1
  1111     00B5                     ConcatToPacket@delim:
  1112                           
  1113                           ; 1 bytes @ 0x15
  1114     00B5                     	ds	1
  1115     00B6                     ??_ConcatToPacket:
  1116     00B6                     SplitPacket@i_part:	
  1117                           ; 1 bytes @ 0x16
  1118                           
  1119     00B6                     ___awmod@dividend:	
  1120                           ; 2 bytes @ 0x16
  1121                           
  1122                           
  1123                           ; 2 bytes @ 0x16
  1124     00B6                     	ds	1
  1125     00B7                     ConcatToPacket@packet_length:
  1126                           
  1127                           ; 2 bytes @ 0x17
  1128     00B7                     	ds	1
  1129     00B8                     ??___awmod:
  1130     00B8                     SplitPacket@pkt:	
  1131                           ; 1 bytes @ 0x18
  1132                           
  1133                           
  1134                           ; 1 bytes @ 0x18
  1135     00B8                     	ds	1
  1136     00B9                     ConcatToPacket@pkt:
  1137     00B9                     ___awmod@counter:	
  1138                           ; 1 bytes @ 0x19
  1139                           
  1140     00B9                     SplitPacket@i:	
  1141                           ; 1 bytes @ 0x19
  1142                           
  1143                           
  1144                           ; 2 bytes @ 0x19
  1145     00B9                     	ds	1
  1146     00BA                     ___awmod@sign:
  1147                           
  1148                           ; 1 bytes @ 0x1A
  1149     00BA                     	ds	1
  1150     00BB                     ?___wmul:
  1151     00BB                     ___wmul@multiplier:	
  1152                           ; 2 bytes @ 0x1B
  1153                           
  1154                           
  1155                           ; 2 bytes @ 0x1B
  1156     00BB                     	ds	2
  1157     00BD                     ___wmul@multiplicand:
  1158                           
  1159                           ; 2 bytes @ 0x1D
  1160     00BD                     	ds	2
  1161     00BF                     ___wmul@product:
  1162                           
  1163                           ; 2 bytes @ 0x1F
  1164     00BF                     	ds	2
  1165     00C1                     ??_read_NumPad:
  1166     00C1                     ?_UART_TxString:	
  1167                           ; 1 bytes @ 0x21
  1168                           
  1169     00C1                     ?_pow:	
  1170                           ; 1 bytes @ 0x21
  1171                           
  1172     00C1                     pow@exp:	
  1173                           ; 2 bytes @ 0x21
  1174                           
  1175     00C1                     UART_TxString@is_ACK:	
  1176                           ; 1 bytes @ 0x21
  1177                           
  1178                           
  1179                           ; 1 bytes @ 0x21
  1180     00C1                     	ds	1
  1181     00C2                     ??_UART_TxString:
  1182                           
  1183                           ; 1 bytes @ 0x22
  1184     00C2                     	ds	1
  1185     00C3                     ??_pow:
  1186     00C3                     UART_TxString@n:	
  1187                           ; 1 bytes @ 0x23
  1188                           
  1189                           
  1190                           ; 2 bytes @ 0x23
  1191     00C3                     	ds	2
  1192     00C5                     pow@b:
  1193     00C5                     UART_TxString@str:	
  1194                           ; 1 bytes @ 0x25
  1195                           
  1196                           
  1197                           ; 1 bytes @ 0x25
  1198     00C5                     	ds	1
  1199     00C6                     pow@i:
  1200                           
  1201                           ; 2 bytes @ 0x26
  1202     00C6                     	ds	2
  1203     00C8                     pow@n:
  1204                           
  1205                           ; 2 bytes @ 0x28
  1206     00C8                     	ds	2
  1207     00CA                     ?___aldiv:
  1208     00CA                     ___aldiv@divisor:	
  1209                           ; 4 bytes @ 0x2A
  1210                           
  1211                           
  1212                           ; 4 bytes @ 0x2A
  1213     00CA                     	ds	1
  1214     00CB                     read_NumPad@id:
  1215                           
  1216                           ; 2 bytes @ 0x2B
  1217     00CB                     	ds	3
  1218     00CE                     ___aldiv@dividend:
  1219                           
  1220                           ; 4 bytes @ 0x2E
  1221     00CE                     	ds	4
  1222     00D2                     ??___aldiv:
  1223                           
  1224                           ; 1 bytes @ 0x32
  1225     00D2                     	ds	1
  1226     00D3                     ___aldiv@counter:
  1227                           
  1228                           ; 1 bytes @ 0x33
  1229     00D3                     	ds	1
  1230     00D4                     ___aldiv@sign:
  1231                           
  1232                           ; 1 bytes @ 0x34
  1233     00D4                     	ds	1
  1234     00D5                     ___aldiv@quotient:
  1235                           
  1236                           ; 4 bytes @ 0x35
  1237     00D5                     	ds	4
  1238     00D9                     ?_ConvertToString:
  1239     00D9                     ?_UART_init:	
  1240                           ; 1 bytes @ 0x39
  1241                           
  1242     00D9                     ConvertToString@n:	
  1243                           ; 1 bytes @ 0x39
  1244                           
  1245     00D9                     UART_init@baudrate:	
  1246                           ; 4 bytes @ 0x39
  1247                           
  1248                           
  1249                           ; 4 bytes @ 0x39
  1250     00D9                     	ds	4
  1251     00DD                     ??_UART_init:
  1252     00DD                     ConvertToString@str:	
  1253                           ; 1 bytes @ 0x3D
  1254                           
  1255                           
  1256                           ; 1 bytes @ 0x3D
  1257     00DD                     	ds	1
  1258     00DE                     ??_ConvertToString:
  1259                           
  1260                           ; 1 bytes @ 0x3E
  1261     00DE                     	ds	3
  1262     00E1                     ??_init_PIC:
  1263                           
  1264                           ; 1 bytes @ 0x41
  1265     00E1                     	ds	2
  1266                           
  1267                           	psect	cstackCOMMON
  1268     0070                     __pcstackCOMMON:
  1269     0070                     ?_init_PIC:
  1270     0070                     ?_read_NumPad:	
  1271                           ; 1 bytes @ 0x0
  1272                           
  1273     0070                     ?_SplitPacket:	
  1274                           ; 1 bytes @ 0x0
  1275                           
  1276     0070                     ?_init_LCD:	
  1277                           ; 1 bytes @ 0x0
  1278                           
  1279     0070                     ?_init_NumPad:	
  1280                           ; 1 bytes @ 0x0
  1281                           
  1282     0070                     ?_init_Timer0:	
  1283                           ; 1 bytes @ 0x0
  1284                           
  1285     0070                     ?_eeprom_read:	
  1286                           ; 1 bytes @ 0x0
  1287                           
  1288     0070                     ?_Fill:	
  1289                           ; 1 bytes @ 0x0
  1290                           
  1291     0070                     ?_main:	
  1292                           ; 1 bytes @ 0x0
  1293                           
  1294     0070                     ?_UART_TxChar:	
  1295                           ; 1 bytes @ 0x0
  1296                           
  1297     0070                     ?_IRS:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300     0070                     ?i1_UART_TxChar:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303     0070                     ??i1_UART_TxChar:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306     0070                     ?i1_srand:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309     0070                     ?i1___lmul:	
  1310                           ; 1 bytes @ 0x0
  1311                           
  1312     0070                     i1srand@x:	
  1313                           ; 4 bytes @ 0x0
  1314                           
  1315     0070                     i1___lmul@multiplier:	
  1316                           ; 2 bytes @ 0x0
  1317                           
  1318                           
  1319                           ; 4 bytes @ 0x0
  1320     0070                     	ds	1
  1321     0071                     i1UART_TxChar@ch:
  1322                           
  1323                           ; 1 bytes @ 0x1
  1324     0071                     	ds	1
  1325     0072                     ??i1_srand:
  1326                           
  1327                           ; 1 bytes @ 0x2
  1328     0072                     	ds	2
  1329     0074                     i1___lmul@multiplicand:
  1330                           
  1331                           ; 4 bytes @ 0x4
  1332     0074                     	ds	4
  1333     0078                     ??i1___lmul:
  1334                           
  1335                           ; 1 bytes @ 0x8
  1336     0078                     	ds	1
  1337     0079                     i1___lmul@product:
  1338                           
  1339                           ; 4 bytes @ 0x9
  1340     0079                     	ds	4
  1341     007D                     ??i1___awmod:
  1342                           
  1343                           ; 1 bytes @ 0xD
  1344     007D                     	ds	1
  1345     007E                     ??i1___wmul:
  1346                           
  1347                           	psect	cstackBANK0
  1348     0020                     __pcstackBANK0:	
  1349                           ; 1 bytes @ 0xE
  1350                           
  1351     0020                     ?i1_rand:
  1352                           
  1353                           ; 2 bytes @ 0x0
  1354     0020                     	ds	2
  1355     0022                     ??i1_rand:
  1356                           
  1357                           ; 1 bytes @ 0x2
  1358     0022                     	ds	5
  1359     0027                     ?i1___awmod:
  1360     0027                     i1___awmod@divisor:	
  1361                           ; 2 bytes @ 0x7
  1362                           
  1363                           
  1364                           ; 2 bytes @ 0x7
  1365     0027                     	ds	2
  1366     0029                     i1___awmod@dividend:
  1367                           
  1368                           ; 2 bytes @ 0x9
  1369     0029                     	ds	2
  1370     002B                     i1___awmod@counter:
  1371                           
  1372                           ; 1 bytes @ 0xB
  1373     002B                     	ds	1
  1374     002C                     i1___awmod@sign:
  1375                           
  1376                           ; 1 bytes @ 0xC
  1377     002C                     	ds	1
  1378     002D                     ?i1___wmul:
  1379     002D                     i1___wmul@multiplier:	
  1380                           ; 2 bytes @ 0xD
  1381                           
  1382                           
  1383                           ; 2 bytes @ 0xD
  1384     002D                     	ds	2
  1385     002F                     i1___wmul@multiplicand:
  1386                           
  1387                           ; 2 bytes @ 0xF
  1388     002F                     	ds	2
  1389     0031                     i1___wmul@product:
  1390                           
  1391                           ; 2 bytes @ 0x11
  1392     0031                     	ds	2
  1393     0033                     ?i1_UART_TxString:
  1394     0033                     i1UART_TxString@is_ACK:	
  1395                           ; 1 bytes @ 0x13
  1396                           
  1397                           
  1398                           ; 1 bytes @ 0x13
  1399     0033                     	ds	1
  1400     0034                     ??i1_UART_TxString:
  1401                           
  1402                           ; 1 bytes @ 0x14
  1403     0034                     	ds	1
  1404     0035                     i1UART_TxString@str:
  1405                           
  1406                           ; 1 bytes @ 0x15
  1407     0035                     	ds	1
  1408     0036                     i1UART_TxString@n:
  1409                           
  1410                           ; 2 bytes @ 0x16
  1411     0036                     	ds	2
  1412     0038                     ??_IRS:
  1413                           
  1414                           ; 1 bytes @ 0x18
  1415     0038                     	ds	4
  1416     003C                     ??_srand:
  1417     003C                     ??_main:	
  1418                           ; 1 bytes @ 0x1C
  1419                           
  1420     003C                     ??___wmul:	
  1421                           ; 1 bytes @ 0x1C
  1422                           
  1423                           
  1424                           	psect	maintext
  1425     0069                     __pmaintext:	
  1426                           ; 1 bytes @ 0x1C
  1427 ;;
  1428 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1429 ;;
  1430 ;; *************** function _main *****************
  1431 ;; Defined at:
  1432 ;;		line 126 in file "main.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  num_rand_s     16   16[BANK2 ] unsigned char [16]
  1437 ;;  num_rand_s     16    0[BANK2 ] unsigned char [16]
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : B00/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1447 ;;      Params:         0       0       0       0       0
  1448 ;;      Locals:         0       0       0       0      32
  1449 ;;      Temps:          0       0       0       0       0
  1450 ;;      Totals:         0       0       0       0      32
  1451 ;;Total ram usage:       32 bytes
  1452 ;; Hardware stack levels required when called: 8
  1453 ;; This function calls:
  1454 ;;		_CompareStrings
  1455 ;;		_ConcatToPacket
  1456 ;;		_ConvertToString
  1457 ;;		_SplitPacket
  1458 ;;		_UART_TxString
  1459 ;;		_init_PIC
  1460 ;;		_lcdPrint
  1461 ;;		_lcdSend
  1462 ;;		_read_NumPad
  1463 ;; This function is called by:
  1464 ;;		Startup code after reset
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468     0069                     _main:	
  1469                           ;psect for function _main
  1470                           
  1471     0069                     l3572:	
  1472                           ;incstack = 0
  1473                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1474                           
  1475                           
  1476                           ;main.c: 129:     init_PIC();
  1477     0069  120A  158A  24CA  120A  118A  	fcall	_init_PIC
  1478     006E                     l3574:
  1479                           
  1480                           ;main.c: 132:     {;main.c: 133:         if(pr_start)
  1481     006E  1683               	bsf	3,5	;RP0=1, select bank3
  1482     006F  1703               	bsf	3,6	;RP1=1, select bank3
  1483     0070  0817               	movf	_pr_start^(0+384),w
  1484     0071  1903               	btfsc	3,2
  1485     0072  2874               	goto	u3801
  1486     0073  2875               	goto	u3800
  1487     0074                     u3801:
  1488     0074  288C               	goto	l3582
  1489     0075                     u3800:
  1490     0075                     l3576:
  1491                           
  1492                           ;main.c: 134:         {;main.c: 135:             lcdSend(0x01, 0);
  1493     0075  1683               	bsf	3,5	;RP0=1, select bank1
  1494     0076  1303               	bcf	3,6	;RP1=0, select bank1
  1495     0077  01A0               	clrf	lcdSend@tipo^(0+128)
  1496     0078  3001               	movlw	1
  1497     0079  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1498     007E                     l3578:
  1499                           
  1500                           ;main.c: 136:             lcdPrint("Premi '#'\0");
  1501     007E  30DF               	movlw	low (STR_1| (0+32768))
  1502     007F  1683               	bsf	3,5	;RP0=1, select bank1
  1503     0080  1303               	bcf	3,6	;RP1=0, select bank1
  1504     0081  00A4               	movwf	lcdPrint@str^(0+128)
  1505     0082  3087               	movlw	high (STR_1| (0+32768))
  1506     0083  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1507     0084  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1508     0089                     l3580:
  1509                           
  1510                           ;main.c: 137:             pr_start = 0;
  1511     0089  1683               	bsf	3,5	;RP0=1, select bank3
  1512     008A  1703               	bsf	3,6	;RP1=1, select bank3
  1513     008B  0197               	clrf	_pr_start^(0+384)
  1514     008C                     l3582:
  1515                           
  1516                           ;main.c: 139:         if(pr_err_max)
  1517     008C  0816               	movf	_pr_err_max^(0+384),w
  1518     008D  1903               	btfsc	3,2
  1519     008E  2890               	goto	u3811
  1520     008F  2891               	goto	u3810
  1521     0090                     u3811:
  1522     0090  28BC               	goto	l3592
  1523     0091                     u3810:
  1524     0091                     l3584:
  1525                           
  1526                           ;main.c: 140:         {;main.c: 142:             lcdSend(0x01, 0);
  1527     0091  1683               	bsf	3,5	;RP0=1, select bank1
  1528     0092  1303               	bcf	3,6	;RP1=0, select bank1
  1529     0093  01A0               	clrf	lcdSend@tipo^(0+128)
  1530     0094  3001               	movlw	1
  1531     0095  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1532     009A                     l3586:
  1533                           
  1534                           ;main.c: 143:             lcdPrint("ERRORE\0");
  1535     009A  30FE               	movlw	low (STR_2| (0+32768))
  1536     009B  1683               	bsf	3,5	;RP0=1, select bank1
  1537     009C  1303               	bcf	3,6	;RP1=0, select bank1
  1538     009D  00A4               	movwf	lcdPrint@str^(0+128)
  1539     009E  3087               	movlw	high (STR_2| (0+32768))
  1540     009F  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1541     00A0  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1542     00A5                     l3588:
  1543                           
  1544                           ;main.c: 144:             lcdSend(0xC0, 0);
  1545     00A5  1683               	bsf	3,5	;RP0=1, select bank1
  1546     00A6  1303               	bcf	3,6	;RP1=0, select bank1
  1547     00A7  01A0               	clrf	lcdSend@tipo^(0+128)
  1548     00A8  30C0               	movlw	192
  1549     00A9  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1550                           
  1551                           ;main.c: 145:             lcdPrint("ID > 250\0");
  1552     00AE  30F4               	movlw	low (STR_3| (0+32768))
  1553     00AF  1683               	bsf	3,5	;RP0=1, select bank1
  1554     00B0  1303               	bcf	3,6	;RP1=0, select bank1
  1555     00B1  00A4               	movwf	lcdPrint@str^(0+128)
  1556     00B2  3087               	movlw	high (STR_3| (0+32768))
  1557     00B3  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1558     00B4  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1559     00B9                     l3590:
  1560                           
  1561                           ;main.c: 146:             pr_err_max = 0;
  1562     00B9  1683               	bsf	3,5	;RP0=1, select bank3
  1563     00BA  1703               	bsf	3,6	;RP1=1, select bank3
  1564     00BB  0196               	clrf	_pr_err_max^(0+384)
  1565     00BC                     l3592:
  1566                           
  1567                           ;main.c: 148:         if(pr_succ)
  1568     00BC  0815               	movf	_pr_succ^(0+384),w
  1569     00BD  1903               	btfsc	3,2
  1570     00BE  28C0               	goto	u3821
  1571     00BF  28C1               	goto	u3820
  1572     00C0                     u3821:
  1573     00C0  28EA               	goto	l3604
  1574     00C1                     u3820:
  1575     00C1                     l3594:
  1576                           
  1577                           ;main.c: 149:         {;main.c: 151:             lcdSend(0x01, 0);
  1578     00C1  1683               	bsf	3,5	;RP0=1, select bank1
  1579     00C2  1303               	bcf	3,6	;RP1=0, select bank1
  1580     00C3  01A0               	clrf	lcdSend@tipo^(0+128)
  1581     00C4  3001               	movlw	1
  1582     00C5  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1583     00CA                     l3596:
  1584                           
  1585                           ;main.c: 152:             lcdPrint("ID Salvato\0");
  1586     00CA  30D3               	movlw	low (STR_4| (0+32768))
  1587     00CB  1683               	bsf	3,5	;RP0=1, select bank1
  1588     00CC  1303               	bcf	3,6	;RP1=0, select bank1
  1589     00CD  00A4               	movwf	lcdPrint@str^(0+128)
  1590     00CE  3087               	movlw	high (STR_4| (0+32768))
  1591     00CF  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1592     00D0  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1593     00D5                     l3598:
  1594                           
  1595                           ;main.c: 154:             milliseconds = 0;
  1596     00D5  3000               	movlw	0
  1597     00D6  1683               	bsf	3,5	;RP0=1, select bank1
  1598     00D7  1303               	bcf	3,6	;RP1=0, select bank1
  1599     00D8  00EA               	movwf	(_milliseconds+3)^(0+128)
  1600     00D9  3000               	movlw	0
  1601     00DA  00E9               	movwf	(_milliseconds+2)^(0+128)
  1602     00DB  3000               	movlw	0
  1603     00DC  00E8               	movwf	(_milliseconds+1)^(0+128)
  1604     00DD  3000               	movlw	0
  1605     00DE  00E7               	movwf	_milliseconds^(0+128)
  1606     00DF                     l3600:
  1607                           
  1608                           ;main.c: 155:             seconds = 1000;
  1609     00DF  3000               	movlw	0
  1610     00E0  00E6               	movwf	(_seconds+3)^(0+128)
  1611     00E1  3000               	movlw	0
  1612     00E2  00E5               	movwf	(_seconds+2)^(0+128)
  1613     00E3  3003               	movlw	3
  1614     00E4  00E4               	movwf	(_seconds+1)^(0+128)
  1615     00E5  30E8               	movlw	232
  1616     00E6  00E3               	movwf	_seconds^(0+128)
  1617     00E7                     l3602:
  1618                           
  1619                           ;main.c: 156:             pr_succ = 0;
  1620     00E7  1683               	bsf	3,5	;RP0=1, select bank3
  1621     00E8  1703               	bsf	3,6	;RP1=1, select bank3
  1622     00E9  0195               	clrf	_pr_succ^(0+384)
  1623     00EA                     l3604:
  1624                           
  1625                           ;main.c: 158:         if(pr_countdown)
  1626     00EA  0814               	movf	_pr_countdown^(0+384),w
  1627     00EB  1903               	btfsc	3,2
  1628     00EC  28EE               	goto	u3831
  1629     00ED  28EF               	goto	u3830
  1630     00EE                     u3831:
  1631     00EE  293D               	goto	l3620
  1632     00EF                     u3830:
  1633     00EF                     l3606:
  1634                           
  1635                           ;main.c: 159:         {;main.c: 160:             lcdSend(0x01, 0);
  1636     00EF  1683               	bsf	3,5	;RP0=1, select bank1
  1637     00F0  1303               	bcf	3,6	;RP1=0, select bank1
  1638     00F1  01A0               	clrf	lcdSend@tipo^(0+128)
  1639     00F2  3001               	movlw	1
  1640     00F3  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1641     00F8                     l3608:
  1642                           
  1643                           ;main.c: 162:             char num_rand_s[16];;main.c: 163:             ConvertToString(
      +                          num_rand, num_rand_s);
  1644     00F8  1683               	bsf	3,5	;RP0=1, select bank3
  1645     00F9  1703               	bsf	3,6	;RP1=1, select bank3
  1646     00FA  0812               	movf	_num_rand^(0+384),w
  1647     00FB  1683               	bsf	3,5	;RP0=1, select bank1
  1648     00FC  1303               	bcf	3,6	;RP1=0, select bank1
  1649     00FD  00D9               	movwf	ConvertToString@n^(0+128)
  1650     00FE  1683               	bsf	3,5	;RP0=1, select bank3
  1651     00FF  1703               	bsf	3,6	;RP1=1, select bank3
  1652     0100  0813               	movf	(_num_rand+1)^(0+384),w
  1653     0101  1683               	bsf	3,5	;RP0=1, select bank1
  1654     0102  1303               	bcf	3,6	;RP1=0, select bank1
  1655     0103  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  1656     0104  3000               	movlw	0
  1657     0105  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  1658     0106  30FF               	movlw	255
  1659     0107  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  1660     0108  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  1661     0109  3042               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1662     010A  00DD               	movwf	ConvertToString@str^(0+128)
  1663     010B  120A  158A  26F6  120A  118A  	fcall	_ConvertToString
  1664     0110                     l3610:
  1665                           
  1666                           ;main.c: 164:             lcdPrint("Codice: \0");
  1667     0110  30EA               	movlw	low (STR_5| (0+32768))
  1668     0111  1683               	bsf	3,5	;RP0=1, select bank1
  1669     0112  1303               	bcf	3,6	;RP1=0, select bank1
  1670     0113  00A4               	movwf	lcdPrint@str^(0+128)
  1671     0114  3087               	movlw	high (STR_5| (0+32768))
  1672     0115  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1673     0116  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1674     011B                     l3612:
  1675                           
  1676                           ;main.c: 165:             lcdPrint(num_rand_s);
  1677     011B  3042               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1678     011C  1683               	bsf	3,5	;RP0=1, select bank1
  1679     011D  1303               	bcf	3,6	;RP1=0, select bank1
  1680     011E  00A4               	movwf	lcdPrint@str^(0+128)
  1681     011F  3001               	movlw	1
  1682     0120  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1683     0121  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1684     0126                     l3614:
  1685                           
  1686                           ;main.c: 166:             lcdSend(0xC0, 0);
  1687     0126  1683               	bsf	3,5	;RP0=1, select bank1
  1688     0127  1303               	bcf	3,6	;RP1=0, select bank1
  1689     0128  01A0               	clrf	lcdSend@tipo^(0+128)
  1690     0129  30C0               	movlw	192
  1691     012A  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1692     012F                     l3616:
  1693                           
  1694                           ;main.c: 167:             lcdPrint("# per altro cod.\0");
  1695     012F  3037               	movlw	low (STR_6| (0+32768))
  1696     0130  1683               	bsf	3,5	;RP0=1, select bank1
  1697     0131  1303               	bcf	3,6	;RP1=0, select bank1
  1698     0132  00A4               	movwf	lcdPrint@str^(0+128)
  1699     0133  3087               	movlw	high (STR_6| (0+32768))
  1700     0134  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1701     0135  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1702     013A                     l3618:
  1703                           
  1704                           ;main.c: 168:             pr_countdown = 0;
  1705     013A  1683               	bsf	3,5	;RP0=1, select bank3
  1706     013B  1703               	bsf	3,6	;RP1=1, select bank3
  1707     013C  0194               	clrf	_pr_countdown^(0+384)
  1708     013D                     l3620:
  1709                           
  1710                           ;main.c: 172:         read_NumPad();
  1711     013D  120A  118A  240B  120A  118A  	fcall	_read_NumPad
  1712     0142                     l3622:
  1713                           
  1714                           ;main.c: 175:         if(i_id != old_i_id && initialize)
  1715     0142  1683               	bsf	3,5	;RP0=1, select bank3
  1716     0143  1703               	bsf	3,6	;RP1=1, select bank3
  1717     0144  0821               	movf	_i_id^(0+384),w
  1718     0145  0620               	xorwf	_old_i_id^(0+384),w
  1719     0146  1903               	skipnz
  1720     0147  2949               	goto	u3841
  1721     0148  294A               	goto	u3840
  1722     0149                     u3841:
  1723     0149  2977               	goto	l3632
  1724     014A                     u3840:
  1725     014A                     l3624:
  1726     014A  0854               	movf	_initialize^(0+384),w
  1727     014B  1903               	btfsc	3,2
  1728     014C  294E               	goto	u3851
  1729     014D  294F               	goto	u3850
  1730     014E                     u3851:
  1731     014E  2977               	goto	l3632
  1732     014F                     u3850:
  1733     014F                     l3626:
  1734                           
  1735                           ;main.c: 176:         {;main.c: 178:             lcdSend(0x01, 0);
  1736     014F  1683               	bsf	3,5	;RP0=1, select bank1
  1737     0150  1303               	bcf	3,6	;RP1=0, select bank1
  1738     0151  01A0               	clrf	lcdSend@tipo^(0+128)
  1739     0152  3001               	movlw	1
  1740     0153  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1741     0158                     l3628:
  1742                           
  1743                           ;main.c: 179:             lcdPrint("#=conf. *=canc.\0");
  1744     0158  305B               	movlw	low (STR_7| (0+32768))
  1745     0159  1683               	bsf	3,5	;RP0=1, select bank1
  1746     015A  1303               	bcf	3,6	;RP1=0, select bank1
  1747     015B  00A4               	movwf	lcdPrint@str^(0+128)
  1748     015C  3087               	movlw	high (STR_7| (0+32768))
  1749     015D  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1750     015E  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1751     0163                     l3630:
  1752                           
  1753                           ;main.c: 180:             lcdSend(0xC0, 0);
  1754     0163  1683               	bsf	3,5	;RP0=1, select bank1
  1755     0164  1303               	bcf	3,6	;RP1=0, select bank1
  1756     0165  01A0               	clrf	lcdSend@tipo^(0+128)
  1757     0166  30C0               	movlw	192
  1758     0167  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1759                           
  1760                           ;main.c: 181:             lcdPrint(PIC_ID);
  1761     016C  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  1762     016D  1683               	bsf	3,5	;RP0=1, select bank1
  1763     016E  1303               	bcf	3,6	;RP1=0, select bank1
  1764     016F  00A4               	movwf	lcdPrint@str^(0+128)
  1765     0170  3001               	movlw	1
  1766     0171  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1767     0172  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1768     0177                     l3632:
  1769                           
  1770                           ;main.c: 184:         old_i_id = i_id;
  1771     0177  1683               	bsf	3,5	;RP0=1, select bank3
  1772     0178  1703               	bsf	3,6	;RP1=1, select bank3
  1773     0179  0821               	movf	_i_id^(0+384),w
  1774     017A  00A0               	movwf	_old_i_id^(0+384)
  1775     017B                     l3634:
  1776                           
  1777                           ;main.c: 188:         if(num_rand != old_num_rand)
  1778     017B  0811               	movf	(_old_num_rand+1)^(0+384),w
  1779     017C  0613               	xorwf	(_num_rand+1)^(0+384),w
  1780     017D  1D03               	skipz
  1781     017E  2981               	goto	u3865
  1782     017F  0810               	movf	_old_num_rand^(0+384),w
  1783     0180  0612               	xorwf	_num_rand^(0+384),w
  1784     0181                     u3865:
  1785     0181  1903               	skipnz
  1786     0182  2984               	goto	u3861
  1787     0183  2985               	goto	u3860
  1788     0184                     u3861:
  1789     0184  2A03               	goto	l3666
  1790     0185                     u3860:
  1791     0185                     l3636:
  1792                           
  1793                           ;main.c: 189:         {;main.c: 191:             lcdSend(0x01, 0);
  1794     0185  1683               	bsf	3,5	;RP0=1, select bank1
  1795     0186  1303               	bcf	3,6	;RP1=0, select bank1
  1796     0187  01A0               	clrf	lcdSend@tipo^(0+128)
  1797     0188  3001               	movlw	1
  1798     0189  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1799     018E                     l3638:
  1800                           
  1801                           ;main.c: 193:             char num_rand_s[16];;main.c: 194:             ConvertToString(
      +                          num_rand, num_rand_s);
  1802     018E  1683               	bsf	3,5	;RP0=1, select bank3
  1803     018F  1703               	bsf	3,6	;RP1=1, select bank3
  1804     0190  0812               	movf	_num_rand^(0+384),w
  1805     0191  1683               	bsf	3,5	;RP0=1, select bank1
  1806     0192  1303               	bcf	3,6	;RP1=0, select bank1
  1807     0193  00D9               	movwf	ConvertToString@n^(0+128)
  1808     0194  1683               	bsf	3,5	;RP0=1, select bank3
  1809     0195  1703               	bsf	3,6	;RP1=1, select bank3
  1810     0196  0813               	movf	(_num_rand+1)^(0+384),w
  1811     0197  1683               	bsf	3,5	;RP0=1, select bank1
  1812     0198  1303               	bcf	3,6	;RP1=0, select bank1
  1813     0199  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  1814     019A  3000               	movlw	0
  1815     019B  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  1816     019C  30FF               	movlw	255
  1817     019D  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  1818     019E  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  1819     019F  3052               	movlw	(low (main@num_rand_s_228| (0+256)))& (0+255)
  1820     01A0  00DD               	movwf	ConvertToString@str^(0+128)
  1821     01A1  120A  158A  26F6  120A  118A  	fcall	_ConvertToString
  1822     01A6                     l3640:
  1823                           
  1824                           ;main.c: 195:             lcdPrint("Codice: \0");
  1825     01A6  30EA               	movlw	low (STR_5| (0+32768))
  1826     01A7  1683               	bsf	3,5	;RP0=1, select bank1
  1827     01A8  1303               	bcf	3,6	;RP1=0, select bank1
  1828     01A9  00A4               	movwf	lcdPrint@str^(0+128)
  1829     01AA  3087               	movlw	high (STR_5| (0+32768))
  1830     01AB  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1831     01AC  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1832     01B1                     l3642:
  1833                           
  1834                           ;main.c: 196:             lcdPrint(num_rand_s);
  1835     01B1  3052               	movlw	(low (main@num_rand_s_228| (0+256)))& (0+255)
  1836     01B2  1683               	bsf	3,5	;RP0=1, select bank1
  1837     01B3  1303               	bcf	3,6	;RP1=0, select bank1
  1838     01B4  00A4               	movwf	lcdPrint@str^(0+128)
  1839     01B5  3001               	movlw	1
  1840     01B6  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1841     01B7  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1842     01BC                     l3644:
  1843                           
  1844                           ;main.c: 197:             lcdSend(0xC0, 0);
  1845     01BC  1683               	bsf	3,5	;RP0=1, select bank1
  1846     01BD  1303               	bcf	3,6	;RP1=0, select bank1
  1847     01BE  01A0               	clrf	lcdSend@tipo^(0+128)
  1848     01BF  30C0               	movlw	192
  1849     01C0  160A  118A  2646  120A  118A  	fcall	_lcdSend
  1850     01C5                     l3646:
  1851                           
  1852                           ;main.c: 198:             lcdPrint("Attendi 30s...\0");
  1853     01C5  306C               	movlw	low (STR_9| (0+32768))
  1854     01C6  1683               	bsf	3,5	;RP0=1, select bank1
  1855     01C7  1303               	bcf	3,6	;RP1=0, select bank1
  1856     01C8  00A4               	movwf	lcdPrint@str^(0+128)
  1857     01C9  3087               	movlw	high (STR_9| (0+32768))
  1858     01CA  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  1859     01CB  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  1860     01D0                     l3648:
  1861                           
  1862                           ;main.c: 210:             packet[0] = '0';
  1863     01D0  3030               	movlw	48
  1864     01D1  1683               	bsf	3,5	;RP0=1, select bank3
  1865     01D2  1703               	bsf	3,6	;RP1=1, select bank3
  1866     01D3  00B3               	movwf	_packet^(0+384)
  1867     01D4                     l3650:
  1868                           
  1869                           ;main.c: 211:             packet[1] = '/';
  1870     01D4  302F               	movlw	47
  1871     01D5  00B4               	movwf	(_packet^(0+384)+1)
  1872     01D6                     l3652:
  1873                           
  1874                           ;main.c: 212:             packet[2] = '\0';
  1875     01D6  01B5               	clrf	(_packet^(0+384)+2)
  1876     01D7                     l3654:
  1877                           
  1878                           ;main.c: 214:             ConcatToPacket(packet, PIC_ID, '/');
  1879     01D7  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  1880     01D8  1683               	bsf	3,5	;RP0=1, select bank1
  1881     01D9  1303               	bcf	3,6	;RP1=0, select bank1
  1882     01DA  00B3               	movwf	ConcatToPacket@str^(0+128)
  1883     01DB  3001               	movlw	1
  1884     01DC  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1885     01DD  302F               	movlw	47
  1886     01DE  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1887     01DF  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  1888     01E0  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  1889     01E5                     l3656:
  1890                           
  1891                           ;main.c: 216:             packet[6] = '0';
  1892     01E5  3030               	movlw	48
  1893     01E6  1683               	bsf	3,5	;RP0=1, select bank3
  1894     01E7  1703               	bsf	3,6	;RP1=1, select bank3
  1895     01E8  00B9               	movwf	(_packet^(0+384)+6)
  1896     01E9                     l3658:
  1897                           
  1898                           ;main.c: 217:             packet[7] = '/';
  1899     01E9  302F               	movlw	47
  1900     01EA  00BA               	movwf	(_packet^(0+384)+7)
  1901     01EB                     l3660:
  1902                           
  1903                           ;main.c: 218:             packet[8] = '\0';
  1904     01EB  01BB               	clrf	(_packet^(0+384)+8)
  1905     01EC                     l3662:
  1906                           
  1907                           ;main.c: 220:             ConcatToPacket(packet, num_rand_s, ' ');
  1908     01EC  3052               	movlw	(low (main@num_rand_s_228| (0+256)))& (0+255)
  1909     01ED  1683               	bsf	3,5	;RP0=1, select bank1
  1910     01EE  1303               	bcf	3,6	;RP1=0, select bank1
  1911     01EF  00B3               	movwf	ConcatToPacket@str^(0+128)
  1912     01F0  3001               	movlw	1
  1913     01F1  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1914     01F2  3020               	movlw	32
  1915     01F3  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1916     01F4  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  1917     01F5  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  1918     01FA                     l3664:
  1919                           
  1920                           ;main.c: 222:             UART_TxString(packet, 0);
  1921     01FA  1683               	bsf	3,5	;RP0=1, select bank1
  1922     01FB  1303               	bcf	3,6	;RP1=0, select bank1
  1923     01FC  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  1924     01FD  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  1925     01FE  120A  158A  22FD  120A  118A  	fcall	_UART_TxString
  1926     0203                     l3666:
  1927                           
  1928                           ;main.c: 225:         old_num_rand = num_rand;
  1929     0203  1683               	bsf	3,5	;RP0=1, select bank3
  1930     0204  1703               	bsf	3,6	;RP1=1, select bank3
  1931     0205  0813               	movf	(_num_rand+1)^(0+384),w
  1932     0206  0091               	movwf	(_old_num_rand+1)^(0+384)
  1933     0207  0812               	movf	_num_rand^(0+384),w
  1934     0208  0090               	movwf	_old_num_rand^(0+384)
  1935     0209                     l3668:
  1936                           
  1937                           ;main.c: 228:         if(recieved)
  1938     0209  081B               	movf	_recieved^(0+384),w
  1939     020A  1903               	btfsc	3,2
  1940     020B  2A0D               	goto	u3871
  1941     020C  2A0E               	goto	u3870
  1942     020D                     u3871:
  1943     020D  2AEB               	goto	l3720
  1944     020E                     u3870:
  1945     020E                     l3670:
  1946                           
  1947                           ;main.c: 229:         {;main.c: 230:             SplitPacket(dato);
  1948     020E  3010               	movlw	(low (_dato| (0+256)))& (0+255)
  1949     020F  120A  118A  262B  120A  118A  	fcall	_SplitPacket
  1950     0214                     l3672:
  1951                           
  1952                           ;main.c: 232:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '0')
  1953     0214  3031               	movlw	49
  1954     0215  1683               	bsf	3,5	;RP0=1, select bank3
  1955     0216  1703               	bsf	3,6	;RP1=1, select bank3
  1956     0217  061F               	xorwf	_source^(0+384),w
  1957     0218  1D03               	btfss	3,2
  1958     0219  2A1B               	goto	u3881
  1959     021A  2A1C               	goto	u3880
  1960     021B                     u3881:
  1961     021B  2AA0               	goto	l3704
  1962     021C                     u3880:
  1963     021C                     l3674:
  1964     021C  30C2               	movlw	(low (_id_dest| (0+256)))& (0+255)
  1965     021D  1683               	bsf	3,5	;RP0=1, select bank1
  1966     021E  1303               	bcf	3,6	;RP1=0, select bank1
  1967     021F  00A7               	movwf	CompareStrings@str1^(0+128)
  1968     0220  3001               	movlw	1
  1969     0221  00A8               	movwf	(CompareStrings@str1+1)^(0+128)
  1970     0222  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  1971     0223  00A9               	movwf	CompareStrings@str2^(0+128)
  1972     0224  120A  158A  21DC  120A  118A  	fcall	_CompareStrings
  1973     0229  3A00               	xorlw	0
  1974     022A  1903               	skipnz
  1975     022B  2A2D               	goto	u3891
  1976     022C  2A2E               	goto	u3890
  1977     022D                     u3891:
  1978     022D  2AA0               	goto	l3704
  1979     022E                     u3890:
  1980     022E                     l3676:
  1981     022E  3030               	movlw	48
  1982     022F  1683               	bsf	3,5	;RP0=1, select bank3
  1983     0230  1703               	bsf	3,6	;RP1=1, select bank3
  1984     0231  061E               	xorwf	_type^(0+384),w
  1985     0232  1D03               	btfss	3,2
  1986     0233  2A35               	goto	u3901
  1987     0234  2A36               	goto	u3900
  1988     0235                     u3901:
  1989     0235  2AA0               	goto	l3704
  1990     0236                     u3900:
  1991     0236                     l3678:
  1992                           
  1993                           ;main.c: 233:             {;main.c: 235:                 packet[0] = '0';
  1994     0236  3030               	movlw	48
  1995     0237  00B3               	movwf	_packet^(0+384)
  1996                           
  1997                           ;main.c: 236:                 packet[1] = '/';
  1998     0238  302F               	movlw	47
  1999     0239  00B4               	movwf	(_packet^(0+384)+1)
  2000     023A                     l3680:
  2001                           
  2002                           ;main.c: 237:                 packet[2] = '\0';
  2003     023A  01B5               	clrf	(_packet^(0+384)+2)
  2004     023B                     l3682:
  2005                           
  2006                           ;main.c: 238:                 ConcatToPacket(packet, PIC_ID, '/');
  2007     023B  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2008     023C  1683               	bsf	3,5	;RP0=1, select bank1
  2009     023D  1303               	bcf	3,6	;RP1=0, select bank1
  2010     023E  00B3               	movwf	ConcatToPacket@str^(0+128)
  2011     023F  3001               	movlw	1
  2012     0240  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2013     0241  302F               	movlw	47
  2014     0242  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2015     0243  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2016     0244  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  2017     0249                     l3684:
  2018                           
  2019                           ;main.c: 239:                 ConcatToPacket(packet, "2", ' ');
  2020     0249  300E               	movlw	low (STR_10| (0+32768))
  2021     024A  1683               	bsf	3,5	;RP0=1, select bank1
  2022     024B  1303               	bcf	3,6	;RP1=0, select bank1
  2023     024C  00B3               	movwf	ConcatToPacket@str^(0+128)
  2024     024D  3088               	movlw	high (STR_10| (0+32768))
  2025     024E  00B4               	movwf	(ConcatToPacket@str^(0+128)+1)
  2026     024F  3020               	movlw	32
  2027     0250  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2028     0251  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2029     0252  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  2030     0257                     l3686:
  2031                           
  2032                           ;main.c: 240:                 UART_TxString(packet, 1);
  2033     0257  1683               	bsf	3,5	;RP0=1, select bank1
  2034     0258  1303               	bcf	3,6	;RP1=0, select bank1
  2035     0259  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2036     025A  0AC1               	incf	UART_TxString@is_ACK^(0+128),f
  2037     025B  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2038     025C  120A  158A  22FD  120A  118A  	fcall	_UART_TxString
  2039     0261                     l3688:
  2040                           
  2041                           ;main.c: 242:                 compare = 1;
  2042     0261  1683               	bsf	3,5	;RP0=1, select bank3
  2043     0262  1703               	bsf	3,6	;RP1=1, select bank3
  2044     0263  019A               	clrf	_compare^(0+384)
  2045     0264  0A9A               	incf	_compare^(0+384),f
  2046     0265                     l3690:
  2047                           
  2048                           ;main.c: 244:                 old_num_rand = num_rand = 0;
  2049     0265  0192               	clrf	_num_rand^(0+384)
  2050     0266  0193               	clrf	(_num_rand+1)^(0+384)
  2051     0267  0190               	clrf	_old_num_rand^(0+384)
  2052     0268  0191               	clrf	(_old_num_rand+1)^(0+384)
  2053     0269                     l3692:
  2054                           
  2055                           ;main.c: 246:                 maxFail = 3;
  2056     0269  3003               	movlw	3
  2057     026A  00D3               	movwf	_maxFail^(0+384)
  2058     026B                     l3694:
  2059                           
  2060                           ;main.c: 248:                 lcdSend(0x01, 0);
  2061     026B  1683               	bsf	3,5	;RP0=1, select bank1
  2062     026C  1303               	bcf	3,6	;RP1=0, select bank1
  2063     026D  01A0               	clrf	lcdSend@tipo^(0+128)
  2064     026E  3001               	movlw	1
  2065     026F  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2066     0274                     l3696:
  2067                           
  2068                           ;main.c: 249:                 lcdPrint("Inserisci codice\0");
  2069     0274  3049               	movlw	low (STR_11| (0+32768))
  2070     0275  1683               	bsf	3,5	;RP0=1, select bank1
  2071     0276  1303               	bcf	3,6	;RP1=0, select bank1
  2072     0277  00A4               	movwf	lcdPrint@str^(0+128)
  2073     0278  3087               	movlw	high (STR_11| (0+32768))
  2074     0279  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  2075     027A  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2076     027F                     l3698:
  2077                           
  2078                           ;main.c: 250:                 lcdSend(0xC0, 0);
  2079     027F  1683               	bsf	3,5	;RP0=1, select bank1
  2080     0280  1303               	bcf	3,6	;RP1=0, select bank1
  2081     0281  01A0               	clrf	lcdSend@tipo^(0+128)
  2082     0282  30C0               	movlw	192
  2083     0283  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2084     0288                     l3700:
  2085                           
  2086                           ;main.c: 251:                 lcdPrint("Tentativi: \0");
  2087     0288  30BA               	movlw	low (STR_12| (0+32768))
  2088     0289  1683               	bsf	3,5	;RP0=1, select bank1
  2089     028A  1303               	bcf	3,6	;RP1=0, select bank1
  2090     028B  00A4               	movwf	lcdPrint@str^(0+128)
  2091     028C  3087               	movlw	high (STR_12| (0+32768))
  2092     028D  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  2093     028E  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2094     0293                     l3702:
  2095                           
  2096                           ;main.c: 252:                 lcdSend(maxFail + '0', 1);
  2097     0293  1683               	bsf	3,5	;RP0=1, select bank1
  2098     0294  1303               	bcf	3,6	;RP1=0, select bank1
  2099     0295  01A0               	clrf	lcdSend@tipo^(0+128)
  2100     0296  0AA0               	incf	lcdSend@tipo^(0+128),f
  2101     0297  1683               	bsf	3,5	;RP0=1, select bank3
  2102     0298  1703               	bsf	3,6	;RP1=1, select bank3
  2103     0299  0853               	movf	_maxFail^(0+384),w
  2104     029A  3E30               	addlw	48
  2105     029B  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2106     02A0                     l3704:
  2107                           
  2108                           ;main.c: 255:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '2')
  2109     02A0  3031               	movlw	49
  2110     02A1  1683               	bsf	3,5	;RP0=1, select bank3
  2111     02A2  1703               	bsf	3,6	;RP1=1, select bank3
  2112     02A3  061F               	xorwf	_source^(0+384),w
  2113     02A4  1D03               	btfss	3,2
  2114     02A5  2AA7               	goto	u3911
  2115     02A6  2AA8               	goto	u3910
  2116     02A7                     u3911:
  2117     02A7  2AE5               	goto	l3716
  2118     02A8                     u3910:
  2119     02A8                     l3706:
  2120     02A8  30C2               	movlw	(low (_id_dest| (0+256)))& (0+255)
  2121     02A9  1683               	bsf	3,5	;RP0=1, select bank1
  2122     02AA  1303               	bcf	3,6	;RP1=0, select bank1
  2123     02AB  00A7               	movwf	CompareStrings@str1^(0+128)
  2124     02AC  3001               	movlw	1
  2125     02AD  00A8               	movwf	(CompareStrings@str1+1)^(0+128)
  2126     02AE  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2127     02AF  00A9               	movwf	CompareStrings@str2^(0+128)
  2128     02B0  120A  158A  21DC  120A  118A  	fcall	_CompareStrings
  2129     02B5  3A00               	xorlw	0
  2130     02B6  1903               	skipnz
  2131     02B7  2AB9               	goto	u3921
  2132     02B8  2ABA               	goto	u3920
  2133     02B9                     u3921:
  2134     02B9  2AE5               	goto	l3716
  2135     02BA                     u3920:
  2136     02BA                     l3708:
  2137     02BA  3032               	movlw	50
  2138     02BB  1683               	bsf	3,5	;RP0=1, select bank3
  2139     02BC  1703               	bsf	3,6	;RP1=1, select bank3
  2140     02BD  061E               	xorwf	_type^(0+384),w
  2141     02BE  1D03               	btfss	3,2
  2142     02BF  2AC1               	goto	u3931
  2143     02C0  2AC2               	goto	u3930
  2144     02C1                     u3931:
  2145     02C1  2AE5               	goto	l3716
  2146     02C2                     u3930:
  2147     02C2                     l3710:
  2148                           
  2149                           ;main.c: 256:             {;main.c: 259:                 if(num_rand != 0)
  2150     02C2  0812               	movf	_num_rand^(0+384),w
  2151     02C3  0413               	iorwf	(_num_rand+1)^(0+384),w
  2152     02C4  1903               	btfsc	3,2
  2153     02C5  2AC7               	goto	u3941
  2154     02C6  2AC8               	goto	u3940
  2155     02C7                     u3941:
  2156     02C7  2AD3               	goto	l3714
  2157     02C8                     u3940:
  2158     02C8                     l3712:
  2159                           
  2160                           ;main.c: 260:                     seconds = 7500;
  2161     02C8  3000               	movlw	0
  2162     02C9  1683               	bsf	3,5	;RP0=1, select bank1
  2163     02CA  1303               	bcf	3,6	;RP1=0, select bank1
  2164     02CB  00E6               	movwf	(_seconds+3)^(0+128)
  2165     02CC  3000               	movlw	0
  2166     02CD  00E5               	movwf	(_seconds+2)^(0+128)
  2167     02CE  301D               	movlw	29
  2168     02CF  00E4               	movwf	(_seconds+1)^(0+128)
  2169     02D0  304C               	movlw	76
  2170     02D1  00E3               	movwf	_seconds^(0+128)
  2171     02D2  2AE5               	goto	l3716
  2172     02D3                     l3714:
  2173                           
  2174                           ;main.c: 263:                 {;main.c: 264:                     milliseconds = 0;
  2175     02D3  3000               	movlw	0
  2176     02D4  1683               	bsf	3,5	;RP0=1, select bank1
  2177     02D5  1303               	bcf	3,6	;RP1=0, select bank1
  2178     02D6  00EA               	movwf	(_milliseconds+3)^(0+128)
  2179     02D7  3000               	movlw	0
  2180     02D8  00E9               	movwf	(_milliseconds+2)^(0+128)
  2181     02D9  3000               	movlw	0
  2182     02DA  00E8               	movwf	(_milliseconds+1)^(0+128)
  2183     02DB  3000               	movlw	0
  2184     02DC  00E7               	movwf	_milliseconds^(0+128)
  2185                           
  2186                           ;main.c: 265:                     seconds = 1000;
  2187     02DD  3000               	movlw	0
  2188     02DE  00E6               	movwf	(_seconds+3)^(0+128)
  2189     02DF  3000               	movlw	0
  2190     02E0  00E5               	movwf	(_seconds+2)^(0+128)
  2191     02E1  3003               	movlw	3
  2192     02E2  00E4               	movwf	(_seconds+1)^(0+128)
  2193     02E3  30E8               	movlw	232
  2194     02E4  00E3               	movwf	_seconds^(0+128)
  2195     02E5                     l3716:
  2196                           
  2197                           ;main.c: 268:             recieved = 0;
  2198     02E5  1683               	bsf	3,5	;RP0=1, select bank3
  2199     02E6  1703               	bsf	3,6	;RP1=1, select bank3
  2200     02E7  019B               	clrf	_recieved^(0+384)
  2201     02E8                     l3718:
  2202                           
  2203                           ;main.c: 269:             iS = 0;
  2204     02E8  1283               	bcf	3,5	;RP0=0, select bank0
  2205     02E9  1303               	bcf	3,6	;RP1=0, select bank0
  2206     02EA  01BE               	clrf	_iS
  2207     02EB                     l3720:
  2208                           
  2209                           ;main.c: 274:         if(success)
  2210     02EB  1683               	bsf	3,5	;RP0=1, select bank3
  2211     02EC  1703               	bsf	3,6	;RP1=1, select bank3
  2212     02ED  0819               	movf	_success^(0+384),w
  2213     02EE  1903               	btfsc	3,2
  2214     02EF  2AF1               	goto	u3951
  2215     02F0  2AF2               	goto	u3950
  2216     02F1                     u3951:
  2217     02F1  2B39               	goto	l3746
  2218     02F2                     u3950:
  2219     02F2                     l3722:
  2220                           
  2221                           ;main.c: 275:         {;main.c: 277:             lcdSend(0x01, 0);
  2222     02F2  1683               	bsf	3,5	;RP0=1, select bank1
  2223     02F3  1303               	bcf	3,6	;RP1=0, select bank1
  2224     02F4  01A0               	clrf	lcdSend@tipo^(0+128)
  2225     02F5  3001               	movlw	1
  2226     02F6  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2227     02FB                     l3724:
  2228                           
  2229                           ;main.c: 278:             lcdPrint("Benvenuto!\0");
  2230     02FB  30C7               	movlw	low (STR_13| (0+32768))
  2231     02FC  1683               	bsf	3,5	;RP0=1, select bank1
  2232     02FD  1303               	bcf	3,6	;RP1=0, select bank1
  2233     02FE  00A4               	movwf	lcdPrint@str^(0+128)
  2234     02FF  3087               	movlw	high (STR_13| (0+32768))
  2235     0300  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  2236     0301  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2237     0306                     l3726:
  2238                           
  2239                           ;main.c: 279:             iT = old_iT = 0;
  2240     0306  1683               	bsf	3,5	;RP0=1, select bank3
  2241     0307  1703               	bsf	3,6	;RP1=1, select bank3
  2242     0308  019C               	clrf	_old_iT^(0+384)
  2243     0309  019D               	clrf	_iT^(0+384)
  2244     030A                     l3728:
  2245                           
  2246                           ;main.c: 280:             success = 0;
  2247     030A  0199               	clrf	_success^(0+384)
  2248     030B                     l3730:
  2249                           
  2250                           ;main.c: 282:             compare = 0;
  2251     030B  019A               	clrf	_compare^(0+384)
  2252     030C                     l3732:
  2253                           
  2254                           ;main.c: 283:             maxFail = 3;
  2255     030C  3003               	movlw	3
  2256     030D  00D3               	movwf	_maxFail^(0+384)
  2257     030E                     l3734:
  2258                           
  2259                           ;main.c: 285:             packet[0] = '0';
  2260     030E  3030               	movlw	48
  2261     030F  00B3               	movwf	_packet^(0+384)
  2262     0310                     l3736:
  2263                           
  2264                           ;main.c: 286:             packet[1] = '/';
  2265     0310  302F               	movlw	47
  2266     0311  00B4               	movwf	(_packet^(0+384)+1)
  2267     0312                     l3738:
  2268                           
  2269                           ;main.c: 287:             packet[2] = '\0';
  2270     0312  01B5               	clrf	(_packet^(0+384)+2)
  2271     0313                     l3740:
  2272                           
  2273                           ;main.c: 288:             ConcatToPacket(packet, PIC_ID, '/');
  2274     0313  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2275     0314  1683               	bsf	3,5	;RP0=1, select bank1
  2276     0315  1303               	bcf	3,6	;RP1=0, select bank1
  2277     0316  00B3               	movwf	ConcatToPacket@str^(0+128)
  2278     0317  3001               	movlw	1
  2279     0318  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2280     0319  302F               	movlw	47
  2281     031A  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2282     031B  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2283     031C  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  2284     0321                     l3742:
  2285                           
  2286                           ;main.c: 289:             ConcatToPacket(packet, "1/1", ' ');
  2287     0321  300A               	movlw	low (STR_14| (0+32768))
  2288     0322  1683               	bsf	3,5	;RP0=1, select bank1
  2289     0323  1303               	bcf	3,6	;RP1=0, select bank1
  2290     0324  00B3               	movwf	ConcatToPacket@str^(0+128)
  2291     0325  3088               	movlw	high (STR_14| (0+32768))
  2292     0326  00B4               	movwf	(ConcatToPacket@str^(0+128)+1)
  2293     0327  3020               	movlw	32
  2294     0328  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2295     0329  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2296     032A  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  2297     032F                     l3744:
  2298                           
  2299                           ;main.c: 290:             UART_TxString(packet, 0);
  2300     032F  1683               	bsf	3,5	;RP0=1, select bank1
  2301     0330  1303               	bcf	3,6	;RP1=0, select bank1
  2302     0331  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2303     0332  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2304     0333  120A  158A  22FD  120A  118A  	fcall	_UART_TxString
  2305                           
  2306                           ;main.c: 291:         }
  2307     0338  2BCE               	goto	l3788
  2308     0339                     l3746:
  2309     0339  0853               	movf	_maxFail^(0+384),w
  2310     033A  1903               	btfsc	3,2
  2311     033B  2B3D               	goto	u3961
  2312     033C  2B3E               	goto	u3960
  2313     033D                     u3961:
  2314     033D  2B84               	goto	l3764
  2315     033E                     u3960:
  2316     033E                     l3748:
  2317     033E  3003               	movlw	3
  2318     033F  0253               	subwf	_maxFail^(0+384),w
  2319     0340  1803               	skipnc
  2320     0341  2B43               	goto	u3971
  2321     0342  2B44               	goto	u3970
  2322     0343                     u3971:
  2323     0343  2B84               	goto	l3764
  2324     0344                     u3970:
  2325     0344                     l3750:
  2326     0344  0818               	movf	_fail^(0+384),w
  2327     0345  1903               	btfsc	3,2
  2328     0346  2B48               	goto	u3981
  2329     0347  2B49               	goto	u3980
  2330     0348                     u3981:
  2331     0348  2B84               	goto	l3764
  2332     0349                     u3980:
  2333     0349                     l3752:
  2334                           
  2335                           ;main.c: 294:         {;main.c: 296:             lcdSend(0x01, 0);
  2336     0349  1683               	bsf	3,5	;RP0=1, select bank1
  2337     034A  1303               	bcf	3,6	;RP1=0, select bank1
  2338     034B  01A0               	clrf	lcdSend@tipo^(0+128)
  2339     034C  3001               	movlw	1
  2340     034D  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2341     0352                     l3754:
  2342                           
  2343                           ;main.c: 297:             lcdPrint("Codice errato\0");
  2344     0352  30AB               	movlw	low (STR_15| (0+32768))
  2345     0353  1683               	bsf	3,5	;RP0=1, select bank1
  2346     0354  1303               	bcf	3,6	;RP1=0, select bank1
  2347     0355  00A4               	movwf	lcdPrint@str^(0+128)
  2348     0356  3087               	movlw	high (STR_15| (0+32768))
  2349     0357  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  2350     0358  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2351     035D                     l3756:
  2352                           
  2353                           ;main.c: 298:             lcdSend(0xC0, 0);
  2354     035D  1683               	bsf	3,5	;RP0=1, select bank1
  2355     035E  1303               	bcf	3,6	;RP1=0, select bank1
  2356     035F  01A0               	clrf	lcdSend@tipo^(0+128)
  2357     0360  30C0               	movlw	192
  2358     0361  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2359                           
  2360                           ;main.c: 299:             lcdPrint("Tentativi: \0");
  2361     0366  30BA               	movlw	low (STR_12| (0+32768))
  2362     0367  1683               	bsf	3,5	;RP0=1, select bank1
  2363     0368  1303               	bcf	3,6	;RP1=0, select bank1
  2364     0369  00A4               	movwf	lcdPrint@str^(0+128)
  2365     036A  3087               	movlw	high (STR_12| (0+32768))
  2366     036B  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  2367     036C  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2368     0371                     l3758:
  2369                           
  2370                           ;main.c: 300:             lcdSend(maxFail + '0', 1);
  2371     0371  1683               	bsf	3,5	;RP0=1, select bank1
  2372     0372  1303               	bcf	3,6	;RP1=0, select bank1
  2373     0373  01A0               	clrf	lcdSend@tipo^(0+128)
  2374     0374  0AA0               	incf	lcdSend@tipo^(0+128),f
  2375     0375  1683               	bsf	3,5	;RP0=1, select bank3
  2376     0376  1703               	bsf	3,6	;RP1=1, select bank3
  2377     0377  0853               	movf	_maxFail^(0+384),w
  2378     0378  3E30               	addlw	48
  2379     0379  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2380     037E                     l3760:
  2381                           
  2382                           ;main.c: 301:             iT = old_iT = 0;
  2383     037E  1683               	bsf	3,5	;RP0=1, select bank3
  2384     037F  1703               	bsf	3,6	;RP1=1, select bank3
  2385     0380  019C               	clrf	_old_iT^(0+384)
  2386     0381  019D               	clrf	_iT^(0+384)
  2387     0382                     l3762:
  2388                           
  2389                           ;main.c: 302:             fail = 0;
  2390     0382  0198               	clrf	_fail^(0+384)
  2391                           
  2392                           ;main.c: 303:         }
  2393     0383  2BCE               	goto	l3788
  2394     0384                     l3764:
  2395     0384  0853               	movf	_maxFail^(0+384),w
  2396     0385  1D03               	btfss	3,2
  2397     0386  2B88               	goto	u3991
  2398     0387  2B89               	goto	u3990
  2399     0388                     u3991:
  2400     0388  2BCE               	goto	l3788
  2401     0389                     u3990:
  2402     0389                     l3766:
  2403                           
  2404                           ;main.c: 306:         {;main.c: 308:             lcdSend(0x01, 0);
  2405     0389  1683               	bsf	3,5	;RP0=1, select bank1
  2406     038A  1303               	bcf	3,6	;RP1=0, select bank1
  2407     038B  01A0               	clrf	lcdSend@tipo^(0+128)
  2408     038C  3001               	movlw	1
  2409     038D  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2410     0392                     l3768:
  2411                           
  2412                           ;main.c: 309:             lcdPrint("Tent. esauriti\0");
  2413     0392  308C               	movlw	low (STR_17| (0+32768))
  2414     0393  1683               	bsf	3,5	;RP0=1, select bank1
  2415     0394  1303               	bcf	3,6	;RP1=0, select bank1
  2416     0395  00A4               	movwf	lcdPrint@str^(0+128)
  2417     0396  3087               	movlw	high (STR_17| (0+32768))
  2418     0397  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  2419     0398  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2420     039D                     l3770:
  2421                           
  2422                           ;main.c: 311:             maxFail = 3;
  2423     039D  3003               	movlw	3
  2424     039E  1683               	bsf	3,5	;RP0=1, select bank3
  2425     039F  1703               	bsf	3,6	;RP1=1, select bank3
  2426     03A0  00D3               	movwf	_maxFail^(0+384)
  2427     03A1                     l3772:
  2428                           
  2429                           ;main.c: 312:             iT = old_iT = 0;
  2430     03A1  019C               	clrf	_old_iT^(0+384)
  2431     03A2  019D               	clrf	_iT^(0+384)
  2432     03A3                     l3774:
  2433                           
  2434                           ;main.c: 313:             compare = 0;
  2435     03A3  019A               	clrf	_compare^(0+384)
  2436     03A4                     l3776:
  2437                           
  2438                           ;main.c: 315:             packet[0] = '0';
  2439     03A4  3030               	movlw	48
  2440     03A5  00B3               	movwf	_packet^(0+384)
  2441     03A6                     l3778:
  2442                           
  2443                           ;main.c: 316:             packet[1] = '/';
  2444     03A6  302F               	movlw	47
  2445     03A7  00B4               	movwf	(_packet^(0+384)+1)
  2446     03A8                     l3780:
  2447                           
  2448                           ;main.c: 317:             packet[2] = '\0';
  2449     03A8  01B5               	clrf	(_packet^(0+384)+2)
  2450     03A9                     l3782:
  2451                           
  2452                           ;main.c: 318:             ConcatToPacket(packet, PIC_ID, '/');
  2453     03A9  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2454     03AA  1683               	bsf	3,5	;RP0=1, select bank1
  2455     03AB  1303               	bcf	3,6	;RP1=0, select bank1
  2456     03AC  00B3               	movwf	ConcatToPacket@str^(0+128)
  2457     03AD  3001               	movlw	1
  2458     03AE  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2459     03AF  302F               	movlw	47
  2460     03B0  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2461     03B1  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2462     03B2  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  2463     03B7                     l3784:
  2464                           
  2465                           ;main.c: 319:             ConcatToPacket(packet, "1/0", ' ');
  2466     03B7  3006               	movlw	low (STR_18| (0+32768))
  2467     03B8  1683               	bsf	3,5	;RP0=1, select bank1
  2468     03B9  1303               	bcf	3,6	;RP1=0, select bank1
  2469     03BA  00B3               	movwf	ConcatToPacket@str^(0+128)
  2470     03BB  3088               	movlw	high (STR_18| (0+32768))
  2471     03BC  00B4               	movwf	(ConcatToPacket@str^(0+128)+1)
  2472     03BD  3020               	movlw	32
  2473     03BE  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2474     03BF  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2475     03C0  120A  158A  2086  120A  118A  	fcall	_ConcatToPacket
  2476     03C5                     l3786:
  2477                           
  2478                           ;main.c: 320:             UART_TxString(packet, 0);
  2479     03C5  1683               	bsf	3,5	;RP0=1, select bank1
  2480     03C6  1303               	bcf	3,6	;RP1=0, select bank1
  2481     03C7  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2482     03C8  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  2483     03C9  120A  158A  22FD  120A  118A  	fcall	_UART_TxString
  2484     03CE                     l3788:
  2485                           
  2486                           ;main.c: 324:         if(iT != old_iT && compare)
  2487     03CE  1683               	bsf	3,5	;RP0=1, select bank3
  2488     03CF  1703               	bsf	3,6	;RP1=1, select bank3
  2489     03D0  081D               	movf	_iT^(0+384),w
  2490     03D1  061C               	xorwf	_old_iT^(0+384),w
  2491     03D2  1903               	skipnz
  2492     03D3  2BD5               	goto	u4001
  2493     03D4  2BD6               	goto	u4000
  2494     03D5                     u4001:
  2495     03D5  2C03               	goto	l3798
  2496     03D6                     u4000:
  2497     03D6                     l3790:
  2498     03D6  081A               	movf	_compare^(0+384),w
  2499     03D7  1903               	btfsc	3,2
  2500     03D8  2BDA               	goto	u4011
  2501     03D9  2BDB               	goto	u4010
  2502     03DA                     u4011:
  2503     03DA  2C03               	goto	l3798
  2504     03DB                     u4010:
  2505     03DB                     l3792:
  2506                           
  2507                           ;main.c: 325:         {;main.c: 327:             lcdSend(0x01, 0);
  2508     03DB  1683               	bsf	3,5	;RP0=1, select bank1
  2509     03DC  1303               	bcf	3,6	;RP1=0, select bank1
  2510     03DD  01A0               	clrf	lcdSend@tipo^(0+128)
  2511     03DE  3001               	movlw	1
  2512     03DF  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2513     03E4                     l3794:
  2514                           
  2515                           ;main.c: 328:             lcdPrint("#=conf. *=canc.\0\0"),
  2516     03E4  3025               	movlw	low (STR_19| (0+32768))
  2517     03E5  1683               	bsf	3,5	;RP0=1, select bank1
  2518     03E6  1303               	bcf	3,6	;RP1=0, select bank1
  2519     03E7  00A4               	movwf	lcdPrint@str^(0+128)
  2520     03E8  3087               	movlw	high (STR_19| (0+32768))
  2521     03E9  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  2522     03EA  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2523     03EF                     l3796:
  2524     03EF  1683               	bsf	3,5	;RP0=1, select bank1
  2525     03F0  1303               	bcf	3,6	;RP1=0, select bank1
  2526     03F1  01A0               	clrf	lcdSend@tipo^(0+128)
  2527     03F2  30C0               	movlw	192
  2528     03F3  160A  118A  2646  120A  118A  	fcall	_lcdSend
  2529                           
  2530                           ;main.c: 330:             lcdPrint(datoTastierino);
  2531     03F8  30A2               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2532     03F9  1683               	bsf	3,5	;RP0=1, select bank1
  2533     03FA  1303               	bcf	3,6	;RP1=0, select bank1
  2534     03FB  00A4               	movwf	lcdPrint@str^(0+128)
  2535     03FC  3001               	movlw	1
  2536     03FD  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2537     03FE  120A  158A  20D0  120A  118A  	fcall	_lcdPrint
  2538     0403                     l3798:
  2539                           
  2540                           ;main.c: 333:         old_iT = iT;
  2541     0403  1683               	bsf	3,5	;RP0=1, select bank3
  2542     0404  1703               	bsf	3,6	;RP1=1, select bank3
  2543     0405  081D               	movf	_iT^(0+384),w
  2544     0406  009C               	movwf	_old_iT^(0+384)
  2545     0407  286E               	goto	l3574
  2546     0408  120A  118A  2810   	ljmp	start
  2547     040B                     __end_of_main:
  2548                           
  2549                           	psect	text1
  2550     040B                     __ptext1:	
  2551 ;; *************** function _read_NumPad *****************
  2552 ;; Defined at:
  2553 ;;		line 637 in file "main.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  id              2   43[BANK1 ] int 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2567 ;;      Params:         0       0       0       0       0
  2568 ;;      Locals:         0       0       2       0       0
  2569 ;;      Temps:          0       0      10       0       0
  2570 ;;      Totals:         0       0      12       0       0
  2571 ;;Total ram usage:       12 bytes
  2572 ;; Hardware stack levels used: 1
  2573 ;; Hardware stack levels required when called: 6
  2574 ;; This function calls:
  2575 ;;		_CompareStrings
  2576 ;;		_Fill
  2577 ;;		___awmod
  2578 ;;		___wmul
  2579 ;;		_eeprom_write
  2580 ;;		_rand
  2581 ;;		_srand
  2582 ;; This function is called by:
  2583 ;;		_main
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587     040B                     _read_NumPad:	
  2588                           ;psect for function _read_NumPad
  2589                           
  2590     040B                     l3380:	
  2591                           ;incstack = 0
  2592                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2593                           
  2594                           
  2595                           ;main.c: 640:     TRISD |= 0x0F;
  2596     040B  300F               	movlw	15
  2597     040C  1683               	bsf	3,5	;RP0=1, select bank1
  2598     040D  1303               	bcf	3,6	;RP1=0, select bank1
  2599     040E  00C1               	movwf	??_read_NumPad^(0+128)
  2600     040F  0841               	movf	??_read_NumPad^(0+128),w
  2601     0410  0488               	iorwf	8,f	;volatile
  2602     0411                     l3382:
  2603                           
  2604                           ;main.c: 641:     for(colScan = 0; colScan < 3; colScan++)
  2605     0411  01ED               	clrf	_colScan^(0+128)
  2606     0412                     l3388:
  2607                           
  2608                           ;main.c: 642:     {;main.c: 645:         PORTB |= 0x07;
  2609     0412  3007               	movlw	7
  2610     0413  00C1               	movwf	??_read_NumPad^(0+128)
  2611     0414  0841               	movf	??_read_NumPad^(0+128),w
  2612     0415  1283               	bcf	3,5	;RP0=0, select bank0
  2613     0416  1303               	bcf	3,6	;RP1=0, select bank0
  2614     0417  0486               	iorwf	6,f	;volatile
  2615     0418                     l3390:
  2616                           
  2617                           ;main.c: 647:         PORTB &= colMask[colScan];
  2618     0418  1683               	bsf	3,5	;RP0=1, select bank1
  2619     0419  1303               	bcf	3,6	;RP1=0, select bank1
  2620     041A  086D               	movf	_colScan^(0+128),w
  2621     041B  3E22               	addlw	low (_colMask| (0+32768))
  2622     041C  0084               	movwf	4
  2623     041D  3087               	movlw	high (_colMask| (0+32768))
  2624     041E  1803               	skipnc
  2625     041F  3E01               	addlw	1
  2626     0420  1283               	bcf	3,5	;RP0=0, select bank0
  2627     0421  1303               	bcf	3,6	;RP1=0, select bank0
  2628     0422  00FF               	movwf	btemp+1
  2629     0423  120A  118A  2700  120A  118A  	fcall	stringtab
  2630     0428  1683               	bsf	3,5	;RP0=1, select bank1
  2631     0429  1303               	bcf	3,6	;RP1=0, select bank1
  2632     042A  00C1               	movwf	??_read_NumPad^(0+128)
  2633     042B  0841               	movf	??_read_NumPad^(0+128),w
  2634     042C  1283               	bcf	3,5	;RP0=0, select bank0
  2635     042D  1303               	bcf	3,6	;RP1=0, select bank0
  2636     042E  0586               	andwf	6,f	;volatile
  2637     042F                     l3392:
  2638                           
  2639                           ;main.c: 649:         for(rowScan = 0; rowScan < 4; rowScan++)
  2640     042F  1683               	bsf	3,5	;RP0=1, select bank1
  2641     0430  1303               	bcf	3,6	;RP1=0, select bank1
  2642     0431  01EC               	clrf	_rowScan^(0+128)
  2643     0432                     l3398:
  2644                           
  2645                           ;main.c: 650:         {;main.c: 652:             if(!(PORTD & rowMask[rowScan]))
  2646     0432  086C               	movf	_rowScan^(0+128),w
  2647     0433  3E1E               	addlw	low (_rowMask| (0+32768))
  2648     0434  0084               	movwf	4
  2649     0435  3087               	movlw	high (_rowMask| (0+32768))
  2650     0436  1803               	skipnc
  2651     0437  3E01               	addlw	1
  2652     0438  1283               	bcf	3,5	;RP0=0, select bank0
  2653     0439  1303               	bcf	3,6	;RP1=0, select bank0
  2654     043A  00FF               	movwf	btemp+1
  2655     043B  120A  118A  2700  120A  118A  	fcall	stringtab
  2656     0440  0508               	andwf	8,w	;volatile
  2657     0441  1D03               	btfss	3,2
  2658     0442  2C44               	goto	u3501
  2659     0443  2C45               	goto	u3500
  2660     0444                     u3501:
  2661     0444  2C74               	goto	l277
  2662     0445                     u3500:
  2663     0445                     l3400:
  2664                           
  2665                           ;main.c: 653:             {;main.c: 655:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  2666     0445  3021               	movlw	33
  2667     0446  1683               	bsf	3,5	;RP0=1, select bank1
  2668     0447  1303               	bcf	3,6	;RP1=0, select bank1
  2669     0448  00C2               	movwf	(??_read_NumPad^(0+128)+1)
  2670     0449  3075               	movlw	117
  2671     044A  00C1               	movwf	??_read_NumPad^(0+128)
  2672     044B                     u4027:
  2673     044B  0BC1               	decfsz	??_read_NumPad^(0+128),f
  2674     044C  2C4B               	goto	u4027
  2675     044D  0BC2               	decfsz	(??_read_NumPad^(0+128)+1),f
  2676     044E  2C4B               	goto	u4027
  2677     044F  2C50               	nop2
  2678     0450                     l3402:
  2679                           
  2680                           ;main.c: 656:                 if(!(PORTD & rowMask[rowScan]))
  2681     0450  1683               	bsf	3,5	;RP0=1, select bank1
  2682     0451  1303               	bcf	3,6	;RP1=0, select bank1
  2683     0452  086C               	movf	_rowScan^(0+128),w
  2684     0453  3E1E               	addlw	low (_rowMask| (0+32768))
  2685     0454  0084               	movwf	4
  2686     0455  3087               	movlw	high (_rowMask| (0+32768))
  2687     0456  1803               	skipnc
  2688     0457  3E01               	addlw	1
  2689     0458  1283               	bcf	3,5	;RP0=0, select bank0
  2690     0459  1303               	bcf	3,6	;RP1=0, select bank0
  2691     045A  00FF               	movwf	btemp+1
  2692     045B  120A  118A  2700  120A  118A  	fcall	stringtab
  2693     0460  0508               	andwf	8,w	;volatile
  2694     0461  1D03               	btfss	3,2
  2695     0462  2C64               	goto	u3511
  2696     0463  2C65               	goto	u3510
  2697     0464                     u3511:
  2698     0464  2C74               	goto	l277
  2699     0465                     u3510:
  2700     0465                     l3404:
  2701                           
  2702                           ;main.c: 657:                 {;main.c: 661:                     keypressed = rowScan+(4
      +                          *colScan);
  2703     0465  1683               	bsf	3,5	;RP0=1, select bank1
  2704     0466  1303               	bcf	3,6	;RP1=0, select bank1
  2705     0467  086D               	movf	_colScan^(0+128),w
  2706     0468  00C1               	movwf	??_read_NumPad^(0+128)
  2707     0469  3002               	movlw	2
  2708     046A                     u3525:
  2709     046A  1003               	clrc
  2710     046B  0DC1               	rlf	??_read_NumPad^(0+128),f
  2711     046C  3EFF               	addlw	-1
  2712     046D  1D03               	skipz
  2713     046E  2C6A               	goto	u3525
  2714     046F  086C               	movf	_rowScan^(0+128),w
  2715     0470  0741               	addwf	??_read_NumPad^(0+128),w
  2716     0471  00EE               	movwf	_keypressed^(0+128)
  2717     0472                     l3406:
  2718                           
  2719                           ;main.c: 663:                     keyf = 1;
  2720     0472  01EB               	clrf	_keyf^(0+128)
  2721     0473  0AEB               	incf	_keyf^(0+128),f
  2722     0474                     l277:	
  2723                           ;main.c: 665:             }
  2724                           
  2725                           
  2726                           ;main.c: 666:         }
  2727     0474  3001               	movlw	1
  2728     0475  1683               	bsf	3,5	;RP0=1, select bank1
  2729     0476  1303               	bcf	3,6	;RP1=0, select bank1
  2730     0477  00C1               	movwf	??_read_NumPad^(0+128)
  2731     0478  0841               	movf	??_read_NumPad^(0+128),w
  2732     0479  07EC               	addwf	_rowScan^(0+128),f
  2733     047A                     l3408:
  2734     047A  3004               	movlw	4
  2735     047B  026C               	subwf	_rowScan^(0+128),w
  2736     047C  1C03               	skipc
  2737     047D  2C7F               	goto	u3531
  2738     047E  2C80               	goto	u3530
  2739     047F                     u3531:
  2740     047F  2C32               	goto	l3398
  2741     0480                     u3530:
  2742     0480                     l3410:
  2743                           
  2744                           ;main.c: 668:         if(keyf)
  2745     0480  086B               	movf	_keyf^(0+128),w
  2746     0481  1903               	btfsc	3,2
  2747     0482  2C84               	goto	u3541
  2748     0483  2C85               	goto	u3540
  2749     0484                     u3541:
  2750     0484  2E20               	goto	l3494
  2751     0485                     u3540:
  2752     0485                     l3412:
  2753                           
  2754                           ;main.c: 669:         {;main.c: 670:             keyf = 0;
  2755     0485  01EB               	clrf	_keyf^(0+128)
  2756     0486                     l3414:
  2757                           
  2758                           ;main.c: 673:             if(keypressed == 8)
  2759     0486  3008               	movlw	8
  2760     0487  066E               	xorwf	_keypressed^(0+128),w
  2761     0488  1D03               	btfss	3,2
  2762     0489  2C8B               	goto	u3551
  2763     048A  2C8C               	goto	u3550
  2764     048B                     u3551:
  2765     048B  2D88               	goto	l3454
  2766     048C                     u3550:
  2767     048C                     l3416:
  2768                           
  2769                           ;main.c: 674:             {;main.c: 676:                 if(initialize)
  2770     048C  1683               	bsf	3,5	;RP0=1, select bank3
  2771     048D  1703               	bsf	3,6	;RP1=1, select bank3
  2772     048E  0854               	movf	_initialize^(0+384),w
  2773     048F  1903               	btfsc	3,2
  2774     0490  2C92               	goto	u3561
  2775     0491  2C93               	goto	u3560
  2776     0492                     u3561:
  2777     0492  2D10               	goto	l3434
  2778     0493                     u3560:
  2779     0493                     l3418:
  2780                           
  2781                           ;main.c: 677:                 {;main.c: 679:                     if(i_id < 3)
  2782     0493  3003               	movlw	3
  2783     0494  0221               	subwf	_i_id^(0+384),w
  2784     0495  1803               	skipnc
  2785     0496  2C98               	goto	u3571
  2786     0497  2C99               	goto	u3570
  2787     0498                     u3571:
  2788     0498  2C9F               	goto	l3422
  2789     0499                     u3570:
  2790     0499                     l3420:
  2791                           
  2792                           ;main.c: 680:                     {;main.c: 682:                         Fill(PIC_ID);
  2793     0499  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  2794     049A  120A  158A  2238  120A  118A  	fcall	_Fill
  2795     049F                     l3422:
  2796                           
  2797                           ;main.c: 685:                     int id = (PIC_ID[0] - '0') * 100 + (PIC_ID[1] - '0') *
      +                           10 + (PIC_ID[2] - '0');
  2798     049F  1683               	bsf	3,5	;RP0=1, select bank3
  2799     04A0  1703               	bsf	3,6	;RP1=1, select bank3
  2800     04A1  0846               	movf	_PIC_ID^(0+384),w
  2801     04A2  1683               	bsf	3,5	;RP0=1, select bank1
  2802     04A3  1303               	bcf	3,6	;RP1=0, select bank1
  2803     04A4  00C1               	movwf	??_read_NumPad^(0+128)
  2804     04A5  01C2               	clrf	(??_read_NumPad^(0+128)+1)
  2805     04A6  0841               	movf	??_read_NumPad^(0+128),w
  2806     04A7  00BB               	movwf	___wmul@multiplier^(0+128)
  2807     04A8  0842               	movf	(??_read_NumPad+1)^(0+128),w
  2808     04A9  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2809     04AA  3064               	movlw	100
  2810     04AB  00BD               	movwf	___wmul@multiplicand^(0+128)
  2811     04AC  3000               	movlw	0
  2812     04AD  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2813     04AE  120A  158A  2017  120A  118A  	fcall	___wmul
  2814     04B3  1683               	bsf	3,5	;RP0=1, select bank1
  2815     04B4  1303               	bcf	3,6	;RP1=0, select bank1
  2816     04B5  083B               	movf	?___wmul^(0+128),w
  2817     04B6  00C3               	movwf	(??_read_NumPad+2)^(0+128)
  2818     04B7  083C               	movf	(?___wmul+1)^(0+128),w
  2819     04B8  00C4               	movwf	((??_read_NumPad+2)^(0+128)+1)
  2820     04B9  1683               	bsf	3,5	;RP0=1, select bank3
  2821     04BA  1703               	bsf	3,6	;RP1=1, select bank3
  2822     04BB  0847               	movf	(_PIC_ID^(0+384)+1),w
  2823     04BC  1683               	bsf	3,5	;RP0=1, select bank1
  2824     04BD  1303               	bcf	3,6	;RP1=0, select bank1
  2825     04BE  00C5               	movwf	(??_read_NumPad+4)^(0+128)
  2826     04BF  01C6               	clrf	((??_read_NumPad+4)^(0+128)+1)
  2827     04C0  0845               	movf	(??_read_NumPad+4)^(0+128),w
  2828     04C1  00BB               	movwf	___wmul@multiplier^(0+128)
  2829     04C2  0846               	movf	(??_read_NumPad+5)^(0+128),w
  2830     04C3  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2831     04C4  300A               	movlw	10
  2832     04C5  00BD               	movwf	___wmul@multiplicand^(0+128)
  2833     04C6  3000               	movlw	0
  2834     04C7  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2835     04C8  120A  158A  2017  120A  118A  	fcall	___wmul
  2836     04CD  1683               	bsf	3,5	;RP0=1, select bank1
  2837     04CE  1303               	bcf	3,6	;RP1=0, select bank1
  2838     04CF  083B               	movf	?___wmul^(0+128),w
  2839     04D0  0743               	addwf	(??_read_NumPad+2)^(0+128),w
  2840     04D1  00C7               	movwf	(??_read_NumPad+6)^(0+128)
  2841     04D2  083C               	movf	(?___wmul+1)^(0+128),w
  2842     04D3  1803               	skipnc
  2843     04D4  0A3C               	incf	(?___wmul+1)^(0+128),w
  2844     04D5  0744               	addwf	(??_read_NumPad+3)^(0+128),w
  2845     04D6  00C8               	movwf	(??_read_NumPad+7)^(0+128)
  2846     04D7  1683               	bsf	3,5	;RP0=1, select bank3
  2847     04D8  1703               	bsf	3,6	;RP1=1, select bank3
  2848     04D9  0848               	movf	(_PIC_ID^(0+384)+2),w
  2849     04DA  1683               	bsf	3,5	;RP0=1, select bank1
  2850     04DB  1303               	bcf	3,6	;RP1=0, select bank1
  2851     04DC  0747               	addwf	(??_read_NumPad+6)^(0+128),w
  2852     04DD  00C9               	movwf	(??_read_NumPad+8)^(0+128)
  2853     04DE  3000               	movlw	0
  2854     04DF  1803               	skipnc
  2855     04E0  3001               	movlw	1
  2856     04E1  0748               	addwf	(??_read_NumPad+7)^(0+128),w
  2857     04E2  00CA               	movwf	(??_read_NumPad+9)^(0+128)
  2858     04E3  0849               	movf	(??_read_NumPad+8)^(0+128),w
  2859     04E4  3E30               	addlw	48
  2860     04E5  00CB               	movwf	read_NumPad@id^(0+128)
  2861     04E6  084A               	movf	(??_read_NumPad+9)^(0+128),w
  2862     04E7  1803               	skipnc
  2863     04E8  3E01               	addlw	1
  2864     04E9  3EEB               	addlw	235
  2865     04EA  00CC               	movwf	(read_NumPad@id+1)^(0+128)
  2866     04EB                     l3424:
  2867                           
  2868                           ;main.c: 687:                     if(id <= 250)
  2869     04EB  084C               	movf	(read_NumPad@id+1)^(0+128),w
  2870     04EC  3A80               	xorlw	128
  2871     04ED  00FF               	movwf	btemp+1
  2872     04EE  3080               	movlw	128
  2873     04EF  027F               	subwf	btemp+1,w
  2874     04F0  1D03               	skipz
  2875     04F1  2CF4               	goto	u3585
  2876     04F2  30FB               	movlw	251
  2877     04F3  024B               	subwf	read_NumPad@id^(0+128),w
  2878     04F4                     u3585:
  2879     04F4  1803               	skipnc
  2880     04F5  2CF7               	goto	u3581
  2881     04F6  2CF8               	goto	u3580
  2882     04F7                     u3581:
  2883     04F7  2D08               	goto	l283
  2884     04F8                     u3580:
  2885     04F8                     l3426:
  2886                           
  2887                           ;main.c: 688:                     {;main.c: 690:                         eeprom_write(0,
      +                           id);
  2888     04F8  1683               	bsf	3,5	;RP0=1, select bank1
  2889     04F9  1303               	bcf	3,6	;RP1=0, select bank1
  2890     04FA  084B               	movf	read_NumPad@id^(0+128),w
  2891     04FB  00A0               	movwf	eeprom_write@value^(0+128)
  2892     04FC  3000               	movlw	0
  2893     04FD  160A  118A  2679  120A  118A  	fcall	_eeprom_write
  2894     0502                     l3428:
  2895                           
  2896                           ;main.c: 691:                         pr_succ = 1;
  2897     0502  1683               	bsf	3,5	;RP0=1, select bank3
  2898     0503  1703               	bsf	3,6	;RP1=1, select bank3
  2899     0504  0195               	clrf	_pr_succ^(0+384)
  2900     0505  0A95               	incf	_pr_succ^(0+384),f
  2901     0506                     l3430:
  2902                           
  2903                           ;main.c: 693:                         initialize = 0;
  2904     0506  01D4               	clrf	_initialize^(0+384)
  2905                           
  2906                           ;main.c: 694:                     }
  2907     0507  2E0D               	goto	l3490
  2908     0508                     l283:	
  2909                           ;main.c: 696:                     else
  2910                           
  2911                           
  2912                           ;main.c: 697:                     {;main.c: 698:                         pr_err_max = 1;
  2913     0508  1683               	bsf	3,5	;RP0=1, select bank3
  2914     0509  1703               	bsf	3,6	;RP1=1, select bank3
  2915     050A  0196               	clrf	_pr_err_max^(0+384)
  2916     050B  0A96               	incf	_pr_err_max^(0+384),f
  2917     050C                     l3432:
  2918                           
  2919                           ;main.c: 700:                         PIC_ID[0] = '\0';
  2920     050C  01C6               	clrf	_PIC_ID^(0+384)
  2921                           
  2922                           ;main.c: 701:                         i_id = old_i_id = 0;
  2923     050D  01A0               	clrf	_old_i_id^(0+384)
  2924     050E  01A1               	clrf	_i_id^(0+384)
  2925     050F  2E0D               	goto	l3490
  2926     0510                     l3434:
  2927     0510  081A               	movf	_compare^(0+384),w
  2928     0511  1D03               	btfss	3,2
  2929     0512  2D14               	goto	u3591
  2930     0513  2D15               	goto	u3590
  2931     0514                     u3591:
  2932     0514  2D5E               	goto	l3442
  2933     0515                     u3590:
  2934     0515                     l3436:
  2935     0515  304C               	movlw	76
  2936     0516  1683               	bsf	3,5	;RP0=1, select bank1
  2937     0517  1303               	bcf	3,6	;RP1=0, select bank1
  2938     0518  0663               	xorwf	_seconds^(0+128),w
  2939     0519  301D               	movlw	29
  2940     051A  1903               	skipnz
  2941     051B  0664               	xorwf	(_seconds+1)^(0+128),w
  2942     051C  0465               	iorwf	(_seconds+2)^(0+128),w
  2943     051D  0466               	iorwf	(_seconds+3)^(0+128),w
  2944     051E  1903               	btfsc	3,2
  2945     051F  2D21               	goto	u3601
  2946     0520  2D22               	goto	u3600
  2947     0521                     u3601:
  2948     0521  2D5E               	goto	l3442
  2949     0522                     u3600:
  2950     0522                     l3438:
  2951                           
  2952                           ;main.c: 706:                 {;main.c: 708:                     srand(milliseconds);
  2953     0522  1683               	bsf	3,5	;RP0=1, select bank1
  2954     0523  1303               	bcf	3,6	;RP1=0, select bank1
  2955     0524  0868               	movf	(_milliseconds+1)^(0+128),w
  2956     0525  00A1               	movwf	(srand@x+1)^(0+128)
  2957     0526  0867               	movf	_milliseconds^(0+128),w
  2958     0527  00A0               	movwf	srand@x^(0+128)
  2959     0528  160A  118A  25C3  120A  118A  	fcall	_srand
  2960                           
  2961                           ;main.c: 710:                     num_rand = ((rand()%8999)+1000);
  2962     052D  3027               	movlw	39
  2963     052E  1683               	bsf	3,5	;RP0=1, select bank1
  2964     052F  1303               	bcf	3,6	;RP1=0, select bank1
  2965     0530  00B4               	movwf	___awmod@divisor^(0+128)
  2966     0531  3023               	movlw	35
  2967     0532  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  2968     0533  120A  158A  236C  120A  118A  	fcall	_rand
  2969     0538  1683               	bsf	3,5	;RP0=1, select bank1
  2970     0539  1303               	bcf	3,6	;RP1=0, select bank1
  2971     053A  082E               	movf	(?_rand+1)^(0+128),w
  2972     053B  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  2973     053C  082D               	movf	?_rand^(0+128),w
  2974     053D  00B6               	movwf	___awmod@dividend^(0+128)
  2975     053E  120A  158A  2181  120A  118A  	fcall	___awmod
  2976     0543  1683               	bsf	3,5	;RP0=1, select bank1
  2977     0544  1303               	bcf	3,6	;RP1=0, select bank1
  2978     0545  0834               	movf	?___awmod^(0+128),w
  2979     0546  3EE8               	addlw	232
  2980     0547  1683               	bsf	3,5	;RP0=1, select bank3
  2981     0548  1703               	bsf	3,6	;RP1=1, select bank3
  2982     0549  0092               	movwf	_num_rand^(0+384)
  2983     054A  1683               	bsf	3,5	;RP0=1, select bank1
  2984     054B  1303               	bcf	3,6	;RP1=0, select bank1
  2985     054C  0835               	movf	(?___awmod+1)^(0+128),w
  2986     054D  1803               	skipnc
  2987     054E  3E01               	addlw	1
  2988     054F  3E03               	addlw	3
  2989     0550  1683               	bsf	3,5	;RP0=1, select bank3
  2990     0551  1703               	bsf	3,6	;RP1=1, select bank3
  2991     0552  0093               	movwf	(_num_rand+1)^(0+384)
  2992     0553                     l3440:
  2993                           
  2994                           ;main.c: 712:                     seconds = 0;
  2995     0553  3000               	movlw	0
  2996     0554  1683               	bsf	3,5	;RP0=1, select bank1
  2997     0555  1303               	bcf	3,6	;RP1=0, select bank1
  2998     0556  00E6               	movwf	(_seconds+3)^(0+128)
  2999     0557  3000               	movlw	0
  3000     0558  00E5               	movwf	(_seconds+2)^(0+128)
  3001     0559  3000               	movlw	0
  3002     055A  00E4               	movwf	(_seconds+1)^(0+128)
  3003     055B  3000               	movlw	0
  3004     055C  00E3               	movwf	_seconds^(0+128)
  3005                           
  3006                           ;main.c: 713:                 }
  3007     055D  2E0D               	goto	l3490
  3008     055E                     l3442:
  3009     055E  1683               	bsf	3,5	;RP0=1, select bank3
  3010     055F  1703               	bsf	3,6	;RP1=1, select bank3
  3011     0560  081A               	movf	_compare^(0+384),w
  3012     0561  1903               	btfsc	3,2
  3013     0562  2D64               	goto	u3611
  3014     0563  2D65               	goto	u3610
  3015     0564                     u3611:
  3016     0564  2D7C               	goto	l3448
  3017     0565                     u3610:
  3018     0565                     l3444:
  3019     0565  303F               	movlw	(low (_datoSeriale| 0))& (0+255)
  3020     0566  1683               	bsf	3,5	;RP0=1, select bank1
  3021     0567  1303               	bcf	3,6	;RP1=0, select bank1
  3022     0568  00A7               	movwf	CompareStrings@str1^(0+128)
  3023     0569  3000               	movlw	0
  3024     056A  00A8               	movwf	(CompareStrings@str1+1)^(0+128)
  3025     056B  30A2               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  3026     056C  00A9               	movwf	CompareStrings@str2^(0+128)
  3027     056D  120A  158A  21DC  120A  118A  	fcall	_CompareStrings
  3028     0572  3A00               	xorlw	0
  3029     0573  1903               	skipnz
  3030     0574  2D76               	goto	u3621
  3031     0575  2D77               	goto	u3620
  3032     0576                     u3621:
  3033     0576  2D7C               	goto	l3448
  3034     0577                     u3620:
  3035     0577                     l3446:
  3036                           
  3037                           ;main.c: 716:                 {;main.c: 717:                     success = 1;
  3038     0577  1683               	bsf	3,5	;RP0=1, select bank3
  3039     0578  1703               	bsf	3,6	;RP1=1, select bank3
  3040     0579  0199               	clrf	_success^(0+384)
  3041     057A  0A99               	incf	_success^(0+384),f
  3042                           
  3043                           ;main.c: 718:                 }
  3044     057B  2E0D               	goto	l3490
  3045     057C                     l3448:
  3046     057C  1683               	bsf	3,5	;RP0=1, select bank3
  3047     057D  1703               	bsf	3,6	;RP1=1, select bank3
  3048     057E  081A               	movf	_compare^(0+384),w
  3049     057F  1903               	btfsc	3,2
  3050     0580  2D82               	goto	u3631
  3051     0581  2D83               	goto	u3630
  3052     0582                     u3631:
  3053     0582  2E0D               	goto	l3490
  3054     0583                     u3630:
  3055     0583                     l3450:
  3056                           
  3057                           ;main.c: 721:                 {;main.c: 722:                     maxFail--;
  3058     0583  3001               	movlw	1
  3059     0584  02D3               	subwf	_maxFail^(0+384),f
  3060     0585                     l3452:
  3061                           
  3062                           ;main.c: 723:                     fail = 1;
  3063     0585  0198               	clrf	_fail^(0+384)
  3064     0586  0A98               	incf	_fail^(0+384),f
  3065     0587  2E0D               	goto	l3490
  3066     0588                     l3454:
  3067     0588  086E               	movf	_keypressed^(0+128),w
  3068     0589  1D03               	btfss	3,2
  3069     058A  2D8C               	goto	u3641
  3070     058B  2D8D               	goto	u3640
  3071     058C                     u3641:
  3072     058C  2DB3               	goto	l3472
  3073     058D                     u3640:
  3074     058D                     l3456:
  3075                           
  3076                           ;main.c: 728:             {;main.c: 730:                 if(compare && iT > 0)
  3077     058D  1683               	bsf	3,5	;RP0=1, select bank3
  3078     058E  1703               	bsf	3,6	;RP1=1, select bank3
  3079     058F  081A               	movf	_compare^(0+384),w
  3080     0590  1903               	btfsc	3,2
  3081     0591  2D93               	goto	u3651
  3082     0592  2D94               	goto	u3650
  3083     0593                     u3651:
  3084     0593  2DA1               	goto	l3464
  3085     0594                     u3650:
  3086     0594                     l3458:
  3087     0594  081D               	movf	_iT^(0+384),w
  3088     0595  1903               	btfsc	3,2
  3089     0596  2D98               	goto	u3661
  3090     0597  2D99               	goto	u3660
  3091     0598                     u3661:
  3092     0598  2DA1               	goto	l3464
  3093     0599                     u3660:
  3094     0599                     l3460:
  3095                           
  3096                           ;main.c: 731:                 {;main.c: 733:                     iT--;
  3097     0599  3001               	movlw	1
  3098     059A  029D               	subwf	_iT^(0+384),f
  3099     059B                     l3462:
  3100                           
  3101                           ;main.c: 734:                     datoTastierino[iT] = '\0';
  3102     059B  081D               	movf	_iT^(0+384),w
  3103     059C  3EA2               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3104     059D  0084               	movwf	4
  3105     059E  1783               	bsf	3,7	;select IRP bank3
  3106     059F  0180               	clrf	0
  3107                           
  3108                           ;main.c: 735:                 }
  3109     05A0  2E0D               	goto	l3490
  3110     05A1                     l3464:
  3111     05A1  0854               	movf	_initialize^(0+384),w
  3112     05A2  1903               	btfsc	3,2
  3113     05A3  2DA5               	goto	u3671
  3114     05A4  2DA6               	goto	u3670
  3115     05A5                     u3671:
  3116     05A5  2E0D               	goto	l3490
  3117     05A6                     u3670:
  3118     05A6                     l3466:
  3119     05A6  0821               	movf	_i_id^(0+384),w
  3120     05A7  1903               	btfsc	3,2
  3121     05A8  2DAA               	goto	u3681
  3122     05A9  2DAB               	goto	u3680
  3123     05AA                     u3681:
  3124     05AA  2E0D               	goto	l3490
  3125     05AB                     u3680:
  3126     05AB                     l3468:
  3127                           
  3128                           ;main.c: 738:                 {;main.c: 740:                     i_id--;
  3129     05AB  3001               	movlw	1
  3130     05AC  02A1               	subwf	_i_id^(0+384),f
  3131     05AD                     l3470:
  3132                           
  3133                           ;main.c: 741:                     PIC_ID[i_id] = '\0';
  3134     05AD  0821               	movf	_i_id^(0+384),w
  3135     05AE  3EC6               	addlw	(low (_PIC_ID| (0+256)))& (0+255)
  3136     05AF  0084               	movwf	4
  3137     05B0  1783               	bsf	3,7	;select IRP bank3
  3138     05B1  0180               	clrf	0
  3139     05B2  2E0D               	goto	l3490
  3140     05B3                     l3472:
  3141     05B3  1683               	bsf	3,5	;RP0=1, select bank3
  3142     05B4  1703               	bsf	3,6	;RP1=1, select bank3
  3143     05B5  081A               	movf	_compare^(0+384),w
  3144     05B6  1903               	btfsc	3,2
  3145     05B7  2DB9               	goto	u3691
  3146     05B8  2DBA               	goto	u3690
  3147     05B9                     u3691:
  3148     05B9  2DDE               	goto	l3480
  3149     05BA                     u3690:
  3150     05BA                     l3474:
  3151                           
  3152                           ;main.c: 746:             {;main.c: 748:                 datoTastierino[iT++] = keys[key
      +                          pressed];
  3153     05BA  1683               	bsf	3,5	;RP0=1, select bank1
  3154     05BB  1303               	bcf	3,6	;RP1=0, select bank1
  3155     05BC  086E               	movf	_keypressed^(0+128),w
  3156     05BD  3E12               	addlw	low (_keys| (0+32768))
  3157     05BE  0084               	movwf	4
  3158     05BF  3087               	movlw	high (_keys| (0+32768))
  3159     05C0  1803               	skipnc
  3160     05C1  3E01               	addlw	1
  3161     05C2  1283               	bcf	3,5	;RP0=0, select bank0
  3162     05C3  1303               	bcf	3,6	;RP1=0, select bank0
  3163     05C4  00FF               	movwf	btemp+1
  3164     05C5  120A  118A  2700  120A  118A  	fcall	stringtab
  3165     05CA  1683               	bsf	3,5	;RP0=1, select bank1
  3166     05CB  1303               	bcf	3,6	;RP1=0, select bank1
  3167     05CC  00C1               	movwf	??_read_NumPad^(0+128)
  3168     05CD  1683               	bsf	3,5	;RP0=1, select bank3
  3169     05CE  1703               	bsf	3,6	;RP1=1, select bank3
  3170     05CF  081D               	movf	_iT^(0+384),w
  3171     05D0  3EA2               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3172     05D1  0084               	movwf	4
  3173     05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3174     05D3  1303               	bcf	3,6	;RP1=0, select bank1
  3175     05D4  0841               	movf	??_read_NumPad^(0+128),w
  3176     05D5  1783               	bsf	3,7	;select IRP bank3
  3177     05D6  0080               	movwf	0
  3178     05D7                     l3476:
  3179     05D7  3001               	movlw	1
  3180     05D8  00C1               	movwf	??_read_NumPad^(0+128)
  3181     05D9  0841               	movf	??_read_NumPad^(0+128),w
  3182     05DA  1683               	bsf	3,5	;RP0=1, select bank3
  3183     05DB  1703               	bsf	3,6	;RP1=1, select bank3
  3184     05DC  079D               	addwf	_iT^(0+384),f
  3185     05DD  2D9B               	goto	l3462
  3186     05DE                     l3480:
  3187     05DE  0854               	movf	_initialize^(0+384),w
  3188     05DF  1903               	btfsc	3,2
  3189     05E0  2DE2               	goto	u3701
  3190     05E1  2DE3               	goto	u3700
  3191     05E2                     u3701:
  3192     05E2  2E0D               	goto	l3490
  3193     05E3                     u3700:
  3194     05E3                     l3482:
  3195     05E3  3003               	movlw	3
  3196     05E4  0221               	subwf	_i_id^(0+384),w
  3197     05E5  1803               	skipnc
  3198     05E6  2DE8               	goto	u3711
  3199     05E7  2DE9               	goto	u3710
  3200     05E8                     u3711:
  3201     05E8  2E0D               	goto	l3490
  3202     05E9                     u3710:
  3203     05E9                     l3484:
  3204                           
  3205                           ;main.c: 753:             {;main.c: 755:                 PIC_ID[i_id++] = keys[keypresse
      +                          d];
  3206     05E9  1683               	bsf	3,5	;RP0=1, select bank1
  3207     05EA  1303               	bcf	3,6	;RP1=0, select bank1
  3208     05EB  086E               	movf	_keypressed^(0+128),w
  3209     05EC  3E12               	addlw	low (_keys| (0+32768))
  3210     05ED  0084               	movwf	4
  3211     05EE  3087               	movlw	high (_keys| (0+32768))
  3212     05EF  1803               	skipnc
  3213     05F0  3E01               	addlw	1
  3214     05F1  1283               	bcf	3,5	;RP0=0, select bank0
  3215     05F2  1303               	bcf	3,6	;RP1=0, select bank0
  3216     05F3  00FF               	movwf	btemp+1
  3217     05F4  120A  118A  2700  120A  118A  	fcall	stringtab
  3218     05F9  1683               	bsf	3,5	;RP0=1, select bank1
  3219     05FA  1303               	bcf	3,6	;RP1=0, select bank1
  3220     05FB  00C1               	movwf	??_read_NumPad^(0+128)
  3221     05FC  1683               	bsf	3,5	;RP0=1, select bank3
  3222     05FD  1703               	bsf	3,6	;RP1=1, select bank3
  3223     05FE  0821               	movf	_i_id^(0+384),w
  3224     05FF  3EC6               	addlw	(low (_PIC_ID| (0+256)))& (0+255)
  3225     0600  0084               	movwf	4
  3226     0601  1683               	bsf	3,5	;RP0=1, select bank1
  3227     0602  1303               	bcf	3,6	;RP1=0, select bank1
  3228     0603  0841               	movf	??_read_NumPad^(0+128),w
  3229     0604  1783               	bsf	3,7	;select IRP bank3
  3230     0605  0080               	movwf	0
  3231     0606                     l3486:
  3232     0606  3001               	movlw	1
  3233     0607  00C1               	movwf	??_read_NumPad^(0+128)
  3234     0608  0841               	movf	??_read_NumPad^(0+128),w
  3235     0609  1683               	bsf	3,5	;RP0=1, select bank3
  3236     060A  1703               	bsf	3,6	;RP1=1, select bank3
  3237     060B  07A1               	addwf	_i_id^(0+384),f
  3238     060C  2DAD               	goto	l3470
  3239     060D                     l3490:
  3240                           
  3241                           ;main.c: 759:             PORTD |= 0x0F;
  3242     060D  300F               	movlw	15
  3243     060E  1303               	bcf	3,6	;RP1=0, select bank1
  3244     060F  00C1               	movwf	??_read_NumPad^(0+128)
  3245     0610  0841               	movf	??_read_NumPad^(0+128),w
  3246     0611  1283               	bcf	3,5	;RP0=0, select bank0
  3247     0612  1303               	bcf	3,6	;RP1=0, select bank0
  3248     0613  0488               	iorwf	8,f	;volatile
  3249     0614                     l3492:	
  3250                           ;main.c: 762:             while(((PORTD & 0x0F) != 0x0F))
  3251                           
  3252                           
  3253                           ;main.c: 762:             while(((PORTD & 0x0F) != 0x0F))
  3254     0614  300F               	movlw	15
  3255     0615  1283               	bcf	3,5	;RP0=0, select bank0
  3256     0616  0508               	andwf	8,w	;volatile
  3257     0617  1683               	bsf	3,5	;RP0=1, select bank1
  3258     0618  1303               	bcf	3,6	;RP1=0, select bank1
  3259     0619  00C1               	movwf	??_read_NumPad^(0+128)
  3260     061A  300F               	movlw	15
  3261     061B  0641               	xorwf	??_read_NumPad^(0+128),w
  3262     061C  1D03               	btfss	3,2
  3263     061D  2E1F               	goto	u3721
  3264     061E  2E20               	goto	u3720
  3265     061F                     u3721:
  3266     061F  2E14               	goto	l3492
  3267     0620                     u3720:
  3268     0620                     l3494:
  3269                           
  3270                           ;main.c: 767:     }
  3271     0620  3001               	movlw	1
  3272     0621  00C1               	movwf	??_read_NumPad^(0+128)
  3273     0622  0841               	movf	??_read_NumPad^(0+128),w
  3274     0623  07ED               	addwf	_colScan^(0+128),f
  3275     0624                     l3496:
  3276     0624  3003               	movlw	3
  3277     0625  026D               	subwf	_colScan^(0+128),w
  3278     0626  1C03               	skipc
  3279     0627  2E29               	goto	u3731
  3280     0628  2E2A               	goto	u3730
  3281     0629                     u3731:
  3282     0629  2C12               	goto	l3388
  3283     062A                     u3730:
  3284     062A                     l303:
  3285     062A  0008               	return
  3286     062B                     __end_of_read_NumPad:
  3287                           
  3288                           	psect	text2
  3289     1679                     __ptext2:	
  3290 ;; *************** function _eeprom_write *****************
  3291 ;; Defined at:
  3292 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  addr            1    wreg     unsigned char 
  3295 ;;  value           1    0[BANK1 ] unsigned char 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  addr            1    2[BANK1 ] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3307 ;;      Params:         0       0       1       0       0
  3308 ;;      Locals:         0       0       1       0       0
  3309 ;;      Temps:          0       0       1       0       0
  3310 ;;      Totals:         0       0       3       0       0
  3311 ;;Total ram usage:        3 bytes
  3312 ;; Hardware stack levels used: 1
  3313 ;; Hardware stack levels required when called: 4
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_read_NumPad
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321     1679                     _eeprom_write:	
  3322                           ;psect for function _eeprom_write
  3323                           
  3324                           
  3325                           ;incstack = 0
  3326                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3327                           ;eeprom_write@addr stored from wreg
  3328     1679  1683               	bsf	3,5	;RP0=1, select bank1
  3329     167A  1303               	bcf	3,6	;RP1=0, select bank1
  3330     167B  00A2               	movwf	eeprom_write@addr^(0+128)
  3331     167C                     l443:	
  3332                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  3333                           
  3334     167C                     l444:
  3335     167C  1683               	bsf	3,5	;RP0=1, select bank3
  3336     167D  1703               	bsf	3,6	;RP1=1, select bank3
  3337     167E  188C               	btfsc	12,1	;volsfr
  3338     167F  2E81               	goto	u3351
  3339     1680  2E82               	goto	u3350
  3340     1681                     u3351:
  3341     1681  2E7C               	goto	l444
  3342     1682                     u3350:
  3343     1682                     l3288:
  3344     1682  1683               	bsf	3,5	;RP0=1, select bank1
  3345     1683  1303               	bcf	3,6	;RP1=0, select bank1
  3346     1684  0822               	movf	eeprom_write@addr^(0+128),w
  3347     1685  1283               	bcf	3,5	;RP0=0, select bank2
  3348     1686  1703               	bsf	3,6	;RP1=1, select bank2
  3349     1687  008D               	movwf	13	;volatile
  3350     1688  1683               	bsf	3,5	;RP0=1, select bank1
  3351     1689  1303               	bcf	3,6	;RP1=0, select bank1
  3352     168A  0820               	movf	eeprom_write@value^(0+128),w
  3353     168B  1283               	bcf	3,5	;RP0=0, select bank2
  3354     168C  1703               	bsf	3,6	;RP1=1, select bank2
  3355     168D  008C               	movwf	12	;volatile
  3356     168E                     l3290:
  3357     168E  303F               	movlw	63
  3358     168F  1683               	bsf	3,5	;RP0=1, select bank1
  3359     1690  1303               	bcf	3,6	;RP1=0, select bank1
  3360     1691  00A1               	movwf	??_eeprom_write^(0+128)
  3361     1692  0821               	movf	??_eeprom_write^(0+128),w
  3362     1693  1683               	bsf	3,5	;RP0=1, select bank3
  3363     1694  1703               	bsf	3,6	;RP1=1, select bank3
  3364     1695  058C               	andwf	12,f	;volsfr
  3365     1696                     l3292:
  3366     1696  1283               	bcf	3,5	;RP0=0, select bank0
  3367     1697  1303               	bcf	3,6	;RP1=0, select bank0
  3368     1698  1003               	bcf	3,0	;volatile
  3369     1699                     l3294:
  3370     1699  1F8B               	btfss	11,7	;volatile
  3371     169A  2E9C               	goto	u3361
  3372     169B  2E9D               	goto	u3360
  3373     169C                     u3361:
  3374     169C  2E9E               	goto	l447
  3375     169D                     u3360:
  3376     169D                     l3296:
  3377     169D  1403               	bsf	3,0	;volatile
  3378     169E                     l447:
  3379     169E  138B               	bcf	11,7	;volatile
  3380     169F  1683               	bsf	3,5	;RP0=1, select bank3
  3381     16A0  1703               	bsf	3,6	;RP1=1, select bank3
  3382     16A1  150C               	bsf	12,2	;volsfr
  3383     16A2                     l3298:
  3384     16A2  3055               	movlw	85
  3385     16A3  008D               	movwf	13	;volsfr
  3386     16A4  30AA               	movlw	170
  3387     16A5  008D               	movwf	13	;volsfr
  3388     16A6                     l3300:
  3389     16A6  148C               	bsf	12,1	;volsfr
  3390     16A7                     l3302:
  3391     16A7  110C               	bcf	12,2	;volsfr
  3392     16A8                     l3304:
  3393     16A8  1283               	bcf	3,5	;RP0=0, select bank0
  3394     16A9  1303               	bcf	3,6	;RP1=0, select bank0
  3395     16AA  1C03               	btfss	3,0	;volatile
  3396     16AB  2EAD               	goto	u3371
  3397     16AC  2EAE               	goto	u3370
  3398     16AD                     u3371:
  3399     16AD  2EAF               	goto	l450
  3400     16AE                     u3370:
  3401     16AE                     l3306:
  3402     16AE  178B               	bsf	11,7	;volatile
  3403     16AF                     l450:
  3404     16AF  0008               	return
  3405     16B0                     __end_of_eeprom_write:
  3406                           
  3407                           	psect	text3
  3408     09DC                     __ptext3:	
  3409 ;; *************** function _CompareStrings *****************
  3410 ;; Defined at:
  3411 ;;		line 581 in file "main.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  str1            2    7[BANK1 ] PTR unsigned char 
  3414 ;;		 -> datoSeriale(17), id_dest(4), 
  3415 ;;  str2            1    9[BANK1 ] PTR unsigned char 
  3416 ;;		 -> datoTastierino(17), PIC_ID(4), 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;  i               1   14[BANK1 ] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      unsigned char 
  3421 ;; Registers used:
  3422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3428 ;;      Params:         0       0       3       0       0
  3429 ;;      Locals:         0       0       1       0       0
  3430 ;;      Temps:          0       0       4       0       0
  3431 ;;      Totals:         0       0       8       0       0
  3432 ;;Total ram usage:        8 bytes
  3433 ;; Hardware stack levels used: 1
  3434 ;; Hardware stack levels required when called: 5
  3435 ;; This function calls:
  3436 ;;		_Length
  3437 ;; This function is called by:
  3438 ;;		_main
  3439 ;;		_read_NumPad
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443     09DC                     _CompareStrings:	
  3444                           ;psect for function _CompareStrings
  3445                           
  3446     09DC                     l3162:	
  3447                           ;incstack = 0
  3448                           ; Regs used in _CompareStrings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3449                           
  3450                           
  3451                           ;main.c: 581: char CompareStrings(char *str1, char *str2);main.c: 582: {;main.c: 584:   
      +                            if(Length(str1) != Length(str2))
  3452     09DC  1683               	bsf	3,5	;RP0=1, select bank1
  3453     09DD  1303               	bcf	3,6	;RP1=0, select bank1
  3454     09DE  0827               	movf	CompareStrings@str1^(0+128),w
  3455     09DF  00A0               	movwf	Length@str^(0+128)
  3456     09E0  0828               	movf	(CompareStrings@str1+1)^(0+128),w
  3457     09E1  00A1               	movwf	(Length@str+1)^(0+128)
  3458     09E2  120A  118A  26D0  120A  158A  	fcall	_Length
  3459     09E7  1683               	bsf	3,5	;RP0=1, select bank1
  3460     09E8  1303               	bcf	3,6	;RP1=0, select bank1
  3461     09E9  0820               	movf	?_Length^(0+128),w
  3462     09EA  00AA               	movwf	??_CompareStrings^(0+128)
  3463     09EB  0821               	movf	(?_Length+1)^(0+128),w
  3464     09EC  00AB               	movwf	(??_CompareStrings^(0+128)+1)
  3465     09ED  0829               	movf	CompareStrings@str2^(0+128),w
  3466     09EE  00A0               	movwf	Length@str^(0+128)
  3467     09EF  3001               	movlw	1
  3468     09F0  00A1               	movwf	(Length@str+1)^(0+128)
  3469     09F1  120A  118A  26D0  120A  158A  	fcall	_Length
  3470     09F6  1683               	bsf	3,5	;RP0=1, select bank1
  3471     09F7  1303               	bcf	3,6	;RP1=0, select bank1
  3472     09F8  0821               	movf	(?_Length+1)^(0+128),w
  3473     09F9  062B               	xorwf	(??_CompareStrings+1)^(0+128),w
  3474     09FA  1D03               	skipz
  3475     09FB  29FE               	goto	u3235
  3476     09FC  0820               	movf	?_Length^(0+128),w
  3477     09FD  062A               	xorwf	??_CompareStrings^(0+128),w
  3478     09FE                     u3235:
  3479     09FE  1903               	skipnz
  3480     09FF  2A01               	goto	u3231
  3481     0A00  2A02               	goto	u3230
  3482     0A01                     u3231:
  3483     0A01  2A04               	goto	l3170
  3484     0A02                     u3230:
  3485     0A02                     l3164:
  3486                           
  3487                           ;main.c: 585:         return 0;
  3488     0A02  3000               	movlw	0
  3489     0A03  2A37               	goto	l253
  3490     0A04                     l3170:
  3491                           
  3492                           ;main.c: 587:     {;main.c: 588:         char i = 0;
  3493     0A04  01AE               	clrf	CompareStrings@i^(0+128)
  3494                           
  3495                           ;main.c: 591:         while(str1[i] != '\0')
  3496     0A05  2A25               	goto	l3180
  3497     0A06                     l3172:
  3498                           
  3499                           ;main.c: 592:         {;main.c: 593:             if(str1[i] != str2[i])
  3500     0A06  082E               	movf	CompareStrings@i^(0+128),w
  3501     0A07  0729               	addwf	CompareStrings@str2^(0+128),w
  3502     0A08  00AA               	movwf	??_CompareStrings^(0+128)
  3503     0A09  082A               	movf	??_CompareStrings^(0+128),w
  3504     0A0A  0084               	movwf	4
  3505     0A0B  1783               	bsf	3,7	;select IRP bank2
  3506     0A0C  0800               	movf	0,w
  3507     0A0D  00AB               	movwf	(??_CompareStrings+1)^(0+128)
  3508     0A0E  082E               	movf	CompareStrings@i^(0+128),w
  3509     0A0F  0727               	addwf	CompareStrings@str1^(0+128),w
  3510     0A10  00AC               	movwf	(??_CompareStrings+2)^(0+128)
  3511     0A11  0828               	movf	(CompareStrings@str1+1)^(0+128),w
  3512     0A12  1803               	skipnc
  3513     0A13  3E01               	addlw	1
  3514     0A14  00AD               	movwf	((??_CompareStrings+2)^(0+128)+1)
  3515     0A15  082C               	movf	(??_CompareStrings+2)^(0+128),w
  3516     0A16  0084               	movwf	4
  3517     0A17  1783               	bsf	3,7
  3518     0A18  1C2D               	btfss	(??_CompareStrings+3)^(0+128),0
  3519     0A19  1383               	bcf	3,7
  3520     0A1A  0800               	movf	0,w
  3521     0A1B  062B               	xorwf	(??_CompareStrings+1)^(0+128),w
  3522     0A1C  1903               	skipnz
  3523     0A1D  2A1F               	goto	u3241
  3524     0A1E  2A20               	goto	u3240
  3525     0A1F                     u3241:
  3526     0A1F  2A21               	goto	l3178
  3527     0A20                     u3240:
  3528     0A20  2A02               	goto	l3164
  3529     0A21                     l3178:
  3530                           
  3531                           ;main.c: 596:             i++;
  3532     0A21  3001               	movlw	1
  3533     0A22  00AA               	movwf	??_CompareStrings^(0+128)
  3534     0A23  082A               	movf	??_CompareStrings^(0+128),w
  3535     0A24  07AE               	addwf	CompareStrings@i^(0+128),f
  3536     0A25                     l3180:
  3537                           
  3538                           ;main.c: 591:         while(str1[i] != '\0')
  3539     0A25  082E               	movf	CompareStrings@i^(0+128),w
  3540     0A26  0727               	addwf	CompareStrings@str1^(0+128),w
  3541     0A27  00AA               	movwf	??_CompareStrings^(0+128)
  3542     0A28  0828               	movf	(CompareStrings@str1+1)^(0+128),w
  3543     0A29  1803               	skipnc
  3544     0A2A  3E01               	addlw	1
  3545     0A2B  00AB               	movwf	(??_CompareStrings^(0+128)+1)
  3546     0A2C  082A               	movf	??_CompareStrings^(0+128),w
  3547     0A2D  0084               	movwf	4
  3548     0A2E  1783               	bsf	3,7
  3549     0A2F  1C2B               	btfss	(??_CompareStrings+1)^(0+128),0
  3550     0A30  1383               	bcf	3,7
  3551     0A31  0800               	movf	0,w
  3552     0A32  1D03               	btfss	3,2
  3553     0A33  2A35               	goto	u3251
  3554     0A34  2A36               	goto	u3250
  3555     0A35                     u3251:
  3556     0A35  2A06               	goto	l3172
  3557     0A36                     u3250:
  3558     0A36                     l3182:
  3559                           
  3560                           ;main.c: 599:         return 1;
  3561     0A36  3001               	movlw	1
  3562     0A37                     l253:
  3563     0A37  0008               	return
  3564     0A38                     __end_of_CompareStrings:
  3565                           
  3566                           	psect	text4
  3567     0CCA                     __ptext4:	
  3568 ;; *************** function _init_PIC *****************
  3569 ;; Defined at:
  3570 ;;		line 339 in file "main.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;		None
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  id              2    7[BANK3 ] int 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      void 
  3577 ;; Registers used:
  3578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3584 ;;      Params:         0       0       0       0       0
  3585 ;;      Locals:         0       0       0       2       0
  3586 ;;      Temps:          0       0       2       0       0
  3587 ;;      Totals:         0       0       2       2       0
  3588 ;;Total ram usage:        4 bytes
  3589 ;; Hardware stack levels used: 1
  3590 ;; Hardware stack levels required when called: 7
  3591 ;; This function calls:
  3592 ;;		_ConvertToString
  3593 ;;		_Fill
  3594 ;;		_UART_init
  3595 ;;		_eeprom_read
  3596 ;;		_init_LCD
  3597 ;;		_init_NumPad
  3598 ;;		_init_Timer0
  3599 ;;		_lcdPrint
  3600 ;;		_lcdSend
  3601 ;; This function is called by:
  3602 ;;		_main
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606     0CCA                     _init_PIC:	
  3607                           ;psect for function _init_PIC
  3608                           
  3609     0CCA                     l3362:	
  3610                           ;incstack = 0
  3611                           ; Regs used in _init_PIC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3612                           
  3613                           
  3614                           ;main.c: 342:     UART_init(115200);
  3615     0CCA  3000               	movlw	0
  3616     0CCB  1683               	bsf	3,5	;RP0=1, select bank1
  3617     0CCC  1303               	bcf	3,6	;RP1=0, select bank1
  3618     0CCD  00DC               	movwf	(UART_init@baudrate+3)^(0+128)
  3619     0CCE  3001               	movlw	1
  3620     0CCF  00DB               	movwf	(UART_init@baudrate+2)^(0+128)
  3621     0CD0  30C2               	movlw	194
  3622     0CD1  00DA               	movwf	(UART_init@baudrate+1)^(0+128)
  3623     0CD2  3000               	movlw	0
  3624     0CD3  00D9               	movwf	UART_init@baudrate^(0+128)
  3625     0CD4  160A  118A  26EC  120A  158A  	fcall	_UART_init
  3626                           
  3627                           ;main.c: 343:     init_LCD();
  3628     0CD9  120A  158A  2296  120A  158A  	fcall	_init_LCD
  3629                           
  3630                           ;main.c: 344:     init_NumPad();
  3631     0CDE  160A  118A  25AA  120A  158A  	fcall	_init_NumPad
  3632                           
  3633                           ;main.c: 345:     init_Timer0();
  3634     0CE3  160A  118A  25E9  120A  158A  	fcall	_init_Timer0
  3635                           
  3636                           ;main.c: 348:     int id = (int)eeprom_read(0);
  3637     0CE8  3000               	movlw	0
  3638     0CE9  160A  118A  2600  120A  158A  	fcall	_eeprom_read
  3639     0CEE  1683               	bsf	3,5	;RP0=1, select bank1
  3640     0CEF  1303               	bcf	3,6	;RP1=0, select bank1
  3641     0CF0  00E1               	movwf	??_init_PIC^(0+128)
  3642     0CF1  01E2               	clrf	(??_init_PIC^(0+128)+1)
  3643     0CF2  0861               	movf	??_init_PIC^(0+128),w
  3644     0CF3  1683               	bsf	3,5	;RP0=1, select bank3
  3645     0CF4  1703               	bsf	3,6	;RP1=1, select bank3
  3646     0CF5  00D1               	movwf	init_PIC@id^(0+384)
  3647     0CF6  1683               	bsf	3,5	;RP0=1, select bank1
  3648     0CF7  1303               	bcf	3,6	;RP1=0, select bank1
  3649     0CF8  0862               	movf	(??_init_PIC+1)^(0+128),w
  3650     0CF9  1683               	bsf	3,5	;RP0=1, select bank3
  3651     0CFA  1703               	bsf	3,6	;RP1=1, select bank3
  3652     0CFB  00D2               	movwf	(init_PIC@id+1)^(0+384)
  3653     0CFC                     l3364:
  3654                           
  3655                           ;main.c: 350:     if(id == 255)
  3656     0CFC  0A51               	incf	init_PIC@id^(0+384),w
  3657     0CFD  0452               	iorwf	(init_PIC@id+1)^(0+384),w
  3658     0CFE  1D03               	btfss	3,2
  3659     0CFF  2D01               	goto	u3491
  3660     0D00  2D02               	goto	u3490
  3661     0D01                     u3491:
  3662     0D01  2D22               	goto	l3372
  3663     0D02                     u3490:
  3664     0D02                     l3366:
  3665                           
  3666                           ;main.c: 351:     {;main.c: 352:         lcdPrint("Inser. ID PIC:\0");
  3667     0D02  307C               	movlw	low (STR_20| (0+32768))
  3668     0D03  1683               	bsf	3,5	;RP0=1, select bank1
  3669     0D04  1303               	bcf	3,6	;RP1=0, select bank1
  3670     0D05  00A4               	movwf	lcdPrint@str^(0+128)
  3671     0D06  3087               	movlw	high (STR_20| (0+32768))
  3672     0D07  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  3673     0D08  120A  158A  20D0  120A  158A  	fcall	_lcdPrint
  3674     0D0D                     l3368:
  3675                           
  3676                           ;main.c: 353:         lcdSend(0xC0, 0);
  3677     0D0D  1683               	bsf	3,5	;RP0=1, select bank1
  3678     0D0E  1303               	bcf	3,6	;RP1=0, select bank1
  3679     0D0F  01A0               	clrf	lcdSend@tipo^(0+128)
  3680     0D10  30C0               	movlw	192
  3681     0D11  160A  118A  2646  120A  158A  	fcall	_lcdSend
  3682     0D16                     l3370:
  3683                           
  3684                           ;main.c: 354:         lcdPrint("MIN=0,MAX=250\0");
  3685     0D16  309C               	movlw	low (STR_21| (0+32768))
  3686     0D17  1683               	bsf	3,5	;RP0=1, select bank1
  3687     0D18  1303               	bcf	3,6	;RP1=0, select bank1
  3688     0D19  00A4               	movwf	lcdPrint@str^(0+128)
  3689     0D1A  3087               	movlw	high (STR_21| (0+32768))
  3690     0D1B  00A5               	movwf	(lcdPrint@str^(0+128)+1)
  3691     0D1C  120A  158A  20D0  120A  158A  	fcall	_lcdPrint
  3692                           
  3693                           ;main.c: 355:     }
  3694     0D21  2D43               	goto	l180
  3695     0D22                     l3372:
  3696                           
  3697                           ;main.c: 358:     {;main.c: 359:         ConvertToString(id, PIC_ID);
  3698     0D22  0851               	movf	init_PIC@id^(0+384),w
  3699     0D23  1683               	bsf	3,5	;RP0=1, select bank1
  3700     0D24  1303               	bcf	3,6	;RP1=0, select bank1
  3701     0D25  00D9               	movwf	ConvertToString@n^(0+128)
  3702     0D26  1683               	bsf	3,5	;RP0=1, select bank3
  3703     0D27  1703               	bsf	3,6	;RP1=1, select bank3
  3704     0D28  0852               	movf	(init_PIC@id+1)^(0+384),w
  3705     0D29  1683               	bsf	3,5	;RP0=1, select bank1
  3706     0D2A  1303               	bcf	3,6	;RP1=0, select bank1
  3707     0D2B  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  3708     0D2C  3000               	movlw	0
  3709     0D2D  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  3710     0D2E  30FF               	movlw	255
  3711     0D2F  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  3712     0D30  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  3713     0D31  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  3714     0D32  00DD               	movwf	ConvertToString@str^(0+128)
  3715     0D33  120A  158A  26F6  120A  158A  	fcall	_ConvertToString
  3716     0D38                     l3374:
  3717                           
  3718                           ;main.c: 360:         Fill(PIC_ID);
  3719     0D38  30C6               	movlw	(low (_PIC_ID| (0+256)))& (0+255)
  3720     0D39  120A  158A  2238  120A  158A  	fcall	_Fill
  3721     0D3E                     l3376:
  3722                           
  3723                           ;main.c: 361:         initialize = 0;
  3724     0D3E  1683               	bsf	3,5	;RP0=1, select bank3
  3725     0D3F  1703               	bsf	3,6	;RP1=1, select bank3
  3726     0D40  01D4               	clrf	_initialize^(0+384)
  3727     0D41                     l3378:
  3728                           
  3729                           ;main.c: 362:         pr_start = 1;
  3730     0D41  0197               	clrf	_pr_start^(0+384)
  3731     0D42  0A97               	incf	_pr_start^(0+384),f
  3732     0D43                     l180:
  3733     0D43  0008               	return
  3734     0D44                     __end_of_init_PIC:
  3735                           
  3736                           	psect	text5
  3737     08D0                     __ptext5:	
  3738 ;; *************** function _lcdPrint *****************
  3739 ;; Defined at:
  3740 ;;		line 414 in file "main.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  str             2    4[BANK1 ] PTR unsigned char 
  3743 ;;		 -> STR_21(15), STR_20(16), datoTastierino(17), STR_19(18), 
  3744 ;;		 -> STR_17(16), STR_16(13), STR_15(15), STR_13(12), 
  3745 ;;		 -> STR_12(13), STR_11(18), STR_9(16), STR_8(10), 
  3746 ;;		 -> main@num_rand_s_228(16), PIC_ID(4), STR_7(17), STR_6(18), 
  3747 ;;		 -> STR_5(10), main@num_rand_s(16), STR_4(12), STR_3(10), 
  3748 ;;		 -> STR_2(8), STR_1(11), 
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;  n               2    9[BANK1 ] int 
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3760 ;;      Params:         0       0       2       0       0
  3761 ;;      Locals:         0       0       2       0       0
  3762 ;;      Temps:          0       0       3       0       0
  3763 ;;      Totals:         0       0       7       0       0
  3764 ;;Total ram usage:        7 bytes
  3765 ;; Hardware stack levels used: 1
  3766 ;; Hardware stack levels required when called: 5
  3767 ;; This function calls:
  3768 ;;		_lcdSend
  3769 ;; This function is called by:
  3770 ;;		_main
  3771 ;;		_init_PIC
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775     08D0                     _lcdPrint:	
  3776                           ;psect for function _lcdPrint
  3777                           
  3778     08D0                     l3124:	
  3779                           ;incstack = 0
  3780                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3781                           
  3782                           
  3783                           ;main.c: 414: void lcdPrint(char *str);main.c: 415: {;main.c: 416:     int n = 0;
  3784     08D0  1683               	bsf	3,5	;RP0=1, select bank1
  3785     08D1  1303               	bcf	3,6	;RP1=0, select bank1
  3786     08D2  01A9               	clrf	lcdPrint@n^(0+128)
  3787     08D3  01AA               	clrf	(lcdPrint@n+1)^(0+128)
  3788                           
  3789                           ;main.c: 418:     while(str[n] != '\0')
  3790     08D4  2903               	goto	l3130
  3791     08D5                     l3126:
  3792                           
  3793                           ;main.c: 419:     {;main.c: 421:         lcdSend(str[n++], 1);
  3794     08D5  1683               	bsf	3,5	;RP0=1, select bank1
  3795     08D6  1303               	bcf	3,6	;RP1=0, select bank1
  3796     08D7  01A0               	clrf	lcdSend@tipo^(0+128)
  3797     08D8  0AA0               	incf	lcdSend@tipo^(0+128),f
  3798     08D9  0829               	movf	lcdPrint@n^(0+128),w
  3799     08DA  0724               	addwf	lcdPrint@str^(0+128),w
  3800     08DB  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3801     08DC  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3802     08DD  00A6               	movwf	??_lcdPrint^(0+128)
  3803     08DE  1803               	skipnc
  3804     08DF  0AA6               	incf	??_lcdPrint^(0+128),f
  3805     08E0  1FA9               	btfss	lcdPrint@n^(0+128),7
  3806     08E1  28E3               	goto	u3170
  3807     08E2  03A6               	decf	??_lcdPrint^(0+128),f
  3808     08E3                     u3170:
  3809     08E3  1683               	bsf	3,5	;RP0=1, select bank1
  3810     08E4  1303               	bcf	3,6	;RP1=0, select bank1
  3811     08E5  0826               	movf	??_lcdPrint^(0+128),w
  3812     08E6  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3813     08E7  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3814     08E8  1283               	bcf	3,5	;RP0=0, select bank0
  3815     08E9  1303               	bcf	3,6	;RP1=0, select bank0
  3816     08EA  00FF               	movwf	btemp+1
  3817     08EB  1683               	bsf	3,5	;RP0=1, select bank1
  3818     08EC  1303               	bcf	3,6	;RP1=0, select bank1
  3819     08ED  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3820     08EE  0084               	movwf	4
  3821     08EF  1283               	bcf	3,5	;RP0=0, select bank0
  3822     08F0  1303               	bcf	3,6	;RP1=0, select bank0
  3823     08F1  120A  118A  2700  120A  158A  	fcall	stringtab
  3824     08F6  160A  118A  2646  120A  158A  	fcall	_lcdSend
  3825     08FB                     l3128:
  3826     08FB  3001               	movlw	1
  3827     08FC  1683               	bsf	3,5	;RP0=1, select bank1
  3828     08FD  1303               	bcf	3,6	;RP1=0, select bank1
  3829     08FE  07A9               	addwf	lcdPrint@n^(0+128),f
  3830     08FF  1803               	skipnc
  3831     0900  0AAA               	incf	(lcdPrint@n+1)^(0+128),f
  3832     0901  3000               	movlw	0
  3833     0902  07AA               	addwf	(lcdPrint@n+1)^(0+128),f
  3834     0903                     l3130:
  3835                           
  3836                           ;main.c: 418:     while(str[n] != '\0')
  3837     0903  0829               	movf	lcdPrint@n^(0+128),w
  3838     0904  0724               	addwf	lcdPrint@str^(0+128),w
  3839     0905  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3840     0906  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3841     0907  00A6               	movwf	??_lcdPrint^(0+128)
  3842     0908  1803               	skipnc
  3843     0909  0AA6               	incf	??_lcdPrint^(0+128),f
  3844     090A  1FA9               	btfss	lcdPrint@n^(0+128),7
  3845     090B  290D               	goto	u3180
  3846     090C  03A6               	decf	??_lcdPrint^(0+128),f
  3847     090D                     u3180:
  3848     090D  1683               	bsf	3,5	;RP0=1, select bank1
  3849     090E  1303               	bcf	3,6	;RP1=0, select bank1
  3850     090F  0826               	movf	??_lcdPrint^(0+128),w
  3851     0910  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3852     0911  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3853     0912  1283               	bcf	3,5	;RP0=0, select bank0
  3854     0913  1303               	bcf	3,6	;RP1=0, select bank0
  3855     0914  00FF               	movwf	btemp+1
  3856     0915  1683               	bsf	3,5	;RP0=1, select bank1
  3857     0916  1303               	bcf	3,6	;RP1=0, select bank1
  3858     0917  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3859     0918  0084               	movwf	4
  3860     0919  1283               	bcf	3,5	;RP0=0, select bank0
  3861     091A  1303               	bcf	3,6	;RP1=0, select bank0
  3862     091B  120A  118A  2700  120A  158A  	fcall	stringtab
  3863     0920  3A00               	xorlw	0
  3864     0921  1D03               	skipz
  3865     0922  2924               	goto	u3191
  3866     0923  2925               	goto	u3190
  3867     0924                     u3191:
  3868     0924  28D5               	goto	l3126
  3869     0925                     u3190:
  3870     0925                     l195:
  3871     0925  0008               	return
  3872     0926                     __end_of_lcdPrint:
  3873                           
  3874                           	psect	text6
  3875     15E9                     __ptext6:	
  3876 ;; *************** function _init_Timer0 *****************
  3877 ;; Defined at:
  3878 ;;		line 366 in file "main.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;		None
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;		None
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, status,0
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3892 ;;      Params:         0       0       0       0       0
  3893 ;;      Locals:         0       0       0       0       0
  3894 ;;      Temps:          0       0       1       0       0
  3895 ;;      Totals:         0       0       1       0       0
  3896 ;;Total ram usage:        1 bytes
  3897 ;; Hardware stack levels used: 1
  3898 ;; Hardware stack levels required when called: 4
  3899 ;; This function calls:
  3900 ;;		Nothing
  3901 ;; This function is called by:
  3902 ;;		_init_PIC
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906     15E9                     _init_Timer0:	
  3907                           ;psect for function _init_Timer0
  3908                           
  3909     15E9                     l3226:	
  3910                           ;incstack = 0
  3911                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  3912                           
  3913                           
  3914                           ;main.c: 369:     INTCON |= 0xA0;
  3915     15E9  30A0               	movlw	160
  3916     15EA  1683               	bsf	3,5	;RP0=1, select bank1
  3917     15EB  1303               	bcf	3,6	;RP1=0, select bank1
  3918     15EC  00A0               	movwf	??_init_Timer0^(0+128)
  3919     15ED  0820               	movf	??_init_Timer0^(0+128),w
  3920     15EE  048B               	iorwf	11,f	;volatile
  3921     15EF                     l3228:
  3922                           
  3923                           ;main.c: 370:     OPTION_REG = 0x06;
  3924     15EF  3006               	movlw	6
  3925     15F0  0081               	movwf	1	;volatile
  3926     15F1                     l3230:
  3927                           
  3928                           ;main.c: 371:     TMR0 = 131;
  3929     15F1  3083               	movlw	131
  3930     15F2  1283               	bcf	3,5	;RP0=0, select bank0
  3931     15F3  1303               	bcf	3,6	;RP1=0, select bank0
  3932     15F4  0081               	movwf	1	;volatile
  3933     15F5                     l3232:
  3934                           
  3935                           ;main.c: 373:     milliseconds = 0;
  3936     15F5  3000               	movlw	0
  3937     15F6  1683               	bsf	3,5	;RP0=1, select bank1
  3938     15F7  1303               	bcf	3,6	;RP1=0, select bank1
  3939     15F8  00EA               	movwf	(_milliseconds+3)^(0+128)
  3940     15F9  3000               	movlw	0
  3941     15FA  00E9               	movwf	(_milliseconds+2)^(0+128)
  3942     15FB  3000               	movlw	0
  3943     15FC  00E8               	movwf	(_milliseconds+1)^(0+128)
  3944     15FD  3000               	movlw	0
  3945     15FE  00E7               	movwf	_milliseconds^(0+128)
  3946     15FF                     l183:
  3947     15FF  0008               	return
  3948     1600                     __end_of_init_Timer0:
  3949                           
  3950                           	psect	text7
  3951     15AA                     __ptext7:	
  3952 ;; *************** function _init_NumPad *****************
  3953 ;; Defined at:
  3954 ;;		line 630 in file "main.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3968 ;;      Params:         0       0       0       0       0
  3969 ;;      Locals:         0       0       0       0       0
  3970 ;;      Temps:          0       0       1       0       0
  3971 ;;      Totals:         0       0       1       0       0
  3972 ;;Total ram usage:        1 bytes
  3973 ;; Hardware stack levels used: 1
  3974 ;; Hardware stack levels required when called: 4
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_init_PIC
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982     15AA                     _init_NumPad:	
  3983                           ;psect for function _init_NumPad
  3984                           
  3985     15AA                     l3224:	
  3986                           ;incstack = 0
  3987                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  3988                           
  3989                           
  3990                           ;main.c: 633:     TRISD |= 0x0F;
  3991     15AA  300F               	movlw	15
  3992     15AB  1683               	bsf	3,5	;RP0=1, select bank1
  3993     15AC  1303               	bcf	3,6	;RP1=0, select bank1
  3994     15AD  00A0               	movwf	??_init_NumPad^(0+128)
  3995     15AE  0820               	movf	??_init_NumPad^(0+128),w
  3996     15AF  0488               	iorwf	8,f	;volatile
  3997                           
  3998                           ;main.c: 634:     TRISB &= 0xF0;
  3999     15B0  30F0               	movlw	240
  4000     15B1  00A0               	movwf	??_init_NumPad^(0+128)
  4001     15B2  0820               	movf	??_init_NumPad^(0+128),w
  4002     15B3  0586               	andwf	6,f	;volatile
  4003     15B4                     l270:
  4004     15B4  0008               	return
  4005     15B5                     __end_of_init_NumPad:
  4006                           
  4007                           	psect	text8
  4008     0A96                     __ptext8:	
  4009 ;; *************** function _init_LCD *****************
  4010 ;; Defined at:
  4011 ;;		line 376 in file "main.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;		None
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;		None
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      void 
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4025 ;;      Params:         0       0       0       0       0
  4026 ;;      Locals:         0       0       0       0       0
  4027 ;;      Temps:          0       0       2       0       0
  4028 ;;      Totals:         0       0       2       0       0
  4029 ;;Total ram usage:        2 bytes
  4030 ;; Hardware stack levels used: 1
  4031 ;; Hardware stack levels required when called: 5
  4032 ;; This function calls:
  4033 ;;		_lcdSend
  4034 ;; This function is called by:
  4035 ;;		_init_PIC
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039     0A96                     _init_LCD:	
  4040                           ;psect for function _init_LCD
  4041                           
  4042     0A96                     l3202:	
  4043                           ;incstack = 0
  4044                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  4045                           
  4046                           
  4047                           ;main.c: 380:     PORTEbits.RE2 = 0;
  4048     0A96  1283               	bcf	3,5	;RP0=0, select bank0
  4049     0A97  1303               	bcf	3,6	;RP1=0, select bank0
  4050     0A98  1109               	bcf	9,2	;volatile
  4051                           
  4052                           ;main.c: 381:     PORTEbits.RE1 = 0;
  4053     0A99  1089               	bcf	9,1	;volatile
  4054     0A9A                     l3204:
  4055                           
  4056                           ;main.c: 382:     _delay((unsigned long)((20)*(20000000/4000.0)));
  4057     0A9A  3082               	movlw	130
  4058     0A9B  1683               	bsf	3,5	;RP0=1, select bank1
  4059     0A9C  1303               	bcf	3,6	;RP1=0, select bank1
  4060     0A9D  00A5               	movwf	(??_init_LCD^(0+128)+1)
  4061     0A9E  30DD               	movlw	221
  4062     0A9F  00A4               	movwf	??_init_LCD^(0+128)
  4063     0AA0                     u4037:
  4064     0AA0  0BA4               	decfsz	??_init_LCD^(0+128),f
  4065     0AA1  2AA0               	goto	u4037
  4066     0AA2  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  4067     0AA3  2AA0               	goto	u4037
  4068     0AA4                     l3206:
  4069                           
  4070                           ;main.c: 383:     PORTEbits.RE1 = 1;
  4071     0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  4072     0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  4073     0AA6  1489               	bsf	9,1	;volatile
  4074     0AA7                     l3208:
  4075                           
  4076                           ;main.c: 385:     lcdSend(0x38, 0);
  4077     0AA7  1683               	bsf	3,5	;RP0=1, select bank1
  4078     0AA8  1303               	bcf	3,6	;RP1=0, select bank1
  4079     0AA9  01A0               	clrf	lcdSend@tipo^(0+128)
  4080     0AAA  3038               	movlw	56
  4081     0AAB  160A  118A  2646  120A  158A  	fcall	_lcdSend
  4082     0AB0                     l3210:
  4083                           
  4084                           ;main.c: 386:     _delay((unsigned long)((5)*(20000000/4000.0)));
  4085     0AB0  3021               	movlw	33
  4086     0AB1  1683               	bsf	3,5	;RP0=1, select bank1
  4087     0AB2  1303               	bcf	3,6	;RP1=0, select bank1
  4088     0AB3  00A5               	movwf	(??_init_LCD^(0+128)+1)
  4089     0AB4  3075               	movlw	117
  4090     0AB5  00A4               	movwf	??_init_LCD^(0+128)
  4091     0AB6                     u4047:
  4092     0AB6  0BA4               	decfsz	??_init_LCD^(0+128),f
  4093     0AB7  2AB6               	goto	u4047
  4094     0AB8  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  4095     0AB9  2AB6               	goto	u4047
  4096     0ABA  2ABB               	nop2
  4097                           
  4098                           ;main.c: 387:     lcdSend(0x38, 0);
  4099     0ABB  1683               	bsf	3,5	;RP0=1, select bank1
  4100     0ABC  1303               	bcf	3,6	;RP1=0, select bank1
  4101     0ABD  01A0               	clrf	lcdSend@tipo^(0+128)
  4102     0ABE  3038               	movlw	56
  4103     0ABF  160A  118A  2646  120A  158A  	fcall	_lcdSend
  4104     0AC4                     l3212:
  4105                           
  4106                           ;main.c: 388:     _delay((unsigned long)((1)*(20000000/4000.0)));
  4107     0AC4  3007               	movlw	7
  4108     0AC5  1683               	bsf	3,5	;RP0=1, select bank1
  4109     0AC6  1303               	bcf	3,6	;RP1=0, select bank1
  4110     0AC7  00A5               	movwf	(??_init_LCD^(0+128)+1)
  4111     0AC8  307C               	movlw	124
  4112     0AC9  00A4               	movwf	??_init_LCD^(0+128)
  4113     0ACA                     u4057:
  4114     0ACA  0BA4               	decfsz	??_init_LCD^(0+128),f
  4115     0ACB  2ACA               	goto	u4057
  4116     0ACC  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  4117     0ACD  2ACA               	goto	u4057
  4118     0ACE  0000               	nop
  4119     0ACF                     l3214:
  4120                           
  4121                           ;main.c: 389:     lcdSend(0x38, 0);
  4122     0ACF  1683               	bsf	3,5	;RP0=1, select bank1
  4123     0AD0  1303               	bcf	3,6	;RP1=0, select bank1
  4124     0AD1  01A0               	clrf	lcdSend@tipo^(0+128)
  4125     0AD2  3038               	movlw	56
  4126     0AD3  160A  118A  2646  120A  158A  	fcall	_lcdSend
  4127     0AD8                     l3216:
  4128                           
  4129                           ;main.c: 390:     lcdSend(0x08, 0);
  4130     0AD8  1683               	bsf	3,5	;RP0=1, select bank1
  4131     0AD9  1303               	bcf	3,6	;RP1=0, select bank1
  4132     0ADA  01A0               	clrf	lcdSend@tipo^(0+128)
  4133     0ADB  3008               	movlw	8
  4134     0ADC  160A  118A  2646  120A  158A  	fcall	_lcdSend
  4135     0AE1                     l3218:
  4136                           
  4137                           ;main.c: 391:     lcdSend(0x0F, 0);
  4138     0AE1  1683               	bsf	3,5	;RP0=1, select bank1
  4139     0AE2  1303               	bcf	3,6	;RP1=0, select bank1
  4140     0AE3  01A0               	clrf	lcdSend@tipo^(0+128)
  4141     0AE4  300F               	movlw	15
  4142     0AE5  160A  118A  2646  120A  158A  	fcall	_lcdSend
  4143     0AEA                     l3220:
  4144                           
  4145                           ;main.c: 392:     lcdSend(0x01, 0);
  4146     0AEA  1683               	bsf	3,5	;RP0=1, select bank1
  4147     0AEB  1303               	bcf	3,6	;RP1=0, select bank1
  4148     0AEC  01A0               	clrf	lcdSend@tipo^(0+128)
  4149     0AED  3001               	movlw	1
  4150     0AEE  160A  118A  2646  120A  158A  	fcall	_lcdSend
  4151     0AF3                     l3222:
  4152                           
  4153                           ;main.c: 394:     lcdSend(0x0C, 0);
  4154     0AF3  1683               	bsf	3,5	;RP0=1, select bank1
  4155     0AF4  1303               	bcf	3,6	;RP1=0, select bank1
  4156     0AF5  01A0               	clrf	lcdSend@tipo^(0+128)
  4157     0AF6  300C               	movlw	12
  4158     0AF7  160A  118A  2646  120A  158A  	fcall	_lcdSend
  4159     0AFC                     l186:
  4160     0AFC  0008               	return
  4161     0AFD                     __end_of_init_LCD:
  4162                           
  4163                           	psect	text9
  4164     1646                     __ptext9:	
  4165 ;; *************** function _lcdSend *****************
  4166 ;; Defined at:
  4167 ;;		line 397 in file "main.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  dato            1    wreg     unsigned char 
  4170 ;;  tipo            1    0[BANK1 ] unsigned char 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  dato            1    3[BANK1 ] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4182 ;;      Params:         0       0       1       0       0
  4183 ;;      Locals:         0       0       1       0       0
  4184 ;;      Temps:          0       0       2       0       0
  4185 ;;      Totals:         0       0       4       0       0
  4186 ;;Total ram usage:        4 bytes
  4187 ;; Hardware stack levels used: 1
  4188 ;; Hardware stack levels required when called: 4
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_main
  4193 ;;		_init_PIC
  4194 ;;		_init_LCD
  4195 ;;		_lcdPrint
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199     1646                     _lcdSend:	
  4200                           ;psect for function _lcdSend
  4201                           
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  4205                           ;lcdSend@dato stored from wreg
  4206     1646  1683               	bsf	3,5	;RP0=1, select bank1
  4207     1647  1303               	bcf	3,6	;RP1=0, select bank1
  4208     1648  00A3               	movwf	lcdSend@dato^(0+128)
  4209     1649                     l2994:
  4210                           
  4211                           ;main.c: 397: void lcdSend(char dato, char tipo);main.c: 398: {;main.c: 401:     TRISD =
      +                           0x00;
  4212     1649  0188               	clrf	8	;volatile
  4213     164A                     l2996:
  4214                           
  4215                           ;main.c: 402:     TRISEbits.TRISE1 = 0;
  4216     164A  1089               	bcf	9,1	;volatile
  4217     164B                     l2998:
  4218                           
  4219                           ;main.c: 403:     TRISEbits.TRISE2 = 0;
  4220     164B  1109               	bcf	9,2	;volatile
  4221     164C                     l3000:
  4222                           
  4223                           ;main.c: 405:     PORTEbits.RE1 = 1;
  4224     164C  1283               	bcf	3,5	;RP0=0, select bank0
  4225     164D  1303               	bcf	3,6	;RP1=0, select bank0
  4226     164E  1489               	bsf	9,1	;volatile
  4227     164F                     l3002:
  4228                           
  4229                           ;main.c: 406:     PORTD = dato;
  4230     164F  1683               	bsf	3,5	;RP0=1, select bank1
  4231     1650  1303               	bcf	3,6	;RP1=0, select bank1
  4232     1651  0823               	movf	lcdSend@dato^(0+128),w
  4233     1652  1283               	bcf	3,5	;RP0=0, select bank0
  4234     1653  1303               	bcf	3,6	;RP1=0, select bank0
  4235     1654  0088               	movwf	8	;volatile
  4236     1655                     l3004:
  4237                           
  4238                           ;main.c: 407:     PORTEbits.RE2 = tipo;
  4239     1655  1683               	bsf	3,5	;RP0=1, select bank1
  4240     1656  1303               	bcf	3,6	;RP1=0, select bank1
  4241     1657  0C20               	rrf	lcdSend@tipo^(0+128),w
  4242     1658  1283               	bcf	3,5	;RP0=0, select bank0
  4243     1659  1303               	bcf	3,6	;RP1=0, select bank0
  4244     165A  1C03               	skipc
  4245     165B  1109               	bcf	9,2	;volatile
  4246     165C  1803               	skipnc
  4247     165D  1509               	bsf	9,2	;volatile
  4248     165E                     l3006:
  4249                           
  4250                           ;main.c: 408:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4251     165E  3014               	movlw	20
  4252     165F  1683               	bsf	3,5	;RP0=1, select bank1
  4253     1660  1303               	bcf	3,6	;RP1=0, select bank1
  4254     1661  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4255     1662  3079               	movlw	121
  4256     1663  00A1               	movwf	??_lcdSend^(0+128)
  4257     1664                     u4067:
  4258     1664  0BA1               	decfsz	??_lcdSend^(0+128),f
  4259     1665  2E64               	goto	u4067
  4260     1666  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4261     1667  2E64               	goto	u4067
  4262     1668                     l3008:
  4263                           
  4264                           ;main.c: 409:     PORTEbits.RE1 = 0;
  4265     1668  1283               	bcf	3,5	;RP0=0, select bank0
  4266     1669  1303               	bcf	3,6	;RP1=0, select bank0
  4267     166A  1089               	bcf	9,1	;volatile
  4268     166B                     l3010:
  4269                           
  4270                           ;main.c: 410:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4271     166B  3014               	movlw	20
  4272     166C  1683               	bsf	3,5	;RP0=1, select bank1
  4273     166D  1303               	bcf	3,6	;RP1=0, select bank1
  4274     166E  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4275     166F  3079               	movlw	121
  4276     1670  00A1               	movwf	??_lcdSend^(0+128)
  4277     1671                     u4077:
  4278     1671  0BA1               	decfsz	??_lcdSend^(0+128),f
  4279     1672  2E71               	goto	u4077
  4280     1673  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4281     1674  2E71               	goto	u4077
  4282     1675                     l3012:
  4283                           
  4284                           ;main.c: 411:     PORTEbits.RE1 = 1;
  4285     1675  1283               	bcf	3,5	;RP0=0, select bank0
  4286     1676  1303               	bcf	3,6	;RP1=0, select bank0
  4287     1677  1489               	bsf	9,1	;volatile
  4288     1678                     l189:
  4289     1678  0008               	return
  4290     1679                     __end_of_lcdSend:
  4291                           
  4292                           	psect	text10
  4293     1600                     __ptext10:	
  4294 ;; *************** function _eeprom_read *****************
  4295 ;; Defined at:
  4296 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  addr            1    wreg     unsigned char 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  addr            1    1[BANK1 ] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      unsigned char 
  4303 ;; Registers used:
  4304 ;;		wreg, status,2, status,0
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4310 ;;      Params:         0       0       0       0       0
  4311 ;;      Locals:         0       0       1       0       0
  4312 ;;      Temps:          0       0       1       0       0
  4313 ;;      Totals:         0       0       2       0       0
  4314 ;;Total ram usage:        2 bytes
  4315 ;; Hardware stack levels used: 1
  4316 ;; Hardware stack levels required when called: 4
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_init_PIC
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324     1600                     _eeprom_read:	
  4325                           ;psect for function _eeprom_read
  4326                           
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4330                           ;eeprom_read@addr stored from wreg
  4331     1600  1683               	bsf	3,5	;RP0=1, select bank1
  4332     1601  1303               	bcf	3,6	;RP1=0, select bank1
  4333     1602  00A1               	movwf	eeprom_read@addr^(0+128)
  4334     1603                     l424:	
  4335                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 8:  do
  4336                           
  4337     1603  0064               	clrwdt	;# 
  4338     1604  1683               	bsf	3,5	;RP0=1, select bank3
  4339     1605  1703               	bsf	3,6	;RP1=1, select bank3
  4340     1606  188C               	btfsc	12,1	;volsfr
  4341     1607  2E09               	goto	u3271
  4342     1608  2E0C               	goto	u3270
  4343     1609                     u3271:
  4344     1609  1683               	bsf	3,5	;RP0=1, select bank1
  4345     160A  1303               	bcf	3,6	;RP1=0, select bank1
  4346     160B  2E03               	goto	l424
  4347     160C                     u3270:
  4348     160C                     l3234:
  4349                           
  4350                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4351     160C  1683               	bsf	3,5	;RP0=1, select bank1
  4352     160D  1303               	bcf	3,6	;RP1=0, select bank1
  4353     160E  0821               	movf	eeprom_read@addr^(0+128),w
  4354     160F  1283               	bcf	3,5	;RP0=0, select bank2
  4355     1610  1703               	bsf	3,6	;RP1=1, select bank2
  4356     1611  008D               	movwf	13	;volatile
  4357     1612  303F               	movlw	63
  4358     1613  1683               	bsf	3,5	;RP0=1, select bank1
  4359     1614  1303               	bcf	3,6	;RP1=0, select bank1
  4360     1615  00A0               	movwf	??_eeprom_read^(0+128)
  4361     1616  0820               	movf	??_eeprom_read^(0+128),w
  4362     1617  1683               	bsf	3,5	;RP0=1, select bank3
  4363     1618  1703               	bsf	3,6	;RP1=1, select bank3
  4364     1619  058C               	andwf	12,f	;volsfr
  4365     161A  140C               	bsf	12,0	;volsfr
  4366     161B  1283               	bcf	3,5	;RP0=0, select bank2
  4367     161C  1703               	bsf	3,6	;RP1=1, select bank2
  4368     161D  080C               	movf	12,w	;volatile
  4369     161E                     l426:
  4370     161E  0008               	return
  4371     161F                     __end_of_eeprom_read:
  4372                           
  4373                           	psect	text11
  4374     16EC                     __ptext11:	
  4375 ;; *************** function _UART_init *****************
  4376 ;; Defined at:
  4377 ;;		line 770 in file "main.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  baudrate        4   57[BANK1 ] long 
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;		None
  4382 ;; Return value:  Size  Location     Type
  4383 ;;                  1    wreg      void 
  4384 ;; Registers used:
  4385 ;;		wreg, status,2, status,0, pclath, cstack
  4386 ;; Tracked objects:
  4387 ;;		On entry : 0/0
  4388 ;;		On exit  : 0/0
  4389 ;;		Unchanged: 0/0
  4390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4391 ;;      Params:         0       0       4       0       0
  4392 ;;      Locals:         0       0       0       0       0
  4393 ;;      Temps:          0       0       4       0       0
  4394 ;;      Totals:         0       0       8       0       0
  4395 ;;Total ram usage:        8 bytes
  4396 ;; Hardware stack levels used: 1
  4397 ;; Hardware stack levels required when called: 5
  4398 ;; This function calls:
  4399 ;;		___aldiv
  4400 ;; This function is called by:
  4401 ;;		_init_PIC
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405     16EC                     _UART_init:	
  4406                           ;psect for function _UART_init
  4407                           
  4408     16EC                     l3186:	
  4409                           ;incstack = 0
  4410                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  4411                           
  4412                           
  4413                           ;main.c: 770: void UART_init(long int baudrate);main.c: 771: {;main.c: 773:     TRISC &=
      +                           ~0x40;
  4414     16EC  30BF               	movlw	191
  4415     16ED  1683               	bsf	3,5	;RP0=1, select bank1
  4416     16EE  1303               	bcf	3,6	;RP1=0, select bank1
  4417     16EF  00DD               	movwf	??_UART_init^(0+128)
  4418     16F0  085D               	movf	??_UART_init^(0+128),w
  4419     16F1  0587               	andwf	7,f	;volatile
  4420     16F2                     l3188:
  4421                           
  4422                           ;main.c: 774:     TRISC |= 0x80;
  4423     16F2  1787               	bsf	7,7	;volatile
  4424                           
  4425                           ;main.c: 775:     TXSTA |= 0x24;
  4426     16F3  3024               	movlw	36
  4427     16F4  00DD               	movwf	??_UART_init^(0+128)
  4428     16F5  085D               	movf	??_UART_init^(0+128),w
  4429     16F6  0498               	iorwf	24,f	;volatile
  4430     16F7                     l3190:
  4431                           
  4432                           ;main.c: 776:     RCSTA |= 0x80;
  4433     16F7  1283               	bcf	3,5	;RP0=0, select bank0
  4434     16F8  1303               	bcf	3,6	;RP1=0, select bank0
  4435     16F9  1798               	bsf	24,7	;volatile
  4436     16FA                     l3192:
  4437                           
  4438                           ;main.c: 777:     RCSTA |= 0x10;
  4439     16FA  1618               	bsf	24,4	;volatile
  4440     16FB                     l3194:
  4441                           
  4442                           ;main.c: 780:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  4443     16FB  1683               	bsf	3,5	;RP0=1, select bank1
  4444     16FC  1303               	bcf	3,6	;RP1=0, select bank1
  4445     16FD  0859               	movf	UART_init@baudrate^(0+128),w
  4446     16FE  00DD               	movwf	??_UART_init^(0+128)
  4447     16FF  085A               	movf	(UART_init@baudrate+1)^(0+128),w
  4448     1700  00DE               	movwf	(??_UART_init^(0+128)+1)
  4449     1701  085B               	movf	(UART_init@baudrate+2)^(0+128),w
  4450     1702  00DF               	movwf	(??_UART_init^(0+128)+2)
  4451     1703  085C               	movf	(UART_init@baudrate+3)^(0+128),w
  4452     1704  00E0               	movwf	(??_UART_init^(0+128)+3)
  4453     1705  3006               	movlw	6
  4454     1706                     u3265:
  4455     1706  1003               	clrc
  4456     1707  0DDD               	rlf	??_UART_init^(0+128),f
  4457     1708  0DDE               	rlf	(??_UART_init^(0+128)+1),f
  4458     1709  0DDF               	rlf	(??_UART_init^(0+128)+2),f
  4459     170A  0DE0               	rlf	(??_UART_init^(0+128)+3),f
  4460     170B                     u3260:
  4461     170B  3EFF               	addlw	-1
  4462     170C  1D03               	skipz
  4463     170D  2F06               	goto	u3265
  4464     170E  0860               	movf	(??_UART_init+3)^(0+128),w
  4465     170F  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4466     1710  085F               	movf	(??_UART_init+2)^(0+128),w
  4467     1711  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4468     1712  085E               	movf	(??_UART_init+1)^(0+128),w
  4469     1713  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4470     1714  085D               	movf	??_UART_init^(0+128),w
  4471     1715  00CA               	movwf	___aldiv@divisor^(0+128)
  4472     1716  3001               	movlw	1
  4473     1717  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4474     1718  3031               	movlw	49
  4475     1719  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4476     171A  302D               	movlw	45
  4477     171B  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4478     171C  3000               	movlw	0
  4479     171D  00CE               	movwf	___aldiv@dividend^(0+128)
  4480     171E  120A  158A  2659  160A  118A  	fcall	___aldiv
  4481     1723  1683               	bsf	3,5	;RP0=1, select bank1
  4482     1724  1303               	bcf	3,6	;RP1=0, select bank1
  4483     1725  084A               	movf	?___aldiv^(0+128),w
  4484     1726  3EFF               	addlw	255
  4485     1727  0099               	movwf	25	;volatile
  4486     1728                     l3196:
  4487                           
  4488                           ;main.c: 783:     INTCON |= 0x80;
  4489     1728  178B               	bsf	11,7	;volatile
  4490     1729                     l3198:
  4491                           
  4492                           ;main.c: 785:     INTCON |= 0x40;
  4493     1729  170B               	bsf	11,6	;volatile
  4494     172A                     l3200:
  4495                           
  4496                           ;main.c: 787:     PIE1 |= 0x20;
  4497     172A  168C               	bsf	12,5	;volatile
  4498     172B                     l306:
  4499     172B  0008               	return
  4500     172C                     __end_of_UART_init:
  4501                           
  4502                           	psect	text12
  4503     0A38                     __ptext12:	
  4504 ;; *************** function _Fill *****************
  4505 ;; Defined at:
  4506 ;;		line 603 in file "main.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  id              1    wreg     PTR unsigned char 
  4509 ;;		 -> PIC_ID(4), 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  id              1   10[BANK1 ] PTR unsigned char 
  4512 ;;		 -> PIC_ID(4), 
  4513 ;;  length          2    8[BANK1 ] int 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4523 ;;      Params:         0       0       0       0       0
  4524 ;;      Locals:         0       0       3       0       0
  4525 ;;      Temps:          0       0       1       0       0
  4526 ;;      Totals:         0       0       4       0       0
  4527 ;;Total ram usage:        4 bytes
  4528 ;; Hardware stack levels used: 1
  4529 ;; Hardware stack levels required when called: 5
  4530 ;; This function calls:
  4531 ;;		_Length
  4532 ;; This function is called by:
  4533 ;;		_init_PIC
  4534 ;;		_read_NumPad
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538     0A38                     _Fill:	
  4539                           ;psect for function _Fill
  4540                           
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _Fill: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4544                           ;Fill@id stored from wreg
  4545     0A38  1683               	bsf	3,5	;RP0=1, select bank1
  4546     0A39  1303               	bcf	3,6	;RP1=0, select bank1
  4547     0A3A  00AA               	movwf	Fill@id^(0+128)
  4548     0A3B                     l3238:
  4549                           
  4550                           ;main.c: 603: void Fill(char* id);main.c: 604: {;main.c: 605:     int length = Length(id
      +                          );
  4551     0A3B  082A               	movf	Fill@id^(0+128),w
  4552     0A3C  00A0               	movwf	Length@str^(0+128)
  4553     0A3D  3001               	movlw	1
  4554     0A3E  00A1               	movwf	(Length@str+1)^(0+128)
  4555     0A3F  120A  118A  26D0  120A  158A  	fcall	_Length
  4556     0A44  1683               	bsf	3,5	;RP0=1, select bank1
  4557     0A45  1303               	bcf	3,6	;RP1=0, select bank1
  4558     0A46  0821               	movf	(?_Length+1)^(0+128),w
  4559     0A47  00A9               	movwf	(Fill@length+1)^(0+128)
  4560     0A48  0820               	movf	?_Length^(0+128),w
  4561     0A49  00A8               	movwf	Fill@length^(0+128)
  4562     0A4A                     l3240:
  4563                           
  4564                           ;main.c: 607:     if(length < 3)
  4565     0A4A  0829               	movf	(Fill@length+1)^(0+128),w
  4566     0A4B  3A80               	xorlw	128
  4567     0A4C  00FF               	movwf	btemp+1
  4568     0A4D  3080               	movlw	128
  4569     0A4E  027F               	subwf	btemp+1,w
  4570     0A4F  1D03               	skipz
  4571     0A50  2A53               	goto	u3285
  4572     0A51  3003               	movlw	3
  4573     0A52  0228               	subwf	Fill@length^(0+128),w
  4574     0A53                     u3285:
  4575     0A53  1803               	skipnc
  4576     0A54  2A56               	goto	u3281
  4577     0A55  2A57               	goto	u3280
  4578     0A56                     u3281:
  4579     0A56  2A95               	goto	l267
  4580     0A57                     u3280:
  4581     0A57  2A86               	goto	l3258
  4582     0A58                     l3244:
  4583                           
  4584                           ;main.c: 612:                 id[3] = '\0';
  4585     0A58  082A               	movf	Fill@id^(0+128),w
  4586     0A59  3E03               	addlw	3
  4587     0A5A  0084               	movwf	4
  4588     0A5B  1783               	bsf	3,7	;select IRP bank2
  4589     0A5C  0180               	clrf	0
  4590                           
  4591                           ;main.c: 613:                 id[2] = id[0];
  4592     0A5D  082A               	movf	Fill@id^(0+128),w
  4593     0A5E  0084               	movwf	4
  4594     0A5F  0800               	movf	0,w
  4595     0A60  00A7               	movwf	??_Fill^(0+128)
  4596     0A61  082A               	movf	Fill@id^(0+128),w
  4597     0A62  3E02               	addlw	2
  4598     0A63  0084               	movwf	4
  4599     0A64  0827               	movf	??_Fill^(0+128),w
  4600     0A65  0080               	movwf	0
  4601     0A66                     l3246:
  4602                           
  4603                           ;main.c: 614:                 id[1] = '0';
  4604     0A66  0A2A               	incf	Fill@id^(0+128),w
  4605     0A67  0084               	movwf	4
  4606     0A68  3030               	movlw	48
  4607     0A69  0080               	movwf	0
  4608     0A6A                     l3248:
  4609                           
  4610                           ;main.c: 615:                 id[0] = '0';
  4611     0A6A  082A               	movf	Fill@id^(0+128),w
  4612     0A6B  0084               	movwf	4
  4613     0A6C  3030               	movlw	48
  4614     0A6D  0080               	movwf	0
  4615                           
  4616                           ;main.c: 616:                 break;
  4617     0A6E  2A95               	goto	l267
  4618     0A6F                     l3250:
  4619                           
  4620                           ;main.c: 618:                 id[3] = '\0';
  4621     0A6F  082A               	movf	Fill@id^(0+128),w
  4622     0A70  3E03               	addlw	3
  4623     0A71  0084               	movwf	4
  4624     0A72  1783               	bsf	3,7	;select IRP bank2
  4625     0A73  0180               	clrf	0
  4626                           
  4627                           ;main.c: 619:                 id[2] = id[1];
  4628     0A74  0A2A               	incf	Fill@id^(0+128),w
  4629     0A75  0084               	movwf	4
  4630     0A76  0800               	movf	0,w
  4631     0A77  00A7               	movwf	??_Fill^(0+128)
  4632     0A78  082A               	movf	Fill@id^(0+128),w
  4633     0A79  3E02               	addlw	2
  4634     0A7A  0084               	movwf	4
  4635     0A7B  0827               	movf	??_Fill^(0+128),w
  4636     0A7C  0080               	movwf	0
  4637     0A7D                     l3252:
  4638                           
  4639                           ;main.c: 620:                 id[1] = id[0];
  4640     0A7D  082A               	movf	Fill@id^(0+128),w
  4641     0A7E  0084               	movwf	4
  4642     0A7F  0800               	movf	0,w
  4643     0A80  00A7               	movwf	??_Fill^(0+128)
  4644     0A81  0A2A               	incf	Fill@id^(0+128),w
  4645     0A82  0084               	movwf	4
  4646     0A83  0827               	movf	??_Fill^(0+128),w
  4647     0A84  0080               	movwf	0
  4648     0A85  2A6A               	goto	l3248
  4649     0A86                     l3258:
  4650                           
  4651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4652                           ; Switch size 1, requested type "simple"
  4653                           ; Number of cases is 1, Range of values is 0 to 0
  4654                           ; switch strategies available:
  4655                           ; Name         Instructions Cycles
  4656                           ; simple_byte            4     3 (average)
  4657                           ; direct_byte           11     8 (fixed)
  4658                           ; jumptable            260     6 (fixed)
  4659                           ;	Chosen strategy is simple_byte
  4660     0A86  1683               	bsf	3,5	;RP0=1, select bank1
  4661     0A87  1303               	bcf	3,6	;RP1=0, select bank1
  4662     0A88  0829               	movf	(Fill@length+1)^(0+128),w
  4663     0A89  3A00               	xorlw	0	; case 0
  4664     0A8A  1903               	skipnz
  4665     0A8B  2A8D               	goto	l3850
  4666     0A8C  2A95               	goto	l267
  4667     0A8D                     l3850:
  4668                           
  4669                           ; Switch size 1, requested type "simple"
  4670                           ; Number of cases is 2, Range of values is 1 to 2
  4671                           ; switch strategies available:
  4672                           ; Name         Instructions Cycles
  4673                           ; simple_byte            7     4 (average)
  4674                           ; direct_byte           17    11 (fixed)
  4675                           ; jumptable            263     9 (fixed)
  4676                           ;	Chosen strategy is simple_byte
  4677     0A8D  0828               	movf	Fill@length^(0+128),w
  4678     0A8E  3A01               	xorlw	1	; case 1
  4679     0A8F  1903               	skipnz
  4680     0A90  2A58               	goto	l3244
  4681     0A91  3A03               	xorlw	3	; case 2
  4682     0A92  1903               	skipnz
  4683     0A93  2A6F               	goto	l3250
  4684     0A94  2A95               	goto	l267
  4685     0A95                     l267:
  4686     0A95  0008               	return
  4687     0A96                     __end_of_Fill:
  4688                           
  4689                           	psect	text13
  4690     0EF6                     __ptext13:	
  4691 ;; *************** function _ConvertToString *****************
  4692 ;; Defined at:
  4693 ;;		line 436 in file "main.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  n               4   57[BANK1 ] long 
  4696 ;;  str             1   61[BANK1 ] PTR unsigned char 
  4697 ;;		 -> main@num_rand_s_228(16), PIC_ID(4), main@num_rand_s(16), 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  temp            2    0[BANK3 ] int 
  4700 ;;  i               2    4[BANK3 ] int 
  4701 ;;  j               2    2[BANK3 ] int 
  4702 ;;  n_cifre         1    6[BANK3 ] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4712 ;;      Params:         0       0       5       0       0
  4713 ;;      Locals:         0       0       0       7       0
  4714 ;;      Temps:          0       0       1       0       0
  4715 ;;      Totals:         0       0       6       7       0
  4716 ;;Total ram usage:       13 bytes
  4717 ;; Hardware stack levels used: 1
  4718 ;; Hardware stack levels required when called: 6
  4719 ;; This function calls:
  4720 ;;		___aldiv
  4721 ;;		___almod
  4722 ;;		___lmul
  4723 ;;		_pow
  4724 ;; This function is called by:
  4725 ;;		_main
  4726 ;;		_init_PIC
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730     0EF6                     _ConvertToString:	
  4731                           ;psect for function _ConvertToString
  4732                           
  4733     0EF6                     l3132:	
  4734                           ;incstack = 0
  4735                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4736                           
  4737                           
  4738                           ;main.c: 436: void ConvertToString(long n, char* str);main.c: 437: {;main.c: 440:     in
      +                          t i = 0, j = 0;
  4739     0EF6  1683               	bsf	3,5	;RP0=1, select bank3
  4740     0EF7  1703               	bsf	3,6	;RP1=1, select bank3
  4741     0EF8  01CE               	clrf	ConvertToString@i^(0+384)
  4742     0EF9  01CF               	clrf	(ConvertToString@i+1)^(0+384)
  4743     0EFA  01CC               	clrf	ConvertToString@j^(0+384)
  4744     0EFB  01CD               	clrf	(ConvertToString@j+1)^(0+384)
  4745     0EFC                     l3134:
  4746                           
  4747                           ;main.c: 441:     if(n < 0)
  4748     0EFC  1683               	bsf	3,5	;RP0=1, select bank1
  4749     0EFD  1303               	bcf	3,6	;RP1=0, select bank1
  4750     0EFE  1FDC               	btfss	(ConvertToString@n+3)^(0+128),7
  4751     0EFF  2F01               	goto	u3201
  4752     0F00  2F02               	goto	u3200
  4753     0F01                     u3201:
  4754     0F01  2F2E               	goto	l3142
  4755     0F02                     u3200:
  4756     0F02                     l3136:
  4757                           
  4758                           ;main.c: 442:     {;main.c: 443:         i = 1;
  4759     0F02  3001               	movlw	1
  4760     0F03  1683               	bsf	3,5	;RP0=1, select bank3
  4761     0F04  1703               	bsf	3,6	;RP1=1, select bank3
  4762     0F05  00CE               	movwf	ConvertToString@i^(0+384)
  4763     0F06  3000               	movlw	0
  4764     0F07  00CF               	movwf	(ConvertToString@i^(0+384)+1)
  4765     0F08                     l3138:
  4766                           
  4767                           ;main.c: 444:         str[0] = '-';
  4768     0F08  1683               	bsf	3,5	;RP0=1, select bank1
  4769     0F09  1303               	bcf	3,6	;RP1=0, select bank1
  4770     0F0A  085D               	movf	ConvertToString@str^(0+128),w
  4771     0F0B  0084               	movwf	4
  4772     0F0C  302D               	movlw	45
  4773     0F0D  1783               	bsf	3,7	;select IRP bank2
  4774     0F0E  0080               	movwf	0
  4775     0F0F                     l3140:
  4776                           
  4777                           ;main.c: 445:         n *= -1;
  4778     0F0F  30FF               	movlw	255
  4779     0F10  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  4780     0F11  30FF               	movlw	255
  4781     0F12  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  4782     0F13  30FF               	movlw	255
  4783     0F14  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  4784     0F15  30FF               	movlw	255
  4785     0F16  00A0               	movwf	___lmul@multiplier^(0+128)
  4786     0F17  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4787     0F18  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4788     0F19  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4789     0F1A  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4790     0F1B  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4791     0F1C  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4792     0F1D  0859               	movf	ConvertToString@n^(0+128),w
  4793     0F1E  00A4               	movwf	___lmul@multiplicand^(0+128)
  4794     0F1F  120A  158A  203E  120A  158A  	fcall	___lmul
  4795     0F24  1683               	bsf	3,5	;RP0=1, select bank1
  4796     0F25  1303               	bcf	3,6	;RP1=0, select bank1
  4797     0F26  0823               	movf	(?___lmul+3)^(0+128),w
  4798     0F27  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4799     0F28  0822               	movf	(?___lmul+2)^(0+128),w
  4800     0F29  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4801     0F2A  0821               	movf	(?___lmul+1)^(0+128),w
  4802     0F2B  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4803     0F2C  0820               	movf	?___lmul^(0+128),w
  4804     0F2D  00D9               	movwf	ConvertToString@n^(0+128)
  4805     0F2E                     l3142:
  4806                           
  4807                           ;main.c: 448:     char n_cifre = 1;
  4808     0F2E  1683               	bsf	3,5	;RP0=1, select bank3
  4809     0F2F  1703               	bsf	3,6	;RP1=1, select bank3
  4810     0F30  01D0               	clrf	ConvertToString@n_cifre^(0+384)
  4811     0F31  0AD0               	incf	ConvertToString@n_cifre^(0+384),f
  4812                           
  4813                           ;main.c: 450:     while(n / pow(10, n_cifre))
  4814     0F32  2F39               	goto	l3146
  4815     0F33                     l3144:
  4816                           
  4817                           ;main.c: 451:         n_cifre++;
  4818     0F33  3001               	movlw	1
  4819     0F34  00DE               	movwf	??_ConvertToString^(0+128)
  4820     0F35  085E               	movf	??_ConvertToString^(0+128),w
  4821     0F36  1683               	bsf	3,5	;RP0=1, select bank3
  4822     0F37  1703               	bsf	3,6	;RP1=1, select bank3
  4823     0F38  07D0               	addwf	ConvertToString@n_cifre^(0+384),f
  4824     0F39                     l3146:
  4825                           
  4826                           ;main.c: 450:     while(n / pow(10, n_cifre))
  4827     0F39  0850               	movf	ConvertToString@n_cifre^(0+384),w
  4828     0F3A  1683               	bsf	3,5	;RP0=1, select bank1
  4829     0F3B  1303               	bcf	3,6	;RP1=0, select bank1
  4830     0F3C  00C1               	movwf	pow@exp^(0+128)
  4831     0F3D  300A               	movlw	10
  4832     0F3E  160A  118A  26B0  120A  158A  	fcall	_pow
  4833     0F43  1683               	bsf	3,5	;RP0=1, select bank1
  4834     0F44  1303               	bcf	3,6	;RP1=0, select bank1
  4835     0F45  0841               	movf	?_pow^(0+128),w
  4836     0F46  00CA               	movwf	___aldiv@divisor^(0+128)
  4837     0F47  0842               	movf	(?_pow+1)^(0+128),w
  4838     0F48  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4839     0F49  3000               	movlw	0
  4840     0F4A  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4841     0F4B  30FF               	movlw	255
  4842     0F4C  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4843     0F4D  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4844     0F4E  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4845     0F4F  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4846     0F50  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4847     0F51  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4848     0F52  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4849     0F53  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4850     0F54  0859               	movf	ConvertToString@n^(0+128),w
  4851     0F55  00CE               	movwf	___aldiv@dividend^(0+128)
  4852     0F56  120A  158A  2659  120A  158A  	fcall	___aldiv
  4853     0F5B  1683               	bsf	3,5	;RP0=1, select bank1
  4854     0F5C  1303               	bcf	3,6	;RP1=0, select bank1
  4855     0F5D  084D               	movf	(?___aldiv+3)^(0+128),w
  4856     0F5E  044C               	iorwf	(?___aldiv+2)^(0+128),w
  4857     0F5F  044B               	iorwf	(?___aldiv+1)^(0+128),w
  4858     0F60  044A               	iorwf	?___aldiv^(0+128),w
  4859     0F61  1D03               	skipz
  4860     0F62  2F64               	goto	u3211
  4861     0F63  2F65               	goto	u3210
  4862     0F64                     u3211:
  4863     0F64  2F33               	goto	l3144
  4864     0F65                     u3210:
  4865     0F65  2FE1               	goto	l3158
  4866     0F66                     l3148:
  4867                           
  4868                           ;main.c: 454:     {;main.c: 455:         int temp = pow(10, (char)(n_cifre - 1 - j));
  4869     0F66  1683               	bsf	3,5	;RP0=1, select bank3
  4870     0F67  1703               	bsf	3,6	;RP1=1, select bank3
  4871     0F68  084C               	movf	ConvertToString@j^(0+384),w
  4872     0F69  0250               	subwf	ConvertToString@n_cifre^(0+384),w
  4873     0F6A  3EFF               	addlw	255
  4874     0F6B  1683               	bsf	3,5	;RP0=1, select bank1
  4875     0F6C  1303               	bcf	3,6	;RP1=0, select bank1
  4876     0F6D  00C1               	movwf	pow@exp^(0+128)
  4877     0F6E  300A               	movlw	10
  4878     0F6F  160A  118A  26B0  120A  158A  	fcall	_pow
  4879     0F74  1683               	bsf	3,5	;RP0=1, select bank1
  4880     0F75  1303               	bcf	3,6	;RP1=0, select bank1
  4881     0F76  0842               	movf	(?_pow+1)^(0+128),w
  4882     0F77  1683               	bsf	3,5	;RP0=1, select bank3
  4883     0F78  1703               	bsf	3,6	;RP1=1, select bank3
  4884     0F79  00CB               	movwf	(ConvertToString@temp+1)^(0+384)
  4885     0F7A  1683               	bsf	3,5	;RP0=1, select bank1
  4886     0F7B  1303               	bcf	3,6	;RP1=0, select bank1
  4887     0F7C  0841               	movf	?_pow^(0+128),w
  4888     0F7D  1683               	bsf	3,5	;RP0=1, select bank3
  4889     0F7E  1703               	bsf	3,6	;RP1=1, select bank3
  4890     0F7F  00CA               	movwf	ConvertToString@temp^(0+384)
  4891     0F80                     l3150:
  4892                           
  4893                           ;main.c: 457:         str[i] = (char)(n/temp) + '0';
  4894     0F80  084E               	movf	ConvertToString@i^(0+384),w
  4895     0F81  1683               	bsf	3,5	;RP0=1, select bank1
  4896     0F82  1303               	bcf	3,6	;RP1=0, select bank1
  4897     0F83  075D               	addwf	ConvertToString@str^(0+128),w
  4898     0F84  00DE               	movwf	??_ConvertToString^(0+128)
  4899     0F85  085E               	movf	??_ConvertToString^(0+128),w
  4900     0F86  0084               	movwf	4
  4901     0F87  1683               	bsf	3,5	;RP0=1, select bank3
  4902     0F88  1703               	bsf	3,6	;RP1=1, select bank3
  4903     0F89  084A               	movf	ConvertToString@temp^(0+384),w
  4904     0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  4905     0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  4906     0F8C  00CA               	movwf	___aldiv@divisor^(0+128)
  4907     0F8D  1683               	bsf	3,5	;RP0=1, select bank3
  4908     0F8E  1703               	bsf	3,6	;RP1=1, select bank3
  4909     0F8F  084B               	movf	(ConvertToString@temp+1)^(0+384),w
  4910     0F90  1683               	bsf	3,5	;RP0=1, select bank1
  4911     0F91  1303               	bcf	3,6	;RP1=0, select bank1
  4912     0F92  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4913     0F93  3000               	movlw	0
  4914     0F94  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4915     0F95  30FF               	movlw	255
  4916     0F96  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4917     0F97  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4918     0F98  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4919     0F99  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4920     0F9A  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4921     0F9B  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4922     0F9C  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4923     0F9D  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4924     0F9E  0859               	movf	ConvertToString@n^(0+128),w
  4925     0F9F  00CE               	movwf	___aldiv@dividend^(0+128)
  4926     0FA0  120A  158A  2659  120A  158A  	fcall	___aldiv
  4927     0FA5  1683               	bsf	3,5	;RP0=1, select bank1
  4928     0FA6  1303               	bcf	3,6	;RP1=0, select bank1
  4929     0FA7  084A               	movf	?___aldiv^(0+128),w
  4930     0FA8  3E30               	addlw	48
  4931     0FA9  1783               	bsf	3,7	;select IRP bank2
  4932     0FAA  0080               	movwf	0
  4933     0FAB                     l3152:
  4934                           
  4935                           ;main.c: 459:         n = n % temp;
  4936     0FAB  1683               	bsf	3,5	;RP0=1, select bank3
  4937     0FAC  1703               	bsf	3,6	;RP1=1, select bank3
  4938     0FAD  084A               	movf	ConvertToString@temp^(0+384),w
  4939     0FAE  1683               	bsf	3,5	;RP0=1, select bank1
  4940     0FAF  1303               	bcf	3,6	;RP1=0, select bank1
  4941     0FB0  00A0               	movwf	___almod@divisor^(0+128)
  4942     0FB1  1683               	bsf	3,5	;RP0=1, select bank3
  4943     0FB2  1703               	bsf	3,6	;RP1=1, select bank3
  4944     0FB3  084B               	movf	(ConvertToString@temp+1)^(0+384),w
  4945     0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  4946     0FB5  1303               	bcf	3,6	;RP1=0, select bank1
  4947     0FB6  00A1               	movwf	(___almod@divisor+1)^(0+128)
  4948     0FB7  3000               	movlw	0
  4949     0FB8  1BA1               	btfsc	(___almod@divisor+1)^(0+128),7
  4950     0FB9  30FF               	movlw	255
  4951     0FBA  00A2               	movwf	(___almod@divisor+2)^(0+128)
  4952     0FBB  00A3               	movwf	(___almod@divisor+3)^(0+128)
  4953     0FBC  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4954     0FBD  00A7               	movwf	(___almod@dividend+3)^(0+128)
  4955     0FBE  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4956     0FBF  00A6               	movwf	(___almod@dividend+2)^(0+128)
  4957     0FC0  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4958     0FC1  00A5               	movwf	(___almod@dividend+1)^(0+128)
  4959     0FC2  0859               	movf	ConvertToString@n^(0+128),w
  4960     0FC3  00A4               	movwf	___almod@dividend^(0+128)
  4961     0FC4  120A  158A  2544  120A  158A  	fcall	___almod
  4962     0FC9  1683               	bsf	3,5	;RP0=1, select bank1
  4963     0FCA  1303               	bcf	3,6	;RP1=0, select bank1
  4964     0FCB  0823               	movf	(?___almod+3)^(0+128),w
  4965     0FCC  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4966     0FCD  0822               	movf	(?___almod+2)^(0+128),w
  4967     0FCE  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4968     0FCF  0821               	movf	(?___almod+1)^(0+128),w
  4969     0FD0  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4970     0FD1  0820               	movf	?___almod^(0+128),w
  4971     0FD2  00D9               	movwf	ConvertToString@n^(0+128)
  4972     0FD3                     l3154:
  4973                           
  4974                           ;main.c: 460:         i++;
  4975     0FD3  3001               	movlw	1
  4976     0FD4  1683               	bsf	3,5	;RP0=1, select bank3
  4977     0FD5  1703               	bsf	3,6	;RP1=1, select bank3
  4978     0FD6  07CE               	addwf	ConvertToString@i^(0+384),f
  4979     0FD7  1803               	skipnc
  4980     0FD8  0ACF               	incf	(ConvertToString@i+1)^(0+384),f
  4981     0FD9  3000               	movlw	0
  4982     0FDA  07CF               	addwf	(ConvertToString@i+1)^(0+384),f
  4983     0FDB                     l3156:
  4984                           
  4985                           ;main.c: 461:         j++;
  4986     0FDB  3001               	movlw	1
  4987     0FDC  07CC               	addwf	ConvertToString@j^(0+384),f
  4988     0FDD  1803               	skipnc
  4989     0FDE  0ACD               	incf	(ConvertToString@j+1)^(0+384),f
  4990     0FDF  3000               	movlw	0
  4991     0FE0  07CD               	addwf	(ConvertToString@j+1)^(0+384),f
  4992     0FE1                     l3158:
  4993                           
  4994                           ;main.c: 453:     while(j < n_cifre)
  4995     0FE1  1683               	bsf	3,5	;RP0=1, select bank3
  4996     0FE2  1703               	bsf	3,6	;RP1=1, select bank3
  4997     0FE3  084D               	movf	(ConvertToString@j+1)^(0+384),w
  4998     0FE4  3A80               	xorlw	128
  4999     0FE5  1683               	bsf	3,5	;RP0=1, select bank1
  5000     0FE6  1303               	bcf	3,6	;RP1=0, select bank1
  5001     0FE7  00DE               	movwf	??_ConvertToString^(0+128)
  5002     0FE8  3080               	movlw	128
  5003     0FE9  025E               	subwf	??_ConvertToString^(0+128),w
  5004     0FEA  1D03               	skipz
  5005     0FEB  2FF0               	goto	u3225
  5006     0FEC  1683               	bsf	3,5	;RP0=1, select bank3
  5007     0FED  1703               	bsf	3,6	;RP1=1, select bank3
  5008     0FEE  0850               	movf	ConvertToString@n_cifre^(0+384),w
  5009     0FEF  024C               	subwf	ConvertToString@j^(0+384),w
  5010     0FF0                     u3225:
  5011     0FF0  1C03               	skipc
  5012     0FF1  2FF3               	goto	u3221
  5013     0FF2  2FF4               	goto	u3220
  5014     0FF3                     u3221:
  5015     0FF3  2F66               	goto	l3148
  5016     0FF4                     u3220:
  5017     0FF4                     l3160:
  5018                           
  5019                           ;main.c: 464:     str[i] = '\0';
  5020     0FF4  1683               	bsf	3,5	;RP0=1, select bank3
  5021     0FF5  1703               	bsf	3,6	;RP1=1, select bank3
  5022     0FF6  084E               	movf	ConvertToString@i^(0+384),w
  5023     0FF7  1683               	bsf	3,5	;RP0=1, select bank1
  5024     0FF8  1303               	bcf	3,6	;RP1=0, select bank1
  5025     0FF9  075D               	addwf	ConvertToString@str^(0+128),w
  5026     0FFA  00DE               	movwf	??_ConvertToString^(0+128)
  5027     0FFB  085E               	movf	??_ConvertToString^(0+128),w
  5028     0FFC  0084               	movwf	4
  5029     0FFD  1783               	bsf	3,7	;select IRP bank2
  5030     0FFE  0180               	clrf	0
  5031     0FFF                     l211:
  5032     0FFF  0008               	return
  5033     1000                     __end_of_ConvertToString:
  5034                           
  5035                           	psect	text14
  5036     16B0                     __ptext14:	
  5037 ;; *************** function _pow *****************
  5038 ;; Defined at:
  5039 ;;		line 425 in file "main.c"
  5040 ;; Parameters:    Size  Location     Type
  5041 ;;  b               1    wreg     unsigned char 
  5042 ;;  exp             1   33[BANK1 ] unsigned char 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  b               1   37[BANK1 ] unsigned char 
  5045 ;;  i               2   38[BANK1 ] int 
  5046 ;;  n               2   40[BANK1 ] int 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  2   33[BANK1 ] int 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0, pclath, cstack
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5056 ;;      Params:         0       0       2       0       0
  5057 ;;      Locals:         0       0       5       0       0
  5058 ;;      Temps:          0       0       2       0       0
  5059 ;;      Totals:         0       0       9       0       0
  5060 ;;Total ram usage:        9 bytes
  5061 ;; Hardware stack levels used: 1
  5062 ;; Hardware stack levels required when called: 5
  5063 ;; This function calls:
  5064 ;;		___wmul
  5065 ;; This function is called by:
  5066 ;;		_ConvertToString
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070     16B0                     _pow:	
  5071                           ;psect for function _pow
  5072                           
  5073                           
  5074                           ;incstack = 0
  5075                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  5076                           ;pow@b stored from wreg
  5077     16B0  1683               	bsf	3,5	;RP0=1, select bank1
  5078     16B1  1303               	bcf	3,6	;RP1=0, select bank1
  5079     16B2  00C5               	movwf	pow@b^(0+128)
  5080     16B3                     l3014:
  5081                           
  5082                           ;main.c: 425: int pow(char b, char exp);main.c: 426: {;main.c: 427:     int n = 1;
  5083     16B3  3001               	movlw	1
  5084     16B4  00C8               	movwf	pow@n^(0+128)
  5085     16B5  3000               	movlw	0
  5086     16B6  00C9               	movwf	(pow@n^(0+128)+1)
  5087     16B7                     l3016:
  5088                           
  5089                           ;main.c: 428:     for(int i = 0; i < exp; i++)
  5090     16B7  01C6               	clrf	pow@i^(0+128)
  5091     16B8  01C7               	clrf	(pow@i+1)^(0+128)
  5092     16B9  2ED8               	goto	l3022
  5093     16BA                     l3018:
  5094                           
  5095                           ;main.c: 429:     {;main.c: 430:         n *= b;
  5096     16BA  1683               	bsf	3,5	;RP0=1, select bank1
  5097     16BB  1303               	bcf	3,6	;RP1=0, select bank1
  5098     16BC  0845               	movf	pow@b^(0+128),w
  5099     16BD  00C3               	movwf	??_pow^(0+128)
  5100     16BE  01C4               	clrf	(??_pow^(0+128)+1)
  5101     16BF  0843               	movf	??_pow^(0+128),w
  5102     16C0  00BB               	movwf	___wmul@multiplier^(0+128)
  5103     16C1  0844               	movf	(??_pow+1)^(0+128),w
  5104     16C2  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  5105     16C3  0849               	movf	(pow@n+1)^(0+128),w
  5106     16C4  00BE               	movwf	(___wmul@multiplicand+1)^(0+128)
  5107     16C5  0848               	movf	pow@n^(0+128),w
  5108     16C6  00BD               	movwf	___wmul@multiplicand^(0+128)
  5109     16C7  120A  158A  2017  160A  118A  	fcall	___wmul
  5110     16CC  1683               	bsf	3,5	;RP0=1, select bank1
  5111     16CD  1303               	bcf	3,6	;RP1=0, select bank1
  5112     16CE  083C               	movf	(?___wmul+1)^(0+128),w
  5113     16CF  00C9               	movwf	(pow@n+1)^(0+128)
  5114     16D0  083B               	movf	?___wmul^(0+128),w
  5115     16D1  00C8               	movwf	pow@n^(0+128)
  5116     16D2                     l3020:
  5117                           
  5118                           ;main.c: 431:     }
  5119     16D2  3001               	movlw	1
  5120     16D3  07C6               	addwf	pow@i^(0+128),f
  5121     16D4  1803               	skipnc
  5122     16D5  0AC7               	incf	(pow@i+1)^(0+128),f
  5123     16D6  3000               	movlw	0
  5124     16D7  07C7               	addwf	(pow@i+1)^(0+128),f
  5125     16D8                     l3022:
  5126     16D8  0847               	movf	(pow@i+1)^(0+128),w
  5127     16D9  3A80               	xorlw	128
  5128     16DA  00C3               	movwf	??_pow^(0+128)
  5129     16DB  3080               	movlw	128
  5130     16DC  0243               	subwf	??_pow^(0+128),w
  5131     16DD  1D03               	skipz
  5132     16DE  2EE1               	goto	u2905
  5133     16DF  0841               	movf	pow@exp^(0+128),w
  5134     16E0  0246               	subwf	pow@i^(0+128),w
  5135     16E1                     u2905:
  5136     16E1  1C03               	skipc
  5137     16E2  2EE4               	goto	u2901
  5138     16E3  2EE5               	goto	u2900
  5139     16E4                     u2901:
  5140     16E4  2EBA               	goto	l3018
  5141     16E5                     u2900:
  5142     16E5                     l3024:
  5143                           
  5144                           ;main.c: 432:     return n;
  5145     16E5  1683               	bsf	3,5	;RP0=1, select bank1
  5146     16E6  1303               	bcf	3,6	;RP1=0, select bank1
  5147     16E7  0849               	movf	(pow@n+1)^(0+128),w
  5148     16E8  00C2               	movwf	(?_pow+1)^(0+128)
  5149     16E9  0848               	movf	pow@n^(0+128),w
  5150     16EA  00C1               	movwf	?_pow^(0+128)
  5151     16EB                     l201:
  5152     16EB  0008               	return
  5153     16EC                     __end_of_pow:
  5154                           
  5155                           	psect	text15
  5156     0D44                     __ptext15:	
  5157 ;; *************** function ___almod *****************
  5158 ;; Defined at:
  5159 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  divisor         4    0[BANK1 ] long 
  5162 ;;  dividend        4    4[BANK1 ] long 
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  sign            1   10[BANK1 ] unsigned char 
  5165 ;;  counter         1    9[BANK1 ] unsigned char 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  4    0[BANK1 ] long 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5175 ;;      Params:         0       0       8       0       0
  5176 ;;      Locals:         0       0       2       0       0
  5177 ;;      Temps:          0       0       1       0       0
  5178 ;;      Totals:         0       0      11       0       0
  5179 ;;Total ram usage:       11 bytes
  5180 ;; Hardware stack levels used: 1
  5181 ;; Hardware stack levels required when called: 4
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_ConvertToString
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189     0D44                     ___almod:	
  5190                           ;psect for function ___almod
  5191                           
  5192     0D44                     l3092:	
  5193                           ;incstack = 0
  5194                           ; Regs used in ___almod: [wreg+status,2+status,0]
  5195                           
  5196     0D44  1683               	bsf	3,5	;RP0=1, select bank1
  5197     0D45  1303               	bcf	3,6	;RP1=0, select bank1
  5198     0D46  01AA               	clrf	___almod@sign^(0+128)
  5199     0D47                     l3094:
  5200     0D47  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  5201     0D48  2D4A               	goto	u3081
  5202     0D49  2D4B               	goto	u3080
  5203     0D4A                     u3081:
  5204     0D4A  2D58               	goto	l532
  5205     0D4B                     u3080:
  5206     0D4B                     l3096:
  5207     0D4B  09A4               	comf	___almod@dividend^(0+128),f
  5208     0D4C  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5209     0D4D  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5210     0D4E  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5211     0D4F  0AA4               	incf	___almod@dividend^(0+128),f
  5212     0D50  1903               	skipnz
  5213     0D51  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5214     0D52  1903               	skipnz
  5215     0D53  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5216     0D54  1903               	skipnz
  5217     0D55  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5218     0D56  01AA               	clrf	___almod@sign^(0+128)
  5219     0D57  0AAA               	incf	___almod@sign^(0+128),f
  5220     0D58                     l532:
  5221     0D58  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5222     0D59  2D5B               	goto	u3091
  5223     0D5A  2D5C               	goto	u3090
  5224     0D5B                     u3091:
  5225     0D5B  2D67               	goto	l3100
  5226     0D5C                     u3090:
  5227     0D5C                     l3098:
  5228     0D5C  09A0               	comf	___almod@divisor^(0+128),f
  5229     0D5D  09A1               	comf	(___almod@divisor+1)^(0+128),f
  5230     0D5E  09A2               	comf	(___almod@divisor+2)^(0+128),f
  5231     0D5F  09A3               	comf	(___almod@divisor+3)^(0+128),f
  5232     0D60  0AA0               	incf	___almod@divisor^(0+128),f
  5233     0D61  1903               	skipnz
  5234     0D62  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  5235     0D63  1903               	skipnz
  5236     0D64  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  5237     0D65  1903               	skipnz
  5238     0D66  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  5239     0D67                     l3100:
  5240     0D67  0823               	movf	(___almod@divisor+3)^(0+128),w
  5241     0D68  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  5242     0D69  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  5243     0D6A  0420               	iorwf	___almod@divisor^(0+128),w
  5244     0D6B  1903               	skipnz
  5245     0D6C  2D6E               	goto	u3101
  5246     0D6D  2D6F               	goto	u3100
  5247     0D6E                     u3101:
  5248     0D6E  2DB2               	goto	l3116
  5249     0D6F                     u3100:
  5250     0D6F                     l3102:
  5251     0D6F  01A9               	clrf	___almod@counter^(0+128)
  5252     0D70  0AA9               	incf	___almod@counter^(0+128),f
  5253     0D71  2D7F               	goto	l3106
  5254     0D72                     l3104:
  5255     0D72  3001               	movlw	1
  5256     0D73  00A8               	movwf	??___almod^(0+128)
  5257     0D74                     u3115:
  5258     0D74  1003               	clrc
  5259     0D75  0DA0               	rlf	___almod@divisor^(0+128),f
  5260     0D76  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  5261     0D77  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  5262     0D78  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  5263     0D79  0BA8               	decfsz	??___almod^(0+128),f
  5264     0D7A  2D74               	goto	u3115
  5265     0D7B  3001               	movlw	1
  5266     0D7C  00A8               	movwf	??___almod^(0+128)
  5267     0D7D  0828               	movf	??___almod^(0+128),w
  5268     0D7E  07A9               	addwf	___almod@counter^(0+128),f
  5269     0D7F                     l3106:
  5270     0D7F  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5271     0D80  2D82               	goto	u3121
  5272     0D81  2D83               	goto	u3120
  5273     0D82                     u3121:
  5274     0D82  2D72               	goto	l3104
  5275     0D83                     u3120:
  5276     0D83                     l3108:
  5277     0D83  0823               	movf	(___almod@divisor+3)^(0+128),w
  5278     0D84  0227               	subwf	(___almod@dividend+3)^(0+128),w
  5279     0D85  1D03               	skipz
  5280     0D86  2D91               	goto	u3135
  5281     0D87  0822               	movf	(___almod@divisor+2)^(0+128),w
  5282     0D88  0226               	subwf	(___almod@dividend+2)^(0+128),w
  5283     0D89  1D03               	skipz
  5284     0D8A  2D91               	goto	u3135
  5285     0D8B  0821               	movf	(___almod@divisor+1)^(0+128),w
  5286     0D8C  0225               	subwf	(___almod@dividend+1)^(0+128),w
  5287     0D8D  1D03               	skipz
  5288     0D8E  2D91               	goto	u3135
  5289     0D8F  0820               	movf	___almod@divisor^(0+128),w
  5290     0D90  0224               	subwf	___almod@dividend^(0+128),w
  5291     0D91                     u3135:
  5292     0D91  1C03               	skipc
  5293     0D92  2D94               	goto	u3131
  5294     0D93  2D95               	goto	u3130
  5295     0D94                     u3131:
  5296     0D94  2DA3               	goto	l3112
  5297     0D95                     u3130:
  5298     0D95                     l3110:
  5299     0D95  0820               	movf	___almod@divisor^(0+128),w
  5300     0D96  02A4               	subwf	___almod@dividend^(0+128),f
  5301     0D97  0821               	movf	(___almod@divisor+1)^(0+128),w
  5302     0D98  1C03               	skipc
  5303     0D99  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  5304     0D9A  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  5305     0D9B  0822               	movf	(___almod@divisor+2)^(0+128),w
  5306     0D9C  1C03               	skipc
  5307     0D9D  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  5308     0D9E  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  5309     0D9F  0823               	movf	(___almod@divisor+3)^(0+128),w
  5310     0DA0  1C03               	skipc
  5311     0DA1  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  5312     0DA2  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  5313     0DA3                     l3112:
  5314     0DA3  3001               	movlw	1
  5315     0DA4                     u3145:
  5316     0DA4  1003               	clrc
  5317     0DA5  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  5318     0DA6  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  5319     0DA7  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  5320     0DA8  0CA0               	rrf	___almod@divisor^(0+128),f
  5321     0DA9  3EFF               	addlw	-1
  5322     0DAA  1D03               	skipz
  5323     0DAB  2DA4               	goto	u3145
  5324     0DAC                     l3114:
  5325     0DAC  3001               	movlw	1
  5326     0DAD  02A9               	subwf	___almod@counter^(0+128),f
  5327     0DAE  1D03               	btfss	3,2
  5328     0DAF  2DB1               	goto	u3151
  5329     0DB0  2DB2               	goto	u3150
  5330     0DB1                     u3151:
  5331     0DB1  2D83               	goto	l3108
  5332     0DB2                     u3150:
  5333     0DB2                     l3116:
  5334     0DB2  082A               	movf	___almod@sign^(0+128),w
  5335     0DB3  1903               	btfsc	3,2
  5336     0DB4  2DB6               	goto	u3161
  5337     0DB5  2DB7               	goto	u3160
  5338     0DB6                     u3161:
  5339     0DB6  2DC2               	goto	l3120
  5340     0DB7                     u3160:
  5341     0DB7                     l3118:
  5342     0DB7  09A4               	comf	___almod@dividend^(0+128),f
  5343     0DB8  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5344     0DB9  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5345     0DBA  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5346     0DBB  0AA4               	incf	___almod@dividend^(0+128),f
  5347     0DBC  1903               	skipnz
  5348     0DBD  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5349     0DBE  1903               	skipnz
  5350     0DBF  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5351     0DC0  1903               	skipnz
  5352     0DC1  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5353     0DC2                     l3120:
  5354     0DC2  0827               	movf	(___almod@dividend+3)^(0+128),w
  5355     0DC3  00A3               	movwf	(?___almod+3)^(0+128)
  5356     0DC4  0826               	movf	(___almod@dividend+2)^(0+128),w
  5357     0DC5  00A2               	movwf	(?___almod+2)^(0+128)
  5358     0DC6  0825               	movf	(___almod@dividend+1)^(0+128),w
  5359     0DC7  00A1               	movwf	(?___almod+1)^(0+128)
  5360     0DC8  0824               	movf	___almod@dividend^(0+128),w
  5361     0DC9  00A0               	movwf	?___almod^(0+128)
  5362     0DCA                     l542:
  5363     0DCA  0008               	return
  5364     0DCB                     __end_of___almod:
  5365                           
  5366                           	psect	text16
  5367     0E59                     __ptext16:	
  5368 ;; *************** function ___aldiv *****************
  5369 ;; Defined at:
  5370 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;  divisor         4   42[BANK1 ] long 
  5373 ;;  dividend        4   46[BANK1 ] long 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;  quotient        4   53[BANK1 ] long 
  5376 ;;  sign            1   52[BANK1 ] unsigned char 
  5377 ;;  counter         1   51[BANK1 ] unsigned char 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  4   42[BANK1 ] long 
  5380 ;; Registers used:
  5381 ;;		wreg, status,2, status,0
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5387 ;;      Params:         0       0       8       0       0
  5388 ;;      Locals:         0       0       6       0       0
  5389 ;;      Temps:          0       0       1       0       0
  5390 ;;      Totals:         0       0      15       0       0
  5391 ;;Total ram usage:       15 bytes
  5392 ;; Hardware stack levels used: 1
  5393 ;; Hardware stack levels required when called: 4
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_ConvertToString
  5398 ;;		_UART_init
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402     0E59                     ___aldiv:	
  5403                           ;psect for function ___aldiv
  5404                           
  5405     0E59                     l3052:	
  5406                           ;incstack = 0
  5407                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5408                           
  5409     0E59  1683               	bsf	3,5	;RP0=1, select bank1
  5410     0E5A  1303               	bcf	3,6	;RP1=0, select bank1
  5411     0E5B  01D4               	clrf	___aldiv@sign^(0+128)
  5412     0E5C                     l3054:
  5413     0E5C  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5414     0E5D  2E5F               	goto	u2981
  5415     0E5E  2E60               	goto	u2980
  5416     0E5F                     u2981:
  5417     0E5F  2E6D               	goto	l519
  5418     0E60                     u2980:
  5419     0E60                     l3056:
  5420     0E60  09CA               	comf	___aldiv@divisor^(0+128),f
  5421     0E61  09CB               	comf	(___aldiv@divisor+1)^(0+128),f
  5422     0E62  09CC               	comf	(___aldiv@divisor+2)^(0+128),f
  5423     0E63  09CD               	comf	(___aldiv@divisor+3)^(0+128),f
  5424     0E64  0ACA               	incf	___aldiv@divisor^(0+128),f
  5425     0E65  1903               	skipnz
  5426     0E66  0ACB               	incf	(___aldiv@divisor+1)^(0+128),f
  5427     0E67  1903               	skipnz
  5428     0E68  0ACC               	incf	(___aldiv@divisor+2)^(0+128),f
  5429     0E69  1903               	skipnz
  5430     0E6A  0ACD               	incf	(___aldiv@divisor+3)^(0+128),f
  5431     0E6B  01D4               	clrf	___aldiv@sign^(0+128)
  5432     0E6C  0AD4               	incf	___aldiv@sign^(0+128),f
  5433     0E6D                     l519:
  5434     0E6D  1FD1               	btfss	(___aldiv@dividend+3)^(0+128),7
  5435     0E6E  2E70               	goto	u2991
  5436     0E6F  2E71               	goto	u2990
  5437     0E70                     u2991:
  5438     0E70  2E80               	goto	l3062
  5439     0E71                     u2990:
  5440     0E71                     l3058:
  5441     0E71  09CE               	comf	___aldiv@dividend^(0+128),f
  5442     0E72  09CF               	comf	(___aldiv@dividend+1)^(0+128),f
  5443     0E73  09D0               	comf	(___aldiv@dividend+2)^(0+128),f
  5444     0E74  09D1               	comf	(___aldiv@dividend+3)^(0+128),f
  5445     0E75  0ACE               	incf	___aldiv@dividend^(0+128),f
  5446     0E76  1903               	skipnz
  5447     0E77  0ACF               	incf	(___aldiv@dividend+1)^(0+128),f
  5448     0E78  1903               	skipnz
  5449     0E79  0AD0               	incf	(___aldiv@dividend+2)^(0+128),f
  5450     0E7A  1903               	skipnz
  5451     0E7B  0AD1               	incf	(___aldiv@dividend+3)^(0+128),f
  5452     0E7C                     l3060:
  5453     0E7C  3001               	movlw	1
  5454     0E7D  00D2               	movwf	??___aldiv^(0+128)
  5455     0E7E  0852               	movf	??___aldiv^(0+128),w
  5456     0E7F  06D4               	xorwf	___aldiv@sign^(0+128),f
  5457     0E80                     l3062:
  5458     0E80  3000               	movlw	0
  5459     0E81  00D8               	movwf	(___aldiv@quotient+3)^(0+128)
  5460     0E82  3000               	movlw	0
  5461     0E83  00D7               	movwf	(___aldiv@quotient+2)^(0+128)
  5462     0E84  3000               	movlw	0
  5463     0E85  00D6               	movwf	(___aldiv@quotient+1)^(0+128)
  5464     0E86  3000               	movlw	0
  5465     0E87  00D5               	movwf	___aldiv@quotient^(0+128)
  5466     0E88                     l3064:
  5467     0E88  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5468     0E89  044C               	iorwf	(___aldiv@divisor+2)^(0+128),w
  5469     0E8A  044B               	iorwf	(___aldiv@divisor+1)^(0+128),w
  5470     0E8B  044A               	iorwf	___aldiv@divisor^(0+128),w
  5471     0E8C  1903               	skipnz
  5472     0E8D  2E8F               	goto	u3001
  5473     0E8E  2E90               	goto	u3000
  5474     0E8F                     u3001:
  5475     0E8F  2EDD               	goto	l3084
  5476     0E90                     u3000:
  5477     0E90                     l3066:
  5478     0E90  01D3               	clrf	___aldiv@counter^(0+128)
  5479     0E91  0AD3               	incf	___aldiv@counter^(0+128),f
  5480     0E92  2EA0               	goto	l3070
  5481     0E93                     l3068:
  5482     0E93  3001               	movlw	1
  5483     0E94  00D2               	movwf	??___aldiv^(0+128)
  5484     0E95                     u3015:
  5485     0E95  1003               	clrc
  5486     0E96  0DCA               	rlf	___aldiv@divisor^(0+128),f
  5487     0E97  0DCB               	rlf	(___aldiv@divisor+1)^(0+128),f
  5488     0E98  0DCC               	rlf	(___aldiv@divisor+2)^(0+128),f
  5489     0E99  0DCD               	rlf	(___aldiv@divisor+3)^(0+128),f
  5490     0E9A  0BD2               	decfsz	??___aldiv^(0+128),f
  5491     0E9B  2E95               	goto	u3015
  5492     0E9C  3001               	movlw	1
  5493     0E9D  00D2               	movwf	??___aldiv^(0+128)
  5494     0E9E  0852               	movf	??___aldiv^(0+128),w
  5495     0E9F  07D3               	addwf	___aldiv@counter^(0+128),f
  5496     0EA0                     l3070:
  5497     0EA0  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5498     0EA1  2EA3               	goto	u3021
  5499     0EA2  2EA4               	goto	u3020
  5500     0EA3                     u3021:
  5501     0EA3  2E93               	goto	l3068
  5502     0EA4                     u3020:
  5503     0EA4                     l3072:
  5504     0EA4  3001               	movlw	1
  5505     0EA5  00D2               	movwf	??___aldiv^(0+128)
  5506     0EA6                     u3035:
  5507     0EA6  1003               	clrc
  5508     0EA7  0DD5               	rlf	___aldiv@quotient^(0+128),f
  5509     0EA8  0DD6               	rlf	(___aldiv@quotient+1)^(0+128),f
  5510     0EA9  0DD7               	rlf	(___aldiv@quotient+2)^(0+128),f
  5511     0EAA  0DD8               	rlf	(___aldiv@quotient+3)^(0+128),f
  5512     0EAB  0BD2               	decfsz	??___aldiv^(0+128),f
  5513     0EAC  2EA6               	goto	u3035
  5514     0EAD                     l3074:
  5515     0EAD  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5516     0EAE  0251               	subwf	(___aldiv@dividend+3)^(0+128),w
  5517     0EAF  1D03               	skipz
  5518     0EB0  2EBB               	goto	u3045
  5519     0EB1  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5520     0EB2  0250               	subwf	(___aldiv@dividend+2)^(0+128),w
  5521     0EB3  1D03               	skipz
  5522     0EB4  2EBB               	goto	u3045
  5523     0EB5  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5524     0EB6  024F               	subwf	(___aldiv@dividend+1)^(0+128),w
  5525     0EB7  1D03               	skipz
  5526     0EB8  2EBB               	goto	u3045
  5527     0EB9  084A               	movf	___aldiv@divisor^(0+128),w
  5528     0EBA  024E               	subwf	___aldiv@dividend^(0+128),w
  5529     0EBB                     u3045:
  5530     0EBB  1C03               	skipc
  5531     0EBC  2EBE               	goto	u3041
  5532     0EBD  2EBF               	goto	u3040
  5533     0EBE                     u3041:
  5534     0EBE  2ECE               	goto	l3080
  5535     0EBF                     u3040:
  5536     0EBF                     l3076:
  5537     0EBF  084A               	movf	___aldiv@divisor^(0+128),w
  5538     0EC0  02CE               	subwf	___aldiv@dividend^(0+128),f
  5539     0EC1  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5540     0EC2  1C03               	skipc
  5541     0EC3  0F4B               	incfsz	(___aldiv@divisor+1)^(0+128),w
  5542     0EC4  02CF               	subwf	(___aldiv@dividend+1)^(0+128),f
  5543     0EC5  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5544     0EC6  1C03               	skipc
  5545     0EC7  0F4C               	incfsz	(___aldiv@divisor+2)^(0+128),w
  5546     0EC8  02D0               	subwf	(___aldiv@dividend+2)^(0+128),f
  5547     0EC9  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5548     0ECA  1C03               	skipc
  5549     0ECB  0F4D               	incfsz	(___aldiv@divisor+3)^(0+128),w
  5550     0ECC  02D1               	subwf	(___aldiv@dividend+3)^(0+128),f
  5551     0ECD                     l3078:
  5552     0ECD  1455               	bsf	___aldiv@quotient^(0+128),0
  5553     0ECE                     l3080:
  5554     0ECE  3001               	movlw	1
  5555     0ECF                     u3055:
  5556     0ECF  1003               	clrc
  5557     0ED0  0CCD               	rrf	(___aldiv@divisor+3)^(0+128),f
  5558     0ED1  0CCC               	rrf	(___aldiv@divisor+2)^(0+128),f
  5559     0ED2  0CCB               	rrf	(___aldiv@divisor+1)^(0+128),f
  5560     0ED3  0CCA               	rrf	___aldiv@divisor^(0+128),f
  5561     0ED4  3EFF               	addlw	-1
  5562     0ED5  1D03               	skipz
  5563     0ED6  2ECF               	goto	u3055
  5564     0ED7                     l3082:
  5565     0ED7  3001               	movlw	1
  5566     0ED8  02D3               	subwf	___aldiv@counter^(0+128),f
  5567     0ED9  1D03               	btfss	3,2
  5568     0EDA  2EDC               	goto	u3061
  5569     0EDB  2EDD               	goto	u3060
  5570     0EDC                     u3061:
  5571     0EDC  2EA4               	goto	l3072
  5572     0EDD                     u3060:
  5573     0EDD                     l3084:
  5574     0EDD  0854               	movf	___aldiv@sign^(0+128),w
  5575     0EDE  1903               	btfsc	3,2
  5576     0EDF  2EE1               	goto	u3071
  5577     0EE0  2EE2               	goto	u3070
  5578     0EE1                     u3071:
  5579     0EE1  2EED               	goto	l3088
  5580     0EE2                     u3070:
  5581     0EE2                     l3086:
  5582     0EE2  09D5               	comf	___aldiv@quotient^(0+128),f
  5583     0EE3  09D6               	comf	(___aldiv@quotient+1)^(0+128),f
  5584     0EE4  09D7               	comf	(___aldiv@quotient+2)^(0+128),f
  5585     0EE5  09D8               	comf	(___aldiv@quotient+3)^(0+128),f
  5586     0EE6  0AD5               	incf	___aldiv@quotient^(0+128),f
  5587     0EE7  1903               	skipnz
  5588     0EE8  0AD6               	incf	(___aldiv@quotient+1)^(0+128),f
  5589     0EE9  1903               	skipnz
  5590     0EEA  0AD7               	incf	(___aldiv@quotient+2)^(0+128),f
  5591     0EEB  1903               	skipnz
  5592     0EEC  0AD8               	incf	(___aldiv@quotient+3)^(0+128),f
  5593     0EED                     l3088:
  5594     0EED  0858               	movf	(___aldiv@quotient+3)^(0+128),w
  5595     0EEE  00CD               	movwf	(?___aldiv+3)^(0+128)
  5596     0EEF  0857               	movf	(___aldiv@quotient+2)^(0+128),w
  5597     0EF0  00CC               	movwf	(?___aldiv+2)^(0+128)
  5598     0EF1  0856               	movf	(___aldiv@quotient+1)^(0+128),w
  5599     0EF2  00CB               	movwf	(?___aldiv+1)^(0+128)
  5600     0EF3  0855               	movf	___aldiv@quotient^(0+128),w
  5601     0EF4  00CA               	movwf	?___aldiv^(0+128)
  5602     0EF5                     l529:
  5603     0EF5  0008               	return
  5604     0EF6                     __end_of___aldiv:
  5605                           
  5606                           	psect	text17
  5607     0AFD                     __ptext17:	
  5608 ;; *************** function _UART_TxString *****************
  5609 ;; Defined at:
  5610 ;;		line 800 in file "main.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  str             1    wreg     PTR const unsigned char 
  5613 ;;		 -> packet(15), 
  5614 ;;  is_ACK          1   33[BANK1 ] unsigned char 
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;  str             1   37[BANK1 ] PTR const unsigned char 
  5617 ;;		 -> packet(15), 
  5618 ;;  n               2   35[BANK1 ] unsigned int 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  1    wreg      void 
  5621 ;; Registers used:
  5622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5628 ;;      Params:         0       0       1       0       0
  5629 ;;      Locals:         0       0       3       0       0
  5630 ;;      Temps:          0       0       1       0       0
  5631 ;;      Totals:         0       0       5       0       0
  5632 ;;Total ram usage:        5 bytes
  5633 ;; Hardware stack levels used: 1
  5634 ;; Hardware stack levels required when called: 6
  5635 ;; This function calls:
  5636 ;;		_UART_TxChar
  5637 ;;		___awmod
  5638 ;;		___wmul
  5639 ;;		_rand
  5640 ;;		_srand
  5641 ;; This function is called by:
  5642 ;;		_main
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646     0AFD                     _UART_TxString:	
  5647                           ;psect for function _UART_TxString
  5648                           
  5649                           
  5650                           ;incstack = 0
  5651                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5652                           ;UART_TxString@str stored from wreg
  5653     0AFD  1683               	bsf	3,5	;RP0=1, select bank1
  5654     0AFE  1303               	bcf	3,6	;RP1=0, select bank1
  5655     0AFF  00C5               	movwf	UART_TxString@str^(0+128)
  5656     0B00                     l3514:
  5657                           
  5658                           ;main.c: 800: void UART_TxString(const char *str, char is_ACK);main.c: 801: {;main.c: 80
      +                          2:     unsigned int n = 0;
  5659     0B00  01C3               	clrf	UART_TxString@n^(0+128)
  5660     0B01  01C4               	clrf	(UART_TxString@n+1)^(0+128)
  5661                           
  5662                           ;main.c: 804:     while(str[n] != '\0')
  5663     0B02  2B16               	goto	l3520
  5664     0B03                     l3516:
  5665                           
  5666                           ;main.c: 805:     {;main.c: 806:         UART_TxChar(str[n]);
  5667     0B03  0843               	movf	UART_TxString@n^(0+128),w
  5668     0B04  0745               	addwf	UART_TxString@str^(0+128),w
  5669     0B05  00C2               	movwf	??_UART_TxString^(0+128)
  5670     0B06  0842               	movf	??_UART_TxString^(0+128),w
  5671     0B07  0084               	movwf	4
  5672     0B08  0800               	movf	0,w
  5673     0B09  160A  118A  25D2  120A  158A  	fcall	_UART_TxChar
  5674     0B0E                     l3518:
  5675                           
  5676                           ;main.c: 807:         n++;
  5677     0B0E  3001               	movlw	1
  5678     0B0F  1683               	bsf	3,5	;RP0=1, select bank1
  5679     0B10  1303               	bcf	3,6	;RP1=0, select bank1
  5680     0B11  07C3               	addwf	UART_TxString@n^(0+128),f
  5681     0B12  1803               	skipnc
  5682     0B13  0AC4               	incf	(UART_TxString@n+1)^(0+128),f
  5683     0B14  3000               	movlw	0
  5684     0B15  07C4               	addwf	(UART_TxString@n+1)^(0+128),f
  5685     0B16                     l3520:
  5686                           
  5687                           ;main.c: 804:     while(str[n] != '\0')
  5688     0B16  0843               	movf	UART_TxString@n^(0+128),w
  5689     0B17  0745               	addwf	UART_TxString@str^(0+128),w
  5690     0B18  00C2               	movwf	??_UART_TxString^(0+128)
  5691     0B19  0842               	movf	??_UART_TxString^(0+128),w
  5692     0B1A  0084               	movwf	4
  5693     0B1B  1783               	bsf	3,7	;select IRP bank2
  5694     0B1C  0800               	movf	0,w
  5695     0B1D  1D03               	btfss	3,2
  5696     0B1E  2B20               	goto	u3751
  5697     0B1F  2B21               	goto	u3750
  5698     0B20                     u3751:
  5699     0B20  2B03               	goto	l3516
  5700     0B21                     u3750:
  5701     0B21                     l3522:
  5702                           
  5703                           ;main.c: 810:     if(is_ACK == 0)
  5704     0B21  0841               	movf	UART_TxString@is_ACK^(0+128),w
  5705     0B22  1D03               	btfss	3,2
  5706     0B23  2B25               	goto	u3761
  5707     0B24  2B26               	goto	u3760
  5708     0B25                     u3761:
  5709     0B25  2B6B               	goto	l319
  5710     0B26                     u3760:
  5711     0B26                     l3524:
  5712                           
  5713                           ;main.c: 811:     {;main.c: 814:         srand(milliseconds);
  5714     0B26  0868               	movf	(_milliseconds+1)^(0+128),w
  5715     0B27  00A1               	movwf	(srand@x+1)^(0+128)
  5716     0B28  0867               	movf	_milliseconds^(0+128),w
  5717     0B29  00A0               	movwf	srand@x^(0+128)
  5718     0B2A  160A  118A  25C3  120A  158A  	fcall	_srand
  5719     0B2F                     l3526:
  5720                           
  5721                           ;main.c: 815:         milliseconds = 0;
  5722     0B2F  3000               	movlw	0
  5723     0B30  1683               	bsf	3,5	;RP0=1, select bank1
  5724     0B31  1303               	bcf	3,6	;RP1=0, select bank1
  5725     0B32  00EA               	movwf	(_milliseconds+3)^(0+128)
  5726     0B33  3000               	movlw	0
  5727     0B34  00E9               	movwf	(_milliseconds+2)^(0+128)
  5728     0B35  3000               	movlw	0
  5729     0B36  00E8               	movwf	(_milliseconds+1)^(0+128)
  5730     0B37  3000               	movlw	0
  5731     0B38  00E7               	movwf	_milliseconds^(0+128)
  5732     0B39                     l3528:
  5733                           
  5734                           ;main.c: 817:         seconds = ((rand()%10)+5) * 250;
  5735     0B39  300A               	movlw	10
  5736     0B3A  00B4               	movwf	___awmod@divisor^(0+128)
  5737     0B3B  3000               	movlw	0
  5738     0B3C  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  5739     0B3D  120A  158A  236C  120A  158A  	fcall	_rand
  5740     0B42  1683               	bsf	3,5	;RP0=1, select bank1
  5741     0B43  1303               	bcf	3,6	;RP1=0, select bank1
  5742     0B44  082E               	movf	(?_rand+1)^(0+128),w
  5743     0B45  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  5744     0B46  082D               	movf	?_rand^(0+128),w
  5745     0B47  00B6               	movwf	___awmod@dividend^(0+128)
  5746     0B48  120A  158A  2181  120A  158A  	fcall	___awmod
  5747     0B4D  1683               	bsf	3,5	;RP0=1, select bank1
  5748     0B4E  1303               	bcf	3,6	;RP1=0, select bank1
  5749     0B4F  0834               	movf	?___awmod^(0+128),w
  5750     0B50  3E05               	addlw	5
  5751     0B51  00BB               	movwf	___wmul@multiplier^(0+128)
  5752     0B52  0835               	movf	(?___awmod+1)^(0+128),w
  5753     0B53  1803               	skipnc
  5754     0B54  3E01               	addlw	1
  5755     0B55  3E00               	addlw	0
  5756     0B56  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  5757     0B57  30FA               	movlw	250
  5758     0B58  00BD               	movwf	___wmul@multiplicand^(0+128)
  5759     0B59  3000               	movlw	0
  5760     0B5A  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  5761     0B5B  120A  158A  2017  120A  158A  	fcall	___wmul
  5762     0B60  1683               	bsf	3,5	;RP0=1, select bank1
  5763     0B61  1303               	bcf	3,6	;RP1=0, select bank1
  5764     0B62  083B               	movf	?___wmul^(0+128),w
  5765     0B63  00E3               	movwf	_seconds^(0+128)
  5766     0B64  083C               	movf	(?___wmul+1)^(0+128),w
  5767     0B65  00E4               	movwf	(_seconds+1)^(0+128)
  5768     0B66  3000               	movlw	0
  5769     0B67  1BE4               	btfsc	(_seconds+1)^(0+128),7
  5770     0B68  30FF               	movlw	255
  5771     0B69  00E5               	movwf	(_seconds+2)^(0+128)
  5772     0B6A  00E6               	movwf	(_seconds+3)^(0+128)
  5773     0B6B                     l319:
  5774     0B6B  0008               	return
  5775     0B6C                     __end_of_UART_TxString:
  5776                           
  5777                           	psect	text18
  5778     15C3                     __ptext18:	
  5779 ;; *************** function _srand *****************
  5780 ;; Defined at:
  5781 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;  x               2    0[BANK1 ] unsigned int 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;                  1    wreg      void 
  5788 ;; Registers used:
  5789 ;;		wreg
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5795 ;;      Params:         0       0       2       0       0
  5796 ;;      Locals:         0       0       0       0       0
  5797 ;;      Temps:          0       0       0       0       0
  5798 ;;      Totals:         0       0       2       0       0
  5799 ;;Total ram usage:        2 bytes
  5800 ;; Hardware stack levels used: 1
  5801 ;; Hardware stack levels required when called: 4
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		_read_NumPad
  5806 ;;		_UART_TxString
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810     15C3                     _srand:	
  5811                           ;psect for function _srand
  5812                           
  5813     15C3                     l3308:	
  5814                           ;incstack = 0
  5815                           ; Regs used in _srand: [wreg]
  5816                           
  5817     15C3  1683               	bsf	3,5	;RP0=1, select bank1
  5818     15C4  1303               	bcf	3,6	;RP1=0, select bank1
  5819     15C5  0820               	movf	srand@x^(0+128),w
  5820     15C6  1283               	bcf	3,5	;RP0=0, select bank0
  5821     15C7  1303               	bcf	3,6	;RP1=0, select bank0
  5822     15C8  00D0               	movwf	_randx
  5823     15C9  1683               	bsf	3,5	;RP0=1, select bank1
  5824     15CA  1303               	bcf	3,6	;RP1=0, select bank1
  5825     15CB  0821               	movf	(srand@x+1)^(0+128),w
  5826     15CC  1283               	bcf	3,5	;RP0=0, select bank0
  5827     15CD  1303               	bcf	3,6	;RP1=0, select bank0
  5828     15CE  00D1               	movwf	_randx+1
  5829     15CF  01D2               	clrf	_randx+2
  5830     15D0  01D3               	clrf	_randx+3
  5831     15D1                     l907:
  5832     15D1  0008               	return
  5833     15D2                     __end_of_srand:
  5834                           
  5835                           	psect	text19
  5836     0B6C                     __ptext19:	
  5837 ;; *************** function _rand *****************
  5838 ;; Defined at:
  5839 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  2   13[BANK1 ] int 
  5846 ;; Registers used:
  5847 ;;		wreg, status,2, status,0, pclath, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5853 ;;      Params:         0       0       2       0       0
  5854 ;;      Locals:         0       0       0       0       0
  5855 ;;      Temps:          0       0       5       0       0
  5856 ;;      Totals:         0       0       7       0       0
  5857 ;;Total ram usage:        7 bytes
  5858 ;; Hardware stack levels used: 1
  5859 ;; Hardware stack levels required when called: 5
  5860 ;; This function calls:
  5861 ;;		___lmul
  5862 ;; This function is called by:
  5863 ;;		_read_NumPad
  5864 ;;		_UART_TxString
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868     0B6C                     _rand:	
  5869                           ;psect for function _rand
  5870                           
  5871     0B6C                     l3310:	
  5872                           ;incstack = 0
  5873                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  5874                           
  5875     0B6C  1283               	bcf	3,5	;RP0=0, select bank0
  5876     0B6D  1303               	bcf	3,6	;RP1=0, select bank0
  5877     0B6E  0853               	movf	_randx+3,w
  5878     0B6F  1683               	bsf	3,5	;RP0=1, select bank1
  5879     0B70  1303               	bcf	3,6	;RP1=0, select bank1
  5880     0B71  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  5881     0B72  1283               	bcf	3,5	;RP0=0, select bank0
  5882     0B73  1303               	bcf	3,6	;RP1=0, select bank0
  5883     0B74  0852               	movf	_randx+2,w
  5884     0B75  1683               	bsf	3,5	;RP0=1, select bank1
  5885     0B76  1303               	bcf	3,6	;RP1=0, select bank1
  5886     0B77  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  5887     0B78  1283               	bcf	3,5	;RP0=0, select bank0
  5888     0B79  1303               	bcf	3,6	;RP1=0, select bank0
  5889     0B7A  0851               	movf	_randx+1,w
  5890     0B7B  1683               	bsf	3,5	;RP0=1, select bank1
  5891     0B7C  1303               	bcf	3,6	;RP1=0, select bank1
  5892     0B7D  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  5893     0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  5894     0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  5895     0B80  0850               	movf	_randx,w
  5896     0B81  1683               	bsf	3,5	;RP0=1, select bank1
  5897     0B82  1303               	bcf	3,6	;RP1=0, select bank1
  5898     0B83  00A0               	movwf	___lmul@multiplier^(0+128)
  5899     0B84  3041               	movlw	65
  5900     0B85  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  5901     0B86  30C6               	movlw	198
  5902     0B87  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  5903     0B88  304E               	movlw	78
  5904     0B89  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  5905     0B8A  306D               	movlw	109
  5906     0B8B  00A4               	movwf	___lmul@multiplicand^(0+128)
  5907     0B8C  120A  158A  203E  120A  158A  	fcall	___lmul
  5908     0B91  1683               	bsf	3,5	;RP0=1, select bank1
  5909     0B92  1303               	bcf	3,6	;RP1=0, select bank1
  5910     0B93  0823               	movf	(?___lmul+3)^(0+128),w
  5911     0B94  1283               	bcf	3,5	;RP0=0, select bank0
  5912     0B95  1303               	bcf	3,6	;RP1=0, select bank0
  5913     0B96  00D3               	movwf	_randx+3
  5914     0B97  1683               	bsf	3,5	;RP0=1, select bank1
  5915     0B98  1303               	bcf	3,6	;RP1=0, select bank1
  5916     0B99  0822               	movf	(?___lmul+2)^(0+128),w
  5917     0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  5918     0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  5919     0B9C  00D2               	movwf	_randx+2
  5920     0B9D  1683               	bsf	3,5	;RP0=1, select bank1
  5921     0B9E  1303               	bcf	3,6	;RP1=0, select bank1
  5922     0B9F  0821               	movf	(?___lmul+1)^(0+128),w
  5923     0BA0  1283               	bcf	3,5	;RP0=0, select bank0
  5924     0BA1  1303               	bcf	3,6	;RP1=0, select bank0
  5925     0BA2  00D1               	movwf	_randx+1
  5926     0BA3  1683               	bsf	3,5	;RP0=1, select bank1
  5927     0BA4  1303               	bcf	3,6	;RP1=0, select bank1
  5928     0BA5  0820               	movf	?___lmul^(0+128),w
  5929     0BA6  1283               	bcf	3,5	;RP0=0, select bank0
  5930     0BA7  1303               	bcf	3,6	;RP1=0, select bank0
  5931     0BA8  00D0               	movwf	_randx
  5932     0BA9                     l3312:
  5933     0BA9  3039               	movlw	57
  5934     0BAA  07D0               	addwf	_randx,f
  5935     0BAB  3030               	movlw	48
  5936     0BAC  1803               	skipnc
  5937     0BAD  3031               	movlw	49
  5938     0BAE  07D1               	addwf	_randx+1,f
  5939     0BAF  3000               	movlw	0
  5940     0BB0  1803               	skipnc
  5941     0BB1  3001               	movlw	1
  5942     0BB2  07D2               	addwf	_randx+2,f
  5943     0BB3  3000               	movlw	0
  5944     0BB4  1803               	skipnc
  5945     0BB5  3001               	movlw	1
  5946     0BB6  07D3               	addwf	_randx+3,f
  5947     0BB7                     l3314:
  5948     0BB7  0850               	movf	_randx,w
  5949     0BB8  1683               	bsf	3,5	;RP0=1, select bank1
  5950     0BB9  1303               	bcf	3,6	;RP1=0, select bank1
  5951     0BBA  00AF               	movwf	??_rand^(0+128)
  5952     0BBB  1283               	bcf	3,5	;RP0=0, select bank0
  5953     0BBC  1303               	bcf	3,6	;RP1=0, select bank0
  5954     0BBD  0851               	movf	_randx+1,w
  5955     0BBE  1683               	bsf	3,5	;RP0=1, select bank1
  5956     0BBF  1303               	bcf	3,6	;RP1=0, select bank1
  5957     0BC0  00B0               	movwf	(??_rand^(0+128)+1)
  5958     0BC1  1283               	bcf	3,5	;RP0=0, select bank0
  5959     0BC2  1303               	bcf	3,6	;RP1=0, select bank0
  5960     0BC3  0852               	movf	_randx+2,w
  5961     0BC4  1683               	bsf	3,5	;RP0=1, select bank1
  5962     0BC5  1303               	bcf	3,6	;RP1=0, select bank1
  5963     0BC6  00B1               	movwf	(??_rand^(0+128)+2)
  5964     0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  5965     0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  5966     0BC9  0853               	movf	_randx+3,w
  5967     0BCA  1683               	bsf	3,5	;RP0=1, select bank1
  5968     0BCB  1303               	bcf	3,6	;RP1=0, select bank1
  5969     0BCC  00B2               	movwf	(??_rand^(0+128)+3)
  5970     0BCD  3010               	movlw	16
  5971     0BCE  00B3               	movwf	(??_rand+4)^(0+128)
  5972     0BCF                     u3385:
  5973     0BCF  0D32               	rlf	(??_rand^(0+128)+3),w
  5974     0BD0  0CB2               	rrf	(??_rand^(0+128)+3),f
  5975     0BD1  0CB1               	rrf	(??_rand^(0+128)+2),f
  5976     0BD2  0CB0               	rrf	(??_rand^(0+128)+1),f
  5977     0BD3  0CAF               	rrf	??_rand^(0+128),f
  5978     0BD4                     u3380:
  5979     0BD4  0BB3               	decfsz	(??_rand+4)^(0+128),f
  5980     0BD5  2BCF               	goto	u3385
  5981     0BD6  30FF               	movlw	255
  5982     0BD7  052F               	andwf	??_rand^(0+128),w
  5983     0BD8  00AD               	movwf	?_rand^(0+128)
  5984     0BD9  307F               	movlw	127
  5985     0BDA  0530               	andwf	(??_rand+1)^(0+128),w
  5986     0BDB  00AE               	movwf	(?_rand+1)^(0+128)
  5987     0BDC                     l910:
  5988     0BDC  0008               	return
  5989     0BDD                     __end_of_rand:
  5990                           
  5991                           	psect	text20
  5992     083E                     __ptext20:	
  5993 ;; *************** function ___lmul *****************
  5994 ;; Defined at:
  5995 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  multiplier      4    0[BANK1 ] unsigned long 
  5998 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  product         4    9[BANK1 ] unsigned long 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  4    0[BANK1 ] unsigned long 
  6003 ;; Registers used:
  6004 ;;		wreg, status,2, status,0
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6010 ;;      Params:         0       0       8       0       0
  6011 ;;      Locals:         0       0       4       0       0
  6012 ;;      Temps:          0       0       1       0       0
  6013 ;;      Totals:         0       0      13       0       0
  6014 ;;Total ram usage:       13 bytes
  6015 ;; Hardware stack levels used: 1
  6016 ;; Hardware stack levels required when called: 4
  6017 ;; This function calls:
  6018 ;;		Nothing
  6019 ;; This function is called by:
  6020 ;;		_ConvertToString
  6021 ;;		_rand
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025     083E                     ___lmul:	
  6026                           ;psect for function ___lmul
  6027                           
  6028     083E                     l3038:	
  6029                           ;incstack = 0
  6030                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6031                           
  6032     083E  3000               	movlw	0
  6033     083F  1683               	bsf	3,5	;RP0=1, select bank1
  6034     0840  1303               	bcf	3,6	;RP1=0, select bank1
  6035     0841  00AC               	movwf	(___lmul@product+3)^(0+128)
  6036     0842  3000               	movlw	0
  6037     0843  00AB               	movwf	(___lmul@product+2)^(0+128)
  6038     0844  3000               	movlw	0
  6039     0845  00AA               	movwf	(___lmul@product+1)^(0+128)
  6040     0846  3000               	movlw	0
  6041     0847  00A9               	movwf	___lmul@product^(0+128)
  6042     0848                     l3040:
  6043     0848  1C20               	btfss	___lmul@multiplier^(0+128),0
  6044     0849  284B               	goto	u2931
  6045     084A  284C               	goto	u2930
  6046     084B                     u2931:
  6047     084B  2863               	goto	l3044
  6048     084C                     u2930:
  6049     084C                     l3042:
  6050     084C  0824               	movf	___lmul@multiplicand^(0+128),w
  6051     084D  07A9               	addwf	___lmul@product^(0+128),f
  6052     084E  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  6053     084F  1103               	clrz
  6054     0850  1803               	skipnc
  6055     0851  3E01               	addlw	1
  6056     0852  1903               	skipnz
  6057     0853  2855               	goto	u2941
  6058     0854  07AA               	addwf	(___lmul@product+1)^(0+128),f
  6059     0855                     u2941:
  6060     0855  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  6061     0856  1103               	clrz
  6062     0857  1803               	skipnc
  6063     0858  3E01               	addlw	1
  6064     0859  1903               	skipnz
  6065     085A  285C               	goto	u2942
  6066     085B  07AB               	addwf	(___lmul@product+2)^(0+128),f
  6067     085C                     u2942:
  6068     085C  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  6069     085D  1103               	clrz
  6070     085E  1803               	skipnc
  6071     085F  3E01               	addlw	1
  6072     0860  1903               	skipnz
  6073     0861  2863               	goto	u2943
  6074     0862  07AC               	addwf	(___lmul@product+3)^(0+128),f
  6075     0863                     u2943:
  6076     0863                     l3044:
  6077     0863  3001               	movlw	1
  6078     0864  00A8               	movwf	??___lmul^(0+128)
  6079     0865                     u2955:
  6080     0865  1003               	clrc
  6081     0866  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  6082     0867  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  6083     0868  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  6084     0869  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  6085     086A  0BA8               	decfsz	??___lmul^(0+128),f
  6086     086B  2865               	goto	u2955
  6087     086C                     l3046:
  6088     086C  3001               	movlw	1
  6089     086D                     u2965:
  6090     086D  1003               	clrc
  6091     086E  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  6092     086F  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  6093     0870  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  6094     0871  0CA0               	rrf	___lmul@multiplier^(0+128),f
  6095     0872  3EFF               	addlw	-1
  6096     0873  1D03               	skipz
  6097     0874  286D               	goto	u2965
  6098     0875  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  6099     0876  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  6100     0877  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  6101     0878  0420               	iorwf	___lmul@multiplier^(0+128),w
  6102     0879  1D03               	skipz
  6103     087A  287C               	goto	u2971
  6104     087B  287D               	goto	u2970
  6105     087C                     u2971:
  6106     087C  2848               	goto	l3040
  6107     087D                     u2970:
  6108     087D                     l3048:
  6109     087D  082C               	movf	(___lmul@product+3)^(0+128),w
  6110     087E  00A3               	movwf	(?___lmul+3)^(0+128)
  6111     087F  082B               	movf	(___lmul@product+2)^(0+128),w
  6112     0880  00A2               	movwf	(?___lmul+2)^(0+128)
  6113     0881  082A               	movf	(___lmul@product+1)^(0+128),w
  6114     0882  00A1               	movwf	(?___lmul+1)^(0+128)
  6115     0883  0829               	movf	___lmul@product^(0+128),w
  6116     0884  00A0               	movwf	?___lmul^(0+128)
  6117     0885                     l468:
  6118     0885  0008               	return
  6119     0886                     __end_of___lmul:
  6120                           
  6121                           	psect	text21
  6122     0817                     __ptext21:	
  6123 ;; *************** function ___wmul *****************
  6124 ;; Defined at:
  6125 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  multiplier      2   27[BANK1 ] unsigned int 
  6128 ;;  multiplicand    2   29[BANK1 ] unsigned int 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  product         2   31[BANK1 ] unsigned int 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  2   27[BANK1 ] unsigned int 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6140 ;;      Params:         0       0       4       0       0
  6141 ;;      Locals:         0       0       2       0       0
  6142 ;;      Temps:          0       0       0       0       0
  6143 ;;      Totals:         0       0       6       0       0
  6144 ;;Total ram usage:        6 bytes
  6145 ;; Hardware stack levels used: 1
  6146 ;; Hardware stack levels required when called: 4
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_pow
  6151 ;;		_read_NumPad
  6152 ;;		_UART_TxString
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156     0817                     ___wmul:	
  6157                           ;psect for function ___wmul
  6158                           
  6159     0817                     l2980:	
  6160                           ;incstack = 0
  6161                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6162                           
  6163     0817  1683               	bsf	3,5	;RP0=1, select bank1
  6164     0818  1303               	bcf	3,6	;RP1=0, select bank1
  6165     0819  01BF               	clrf	___wmul@product^(0+128)
  6166     081A  01C0               	clrf	(___wmul@product+1)^(0+128)
  6167     081B                     l2982:
  6168     081B  1C3B               	btfss	___wmul@multiplier^(0+128),0
  6169     081C  281E               	goto	u2861
  6170     081D  281F               	goto	u2860
  6171     081E                     u2861:
  6172     081E  2825               	goto	l454
  6173     081F                     u2860:
  6174     081F                     l2984:
  6175     081F  083D               	movf	___wmul@multiplicand^(0+128),w
  6176     0820  07BF               	addwf	___wmul@product^(0+128),f
  6177     0821  1803               	skipnc
  6178     0822  0AC0               	incf	(___wmul@product+1)^(0+128),f
  6179     0823  083E               	movf	(___wmul@multiplicand+1)^(0+128),w
  6180     0824  07C0               	addwf	(___wmul@product+1)^(0+128),f
  6181     0825                     l454:
  6182     0825  3001               	movlw	1
  6183     0826                     u2875:
  6184     0826  1003               	clrc
  6185     0827  0DBD               	rlf	___wmul@multiplicand^(0+128),f
  6186     0828  0DBE               	rlf	(___wmul@multiplicand+1)^(0+128),f
  6187     0829  3EFF               	addlw	-1
  6188     082A  1D03               	skipz
  6189     082B  2826               	goto	u2875
  6190     082C                     l2986:
  6191     082C  3001               	movlw	1
  6192     082D                     u2885:
  6193     082D  1003               	clrc
  6194     082E  0CBC               	rrf	(___wmul@multiplier+1)^(0+128),f
  6195     082F  0CBB               	rrf	___wmul@multiplier^(0+128),f
  6196     0830  3EFF               	addlw	-1
  6197     0831  1D03               	skipz
  6198     0832  282D               	goto	u2885
  6199     0833                     l2988:
  6200     0833  083B               	movf	___wmul@multiplier^(0+128),w
  6201     0834  043C               	iorwf	(___wmul@multiplier+1)^(0+128),w
  6202     0835  1D03               	btfss	3,2
  6203     0836  2838               	goto	u2891
  6204     0837  2839               	goto	u2890
  6205     0838                     u2891:
  6206     0838  281B               	goto	l2982
  6207     0839                     u2890:
  6208     0839                     l2990:
  6209     0839  0840               	movf	(___wmul@product+1)^(0+128),w
  6210     083A  00BC               	movwf	(?___wmul+1)^(0+128)
  6211     083B  083F               	movf	___wmul@product^(0+128),w
  6212     083C  00BB               	movwf	?___wmul^(0+128)
  6213     083D                     l456:
  6214     083D  0008               	return
  6215     083E                     __end_of___wmul:
  6216                           
  6217                           	psect	text22
  6218     0981                     __ptext22:	
  6219 ;; *************** function ___awmod *****************
  6220 ;; Defined at:
  6221 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  divisor         2   20[BANK1 ] int 
  6224 ;;  dividend        2   22[BANK1 ] int 
  6225 ;; Auto vars:     Size  Location     Type
  6226 ;;  sign            1   26[BANK1 ] unsigned char 
  6227 ;;  counter         1   25[BANK1 ] unsigned char 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  2   20[BANK1 ] int 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6237 ;;      Params:         0       0       4       0       0
  6238 ;;      Locals:         0       0       2       0       0
  6239 ;;      Temps:          0       0       1       0       0
  6240 ;;      Totals:         0       0       7       0       0
  6241 ;;Total ram usage:        7 bytes
  6242 ;; Hardware stack levels used: 1
  6243 ;; Hardware stack levels required when called: 4
  6244 ;; This function calls:
  6245 ;;		Nothing
  6246 ;; This function is called by:
  6247 ;;		_read_NumPad
  6248 ;;		_UART_TxString
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252     0981                     ___awmod:	
  6253                           ;psect for function ___awmod
  6254                           
  6255     0981                     l3324:	
  6256                           ;incstack = 0
  6257                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6258                           
  6259     0981  1683               	bsf	3,5	;RP0=1, select bank1
  6260     0982  1303               	bcf	3,6	;RP1=0, select bank1
  6261     0983  01BA               	clrf	___awmod@sign^(0+128)
  6262     0984                     l3326:
  6263     0984  1FB7               	btfss	(___awmod@dividend+1)^(0+128),7
  6264     0985  2987               	goto	u3401
  6265     0986  2988               	goto	u3400
  6266     0987                     u3401:
  6267     0987  298F               	goto	l3332
  6268     0988                     u3400:
  6269     0988                     l3328:
  6270     0988  09B6               	comf	___awmod@dividend^(0+128),f
  6271     0989  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6272     098A  0AB6               	incf	___awmod@dividend^(0+128),f
  6273     098B  1903               	skipnz
  6274     098C  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6275     098D                     l3330:
  6276     098D  01BA               	clrf	___awmod@sign^(0+128)
  6277     098E  0ABA               	incf	___awmod@sign^(0+128),f
  6278     098F                     l3332:
  6279     098F  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6280     0990  2992               	goto	u3411
  6281     0991  2993               	goto	u3410
  6282     0992                     u3411:
  6283     0992  2998               	goto	l3336
  6284     0993                     u3410:
  6285     0993                     l3334:
  6286     0993  09B4               	comf	___awmod@divisor^(0+128),f
  6287     0994  09B5               	comf	(___awmod@divisor+1)^(0+128),f
  6288     0995  0AB4               	incf	___awmod@divisor^(0+128),f
  6289     0996  1903               	skipnz
  6290     0997  0AB5               	incf	(___awmod@divisor+1)^(0+128),f
  6291     0998                     l3336:
  6292     0998  0834               	movf	___awmod@divisor^(0+128),w
  6293     0999  0435               	iorwf	(___awmod@divisor+1)^(0+128),w
  6294     099A  1903               	btfsc	3,2
  6295     099B  299D               	goto	u3421
  6296     099C  299E               	goto	u3420
  6297     099D                     u3421:
  6298     099D  29CD               	goto	l3354
  6299     099E                     u3420:
  6300     099E                     l3338:
  6301     099E  01B9               	clrf	___awmod@counter^(0+128)
  6302     099F  0AB9               	incf	___awmod@counter^(0+128),f
  6303     09A0  29AC               	goto	l3344
  6304     09A1                     l3340:
  6305     09A1  3001               	movlw	1
  6306     09A2                     u3435:
  6307     09A2  1003               	clrc
  6308     09A3  0DB4               	rlf	___awmod@divisor^(0+128),f
  6309     09A4  0DB5               	rlf	(___awmod@divisor+1)^(0+128),f
  6310     09A5  3EFF               	addlw	-1
  6311     09A6  1D03               	skipz
  6312     09A7  29A2               	goto	u3435
  6313     09A8                     l3342:
  6314     09A8  3001               	movlw	1
  6315     09A9  00B8               	movwf	??___awmod^(0+128)
  6316     09AA  0838               	movf	??___awmod^(0+128),w
  6317     09AB  07B9               	addwf	___awmod@counter^(0+128),f
  6318     09AC                     l3344:
  6319     09AC  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6320     09AD  29AF               	goto	u3441
  6321     09AE  29B0               	goto	u3440
  6322     09AF                     u3441:
  6323     09AF  29A1               	goto	l3340
  6324     09B0                     u3440:
  6325     09B0                     l3346:
  6326     09B0  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6327     09B1  0237               	subwf	(___awmod@dividend+1)^(0+128),w
  6328     09B2  1D03               	skipz
  6329     09B3  29B6               	goto	u3455
  6330     09B4  0834               	movf	___awmod@divisor^(0+128),w
  6331     09B5  0236               	subwf	___awmod@dividend^(0+128),w
  6332     09B6                     u3455:
  6333     09B6  1C03               	skipc
  6334     09B7  29B9               	goto	u3451
  6335     09B8  29BA               	goto	u3450
  6336     09B9                     u3451:
  6337     09B9  29C0               	goto	l3350
  6338     09BA                     u3450:
  6339     09BA                     l3348:
  6340     09BA  0834               	movf	___awmod@divisor^(0+128),w
  6341     09BB  02B6               	subwf	___awmod@dividend^(0+128),f
  6342     09BC  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6343     09BD  1C03               	skipc
  6344     09BE  03B7               	decf	(___awmod@dividend+1)^(0+128),f
  6345     09BF  02B7               	subwf	(___awmod@dividend+1)^(0+128),f
  6346     09C0                     l3350:
  6347     09C0  3001               	movlw	1
  6348     09C1                     u3465:
  6349     09C1  1003               	clrc
  6350     09C2  0CB5               	rrf	(___awmod@divisor+1)^(0+128),f
  6351     09C3  0CB4               	rrf	___awmod@divisor^(0+128),f
  6352     09C4  3EFF               	addlw	-1
  6353     09C5  1D03               	skipz
  6354     09C6  29C1               	goto	u3465
  6355     09C7                     l3352:
  6356     09C7  3001               	movlw	1
  6357     09C8  02B9               	subwf	___awmod@counter^(0+128),f
  6358     09C9  1D03               	btfss	3,2
  6359     09CA  29CC               	goto	u3471
  6360     09CB  29CD               	goto	u3470
  6361     09CC                     u3471:
  6362     09CC  29B0               	goto	l3346
  6363     09CD                     u3470:
  6364     09CD                     l3354:
  6365     09CD  083A               	movf	___awmod@sign^(0+128),w
  6366     09CE  1903               	btfsc	3,2
  6367     09CF  29D1               	goto	u3481
  6368     09D0  29D2               	goto	u3480
  6369     09D1                     u3481:
  6370     09D1  29D7               	goto	l3358
  6371     09D2                     u3480:
  6372     09D2                     l3356:
  6373     09D2  09B6               	comf	___awmod@dividend^(0+128),f
  6374     09D3  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6375     09D4  0AB6               	incf	___awmod@dividend^(0+128),f
  6376     09D5  1903               	skipnz
  6377     09D6  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6378     09D7                     l3358:
  6379     09D7  0837               	movf	(___awmod@dividend+1)^(0+128),w
  6380     09D8  00B5               	movwf	(?___awmod+1)^(0+128)
  6381     09D9  0836               	movf	___awmod@dividend^(0+128),w
  6382     09DA  00B4               	movwf	?___awmod^(0+128)
  6383     09DB                     l620:
  6384     09DB  0008               	return
  6385     09DC                     __end_of___awmod:
  6386                           
  6387                           	psect	text23
  6388     15D2                     __ptext23:	
  6389 ;; *************** function _UART_TxChar *****************
  6390 ;; Defined at:
  6391 ;;		line 790 in file "main.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;  ch              1    wreg     unsigned char 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;  ch              1    1[BANK1 ] unsigned char 
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      void 
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6405 ;;      Params:         0       0       0       0       0
  6406 ;;      Locals:         0       0       1       0       0
  6407 ;;      Temps:          0       0       1       0       0
  6408 ;;      Totals:         0       0       2       0       0
  6409 ;;Total ram usage:        2 bytes
  6410 ;; Hardware stack levels used: 1
  6411 ;; Hardware stack levels required when called: 4
  6412 ;; This function calls:
  6413 ;;		Nothing
  6414 ;; This function is called by:
  6415 ;;		_UART_TxString
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419     15D2                     _UART_TxChar:	
  6420                           ;psect for function _UART_TxChar
  6421                           
  6422                           
  6423                           ;incstack = 0
  6424                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  6425                           ;UART_TxChar@ch stored from wreg
  6426     15D2  1683               	bsf	3,5	;RP0=1, select bank1
  6427     15D3  1303               	bcf	3,6	;RP1=0, select bank1
  6428     15D4  00A1               	movwf	UART_TxChar@ch^(0+128)
  6429     15D5                     l3318:
  6430     15D5                     l309:	
  6431                           ;main.c: 790: void UART_TxChar(char ch);main.c: 791: {;main.c: 793:     while(!(PIR1 & 0
      +                          x10));
  6432                           
  6433     15D5  1283               	bcf	3,5	;RP0=0, select bank0
  6434     15D6  1E0C               	btfss	12,4	;volatile
  6435     15D7  2DD9               	goto	u3391
  6436     15D8  2DDA               	goto	u3390
  6437     15D9                     u3391:
  6438     15D9  2DD5               	goto	l309
  6439     15DA                     u3390:
  6440     15DA                     l3320:
  6441                           
  6442                           ;main.c: 795:     PIR1 &= ~0x10;
  6443     15DA  30EF               	movlw	239
  6444     15DB  1683               	bsf	3,5	;RP0=1, select bank1
  6445     15DC  1303               	bcf	3,6	;RP1=0, select bank1
  6446     15DD  00A0               	movwf	??_UART_TxChar^(0+128)
  6447     15DE  0820               	movf	??_UART_TxChar^(0+128),w
  6448     15DF  1283               	bcf	3,5	;RP0=0, select bank0
  6449     15E0  1303               	bcf	3,6	;RP1=0, select bank0
  6450     15E1  058C               	andwf	12,f	;volatile
  6451     15E2                     l3322:
  6452                           
  6453                           ;main.c: 797:     TXREG = ch;
  6454     15E2  1683               	bsf	3,5	;RP0=1, select bank1
  6455     15E3  1303               	bcf	3,6	;RP1=0, select bank1
  6456     15E4  0821               	movf	UART_TxChar@ch^(0+128),w
  6457     15E5  1283               	bcf	3,5	;RP0=0, select bank0
  6458     15E6  1303               	bcf	3,6	;RP1=0, select bank0
  6459     15E7  0099               	movwf	25	;volatile
  6460     15E8                     l312:
  6461     15E8  0008               	return
  6462     15E9                     __end_of_UART_TxChar:
  6463                           
  6464                           	psect	text24
  6465     062B                     __ptext24:	
  6466 ;; *************** function _SplitPacket *****************
  6467 ;; Defined at:
  6468 ;;		line 518 in file "main.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  pkt             1    wreg     PTR unsigned char 
  6471 ;;		 -> dato(50), 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  pkt             1   24[BANK1 ] PTR unsigned char 
  6474 ;;		 -> dato(50), 
  6475 ;;  i               2   25[BANK1 ] int 
  6476 ;;  part            5   15[BANK1 ] unsigned char [5]
  6477 ;;  i_part          2   22[BANK1 ] int 
  6478 ;;  section         2   20[BANK1 ] int 
  6479 ;;  len             2   13[BANK1 ] int 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      void 
  6482 ;; Registers used:
  6483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6489 ;;      Params:         0       0       0       0       0
  6490 ;;      Locals:         0       0      14       0       0
  6491 ;;      Temps:          0       0       3       0       0
  6492 ;;      Totals:         0       0      17       0       0
  6493 ;;Total ram usage:       17 bytes
  6494 ;; Hardware stack levels used: 1
  6495 ;; Hardware stack levels required when called: 5
  6496 ;; This function calls:
  6497 ;;		_Length
  6498 ;;		_strcopy
  6499 ;; This function is called by:
  6500 ;;		_main
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504     062B                     _SplitPacket:	
  6505                           ;psect for function _SplitPacket
  6506                           
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _SplitPacket: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6510                           ;SplitPacket@pkt stored from wreg
  6511     062B  1683               	bsf	3,5	;RP0=1, select bank1
  6512     062C  1303               	bcf	3,6	;RP1=0, select bank1
  6513     062D  00B8               	movwf	SplitPacket@pkt^(0+128)
  6514     062E                     l3530:
  6515                           
  6516                           ;main.c: 518: void SplitPacket(char* pkt);main.c: 519: {;main.c: 521:     char part[5];;
      +                          main.c: 524:     int i_part = 0, section = 0, len = Length(pkt);
  6517     062E  01B6               	clrf	SplitPacket@i_part^(0+128)
  6518     062F  01B7               	clrf	(SplitPacket@i_part+1)^(0+128)
  6519     0630  01B4               	clrf	SplitPacket@section^(0+128)
  6520     0631  01B5               	clrf	(SplitPacket@section+1)^(0+128)
  6521     0632                     l3532:
  6522     0632  0838               	movf	SplitPacket@pkt^(0+128),w
  6523     0633  00A0               	movwf	Length@str^(0+128)
  6524     0634  3001               	movlw	1
  6525     0635  00A1               	movwf	(Length@str+1)^(0+128)
  6526     0636  120A  118A  26D0  120A  118A  	fcall	_Length
  6527     063B  1683               	bsf	3,5	;RP0=1, select bank1
  6528     063C  1303               	bcf	3,6	;RP1=0, select bank1
  6529     063D  0821               	movf	(?_Length+1)^(0+128),w
  6530     063E  00AE               	movwf	(SplitPacket@len+1)^(0+128)
  6531     063F  0820               	movf	?_Length^(0+128),w
  6532     0640  00AD               	movwf	SplitPacket@len^(0+128)
  6533     0641                     l3534:
  6534                           
  6535                           ;main.c: 527:     for(int i = 0; i < len + 1; i++)
  6536     0641  01B9               	clrf	SplitPacket@i^(0+128)
  6537     0642  01BA               	clrf	(SplitPacket@i+1)^(0+128)
  6538     0643  2EB9               	goto	l3564
  6539     0644                     l3536:
  6540                           
  6541                           ;main.c: 528:     {;main.c: 530:         if(pkt[i] != '/' && pkt[i] != '\0')
  6542     0644  1683               	bsf	3,5	;RP0=1, select bank1
  6543     0645  1303               	bcf	3,6	;RP1=0, select bank1
  6544     0646  0839               	movf	SplitPacket@i^(0+128),w
  6545     0647  0738               	addwf	SplitPacket@pkt^(0+128),w
  6546     0648  00AA               	movwf	??_SplitPacket^(0+128)
  6547     0649  082A               	movf	??_SplitPacket^(0+128),w
  6548     064A  0084               	movwf	4
  6549     064B  302F               	movlw	47
  6550     064C  1783               	bsf	3,7	;select IRP bank2
  6551     064D  0600               	xorwf	0,w
  6552     064E  1903               	btfsc	3,2
  6553     064F  2E51               	goto	u3771
  6554     0650  2E52               	goto	u3770
  6555     0651                     u3771:
  6556     0651  2E96               	goto	l3556
  6557     0652                     u3770:
  6558     0652                     l3538:
  6559     0652  0839               	movf	SplitPacket@i^(0+128),w
  6560     0653  0738               	addwf	SplitPacket@pkt^(0+128),w
  6561     0654  00AA               	movwf	??_SplitPacket^(0+128)
  6562     0655  082A               	movf	??_SplitPacket^(0+128),w
  6563     0656  0084               	movwf	4
  6564     0657  0800               	movf	0,w
  6565     0658  1903               	btfsc	3,2
  6566     0659  2E5B               	goto	u3781
  6567     065A  2E5C               	goto	u3780
  6568     065B                     u3781:
  6569     065B  2E96               	goto	l3556
  6570     065C                     u3780:
  6571     065C                     l3540:
  6572                           
  6573                           ;main.c: 531:         {;main.c: 533:             part[i_part] = pkt[i];
  6574     065C  0839               	movf	SplitPacket@i^(0+128),w
  6575     065D  0738               	addwf	SplitPacket@pkt^(0+128),w
  6576     065E  00AA               	movwf	??_SplitPacket^(0+128)
  6577     065F  082A               	movf	??_SplitPacket^(0+128),w
  6578     0660  0084               	movwf	4
  6579     0661  0800               	movf	0,w
  6580     0662  00AB               	movwf	(??_SplitPacket+1)^(0+128)
  6581     0663  0836               	movf	SplitPacket@i_part^(0+128),w
  6582     0664  3EAF               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6583     0665  0084               	movwf	4
  6584     0666  082B               	movf	(??_SplitPacket+1)^(0+128),w
  6585     0667  1383               	bcf	3,7	;select IRP bank1
  6586     0668  0080               	movwf	0
  6587     0669                     l3542:
  6588                           
  6589                           ;main.c: 534:             i_part++;
  6590     0669  3001               	movlw	1
  6591     066A  07B6               	addwf	SplitPacket@i_part^(0+128),f
  6592     066B  1803               	skipnc
  6593     066C  0AB7               	incf	(SplitPacket@i_part+1)^(0+128),f
  6594     066D  3000               	movlw	0
  6595     066E  07B7               	addwf	(SplitPacket@i_part+1)^(0+128),f
  6596     066F                     l3544:
  6597                           
  6598                           ;main.c: 535:             part[i_part] = '\0';
  6599     066F  0836               	movf	SplitPacket@i_part^(0+128),w
  6600     0670  3EAF               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6601     0671  0084               	movwf	4
  6602     0672  0180               	clrf	0
  6603                           
  6604                           ;main.c: 536:         }
  6605     0673  2EB3               	goto	l3562
  6606     0674                     l3546:
  6607                           
  6608                           ;main.c: 544:                     source = part[0];
  6609     0674  082F               	movf	SplitPacket@part^(0+128),w
  6610     0675  1683               	bsf	3,5	;RP0=1, select bank3
  6611     0676  1703               	bsf	3,6	;RP1=1, select bank3
  6612     0677  009F               	movwf	_source^(0+384)
  6613                           
  6614                           ;main.c: 545:                     break;
  6615     0678  2EA9               	goto	l3558
  6616     0679                     l3548:
  6617                           
  6618                           ;main.c: 547:                     strcopy(id_dest, part);
  6619     0679  30C2               	movlw	(low (_id_dest| (0+256)))& (0+255)
  6620     067A  00A0               	movwf	strcopy@dest^(0+128)
  6621     067B  3001               	movlw	1
  6622     067C  00A1               	movwf	(strcopy@dest+1)^(0+128)
  6623     067D  30AF               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6624     067E  00A2               	movwf	strcopy@source^(0+128)
  6625     067F  160A  118A  27B9  120A  118A  	fcall	_strcopy
  6626                           
  6627                           ;main.c: 548:                     break;
  6628     0684  2EA9               	goto	l3558
  6629     0685                     l3550:
  6630                           
  6631                           ;main.c: 550:                     type = part[0];
  6632     0685  082F               	movf	SplitPacket@part^(0+128),w
  6633     0686  1683               	bsf	3,5	;RP0=1, select bank3
  6634     0687  1703               	bsf	3,6	;RP1=1, select bank3
  6635     0688  009E               	movwf	_type^(0+384)
  6636                           
  6637                           ;main.c: 551:                     break;
  6638     0689  2EA9               	goto	l3558
  6639     068A                     l3552:
  6640                           
  6641                           ;main.c: 553:                     strcopy(datoSeriale, part);
  6642     068A  303F               	movlw	(low (_datoSeriale| 0))& (0+255)
  6643     068B  00A0               	movwf	strcopy@dest^(0+128)
  6644     068C  3000               	movlw	0
  6645     068D  00A1               	movwf	(strcopy@dest+1)^(0+128)
  6646     068E  30AF               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6647     068F  00A2               	movwf	strcopy@source^(0+128)
  6648     0690  160A  118A  27B9  120A  118A  	fcall	_strcopy
  6649                           
  6650                           ;main.c: 554:                     break;
  6651     0695  2EA9               	goto	l3558
  6652     0696                     l3556:
  6653                           
  6654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6655                           ; Switch size 1, requested type "simple"
  6656                           ; Number of cases is 1, Range of values is 0 to 0
  6657                           ; switch strategies available:
  6658                           ; Name         Instructions Cycles
  6659                           ; simple_byte            4     3 (average)
  6660                           ; direct_byte           11     8 (fixed)
  6661                           ; jumptable            260     6 (fixed)
  6662                           ;	Chosen strategy is simple_byte
  6663     0696  0835               	movf	(SplitPacket@section+1)^(0+128),w
  6664     0697  3A00               	xorlw	0	; case 0
  6665     0698  1903               	skipnz
  6666     0699  2E9B               	goto	l3852
  6667     069A  2EA9               	goto	l3558
  6668     069B                     l3852:
  6669                           
  6670                           ; Switch size 1, requested type "simple"
  6671                           ; Number of cases is 4, Range of values is 0 to 3
  6672                           ; switch strategies available:
  6673                           ; Name         Instructions Cycles
  6674                           ; simple_byte           13     7 (average)
  6675                           ; direct_byte           20     8 (fixed)
  6676                           ; jumptable            260     6 (fixed)
  6677                           ;	Chosen strategy is simple_byte
  6678     069B  0834               	movf	SplitPacket@section^(0+128),w
  6679     069C  3A00               	xorlw	0	; case 0
  6680     069D  1903               	skipnz
  6681     069E  2E74               	goto	l3546
  6682     069F  3A01               	xorlw	1	; case 1
  6683     06A0  1903               	skipnz
  6684     06A1  2E79               	goto	l3548
  6685     06A2  3A03               	xorlw	3	; case 2
  6686     06A3  1903               	skipnz
  6687     06A4  2E85               	goto	l3550
  6688     06A5  3A01               	xorlw	1	; case 3
  6689     06A6  1903               	skipnz
  6690     06A7  2E8A               	goto	l3552
  6691     06A8  2EA9               	goto	l3558
  6692     06A9                     l3558:
  6693                           
  6694                           ;main.c: 559:             section++;
  6695     06A9  3001               	movlw	1
  6696     06AA  1683               	bsf	3,5	;RP0=1, select bank1
  6697     06AB  1303               	bcf	3,6	;RP1=0, select bank1
  6698     06AC  07B4               	addwf	SplitPacket@section^(0+128),f
  6699     06AD  1803               	skipnc
  6700     06AE  0AB5               	incf	(SplitPacket@section+1)^(0+128),f
  6701     06AF  3000               	movlw	0
  6702     06B0  07B5               	addwf	(SplitPacket@section+1)^(0+128),f
  6703     06B1                     l3560:
  6704                           
  6705                           ;main.c: 561:             i_part = 0;
  6706     06B1  01B6               	clrf	SplitPacket@i_part^(0+128)
  6707     06B2  01B7               	clrf	(SplitPacket@i_part+1)^(0+128)
  6708     06B3                     l3562:
  6709                           
  6710                           ;main.c: 563:     }
  6711     06B3  3001               	movlw	1
  6712     06B4  07B9               	addwf	SplitPacket@i^(0+128),f
  6713     06B5  1803               	skipnc
  6714     06B6  0ABA               	incf	(SplitPacket@i+1)^(0+128),f
  6715     06B7  3000               	movlw	0
  6716     06B8  07BA               	addwf	(SplitPacket@i+1)^(0+128),f
  6717     06B9                     l3564:
  6718     06B9  082D               	movf	SplitPacket@len^(0+128),w
  6719     06BA  3E01               	addlw	1
  6720     06BB  00AA               	movwf	??_SplitPacket^(0+128)
  6721     06BC  082E               	movf	(SplitPacket@len+1)^(0+128),w
  6722     06BD  1803               	skipnc
  6723     06BE  3E01               	addlw	1
  6724     06BF  3E00               	addlw	0
  6725     06C0  00AB               	movwf	(??_SplitPacket+1)^(0+128)
  6726     06C1  083A               	movf	(SplitPacket@i+1)^(0+128),w
  6727     06C2  3A80               	xorlw	128
  6728     06C3  00AC               	movwf	(??_SplitPacket+2)^(0+128)
  6729     06C4  082B               	movf	(??_SplitPacket+1)^(0+128),w
  6730     06C5  3A80               	xorlw	128
  6731     06C6  022C               	subwf	(??_SplitPacket+2)^(0+128),w
  6732     06C7  1D03               	skipz
  6733     06C8  2ECB               	goto	u3795
  6734     06C9  082A               	movf	??_SplitPacket^(0+128),w
  6735     06CA  0239               	subwf	SplitPacket@i^(0+128),w
  6736     06CB                     u3795:
  6737     06CB  1C03               	skipc
  6738     06CC  2ECE               	goto	u3791
  6739     06CD  2ECF               	goto	u3790
  6740     06CE                     u3791:
  6741     06CE  2E44               	goto	l3536
  6742     06CF                     u3790:
  6743     06CF                     l243:
  6744     06CF  0008               	return
  6745     06D0                     __end_of_SplitPacket:
  6746                           
  6747                           	psect	text25
  6748     17B9                     __ptext25:	
  6749 ;; *************** function _strcopy *****************
  6750 ;; Defined at:
  6751 ;;		line 566 in file "main.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  dest            2    0[BANK1 ] PTR unsigned char 
  6754 ;;		 -> datoSeriale(17), id_dest(4), 
  6755 ;;  source          1    2[BANK1 ] PTR unsigned char 
  6756 ;;		 -> SplitPacket@part(5), 
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  n               2    8[BANK1 ] int 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  1    wreg      void 
  6761 ;; Registers used:
  6762 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6768 ;;      Params:         0       0       3       0       0
  6769 ;;      Locals:         0       0       2       0       0
  6770 ;;      Temps:          0       0       5       0       0
  6771 ;;      Totals:         0       0      10       0       0
  6772 ;;Total ram usage:       10 bytes
  6773 ;; Hardware stack levels used: 1
  6774 ;; Hardware stack levels required when called: 4
  6775 ;; This function calls:
  6776 ;;		Nothing
  6777 ;; This function is called by:
  6778 ;;		_SplitPacket
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782     17B9                     _strcopy:	
  6783                           ;psect for function _strcopy
  6784                           
  6785     17B9                     l3278:	
  6786                           ;incstack = 0
  6787                           ; Regs used in _strcopy: [wreg-fsr0h+status,2+status,0]
  6788                           
  6789                           
  6790                           ;main.c: 566: void strcopy(char* dest, char* source);main.c: 567: {;main.c: 568:     int
      +                           n = 0;
  6791     17B9  1683               	bsf	3,5	;RP0=1, select bank1
  6792     17BA  1303               	bcf	3,6	;RP1=0, select bank1
  6793     17BB  01A8               	clrf	strcopy@n^(0+128)
  6794     17BC  01A9               	clrf	(strcopy@n+1)^(0+128)
  6795                           
  6796                           ;main.c: 571:     while(source[n] != '\0')
  6797     17BD  2FE0               	goto	l3284
  6798     17BE                     l3280:
  6799                           
  6800                           ;main.c: 572:     {;main.c: 573:         dest[n] = source[n];
  6801     17BE  0828               	movf	strcopy@n^(0+128),w
  6802     17BF  0722               	addwf	strcopy@source^(0+128),w
  6803     17C0  00A3               	movwf	??_strcopy^(0+128)
  6804     17C1  0823               	movf	??_strcopy^(0+128),w
  6805     17C2  0084               	movwf	4
  6806     17C3  0800               	movf	0,w
  6807     17C4  00A4               	movwf	(??_strcopy+1)^(0+128)
  6808     17C5  0828               	movf	strcopy@n^(0+128),w
  6809     17C6  0720               	addwf	strcopy@dest^(0+128),w
  6810     17C7  00A6               	movwf	(??_strcopy+3)^(0+128)
  6811     17C8  0821               	movf	(strcopy@dest+1)^(0+128),w
  6812     17C9  00A5               	movwf	(??_strcopy+2)^(0+128)
  6813     17CA  1803               	skipnc
  6814     17CB  0AA5               	incf	(??_strcopy+2)^(0+128),f
  6815     17CC  1FA8               	btfss	strcopy@n^(0+128),7
  6816     17CD  2FCF               	goto	u3320
  6817     17CE  03A5               	decf	(??_strcopy+2)^(0+128),f
  6818     17CF                     u3320:
  6819     17CF  1683               	bsf	3,5	;RP0=1, select bank1
  6820     17D0  1303               	bcf	3,6	;RP1=0, select bank1
  6821     17D1  0825               	movf	(??_strcopy+2)^(0+128),w
  6822     17D2  00A7               	movwf	((??_strcopy+3)^(0+128)+1)
  6823     17D3  0826               	movf	(??_strcopy+3)^(0+128),w
  6824     17D4  0084               	movwf	4
  6825     17D5  1783               	bsf	3,7
  6826     17D6  1C27               	btfss	(??_strcopy+4)^(0+128),0
  6827     17D7  1383               	bcf	3,7
  6828     17D8  0824               	movf	(??_strcopy+1)^(0+128),w
  6829     17D9  0080               	movwf	0
  6830     17DA                     l3282:
  6831                           
  6832                           ;main.c: 574:         n++;
  6833     17DA  3001               	movlw	1
  6834     17DB  07A8               	addwf	strcopy@n^(0+128),f
  6835     17DC  1803               	skipnc
  6836     17DD  0AA9               	incf	(strcopy@n+1)^(0+128),f
  6837     17DE  3000               	movlw	0
  6838     17DF  07A9               	addwf	(strcopy@n+1)^(0+128),f
  6839     17E0                     l3284:
  6840                           
  6841                           ;main.c: 571:     while(source[n] != '\0')
  6842     17E0  0828               	movf	strcopy@n^(0+128),w
  6843     17E1  0722               	addwf	strcopy@source^(0+128),w
  6844     17E2  00A3               	movwf	??_strcopy^(0+128)
  6845     17E3  0823               	movf	??_strcopy^(0+128),w
  6846     17E4  0084               	movwf	4
  6847     17E5  1383               	bcf	3,7	;select IRP bank0
  6848     17E6  0800               	movf	0,w
  6849     17E7  1D03               	btfss	3,2
  6850     17E8  2FEA               	goto	u3331
  6851     17E9  2FEB               	goto	u3330
  6852     17EA                     u3331:
  6853     17EA  2FBE               	goto	l3280
  6854     17EB                     u3330:
  6855     17EB                     l3286:
  6856                           
  6857                           ;main.c: 578:     dest[n] = '\0';
  6858     17EB  0828               	movf	strcopy@n^(0+128),w
  6859     17EC  0720               	addwf	strcopy@dest^(0+128),w
  6860     17ED  00A4               	movwf	(??_strcopy+1)^(0+128)
  6861     17EE  0821               	movf	(strcopy@dest+1)^(0+128),w
  6862     17EF  00A3               	movwf	??_strcopy^(0+128)
  6863     17F0  1803               	skipnc
  6864     17F1  0AA3               	incf	??_strcopy^(0+128),f
  6865     17F2  1FA8               	btfss	strcopy@n^(0+128),7
  6866     17F3  2FF5               	goto	u3340
  6867     17F4  03A3               	decf	??_strcopy^(0+128),f
  6868     17F5                     u3340:
  6869     17F5  1683               	bsf	3,5	;RP0=1, select bank1
  6870     17F6  1303               	bcf	3,6	;RP1=0, select bank1
  6871     17F7  0823               	movf	??_strcopy^(0+128),w
  6872     17F8  00A5               	movwf	((??_strcopy+1)^(0+128)+1)
  6873     17F9  0824               	movf	(??_strcopy+1)^(0+128),w
  6874     17FA  0084               	movwf	4
  6875     17FB  1783               	bsf	3,7
  6876     17FC  1C25               	btfss	(??_strcopy+2)^(0+128),0
  6877     17FD  1383               	bcf	3,7
  6878     17FE  0180               	clrf	0
  6879     17FF                     l249:
  6880     17FF  0008               	return
  6881     1800                     __end_of_strcopy:
  6882                           
  6883                           	psect	text26
  6884     0886                     __ptext26:	
  6885 ;; *************** function _ConcatToPacket *****************
  6886 ;; Defined at:
  6887 ;;		line 468 in file "main.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  pkt             1    wreg     PTR unsigned char 
  6890 ;;		 -> packet(15), 
  6891 ;;  str             2   19[BANK1 ] PTR unsigned char 
  6892 ;;		 -> STR_18(4), STR_14(4), STR_10(2), main@num_rand_s_228(16), 
  6893 ;;		 -> PIC_ID(4), 
  6894 ;;  delim           1   21[BANK1 ] unsigned char 
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;  pkt             1   25[BANK1 ] PTR unsigned char 
  6897 ;;		 -> packet(15), 
  6898 ;;  packet_lengt    2   23[BANK1 ] int 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6908 ;;      Params:         0       0       3       0       0
  6909 ;;      Locals:         0       0       3       0       0
  6910 ;;      Temps:          0       0       1       0       0
  6911 ;;      Totals:         0       0       7       0       0
  6912 ;;Total ram usage:        7 bytes
  6913 ;; Hardware stack levels used: 1
  6914 ;; Hardware stack levels required when called: 6
  6915 ;; This function calls:
  6916 ;;		_strcat
  6917 ;; This function is called by:
  6918 ;;		_main
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922     0886                     _ConcatToPacket:	
  6923                           ;psect for function _ConcatToPacket
  6924                           
  6925                           
  6926                           ;incstack = 0
  6927                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6928                           ;ConcatToPacket@pkt stored from wreg
  6929     0886  1683               	bsf	3,5	;RP0=1, select bank1
  6930     0887  1303               	bcf	3,6	;RP1=0, select bank1
  6931     0888  00B9               	movwf	ConcatToPacket@pkt^(0+128)
  6932     0889                     l3498:
  6933                           
  6934                           ;main.c: 468: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 469: {;main.
      +                          c: 471:     int packet_length = strcat(pkt, str);
  6935     0889  0833               	movf	ConcatToPacket@str^(0+128),w
  6936     088A  00A7               	movwf	strcat@source^(0+128)
  6937     088B  0834               	movf	(ConcatToPacket@str+1)^(0+128),w
  6938     088C  00A8               	movwf	(strcat@source+1)^(0+128)
  6939     088D  0839               	movf	ConcatToPacket@pkt^(0+128),w
  6940     088E  120A  158A  23DD  120A  158A  	fcall	_strcat
  6941     0893  1683               	bsf	3,5	;RP0=1, select bank1
  6942     0894  1303               	bcf	3,6	;RP1=0, select bank1
  6943     0895  0828               	movf	(?_strcat+1)^(0+128),w
  6944     0896  00B8               	movwf	(ConcatToPacket@packet_length+1)^(0+128)
  6945     0897  0827               	movf	?_strcat^(0+128),w
  6946     0898  00B7               	movwf	ConcatToPacket@packet_length^(0+128)
  6947     0899                     l3500:
  6948                           
  6949                           ;main.c: 473:     if(delim != ' ')
  6950     0899  3020               	movlw	32
  6951     089A  0635               	xorwf	ConcatToPacket@delim^(0+128),w
  6952     089B  1903               	btfsc	3,2
  6953     089C  289E               	goto	u3741
  6954     089D  289F               	goto	u3740
  6955     089E                     u3741:
  6956     089E  28AE               	goto	l3506
  6957     089F                     u3740:
  6958     089F                     l3502:
  6959                           
  6960                           ;main.c: 474:     {;main.c: 476:         pkt[packet_length] = delim;
  6961     089F  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6962     08A0  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6963     08A1  00B6               	movwf	??_ConcatToPacket^(0+128)
  6964     08A2  0836               	movf	??_ConcatToPacket^(0+128),w
  6965     08A3  0084               	movwf	4
  6966     08A4  0835               	movf	ConcatToPacket@delim^(0+128),w
  6967     08A5  1783               	bsf	3,7	;select IRP bank2
  6968     08A6  0080               	movwf	0
  6969     08A7                     l3504:
  6970                           
  6971                           ;main.c: 477:         packet_length++;
  6972     08A7  3001               	movlw	1
  6973     08A8  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6974     08A9  1803               	skipnc
  6975     08AA  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6976     08AB  3000               	movlw	0
  6977     08AC  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6978                           
  6979                           ;main.c: 478:     }
  6980     08AD  28C9               	goto	l3512
  6981     08AE                     l3506:
  6982                           
  6983                           ;main.c: 481:     {;main.c: 483:         pkt[packet_length] = '\r';
  6984     08AE  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6985     08AF  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6986     08B0  00B6               	movwf	??_ConcatToPacket^(0+128)
  6987     08B1  0836               	movf	??_ConcatToPacket^(0+128),w
  6988     08B2  0084               	movwf	4
  6989     08B3  300D               	movlw	13
  6990     08B4  1783               	bsf	3,7	;select IRP bank2
  6991     08B5  0080               	movwf	0
  6992     08B6                     l3508:
  6993                           
  6994                           ;main.c: 484:         packet_length++;
  6995     08B6  3001               	movlw	1
  6996     08B7  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6997     08B8  1803               	skipnc
  6998     08B9  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6999     08BA  3000               	movlw	0
  7000     08BB  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7001     08BC                     l3510:
  7002                           
  7003                           ;main.c: 485:         pkt[packet_length] = '\n';
  7004     08BC  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  7005     08BD  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  7006     08BE  00B6               	movwf	??_ConcatToPacket^(0+128)
  7007     08BF  0836               	movf	??_ConcatToPacket^(0+128),w
  7008     08C0  0084               	movwf	4
  7009     08C1  300A               	movlw	10
  7010     08C2  0080               	movwf	0
  7011                           
  7012                           ;main.c: 486:         packet_length++;
  7013     08C3  3001               	movlw	1
  7014     08C4  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  7015     08C5  1803               	skipnc
  7016     08C6  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  7017     08C7  3000               	movlw	0
  7018     08C8  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  7019     08C9                     l3512:
  7020                           
  7021                           ;main.c: 489:     pkt[packet_length] = '\0';
  7022     08C9  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  7023     08CA  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  7024     08CB  00B6               	movwf	??_ConcatToPacket^(0+128)
  7025     08CC  0836               	movf	??_ConcatToPacket^(0+128),w
  7026     08CD  0084               	movwf	4
  7027     08CE  0180               	clrf	0
  7028     08CF                     l216:
  7029     08CF  0008               	return
  7030     08D0                     __end_of_ConcatToPacket:
  7031                           
  7032                           	psect	text27
  7033     0BDD                     __ptext27:	
  7034 ;; *************** function _strcat *****************
  7035 ;; Defined at:
  7036 ;;		line 501 in file "main.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  dest            1    wreg     PTR unsigned char 
  7039 ;;		 -> packet(15), 
  7040 ;;  source          2    7[BANK1 ] PTR unsigned char 
  7041 ;;		 -> STR_18(4), STR_14(4), STR_10(2), main@num_rand_s_228(16), 
  7042 ;;		 -> PIC_ID(4), 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  dest            1   14[BANK1 ] PTR unsigned char 
  7045 ;;		 -> packet(15), 
  7046 ;;  length_dest     2   17[BANK1 ] int 
  7047 ;;  n               2   15[BANK1 ] int 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  2    7[BANK1 ] int 
  7050 ;; Registers used:
  7051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7057 ;;      Params:         0       0       2       0       0
  7058 ;;      Locals:         0       0       5       0       0
  7059 ;;      Temps:          0       0       5       0       0
  7060 ;;      Totals:         0       0      12       0       0
  7061 ;;Total ram usage:       12 bytes
  7062 ;; Hardware stack levels used: 1
  7063 ;; Hardware stack levels required when called: 5
  7064 ;; This function calls:
  7065 ;;		_Length
  7066 ;; This function is called by:
  7067 ;;		_ConcatToPacket
  7068 ;; This function uses a non-reentrant model
  7069 ;;
  7070                           
  7071     0BDD                     _strcat:	
  7072                           ;psect for function _strcat
  7073                           
  7074                           
  7075                           ;incstack = 0
  7076                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7077                           ;strcat@dest stored from wreg
  7078     0BDD  1683               	bsf	3,5	;RP0=1, select bank1
  7079     0BDE  1303               	bcf	3,6	;RP1=0, select bank1
  7080     0BDF  00AE               	movwf	strcat@dest^(0+128)
  7081     0BE0                     l3264:
  7082                           
  7083                           ;main.c: 501: int strcat(char* dest, char* source);main.c: 502: {;main.c: 504:     int n
      +                           = 0, length_dest = Length(dest);
  7084     0BE0  01AF               	clrf	strcat@n^(0+128)
  7085     0BE1  01B0               	clrf	(strcat@n+1)^(0+128)
  7086     0BE2                     l3266:
  7087     0BE2  082E               	movf	strcat@dest^(0+128),w
  7088     0BE3  00A0               	movwf	Length@str^(0+128)
  7089     0BE4  3001               	movlw	1
  7090     0BE5  00A1               	movwf	(Length@str+1)^(0+128)
  7091     0BE6  120A  118A  26D0  120A  158A  	fcall	_Length
  7092     0BEB  1683               	bsf	3,5	;RP0=1, select bank1
  7093     0BEC  1303               	bcf	3,6	;RP1=0, select bank1
  7094     0BED  0821               	movf	(?_Length+1)^(0+128),w
  7095     0BEE  00B2               	movwf	(strcat@length_dest+1)^(0+128)
  7096     0BEF  0820               	movf	?_Length^(0+128),w
  7097     0BF0  00B1               	movwf	strcat@length_dest^(0+128)
  7098                           
  7099                           ;main.c: 507:     while(source[n] != '\0')
  7100     0BF1  2C28               	goto	l225
  7101     0BF2                     l3268:
  7102                           
  7103                           ;main.c: 508:     {;main.c: 509:         dest[length_dest] = source[n];
  7104     0BF2  1683               	bsf	3,5	;RP0=1, select bank1
  7105     0BF3  1303               	bcf	3,6	;RP1=0, select bank1
  7106     0BF4  082F               	movf	strcat@n^(0+128),w
  7107     0BF5  0727               	addwf	strcat@source^(0+128),w
  7108     0BF6  00AA               	movwf	(??_strcat+1)^(0+128)
  7109     0BF7  0828               	movf	(strcat@source+1)^(0+128),w
  7110     0BF8  00A9               	movwf	??_strcat^(0+128)
  7111     0BF9  1803               	skipnc
  7112     0BFA  0AA9               	incf	??_strcat^(0+128),f
  7113     0BFB  1FAF               	btfss	strcat@n^(0+128),7
  7114     0BFC  2BFE               	goto	u3290
  7115     0BFD  03A9               	decf	??_strcat^(0+128),f
  7116     0BFE                     u3290:
  7117     0BFE  1683               	bsf	3,5	;RP0=1, select bank1
  7118     0BFF  1303               	bcf	3,6	;RP1=0, select bank1
  7119     0C00  0829               	movf	??_strcat^(0+128),w
  7120     0C01  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  7121     0C02  082B               	movf	(??_strcat+2)^(0+128),w
  7122     0C03  1283               	bcf	3,5	;RP0=0, select bank0
  7123     0C04  1303               	bcf	3,6	;RP1=0, select bank0
  7124     0C05  00FF               	movwf	btemp+1
  7125     0C06  1683               	bsf	3,5	;RP0=1, select bank1
  7126     0C07  1303               	bcf	3,6	;RP1=0, select bank1
  7127     0C08  082A               	movf	(??_strcat+1)^(0+128),w
  7128     0C09  0084               	movwf	4
  7129     0C0A  1283               	bcf	3,5	;RP0=0, select bank0
  7130     0C0B  1303               	bcf	3,6	;RP1=0, select bank0
  7131     0C0C  120A  118A  2700  120A  158A  	fcall	stringtab
  7132     0C11  1683               	bsf	3,5	;RP0=1, select bank1
  7133     0C12  1303               	bcf	3,6	;RP1=0, select bank1
  7134     0C13  00AC               	movwf	(??_strcat+3)^(0+128)
  7135     0C14  0831               	movf	strcat@length_dest^(0+128),w
  7136     0C15  072E               	addwf	strcat@dest^(0+128),w
  7137     0C16  00AD               	movwf	(??_strcat+4)^(0+128)
  7138     0C17  082D               	movf	(??_strcat+4)^(0+128),w
  7139     0C18  0084               	movwf	4
  7140     0C19  082C               	movf	(??_strcat+3)^(0+128),w
  7141     0C1A  1783               	bsf	3,7	;select IRP bank2
  7142     0C1B  0080               	movwf	0
  7143     0C1C                     l3270:
  7144                           
  7145                           ;main.c: 510:         n++;
  7146     0C1C  3001               	movlw	1
  7147     0C1D  07AF               	addwf	strcat@n^(0+128),f
  7148     0C1E  1803               	skipnc
  7149     0C1F  0AB0               	incf	(strcat@n+1)^(0+128),f
  7150     0C20  3000               	movlw	0
  7151     0C21  07B0               	addwf	(strcat@n+1)^(0+128),f
  7152     0C22                     l3272:
  7153                           
  7154                           ;main.c: 511:         length_dest++;
  7155     0C22  3001               	movlw	1
  7156     0C23  07B1               	addwf	strcat@length_dest^(0+128),f
  7157     0C24  1803               	skipnc
  7158     0C25  0AB2               	incf	(strcat@length_dest+1)^(0+128),f
  7159     0C26  3000               	movlw	0
  7160     0C27  07B2               	addwf	(strcat@length_dest+1)^(0+128),f
  7161     0C28                     l225:	
  7162                           ;main.c: 512:     }
  7163                           
  7164                           
  7165                           ;main.c: 507:     while(source[n] != '\0')
  7166     0C28  082F               	movf	strcat@n^(0+128),w
  7167     0C29  0727               	addwf	strcat@source^(0+128),w
  7168     0C2A  00AA               	movwf	(??_strcat+1)^(0+128)
  7169     0C2B  0828               	movf	(strcat@source+1)^(0+128),w
  7170     0C2C  00A9               	movwf	??_strcat^(0+128)
  7171     0C2D  1803               	skipnc
  7172     0C2E  0AA9               	incf	??_strcat^(0+128),f
  7173     0C2F  1FAF               	btfss	strcat@n^(0+128),7
  7174     0C30  2C32               	goto	u3300
  7175     0C31  03A9               	decf	??_strcat^(0+128),f
  7176     0C32                     u3300:
  7177     0C32  1683               	bsf	3,5	;RP0=1, select bank1
  7178     0C33  1303               	bcf	3,6	;RP1=0, select bank1
  7179     0C34  0829               	movf	??_strcat^(0+128),w
  7180     0C35  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  7181     0C36  082B               	movf	(??_strcat+2)^(0+128),w
  7182     0C37  1283               	bcf	3,5	;RP0=0, select bank0
  7183     0C38  1303               	bcf	3,6	;RP1=0, select bank0
  7184     0C39  00FF               	movwf	btemp+1
  7185     0C3A  1683               	bsf	3,5	;RP0=1, select bank1
  7186     0C3B  1303               	bcf	3,6	;RP1=0, select bank1
  7187     0C3C  082A               	movf	(??_strcat+1)^(0+128),w
  7188     0C3D  0084               	movwf	4
  7189     0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  7190     0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  7191     0C40  120A  118A  2700  120A  158A  	fcall	stringtab
  7192     0C45  3A00               	xorlw	0
  7193     0C46  1D03               	skipz
  7194     0C47  2C49               	goto	u3311
  7195     0C48  2C4A               	goto	u3310
  7196     0C49                     u3311:
  7197     0C49  2BF2               	goto	l3268
  7198     0C4A                     u3310:
  7199     0C4A                     l3274:
  7200                           
  7201                           ;main.c: 515:     return length_dest;
  7202     0C4A  1683               	bsf	3,5	;RP0=1, select bank1
  7203     0C4B  1303               	bcf	3,6	;RP1=0, select bank1
  7204     0C4C  0832               	movf	(strcat@length_dest+1)^(0+128),w
  7205     0C4D  00A8               	movwf	(?_strcat+1)^(0+128)
  7206     0C4E  0831               	movf	strcat@length_dest^(0+128),w
  7207     0C4F  00A7               	movwf	?_strcat^(0+128)
  7208     0C50                     l228:
  7209     0C50  0008               	return
  7210     0C51                     __end_of_strcat:
  7211                           
  7212                           	psect	text28
  7213     06D0                     __ptext28:	
  7214 ;; *************** function _Length *****************
  7215 ;; Defined at:
  7216 ;;		line 492 in file "main.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  str             2    0[BANK1 ] PTR unsigned char 
  7219 ;;		 -> datoSeriale(17), datoTastierino(17), id_dest(4), dato(50), 
  7220 ;;		 -> packet(15), PIC_ID(4), 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;  len             2    5[BANK1 ] int 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  2    0[BANK1 ] int 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7232 ;;      Params:         0       0       2       0       0
  7233 ;;      Locals:         0       0       2       0       0
  7234 ;;      Temps:          0       0       3       0       0
  7235 ;;      Totals:         0       0       7       0       0
  7236 ;;Total ram usage:        7 bytes
  7237 ;; Hardware stack levels used: 1
  7238 ;; Hardware stack levels required when called: 4
  7239 ;; This function calls:
  7240 ;;		Nothing
  7241 ;; This function is called by:
  7242 ;;		_strcat
  7243 ;;		_SplitPacket
  7244 ;;		_CompareStrings
  7245 ;;		_Fill
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249     06D0                     _Length:	
  7250                           ;psect for function _Length
  7251                           
  7252     06D0                     l3028:	
  7253                           ;incstack = 0
  7254                           ; Regs used in _Length: [wreg-fsr0h+status,2+status,0]
  7255                           
  7256                           
  7257                           ;main.c: 492: int Length(char *str);main.c: 493: {;main.c: 494:     int len = 0;
  7258     06D0  1683               	bsf	3,5	;RP0=1, select bank1
  7259     06D1  1303               	bcf	3,6	;RP1=0, select bank1
  7260     06D2  01A5               	clrf	Length@len^(0+128)
  7261     06D3  01A6               	clrf	(Length@len+1)^(0+128)
  7262                           
  7263                           ;main.c: 496:     while(str[len] != '\0') { len++; }
  7264     06D4  2EDB               	goto	l3032
  7265     06D5                     l3030:
  7266     06D5  3001               	movlw	1
  7267     06D6  07A5               	addwf	Length@len^(0+128),f
  7268     06D7  1803               	skipnc
  7269     06D8  0AA6               	incf	(Length@len+1)^(0+128),f
  7270     06D9  3000               	movlw	0
  7271     06DA  07A6               	addwf	(Length@len+1)^(0+128),f
  7272     06DB                     l3032:
  7273     06DB  0825               	movf	Length@len^(0+128),w
  7274     06DC  0720               	addwf	Length@str^(0+128),w
  7275     06DD  00A3               	movwf	(??_Length+1)^(0+128)
  7276     06DE  0821               	movf	(Length@str+1)^(0+128),w
  7277     06DF  00A2               	movwf	??_Length^(0+128)
  7278     06E0  1803               	skipnc
  7279     06E1  0AA2               	incf	??_Length^(0+128),f
  7280     06E2  1FA5               	btfss	Length@len^(0+128),7
  7281     06E3  2EE5               	goto	u2910
  7282     06E4  03A2               	decf	??_Length^(0+128),f
  7283     06E5                     u2910:
  7284     06E5  1683               	bsf	3,5	;RP0=1, select bank1
  7285     06E6  1303               	bcf	3,6	;RP1=0, select bank1
  7286     06E7  0822               	movf	??_Length^(0+128),w
  7287     06E8  00A4               	movwf	((??_Length+1)^(0+128)+1)
  7288     06E9  0823               	movf	(??_Length+1)^(0+128),w
  7289     06EA  0084               	movwf	4
  7290     06EB  1783               	bsf	3,7
  7291     06EC  1C24               	btfss	(??_Length+2)^(0+128),0
  7292     06ED  1383               	bcf	3,7
  7293     06EE  0800               	movf	0,w
  7294     06EF  1D03               	btfss	3,2
  7295     06F0  2EF2               	goto	u2921
  7296     06F1  2EF3               	goto	u2920
  7297     06F2                     u2921:
  7298     06F2  2ED5               	goto	l3030
  7299     06F3                     u2920:
  7300     06F3                     l3034:
  7301                           
  7302                           ;main.c: 498:     return len;
  7303     06F3  0826               	movf	(Length@len+1)^(0+128),w
  7304     06F4  00A1               	movwf	(?_Length+1)^(0+128)
  7305     06F5  0825               	movf	Length@len^(0+128),w
  7306     06F6  00A0               	movwf	?_Length^(0+128)
  7307     06F7                     l222:
  7308     06F7  0008               	return
  7309     06F8                     __end_of_Length:
  7310                           
  7311                           	psect	text29
  7312     0DCB                     __ptext29:	
  7313 ;; *************** function _IRS *****************
  7314 ;; Defined at:
  7315 ;;		line 821 in file "main.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;		None
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      void 
  7322 ;; Registers used:
  7323 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7329 ;;      Params:         0       0       0       0       0
  7330 ;;      Locals:         0       0       0       0       0
  7331 ;;      Temps:          0       4       0       0       0
  7332 ;;      Totals:         0       4       0       0       0
  7333 ;;Total ram usage:        4 bytes
  7334 ;; Hardware stack levels used: 1
  7335 ;; Hardware stack levels required when called: 3
  7336 ;; This function calls:
  7337 ;;		i1_UART_TxString
  7338 ;; This function is called by:
  7339 ;;		Interrupt level 1
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343     0DCB                     _IRS:	
  7344                           ;psect for function _IRS
  7345                           
  7346     0DCB                     i1l2892:
  7347                           
  7348                           ;main.c: 824:     if(RCIF)
  7349     0DCB  1E8C               	btfss	12,5	;volatile
  7350     0DCC  2DCE               	goto	u280_21
  7351     0DCD  2DCF               	goto	u280_20
  7352     0DCE                     u280_21:
  7353     0DCE  2DE4               	goto	i1l2904
  7354     0DCF                     u280_20:
  7355     0DCF                     i1l2894:
  7356                           
  7357                           ;main.c: 825:     {;main.c: 826:         dato[iS++] = RCREG;
  7358     0DCF  083E               	movf	_iS,w
  7359     0DD0  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7360     0DD1  0084               	movwf	4
  7361     0DD2  081A               	movf	26,w	;volatile
  7362     0DD3  1783               	bsf	3,7	;select IRP bank2
  7363     0DD4  0080               	movwf	0
  7364     0DD5                     i1l2896:
  7365     0DD5  3001               	movlw	1
  7366     0DD6  00B8               	movwf	??_IRS
  7367     0DD7  0838               	movf	??_IRS,w
  7368     0DD8  07BE               	addwf	_iS,f
  7369     0DD9                     i1l2898:
  7370                           
  7371                           ;main.c: 827:         dato[iS] = '\0';
  7372     0DD9  083E               	movf	_iS,w
  7373     0DDA  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7374     0DDB  0084               	movwf	4
  7375     0DDC  0180               	clrf	0
  7376     0DDD                     i1l2900:
  7377                           
  7378                           ;main.c: 828:         recieved = 1;
  7379     0DDD  1683               	bsf	3,5	;RP0=1, select bank3
  7380     0DDE  1703               	bsf	3,6	;RP1=1, select bank3
  7381     0DDF  019B               	clrf	_recieved^(0+384)
  7382     0DE0  0A9B               	incf	_recieved^(0+384),f
  7383     0DE1                     i1l2902:
  7384                           
  7385                           ;main.c: 829:         RCIF = 0;
  7386     0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  7387     0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  7388     0DE3  128C               	bcf	12,5	;volatile
  7389     0DE4                     i1l2904:
  7390                           
  7391                           ;main.c: 832:     if(T0IF)
  7392     0DE4  1D0B               	btfss	11,2	;volatile
  7393     0DE5  2DE7               	goto	u281_21
  7394     0DE6  2DE8               	goto	u281_20
  7395     0DE7                     u281_21:
  7396     0DE7  2E4E               	goto	i1l331
  7397     0DE8                     u281_20:
  7398     0DE8                     i1l2906:
  7399                           
  7400                           ;main.c: 833:     {;main.c: 834:         TMR0 = 131;
  7401     0DE8  3083               	movlw	131
  7402     0DE9  0081               	movwf	1	;volatile
  7403                           
  7404                           ;main.c: 835:         milliseconds++;
  7405     0DEA  3001               	movlw	1
  7406     0DEB  1683               	bsf	3,5	;RP0=1, select bank1
  7407     0DEC  1303               	bcf	3,6	;RP1=0, select bank1
  7408     0DED  07E7               	addwf	_milliseconds^(0+128),f
  7409     0DEE  3000               	movlw	0
  7410     0DEF  1803               	skipnc
  7411     0DF0  3001               	movlw	1
  7412     0DF1  07E8               	addwf	(_milliseconds+1)^(0+128),f
  7413     0DF2  3000               	movlw	0
  7414     0DF3  1803               	skipnc
  7415     0DF4  3001               	movlw	1
  7416     0DF5  07E9               	addwf	(_milliseconds+2)^(0+128),f
  7417     0DF6  3000               	movlw	0
  7418     0DF7  1803               	skipnc
  7419     0DF8  3001               	movlw	1
  7420     0DF9  07EA               	addwf	(_milliseconds+3)^(0+128),f
  7421                           
  7422                           ;main.c: 837:         if(seconds != 0 && milliseconds > seconds)
  7423     0DFA  0866               	movf	(_seconds+3)^(0+128),w
  7424     0DFB  0465               	iorwf	(_seconds+2)^(0+128),w
  7425     0DFC  0464               	iorwf	(_seconds+1)^(0+128),w
  7426     0DFD  0463               	iorwf	_seconds^(0+128),w
  7427     0DFE  1903               	skipnz
  7428     0DFF  2E01               	goto	u282_21
  7429     0E00  2E02               	goto	u282_20
  7430     0E01                     u282_21:
  7431     0E01  2E4D               	goto	i1l2928
  7432     0E02                     u282_20:
  7433     0E02                     i1l2908:
  7434     0E02  086A               	movf	(_milliseconds+3)^(0+128),w
  7435     0E03  0266               	subwf	(_seconds+3)^(0+128),w
  7436     0E04  1D03               	skipz
  7437     0E05  2E10               	goto	u283_25
  7438     0E06  0869               	movf	(_milliseconds+2)^(0+128),w
  7439     0E07  0265               	subwf	(_seconds+2)^(0+128),w
  7440     0E08  1D03               	skipz
  7441     0E09  2E10               	goto	u283_25
  7442     0E0A  0868               	movf	(_milliseconds+1)^(0+128),w
  7443     0E0B  0264               	subwf	(_seconds+1)^(0+128),w
  7444     0E0C  1D03               	skipz
  7445     0E0D  2E10               	goto	u283_25
  7446     0E0E  0867               	movf	_milliseconds^(0+128),w
  7447     0E0F  0263               	subwf	_seconds^(0+128),w
  7448     0E10                     u283_25:
  7449     0E10  1803               	skipnc
  7450     0E11  2E13               	goto	u283_21
  7451     0E12  2E14               	goto	u283_20
  7452     0E13                     u283_21:
  7453     0E13  2E4D               	goto	i1l2928
  7454     0E14                     u283_20:
  7455     0E14                     i1l2910:
  7456                           
  7457                           ;main.c: 838:         {;main.c: 840:             if(seconds == 1000)
  7458     0E14  30E8               	movlw	232
  7459     0E15  0663               	xorwf	_seconds^(0+128),w
  7460     0E16  3003               	movlw	3
  7461     0E17  1903               	skipnz
  7462     0E18  0664               	xorwf	(_seconds+1)^(0+128),w
  7463     0E19  0465               	iorwf	(_seconds+2)^(0+128),w
  7464     0E1A  0466               	iorwf	(_seconds+3)^(0+128),w
  7465     0E1B  1D03               	btfss	3,2
  7466     0E1C  2E1E               	goto	u284_21
  7467     0E1D  2E1F               	goto	u284_20
  7468     0E1E                     u284_21:
  7469     0E1E  2E32               	goto	i1l2918
  7470     0E1F                     u284_20:
  7471     0E1F                     i1l2912:
  7472                           
  7473                           ;main.c: 841:             {;main.c: 842:                 pr_start = 1;
  7474     0E1F  1683               	bsf	3,5	;RP0=1, select bank3
  7475     0E20  1703               	bsf	3,6	;RP1=1, select bank3
  7476     0E21  0197               	clrf	_pr_start^(0+384)
  7477     0E22  0A97               	incf	_pr_start^(0+384),f
  7478     0E23                     i1l2914:
  7479                           
  7480                           ;main.c: 843:                 seconds = 0;
  7481     0E23  3000               	movlw	0
  7482     0E24  1683               	bsf	3,5	;RP0=1, select bank1
  7483     0E25  1303               	bcf	3,6	;RP1=0, select bank1
  7484     0E26  00E6               	movwf	(_seconds+3)^(0+128)
  7485     0E27  3000               	movlw	0
  7486     0E28  00E5               	movwf	(_seconds+2)^(0+128)
  7487     0E29  3000               	movlw	0
  7488     0E2A  00E4               	movwf	(_seconds+1)^(0+128)
  7489     0E2B  3000               	movlw	0
  7490     0E2C  00E3               	movwf	_seconds^(0+128)
  7491     0E2D                     i1l2916:
  7492                           
  7493                           ;main.c: 844:                 countSeconds = 0;
  7494     0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  7495     0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  7496     0E2F  01BC               	clrf	_countSeconds
  7497     0E30  01BD               	clrf	_countSeconds+1
  7498                           
  7499                           ;main.c: 845:             }
  7500     0E31  2E4D               	goto	i1l2928
  7501     0E32                     i1l2918:
  7502     0E32  304C               	movlw	76
  7503     0E33  1683               	bsf	3,5	;RP0=1, select bank1
  7504     0E34  1303               	bcf	3,6	;RP1=0, select bank1
  7505     0E35  0663               	xorwf	_seconds^(0+128),w
  7506     0E36  301D               	movlw	29
  7507     0E37  1903               	skipnz
  7508     0E38  0664               	xorwf	(_seconds+1)^(0+128),w
  7509     0E39  0465               	iorwf	(_seconds+2)^(0+128),w
  7510     0E3A  0466               	iorwf	(_seconds+3)^(0+128),w
  7511     0E3B  1D03               	btfss	3,2
  7512     0E3C  2E3E               	goto	u285_21
  7513     0E3D  2E3F               	goto	u285_20
  7514     0E3E                     u285_21:
  7515     0E3E  2E44               	goto	i1l2926
  7516     0E3F                     u285_20:
  7517     0E3F                     i1l2920:
  7518                           
  7519                           ;main.c: 848:             {;main.c: 849:                 pr_countdown = 1;
  7520     0E3F  1683               	bsf	3,5	;RP0=1, select bank3
  7521     0E40  1703               	bsf	3,6	;RP1=1, select bank3
  7522     0E41  0194               	clrf	_pr_countdown^(0+384)
  7523     0E42  0A94               	incf	_pr_countdown^(0+384),f
  7524     0E43  2E23               	goto	i1l2914
  7525     0E44                     i1l2926:
  7526                           
  7527                           ;main.c: 855:             {;main.c: 857:                 UART_TxString(packet, 0);
  7528     0E44  1283               	bcf	3,5	;RP0=0, select bank0
  7529     0E45  1303               	bcf	3,6	;RP1=0, select bank0
  7530     0E46  01B3               	clrf	i1UART_TxString@is_ACK
  7531     0E47  30B3               	movlw	(low (_packet| (0+256)))& (0+255)
  7532     0E48  120A  158A  2451  120A  158A  	fcall	i1_UART_TxString
  7533     0E4D                     i1l2928:
  7534                           
  7535                           ;main.c: 860:         T0IF = 0;
  7536     0E4D  110B               	bcf	11,2	;volatile
  7537     0E4E                     i1l331:
  7538     0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  7539     0E4F  1303               	bcf	3,6	;RP1=0, select bank0
  7540     0E50  083B               	movf	??_IRS+3,w
  7541     0E51  008A               	movwf	10
  7542     0E52  083A               	movf	??_IRS+2,w
  7543     0E53  0084               	movwf	4
  7544     0E54  0E39               	swapf	??_IRS+1,w
  7545     0E55  0083               	movwf	3
  7546     0E56  0EFE               	swapf	btemp,f
  7547     0E57  0E7E               	swapf	btemp,w
  7548     0E58  0009               	retfie
  7549     0E59                     __end_of_IRS:
  7550                           
  7551                           	psect	intentry
  7552     0004                     __pintentry:	
  7553                           ;incstack = 0
  7554                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7555                           
  7556     0004                     interrupt_function:
  7557     007E                     saved_w	set	btemp
  7558     0004  00FE               	movwf	btemp
  7559     0005  0E03               	swapf	3,w
  7560     0006  1283               	bcf	3,5	;RP0=0, select bank0
  7561     0007  1303               	bcf	3,6	;RP1=0, select bank0
  7562     0008  00B9               	movwf	??_IRS+1
  7563     0009  0804               	movf	4,w
  7564     000A  00BA               	movwf	??_IRS+2
  7565     000B  080A               	movf	10,w
  7566     000C  00BB               	movwf	??_IRS+3
  7567     000D  120A  158A  2DCB   	ljmp	_IRS
  7568                           
  7569                           	psect	text30
  7570     0C51                     __ptext30:	
  7571 ;; *************** function i1_UART_TxString *****************
  7572 ;; Defined at:
  7573 ;;		line 800 in file "main.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;  str             1    wreg     PTR const unsigned char 
  7576 ;;		 -> packet(15), 
  7577 ;;  is_ACK          1   19[BANK0 ] unsigned char 
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;  str             1   21[BANK0 ] PTR const unsigned char 
  7580 ;;		 -> packet(15), 
  7581 ;;  n               2   22[BANK0 ] unsigned int 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      void 
  7584 ;; Registers used:
  7585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7591 ;;      Params:         0       1       0       0       0
  7592 ;;      Locals:         0       3       0       0       0
  7593 ;;      Temps:          0       1       0       0       0
  7594 ;;      Totals:         0       5       0       0       0
  7595 ;;Total ram usage:        5 bytes
  7596 ;; Hardware stack levels used: 1
  7597 ;; Hardware stack levels required when called: 2
  7598 ;; This function calls:
  7599 ;;		i1_UART_TxChar
  7600 ;;		i1___awmod
  7601 ;;		i1___wmul
  7602 ;;		i1_rand
  7603 ;;		i1_srand
  7604 ;; This function is called by:
  7605 ;;		_IRS
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609     0C51                     i1_UART_TxString:	
  7610                           ;psect for function i1_UART_TxString
  7611                           
  7612                           
  7613                           ;incstack = 0
  7614                           ; Regs used in i1_UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7615                           ;i1UART_TxString@str stored from wreg
  7616     0C51  1283               	bcf	3,5	;RP0=0, select bank0
  7617     0C52  1303               	bcf	3,6	;RP1=0, select bank0
  7618     0C53  00B5               	movwf	i1UART_TxString@str
  7619     0C54                     i1l2648:
  7620                           
  7621                           ;main.c: 800: void UART_TxString(const char *str, char is_ACK);main.c: 801: {;main.c: 80
      +                          2:     unsigned int n = 0;
  7622     0C54  01B6               	clrf	i1UART_TxString@n
  7623     0C55  01B7               	clrf	i1UART_TxString@n+1
  7624                           
  7625                           ;main.c: 804:     while(str[n] != '\0')
  7626     0C56  2C6A               	goto	i1l2654
  7627     0C57                     i1l2650:
  7628                           
  7629                           ;main.c: 805:     {;main.c: 806:         UART_TxChar(str[n]);
  7630     0C57  0836               	movf	i1UART_TxString@n,w
  7631     0C58  0735               	addwf	i1UART_TxString@str,w
  7632     0C59  00B4               	movwf	??i1_UART_TxString
  7633     0C5A  0834               	movf	??i1_UART_TxString,w
  7634     0C5B  0084               	movwf	4
  7635     0C5C  0800               	movf	0,w
  7636     0C5D  160A  118A  25B5  120A  158A  	fcall	i1_UART_TxChar
  7637     0C62                     i1l2652:
  7638                           
  7639                           ;main.c: 807:         n++;
  7640     0C62  3001               	movlw	1
  7641     0C63  1283               	bcf	3,5	;RP0=0, select bank0
  7642     0C64  1303               	bcf	3,6	;RP1=0, select bank0
  7643     0C65  07B6               	addwf	i1UART_TxString@n,f
  7644     0C66  1803               	skipnc
  7645     0C67  0AB7               	incf	i1UART_TxString@n+1,f
  7646     0C68  3000               	movlw	0
  7647     0C69  07B7               	addwf	i1UART_TxString@n+1,f
  7648     0C6A                     i1l2654:
  7649                           
  7650                           ;main.c: 804:     while(str[n] != '\0')
  7651     0C6A  0836               	movf	i1UART_TxString@n,w
  7652     0C6B  0735               	addwf	i1UART_TxString@str,w
  7653     0C6C  00B4               	movwf	??i1_UART_TxString
  7654     0C6D  0834               	movf	??i1_UART_TxString,w
  7655     0C6E  0084               	movwf	4
  7656     0C6F  1783               	bsf	3,7	;select IRP bank2
  7657     0C70  0800               	movf	0,w
  7658     0C71  1D03               	btfss	3,2
  7659     0C72  2C74               	goto	u256_21
  7660     0C73  2C75               	goto	u256_20
  7661     0C74                     u256_21:
  7662     0C74  2C57               	goto	i1l2650
  7663     0C75                     u256_20:
  7664     0C75                     i1l2656:
  7665                           
  7666                           ;main.c: 810:     if(is_ACK == 0)
  7667     0C75  0833               	movf	i1UART_TxString@is_ACK,w
  7668     0C76  1D03               	btfss	3,2
  7669     0C77  2C79               	goto	u257_21
  7670     0C78  2C7A               	goto	u257_20
  7671     0C79                     u257_21:
  7672     0C79  2CC9               	goto	i1l319
  7673     0C7A                     u257_20:
  7674     0C7A                     i1l2658:
  7675                           
  7676                           ;main.c: 811:     {;main.c: 814:         srand(milliseconds);
  7677     0C7A  1683               	bsf	3,5	;RP0=1, select bank1
  7678     0C7B  1303               	bcf	3,6	;RP1=0, select bank1
  7679     0C7C  0868               	movf	(_milliseconds+1)^(0+128),w
  7680     0C7D  00F1               	movwf	i1srand@x+1
  7681     0C7E  0867               	movf	_milliseconds^(0+128),w
  7682     0C7F  00F0               	movwf	i1srand@x
  7683     0C80  160A  118A  25A1  120A  158A  	fcall	i1_srand
  7684     0C85                     i1l2660:
  7685                           
  7686                           ;main.c: 815:         milliseconds = 0;
  7687     0C85  3000               	movlw	0
  7688     0C86  1683               	bsf	3,5	;RP0=1, select bank1
  7689     0C87  1303               	bcf	3,6	;RP1=0, select bank1
  7690     0C88  00EA               	movwf	(_milliseconds+3)^(0+128)
  7691     0C89  3000               	movlw	0
  7692     0C8A  00E9               	movwf	(_milliseconds+2)^(0+128)
  7693     0C8B  3000               	movlw	0
  7694     0C8C  00E8               	movwf	(_milliseconds+1)^(0+128)
  7695     0C8D  3000               	movlw	0
  7696     0C8E  00E7               	movwf	_milliseconds^(0+128)
  7697     0C8F                     i1l2662:
  7698                           
  7699                           ;main.c: 817:         seconds = ((rand()%10)+5) * 250;
  7700     0C8F  300A               	movlw	10
  7701     0C90  1283               	bcf	3,5	;RP0=0, select bank0
  7702     0C91  1303               	bcf	3,6	;RP1=0, select bank0
  7703     0C92  00A7               	movwf	i1___awmod@divisor
  7704     0C93  3000               	movlw	0
  7705     0C94  00A8               	movwf	i1___awmod@divisor+1
  7706     0C95  160A  118A  2772  120A  158A  	fcall	i1_rand
  7707     0C9A  1283               	bcf	3,5	;RP0=0, select bank0
  7708     0C9B  1303               	bcf	3,6	;RP1=0, select bank0
  7709     0C9C  0821               	movf	?i1_rand+1,w
  7710     0C9D  00AA               	movwf	i1___awmod@dividend+1
  7711     0C9E  0820               	movf	?i1_rand,w
  7712     0C9F  00A9               	movwf	i1___awmod@dividend
  7713     0CA0  120A  158A  2126  120A  158A  	fcall	i1___awmod
  7714     0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  7715     0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  7716     0CA7  0827               	movf	?i1___awmod,w
  7717     0CA8  3E05               	addlw	5
  7718     0CA9  00AD               	movwf	i1___wmul@multiplier
  7719     0CAA  0828               	movf	?i1___awmod+1,w
  7720     0CAB  1803               	skipnc
  7721     0CAC  3E01               	addlw	1
  7722     0CAD  3E00               	addlw	0
  7723     0CAE  00AE               	movwf	i1___wmul@multiplier+1
  7724     0CAF  30FA               	movlw	250
  7725     0CB0  00AF               	movwf	i1___wmul@multiplicand
  7726     0CB1  3000               	movlw	0
  7727     0CB2  00B0               	movwf	i1___wmul@multiplicand+1
  7728     0CB3  160A  118A  261F  120A  158A  	fcall	i1___wmul
  7729     0CB8  1283               	bcf	3,5	;RP0=0, select bank0
  7730     0CB9  1303               	bcf	3,6	;RP1=0, select bank0
  7731     0CBA  082D               	movf	?i1___wmul,w
  7732     0CBB  1683               	bsf	3,5	;RP0=1, select bank1
  7733     0CBC  1303               	bcf	3,6	;RP1=0, select bank1
  7734     0CBD  00E3               	movwf	_seconds^(0+128)
  7735     0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  7736     0CBF  1303               	bcf	3,6	;RP1=0, select bank0
  7737     0CC0  082E               	movf	?i1___wmul+1,w
  7738     0CC1  1683               	bsf	3,5	;RP0=1, select bank1
  7739     0CC2  1303               	bcf	3,6	;RP1=0, select bank1
  7740     0CC3  00E4               	movwf	(_seconds+1)^(0+128)
  7741     0CC4  3000               	movlw	0
  7742     0CC5  1BE4               	btfsc	(_seconds+1)^(0+128),7
  7743     0CC6  30FF               	movlw	255
  7744     0CC7  00E5               	movwf	(_seconds+2)^(0+128)
  7745     0CC8  00E6               	movwf	(_seconds+3)^(0+128)
  7746     0CC9                     i1l319:
  7747     0CC9  0008               	return
  7748     0CCA                     __end_ofi1_UART_TxString:
  7749                           
  7750                           	psect	text31
  7751     15A1                     __ptext31:	
  7752 ;; *************** function i1_srand *****************
  7753 ;; Defined at:
  7754 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  x               2    0[COMMON] unsigned int 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;		None
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      void 
  7761 ;; Registers used:
  7762 ;;		wreg
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7768 ;;      Params:         2       0       0       0       0
  7769 ;;      Locals:         0       0       0       0       0
  7770 ;;      Temps:          0       0       0       0       0
  7771 ;;      Totals:         2       0       0       0       0
  7772 ;;Total ram usage:        2 bytes
  7773 ;; Hardware stack levels used: 1
  7774 ;; This function calls:
  7775 ;;		Nothing
  7776 ;; This function is called by:
  7777 ;;		i1_UART_TxString
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781     15A1                     i1_srand:	
  7782                           ;psect for function i1_srand
  7783                           
  7784     15A1                     i1l2428:	
  7785                           ;incstack = 0
  7786                           ; Regs used in i1_srand: [wreg]
  7787                           
  7788     15A1  0870               	movf	i1srand@x,w
  7789     15A2  1283               	bcf	3,5	;RP0=0, select bank0
  7790     15A3  1303               	bcf	3,6	;RP1=0, select bank0
  7791     15A4  00D0               	movwf	_randx
  7792     15A5  0871               	movf	i1srand@x+1,w
  7793     15A6  00D1               	movwf	_randx+1
  7794     15A7  01D2               	clrf	_randx+2
  7795     15A8  01D3               	clrf	_randx+3
  7796     15A9                     i1l907:
  7797     15A9  0008               	return
  7798     15AA                     __end_ofi1_srand:
  7799                           
  7800                           	psect	text32
  7801     1772                     __ptext32:	
  7802 ;; *************** function i1_rand *****************
  7803 ;; Defined at:
  7804 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;		None
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;		None
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  2    0[BANK0 ] int 
  7811 ;; Registers used:
  7812 ;;		wreg, status,2, status,0, pclath, cstack
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7818 ;;      Params:         0       2       0       0       0
  7819 ;;      Locals:         0       0       0       0       0
  7820 ;;      Temps:          0       5       0       0       0
  7821 ;;      Totals:         0       7       0       0       0
  7822 ;;Total ram usage:        7 bytes
  7823 ;; Hardware stack levels used: 1
  7824 ;; Hardware stack levels required when called: 1
  7825 ;; This function calls:
  7826 ;;		i1___lmul
  7827 ;; This function is called by:
  7828 ;;		i1_UART_TxString
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832     1772                     i1_rand:	
  7833                           ;psect for function i1_rand
  7834                           
  7835     1772                     i1l2430:	
  7836                           ;incstack = 0
  7837                           ; Regs used in i1_rand: [wreg+status,2+status,0+pclath+cstack]
  7838                           
  7839     1772  1283               	bcf	3,5	;RP0=0, select bank0
  7840     1773  1303               	bcf	3,6	;RP1=0, select bank0
  7841     1774  0853               	movf	_randx+3,w
  7842     1775  00F3               	movwf	i1___lmul@multiplier+3
  7843     1776  0852               	movf	_randx+2,w
  7844     1777  00F2               	movwf	i1___lmul@multiplier+2
  7845     1778  0851               	movf	_randx+1,w
  7846     1779  00F1               	movwf	i1___lmul@multiplier+1
  7847     177A  0850               	movf	_randx,w
  7848     177B  00F0               	movwf	i1___lmul@multiplier
  7849     177C  3041               	movlw	65
  7850     177D  00F7               	movwf	i1___lmul@multiplicand+3
  7851     177E  30C6               	movlw	198
  7852     177F  00F6               	movwf	i1___lmul@multiplicand+2
  7853     1780  304E               	movlw	78
  7854     1781  00F5               	movwf	i1___lmul@multiplicand+1
  7855     1782  306D               	movlw	109
  7856     1783  00F4               	movwf	i1___lmul@multiplicand
  7857     1784  160A  118A  272C  160A  118A  	fcall	i1___lmul
  7858     1789  0873               	movf	?i1___lmul+3,w
  7859     178A  1283               	bcf	3,5	;RP0=0, select bank0
  7860     178B  1303               	bcf	3,6	;RP1=0, select bank0
  7861     178C  00D3               	movwf	_randx+3
  7862     178D  0872               	movf	?i1___lmul+2,w
  7863     178E  00D2               	movwf	_randx+2
  7864     178F  0871               	movf	?i1___lmul+1,w
  7865     1790  00D1               	movwf	_randx+1
  7866     1791  0870               	movf	?i1___lmul,w
  7867     1792  00D0               	movwf	_randx
  7868     1793                     i1l2432:
  7869     1793  3039               	movlw	57
  7870     1794  07D0               	addwf	_randx,f
  7871     1795  3030               	movlw	48
  7872     1796  1803               	skipnc
  7873     1797  3031               	movlw	49
  7874     1798  07D1               	addwf	_randx+1,f
  7875     1799  3000               	movlw	0
  7876     179A  1803               	skipnc
  7877     179B  3001               	movlw	1
  7878     179C  07D2               	addwf	_randx+2,f
  7879     179D  3000               	movlw	0
  7880     179E  1803               	skipnc
  7881     179F  3001               	movlw	1
  7882     17A0  07D3               	addwf	_randx+3,f
  7883     17A1                     i1l2434:
  7884     17A1  0850               	movf	_randx,w
  7885     17A2  00A2               	movwf	??i1_rand
  7886     17A3  0851               	movf	_randx+1,w
  7887     17A4  00A3               	movwf	??i1_rand+1
  7888     17A5  0852               	movf	_randx+2,w
  7889     17A6  00A4               	movwf	??i1_rand+2
  7890     17A7  0853               	movf	_randx+3,w
  7891     17A8  00A5               	movwf	??i1_rand+3
  7892     17A9  3010               	movlw	16
  7893     17AA  00A6               	movwf	??i1_rand+4
  7894     17AB                     u224_25:
  7895     17AB  0D25               	rlf	??i1_rand+3,w
  7896     17AC  0CA5               	rrf	??i1_rand+3,f
  7897     17AD  0CA4               	rrf	??i1_rand+2,f
  7898     17AE  0CA3               	rrf	??i1_rand+1,f
  7899     17AF  0CA2               	rrf	??i1_rand,f
  7900     17B0                     u224_20:
  7901     17B0  0BA6               	decfsz	??i1_rand+4,f
  7902     17B1  2FAB               	goto	u224_25
  7903     17B2  30FF               	movlw	255
  7904     17B3  0522               	andwf	??i1_rand,w
  7905     17B4  00A0               	movwf	?i1_rand
  7906     17B5  307F               	movlw	127
  7907     17B6  0523               	andwf	??i1_rand+1,w
  7908     17B7  00A1               	movwf	?i1_rand+1
  7909     17B8                     i1l910:
  7910     17B8  0008               	return
  7911     17B9                     __end_ofi1_rand:
  7912                           
  7913                           	psect	text33
  7914     172C                     __ptext33:	
  7915 ;; *************** function i1___lmul *****************
  7916 ;; Defined at:
  7917 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  multiplier      4    0[COMMON] unsigned long 
  7920 ;;  multiplicand    4    4[COMMON] unsigned long 
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;  product         4    9[COMMON] unsigned long 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  4    0[COMMON] unsigned long 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7932 ;;      Params:         8       0       0       0       0
  7933 ;;      Locals:         4       0       0       0       0
  7934 ;;      Temps:          1       0       0       0       0
  7935 ;;      Totals:        13       0       0       0       0
  7936 ;;Total ram usage:       13 bytes
  7937 ;; Hardware stack levels used: 1
  7938 ;; This function calls:
  7939 ;;		Nothing
  7940 ;; This function is called by:
  7941 ;;		i1_rand
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945     172C                     i1___lmul:	
  7946                           ;psect for function i1___lmul
  7947                           
  7948     172C                     i1l2118:	
  7949                           ;incstack = 0
  7950                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  7951                           
  7952     172C  3000               	movlw	0
  7953     172D  00FC               	movwf	i1___lmul@product+3
  7954     172E  3000               	movlw	0
  7955     172F  00FB               	movwf	i1___lmul@product+2
  7956     1730  3000               	movlw	0
  7957     1731  00FA               	movwf	i1___lmul@product+1
  7958     1732  3000               	movlw	0
  7959     1733  00F9               	movwf	i1___lmul@product
  7960     1734                     i1l2120:
  7961     1734  1C70               	btfss	i1___lmul@multiplier,0
  7962     1735  2F37               	goto	u173_21
  7963     1736  2F38               	goto	u173_20
  7964     1737                     u173_21:
  7965     1737  2F4F               	goto	i1l2124
  7966     1738                     u173_20:
  7967     1738                     i1l2122:
  7968     1738  0874               	movf	i1___lmul@multiplicand,w
  7969     1739  07F9               	addwf	i1___lmul@product,f
  7970     173A  0875               	movf	i1___lmul@multiplicand+1,w
  7971     173B  1103               	clrz
  7972     173C  1803               	skipnc
  7973     173D  3E01               	addlw	1
  7974     173E  1903               	skipnz
  7975     173F  2F41               	goto	u174_21
  7976     1740  07FA               	addwf	i1___lmul@product+1,f
  7977     1741                     u174_21:
  7978     1741  0876               	movf	i1___lmul@multiplicand+2,w
  7979     1742  1103               	clrz
  7980     1743  1803               	skipnc
  7981     1744  3E01               	addlw	1
  7982     1745  1903               	skipnz
  7983     1746  2F48               	goto	u174_22
  7984     1747  07FB               	addwf	i1___lmul@product+2,f
  7985     1748                     u174_22:
  7986     1748  0877               	movf	i1___lmul@multiplicand+3,w
  7987     1749  1103               	clrz
  7988     174A  1803               	skipnc
  7989     174B  3E01               	addlw	1
  7990     174C  1903               	skipnz
  7991     174D  2F4F               	goto	u174_23
  7992     174E  07FC               	addwf	i1___lmul@product+3,f
  7993     174F                     u174_23:
  7994     174F                     i1l2124:
  7995     174F  3001               	movlw	1
  7996     1750  00F8               	movwf	??i1___lmul
  7997     1751                     u175_25:
  7998     1751  1003               	clrc
  7999     1752  0DF4               	rlf	i1___lmul@multiplicand,f
  8000     1753  0DF5               	rlf	i1___lmul@multiplicand+1,f
  8001     1754  0DF6               	rlf	i1___lmul@multiplicand+2,f
  8002     1755  0DF7               	rlf	i1___lmul@multiplicand+3,f
  8003     1756  0BF8               	decfsz	??i1___lmul,f
  8004     1757  2F51               	goto	u175_25
  8005     1758                     i1l2126:
  8006     1758  3001               	movlw	1
  8007     1759                     u176_25:
  8008     1759  1003               	clrc
  8009     175A  0CF3               	rrf	i1___lmul@multiplier+3,f
  8010     175B  0CF2               	rrf	i1___lmul@multiplier+2,f
  8011     175C  0CF1               	rrf	i1___lmul@multiplier+1,f
  8012     175D  0CF0               	rrf	i1___lmul@multiplier,f
  8013     175E  3EFF               	addlw	-1
  8014     175F  1D03               	skipz
  8015     1760  2F59               	goto	u176_25
  8016     1761  0873               	movf	i1___lmul@multiplier+3,w
  8017     1762  0472               	iorwf	i1___lmul@multiplier+2,w
  8018     1763  0471               	iorwf	i1___lmul@multiplier+1,w
  8019     1764  0470               	iorwf	i1___lmul@multiplier,w
  8020     1765  1D03               	skipz
  8021     1766  2F68               	goto	u177_21
  8022     1767  2F69               	goto	u177_20
  8023     1768                     u177_21:
  8024     1768  2F34               	goto	i1l2120
  8025     1769                     u177_20:
  8026     1769                     i1l2128:
  8027     1769  087C               	movf	i1___lmul@product+3,w
  8028     176A  00F3               	movwf	?i1___lmul+3
  8029     176B  087B               	movf	i1___lmul@product+2,w
  8030     176C  00F2               	movwf	?i1___lmul+2
  8031     176D  087A               	movf	i1___lmul@product+1,w
  8032     176E  00F1               	movwf	?i1___lmul+1
  8033     176F  0879               	movf	i1___lmul@product,w
  8034     1770  00F0               	movwf	?i1___lmul
  8035     1771                     i1l468:
  8036     1771  0008               	return
  8037     1772                     __end_ofi1___lmul:
  8038                           
  8039                           	psect	text34
  8040     161F                     __ptext34:	
  8041 ;; *************** function i1___wmul *****************
  8042 ;; Defined at:
  8043 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;  multiplier      2   13[BANK0 ] unsigned int 
  8046 ;;  multiplicand    2   15[BANK0 ] unsigned int 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  product         2   17[BANK0 ] unsigned int 
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  2   13[BANK0 ] unsigned int 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2, status,0
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8058 ;;      Params:         0       4       0       0       0
  8059 ;;      Locals:         0       2       0       0       0
  8060 ;;      Temps:          0       0       0       0       0
  8061 ;;      Totals:         0       6       0       0       0
  8062 ;;Total ram usage:        6 bytes
  8063 ;; Hardware stack levels used: 1
  8064 ;; This function calls:
  8065 ;;		Nothing
  8066 ;; This function is called by:
  8067 ;;		i1_UART_TxString
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071     161F                     i1___wmul:	
  8072                           ;psect for function i1___wmul
  8073                           
  8074     161F                     i1l2376:	
  8075                           ;incstack = 0
  8076                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  8077                           
  8078     161F  1283               	bcf	3,5	;RP0=0, select bank0
  8079     1620  1303               	bcf	3,6	;RP1=0, select bank0
  8080     1621  01B1               	clrf	i1___wmul@product
  8081     1622  01B2               	clrf	i1___wmul@product+1
  8082     1623                     i1l2378:
  8083     1623  1C2D               	btfss	i1___wmul@multiplier,0
  8084     1624  2E26               	goto	u211_21
  8085     1625  2E27               	goto	u211_20
  8086     1626                     u211_21:
  8087     1626  2E2D               	goto	i1l454
  8088     1627                     u211_20:
  8089     1627                     i1l2380:
  8090     1627  082F               	movf	i1___wmul@multiplicand,w
  8091     1628  07B1               	addwf	i1___wmul@product,f
  8092     1629  1803               	skipnc
  8093     162A  0AB2               	incf	i1___wmul@product+1,f
  8094     162B  0830               	movf	i1___wmul@multiplicand+1,w
  8095     162C  07B2               	addwf	i1___wmul@product+1,f
  8096     162D                     i1l454:
  8097     162D  3001               	movlw	1
  8098     162E                     u212_25:
  8099     162E  1003               	clrc
  8100     162F  0DAF               	rlf	i1___wmul@multiplicand,f
  8101     1630  0DB0               	rlf	i1___wmul@multiplicand+1,f
  8102     1631  3EFF               	addlw	-1
  8103     1632  1D03               	skipz
  8104     1633  2E2E               	goto	u212_25
  8105     1634                     i1l2382:
  8106     1634  3001               	movlw	1
  8107     1635                     u213_25:
  8108     1635  1003               	clrc
  8109     1636  0CAE               	rrf	i1___wmul@multiplier+1,f
  8110     1637  0CAD               	rrf	i1___wmul@multiplier,f
  8111     1638  3EFF               	addlw	-1
  8112     1639  1D03               	skipz
  8113     163A  2E35               	goto	u213_25
  8114     163B                     i1l2384:
  8115     163B  082D               	movf	i1___wmul@multiplier,w
  8116     163C  042E               	iorwf	i1___wmul@multiplier+1,w
  8117     163D  1D03               	btfss	3,2
  8118     163E  2E40               	goto	u214_21
  8119     163F  2E41               	goto	u214_20
  8120     1640                     u214_21:
  8121     1640  2E23               	goto	i1l2378
  8122     1641                     u214_20:
  8123     1641                     i1l2386:
  8124     1641  0832               	movf	i1___wmul@product+1,w
  8125     1642  00AE               	movwf	?i1___wmul+1
  8126     1643  0831               	movf	i1___wmul@product,w
  8127     1644  00AD               	movwf	?i1___wmul
  8128     1645                     i1l456:
  8129     1645  0008               	return
  8130     1646                     __end_ofi1___wmul:
  8131                           
  8132                           	psect	text35
  8133     0926                     __ptext35:	
  8134 ;; *************** function i1___awmod *****************
  8135 ;; Defined at:
  8136 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  divisor         2    7[BANK0 ] int 
  8139 ;;  dividend        2    9[BANK0 ] int 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  sign            1   12[BANK0 ] unsigned char 
  8142 ;;  counter         1   11[BANK0 ] unsigned char 
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  2    7[BANK0 ] int 
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, status,0
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8152 ;;      Params:         0       4       0       0       0
  8153 ;;      Locals:         0       2       0       0       0
  8154 ;;      Temps:          1       0       0       0       0
  8155 ;;      Totals:         1       6       0       0       0
  8156 ;;Total ram usage:        7 bytes
  8157 ;; Hardware stack levels used: 1
  8158 ;; This function calls:
  8159 ;;		Nothing
  8160 ;; This function is called by:
  8161 ;;		i1_UART_TxString
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165     0926                     i1___awmod:	
  8166                           ;psect for function i1___awmod
  8167                           
  8168     0926                     i1l2390:	
  8169                           ;incstack = 0
  8170                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  8171                           
  8172     0926  1283               	bcf	3,5	;RP0=0, select bank0
  8173     0927  1303               	bcf	3,6	;RP1=0, select bank0
  8174     0928  01AC               	clrf	i1___awmod@sign
  8175     0929                     i1l2392:
  8176     0929  1FAA               	btfss	i1___awmod@dividend+1,7
  8177     092A  292C               	goto	u215_21
  8178     092B  292D               	goto	u215_20
  8179     092C                     u215_21:
  8180     092C  2934               	goto	i1l2398
  8181     092D                     u215_20:
  8182     092D                     i1l2394:
  8183     092D  09A9               	comf	i1___awmod@dividend,f
  8184     092E  09AA               	comf	i1___awmod@dividend+1,f
  8185     092F  0AA9               	incf	i1___awmod@dividend,f
  8186     0930  1903               	skipnz
  8187     0931  0AAA               	incf	i1___awmod@dividend+1,f
  8188     0932                     i1l2396:
  8189     0932  01AC               	clrf	i1___awmod@sign
  8190     0933  0AAC               	incf	i1___awmod@sign,f
  8191     0934                     i1l2398:
  8192     0934  1FA8               	btfss	i1___awmod@divisor+1,7
  8193     0935  2937               	goto	u216_21
  8194     0936  2938               	goto	u216_20
  8195     0937                     u216_21:
  8196     0937  293D               	goto	i1l2402
  8197     0938                     u216_20:
  8198     0938                     i1l2400:
  8199     0938  09A7               	comf	i1___awmod@divisor,f
  8200     0939  09A8               	comf	i1___awmod@divisor+1,f
  8201     093A  0AA7               	incf	i1___awmod@divisor,f
  8202     093B  1903               	skipnz
  8203     093C  0AA8               	incf	i1___awmod@divisor+1,f
  8204     093D                     i1l2402:
  8205     093D  0827               	movf	i1___awmod@divisor,w
  8206     093E  0428               	iorwf	i1___awmod@divisor+1,w
  8207     093F  1903               	btfsc	3,2
  8208     0940  2942               	goto	u217_21
  8209     0941  2943               	goto	u217_20
  8210     0942                     u217_21:
  8211     0942  2972               	goto	i1l2420
  8212     0943                     u217_20:
  8213     0943                     i1l2404:
  8214     0943  01AB               	clrf	i1___awmod@counter
  8215     0944  0AAB               	incf	i1___awmod@counter,f
  8216     0945  2951               	goto	i1l2410
  8217     0946                     i1l2406:
  8218     0946  3001               	movlw	1
  8219     0947                     u218_25:
  8220     0947  1003               	clrc
  8221     0948  0DA7               	rlf	i1___awmod@divisor,f
  8222     0949  0DA8               	rlf	i1___awmod@divisor+1,f
  8223     094A  3EFF               	addlw	-1
  8224     094B  1D03               	skipz
  8225     094C  2947               	goto	u218_25
  8226     094D                     i1l2408:
  8227     094D  3001               	movlw	1
  8228     094E  00FD               	movwf	??i1___awmod
  8229     094F  087D               	movf	??i1___awmod,w
  8230     0950  07AB               	addwf	i1___awmod@counter,f
  8231     0951                     i1l2410:
  8232     0951  1FA8               	btfss	i1___awmod@divisor+1,7
  8233     0952  2954               	goto	u219_21
  8234     0953  2955               	goto	u219_20
  8235     0954                     u219_21:
  8236     0954  2946               	goto	i1l2406
  8237     0955                     u219_20:
  8238     0955                     i1l2412:
  8239     0955  0828               	movf	i1___awmod@divisor+1,w
  8240     0956  022A               	subwf	i1___awmod@dividend+1,w
  8241     0957  1D03               	skipz
  8242     0958  295B               	goto	u220_25
  8243     0959  0827               	movf	i1___awmod@divisor,w
  8244     095A  0229               	subwf	i1___awmod@dividend,w
  8245     095B                     u220_25:
  8246     095B  1C03               	skipc
  8247     095C  295E               	goto	u220_21
  8248     095D  295F               	goto	u220_20
  8249     095E                     u220_21:
  8250     095E  2965               	goto	i1l2416
  8251     095F                     u220_20:
  8252     095F                     i1l2414:
  8253     095F  0827               	movf	i1___awmod@divisor,w
  8254     0960  02A9               	subwf	i1___awmod@dividend,f
  8255     0961  0828               	movf	i1___awmod@divisor+1,w
  8256     0962  1C03               	skipc
  8257     0963  03AA               	decf	i1___awmod@dividend+1,f
  8258     0964  02AA               	subwf	i1___awmod@dividend+1,f
  8259     0965                     i1l2416:
  8260     0965  3001               	movlw	1
  8261     0966                     u221_25:
  8262     0966  1003               	clrc
  8263     0967  0CA8               	rrf	i1___awmod@divisor+1,f
  8264     0968  0CA7               	rrf	i1___awmod@divisor,f
  8265     0969  3EFF               	addlw	-1
  8266     096A  1D03               	skipz
  8267     096B  2966               	goto	u221_25
  8268     096C                     i1l2418:
  8269     096C  3001               	movlw	1
  8270     096D  02AB               	subwf	i1___awmod@counter,f
  8271     096E  1D03               	btfss	3,2
  8272     096F  2971               	goto	u222_21
  8273     0970  2972               	goto	u222_20
  8274     0971                     u222_21:
  8275     0971  2955               	goto	i1l2412
  8276     0972                     u222_20:
  8277     0972                     i1l2420:
  8278     0972  082C               	movf	i1___awmod@sign,w
  8279     0973  1903               	btfsc	3,2
  8280     0974  2976               	goto	u223_21
  8281     0975  2977               	goto	u223_20
  8282     0976                     u223_21:
  8283     0976  297C               	goto	i1l2424
  8284     0977                     u223_20:
  8285     0977                     i1l2422:
  8286     0977  09A9               	comf	i1___awmod@dividend,f
  8287     0978  09AA               	comf	i1___awmod@dividend+1,f
  8288     0979  0AA9               	incf	i1___awmod@dividend,f
  8289     097A  1903               	skipnz
  8290     097B  0AAA               	incf	i1___awmod@dividend+1,f
  8291     097C                     i1l2424:
  8292     097C  082A               	movf	i1___awmod@dividend+1,w
  8293     097D  00A8               	movwf	?i1___awmod+1
  8294     097E  0829               	movf	i1___awmod@dividend,w
  8295     097F  00A7               	movwf	?i1___awmod
  8296     0980                     i1l620:
  8297     0980  0008               	return
  8298     0981                     __end_ofi1___awmod:
  8299                           
  8300                           	psect	text36
  8301     15B5                     __ptext36:	
  8302 ;; *************** function i1_UART_TxChar *****************
  8303 ;; Defined at:
  8304 ;;		line 790 in file "main.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;  ch              1    wreg     unsigned char 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  ch              1    1[COMMON] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      void 
  8311 ;; Registers used:
  8312 ;;		wreg, status,2, status,0
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8318 ;;      Params:         0       0       0       0       0
  8319 ;;      Locals:         1       0       0       0       0
  8320 ;;      Temps:          1       0       0       0       0
  8321 ;;      Totals:         2       0       0       0       0
  8322 ;;Total ram usage:        2 bytes
  8323 ;; Hardware stack levels used: 1
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		i1_UART_TxString
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331     15B5                     i1_UART_TxChar:	
  8332                           ;psect for function i1_UART_TxChar
  8333                           
  8334                           
  8335                           ;incstack = 0
  8336                           ; Regs used in i1_UART_TxChar: [wreg+status,2+status,0]
  8337                           ;i1UART_TxChar@ch stored from wreg
  8338     15B5  00F1               	movwf	i1UART_TxChar@ch
  8339     15B6                     i1l2370:
  8340     15B6                     i1l309:	
  8341                           ;main.c: 790: void UART_TxChar(char ch);main.c: 791: {;main.c: 793:     while(!(PIR1 & 0
      +                          x10));
  8342                           
  8343     15B6  1283               	bcf	3,5	;RP0=0, select bank0
  8344     15B7  1303               	bcf	3,6	;RP1=0, select bank0
  8345     15B8  1E0C               	btfss	12,4	;volatile
  8346     15B9  2DBB               	goto	u210_21
  8347     15BA  2DBC               	goto	u210_20
  8348     15BB                     u210_21:
  8349     15BB  2DB6               	goto	i1l309
  8350     15BC                     u210_20:
  8351     15BC                     i1l2372:
  8352                           
  8353                           ;main.c: 795:     PIR1 &= ~0x10;
  8354     15BC  30EF               	movlw	239
  8355     15BD  00F0               	movwf	??i1_UART_TxChar
  8356     15BE  0870               	movf	??i1_UART_TxChar,w
  8357     15BF  058C               	andwf	12,f	;volatile
  8358     15C0                     i1l2374:
  8359                           
  8360                           ;main.c: 797:     TXREG = ch;
  8361     15C0  0871               	movf	i1UART_TxChar@ch,w
  8362     15C1  0099               	movwf	25	;volatile
  8363     15C2                     i1l312:
  8364     15C2  0008               	return
  8365     15C3                     __end_ofi1_UART_TxChar:
  8366     007E                     btemp	set	126	;btemp
  8367     007E                     wtemp0	set	126
  8368                           
  8369                           	psect	idloc
  8370                           
  8371                           ;Config register IDLOC0 @ 0x2000
  8372                           ;	unspecified, using default values
  8373     2000                     	org	8192
  8374     2000  3FFF               	dw	16383
  8375                           
  8376                           ;Config register IDLOC1 @ 0x2001
  8377                           ;	unspecified, using default values
  8378     2001                     	org	8193
  8379     2001  3FFF               	dw	16383
  8380                           
  8381                           ;Config register IDLOC2 @ 0x2002
  8382                           ;	unspecified, using default values
  8383     2002                     	org	8194
  8384     2002  3FFF               	dw	16383
  8385                           
  8386                           ;Config register IDLOC3 @ 0x2003
  8387                           ;	unspecified, using default values
  8388     2003                     	org	8195
  8389     2003  3FFF               	dw	16383
  8390                           
  8391                           	psect	config
  8392                           
  8393                           ;Config register CONFIG @ 0x2007
  8394                           ;	Oscillator Selection bits
  8395                           ;	FOSC = HS, HS oscillator
  8396                           ;	Watchdog Timer Enable bit
  8397                           ;	WDTE = OFF, WDT disabled
  8398                           ;	Power-up Timer Enable bit
  8399                           ;	PWRTE = ON, PWRT enabled
  8400                           ;	Brown-out Reset Enable bit
  8401                           ;	BOREN = ON, BOR enabled
  8402                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  8403                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  8404                           ;	Data EEPROM Memory Code Protection bit
  8405                           ;	CPD = OFF, Data EEPROM code protection off
  8406                           ;	Flash Program Memory Write Enable bits
  8407                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  8408                           ;	In-Circuit Debugger Mode bit
  8409                           ;	DEBUG = 0x1, unprogrammed default
  8410                           ;	Flash Program Memory Code Protection bit
  8411                           ;	CP = OFF, Code protection off
  8412     2007                     	org	8199
  8413     2007  3FF2               	dw	16370

Data Sizes:
    Strings     235
    Constant    19
    Data        7
    BSS         139
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      52
    BANK1            80     67      79
    BANK3            96      9      69
    BANK2            96     32      82

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Fill@id	PTR unsigned char  size(1) Largest target is 4
		 -> PIC_ID(BANK3[4]), 

    CompareStrings@str2	PTR unsigned char  size(1) Largest target is 17
		 -> datoTastierino(BANK3[17]), PIC_ID(BANK3[4]), 

    CompareStrings@str1	PTR unsigned char  size(2) Largest target is 17
		 -> datoSeriale(BANK0[17]), id_dest(BANK3[4]), 

    strcopy@source	PTR unsigned char  size(1) Largest target is 5
		 -> SplitPacket@part(BANK1[5]), 

    strcopy@dest	PTR unsigned char  size(2) Largest target is 17
		 -> datoSeriale(BANK0[17]), id_dest(BANK3[4]), 

    SplitPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> dato(BANK2[50]), 

    strcat@source	PTR unsigned char  size(2) Largest target is 16
		 -> STR_18(CODE[4]), STR_14(CODE[4]), STR_10(CODE[2]), main@num_rand_s_228(BANK2[16]), 
		 -> PIC_ID(BANK3[4]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Length@str	PTR unsigned char  size(2) Largest target is 50
		 -> datoSeriale(BANK0[17]), datoTastierino(BANK3[17]), id_dest(BANK3[4]), dato(BANK2[50]), 
		 -> packet(BANK3[15]), PIC_ID(BANK3[4]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_18(CODE[4]), STR_14(CODE[4]), STR_10(CODE[2]), main@num_rand_s_228(BANK2[16]), 
		 -> PIC_ID(BANK3[4]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    ConvertToString@str	PTR unsigned char  size(1) Largest target is 16
		 -> main@num_rand_s_228(BANK2[16]), PIC_ID(BANK3[4]), main@num_rand_s(BANK2[16]), 

    lcdPrint@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_21(CODE[15]), STR_20(CODE[16]), datoTastierino(BANK3[17]), STR_19(CODE[18]), 
		 -> STR_17(CODE[16]), STR_16(CODE[13]), STR_15(CODE[15]), STR_13(CODE[12]), 
		 -> STR_12(CODE[13]), STR_11(CODE[18]), STR_9(CODE[16]), STR_8(CODE[10]), 
		 -> main@num_rand_s_228(BANK2[16]), PIC_ID(BANK3[4]), STR_7(CODE[17]), STR_6(CODE[18]), 
		 -> STR_5(CODE[10]), main@num_rand_s(BANK2[16]), STR_4(CODE[12]), STR_3(CODE[10]), 
		 -> STR_2(CODE[8]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IRS in COMMON

    i1_UART_TxString->i1___awmod
    i1_rand->i1___lmul
    i1___wmul->i1___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _IRS in BANK0

    _IRS->i1_UART_TxString
    i1_UART_TxString->i1___wmul
    i1___wmul->i1___awmod
    i1___awmod->i1_rand

Critical Paths under _main in BANK1

    _main->_init_PIC
    _read_NumPad->___wmul
    _CompareStrings->_Length
    _init_PIC->_UART_init
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _Fill->_Length
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _UART_TxString->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _SplitPacket->_strcopy
    _ConcatToPacket->_strcat
    _strcat->_Length

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_init_PIC
    _init_PIC->_ConvertToString

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    32      0   41243
                                              0 BANK2     32    32      0
                     _CompareStrings
                     _ConcatToPacket
                    _ConvertToString
                        _SplitPacket
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                         12    12      0    4324
                                             33 BANK1     12    12      0
                     _CompareStrings
                               _Fill
                            ___awmod
                             ___wmul
                       _eeprom_write
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     152
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (2) _CompareStrings                                       8     5      3     943
                                              7 BANK1      8     5      3
                             _Length
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             4     4      0   16530
                                             65 BANK1      2     2      0
                                              7 BANK3      2     2      0
                    _ConvertToString
                               _Fill
                          _UART_init
                        _eeprom_read
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
                           _lcdPrint
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2    4782
                                              4 BANK1      7     5      2
                            _lcdSend
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0    2672
                                              4 BANK1      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1    2672
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4    1106
                                             57 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) _Fill                                                 4     4      0     808
                                              7 BANK1      4     4      0
                             _Length
 ---------------------------------------------------------------------------------
 (2) _ConvertToString                                     13     8      5    4394
                                             57 BANK1      6     1      5
                                              0 BANK3      7     7      0
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                  9     7      2    1203
                                             33 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     613
                                              0 BANK1     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     985
                                             42 BANK1     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        5     4      1    3143
                                             33 BANK1      5     4      1
                        _UART_TxChar
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             13 BANK1      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                             27 BANK1      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                             20 BANK1      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SplitPacket                                         17    17      0    1449
                                             10 BANK1     17    17      0
                             _Length
                            _strcopy
 ---------------------------------------------------------------------------------
 (2) _strcopy                                             10     7      3     514
                                              0 BANK1     10     7      3
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    2797
                                             19 BANK1      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                              12    10      2     685
                                              7 BANK1     12    10      2
                             _Length
 ---------------------------------------------------------------------------------
 (3) _Length                                               7     5      2     299
                                              0 BANK1      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IRS                                                  4     4      0     844
                                             24 BANK0      4     4      0
                    i1_UART_TxString
 ---------------------------------------------------------------------------------
 (6) i1_UART_TxString                                      5     4      1     844
                                             19 BANK0      5     4      1
                      i1_UART_TxChar
                          i1___awmod
                           i1___wmul
                             i1_rand
                            i1_srand
 ---------------------------------------------------------------------------------
 (7) i1_srand                                              2     0      2      48
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) i1_rand                                               7     5      2     144
                                              0 BANK0      7     5      2
                           i1___lmul
 ---------------------------------------------------------------------------------
 (8) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                             13 BANK0      6     2      4
                          i1___awmod (ARG)
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            7     3      4     348
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UART_TxChar                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CompareStrings
     _Length
   _ConcatToPacket
     _strcat
       _Length
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
     ___almod
     ___lmul
     _pow
   _SplitPacket
     _Length
     _strcopy
   _UART_TxString
     _UART_TxChar
     ___awmod
     ___wmul
     _rand
     _srand
   _init_PIC
     _ConvertToString
     _Fill
       _Length
     _UART_init
       ___aldiv
     _eeprom_read
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
     _lcdPrint
       _lcdSend
     _lcdSend
   _lcdPrint
   _lcdSend
   _read_NumPad
     _CompareStrings
     _Fill
     ___awmod
     ___wmul
     _eeprom_write
     _rand
     _srand

 _IRS (ROOT)
   i1_UART_TxString
     i1_UART_TxChar
     i1___awmod
       i1_rand (ARG)
         i1___lmul
     i1___wmul
       i1___awmod (ARG)
       i1_rand (ARG)
     i1_rand
     i1_srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      9      45       9       71.9%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60     20      52      11       85.4%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     43      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      34       5       65.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     128      12        0.0%
ABS                  0      0     128       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Jun 30 15:38:07 2023

                          pc 0002             ??_CompareStrings 00AA                           _iS 003E  
                         _iT 019D                           fsr 0004          ___wmul@multiplicand 00BD  
           i1___wmul@product 0031                          l201 16EB                          l211 0FFF  
                        l222 06F7                          l303 062A                          l216 08CF  
                        l312 15E8                          l225 0C28                          l306 172B  
                        l243 06CF                          l228 0C50                          l180 0D43  
                        l309 15D5                          l253 0A37                          l270 15B4  
                        l319 0B6B                          l183 15FF                          l424 1603  
                        l249 17FF                          l426 161E                          l186 0AFC  
                        l450 16AF                          l267 0A95                          l195 0925  
                        l443 167C                          l283 0508                          l620 09DB  
                        l532 0D58                          l444 167C                          l189 1678  
                        l277 0474                          l454 0825                          l542 0DCA  
                        l519 0E6D                          l447 169E                          l456 083D  
                        l529 0EF5                          l468 0885                          l910 0BDC  
                        l907 15D1                          _IRS 0DCB           i1UART_TxString@str 0035  
                        _pow 16B0                          fsr0 0004                          indf 0000  
               ___awmod@sign 00BA                         ?_IRS 0070                         l3000 164C  
                       l3010 166B                         l3002 164F                         l3100 0D67  
                       l3020 16D2                         l3012 1675                         l3004 1655  
                       l3030 06D5                         l3110 0D95                         l3102 0D6F  
                       l3022 16D8                         l3014 16B3                         l3006 165E  
                       l3032 06DB                         l3040 0848                         l3120 0DC2  
                       l3112 0DA3                         l3104 0D72                         l3024 16E5  
                       l3016 16B7                         l3200 172A                         l3008 1668  
                       l3034 06F3                         l3042 084C                         l3114 0DAC  
                       l3106 0D7F                         l3018 16BA                         l3210 0AB0  
                       l3202 0A96                         l3130 0903                         l3028 06D0  
                       l3044 0863                         l3060 0E7C                         l3052 0E59  
                       l3108 0D83                         l3116 0DB2                         l3140 0F0F  
                       l3132 0EF6                         l3220 0AEA                         l3212 0AC4  
                       l3204 0A9A                         l3124 08D0                         l3300 16A6  
                       l3046 086C                         l3038 083E                         l3310 0B6C  
                       l3070 0EA0                         l3062 0E80                         l3054 0E5C  
                       l3118 0DB7                         l3150 0F80                         l3142 0F2E  
                       l3134 0EFC                         l3222 0AF3                         l3214 0ACF  
                       l3206 0AA4                         l3230 15F1                         l3126 08D5  
                       l3302 16A7                         l3320 15DA                         l3048 087D  
                       l3312 0BA9                         l3080 0ECE                         l3072 0EA4  
                       l3064 0E88                         l3056 0E60                         l3160 0FF4  
                       l3152 0FAB                         l3144 0F33                         l3136 0F02  
                       l3240 0A4A                         l3216 0AD8                         l3208 0AA7  
                       l3224 15AA                         l3232 15F5                         l3128 08FB  
                       l3304 16A8                         l3400 0445                         l3322 15E2  
                       l3330 098D                         l3314 0BB7                         l3082 0ED7  
                       l3074 0EAD                         l3066 0E90                         l3058 0E71  
                       l3154 0FD3                         l3146 0F39                         l3138 0F08  
                       l3250 0A6F                         l3234 160C                         l3218 0AE1  
                       l3226 15E9                         l3170 0A04                         l3162 09DC  
                       l3306 16AE                         l3410 0480                         l3402 0450  
                       l3500 0899                         l3340 09A1                         l3332 098F  
                       l3324 0981                         l3308 15C3                         l3076 0EBF  
                       l3068 0E93                         l3084 0EDD                         l3092 0D44  
                       l3156 0FDB                         l3148 0F66                         l3252 0A7D  
                       l3244 0A58                         l3228 15EF                         l3172 0A06  
                       l3180 0A25                         l3164 0A02                         l3420 0499  
                       l3412 0485                         l3404 0465                         l3270 0C1C  
                       l3510 08BC                         l3502 089F                         l3318 15D5  
                       l3350 09C0                         l3342 09A8                         l3334 0993  
                       l3326 0984                         l3086 0EE2                         l3078 0ECD  
                       l3094 0D47                         l3158 0FE1                         l3246 0A66  
                       l3238 0A3B                         l3190 16F7                         l3182 0A36  
                       l3430 0506                         l3422 049F                         l3414 0486  
                       l3406 0472                         l3272 0C22                         l3264 0BE0  
                       l3512 08C9                         l3504 08A7                         l3280 17BE  
                       l3352 09C7                         l3344 09AC                         l3336 0998  
                       l3328 0988                         l3520 0B16                         l3088 0EED  
                       l3096 0D4B                         l3248 0A6A                         l3192 16FA  
                       l3440 0553                         l3432 050C                         l3424 04EB  
                       l3416 048C                         l3408 047A                         l3600 00DF  
                       l3274 0C4A                         l3266 0BE2                         l3506 08AE  
                       l3282 17DA                         l3530 062E                         l3346 09B0  
                       l3338 099E                         l3354 09CD                         l3522 0B21  
                       l3514 0B00                         l3098 0D5C                         l3258 0A86  
                       l3194 16FB                         l3186 16EC                         l3370 0D16  
                       l3362 0CCA                         l3178 0A21                         l3290 168E  
                       l3450 0583                         l3442 055E                         l3426 04F8  
                       l3418 0493                         l3434 0510                         l3610 0110  
                       l3602 00E7                         l3268 0BF2                         l3508 08B6  
                       l3284 17E0                         l3540 065C                         l3532 0632  
                       l3356 09D2                         l3348 09BA                         l3524 0B26  
                       l3516 0B03                         l3196 1728                         l3188 16F2  
                       l3372 0D22                         l3364 0CFC                         l3292 1696  
                       l3460 0599                         l3452 0585                         l3444 0565  
                       l3436 0515                         l3428 0502                         l3380 040B  
                       l3700 0288                         l3612 011B                         l3620 013D  
                       l3604 00EA                         l3286 17EB                         l3278 17B9  
                       l3550 0685                         l3542 0669                         l3534 0641  
                       l3358 09D7                         l3526 0B2F                         l3518 0B0E  
                       l3198 1729                         l3374 0D38                         l3366 0D02  
                       l3294 1699                         l3470 05AD                         l3462 059B  
                       l3446 0577                         l3438 0522                         l3454 0588  
                       l3390 0418                         l3382 0411                         l3710 02C2  
                       l3702 0293                         l3630 0163                         l3622 0142  
                       l3614 0126                         l3606 00EF                         l3560 06B1  
                       l3552 068A                         l3544 066F                         l3536 0644  
                       l3528 0B39                         l3376 0D3E                         l3368 0D0D  
                       l3296 169D                         l3288 1682                         l3480 05DE  
                       l3464 05A1                         l3456 058D                         l3472 05B3  
                       l3448 057C                         l3392 042F                         l3712 02C8  
                       l3704 02A0                         l3720 02EB                         l3640 01A6  
                       l3624 014A                         l3632 0177                         l3616 012F  
                       l3608 00F8                         l3546 0674                         l3562 06B3  
                       l3538 0652                         l3378 0D41                         l3298 16A2  
                       l3482 05E3                         l3474 05BA                         l3466 05A6  
                       l3458 0594                         l3490 060D                         l3730 030B  
                       l3722 02F2                         l3714 02D3                         l3706 02A8  
                       l3650 01D4                         l3642 01B1                         l3634 017B  
                       l3626 014F                         l3618 013A                         l3548 0679  
                       l3556 0696                         l3564 06B9                         l3492 0614  
                       l3484 05E9                         l3476 05D7                         l3468 05AB  
                       l3388 0412                         l3740 0313                         l3732 030C  
                       l3724 02FB                         l3708 02BA                         l3716 02E5  
                       l3660 01EB                         l3652 01D6                         l3644 01BC  
                       l3636 0185                         l3628 0158                         l3580 0089  
                       l3572 0069                         l3558 06A9                         l3486 0606  
                       l3494 0620                         l3398 0432                         l3750 0344  
                       l3742 0321                         l3734 030E                         l3726 0306  
                       l3718 02E8                         l3670 020E                         l3662 01EC  
                       l3654 01D7                         l3646 01C5                         l3638 018E  
                       l3590 00B9                         l3582 008C                         l3574 006E  
                       l3496 0624                         l3760 037E                         l3752 0349  
                       l3744 032F                         l3736 0310                         l3728 030A  
                       l3680 023A                         l3672 0214                         l3664 01FA  
                       l3656 01E5                         l3648 01D0                         l3584 0091  
                       l3592 00BC                         l3576 0075                         l3498 0889  
                       l3850 0A8D                         l3770 039D                         l3762 0382  
                       l3754 0352                         l3738 0312                         l3746 0339  
                       l3690 0265                         l3682 023B                         l3674 021C  
                       l3658 01E9                         l3666 0203                         l3594 00C1  
                       l3586 009A                         l3578 007E                         l3852 069B  
                       l2980 0817                         l3780 03A8                         l3772 03A1  
                       l3756 035D                         l3748 033E                         l3764 0384  
                       l3692 0269                         l3684 0249                         l3676 022E  
                       l3668 0209                         l3596 00CA                         l3588 00A5  
                       l2990 0839                         l2982 081B                         l3790 03D6  
                       l3782 03A9                         l3774 03A3                         l3766 0389  
                       l3758 0371                         l3694 026B                         l3686 0257  
                       l3678 0236                         l3598 00D5                         l2984 081F  
                       l3792 03DB                         l3784 03B7                         l3776 03A4  
                       l3768 0392                         l3696 0274                         l3688 0261  
                       l2986 082C                         l2994 1649                         l3794 03E4  
                       l3786 03C5                         l3778 03A6                         l3698 027F  
                       l2988 0833                         l2996 164A                         l3796 03EF  
                       l3788 03CE                         l2998 164B                         l3798 0403  
                       ?_pow 00C1                         STR_1 07DF                         STR_2 07FE  
                       STR_3 07F4                         STR_4 07D3                         STR_5 07EA  
                       STR_6 0737                         STR_7 075B                         STR_8 07EA  
                       STR_9 076C                         _T0IF 005A                         u3000 0E90  
                       u3001 0E8F                         u3020 0EA4                         u3100 0D6F  
                       u3021 0EA3                         u3101 0D6E                         u3015 0E95  
                       u3040 0EBF                         u3120 0D83                         u3200 0F02  
                       u4000 03D6                         u3041 0EBE                         u3121 0D82  
                       u3201 0F01                         u4001 03D5                         u3130 0D95  
                       u3210 0F65                         u4010 03DB                         u3035 0EA6  
                       u3131 0D94                         u3115 0D74                         u3211 0F64  
                       u4011 03DA                         u3300 0C32                         u3060 0EDD  
                       u3220 0FF4                         u3061 0EDC                         u3045 0EBB  
                       u3221 0FF3                         u3310 0C4A                         u3070 0EE2  
                       u3150 0DB2                         u3230 0A02                         u3311 0C49  
                       u3071 0EE1                         u3055 0ECF                         u3151 0DB1  
                       u3135 0D91                         u3231 0A01                         u3320 17CF  
                       u3400 0988                         u3160 0DB7                         u3080 0D4B  
                       u3240 0A20                         u3401 0987                         u3161 0DB6  
                       u3145 0DA4                         u3081 0D4A                         u3225 0FF0  
                       u3241 0A1F                         u3330 17EB                         u3410 0993  
                       u3090 0D5C                         u3170 08E3                         u3250 0A36  
                       u3331 17EA                         u3411 0992                         u3091 0D5B  
                       u3251 0A35                         u3235 09FE                         u4027 044B  
                       u3340 17F5                         u3420 099E                         u3260 170B  
                       u3180 090D                         u3500 0445                         u3421 099D  
                       u4037 0AA0                         u3501 0444                         u3270 160C  
                       u3190 0925                         u3350 1682                         u3510 0465  
                       u3271 1609                         u4047 0AB6                         u3191 0924  
                       u3351 1681                         u3511 0464                         _PIE1 008C  
                       u3440 09B0                         u3280 0A57                         u3360 169D  
                       u3600 0522                         u3441 09AF                         u3281 0A56  
                       u3265 1706                         u4057 0ACA                         u3361 169C  
                       u3601 0521                         u3290 0BFE                         u3450 09BA  
                       u3370 16AE                         u3610 0565                         u3530 0480  
                       u3451 09B9                         u3435 09A2                         u4067 1664  
                       u3371 16AD                         u3611 0564                         u3531 047F  
                       u3380 0BD4                         u2900 16E5                         u3700 05E3  
                       u3620 0577                         u3540 0485                         u2901 16E4  
                       u3285 0A53                         u4077 1671                         u3701 05E2  
                       u3621 0576                         u3541 0484                         u3525 046A  
                       u2910 06E5                         u3390 15DA                         u3470 09CD  
                       u3710 05E9                         u3630 0583                         u3550 048C  
                       u3391 15D9                         u3471 09CC                         u3455 09B6  
                       u3711 05E8                         u3631 0582                         u3551 048B  
                       u2920 06F3                         u3480 09D2                         u3720 0620  
                       u3640 058D                         u3560 0493                         u3800 0075  
                       u2921 06F2                         u3481 09D1                         u3465 09C1  
                       u3385 0BCF                         u2905 16E1                         u3721 061F  
                       u3641 058C                         u3561 0492                         u3801 0074  
                       u2930 084C                         u3490 0D02                         u3730 062A  
                       u3650 0594                         u3570 0499                         u3810 0091  
                       u2931 084B                         u3491 0D01                         u3731 0629  
                       u3651 0593                         u3571 0498                         u3811 0090  
                       u3740 089F                         u2860 081F                         u3660 0599  
                       u3580 04F8                         u3900 0236                         u3820 00C1  
                       u3741 089E                         u2861 081E                         u2941 0855  
                       u3661 0598                         u3581 04F7                         u3901 0235  
                       u3821 00C0                         u2942 085C                         u3750 0B21  
                       u3670 05A6                         u3590 0515                         u3910 02A8  
                       u3830 00EF                         u2943 0863                         u3751 0B20  
                       u3671 05A5                         u3591 0514                         u3911 02A7  
                       u3831 00EE                         u3760 0B26                         u3680 05AB  
                       u3920 02BA                         u3840 014A                         u3761 0B25  
                       u3681 05AA                         u3585 04F4                         u3921 02B9  
                       u3841 0149                         u3770 0652                         u2890 0839  
                       u2970 087D                         u3690 05BA                         u3930 02C2  
                       u3850 014F                         u3771 0651                         u2891 0838  
                       u2875 0826                         u2971 087C                         u2955 0865  
                       u3691 05B9                         u3931 02C1                         u3851 014E  
                       u3780 065C                         u2980 0E60                         u3940 02C8  
                       u3860 0185                         _RCIF 0065                         u3781 065B  
                       u2885 082D                         u2965 086D                         u2981 0E5F  
                       u3941 02C7                         u3861 0184                         u3790 06CF  
                       u2990 0E71                         u3950 02F2                         u3870 020E  
                       u3791 06CE                         u2991 0E70                         u3951 02F1  
                       u3871 020D                         u3960 033E                         u3880 021C  
                       u3961 033D                         u3881 021B                         u3865 0181  
                       _PIR1 000C                         u3970 0344                         u3890 022E  
                       u3795 06CB                         u3971 0343                         u3891 022D  
                       u3980 0349                         u3981 0348                         u3990 0389  
                       u3991 0388                         _TMR0 0001               ??_eeprom_write 00A1  
                       _Fill 0A38                         _fail 0198                         _i_id 01A1  
                       _dato 0110                         _main 0069            ConcatToPacket@pkt 00B9  
                       _keyf 00EB                         _keys 0712                         _rand 0B6C  
          ConcatToPacket@str 00B3                         btemp 007E                         _type 019E  
                       pow@b 00C5                         pow@i 00C6                         pow@n 00C8  
                       start 0010              __end_ofi1_srand 15AA                        ??_IRS 0038  
                      ??_pow 00C3                 ?_init_NumPad 0070                 ?_init_Timer0 0070  
                      ?_Fill 0070              __end_of___aldiv 0EF6              __end_of___almod 0DCB  
                      ?_main 0070                        ?_rand 00AD                        _EEADR 010D  
                      STR_10 080E                        STR_11 0749                        STR_12 07BA  
                      STR_20 077C                        STR_13 07C7                        STR_21 079C  
                      STR_14 080A                        STR_15 07AB                        STR_16 07BA  
                      STR_17 078C                        STR_18 0806                        STR_19 0725  
            __end_of___awmod 09DC                 ?_read_NumPad 0070                        i1l312 15C2  
                      i1l331 0E4E                        i1l309 15B6                        i1l319 0CC9  
                      i1l620 0980                        i1l454 162D                        i1l456 1645  
                      i1l468 1771                        i1l910 17B8                        i1l907 15A9  
                      _RCREG 001A                        _RCSTA 0018                        _SPBRG 0099  
                      _PORTB 0006                        _PORTD 0008                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _TXREG 0019  
                      _TXSTA 0098              __end_of_colMask 0725          ___lmul@multiplicand 00A4  
            __end_of_lcdSend 1679               i1___awmod@sign 002C                        _randx 0050  
                      _srand 15C3             __end_ofi1___lmul 1772                        pclath 000A  
           __end_ofi1___wmul 1646              __end_of_rowMask 0722                        status 0003  
        i1___wmul@multiplier 002D                        wtemp0 007E              __end_of_strcopy 1800  
         main@num_rand_s_228 0152             ?i1_UART_TxString 0033                 __end_of_Fill 0A96  
            __initialization 0013                 __end_of_main 040B                 __end_of_keys 071E  
               __end_of_rand 0BDD          i1___lmul@multiplier 0070                       ??_Fill 00A7  
                     ??_main 003C                       ??_rand 00AF            strcat@length_dest 00B1  
                     _EEDATA 010C                       _EECON1 018C                       _EECON2 018D  
                     ?_srand 00A0                       i1l2120 1734                       i1l2122 1738  
                     i1l2124 174F                       i1l2126 1758                       i1l2118 172C  
                     i1l2400 0938                       i1l2128 1769                       i1l2410 0951  
                     i1l2402 093D                       i1l2412 0955                       i1l2404 0943  
                     i1l2420 0972                       i1l2422 0977                       i1l2414 095F  
                     i1l2406 0946                       i1l2430 1772                       i1l2424 097C  
                     i1l2416 0965                       i1l2408 094D                       i1l2432 1793  
                     i1l2370 15B6                       i1l2418 096C                       i1l2434 17A1  
                     i1l2372 15BC                       i1l2380 1627                       i1l2428 15A1  
                     i1l2374 15C0                       i1l2390 0926                       i1l2382 1634  
                     u210_20 15BC                       i1l2392 0929                       i1l2384 163B  
                     i1l2376 161F                       u210_21 15BB                       i1l2394 092D  
                     i1l2386 1641                       i1l2378 1623                       i1l2650 0C57  
                     i1l2396 0932                       i1l2660 0C85                       i1l2652 0C62  
                     i1l2900 0DDD                       i1l2398 0934                       i1l2662 0C8F  
                     i1l2654 0C6A                       i1l2910 0E14                       i1l2902 0DE1  
                     u211_20 1627                       i1l2656 0C75                       i1l2648 0C54  
                     i1l2920 0E3F                       i1l2912 0E1F                       i1l2904 0DE4  
                     u211_21 1626                       i1l2658 0C7A                       i1l2914 0E23  
                     i1l2906 0DE8                       i1l2916 0E2D                       i1l2908 0E02  
                     i1l2926 0E44                       i1l2918 0E32                       u220_20 095F  
                     i1l2928 0E4D                       u220_21 095E                       i1l2892 0DCB  
                     u220_25 095B                       u212_25 162E                       i1l2894 0DCF  
                     i1l2896 0DD5                       i1l2898 0DD9                       u221_25 0966  
                     u213_25 1635                       u222_20 0972                       u214_20 1641  
                     u222_21 0971                       u214_21 1640                       u223_20 0977  
                     u215_20 092D                       u223_21 0976                       u215_21 092C  
                     u216_20 0938                       u224_20 17B0                       u216_21 0937  
                     u224_25 17AB                       u217_20 0943                       _INTCON 000B  
                     u217_21 0942                       u218_25 0947                       u219_20 0955  
                     u219_21 0954                       u173_20 1738                       u173_21 1737  
                     u174_21 1741                       u174_22 1748                       u174_23 174F  
                     u175_25 1751                       u256_20 0C75                       u280_20 0DCF  
                     u256_21 0C74                       u280_21 0DCE                       u176_25 1759  
                     u177_20 1769                       u257_20 0C7A                       u281_20 0DE8  
                     u177_21 1768                       u257_21 0C79                       u281_21 0DE7  
                     u282_20 0E02                       u282_21 0E01                       u283_20 0E14  
                     u283_21 0E13                       u283_25 0E10                       u284_20 0E1F  
                     u284_21 0E1E                       u285_20 0E3F                       u285_21 0E3E  
                     _PIC_ID 01C6                    ??i1_srand 0072                       Fill@id 00AA  
      i1UART_TxString@is_ACK 0033                       i1_rand 1772                 ?_UART_TxChar 0070  
                     _Length 06D0             __end_of_lcdPrint 0926                       ___lmul 083E  
                  ??___aldiv 00D2                    ??___almod 00A8                       ___wmul 0817  
          __end_of_UART_init 172C                    ??___awmod 00B8          ConcatToPacket@delim 00B5  
           __end_of_init_LCD 0AFD             __end_of_init_PIC 0D44                       _packet 01B3  
                     _old_iT 019C              ___awmod@divisor 00B4         __end_of_eeprom_write 16B0  
            ___awmod@counter 00B9                    ??_lcdSend 00A1                       _source 019F  
                     _strcat 0BDD            __end_ofi1___awmod 0981                       saved_w 007E  
                     pow@exp 00C1                       srand@x 00A0                    ??_strcopy 00A3  
             _datoTastierino 01A2      __end_of__initialization 0065              eeprom_read@addr 00A1  
      __end_of_UART_TxString 0B6C                ??_SplitPacket 00AA               __pcstackCOMMON 0070  
               __pidataBANK0 0813                 __pidataBANK1 0003                 __pidataBANK3 0811  
              __end_of_srand 15D2                    ?i1___lmul 0070                    ?i1___wmul 002D  
          eeprom_write@value 00A0                      ??_srand 003C                   __pbssBANK0 003C  
                 __pbssBANK1 00E3                   __pbssBANK2 0110                   __pbssBANK3 0190  
                    ?i1_rand 0020                 strcat@source 00A7                      ?_Length 00A0  
                 __pmaintext 0069                      ?___lmul 00A0                      ?___wmul 00BB  
                 __pintentry 0004               ___lmul@product 00A9          __end_of_SplitPacket 06D0  
                 ??i1___lmul 0078                      ?_strcat 00A7                   ??i1___wmul 007E  
                  ?_lcdPrint 00A4       ConvertToString@n_cifre 01D0                   __stringtab 0700  
                  ?_init_LCD 0070                    ?_init_PIC 0070                      i1_srand 15A1  
          ??_ConvertToString 00DE                      ___aldiv 0E59                      ___almod 0D44  
                    ___awmod 0981                      _colMask 0722                   _initialize 01D4  
                    _colScan 00ED                      _id_dest 01C2                      _lcdSend 1646  
                    __ptext1 040B                      __ptext2 1679                      __ptext3 09DC  
                    __ptext4 0CCA                      __ptext5 08D0                      __ptext6 15E9  
                    __ptext7 15AA                      __ptext8 0A96                      __ptext9 1646  
             _ConcatToPacket 0886                      _compare 019A                      _maxFail 01D3  
           ___awmod@dividend 00B6             ___aldiv@dividend 00CE                      _seconds 00E3  
                 _keypressed 00EE                      _pr_succ 0195                      _rowMask 071E  
                    _rowScan 00EC                      _success 0199                   ??_lcdPrint 00A6  
                    clrloop0 06F9                      _strcopy 17B9         end_of_initialization 0065  
             main@num_rand_s 0142                   ??_init_LCD 00A4                   ??_init_PIC 00E1  
               _eeprom_write 1679               UART_TxString@n 00C3                   _pr_err_max 0196  
              i1_UART_TxChar 15B5                  _SplitPacket 062B             ___aldiv@quotient 00D5  
               __pstringtext 0700                      strcat@n 00AF        i1___wmul@multiplicand 002F  
     __end_of_ConcatToPacket 08D0                    _UART_init 16EC                    _PORTEbits 0009  
                  _TRISEbits 0089                    i1___awmod 0926                ??_eeprom_read 00A0  
                  Length@len 00A5                    Length@str 00A0               ?i1_UART_TxChar 0070  
             __end_ofi1_rand 17B9               __end_of_Length 06F8               __end_of___lmul 0886  
             __end_of___wmul 083E              ?_ConcatToPacket 00B3                   ?_UART_init 00D9  
             __end_of_strcat 0C51                 _countSeconds 003C        i1___lmul@multiplicand 0074  
        start_initialization 0013                  __end_of_IRS 0E59                  __end_of_pow 16EC  
                 ?i1___awmod 0027                   init_PIC@id 01D1                     ??i1_rand 0022  
                   ??_Length 00A2              CompareStrings@i 00AE                     ??___lmul 00A8  
                   ??___wmul 003C          __end_of_eeprom_read 161F                ??_init_NumPad 00A0  
                __pdataBANK0 0050                  __pdataBANK1 00EE                  __pdataBANK3 01D3  
              ??_init_Timer0 00A0           i1___awmod@dividend 0029                ??_read_NumPad 00C1  
                   ??_strcat 00A9               _CompareStrings 09DC                    ___latbits 0002  
              __pcstackBANK0 0020                __pcstackBANK1 00A0                __pcstackBANK2 0142  
              __pcstackBANK3 01CA            ??i1_UART_TxString 0034             i1___lmul@product 0079  
            _ConvertToString 0EF6             eeprom_write@addr 00A2                     ?i1_srand 0070  
                _datoSeriale 003F              ??i1_UART_TxChar 0070                     ?___aldiv 00CA  
                   ?___almod 00A0                     ?___awmod 00B4             ___almod@dividend 00A4  
                ??_UART_init 00DD                     ?_lcdSend 00A0       __end_of_CompareStrings 0A38  
        __end_of_init_NumPad 15B5          __end_of_init_Timer0 1600                UART_TxChar@ch 00A1  
                strcopy@dest 00A0                  ??i1___awmod 007D          __end_of_read_NumPad 062B  
                   ?_strcopy 00A0              ___aldiv@divisor 00CA            interrupt_function 0004  
            ___aldiv@counter 00D3               ___wmul@product 00BF          UART_TxString@is_ACK 00C1  
               _milliseconds 00E7                    clear_ram0 06F8                  _eeprom_read 1600  
              ??_UART_TxChar 00A0                _UART_TxString 0AFD                 ?_SplitPacket 0070  
               _old_num_rand 0190             ConvertToString@i 01CE             ConvertToString@j 01CC  
           ConvertToString@n 00D9                    lcdPrint@n 00A9                     i1___lmul 172C  
                __stringbase 0712            ___wmul@multiplier 00BB                     i1___wmul 161F  
            ?_CompareStrings 00A7             i1UART_TxString@n 0036      __end_of_ConvertToString 1000  
          ___lmul@multiplier 00A0                     i1srand@x 0070           CompareStrings@str1 00A7  
         CompareStrings@str2 00A9                   _EECON1bits 018C               ?_UART_TxString 00C1  
           ??_ConcatToPacket 00B6            i1___awmod@divisor 0027            i1___awmod@counter 002B  
        __end_of_UART_TxChar 15E9                  _init_NumPad 15AA                  _init_Timer0 15E9  
         __end_of__stringtab 0712                strcopy@source 00A2                  _read_NumPad 040B  
                 strcat@dest 00AE                     __ptext10 1600                     __ptext11 16EC  
                   __ptext20 083E                     __ptext12 0A38                     __ptext21 0817  
                   __ptext13 0EF6                     __ptext30 0C51                     __ptext22 0981  
                   __ptext14 16B0                     __ptext31 15A1                     __ptext23 15D2  
                   __ptext15 0D44                     __ptext32 1772                     __ptext24 062B  
                   __ptext16 0E59                     __ptext33 172C                     __ptext25 17B9  
                   __ptext17 0AFD                     __ptext34 161F                     __ptext26 0886  
                   __ptext18 15C3                     __ptext35 0926                     __ptext27 0BDD  
                   __ptext19 0B6C                     __ptext36 15B5                     __ptext28 06D0  
                   __ptext29 0DCB                     _lcdPrint 08D0             UART_TxString@str 00C5  
              read_NumPad@id 00CB              ___almod@divisor 00A0  ConcatToPacket@packet_length 00B7  
            ___almod@counter 00A9              i1UART_TxChar@ch 0071                     _init_LCD 0A96  
                   _init_PIC 0CCA                 _pr_countdown 0194                     _old_i_id 01A0  
                   _recieved 019B                     _pr_start 0197                     _num_rand 0192  
            i1_UART_TxString 0C51                   _INTCONbits 000B             ?_ConvertToString 00D9  
                   intlevel1 0000            UART_init@baudrate 00D9              ??_UART_TxString 00C2  
        ConvertToString@temp 01CA           SplitPacket@section 00B4                    stringcode 070A  
                _UART_TxChar 15D2                   Fill@length 00A8                   _OPTION_REG 0081  
          SplitPacket@i_part 00B6                  lcdSend@dato 00A3                  lcdSend@tipo 00A0  
         ConvertToString@str 00DD                     strcopy@n 00A8                     stringtab 0700  
               ___aldiv@sign 00D4                  lcdPrint@str 00A4                 ___almod@sign 00AA  
              ?_eeprom_write 00A0                   _STATUSbits 0003                 ?_eeprom_read 0070  
            SplitPacket@part 00AF               SplitPacket@len 00AD      __end_ofi1_UART_TxString 0CCA  
      __end_ofi1_UART_TxChar 15C3               SplitPacket@pkt 00B8                 SplitPacket@i 00B9  
