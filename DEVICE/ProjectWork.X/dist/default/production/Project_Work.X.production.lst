

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Jun 30 10:22:44 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	intentry,global,class=CODE,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    59                           	dabs	1,0x7E,2
    60     0000                     
    61                           ; Version 2.40
    62                           ; Generated 17/11/2021 GMT
    63                           ; 
    64                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC16F877A Definitions
    94                           ; 
    95                           ; SFR Addresses
    96     0000                     	;# 
    97     0001                     	;# 
    98     0002                     	;# 
    99     0003                     	;# 
   100     0004                     	;# 
   101     0005                     	;# 
   102     0006                     	;# 
   103     0007                     	;# 
   104     0008                     	;# 
   105     0009                     	;# 
   106     000A                     	;# 
   107     000B                     	;# 
   108     000C                     	;# 
   109     000D                     	;# 
   110     000E                     	;# 
   111     000E                     	;# 
   112     000F                     	;# 
   113     0010                     	;# 
   114     0011                     	;# 
   115     0012                     	;# 
   116     0013                     	;# 
   117     0014                     	;# 
   118     0015                     	;# 
   119     0015                     	;# 
   120     0016                     	;# 
   121     0017                     	;# 
   122     0018                     	;# 
   123     0019                     	;# 
   124     001A                     	;# 
   125     001B                     	;# 
   126     001B                     	;# 
   127     001C                     	;# 
   128     001D                     	;# 
   129     001E                     	;# 
   130     001F                     	;# 
   131     0081                     	;# 
   132     0085                     	;# 
   133     0086                     	;# 
   134     0087                     	;# 
   135     0088                     	;# 
   136     0089                     	;# 
   137     008C                     	;# 
   138     008D                     	;# 
   139     008E                     	;# 
   140     0091                     	;# 
   141     0092                     	;# 
   142     0093                     	;# 
   143     0094                     	;# 
   144     0098                     	;# 
   145     0099                     	;# 
   146     009C                     	;# 
   147     009D                     	;# 
   148     009E                     	;# 
   149     009F                     	;# 
   150     010C                     	;# 
   151     010D                     	;# 
   152     010E                     	;# 
   153     010F                     	;# 
   154     018C                     	;# 
   155     018D                     	;# 
   156     0000                     	;# 
   157     0001                     	;# 
   158     0002                     	;# 
   159     0003                     	;# 
   160     0004                     	;# 
   161     0005                     	;# 
   162     0006                     	;# 
   163     0007                     	;# 
   164     0008                     	;# 
   165     0009                     	;# 
   166     000A                     	;# 
   167     000B                     	;# 
   168     000C                     	;# 
   169     000D                     	;# 
   170     000E                     	;# 
   171     000E                     	;# 
   172     000F                     	;# 
   173     0010                     	;# 
   174     0011                     	;# 
   175     0012                     	;# 
   176     0013                     	;# 
   177     0014                     	;# 
   178     0015                     	;# 
   179     0015                     	;# 
   180     0016                     	;# 
   181     0017                     	;# 
   182     0018                     	;# 
   183     0019                     	;# 
   184     001A                     	;# 
   185     001B                     	;# 
   186     001B                     	;# 
   187     001C                     	;# 
   188     001D                     	;# 
   189     001E                     	;# 
   190     001F                     	;# 
   191     0081                     	;# 
   192     0085                     	;# 
   193     0086                     	;# 
   194     0087                     	;# 
   195     0088                     	;# 
   196     0089                     	;# 
   197     008C                     	;# 
   198     008D                     	;# 
   199     008E                     	;# 
   200     0091                     	;# 
   201     0092                     	;# 
   202     0093                     	;# 
   203     0094                     	;# 
   204     0098                     	;# 
   205     0099                     	;# 
   206     009C                     	;# 
   207     009D                     	;# 
   208     009E                     	;# 
   209     009F                     	;# 
   210     010C                     	;# 
   211     010D                     	;# 
   212     010E                     	;# 
   213     010F                     	;# 
   214     018C                     	;# 
   215     018D                     	;# 
   216     0000                     	;# 
   217     0001                     	;# 
   218     0002                     	;# 
   219     0003                     	;# 
   220     0004                     	;# 
   221     0005                     	;# 
   222     0006                     	;# 
   223     0007                     	;# 
   224     0008                     	;# 
   225     0009                     	;# 
   226     000A                     	;# 
   227     000B                     	;# 
   228     000C                     	;# 
   229     000D                     	;# 
   230     000E                     	;# 
   231     000E                     	;# 
   232     000F                     	;# 
   233     0010                     	;# 
   234     0011                     	;# 
   235     0012                     	;# 
   236     0013                     	;# 
   237     0014                     	;# 
   238     0015                     	;# 
   239     0015                     	;# 
   240     0016                     	;# 
   241     0017                     	;# 
   242     0018                     	;# 
   243     0019                     	;# 
   244     001A                     	;# 
   245     001B                     	;# 
   246     001B                     	;# 
   247     001C                     	;# 
   248     001D                     	;# 
   249     001E                     	;# 
   250     001F                     	;# 
   251     0081                     	;# 
   252     0085                     	;# 
   253     0086                     	;# 
   254     0087                     	;# 
   255     0088                     	;# 
   256     0089                     	;# 
   257     008C                     	;# 
   258     008D                     	;# 
   259     008E                     	;# 
   260     0091                     	;# 
   261     0092                     	;# 
   262     0093                     	;# 
   263     0094                     	;# 
   264     0098                     	;# 
   265     0099                     	;# 
   266     009C                     	;# 
   267     009D                     	;# 
   268     009E                     	;# 
   269     009F                     	;# 
   270     010C                     	;# 
   271     010D                     	;# 
   272     010E                     	;# 
   273     010F                     	;# 
   274     018C                     	;# 
   275     018D                     	;# 
   276     0000                     	;# 
   277     0001                     	;# 
   278     0002                     	;# 
   279     0003                     	;# 
   280     0004                     	;# 
   281     0005                     	;# 
   282     0006                     	;# 
   283     0007                     	;# 
   284     0008                     	;# 
   285     0009                     	;# 
   286     000A                     	;# 
   287     000B                     	;# 
   288     000C                     	;# 
   289     000D                     	;# 
   290     000E                     	;# 
   291     000E                     	;# 
   292     000F                     	;# 
   293     0010                     	;# 
   294     0011                     	;# 
   295     0012                     	;# 
   296     0013                     	;# 
   297     0014                     	;# 
   298     0015                     	;# 
   299     0015                     	;# 
   300     0016                     	;# 
   301     0017                     	;# 
   302     0018                     	;# 
   303     0019                     	;# 
   304     001A                     	;# 
   305     001B                     	;# 
   306     001B                     	;# 
   307     001C                     	;# 
   308     001D                     	;# 
   309     001E                     	;# 
   310     001F                     	;# 
   311     0081                     	;# 
   312     0085                     	;# 
   313     0086                     	;# 
   314     0087                     	;# 
   315     0088                     	;# 
   316     0089                     	;# 
   317     008C                     	;# 
   318     008D                     	;# 
   319     008E                     	;# 
   320     0091                     	;# 
   321     0092                     	;# 
   322     0093                     	;# 
   323     0094                     	;# 
   324     0098                     	;# 
   325     0099                     	;# 
   326     009C                     	;# 
   327     009D                     	;# 
   328     009E                     	;# 
   329     009F                     	;# 
   330     010C                     	;# 
   331     010D                     	;# 
   332     010E                     	;# 
   333     010F                     	;# 
   334     018C                     	;# 
   335     018D                     	;# 
   336                           
   337                           	psect	idataBANK0
   338     07F9                     __pidataBANK0:
   339                           
   340                           ;initializer for _randx
   341     07F9  3401               	retlw	1
   342     07FA  3400               	retlw	0
   343     07FB  3400               	retlw	0
   344     07FC  3400               	retlw	0
   345                           
   346                           	psect	idataBANK1
   347     07FD                     __pidataBANK1:
   348                           
   349                           ;initializer for _maxFail
   350     07FD  3403               	retlw	3
   351                           
   352                           ;initializer for _initialize
   353     07FE  3401               	retlw	1
   354                           
   355                           ;initializer for _keypressed
   356     07FF  3463               	retlw	99
   357                           
   358                           	psect	strings
   359     0700                     __pstrings:
   360     0700                     stringtab:
   361     0700                     __stringtab:
   362                           
   363                           ;	String table - string pointers are 1 byte each
   364     0700  1BFF               	btfsc	btemp+1,7
   365     0701  2F0A               	ljmp	stringcode
   366     0702  1383               	bcf	3,7
   367     0703  187F               	btfsc	btemp+1,0
   368     0704  1783               	bsf	3,7
   369     0705  0800               	movf	0,w
   370     0706  0A84               	incf	4,f
   371     0707  1903               	skipnz
   372     0708  0AFF               	incf	btemp+1,f
   373     0709  0008               	return
   374     070A                     stringcode:
   375     070A                     stringdir:
   376     070A  3007               	movlw	high stringdir
   377     070B  008A               	movwf	10
   378     070C  0804               	movf	4,w
   379     070D  0A84               	incf	4,f
   380     070E  0782               	addwf	2,f
   381     070F                     __stringbase:
   382     070F  3400               	retlw	0
   383     0710                     __end_of__stringtab:
   384     0710                     _keys:
   385     0710  342A               	retlw	42
   386     0711  3437               	retlw	55
   387     0712  3434               	retlw	52
   388     0713  3431               	retlw	49
   389     0714  3430               	retlw	48
   390     0715  3438               	retlw	56
   391     0716  3435               	retlw	53
   392     0717  3432               	retlw	50
   393     0718  3423               	retlw	35
   394     0719  3439               	retlw	57
   395     071A  3436               	retlw	54
   396     071B  3433               	retlw	51
   397     071C                     __end_of_keys:
   398     071C                     _rowMask:
   399     071C  3401               	retlw	1
   400     071D  3402               	retlw	2
   401     071E  3404               	retlw	4
   402     071F  3408               	retlw	8
   403     0720                     __end_of_rowMask:
   404     0720                     _colMask:
   405     0720  34FE               	retlw	254
   406     0721  34FD               	retlw	253
   407     0722  34FB               	retlw	251
   408     0723                     __end_of_colMask:
   409     000B                     _INTCONbits	set	11
   410     0003                     _STATUSbits	set	3
   411     001A                     _RCREG	set	26
   412     0019                     _TXREG	set	25
   413     000C                     _PIR1	set	12
   414     0018                     _RCSTA	set	24
   415     0006                     _PORTB	set	6
   416     0008                     _PORTD	set	8
   417     0009                     _PORTEbits	set	9
   418     0001                     _TMR0	set	1
   419     000B                     _INTCON	set	11
   420     005A                     _T0IF	set	90
   421     0065                     _RCIF	set	101
   422     008C                     _PIE1	set	140
   423     0099                     _SPBRG	set	153
   424     0098                     _TXSTA	set	152
   425     0087                     _TRISC	set	135
   426     0086                     _TRISB	set	134
   427     0089                     _TRISEbits	set	137
   428     0088                     _TRISD	set	136
   429     0081                     _OPTION_REG	set	129
   430     010C                     _EEDATA	set	268
   431     010D                     _EEADR	set	269
   432     018D                     _EECON2	set	397
   433     018C                     _EECON1	set	396
   434     018C                     _EECON1bits	set	396
   435     0723                     STR_15:
   436     0723  3423               	retlw	35	;'#'
   437     0724  343D               	retlw	61	;'='
   438     0725  3463               	retlw	99	;'c'
   439     0726  346F               	retlw	111	;'o'
   440     0727  346E               	retlw	110	;'n'
   441     0728  3466               	retlw	102	;'f'
   442     0729  342E               	retlw	46	;'.'
   443     072A  3420               	retlw	32	;' '
   444     072B  342A               	retlw	42	;'*'
   445     072C  343D               	retlw	61	;'='
   446     072D  3463               	retlw	99	;'c'
   447     072E  3461               	retlw	97	;'a'
   448     072F  346E               	retlw	110	;'n'
   449     0730  3463               	retlw	99	;'c'
   450     0731  342E               	retlw	46	;'.'
   451     0732  3400               	retlw	0
   452     0733  3400               	retlw	0
   453     0734  3400               	retlw	0
   454     0735                     STR_7:
   455     0735  3449               	retlw	73	;'I'
   456     0736  346E               	retlw	110	;'n'
   457     0737  3473               	retlw	115	;'s'
   458     0738  3465               	retlw	101	;'e'
   459     0739  3472               	retlw	114	;'r'
   460     073A  3469               	retlw	105	;'i'
   461     073B  3473               	retlw	115	;'s'
   462     073C  3463               	retlw	99	;'c'
   463     073D  3469               	retlw	105	;'i'
   464     073E  3420               	retlw	32	;' '
   465     073F  3463               	retlw	99	;'c'
   466     0740  346F               	retlw	111	;'o'
   467     0741  3464               	retlw	100	;'d'
   468     0742  3469               	retlw	105	;'i'
   469     0743  3463               	retlw	99	;'c'
   470     0744  3465               	retlw	101	;'e'
   471     0745  3400               	retlw	0
   472     0746  3400               	retlw	0
   473     0747                     STR_5:
   474     0747  3423               	retlw	35	;'#'
   475     0748  343D               	retlw	61	;'='
   476     0749  3463               	retlw	99	;'c'
   477     074A  346F               	retlw	111	;'o'
   478     074B  346E               	retlw	110	;'n'
   479     074C  3466               	retlw	102	;'f'
   480     074D  342E               	retlw	46	;'.'
   481     074E  3420               	retlw	32	;' '
   482     074F  342A               	retlw	42	;'*'
   483     0750  343D               	retlw	61	;'='
   484     0751  3463               	retlw	99	;'c'
   485     0752  3461               	retlw	97	;'a'
   486     0753  346E               	retlw	110	;'n'
   487     0754  3463               	retlw	99	;'c'
   488     0755  342E               	retlw	46	;'.'
   489     0756  3400               	retlw	0
   490     0757  3400               	retlw	0
   491     0758                     STR_16:
   492     0758  3449               	retlw	73	;'I'
   493     0759  346E               	retlw	110	;'n'
   494     075A  3473               	retlw	115	;'s'
   495     075B  3465               	retlw	101	;'e'
   496     075C  3472               	retlw	114	;'r'
   497     075D  342E               	retlw	46	;'.'
   498     075E  3420               	retlw	32	;' '
   499     075F  3449               	retlw	73	;'I'
   500     0760  3444               	retlw	68	;'D'
   501     0761  3420               	retlw	32	;' '
   502     0762  3450               	retlw	80	;'P'
   503     0763  3449               	retlw	73	;'I'
   504     0764  3443               	retlw	67	;'C'
   505     0765  343A               	retlw	58	;':'
   506     0766  3400               	retlw	0
   507     0767  3400               	retlw	0
   508     0768                     STR_13:
   509     0768  3454               	retlw	84	;'T'
   510     0769  3465               	retlw	101	;'e'
   511     076A  346E               	retlw	110	;'n'
   512     076B  3474               	retlw	116	;'t'
   513     076C  342E               	retlw	46	;'.'
   514     076D  3420               	retlw	32	;' '
   515     076E  3465               	retlw	101	;'e'
   516     076F  3473               	retlw	115	;'s'
   517     0770  3461               	retlw	97	;'a'
   518     0771  3475               	retlw	117	;'u'
   519     0772  3472               	retlw	114	;'r'
   520     0773  3469               	retlw	105	;'i'
   521     0774  3474               	retlw	116	;'t'
   522     0775  3469               	retlw	105	;'i'
   523     0776  3400               	retlw	0
   524     0777  3400               	retlw	0
   525     0778                     STR_17:
   526     0778  344D               	retlw	77	;'M'
   527     0779  3449               	retlw	73	;'I'
   528     077A  344E               	retlw	78	;'N'
   529     077B  343D               	retlw	61	;'='
   530     077C  3430               	retlw	48	;'0'
   531     077D  342C               	retlw	44	;','
   532     077E  344D               	retlw	77	;'M'
   533     077F  3441               	retlw	65	;'A'
   534     0780  3458               	retlw	88	;'X'
   535     0781  343D               	retlw	61	;'='
   536     0782  3432               	retlw	50	;'2'
   537     0783  3435               	retlw	53	;'5'
   538     0784  3430               	retlw	48	;'0'
   539     0785  3400               	retlw	0
   540     0786  3400               	retlw	0
   541     0787                     STR_11:
   542     0787  3443               	retlw	67	;'C'
   543     0788  346F               	retlw	111	;'o'
   544     0789  3464               	retlw	100	;'d'
   545     078A  3469               	retlw	105	;'i'
   546     078B  3463               	retlw	99	;'c'
   547     078C  3465               	retlw	101	;'e'
   548     078D  3420               	retlw	32	;' '
   549     078E  3465               	retlw	101	;'e'
   550     078F  3472               	retlw	114	;'r'
   551     0790  3472               	retlw	114	;'r'
   552     0791  3461               	retlw	97	;'a'
   553     0792  3474               	retlw	116	;'t'
   554     0793  346F               	retlw	111	;'o'
   555     0794  3400               	retlw	0
   556     0795  3400               	retlw	0
   557     0796                     STR_8:
   558     0796  3454               	retlw	84	;'T'
   559     0797  3465               	retlw	101	;'e'
   560     0798  346E               	retlw	110	;'n'
   561     0799  3474               	retlw	116	;'t'
   562     079A  3461               	retlw	97	;'a'
   563     079B  3474               	retlw	116	;'t'
   564     079C  3469               	retlw	105	;'i'
   565     079D  3476               	retlw	118	;'v'
   566     079E  3469               	retlw	105	;'i'
   567     079F  343A               	retlw	58	;':'
   568     07A0  3420               	retlw	32	;' '
   569     07A1  3400               	retlw	0
   570     07A2  3400               	retlw	0
   571     07A3                     STR_9:
   572     07A3  3442               	retlw	66	;'B'
   573     07A4  3465               	retlw	101	;'e'
   574     07A5  346E               	retlw	110	;'n'
   575     07A6  3476               	retlw	118	;'v'
   576     07A7  3465               	retlw	101	;'e'
   577     07A8  346E               	retlw	110	;'n'
   578     07A9  3475               	retlw	117	;'u'
   579     07AA  3474               	retlw	116	;'t'
   580     07AB  346F               	retlw	111	;'o'
   581     07AC  3421               	retlw	33	;'!'
   582     07AD  3400               	retlw	0
   583     07AE  3400               	retlw	0
   584     07AF                     STR_4:
   585     07AF  3449               	retlw	73	;'I'
   586     07B0  3444               	retlw	68	;'D'
   587     07B1  3420               	retlw	32	;' '
   588     07B2  3453               	retlw	83	;'S'
   589     07B3  3461               	retlw	97	;'a'
   590     07B4  346C               	retlw	108	;'l'
   591     07B5  3476               	retlw	118	;'v'
   592     07B6  3461               	retlw	97	;'a'
   593     07B7  3474               	retlw	116	;'t'
   594     07B8  346F               	retlw	111	;'o'
   595     07B9  3400               	retlw	0
   596     07BA  3400               	retlw	0
   597     07BB                     STR_1:
   598     07BB  3450               	retlw	80	;'P'
   599     07BC  3472               	retlw	114	;'r'
   600     07BD  3465               	retlw	101	;'e'
   601     07BE  346D               	retlw	109	;'m'
   602     07BF  3469               	retlw	105	;'i'
   603     07C0  3420               	retlw	32	;' '
   604     07C1  3427               	retlw	39	;'''
   605     07C2  3423               	retlw	35	;'#'
   606     07C3  3427               	retlw	39	;'''
   607     07C4  3400               	retlw	0
   608     07C5  3400               	retlw	0
   609     07C6                     STR_3:
   610     07C6  3449               	retlw	73	;'I'
   611     07C7  3444               	retlw	68	;'D'
   612     07C8  3420               	retlw	32	;' '
   613     07C9  343E               	retlw	62	;'>'
   614     07CA  3420               	retlw	32	;' '
   615     07CB  3432               	retlw	50	;'2'
   616     07CC  3435               	retlw	53	;'5'
   617     07CD  3430               	retlw	48	;'0'
   618     07CE  3400               	retlw	0
   619     07CF  3400               	retlw	0
   620     07D0                     STR_2:
   621     07D0  3445               	retlw	69	;'E'
   622     07D1  3452               	retlw	82	;'R'
   623     07D2  3452               	retlw	82	;'R'
   624     07D3  344F               	retlw	79	;'O'
   625     07D4  3452               	retlw	82	;'R'
   626     07D5  3445               	retlw	69	;'E'
   627     07D6  3400               	retlw	0
   628     07D7  3400               	retlw	0
   629     07D8                     STR_14:
   630     07D8  3431               	retlw	49	;'1'
   631     07D9  342F               	retlw	47	;'/'
   632     07DA  3430               	retlw	48	;'0'
   633     07DB  3400               	retlw	0
   634     07DC                     STR_10:
   635     07DC  3431               	retlw	49	;'1'
   636     07DD  342F               	retlw	47	;'/'
   637     07DE  3431               	retlw	49	;'1'
   638     07DF  3400               	retlw	0
   639     07E0                     STR_6:
   640     07E0  3432               	retlw	50	;'2'
   641     07E1  3400               	retlw	0
   642     0796                     
   643                           	psect	cinit
   644     0013                     start_initialization:	
   645                           ; #config settings
   646                           
   647     0013                     __initialization:
   648                           
   649                           ; Initialize objects allocated to BANK1
   650     0013  1683               	bsf	3,5	;RP0=1, select bank1
   651     0014  1303               	bcf	3,6	;RP1=0, select bank1
   652     0015  120A  118A  27FD  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   653     001A  00ED               	movwf	__pdataBANK1& (0+127)
   654     001B  120A  118A  27FE  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   655     0020  00EE               	movwf	(__pdataBANK1+1)& (0+127)
   656     0021  120A  118A  27FF  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   657     0026  00EF               	movwf	(__pdataBANK1+2)& (0+127)
   658                           
   659                           ; Initialize objects allocated to BANK0
   660     0027  1283               	bcf	3,5	;RP0=0, select bank0
   661     0028  1303               	bcf	3,6	;RP1=0, select bank0
   662     0029  120A  118A  27F9  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   663     002E  00D4               	movwf	__pdataBANK0& (0+127)
   664     002F  120A  118A  27FA  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   665     0034  00D5               	movwf	(__pdataBANK0+1)& (0+127)
   666     0035  120A  118A  27FB  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   667     003A  00D6               	movwf	(__pdataBANK0+2)& (0+127)
   668     003B  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   669     0040  00D7               	movwf	(__pdataBANK0+3)& (0+127)
   670                           
   671                           ; Clear objects allocated to BANK3
   672     0041  1783               	bsf	3,7	;select IRP bank2
   673     0042  3090               	movlw	low __pbssBANK3
   674     0043  0084               	movwf	4
   675     0044  30C5               	movlw	low (__pbssBANK3+53)
   676     0045  160A  118A  2638  120A  118A  	fcall	clear_ram0
   677                           
   678                           ; Clear objects allocated to BANK2
   679     004A  3010               	movlw	low __pbssBANK2
   680     004B  0084               	movwf	4
   681     004C  3042               	movlw	low (__pbssBANK2+50)
   682     004D  160A  118A  2638  120A  118A  	fcall	clear_ram0
   683                           
   684                           ; Clear objects allocated to BANK1
   685     0052  1383               	bcf	3,7	;select IRP bank0
   686     0053  30E2               	movlw	low __pbssBANK1
   687     0054  0084               	movwf	4
   688     0055  30ED               	movlw	low (__pbssBANK1+11)
   689     0056  160A  118A  2638  120A  118A  	fcall	clear_ram0
   690                           
   691                           ; Clear objects allocated to BANK0
   692     005B  303C               	movlw	low __pbssBANK0
   693     005C  0084               	movwf	4
   694     005D  3054               	movlw	low (__pbssBANK0+24)
   695     005E  160A  118A  2638  120A  118A  	fcall	clear_ram0
   696     0063                     end_of_initialization:	
   697                           ;End of C runtime variable initialization code
   698                           
   699     0063                     __end_of__initialization:
   700     0063  0183               	clrf	3
   701     0064  120A  118A  2867   	ljmp	_main	;jump to C main() function
   702                           
   703                           	psect	bssBANK0
   704     003C                     __pbssBANK0:
   705     003C                     _seconds:
   706     003C                     	ds	4
   707     0040                     _milliseconds:
   708     0040                     	ds	4
   709     0044                     _old_num_rand:
   710     0044                     	ds	2
   711     0046                     _old_i_id:
   712     0046                     	ds	2
   713     0048                     _pr_succ:
   714     0048                     	ds	1
   715     0049                     _pr_err_max:
   716     0049                     	ds	1
   717     004A                     _pr_start:
   718     004A                     	ds	1
   719     004B                     _fail:
   720     004B                     	ds	1
   721     004C                     _success:
   722     004C                     	ds	1
   723     004D                     _recieved:
   724     004D                     	ds	1
   725     004E                     _old_iT:
   726     004E                     	ds	1
   727     004F                     _iS:
   728     004F                     	ds	1
   729     0050                     _PIC_ID:
   730     0050                     	ds	4
   731                           
   732                           	psect	dataBANK0
   733     0054                     __pdataBANK0:
   734     0054                     _randx:
   735     0054                     	ds	4
   736                           
   737                           	psect	bssBANK1
   738     00E2                     __pbssBANK1:
   739     00E2                     _num_rand:
   740     00E2                     	ds	2
   741     00E4                     _i_id:
   742     00E4                     	ds	2
   743     00E6                     _compare:
   744     00E6                     	ds	1
   745     00E7                     _iT:
   746     00E7                     	ds	1
   747     00E8                     _type:
   748     00E8                     	ds	1
   749     00E9                     _source:
   750     00E9                     	ds	1
   751     00EA                     _keyf:
   752     00EA                     	ds	1
   753     00EB                     _rowScan:
   754     00EB                     	ds	1
   755     00EC                     _colScan:
   756     00EC                     	ds	1
   757                           
   758                           	psect	dataBANK1
   759     00ED                     __pdataBANK1:
   760     00ED                     _maxFail:
   761     00ED                     	ds	1
   762     00EE                     _initialize:
   763     00EE                     	ds	1
   764     00EF                     _keypressed:
   765     00EF                     	ds	1
   766                           
   767                           	psect	bssBANK3
   768     0190                     __pbssBANK3:
   769     0190                     _datoTastierino:
   770     0190                     	ds	17
   771     01A1                     _datoSeriale:
   772     01A1                     	ds	17
   773     01B2                     _packet:
   774     01B2                     	ds	15
   775     01C1                     _id_dest:
   776     01C1                     	ds	4
   777                           
   778                           	psect	bssBANK2
   779     0110                     __pbssBANK2:
   780     0110                     _dato:
   781     0110                     	ds	50
   782                           
   783                           	psect	clrtext
   784     1638                     clear_ram0:	
   785                           ;	Called with FSR containing the base address, and
   786                           ;	W with the last address+1
   787                           
   788     1638  0064               	clrwdt	;clear the watchdog before getting into this loop
   789     1639                     clrloop0:
   790     1639  0180               	clrf	0	;clear RAM location pointed to by FSR
   791     163A  0A84               	incf	4,f	;increment pointer
   792     163B  0604               	xorwf	4,w	;XOR with final address
   793     163C  1903               	btfsc	3,2	;have we reached the end yet?
   794     163D  3400               	retlw	0	;all done for this memory range, return
   795     163E  0604               	xorwf	4,w	;XOR again to restore value
   796     163F  2E39               	goto	clrloop0	;do the next byte
   797                           
   798                           	psect	cstackBANK3
   799     01C5                     __pcstackBANK3:
   800     01C5                     ConvertToString@temp:
   801                           
   802                           ; 2 bytes @ 0x0
   803     01C5                     	ds	2
   804     01C7                     ConvertToString@j:
   805                           
   806                           ; 2 bytes @ 0x2
   807     01C7                     	ds	2
   808     01C9                     ConvertToString@i:
   809                           
   810                           ; 2 bytes @ 0x4
   811     01C9                     	ds	2
   812     01CB                     ConvertToString@n_cifre:
   813                           
   814                           ; 1 bytes @ 0x6
   815     01CB                     	ds	1
   816     01CC                     ??_init_PIC:
   817                           
   818                           ; 1 bytes @ 0x7
   819     01CC                     	ds	2
   820     01CE                     init_PIC@id:
   821                           
   822                           ; 2 bytes @ 0x9
   823     01CE                     	ds	2
   824     01D0                     main@num_rand_s:
   825                           
   826                           ; 16 bytes @ 0xB
   827     01D0                     	ds	16
   828                           
   829                           	psect	cstackBANK1
   830     00A0                     __pcstackBANK1:
   831     00A0                     ?_lcdSend:
   832     00A0                     ??_init_NumPad:	
   833                           ; 1 bytes @ 0x0
   834                           
   835     00A0                     ??_init_Timer0:	
   836                           ; 1 bytes @ 0x0
   837                           
   838     00A0                     ??_eeprom_read:	
   839                           ; 1 bytes @ 0x0
   840                           
   841     00A0                     ?_strcopy:	
   842                           ; 1 bytes @ 0x0
   843                           
   844     00A0                     ?_eeprom_write:	
   845                           ; 1 bytes @ 0x0
   846                           
   847     00A0                     ?_srand:	
   848                           ; 1 bytes @ 0x0
   849                           
   850     00A0                     ??_UART_TxChar:	
   851                           ; 1 bytes @ 0x0
   852                           
   853     00A0                     ?_Length:	
   854                           ; 1 bytes @ 0x0
   855                           
   856     00A0                     ?___lmul:	
   857                           ; 2 bytes @ 0x0
   858                           
   859     00A0                     ?___almod:	
   860                           ; 4 bytes @ 0x0
   861                           
   862     00A0                     lcdSend@tipo:	
   863                           ; 4 bytes @ 0x0
   864                           
   865     00A0                     strcopy@source:	
   866                           ; 1 bytes @ 0x0
   867                           
   868     00A0                     eeprom_write@value:	
   869                           ; 1 bytes @ 0x0
   870                           
   871     00A0                     Length@str:	
   872                           ; 1 bytes @ 0x0
   873                           
   874     00A0                     srand@x:	
   875                           ; 2 bytes @ 0x0
   876                           
   877     00A0                     ___lmul@multiplier:	
   878                           ; 2 bytes @ 0x0
   879                           
   880     00A0                     ___almod@divisor:	
   881                           ; 4 bytes @ 0x0
   882                           
   883                           
   884                           ; 4 bytes @ 0x0
   885     00A0                     	ds	1
   886     00A1                     ??_lcdSend:
   887     00A1                     ??_strcopy:	
   888                           ; 1 bytes @ 0x1
   889                           
   890     00A1                     ??_eeprom_write:	
   891                           ; 1 bytes @ 0x1
   892                           
   893     00A1                     UART_TxChar@ch:	
   894                           ; 1 bytes @ 0x1
   895                           
   896     00A1                     eeprom_read@addr:	
   897                           ; 1 bytes @ 0x1
   898                           
   899                           
   900                           ; 1 bytes @ 0x1
   901     00A1                     	ds	1
   902     00A2                     ??_srand:
   903     00A2                     ??_Length:	
   904                           ; 1 bytes @ 0x2
   905                           
   906     00A2                     eeprom_write@addr:	
   907                           ; 1 bytes @ 0x2
   908                           
   909                           
   910                           ; 1 bytes @ 0x2
   911     00A2                     	ds	1
   912     00A3                     lcdSend@dato:
   913                           
   914                           ; 1 bytes @ 0x3
   915     00A3                     	ds	1
   916     00A4                     ?_lcdPrint:
   917     00A4                     ??_init_LCD:	
   918                           ; 1 bytes @ 0x4
   919                           
   920     00A4                     strcopy@dest:	
   921                           ; 1 bytes @ 0x4
   922                           
   923     00A4                     lcdPrint@str:	
   924                           ; 1 bytes @ 0x4
   925                           
   926     00A4                     ___lmul@multiplicand:	
   927                           ; 2 bytes @ 0x4
   928                           
   929     00A4                     ___almod@dividend:	
   930                           ; 4 bytes @ 0x4
   931                           
   932                           
   933                           ; 4 bytes @ 0x4
   934     00A4                     	ds	1
   935     00A5                     Length@len:
   936     00A5                     strcopy@n:	
   937                           ; 2 bytes @ 0x5
   938                           
   939                           
   940                           ; 2 bytes @ 0x5
   941     00A5                     	ds	1
   942     00A6                     ??_lcdPrint:
   943                           
   944                           ; 1 bytes @ 0x6
   945     00A6                     	ds	1
   946     00A7                     ??_SplitPacket:
   947     00A7                     ?_CompareStrings:	
   948                           ; 1 bytes @ 0x7
   949                           
   950     00A7                     ??_Fill:	
   951                           ; 1 bytes @ 0x7
   952                           
   953     00A7                     ?_strcat:	
   954                           ; 1 bytes @ 0x7
   955                           
   956     00A7                     strcat@source:	
   957                           ; 2 bytes @ 0x7
   958                           
   959     00A7                     CompareStrings@str2:	
   960                           ; 2 bytes @ 0x7
   961                           
   962                           
   963                           ; 2 bytes @ 0x7
   964     00A7                     	ds	1
   965     00A8                     ??___lmul:
   966     00A8                     ??___almod:	
   967                           ; 1 bytes @ 0x8
   968                           
   969     00A8                     Fill@length:	
   970                           ; 1 bytes @ 0x8
   971                           
   972                           
   973                           ; 2 bytes @ 0x8
   974     00A8                     	ds	1
   975     00A9                     ??_CompareStrings:
   976     00A9                     ??_strcat:	
   977                           ; 1 bytes @ 0x9
   978                           
   979     00A9                     ___almod@counter:	
   980                           ; 1 bytes @ 0x9
   981                           
   982     00A9                     lcdPrint@n:	
   983                           ; 1 bytes @ 0x9
   984                           
   985     00A9                     ___lmul@product:	
   986                           ; 2 bytes @ 0x9
   987                           
   988                           
   989                           ; 4 bytes @ 0x9
   990     00A9                     	ds	1
   991     00AA                     Fill@id:
   992     00AA                     ___almod@sign:	
   993                           ; 1 bytes @ 0xA
   994                           
   995     00AA                     SplitPacket@len:	
   996                           ; 1 bytes @ 0xA
   997                           
   998                           
   999                           ; 2 bytes @ 0xA
  1000     00AA                     	ds	2
  1001     00AC                     SplitPacket@part:
  1002                           
  1003                           ; 5 bytes @ 0xC
  1004     00AC                     	ds	1
  1005     00AD                     ?_rand:
  1006     00AD                     CompareStrings@i:	
  1007                           ; 2 bytes @ 0xD
  1008                           
  1009                           
  1010                           ; 1 bytes @ 0xD
  1011     00AD                     	ds	1
  1012     00AE                     strcat@dest:
  1013     00AE                     CompareStrings@str1:	
  1014                           ; 1 bytes @ 0xE
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0xE
  1018     00AE                     	ds	1
  1019     00AF                     ??_rand:
  1020     00AF                     strcat@n:	
  1021                           ; 1 bytes @ 0xF
  1022                           
  1023                           
  1024                           ; 2 bytes @ 0xF
  1025     00AF                     	ds	2
  1026     00B1                     strcat@length_dest:
  1027     00B1                     SplitPacket@section:	
  1028                           ; 2 bytes @ 0x11
  1029                           
  1030                           
  1031                           ; 2 bytes @ 0x11
  1032     00B1                     	ds	2
  1033     00B3                     ?_ConcatToPacket:
  1034     00B3                     ConcatToPacket@str:	
  1035                           ; 1 bytes @ 0x13
  1036                           
  1037     00B3                     SplitPacket@i_part:	
  1038                           ; 2 bytes @ 0x13
  1039                           
  1040                           
  1041                           ; 2 bytes @ 0x13
  1042     00B3                     	ds	1
  1043     00B4                     ?___awmod:
  1044     00B4                     ___awmod@divisor:	
  1045                           ; 2 bytes @ 0x14
  1046                           
  1047                           
  1048                           ; 2 bytes @ 0x14
  1049     00B4                     	ds	1
  1050     00B5                     ConcatToPacket@delim:
  1051     00B5                     SplitPacket@pkt:	
  1052                           ; 1 bytes @ 0x15
  1053                           
  1054                           
  1055                           ; 1 bytes @ 0x15
  1056     00B5                     	ds	1
  1057     00B6                     ??_ConcatToPacket:
  1058     00B6                     SplitPacket@i:	
  1059                           ; 1 bytes @ 0x16
  1060                           
  1061     00B6                     ___awmod@dividend:	
  1062                           ; 2 bytes @ 0x16
  1063                           
  1064                           
  1065                           ; 2 bytes @ 0x16
  1066     00B6                     	ds	1
  1067     00B7                     ConcatToPacket@packet_length:
  1068                           
  1069                           ; 2 bytes @ 0x17
  1070     00B7                     	ds	1
  1071     00B8                     ??___awmod:
  1072                           
  1073                           ; 1 bytes @ 0x18
  1074     00B8                     	ds	1
  1075     00B9                     ConcatToPacket@pkt:
  1076     00B9                     ___awmod@counter:	
  1077                           ; 1 bytes @ 0x19
  1078                           
  1079                           
  1080                           ; 1 bytes @ 0x19
  1081     00B9                     	ds	1
  1082     00BA                     ___awmod@sign:
  1083                           
  1084                           ; 1 bytes @ 0x1A
  1085     00BA                     	ds	1
  1086     00BB                     ?___wmul:
  1087     00BB                     ___wmul@multiplier:	
  1088                           ; 2 bytes @ 0x1B
  1089                           
  1090                           
  1091                           ; 2 bytes @ 0x1B
  1092     00BB                     	ds	2
  1093     00BD                     ___wmul@multiplicand:
  1094                           
  1095                           ; 2 bytes @ 0x1D
  1096     00BD                     	ds	2
  1097     00BF                     ??___wmul:
  1098     00BF                     ___wmul@product:	
  1099                           ; 1 bytes @ 0x1F
  1100                           
  1101                           
  1102                           ; 2 bytes @ 0x1F
  1103     00BF                     	ds	2
  1104     00C1                     ??_read_NumPad:
  1105     00C1                     ?_UART_TxString:	
  1106                           ; 1 bytes @ 0x21
  1107                           
  1108     00C1                     ?_pow:	
  1109                           ; 1 bytes @ 0x21
  1110                           
  1111     00C1                     pow@exp:	
  1112                           ; 2 bytes @ 0x21
  1113                           
  1114     00C1                     UART_TxString@is_ACK:	
  1115                           ; 1 bytes @ 0x21
  1116                           
  1117                           
  1118                           ; 1 bytes @ 0x21
  1119     00C1                     	ds	1
  1120     00C2                     ??_UART_TxString:
  1121                           
  1122                           ; 1 bytes @ 0x22
  1123     00C2                     	ds	1
  1124     00C3                     ??_pow:
  1125     00C3                     UART_TxString@n:	
  1126                           ; 1 bytes @ 0x23
  1127                           
  1128                           
  1129                           ; 2 bytes @ 0x23
  1130     00C3                     	ds	2
  1131     00C5                     pow@b:
  1132     00C5                     UART_TxString@str:	
  1133                           ; 1 bytes @ 0x25
  1134                           
  1135                           
  1136                           ; 1 bytes @ 0x25
  1137     00C5                     	ds	1
  1138     00C6                     pow@i:
  1139                           
  1140                           ; 2 bytes @ 0x26
  1141     00C6                     	ds	2
  1142     00C8                     pow@n:
  1143                           
  1144                           ; 2 bytes @ 0x28
  1145     00C8                     	ds	2
  1146     00CA                     ?___aldiv:
  1147     00CA                     ___aldiv@divisor:	
  1148                           ; 4 bytes @ 0x2A
  1149                           
  1150                           
  1151                           ; 4 bytes @ 0x2A
  1152     00CA                     	ds	1
  1153     00CB                     read_NumPad@id:
  1154                           
  1155                           ; 2 bytes @ 0x2B
  1156     00CB                     	ds	3
  1157     00CE                     ___aldiv@dividend:
  1158                           
  1159                           ; 4 bytes @ 0x2E
  1160     00CE                     	ds	4
  1161     00D2                     ??___aldiv:
  1162                           
  1163                           ; 1 bytes @ 0x32
  1164     00D2                     	ds	1
  1165     00D3                     ___aldiv@counter:
  1166                           
  1167                           ; 1 bytes @ 0x33
  1168     00D3                     	ds	1
  1169     00D4                     ___aldiv@sign:
  1170                           
  1171                           ; 1 bytes @ 0x34
  1172     00D4                     	ds	1
  1173     00D5                     ___aldiv@quotient:
  1174                           
  1175                           ; 4 bytes @ 0x35
  1176     00D5                     	ds	4
  1177     00D9                     ?_ConvertToString:
  1178     00D9                     ?_UART_init:	
  1179                           ; 1 bytes @ 0x39
  1180                           
  1181     00D9                     ConvertToString@n:	
  1182                           ; 1 bytes @ 0x39
  1183                           
  1184     00D9                     UART_init@baudrate:	
  1185                           ; 4 bytes @ 0x39
  1186                           
  1187                           
  1188                           ; 4 bytes @ 0x39
  1189     00D9                     	ds	4
  1190     00DD                     ??_UART_init:
  1191     00DD                     ConvertToString@str:	
  1192                           ; 1 bytes @ 0x3D
  1193                           
  1194                           
  1195                           ; 2 bytes @ 0x3D
  1196     00DD                     	ds	2
  1197     00DF                     ??_ConvertToString:
  1198                           
  1199                           ; 1 bytes @ 0x3F
  1200     00DF                     	ds	3
  1201     00E2                     ??_main:
  1202                           
  1203                           	psect	cstackCOMMON
  1204     0070                     __pcstackCOMMON:	
  1205                           ; 1 bytes @ 0x42
  1206                           
  1207     0070                     ?_init_PIC:
  1208     0070                     ?_read_NumPad:	
  1209                           ; 1 bytes @ 0x0
  1210                           
  1211     0070                     ?_SplitPacket:	
  1212                           ; 1 bytes @ 0x0
  1213                           
  1214     0070                     ?_init_LCD:	
  1215                           ; 1 bytes @ 0x0
  1216                           
  1217     0070                     ?_init_NumPad:	
  1218                           ; 1 bytes @ 0x0
  1219                           
  1220     0070                     ?_init_Timer0:	
  1221                           ; 1 bytes @ 0x0
  1222                           
  1223     0070                     ?_eeprom_read:	
  1224                           ; 1 bytes @ 0x0
  1225                           
  1226     0070                     ?_Fill:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229     0070                     ?_main:	
  1230                           ; 1 bytes @ 0x0
  1231                           
  1232     0070                     ?_UART_TxChar:	
  1233                           ; 1 bytes @ 0x0
  1234                           
  1235     0070                     ?_IRS:	
  1236                           ; 1 bytes @ 0x0
  1237                           
  1238     0070                     ?i1_UART_TxChar:	
  1239                           ; 1 bytes @ 0x0
  1240                           
  1241     0070                     ??i1_UART_TxChar:	
  1242                           ; 1 bytes @ 0x0
  1243                           
  1244     0070                     ?i1_srand:	
  1245                           ; 1 bytes @ 0x0
  1246                           
  1247     0070                     ?i1___lmul:	
  1248                           ; 1 bytes @ 0x0
  1249                           
  1250     0070                     i1srand@x:	
  1251                           ; 4 bytes @ 0x0
  1252                           
  1253     0070                     i1___lmul@multiplier:	
  1254                           ; 2 bytes @ 0x0
  1255                           
  1256                           
  1257                           ; 4 bytes @ 0x0
  1258     0070                     	ds	1
  1259     0071                     i1UART_TxChar@ch:
  1260                           
  1261                           ; 1 bytes @ 0x1
  1262     0071                     	ds	1
  1263     0072                     ??i1_srand:
  1264                           
  1265                           ; 1 bytes @ 0x2
  1266     0072                     	ds	2
  1267     0074                     i1___lmul@multiplicand:
  1268                           
  1269                           ; 4 bytes @ 0x4
  1270     0074                     	ds	4
  1271     0078                     ??i1___lmul:
  1272                           
  1273                           ; 1 bytes @ 0x8
  1274     0078                     	ds	1
  1275     0079                     i1___lmul@product:
  1276                           
  1277                           ; 4 bytes @ 0x9
  1278     0079                     	ds	4
  1279     007D                     ??i1___awmod:
  1280                           
  1281                           ; 1 bytes @ 0xD
  1282     007D                     	ds	1
  1283     007E                     ??i1___wmul:
  1284                           
  1285                           	psect	cstackBANK0
  1286     0020                     __pcstackBANK0:	
  1287                           ; 1 bytes @ 0xE
  1288                           
  1289     0020                     ?i1_rand:
  1290                           
  1291                           ; 2 bytes @ 0x0
  1292     0020                     	ds	2
  1293     0022                     ??i1_rand:
  1294                           
  1295                           ; 1 bytes @ 0x2
  1296     0022                     	ds	5
  1297     0027                     ?i1___awmod:
  1298     0027                     i1___awmod@divisor:	
  1299                           ; 2 bytes @ 0x7
  1300                           
  1301                           
  1302                           ; 2 bytes @ 0x7
  1303     0027                     	ds	2
  1304     0029                     i1___awmod@dividend:
  1305                           
  1306                           ; 2 bytes @ 0x9
  1307     0029                     	ds	2
  1308     002B                     i1___awmod@counter:
  1309                           
  1310                           ; 1 bytes @ 0xB
  1311     002B                     	ds	1
  1312     002C                     i1___awmod@sign:
  1313                           
  1314                           ; 1 bytes @ 0xC
  1315     002C                     	ds	1
  1316     002D                     ?i1___wmul:
  1317     002D                     i1___wmul@multiplier:	
  1318                           ; 2 bytes @ 0xD
  1319                           
  1320                           
  1321                           ; 2 bytes @ 0xD
  1322     002D                     	ds	2
  1323     002F                     i1___wmul@multiplicand:
  1324                           
  1325                           ; 2 bytes @ 0xF
  1326     002F                     	ds	2
  1327     0031                     i1___wmul@product:
  1328                           
  1329                           ; 2 bytes @ 0x11
  1330     0031                     	ds	2
  1331     0033                     ?i1_UART_TxString:
  1332     0033                     i1UART_TxString@is_ACK:	
  1333                           ; 1 bytes @ 0x13
  1334                           
  1335                           
  1336                           ; 1 bytes @ 0x13
  1337     0033                     	ds	1
  1338     0034                     ??i1_UART_TxString:
  1339                           
  1340                           ; 1 bytes @ 0x14
  1341     0034                     	ds	1
  1342     0035                     i1UART_TxString@str:
  1343                           
  1344                           ; 1 bytes @ 0x15
  1345     0035                     	ds	1
  1346     0036                     i1UART_TxString@n:
  1347                           
  1348                           ; 2 bytes @ 0x16
  1349     0036                     	ds	2
  1350     0038                     ??_IRS:
  1351                           
  1352                           ; 1 bytes @ 0x18
  1353     0038                     	ds	4
  1354                           
  1355                           	psect	maintext
  1356     0067                     __pmaintext:	
  1357 ;;
  1358 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1359 ;;
  1360 ;; *************** function _main *****************
  1361 ;; Defined at:
  1362 ;;		line 124 in file "main.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;		None
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;  num_rand_s     16   11[BANK3 ] unsigned char [16]
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1371 ;; Tracked objects:
  1372 ;;		On entry : B00/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1376 ;;      Params:         0       0       0       0       0
  1377 ;;      Locals:         0       0       0      16       0
  1378 ;;      Temps:          0       0       0       0       0
  1379 ;;      Totals:         0       0       0      16       0
  1380 ;;Total ram usage:       16 bytes
  1381 ;; Hardware stack levels required when called: 8
  1382 ;; This function calls:
  1383 ;;		_CompareStrings
  1384 ;;		_ConcatToPacket
  1385 ;;		_ConvertToString
  1386 ;;		_SplitPacket
  1387 ;;		_UART_TxString
  1388 ;;		_init_PIC
  1389 ;;		_lcdPrint
  1390 ;;		_lcdSend
  1391 ;;		_read_NumPad
  1392 ;; This function is called by:
  1393 ;;		Startup code after reset
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397     0067                     _main:	
  1398                           ;psect for function _main
  1399                           
  1400     0067                     l3819:	
  1401                           ;incstack = 0
  1402                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1403                           
  1404                           
  1405                           ;main.c: 127:     init_PIC();
  1406     0067  120A  158A  24B7  120A  118A  	fcall	_init_PIC
  1407     006C                     l3821:
  1408                           
  1409                           ;main.c: 130:     {;main.c: 131:         if(pr_start)
  1410     006C  1283               	bcf	3,5	;RP0=0, select bank0
  1411     006D  1303               	bcf	3,6	;RP1=0, select bank0
  1412     006E  084A               	movf	_pr_start,w
  1413     006F  1903               	btfsc	3,2
  1414     0070  2872               	goto	u4001
  1415     0071  2873               	goto	u4000
  1416     0072                     u4001:
  1417     0072  288A               	goto	l3829
  1418     0073                     u4000:
  1419     0073                     l3823:
  1420                           
  1421                           ;main.c: 132:         {;main.c: 133:             lcdSend(0x01, 0);
  1422     0073  1683               	bsf	3,5	;RP0=1, select bank1
  1423     0074  1303               	bcf	3,6	;RP1=0, select bank1
  1424     0075  01A0               	clrf	lcdSend@tipo^(0+128)
  1425     0076  3001               	movlw	1
  1426     0077  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1427     007C                     l3825:
  1428                           
  1429                           ;main.c: 134:             lcdPrint("Premi '#'\0");
  1430     007C  30AC               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1431     007D  1683               	bsf	3,5	;RP0=1, select bank1
  1432     007E  1303               	bcf	3,6	;RP1=0, select bank1
  1433     007F  00A4               	movwf	lcdPrint@str^(0+128)
  1434     0080  3080               	movlw	128
  1435     0081  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1436     0082  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1437     0087                     l3827:
  1438                           
  1439                           ;main.c: 135:             pr_start = 0;
  1440     0087  1283               	bcf	3,5	;RP0=0, select bank0
  1441     0088  1303               	bcf	3,6	;RP1=0, select bank0
  1442     0089  01CA               	clrf	_pr_start
  1443     008A                     l3829:
  1444                           
  1445                           ;main.c: 137:         if(pr_err_max)
  1446     008A  0849               	movf	_pr_err_max,w
  1447     008B  1903               	btfsc	3,2
  1448     008C  288E               	goto	u4011
  1449     008D  288F               	goto	u4010
  1450     008E                     u4011:
  1451     008E  28BA               	goto	l3839
  1452     008F                     u4010:
  1453     008F                     l3831:
  1454                           
  1455                           ;main.c: 138:         {;main.c: 140:             lcdSend(0x01, 0);
  1456     008F  1683               	bsf	3,5	;RP0=1, select bank1
  1457     0090  1303               	bcf	3,6	;RP1=0, select bank1
  1458     0091  01A0               	clrf	lcdSend@tipo^(0+128)
  1459     0092  3001               	movlw	1
  1460     0093  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1461     0098                     l3833:
  1462                           
  1463                           ;main.c: 141:             lcdPrint("ERRORE\0");
  1464     0098  30C1               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1465     0099  1683               	bsf	3,5	;RP0=1, select bank1
  1466     009A  1303               	bcf	3,6	;RP1=0, select bank1
  1467     009B  00A4               	movwf	lcdPrint@str^(0+128)
  1468     009C  3080               	movlw	128
  1469     009D  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1470     009E  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1471     00A3                     l3835:
  1472                           
  1473                           ;main.c: 142:             lcdSend(0xC0, 0);
  1474     00A3  1683               	bsf	3,5	;RP0=1, select bank1
  1475     00A4  1303               	bcf	3,6	;RP1=0, select bank1
  1476     00A5  01A0               	clrf	lcdSend@tipo^(0+128)
  1477     00A6  30C0               	movlw	192
  1478     00A7  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1479                           
  1480                           ;main.c: 143:             lcdPrint("ID > 250\0");
  1481     00AC  30B7               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1482     00AD  1683               	bsf	3,5	;RP0=1, select bank1
  1483     00AE  1303               	bcf	3,6	;RP1=0, select bank1
  1484     00AF  00A4               	movwf	lcdPrint@str^(0+128)
  1485     00B0  3080               	movlw	128
  1486     00B1  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1487     00B2  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1488     00B7                     l3837:
  1489                           
  1490                           ;main.c: 144:             pr_err_max = 0;
  1491     00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1492     00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1493     00B9  01C9               	clrf	_pr_err_max
  1494     00BA                     l3839:
  1495                           
  1496                           ;main.c: 146:         if(pr_succ)
  1497     00BA  0848               	movf	_pr_succ,w
  1498     00BB  1903               	btfsc	3,2
  1499     00BC  28BE               	goto	u4021
  1500     00BD  28BF               	goto	u4020
  1501     00BE                     u4021:
  1502     00BE  28E6               	goto	l3851
  1503     00BF                     u4020:
  1504     00BF                     l3841:
  1505                           
  1506                           ;main.c: 147:         {;main.c: 149:             lcdSend(0x01, 0);
  1507     00BF  1683               	bsf	3,5	;RP0=1, select bank1
  1508     00C0  1303               	bcf	3,6	;RP1=0, select bank1
  1509     00C1  01A0               	clrf	lcdSend@tipo^(0+128)
  1510     00C2  3001               	movlw	1
  1511     00C3  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1512     00C8                     l3843:
  1513                           
  1514                           ;main.c: 150:             lcdPrint("ID Salvato\0");
  1515     00C8  30A0               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1516     00C9  1683               	bsf	3,5	;RP0=1, select bank1
  1517     00CA  1303               	bcf	3,6	;RP1=0, select bank1
  1518     00CB  00A4               	movwf	lcdPrint@str^(0+128)
  1519     00CC  3080               	movlw	128
  1520     00CD  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1521     00CE  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1522     00D3                     l3845:
  1523                           
  1524                           ;main.c: 152:             milliseconds = 0;
  1525     00D3  3000               	movlw	0
  1526     00D4  1283               	bcf	3,5	;RP0=0, select bank0
  1527     00D5  1303               	bcf	3,6	;RP1=0, select bank0
  1528     00D6  00C3               	movwf	_milliseconds+3
  1529     00D7  3000               	movlw	0
  1530     00D8  00C2               	movwf	_milliseconds+2
  1531     00D9  3000               	movlw	0
  1532     00DA  00C1               	movwf	_milliseconds+1
  1533     00DB  3000               	movlw	0
  1534     00DC  00C0               	movwf	_milliseconds
  1535     00DD                     l3847:
  1536                           
  1537                           ;main.c: 153:             seconds = 1000;
  1538     00DD  3000               	movlw	0
  1539     00DE  00BF               	movwf	_seconds+3
  1540     00DF  3000               	movlw	0
  1541     00E0  00BE               	movwf	_seconds+2
  1542     00E1  3003               	movlw	3
  1543     00E2  00BD               	movwf	_seconds+1
  1544     00E3  30E8               	movlw	232
  1545     00E4  00BC               	movwf	_seconds
  1546     00E5                     l3849:
  1547                           
  1548                           ;main.c: 154:             pr_succ = 0;
  1549     00E5  01C8               	clrf	_pr_succ
  1550     00E6                     l3851:
  1551                           
  1552                           ;main.c: 158:         read_NumPad();
  1553     00E6  120A  118A  23BB  120A  118A  	fcall	_read_NumPad
  1554     00EB                     l3853:
  1555                           
  1556                           ;main.c: 161:         if(i_id != old_i_id && initialize)
  1557     00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1558     00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1559     00ED  0847               	movf	_old_i_id+1,w
  1560     00EE  1683               	bsf	3,5	;RP0=1, select bank1
  1561     00EF  1303               	bcf	3,6	;RP1=0, select bank1
  1562     00F0  0665               	xorwf	(_i_id+1)^(0+128),w
  1563     00F1  1D03               	skipz
  1564     00F2  28F9               	goto	u4035
  1565     00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1566     00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1567     00F5  0846               	movf	_old_i_id,w
  1568     00F6  1683               	bsf	3,5	;RP0=1, select bank1
  1569     00F7  1303               	bcf	3,6	;RP1=0, select bank1
  1570     00F8  0664               	xorwf	_i_id^(0+128),w
  1571     00F9                     u4035:
  1572     00F9  1903               	skipnz
  1573     00FA  28FC               	goto	u4031
  1574     00FB  28FD               	goto	u4030
  1575     00FC                     u4031:
  1576     00FC  2928               	goto	l3863
  1577     00FD                     u4030:
  1578     00FD                     l3855:
  1579     00FD  086E               	movf	_initialize^(0+128),w
  1580     00FE  1903               	btfsc	3,2
  1581     00FF  2901               	goto	u4041
  1582     0100  2902               	goto	u4040
  1583     0101                     u4041:
  1584     0101  2928               	goto	l3863
  1585     0102                     u4040:
  1586     0102                     l3857:
  1587                           
  1588                           ;main.c: 162:         {;main.c: 164:             lcdSend(0x01, 0);
  1589     0102  01A0               	clrf	lcdSend@tipo^(0+128)
  1590     0103  3001               	movlw	1
  1591     0104  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1592     0109                     l3859:
  1593                           
  1594                           ;main.c: 165:             lcdPrint("#=conf. *=canc.\0");
  1595     0109  3038               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1596     010A  1683               	bsf	3,5	;RP0=1, select bank1
  1597     010B  1303               	bcf	3,6	;RP1=0, select bank1
  1598     010C  00A4               	movwf	lcdPrint@str^(0+128)
  1599     010D  3080               	movlw	128
  1600     010E  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1601     010F  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1602     0114                     l3861:
  1603                           
  1604                           ;main.c: 166:             lcdSend(0xC0, 0);
  1605     0114  1683               	bsf	3,5	;RP0=1, select bank1
  1606     0115  1303               	bcf	3,6	;RP1=0, select bank1
  1607     0116  01A0               	clrf	lcdSend@tipo^(0+128)
  1608     0117  30C0               	movlw	192
  1609     0118  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1610                           
  1611                           ;main.c: 167:             lcdPrint(PIC_ID);
  1612     011D  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  1613     011E  1683               	bsf	3,5	;RP0=1, select bank1
  1614     011F  1303               	bcf	3,6	;RP1=0, select bank1
  1615     0120  00A4               	movwf	lcdPrint@str^(0+128)
  1616     0121  3000               	movlw	0
  1617     0122  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1618     0123  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1619     0128                     l3863:
  1620                           
  1621                           ;main.c: 170:         old_i_id = i_id;
  1622     0128  1683               	bsf	3,5	;RP0=1, select bank1
  1623     0129  1303               	bcf	3,6	;RP1=0, select bank1
  1624     012A  0865               	movf	(_i_id+1)^(0+128),w
  1625     012B  1283               	bcf	3,5	;RP0=0, select bank0
  1626     012C  1303               	bcf	3,6	;RP1=0, select bank0
  1627     012D  00C7               	movwf	_old_i_id+1
  1628     012E  1683               	bsf	3,5	;RP0=1, select bank1
  1629     012F  1303               	bcf	3,6	;RP1=0, select bank1
  1630     0130  0864               	movf	_i_id^(0+128),w
  1631     0131  1283               	bcf	3,5	;RP0=0, select bank0
  1632     0132  1303               	bcf	3,6	;RP1=0, select bank0
  1633     0133  00C6               	movwf	_old_i_id
  1634     0134                     l3865:
  1635                           
  1636                           ;main.c: 174:         if(num_rand != old_num_rand)
  1637     0134  0845               	movf	_old_num_rand+1,w
  1638     0135  1683               	bsf	3,5	;RP0=1, select bank1
  1639     0136  1303               	bcf	3,6	;RP1=0, select bank1
  1640     0137  0663               	xorwf	(_num_rand+1)^(0+128),w
  1641     0138  1D03               	skipz
  1642     0139  2940               	goto	u4055
  1643     013A  1283               	bcf	3,5	;RP0=0, select bank0
  1644     013B  1303               	bcf	3,6	;RP1=0, select bank0
  1645     013C  0844               	movf	_old_num_rand,w
  1646     013D  1683               	bsf	3,5	;RP0=1, select bank1
  1647     013E  1303               	bcf	3,6	;RP1=0, select bank1
  1648     013F  0662               	xorwf	_num_rand^(0+128),w
  1649     0140                     u4055:
  1650     0140  1903               	skipnz
  1651     0141  2943               	goto	u4051
  1652     0142  2944               	goto	u4050
  1653     0143                     u4051:
  1654     0143  299D               	goto	l3891
  1655     0144                     u4050:
  1656     0144                     l3867:
  1657                           
  1658                           ;main.c: 175:         {;main.c: 177:             lcdSend(0x01, 0);
  1659     0144  01A0               	clrf	lcdSend@tipo^(0+128)
  1660     0145  3001               	movlw	1
  1661     0146  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1662     014B                     l3869:
  1663                           
  1664                           ;main.c: 179:             char num_rand_s[16];;main.c: 180:             ConvertToString(
      +                          num_rand, num_rand_s);
  1665     014B  1683               	bsf	3,5	;RP0=1, select bank1
  1666     014C  1303               	bcf	3,6	;RP1=0, select bank1
  1667     014D  0862               	movf	_num_rand^(0+128),w
  1668     014E  00D9               	movwf	ConvertToString@n^(0+128)
  1669     014F  0863               	movf	(_num_rand+1)^(0+128),w
  1670     0150  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  1671     0151  3000               	movlw	0
  1672     0152  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  1673     0153  30FF               	movlw	255
  1674     0154  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  1675     0155  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  1676     0156  30D0               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1677     0157  00DD               	movwf	ConvertToString@str^(0+128)
  1678     0158  3001               	movlw	1
  1679     0159  00DE               	movwf	(ConvertToString@str+1)^(0+128)
  1680     015A  120A  118A  25BA  120A  118A  	fcall	_ConvertToString
  1681     015F                     l3871:
  1682                           
  1683                           ;main.c: 181:             lcdPrint(num_rand_s);
  1684     015F  30D0               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1685     0160  1683               	bsf	3,5	;RP0=1, select bank1
  1686     0161  1303               	bcf	3,6	;RP1=0, select bank1
  1687     0162  00A4               	movwf	lcdPrint@str^(0+128)
  1688     0163  3001               	movlw	1
  1689     0164  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1690     0165  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1691     016A                     l3873:
  1692                           
  1693                           ;main.c: 193:             packet[0] = '0';
  1694     016A  3030               	movlw	48
  1695     016B  1683               	bsf	3,5	;RP0=1, select bank3
  1696     016C  1703               	bsf	3,6	;RP1=1, select bank3
  1697     016D  00B2               	movwf	_packet^(0+384)
  1698     016E                     l3875:
  1699                           
  1700                           ;main.c: 194:             packet[1] = '/';
  1701     016E  302F               	movlw	47
  1702     016F  00B3               	movwf	(_packet^(0+384)+1)
  1703     0170                     l3877:
  1704                           
  1705                           ;main.c: 195:             packet[2] = '\0';
  1706     0170  01B4               	clrf	(_packet^(0+384)+2)
  1707     0171                     l3879:
  1708                           
  1709                           ;main.c: 197:             ConcatToPacket(packet, PIC_ID, '/');
  1710     0171  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  1711     0172  1683               	bsf	3,5	;RP0=1, select bank1
  1712     0173  1303               	bcf	3,6	;RP1=0, select bank1
  1713     0174  00B3               	movwf	ConcatToPacket@str^(0+128)
  1714     0175  3000               	movlw	0
  1715     0176  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1716     0177  302F               	movlw	47
  1717     0178  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1718     0179  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  1719     017A  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  1720     017F                     l3881:
  1721                           
  1722                           ;main.c: 199:             packet[6] = '0';
  1723     017F  3030               	movlw	48
  1724     0180  1683               	bsf	3,5	;RP0=1, select bank3
  1725     0181  1703               	bsf	3,6	;RP1=1, select bank3
  1726     0182  00B8               	movwf	(_packet^(0+384)+6)
  1727     0183                     l3883:
  1728                           
  1729                           ;main.c: 200:             packet[7] = '/';
  1730     0183  302F               	movlw	47
  1731     0184  00B9               	movwf	(_packet^(0+384)+7)
  1732     0185                     l3885:
  1733                           
  1734                           ;main.c: 201:             packet[8] = '\0';
  1735     0185  01BA               	clrf	(_packet^(0+384)+8)
  1736     0186                     l3887:
  1737                           
  1738                           ;main.c: 203:             ConcatToPacket(packet, num_rand_s, ' ');
  1739     0186  30D0               	movlw	(low (main@num_rand_s| (0+256)))& (0+255)
  1740     0187  1683               	bsf	3,5	;RP0=1, select bank1
  1741     0188  1303               	bcf	3,6	;RP1=0, select bank1
  1742     0189  00B3               	movwf	ConcatToPacket@str^(0+128)
  1743     018A  3001               	movlw	1
  1744     018B  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1745     018C  3020               	movlw	32
  1746     018D  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1747     018E  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  1748     018F  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  1749     0194                     l3889:
  1750                           
  1751                           ;main.c: 205:             UART_TxString(packet, 0);
  1752     0194  1683               	bsf	3,5	;RP0=1, select bank1
  1753     0195  1303               	bcf	3,6	;RP1=0, select bank1
  1754     0196  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  1755     0197  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  1756     0198  120A  158A  252F  120A  118A  	fcall	_UART_TxString
  1757     019D                     l3891:
  1758                           
  1759                           ;main.c: 208:         old_num_rand = num_rand;
  1760     019D  1683               	bsf	3,5	;RP0=1, select bank1
  1761     019E  1303               	bcf	3,6	;RP1=0, select bank1
  1762     019F  0863               	movf	(_num_rand+1)^(0+128),w
  1763     01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1764     01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1765     01A2  00C5               	movwf	_old_num_rand+1
  1766     01A3  1683               	bsf	3,5	;RP0=1, select bank1
  1767     01A4  1303               	bcf	3,6	;RP1=0, select bank1
  1768     01A5  0862               	movf	_num_rand^(0+128),w
  1769     01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1770     01A7  1303               	bcf	3,6	;RP1=0, select bank0
  1771     01A8  00C4               	movwf	_old_num_rand
  1772     01A9                     l3893:
  1773                           
  1774                           ;main.c: 211:         if(recieved)
  1775     01A9  084D               	movf	_recieved,w
  1776     01AA  1903               	btfsc	3,2
  1777     01AB  29AD               	goto	u4061
  1778     01AC  29AE               	goto	u4060
  1779     01AD                     u4061:
  1780     01AD  2A85               	goto	l3945
  1781     01AE                     u4060:
  1782     01AE                     l3895:
  1783                           
  1784                           ;main.c: 212:         {;main.c: 213:             SplitPacket(dato);
  1785     01AE  3010               	movlw	(low (_dato| (0+256)))& (0+255)
  1786     01AF  120A  158A  26C8  120A  118A  	fcall	_SplitPacket
  1787     01B4                     l3897:
  1788                           
  1789                           ;main.c: 215:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '0')
  1790     01B4  3031               	movlw	49
  1791     01B5  1683               	bsf	3,5	;RP0=1, select bank1
  1792     01B6  1303               	bcf	3,6	;RP1=0, select bank1
  1793     01B7  0669               	xorwf	_source^(0+128),w
  1794     01B8  1D03               	btfss	3,2
  1795     01B9  29BB               	goto	u4071
  1796     01BA  29BC               	goto	u4070
  1797     01BB                     u4071:
  1798     01BB  2A3F               	goto	l3929
  1799     01BC                     u4070:
  1800     01BC                     l3899:
  1801     01BC  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  1802     01BD  00A7               	movwf	CompareStrings@str2^(0+128)
  1803     01BE  3000               	movlw	0
  1804     01BF  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  1805     01C0  30C1               	movlw	(low (_id_dest| (0+256)))& (0+255)
  1806     01C1  120A  158A  2191  120A  118A  	fcall	_CompareStrings
  1807     01C6  3A00               	xorlw	0
  1808     01C7  1903               	skipnz
  1809     01C8  29CA               	goto	u4081
  1810     01C9  29CB               	goto	u4080
  1811     01CA                     u4081:
  1812     01CA  2A3F               	goto	l3929
  1813     01CB                     u4080:
  1814     01CB                     l3901:
  1815     01CB  3030               	movlw	48
  1816     01CC  1683               	bsf	3,5	;RP0=1, select bank1
  1817     01CD  1303               	bcf	3,6	;RP1=0, select bank1
  1818     01CE  0668               	xorwf	_type^(0+128),w
  1819     01CF  1D03               	btfss	3,2
  1820     01D0  29D2               	goto	u4091
  1821     01D1  29D3               	goto	u4090
  1822     01D2                     u4091:
  1823     01D2  2A3F               	goto	l3929
  1824     01D3                     u4090:
  1825     01D3                     l3903:
  1826                           
  1827                           ;main.c: 216:             {;main.c: 218:                 packet[0] = '0';
  1828     01D3  3030               	movlw	48
  1829     01D4  1683               	bsf	3,5	;RP0=1, select bank3
  1830     01D5  1703               	bsf	3,6	;RP1=1, select bank3
  1831     01D6  00B2               	movwf	_packet^(0+384)
  1832                           
  1833                           ;main.c: 219:                 packet[1] = '/';
  1834     01D7  302F               	movlw	47
  1835     01D8  00B3               	movwf	(_packet^(0+384)+1)
  1836     01D9                     l3905:
  1837                           
  1838                           ;main.c: 220:                 packet[2] = '\0';
  1839     01D9  01B4               	clrf	(_packet^(0+384)+2)
  1840     01DA                     l3907:
  1841                           
  1842                           ;main.c: 221:                 ConcatToPacket(packet, PIC_ID, '/');
  1843     01DA  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  1844     01DB  1683               	bsf	3,5	;RP0=1, select bank1
  1845     01DC  1303               	bcf	3,6	;RP1=0, select bank1
  1846     01DD  00B3               	movwf	ConcatToPacket@str^(0+128)
  1847     01DE  3000               	movlw	0
  1848     01DF  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1849     01E0  302F               	movlw	47
  1850     01E1  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1851     01E2  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  1852     01E3  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  1853     01E8                     l3909:
  1854                           
  1855                           ;main.c: 222:                 ConcatToPacket(packet, "2", ' ');
  1856     01E8  30D1               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1857     01E9  1683               	bsf	3,5	;RP0=1, select bank1
  1858     01EA  1303               	bcf	3,6	;RP1=0, select bank1
  1859     01EB  00B3               	movwf	ConcatToPacket@str^(0+128)
  1860     01EC  3080               	movlw	128
  1861     01ED  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  1862     01EE  3020               	movlw	32
  1863     01EF  00B5               	movwf	ConcatToPacket@delim^(0+128)
  1864     01F0  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  1865     01F1  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  1866     01F6                     l3911:
  1867                           
  1868                           ;main.c: 223:                 UART_TxString(packet, 1);
  1869     01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1870     01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1871     01F8  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  1872     01F9  0AC1               	incf	UART_TxString@is_ACK^(0+128),f
  1873     01FA  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  1874     01FB  120A  158A  252F  120A  118A  	fcall	_UART_TxString
  1875     0200                     l3913:
  1876                           
  1877                           ;main.c: 225:                 compare = 1;
  1878     0200  1683               	bsf	3,5	;RP0=1, select bank1
  1879     0201  1303               	bcf	3,6	;RP1=0, select bank1
  1880     0202  01E6               	clrf	_compare^(0+128)
  1881     0203  0AE6               	incf	_compare^(0+128),f
  1882     0204                     l3915:
  1883                           
  1884                           ;main.c: 226:                 old_num_rand = num_rand = 0;
  1885     0204  01E2               	clrf	_num_rand^(0+128)
  1886     0205  01E3               	clrf	(_num_rand+1)^(0+128)
  1887     0206  1283               	bcf	3,5	;RP0=0, select bank0
  1888     0207  1303               	bcf	3,6	;RP1=0, select bank0
  1889     0208  01C4               	clrf	_old_num_rand
  1890     0209  01C5               	clrf	_old_num_rand+1
  1891     020A                     l3917:
  1892                           
  1893                           ;main.c: 228:                 maxFail = 3;
  1894     020A  3003               	movlw	3
  1895     020B  1683               	bsf	3,5	;RP0=1, select bank1
  1896     020C  1303               	bcf	3,6	;RP1=0, select bank1
  1897     020D  00ED               	movwf	_maxFail^(0+128)
  1898     020E                     l3919:
  1899                           
  1900                           ;main.c: 230:                 lcdSend(0x01, 0);
  1901     020E  01A0               	clrf	lcdSend@tipo^(0+128)
  1902     020F  3001               	movlw	1
  1903     0210  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1904     0215                     l3921:
  1905                           
  1906                           ;main.c: 231:                 lcdPrint("Inserisci codice\0");
  1907     0215  3026               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1908     0216  1683               	bsf	3,5	;RP0=1, select bank1
  1909     0217  1303               	bcf	3,6	;RP1=0, select bank1
  1910     0218  00A4               	movwf	lcdPrint@str^(0+128)
  1911     0219  3080               	movlw	128
  1912     021A  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1913     021B  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1914     0220                     l3923:
  1915                           
  1916                           ;main.c: 232:                 lcdSend(0xC0, 0);
  1917     0220  1683               	bsf	3,5	;RP0=1, select bank1
  1918     0221  1303               	bcf	3,6	;RP1=0, select bank1
  1919     0222  01A0               	clrf	lcdSend@tipo^(0+128)
  1920     0223  30C0               	movlw	192
  1921     0224  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1922     0229                     l3925:
  1923                           
  1924                           ;main.c: 233:                 lcdPrint("Tentativi: \0");
  1925     0229  3087               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1926     022A  1683               	bsf	3,5	;RP0=1, select bank1
  1927     022B  1303               	bcf	3,6	;RP1=0, select bank1
  1928     022C  00A4               	movwf	lcdPrint@str^(0+128)
  1929     022D  3080               	movlw	128
  1930     022E  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  1931     022F  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  1932     0234                     l3927:
  1933                           
  1934                           ;main.c: 234:                 lcdSend(maxFail + '0', 1);
  1935     0234  1683               	bsf	3,5	;RP0=1, select bank1
  1936     0235  1303               	bcf	3,6	;RP1=0, select bank1
  1937     0236  01A0               	clrf	lcdSend@tipo^(0+128)
  1938     0237  0AA0               	incf	lcdSend@tipo^(0+128),f
  1939     0238  086D               	movf	_maxFail^(0+128),w
  1940     0239  3E30               	addlw	48
  1941     023A  160A  118A  271A  120A  118A  	fcall	_lcdSend
  1942     023F                     l3929:
  1943                           
  1944                           ;main.c: 237:             if(source == '1' && CompareStrings(id_dest, PIC_ID) && type ==
      +                           '2')
  1945     023F  3031               	movlw	49
  1946     0240  1683               	bsf	3,5	;RP0=1, select bank1
  1947     0241  1303               	bcf	3,6	;RP1=0, select bank1
  1948     0242  0669               	xorwf	_source^(0+128),w
  1949     0243  1D03               	btfss	3,2
  1950     0244  2A46               	goto	u4101
  1951     0245  2A47               	goto	u4100
  1952     0246                     u4101:
  1953     0246  2A81               	goto	l3941
  1954     0247                     u4100:
  1955     0247                     l3931:
  1956     0247  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  1957     0248  00A7               	movwf	CompareStrings@str2^(0+128)
  1958     0249  3000               	movlw	0
  1959     024A  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  1960     024B  30C1               	movlw	(low (_id_dest| (0+256)))& (0+255)
  1961     024C  120A  158A  2191  120A  118A  	fcall	_CompareStrings
  1962     0251  3A00               	xorlw	0
  1963     0252  1903               	skipnz
  1964     0253  2A55               	goto	u4111
  1965     0254  2A56               	goto	u4110
  1966     0255                     u4111:
  1967     0255  2A81               	goto	l3941
  1968     0256                     u4110:
  1969     0256                     l3933:
  1970     0256  3032               	movlw	50
  1971     0257  1683               	bsf	3,5	;RP0=1, select bank1
  1972     0258  1303               	bcf	3,6	;RP1=0, select bank1
  1973     0259  0668               	xorwf	_type^(0+128),w
  1974     025A  1D03               	btfss	3,2
  1975     025B  2A5D               	goto	u4121
  1976     025C  2A5E               	goto	u4120
  1977     025D                     u4121:
  1978     025D  2A81               	goto	l3941
  1979     025E                     u4120:
  1980     025E                     l3935:
  1981                           
  1982                           ;main.c: 238:             {;main.c: 240:                 if(num_rand != 0)
  1983     025E  0862               	movf	_num_rand^(0+128),w
  1984     025F  0463               	iorwf	(_num_rand+1)^(0+128),w
  1985     0260  1903               	btfsc	3,2
  1986     0261  2A63               	goto	u4131
  1987     0262  2A64               	goto	u4130
  1988     0263                     u4131:
  1989     0263  2A6F               	goto	l3939
  1990     0264                     u4130:
  1991     0264                     l3937:
  1992                           
  1993                           ;main.c: 241:                     seconds = 0;
  1994     0264  3000               	movlw	0
  1995     0265  1283               	bcf	3,5	;RP0=0, select bank0
  1996     0266  1303               	bcf	3,6	;RP1=0, select bank0
  1997     0267  00BF               	movwf	_seconds+3
  1998     0268  3000               	movlw	0
  1999     0269  00BE               	movwf	_seconds+2
  2000     026A  3000               	movlw	0
  2001     026B  00BD               	movwf	_seconds+1
  2002     026C  3000               	movlw	0
  2003     026D  00BC               	movwf	_seconds
  2004     026E  2A81               	goto	l3941
  2005     026F                     l3939:
  2006                           
  2007                           ;main.c: 244:                 {;main.c: 245:                     milliseconds = 0;
  2008     026F  3000               	movlw	0
  2009     0270  1283               	bcf	3,5	;RP0=0, select bank0
  2010     0271  1303               	bcf	3,6	;RP1=0, select bank0
  2011     0272  00C3               	movwf	_milliseconds+3
  2012     0273  3000               	movlw	0
  2013     0274  00C2               	movwf	_milliseconds+2
  2014     0275  3000               	movlw	0
  2015     0276  00C1               	movwf	_milliseconds+1
  2016     0277  3000               	movlw	0
  2017     0278  00C0               	movwf	_milliseconds
  2018                           
  2019                           ;main.c: 246:                     seconds = 1000;
  2020     0279  3000               	movlw	0
  2021     027A  00BF               	movwf	_seconds+3
  2022     027B  3000               	movlw	0
  2023     027C  00BE               	movwf	_seconds+2
  2024     027D  3003               	movlw	3
  2025     027E  00BD               	movwf	_seconds+1
  2026     027F  30E8               	movlw	232
  2027     0280  00BC               	movwf	_seconds
  2028     0281                     l3941:
  2029                           
  2030                           ;main.c: 249:             recieved = 0;
  2031     0281  1283               	bcf	3,5	;RP0=0, select bank0
  2032     0282  1303               	bcf	3,6	;RP1=0, select bank0
  2033     0283  01CD               	clrf	_recieved
  2034     0284                     l3943:
  2035                           
  2036                           ;main.c: 250:             iS = 0;
  2037     0284  01CF               	clrf	_iS
  2038     0285                     l3945:
  2039                           
  2040                           ;main.c: 255:         if(success)
  2041     0285  084C               	movf	_success,w
  2042     0286  1903               	btfsc	3,2
  2043     0287  2A89               	goto	u4141
  2044     0288  2A8A               	goto	u4140
  2045     0289                     u4141:
  2046     0289  2AD9               	goto	l3971
  2047     028A                     u4140:
  2048     028A                     l3947:
  2049                           
  2050                           ;main.c: 256:         {;main.c: 258:             lcdSend(0x01, 0);
  2051     028A  1683               	bsf	3,5	;RP0=1, select bank1
  2052     028B  1303               	bcf	3,6	;RP1=0, select bank1
  2053     028C  01A0               	clrf	lcdSend@tipo^(0+128)
  2054     028D  3001               	movlw	1
  2055     028E  160A  118A  271A  120A  118A  	fcall	_lcdSend
  2056     0293                     l3949:
  2057                           
  2058                           ;main.c: 259:             lcdPrint("Benvenuto!\0");
  2059     0293  3094               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  2060     0294  1683               	bsf	3,5	;RP0=1, select bank1
  2061     0295  1303               	bcf	3,6	;RP1=0, select bank1
  2062     0296  00A4               	movwf	lcdPrint@str^(0+128)
  2063     0297  3080               	movlw	128
  2064     0298  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2065     0299  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  2066     029E                     l3951:
  2067                           
  2068                           ;main.c: 260:             iT = old_iT = 0;
  2069     029E  1283               	bcf	3,5	;RP0=0, select bank0
  2070     029F  1303               	bcf	3,6	;RP1=0, select bank0
  2071     02A0  01CE               	clrf	_old_iT
  2072     02A1  1683               	bsf	3,5	;RP0=1, select bank1
  2073     02A2  1303               	bcf	3,6	;RP1=0, select bank1
  2074     02A3  01E7               	clrf	_iT^(0+128)
  2075     02A4                     l3953:
  2076                           
  2077                           ;main.c: 261:             success = 0;
  2078     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  2079     02A5  1303               	bcf	3,6	;RP1=0, select bank0
  2080     02A6  01CC               	clrf	_success
  2081     02A7                     l3955:
  2082                           
  2083                           ;main.c: 263:             compare = 0;
  2084     02A7  1683               	bsf	3,5	;RP0=1, select bank1
  2085     02A8  1303               	bcf	3,6	;RP1=0, select bank1
  2086     02A9  01E6               	clrf	_compare^(0+128)
  2087     02AA                     l3957:
  2088                           
  2089                           ;main.c: 264:             maxFail = 3;
  2090     02AA  3003               	movlw	3
  2091     02AB  00ED               	movwf	_maxFail^(0+128)
  2092     02AC                     l3959:
  2093                           
  2094                           ;main.c: 266:             packet[0] = '0';
  2095     02AC  3030               	movlw	48
  2096     02AD  1683               	bsf	3,5	;RP0=1, select bank3
  2097     02AE  1703               	bsf	3,6	;RP1=1, select bank3
  2098     02AF  00B2               	movwf	_packet^(0+384)
  2099     02B0                     l3961:
  2100                           
  2101                           ;main.c: 267:             packet[1] = '/';
  2102     02B0  302F               	movlw	47
  2103     02B1  00B3               	movwf	(_packet^(0+384)+1)
  2104     02B2                     l3963:
  2105                           
  2106                           ;main.c: 268:             packet[2] = '\0';
  2107     02B2  01B4               	clrf	(_packet^(0+384)+2)
  2108     02B3                     l3965:
  2109                           
  2110                           ;main.c: 269:             ConcatToPacket(packet, PIC_ID, '/');
  2111     02B3  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  2112     02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2113     02B5  1303               	bcf	3,6	;RP1=0, select bank1
  2114     02B6  00B3               	movwf	ConcatToPacket@str^(0+128)
  2115     02B7  3000               	movlw	0
  2116     02B8  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2117     02B9  302F               	movlw	47
  2118     02BA  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2119     02BB  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  2120     02BC  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  2121     02C1                     l3967:
  2122                           
  2123                           ;main.c: 270:             ConcatToPacket(packet, "1/1", ' ');
  2124     02C1  30CD               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2125     02C2  1683               	bsf	3,5	;RP0=1, select bank1
  2126     02C3  1303               	bcf	3,6	;RP1=0, select bank1
  2127     02C4  00B3               	movwf	ConcatToPacket@str^(0+128)
  2128     02C5  3080               	movlw	128
  2129     02C6  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2130     02C7  3020               	movlw	32
  2131     02C8  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2132     02C9  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  2133     02CA  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  2134     02CF                     l3969:
  2135                           
  2136                           ;main.c: 271:             UART_TxString(packet, 0);
  2137     02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2138     02D0  1303               	bcf	3,6	;RP1=0, select bank1
  2139     02D1  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2140     02D2  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  2141     02D3  120A  158A  252F  120A  118A  	fcall	_UART_TxString
  2142                           
  2143                           ;main.c: 272:         }
  2144     02D8  2B7A               	goto	l4013
  2145     02D9                     l3971:
  2146     02D9  1683               	bsf	3,5	;RP0=1, select bank1
  2147     02DA  1303               	bcf	3,6	;RP1=0, select bank1
  2148     02DB  086D               	movf	_maxFail^(0+128),w
  2149     02DC  1903               	btfsc	3,2
  2150     02DD  2ADF               	goto	u4151
  2151     02DE  2AE0               	goto	u4150
  2152     02DF                     u4151:
  2153     02DF  2B2A               	goto	l3989
  2154     02E0                     u4150:
  2155     02E0                     l3973:
  2156     02E0  3003               	movlw	3
  2157     02E1  026D               	subwf	_maxFail^(0+128),w
  2158     02E2  1803               	skipnc
  2159     02E3  2AE5               	goto	u4161
  2160     02E4  2AE6               	goto	u4160
  2161     02E5                     u4161:
  2162     02E5  2B2A               	goto	l3989
  2163     02E6                     u4160:
  2164     02E6                     l3975:
  2165     02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2166     02E7  1303               	bcf	3,6	;RP1=0, select bank0
  2167     02E8  084B               	movf	_fail,w
  2168     02E9  1903               	btfsc	3,2
  2169     02EA  2AEC               	goto	u4171
  2170     02EB  2AED               	goto	u4170
  2171     02EC                     u4171:
  2172     02EC  2B2A               	goto	l3989
  2173     02ED                     u4170:
  2174     02ED                     l3977:
  2175                           
  2176                           ;main.c: 275:         {;main.c: 277:             lcdSend(0x01, 0);
  2177     02ED  1683               	bsf	3,5	;RP0=1, select bank1
  2178     02EE  1303               	bcf	3,6	;RP1=0, select bank1
  2179     02EF  01A0               	clrf	lcdSend@tipo^(0+128)
  2180     02F0  3001               	movlw	1
  2181     02F1  160A  118A  271A  120A  118A  	fcall	_lcdSend
  2182     02F6                     l3979:
  2183                           
  2184                           ;main.c: 278:             lcdPrint("Codice errato\0");
  2185     02F6  3078               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2186     02F7  1683               	bsf	3,5	;RP0=1, select bank1
  2187     02F8  1303               	bcf	3,6	;RP1=0, select bank1
  2188     02F9  00A4               	movwf	lcdPrint@str^(0+128)
  2189     02FA  3080               	movlw	128
  2190     02FB  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2191     02FC  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  2192     0301                     l3981:
  2193                           
  2194                           ;main.c: 279:             lcdSend(0xC0, 0);
  2195     0301  1683               	bsf	3,5	;RP0=1, select bank1
  2196     0302  1303               	bcf	3,6	;RP1=0, select bank1
  2197     0303  01A0               	clrf	lcdSend@tipo^(0+128)
  2198     0304  30C0               	movlw	192
  2199     0305  160A  118A  271A  120A  118A  	fcall	_lcdSend
  2200                           
  2201                           ;main.c: 280:             lcdPrint("Tentativi: \0");
  2202     030A  3087               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2203     030B  1683               	bsf	3,5	;RP0=1, select bank1
  2204     030C  1303               	bcf	3,6	;RP1=0, select bank1
  2205     030D  00A4               	movwf	lcdPrint@str^(0+128)
  2206     030E  3080               	movlw	128
  2207     030F  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2208     0310  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  2209     0315                     l3983:
  2210                           
  2211                           ;main.c: 281:             lcdSend(maxFail + '0', 1);
  2212     0315  1683               	bsf	3,5	;RP0=1, select bank1
  2213     0316  1303               	bcf	3,6	;RP1=0, select bank1
  2214     0317  01A0               	clrf	lcdSend@tipo^(0+128)
  2215     0318  0AA0               	incf	lcdSend@tipo^(0+128),f
  2216     0319  086D               	movf	_maxFail^(0+128),w
  2217     031A  3E30               	addlw	48
  2218     031B  160A  118A  271A  120A  118A  	fcall	_lcdSend
  2219     0320                     l3985:
  2220                           
  2221                           ;main.c: 282:             iT = old_iT = 0;
  2222     0320  1283               	bcf	3,5	;RP0=0, select bank0
  2223     0321  1303               	bcf	3,6	;RP1=0, select bank0
  2224     0322  01CE               	clrf	_old_iT
  2225     0323  1683               	bsf	3,5	;RP0=1, select bank1
  2226     0324  1303               	bcf	3,6	;RP1=0, select bank1
  2227     0325  01E7               	clrf	_iT^(0+128)
  2228     0326                     l3987:
  2229                           
  2230                           ;main.c: 283:             fail = 0;
  2231     0326  1283               	bcf	3,5	;RP0=0, select bank0
  2232     0327  1303               	bcf	3,6	;RP1=0, select bank0
  2233     0328  01CB               	clrf	_fail
  2234                           
  2235                           ;main.c: 284:         }
  2236     0329  2B7A               	goto	l4013
  2237     032A                     l3989:
  2238     032A  1683               	bsf	3,5	;RP0=1, select bank1
  2239     032B  1303               	bcf	3,6	;RP1=0, select bank1
  2240     032C  086D               	movf	_maxFail^(0+128),w
  2241     032D  1D03               	btfss	3,2
  2242     032E  2B30               	goto	u4181
  2243     032F  2B31               	goto	u4180
  2244     0330                     u4181:
  2245     0330  2B7A               	goto	l4013
  2246     0331                     u4180:
  2247     0331                     l3991:
  2248                           
  2249                           ;main.c: 287:         {;main.c: 289:             lcdSend(0x01, 0);
  2250     0331  01A0               	clrf	lcdSend@tipo^(0+128)
  2251     0332  3001               	movlw	1
  2252     0333  160A  118A  271A  120A  118A  	fcall	_lcdSend
  2253     0338                     l3993:
  2254                           
  2255                           ;main.c: 290:             lcdPrint("Tent. esauriti\0");
  2256     0338  3059               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2257     0339  1683               	bsf	3,5	;RP0=1, select bank1
  2258     033A  1303               	bcf	3,6	;RP1=0, select bank1
  2259     033B  00A4               	movwf	lcdPrint@str^(0+128)
  2260     033C  3080               	movlw	128
  2261     033D  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2262     033E  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  2263     0343                     l3995:
  2264                           
  2265                           ;main.c: 292:             maxFail = 3;
  2266     0343  3003               	movlw	3
  2267     0344  1683               	bsf	3,5	;RP0=1, select bank1
  2268     0345  1303               	bcf	3,6	;RP1=0, select bank1
  2269     0346  00ED               	movwf	_maxFail^(0+128)
  2270     0347                     l3997:
  2271                           
  2272                           ;main.c: 293:             iT = old_iT = 0;
  2273     0347  1283               	bcf	3,5	;RP0=0, select bank0
  2274     0348  1303               	bcf	3,6	;RP1=0, select bank0
  2275     0349  01CE               	clrf	_old_iT
  2276     034A  1683               	bsf	3,5	;RP0=1, select bank1
  2277     034B  1303               	bcf	3,6	;RP1=0, select bank1
  2278     034C  01E7               	clrf	_iT^(0+128)
  2279     034D                     l3999:
  2280                           
  2281                           ;main.c: 294:             compare = 0;
  2282     034D  01E6               	clrf	_compare^(0+128)
  2283     034E                     l4001:
  2284                           
  2285                           ;main.c: 296:             packet[0] = '0';
  2286     034E  3030               	movlw	48
  2287     034F  1683               	bsf	3,5	;RP0=1, select bank3
  2288     0350  1703               	bsf	3,6	;RP1=1, select bank3
  2289     0351  00B2               	movwf	_packet^(0+384)
  2290     0352                     l4003:
  2291                           
  2292                           ;main.c: 297:             packet[1] = '/';
  2293     0352  302F               	movlw	47
  2294     0353  00B3               	movwf	(_packet^(0+384)+1)
  2295     0354                     l4005:
  2296                           
  2297                           ;main.c: 298:             packet[2] = '\0';
  2298     0354  01B4               	clrf	(_packet^(0+384)+2)
  2299     0355                     l4007:
  2300                           
  2301                           ;main.c: 299:             ConcatToPacket(packet, PIC_ID, '/');
  2302     0355  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  2303     0356  1683               	bsf	3,5	;RP0=1, select bank1
  2304     0357  1303               	bcf	3,6	;RP1=0, select bank1
  2305     0358  00B3               	movwf	ConcatToPacket@str^(0+128)
  2306     0359  3000               	movlw	0
  2307     035A  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2308     035B  302F               	movlw	47
  2309     035C  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2310     035D  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  2311     035E  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  2312     0363                     l4009:
  2313                           
  2314                           ;main.c: 300:             ConcatToPacket(packet, "1/0", ' ');
  2315     0363  30C9               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2316     0364  1683               	bsf	3,5	;RP0=1, select bank1
  2317     0365  1303               	bcf	3,6	;RP1=0, select bank1
  2318     0366  00B3               	movwf	ConcatToPacket@str^(0+128)
  2319     0367  3080               	movlw	128
  2320     0368  00B4               	movwf	(ConcatToPacket@str+1)^(0+128)
  2321     0369  3020               	movlw	32
  2322     036A  00B5               	movwf	ConcatToPacket@delim^(0+128)
  2323     036B  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  2324     036C  120A  158A  20F1  120A  118A  	fcall	_ConcatToPacket
  2325     0371                     l4011:
  2326                           
  2327                           ;main.c: 301:             UART_TxString(packet, 0);
  2328     0371  1683               	bsf	3,5	;RP0=1, select bank1
  2329     0372  1303               	bcf	3,6	;RP1=0, select bank1
  2330     0373  01C1               	clrf	UART_TxString@is_ACK^(0+128)
  2331     0374  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  2332     0375  120A  158A  252F  120A  118A  	fcall	_UART_TxString
  2333     037A                     l4013:
  2334                           
  2335                           ;main.c: 305:         if(iT != old_iT && compare)
  2336     037A  1683               	bsf	3,5	;RP0=1, select bank1
  2337     037B  1303               	bcf	3,6	;RP1=0, select bank1
  2338     037C  0867               	movf	_iT^(0+128),w
  2339     037D  1283               	bcf	3,5	;RP0=0, select bank0
  2340     037E  1303               	bcf	3,6	;RP1=0, select bank0
  2341     037F  064E               	xorwf	_old_iT,w
  2342     0380  1903               	skipnz
  2343     0381  2B83               	goto	u4191
  2344     0382  2B84               	goto	u4190
  2345     0383                     u4191:
  2346     0383  2BB1               	goto	l4023
  2347     0384                     u4190:
  2348     0384                     l4015:
  2349     0384  1683               	bsf	3,5	;RP0=1, select bank1
  2350     0385  1303               	bcf	3,6	;RP1=0, select bank1
  2351     0386  0866               	movf	_compare^(0+128),w
  2352     0387  1903               	btfsc	3,2
  2353     0388  2B8A               	goto	u4201
  2354     0389  2B8B               	goto	u4200
  2355     038A                     u4201:
  2356     038A  2BB1               	goto	l4023
  2357     038B                     u4200:
  2358     038B                     l4017:
  2359                           
  2360                           ;main.c: 306:         {;main.c: 308:             lcdSend(0x01, 0);
  2361     038B  01A0               	clrf	lcdSend@tipo^(0+128)
  2362     038C  3001               	movlw	1
  2363     038D  160A  118A  271A  120A  118A  	fcall	_lcdSend
  2364     0392                     l4019:
  2365                           
  2366                           ;main.c: 309:             lcdPrint("#=conf. *=canc.\0\0"),
  2367     0392  3014               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2368     0393  1683               	bsf	3,5	;RP0=1, select bank1
  2369     0394  1303               	bcf	3,6	;RP1=0, select bank1
  2370     0395  00A4               	movwf	lcdPrint@str^(0+128)
  2371     0396  3080               	movlw	128
  2372     0397  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2373     0398  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  2374     039D                     l4021:
  2375     039D  1683               	bsf	3,5	;RP0=1, select bank1
  2376     039E  1303               	bcf	3,6	;RP1=0, select bank1
  2377     039F  01A0               	clrf	lcdSend@tipo^(0+128)
  2378     03A0  30C0               	movlw	192
  2379     03A1  160A  118A  271A  120A  118A  	fcall	_lcdSend
  2380                           
  2381                           ;main.c: 311:             lcdPrint(datoTastierino);
  2382     03A6  3090               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2383     03A7  1683               	bsf	3,5	;RP0=1, select bank1
  2384     03A8  1303               	bcf	3,6	;RP1=0, select bank1
  2385     03A9  00A4               	movwf	lcdPrint@str^(0+128)
  2386     03AA  3001               	movlw	1
  2387     03AB  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  2388     03AC  120A  158A  213B  120A  118A  	fcall	_lcdPrint
  2389     03B1                     l4023:
  2390                           
  2391                           ;main.c: 314:         old_iT = iT;
  2392     03B1  1683               	bsf	3,5	;RP0=1, select bank1
  2393     03B2  1303               	bcf	3,6	;RP1=0, select bank1
  2394     03B3  0867               	movf	_iT^(0+128),w
  2395     03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2396     03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2397     03B6  00CE               	movwf	_old_iT
  2398     03B7  286C               	goto	l3821
  2399     03B8  120A  118A  2810   	ljmp	start
  2400     03BB                     __end_of_main:
  2401                           
  2402                           	psect	text1
  2403     03BB                     __ptext1:	
  2404 ;; *************** function _read_NumPad *****************
  2405 ;; Defined at:
  2406 ;;		line 615 in file "main.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  id              2   43[BANK1 ] int 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2420 ;;      Params:         0       0       0       0       0
  2421 ;;      Locals:         0       0       2       0       0
  2422 ;;      Temps:          0       0      10       0       0
  2423 ;;      Totals:         0       0      12       0       0
  2424 ;;Total ram usage:       12 bytes
  2425 ;; Hardware stack levels used: 1
  2426 ;; Hardware stack levels required when called: 6
  2427 ;; This function calls:
  2428 ;;		_CompareStrings
  2429 ;;		_Fill
  2430 ;;		___awmod
  2431 ;;		___wmul
  2432 ;;		_eeprom_write
  2433 ;;		_rand
  2434 ;;		_srand
  2435 ;; This function is called by:
  2436 ;;		_main
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440     03BB                     _read_NumPad:	
  2441                           ;psect for function _read_NumPad
  2442                           
  2443     03BB                     l3323:	
  2444                           ;incstack = 0
  2445                           ; Regs used in _read_NumPad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2446                           
  2447                           
  2448                           ;main.c: 618:     TRISD |= 0x0F;
  2449     03BB  300F               	movlw	15
  2450     03BC  1683               	bsf	3,5	;RP0=1, select bank1
  2451     03BD  1303               	bcf	3,6	;RP1=0, select bank1
  2452     03BE  00C1               	movwf	??_read_NumPad^(0+128)
  2453     03BF  0841               	movf	??_read_NumPad^(0+128),w
  2454     03C0  0488               	iorwf	8,f	;volatile
  2455     03C1                     l3325:
  2456                           
  2457                           ;main.c: 619:     for(colScan = 0; colScan < 3; colScan++)
  2458     03C1  01EC               	clrf	_colScan^(0+128)
  2459     03C2                     l3331:
  2460                           
  2461                           ;main.c: 620:     {;main.c: 623:         PORTB |= 0x07;
  2462     03C2  3007               	movlw	7
  2463     03C3  00C1               	movwf	??_read_NumPad^(0+128)
  2464     03C4  0841               	movf	??_read_NumPad^(0+128),w
  2465     03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2466     03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2467     03C7  0486               	iorwf	6,f	;volatile
  2468     03C8                     l3333:
  2469                           
  2470                           ;main.c: 625:         PORTB &= colMask[colScan];
  2471     03C8  1683               	bsf	3,5	;RP0=1, select bank1
  2472     03C9  1303               	bcf	3,6	;RP1=0, select bank1
  2473     03CA  086C               	movf	_colScan^(0+128),w
  2474     03CB  3E11               	addlw	low ((_colMask-__stringbase)| (0+32768))
  2475     03CC  0084               	movwf	4
  2476     03CD  120A  118A  270A  120A  118A  	fcall	stringdir
  2477     03D2  00C1               	movwf	??_read_NumPad^(0+128)
  2478     03D3  0841               	movf	??_read_NumPad^(0+128),w
  2479     03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2480     03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2481     03D6  0586               	andwf	6,f	;volatile
  2482     03D7                     l3335:
  2483                           
  2484                           ;main.c: 627:         for(rowScan = 0; rowScan < 4; rowScan++)
  2485     03D7  1683               	bsf	3,5	;RP0=1, select bank1
  2486     03D8  1303               	bcf	3,6	;RP1=0, select bank1
  2487     03D9  01EB               	clrf	_rowScan^(0+128)
  2488     03DA                     l3341:
  2489                           
  2490                           ;main.c: 628:         {;main.c: 630:             if(!(PORTD & rowMask[rowScan]))
  2491     03DA  086B               	movf	_rowScan^(0+128),w
  2492     03DB  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  2493     03DC  0084               	movwf	4
  2494     03DD  120A  118A  270A  120A  118A  	fcall	stringdir
  2495     03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2496     03E3  1303               	bcf	3,6	;RP1=0, select bank0
  2497     03E4  0508               	andwf	8,w	;volatile
  2498     03E5  1D03               	btfss	3,2
  2499     03E6  2BE8               	goto	u3441
  2500     03E7  2BE9               	goto	u3440
  2501     03E8                     u3441:
  2502     03E8  2C14               	goto	l272
  2503     03E9                     u3440:
  2504     03E9                     l3343:
  2505                           
  2506                           ;main.c: 631:             {;main.c: 633:                 _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
  2507     03E9  3021               	movlw	33
  2508     03EA  1683               	bsf	3,5	;RP0=1, select bank1
  2509     03EB  1303               	bcf	3,6	;RP1=0, select bank1
  2510     03EC  00C2               	movwf	(??_read_NumPad^(0+128)+1)
  2511     03ED  3075               	movlw	117
  2512     03EE  00C1               	movwf	??_read_NumPad^(0+128)
  2513     03EF                     u4217:
  2514     03EF  0BC1               	decfsz	??_read_NumPad^(0+128),f
  2515     03F0  2BEF               	goto	u4217
  2516     03F1  0BC2               	decfsz	(??_read_NumPad^(0+128)+1),f
  2517     03F2  2BEF               	goto	u4217
  2518     03F3  2BF4               	nop2
  2519     03F4                     l3345:
  2520                           
  2521                           ;main.c: 634:                 if(!(PORTD & rowMask[rowScan]))
  2522     03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2523     03F5  1303               	bcf	3,6	;RP1=0, select bank1
  2524     03F6  086B               	movf	_rowScan^(0+128),w
  2525     03F7  3E0D               	addlw	low ((_rowMask-__stringbase)| (0+32768))
  2526     03F8  0084               	movwf	4
  2527     03F9  120A  118A  270A  120A  118A  	fcall	stringdir
  2528     03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2529     03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2530     0400  0508               	andwf	8,w	;volatile
  2531     0401  1D03               	btfss	3,2
  2532     0402  2C04               	goto	u3451
  2533     0403  2C05               	goto	u3450
  2534     0404                     u3451:
  2535     0404  2C14               	goto	l272
  2536     0405                     u3450:
  2537     0405                     l3347:
  2538                           
  2539                           ;main.c: 635:                 {;main.c: 639:                     keypressed = rowScan+(4
      +                          *colScan);
  2540     0405  1683               	bsf	3,5	;RP0=1, select bank1
  2541     0406  1303               	bcf	3,6	;RP1=0, select bank1
  2542     0407  086C               	movf	_colScan^(0+128),w
  2543     0408  00C1               	movwf	??_read_NumPad^(0+128)
  2544     0409  3002               	movlw	2
  2545     040A                     u3465:
  2546     040A  1003               	clrc
  2547     040B  0DC1               	rlf	??_read_NumPad^(0+128),f
  2548     040C  3EFF               	addlw	-1
  2549     040D  1D03               	skipz
  2550     040E  2C0A               	goto	u3465
  2551     040F  086B               	movf	_rowScan^(0+128),w
  2552     0410  0741               	addwf	??_read_NumPad^(0+128),w
  2553     0411  00EF               	movwf	_keypressed^(0+128)
  2554     0412                     l3349:
  2555                           
  2556                           ;main.c: 641:                     keyf = 1;
  2557     0412  01EA               	clrf	_keyf^(0+128)
  2558     0413  0AEA               	incf	_keyf^(0+128),f
  2559     0414                     l272:	
  2560                           ;main.c: 643:             }
  2561                           
  2562                           
  2563                           ;main.c: 644:         }
  2564     0414  3001               	movlw	1
  2565     0415  1683               	bsf	3,5	;RP0=1, select bank1
  2566     0416  1303               	bcf	3,6	;RP1=0, select bank1
  2567     0417  00C1               	movwf	??_read_NumPad^(0+128)
  2568     0418  0841               	movf	??_read_NumPad^(0+128),w
  2569     0419  07EB               	addwf	_rowScan^(0+128),f
  2570     041A                     l3351:
  2571     041A  3004               	movlw	4
  2572     041B  026B               	subwf	_rowScan^(0+128),w
  2573     041C  1C03               	skipc
  2574     041D  2C1F               	goto	u3471
  2575     041E  2C20               	goto	u3470
  2576     041F                     u3471:
  2577     041F  2BDA               	goto	l3341
  2578     0420                     u3470:
  2579     0420                     l3353:
  2580                           
  2581                           ;main.c: 646:         if(keyf)
  2582     0420  086A               	movf	_keyf^(0+128),w
  2583     0421  1903               	btfsc	3,2
  2584     0422  2C24               	goto	u3481
  2585     0423  2C25               	goto	u3480
  2586     0424                     u3481:
  2587     0424  2DAF               	goto	l3437
  2588     0425                     u3480:
  2589     0425                     l3355:
  2590                           
  2591                           ;main.c: 647:         {;main.c: 648:             keyf = 0;
  2592     0425  01EA               	clrf	_keyf^(0+128)
  2593     0426                     l3357:
  2594                           
  2595                           ;main.c: 651:             if(keypressed == 8)
  2596     0426  3008               	movlw	8
  2597     0427  066F               	xorwf	_keypressed^(0+128),w
  2598     0428  1D03               	btfss	3,2
  2599     0429  2C2B               	goto	u3491
  2600     042A  2C2C               	goto	u3490
  2601     042B                     u3491:
  2602     042B  2D21               	goto	l3397
  2603     042C                     u3490:
  2604     042C                     l3359:
  2605                           
  2606                           ;main.c: 652:             {;main.c: 654:                 if(initialize)
  2607     042C  086E               	movf	_initialize^(0+128),w
  2608     042D  1903               	btfsc	3,2
  2609     042E  2C30               	goto	u3501
  2610     042F  2C31               	goto	u3500
  2611     0430                     u3501:
  2612     0430  2CBB               	goto	l3377
  2613     0431                     u3500:
  2614     0431                     l3361:
  2615                           
  2616                           ;main.c: 655:                 {;main.c: 657:                     if(i_id < 3)
  2617     0431  0865               	movf	(_i_id+1)^(0+128),w
  2618     0432  3A80               	xorlw	128
  2619     0433  00FF               	movwf	btemp+1
  2620     0434  3080               	movlw	128
  2621     0435  027F               	subwf	btemp+1,w
  2622     0436  1D03               	skipz
  2623     0437  2C3A               	goto	u3515
  2624     0438  3003               	movlw	3
  2625     0439  0264               	subwf	_i_id^(0+128),w
  2626     043A                     u3515:
  2627     043A  1803               	skipnc
  2628     043B  2C3D               	goto	u3511
  2629     043C  2C3E               	goto	u3510
  2630     043D                     u3511:
  2631     043D  2C44               	goto	l3365
  2632     043E                     u3510:
  2633     043E                     l3363:
  2634                           
  2635                           ;main.c: 658:                     {;main.c: 660:                         Fill(PIC_ID);
  2636     043E  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  2637     043F  120A  158A  229E  120A  118A  	fcall	_Fill
  2638     0444                     l3365:
  2639                           
  2640                           ;main.c: 663:                     int id = (PIC_ID[0] - '0') * 100 + (PIC_ID[1] - '0') *
      +                           10 + (PIC_ID[2] - '0');
  2641     0444  1283               	bcf	3,5	;RP0=0, select bank0
  2642     0445  1303               	bcf	3,6	;RP1=0, select bank0
  2643     0446  0850               	movf	_PIC_ID,w
  2644     0447  1683               	bsf	3,5	;RP0=1, select bank1
  2645     0448  1303               	bcf	3,6	;RP1=0, select bank1
  2646     0449  00C1               	movwf	??_read_NumPad^(0+128)
  2647     044A  01C2               	clrf	(??_read_NumPad^(0+128)+1)
  2648     044B  0841               	movf	??_read_NumPad^(0+128),w
  2649     044C  00BB               	movwf	___wmul@multiplier^(0+128)
  2650     044D  0842               	movf	(??_read_NumPad+1)^(0+128),w
  2651     044E  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2652     044F  3064               	movlw	100
  2653     0450  00BD               	movwf	___wmul@multiplicand^(0+128)
  2654     0451  3000               	movlw	0
  2655     0452  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2656     0453  160A  118A  269D  120A  118A  	fcall	___wmul
  2657     0458  1683               	bsf	3,5	;RP0=1, select bank1
  2658     0459  1303               	bcf	3,6	;RP1=0, select bank1
  2659     045A  083B               	movf	?___wmul^(0+128),w
  2660     045B  00C3               	movwf	(??_read_NumPad+2)^(0+128)
  2661     045C  083C               	movf	(?___wmul+1)^(0+128),w
  2662     045D  00C4               	movwf	((??_read_NumPad+2)^(0+128)+1)
  2663     045E  1283               	bcf	3,5	;RP0=0, select bank0
  2664     045F  1303               	bcf	3,6	;RP1=0, select bank0
  2665     0460  0851               	movf	_PIC_ID+1,w
  2666     0461  1683               	bsf	3,5	;RP0=1, select bank1
  2667     0462  1303               	bcf	3,6	;RP1=0, select bank1
  2668     0463  00C5               	movwf	(??_read_NumPad+4)^(0+128)
  2669     0464  01C6               	clrf	((??_read_NumPad+4)^(0+128)+1)
  2670     0465  0845               	movf	(??_read_NumPad+4)^(0+128),w
  2671     0466  00BB               	movwf	___wmul@multiplier^(0+128)
  2672     0467  0846               	movf	(??_read_NumPad+5)^(0+128),w
  2673     0468  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  2674     0469  300A               	movlw	10
  2675     046A  00BD               	movwf	___wmul@multiplicand^(0+128)
  2676     046B  3000               	movlw	0
  2677     046C  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  2678     046D  160A  118A  269D  120A  118A  	fcall	___wmul
  2679     0472  1683               	bsf	3,5	;RP0=1, select bank1
  2680     0473  1303               	bcf	3,6	;RP1=0, select bank1
  2681     0474  083B               	movf	?___wmul^(0+128),w
  2682     0475  0743               	addwf	(??_read_NumPad+2)^(0+128),w
  2683     0476  00C7               	movwf	(??_read_NumPad+6)^(0+128)
  2684     0477  083C               	movf	(?___wmul+1)^(0+128),w
  2685     0478  1803               	skipnc
  2686     0479  0A3C               	incf	(?___wmul+1)^(0+128),w
  2687     047A  0744               	addwf	(??_read_NumPad+3)^(0+128),w
  2688     047B  00C8               	movwf	(??_read_NumPad+7)^(0+128)
  2689     047C  1283               	bcf	3,5	;RP0=0, select bank0
  2690     047D  1303               	bcf	3,6	;RP1=0, select bank0
  2691     047E  0852               	movf	_PIC_ID+2,w
  2692     047F  1683               	bsf	3,5	;RP0=1, select bank1
  2693     0480  1303               	bcf	3,6	;RP1=0, select bank1
  2694     0481  0747               	addwf	(??_read_NumPad+6)^(0+128),w
  2695     0482  00C9               	movwf	(??_read_NumPad+8)^(0+128)
  2696     0483  3000               	movlw	0
  2697     0484  1803               	skipnc
  2698     0485  3001               	movlw	1
  2699     0486  0748               	addwf	(??_read_NumPad+7)^(0+128),w
  2700     0487  00CA               	movwf	(??_read_NumPad+9)^(0+128)
  2701     0488  0849               	movf	(??_read_NumPad+8)^(0+128),w
  2702     0489  3E30               	addlw	48
  2703     048A  00CB               	movwf	read_NumPad@id^(0+128)
  2704     048B  084A               	movf	(??_read_NumPad+9)^(0+128),w
  2705     048C  1803               	skipnc
  2706     048D  3E01               	addlw	1
  2707     048E  3EEB               	addlw	235
  2708     048F  00CC               	movwf	(read_NumPad@id+1)^(0+128)
  2709     0490                     l3367:
  2710                           
  2711                           ;main.c: 665:                     if(id <= 250)
  2712     0490  084C               	movf	(read_NumPad@id+1)^(0+128),w
  2713     0491  3A80               	xorlw	128
  2714     0492  00FF               	movwf	btemp+1
  2715     0493  3080               	movlw	128
  2716     0494  027F               	subwf	btemp+1,w
  2717     0495  1D03               	skipz
  2718     0496  2C99               	goto	u3525
  2719     0497  30FB               	movlw	251
  2720     0498  024B               	subwf	read_NumPad@id^(0+128),w
  2721     0499                     u3525:
  2722     0499  1803               	skipnc
  2723     049A  2C9C               	goto	u3521
  2724     049B  2C9D               	goto	u3520
  2725     049C                     u3521:
  2726     049C  2CAF               	goto	l278
  2727     049D                     u3520:
  2728     049D                     l3369:
  2729                           
  2730                           ;main.c: 666:                     {;main.c: 668:                         eeprom_write(0,
      +                           id);
  2731     049D  1683               	bsf	3,5	;RP0=1, select bank1
  2732     049E  1303               	bcf	3,6	;RP1=0, select bank1
  2733     049F  084B               	movf	read_NumPad@id^(0+128),w
  2734     04A0  00A0               	movwf	eeprom_write@value^(0+128)
  2735     04A1  3000               	movlw	0
  2736     04A2  160A  118A  274D  120A  118A  	fcall	_eeprom_write
  2737     04A7                     l3371:
  2738                           
  2739                           ;main.c: 669:                         pr_succ = 1;
  2740     04A7  1283               	bcf	3,5	;RP0=0, select bank0
  2741     04A8  1303               	bcf	3,6	;RP1=0, select bank0
  2742     04A9  01C8               	clrf	_pr_succ
  2743     04AA  0AC8               	incf	_pr_succ,f
  2744     04AB                     l3373:
  2745                           
  2746                           ;main.c: 671:                         initialize = 0;
  2747     04AB  1683               	bsf	3,5	;RP0=1, select bank1
  2748     04AC  1303               	bcf	3,6	;RP1=0, select bank1
  2749     04AD  01EE               	clrf	_initialize^(0+128)
  2750                           
  2751                           ;main.c: 672:                     }
  2752     04AE  2D9B               	goto	l3433
  2753     04AF                     l278:	
  2754                           ;main.c: 674:                     else
  2755                           
  2756                           
  2757                           ;main.c: 675:                     {;main.c: 676:                         pr_err_max = 1;
  2758     04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2759     04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2760     04B1  01C9               	clrf	_pr_err_max
  2761     04B2  0AC9               	incf	_pr_err_max,f
  2762     04B3                     l3375:
  2763                           
  2764                           ;main.c: 678:                         PIC_ID[0] = '\0';
  2765     04B3  01D0               	clrf	_PIC_ID
  2766                           
  2767                           ;main.c: 679:                         i_id = old_i_id = 0;
  2768     04B4  01C6               	clrf	_old_i_id
  2769     04B5  01C7               	clrf	_old_i_id+1
  2770     04B6  1683               	bsf	3,5	;RP0=1, select bank1
  2771     04B7  1303               	bcf	3,6	;RP1=0, select bank1
  2772     04B8  01E4               	clrf	_i_id^(0+128)
  2773     04B9  01E5               	clrf	(_i_id+1)^(0+128)
  2774     04BA  2D9B               	goto	l3433
  2775     04BB                     l3377:
  2776     04BB  0866               	movf	_compare^(0+128),w
  2777     04BC  1D03               	btfss	3,2
  2778     04BD  2CBF               	goto	u3531
  2779     04BE  2CC0               	goto	u3530
  2780     04BF                     u3531:
  2781     04BF  2CFA               	goto	l3385
  2782     04C0                     u3530:
  2783     04C0                     l3379:
  2784                           
  2785                           ;main.c: 684:                 {;main.c: 686:                     seconds = 0;
  2786     04C0  3000               	movlw	0
  2787     04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2788     04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2789     04C3  00BF               	movwf	_seconds+3
  2790     04C4  3000               	movlw	0
  2791     04C5  00BE               	movwf	_seconds+2
  2792     04C6  3000               	movlw	0
  2793     04C7  00BD               	movwf	_seconds+1
  2794     04C8  3000               	movlw	0
  2795     04C9  00BC               	movwf	_seconds
  2796     04CA                     l3381:
  2797                           
  2798                           ;main.c: 688:                     srand(milliseconds);
  2799     04CA  0841               	movf	_milliseconds+1,w
  2800     04CB  1683               	bsf	3,5	;RP0=1, select bank1
  2801     04CC  1303               	bcf	3,6	;RP1=0, select bank1
  2802     04CD  00A1               	movwf	(srand@x+1)^(0+128)
  2803     04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2804     04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2805     04D0  0840               	movf	_milliseconds,w
  2806     04D1  1683               	bsf	3,5	;RP0=1, select bank1
  2807     04D2  1303               	bcf	3,6	;RP1=0, select bank1
  2808     04D3  00A0               	movwf	srand@x^(0+128)
  2809     04D4  120A  158A  200D  120A  118A  	fcall	_srand
  2810     04D9                     l3383:
  2811                           
  2812                           ;main.c: 690:                     num_rand = ((rand()%8999)+1000);
  2813     04D9  3027               	movlw	39
  2814     04DA  1683               	bsf	3,5	;RP0=1, select bank1
  2815     04DB  1303               	bcf	3,6	;RP1=0, select bank1
  2816     04DC  00B4               	movwf	___awmod@divisor^(0+128)
  2817     04DD  3023               	movlw	35
  2818     04DE  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  2819     04DF  120A  158A  23D2  120A  118A  	fcall	_rand
  2820     04E4  1683               	bsf	3,5	;RP0=1, select bank1
  2821     04E5  1303               	bcf	3,6	;RP1=0, select bank1
  2822     04E6  082E               	movf	(?_rand+1)^(0+128),w
  2823     04E7  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  2824     04E8  082D               	movf	?_rand^(0+128),w
  2825     04E9  00B6               	movwf	___awmod@dividend^(0+128)
  2826     04EA  120A  158A  2243  120A  118A  	fcall	___awmod
  2827     04EF  1683               	bsf	3,5	;RP0=1, select bank1
  2828     04F0  1303               	bcf	3,6	;RP1=0, select bank1
  2829     04F1  0834               	movf	?___awmod^(0+128),w
  2830     04F2  3EE8               	addlw	232
  2831     04F3  00E2               	movwf	_num_rand^(0+128)
  2832     04F4  0835               	movf	(?___awmod+1)^(0+128),w
  2833     04F5  1803               	skipnc
  2834     04F6  3E01               	addlw	1
  2835     04F7  3E03               	addlw	3
  2836     04F8  00E3               	movwf	(_num_rand+1)^(0+128)
  2837                           
  2838                           ;main.c: 691:                 }
  2839     04F9  2D9B               	goto	l3433
  2840     04FA                     l3385:
  2841     04FA  0866               	movf	_compare^(0+128),w
  2842     04FB  1903               	btfsc	3,2
  2843     04FC  2CFE               	goto	u3541
  2844     04FD  2CFF               	goto	u3540
  2845     04FE                     u3541:
  2846     04FE  2D13               	goto	l3391
  2847     04FF                     u3540:
  2848     04FF                     l3387:
  2849     04FF  3090               	movlw	(low (_datoTastierino| (0+256)))& (0+255)
  2850     0500  00A7               	movwf	CompareStrings@str2^(0+128)
  2851     0501  3001               	movlw	1
  2852     0502  00A8               	movwf	(CompareStrings@str2+1)^(0+128)
  2853     0503  30A1               	movlw	(low (_datoSeriale| (0+256)))& (0+255)
  2854     0504  120A  158A  2191  120A  118A  	fcall	_CompareStrings
  2855     0509  3A00               	xorlw	0
  2856     050A  1903               	skipnz
  2857     050B  2D0D               	goto	u3551
  2858     050C  2D0E               	goto	u3550
  2859     050D                     u3551:
  2860     050D  2D13               	goto	l3391
  2861     050E                     u3550:
  2862     050E                     l3389:
  2863                           
  2864                           ;main.c: 694:                 {;main.c: 695:                     success = 1;
  2865     050E  1283               	bcf	3,5	;RP0=0, select bank0
  2866     050F  1303               	bcf	3,6	;RP1=0, select bank0
  2867     0510  01CC               	clrf	_success
  2868     0511  0ACC               	incf	_success,f
  2869                           
  2870                           ;main.c: 696:                 }
  2871     0512  2D9B               	goto	l3433
  2872     0513                     l3391:
  2873     0513  1683               	bsf	3,5	;RP0=1, select bank1
  2874     0514  1303               	bcf	3,6	;RP1=0, select bank1
  2875     0515  0866               	movf	_compare^(0+128),w
  2876     0516  1903               	btfsc	3,2
  2877     0517  2D19               	goto	u3561
  2878     0518  2D1A               	goto	u3560
  2879     0519                     u3561:
  2880     0519  2D9B               	goto	l3433
  2881     051A                     u3560:
  2882     051A                     l3393:
  2883                           
  2884                           ;main.c: 699:                 {;main.c: 700:                     maxFail--;
  2885     051A  3001               	movlw	1
  2886     051B  02ED               	subwf	_maxFail^(0+128),f
  2887     051C                     l3395:
  2888                           
  2889                           ;main.c: 701:                     fail = 1;
  2890     051C  1283               	bcf	3,5	;RP0=0, select bank0
  2891     051D  1303               	bcf	3,6	;RP1=0, select bank0
  2892     051E  01CB               	clrf	_fail
  2893     051F  0ACB               	incf	_fail,f
  2894     0520  2D9B               	goto	l3433
  2895     0521                     l3397:
  2896     0521  086F               	movf	_keypressed^(0+128),w
  2897     0522  1D03               	btfss	3,2
  2898     0523  2D25               	goto	u3571
  2899     0524  2D26               	goto	u3570
  2900     0525                     u3571:
  2901     0525  2D58               	goto	l3415
  2902     0526                     u3570:
  2903     0526                     l3399:
  2904                           
  2905                           ;main.c: 706:             {;main.c: 708:                 if(compare && iT > 0)
  2906     0526  0866               	movf	_compare^(0+128),w
  2907     0527  1903               	btfsc	3,2
  2908     0528  2D2A               	goto	u3581
  2909     0529  2D2B               	goto	u3580
  2910     052A                     u3581:
  2911     052A  2D38               	goto	l3407
  2912     052B                     u3580:
  2913     052B                     l3401:
  2914     052B  0867               	movf	_iT^(0+128),w
  2915     052C  1903               	btfsc	3,2
  2916     052D  2D2F               	goto	u3591
  2917     052E  2D30               	goto	u3590
  2918     052F                     u3591:
  2919     052F  2D38               	goto	l3407
  2920     0530                     u3590:
  2921     0530                     l3403:
  2922                           
  2923                           ;main.c: 709:                 {;main.c: 711:                     iT--;
  2924     0530  3001               	movlw	1
  2925     0531  02E7               	subwf	_iT^(0+128),f
  2926     0532                     l3405:
  2927                           
  2928                           ;main.c: 712:                     datoTastierino[iT] = '\0';
  2929     0532  0867               	movf	_iT^(0+128),w
  2930     0533  3E90               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  2931     0534  0084               	movwf	4
  2932     0535  1783               	bsf	3,7	;select IRP bank3
  2933     0536  0180               	clrf	0
  2934                           
  2935                           ;main.c: 713:                 }
  2936     0537  2D9B               	goto	l3433
  2937     0538                     l3407:
  2938     0538  086E               	movf	_initialize^(0+128),w
  2939     0539  1903               	btfsc	3,2
  2940     053A  2D3C               	goto	u3601
  2941     053B  2D3D               	goto	u3600
  2942     053C                     u3601:
  2943     053C  2D9B               	goto	l3433
  2944     053D                     u3600:
  2945     053D                     l3409:
  2946     053D  0865               	movf	(_i_id+1)^(0+128),w
  2947     053E  3A80               	xorlw	128
  2948     053F  00FF               	movwf	btemp+1
  2949     0540  3080               	movlw	128
  2950     0541  027F               	subwf	btemp+1,w
  2951     0542  1D03               	skipz
  2952     0543  2D46               	goto	u3615
  2953     0544  3001               	movlw	1
  2954     0545  0264               	subwf	_i_id^(0+128),w
  2955     0546                     u3615:
  2956     0546  1C03               	skipc
  2957     0547  2D49               	goto	u3611
  2958     0548  2D4A               	goto	u3610
  2959     0549                     u3611:
  2960     0549  2D9B               	goto	l3433
  2961     054A                     u3610:
  2962     054A                     l3411:
  2963                           
  2964                           ;main.c: 716:                 {;main.c: 718:                     i_id--;
  2965     054A  30FF               	movlw	255
  2966     054B  1683               	bsf	3,5	;RP0=1, select bank1
  2967     054C  1303               	bcf	3,6	;RP1=0, select bank1
  2968     054D  07E4               	addwf	_i_id^(0+128),f
  2969     054E  1803               	skipnc
  2970     054F  0AE5               	incf	(_i_id+1)^(0+128),f
  2971     0550  30FF               	movlw	255
  2972     0551  07E5               	addwf	(_i_id+1)^(0+128),f
  2973     0552                     l3413:
  2974                           
  2975                           ;main.c: 719:                     PIC_ID[i_id] = '\0';
  2976     0552  0864               	movf	_i_id^(0+128),w
  2977     0553  3E50               	addlw	(low (_PIC_ID| 0))& (0+255)
  2978     0554  0084               	movwf	4
  2979     0555  1383               	bcf	3,7	;select IRP bank0
  2980     0556  0180               	clrf	0
  2981     0557  2D9B               	goto	l3433
  2982     0558                     l3415:
  2983     0558  0866               	movf	_compare^(0+128),w
  2984     0559  1903               	btfsc	3,2
  2985     055A  2D5C               	goto	u3621
  2986     055B  2D5D               	goto	u3620
  2987     055C                     u3621:
  2988     055C  2D71               	goto	l3423
  2989     055D                     u3620:
  2990     055D                     l3417:
  2991                           
  2992                           ;main.c: 724:             {;main.c: 726:                 datoTastierino[iT++] = keys[key
      +                          pressed];
  2993     055D  086F               	movf	_keypressed^(0+128),w
  2994     055E  3E01               	addlw	low ((_keys-__stringbase)| (0+32768))
  2995     055F  0084               	movwf	4
  2996     0560  120A  118A  270A  120A  118A  	fcall	stringdir
  2997     0565  00C1               	movwf	??_read_NumPad^(0+128)
  2998     0566  0867               	movf	_iT^(0+128),w
  2999     0567  3E90               	addlw	(low (_datoTastierino| (0+256)))& (0+255)
  3000     0568  0084               	movwf	4
  3001     0569  0841               	movf	??_read_NumPad^(0+128),w
  3002     056A  1783               	bsf	3,7	;select IRP bank3
  3003     056B  0080               	movwf	0
  3004     056C                     l3419:
  3005     056C  3001               	movlw	1
  3006     056D  00C1               	movwf	??_read_NumPad^(0+128)
  3007     056E  0841               	movf	??_read_NumPad^(0+128),w
  3008     056F  07E7               	addwf	_iT^(0+128),f
  3009     0570  2D32               	goto	l3405
  3010     0571                     l3423:
  3011     0571  086E               	movf	_initialize^(0+128),w
  3012     0572  1903               	btfsc	3,2
  3013     0573  2D75               	goto	u3631
  3014     0574  2D76               	goto	u3630
  3015     0575                     u3631:
  3016     0575  2D9B               	goto	l3433
  3017     0576                     u3630:
  3018     0576                     l3425:
  3019     0576  0865               	movf	(_i_id+1)^(0+128),w
  3020     0577  3A80               	xorlw	128
  3021     0578  00FF               	movwf	btemp+1
  3022     0579  3080               	movlw	128
  3023     057A  027F               	subwf	btemp+1,w
  3024     057B  1D03               	skipz
  3025     057C  2D7F               	goto	u3645
  3026     057D  3003               	movlw	3
  3027     057E  0264               	subwf	_i_id^(0+128),w
  3028     057F                     u3645:
  3029     057F  1803               	skipnc
  3030     0580  2D82               	goto	u3641
  3031     0581  2D83               	goto	u3640
  3032     0582                     u3641:
  3033     0582  2D9B               	goto	l3433
  3034     0583                     u3640:
  3035     0583                     l3427:
  3036                           
  3037                           ;main.c: 731:             {;main.c: 733:                 PIC_ID[i_id++] = keys[keypresse
      +                          d];
  3038     0583  1683               	bsf	3,5	;RP0=1, select bank1
  3039     0584  1303               	bcf	3,6	;RP1=0, select bank1
  3040     0585  086F               	movf	_keypressed^(0+128),w
  3041     0586  3E01               	addlw	low ((_keys-__stringbase)| (0+32768))
  3042     0587  0084               	movwf	4
  3043     0588  120A  118A  270A  120A  118A  	fcall	stringdir
  3044     058D  00C1               	movwf	??_read_NumPad^(0+128)
  3045     058E  0864               	movf	_i_id^(0+128),w
  3046     058F  3E50               	addlw	(low (_PIC_ID| 0))& (0+255)
  3047     0590  0084               	movwf	4
  3048     0591  0841               	movf	??_read_NumPad^(0+128),w
  3049     0592  1383               	bcf	3,7	;select IRP bank0
  3050     0593  0080               	movwf	0
  3051     0594                     l3429:
  3052     0594  3001               	movlw	1
  3053     0595  07E4               	addwf	_i_id^(0+128),f
  3054     0596  1803               	skipnc
  3055     0597  0AE5               	incf	(_i_id+1)^(0+128),f
  3056     0598  3000               	movlw	0
  3057     0599  07E5               	addwf	(_i_id+1)^(0+128),f
  3058     059A  2D52               	goto	l3413
  3059     059B                     l3433:
  3060                           
  3061                           ;main.c: 737:             PORTD |= 0x0F;
  3062     059B  300F               	movlw	15
  3063     059C  1683               	bsf	3,5	;RP0=1, select bank1
  3064     059D  1303               	bcf	3,6	;RP1=0, select bank1
  3065     059E  00C1               	movwf	??_read_NumPad^(0+128)
  3066     059F  0841               	movf	??_read_NumPad^(0+128),w
  3067     05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3068     05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3069     05A2  0488               	iorwf	8,f	;volatile
  3070     05A3                     l3435:	
  3071                           ;main.c: 740:             while(((PORTD & 0x0F) != 0x0F))
  3072                           
  3073                           
  3074                           ;main.c: 740:             while(((PORTD & 0x0F) != 0x0F))
  3075     05A3  300F               	movlw	15
  3076     05A4  1283               	bcf	3,5	;RP0=0, select bank0
  3077     05A5  0508               	andwf	8,w	;volatile
  3078     05A6  1683               	bsf	3,5	;RP0=1, select bank1
  3079     05A7  1303               	bcf	3,6	;RP1=0, select bank1
  3080     05A8  00C1               	movwf	??_read_NumPad^(0+128)
  3081     05A9  300F               	movlw	15
  3082     05AA  0641               	xorwf	??_read_NumPad^(0+128),w
  3083     05AB  1D03               	btfss	3,2
  3084     05AC  2DAE               	goto	u3651
  3085     05AD  2DAF               	goto	u3650
  3086     05AE                     u3651:
  3087     05AE  2DA3               	goto	l3435
  3088     05AF                     u3650:
  3089     05AF                     l3437:
  3090                           
  3091                           ;main.c: 745:     }
  3092     05AF  3001               	movlw	1
  3093     05B0  00C1               	movwf	??_read_NumPad^(0+128)
  3094     05B1  0841               	movf	??_read_NumPad^(0+128),w
  3095     05B2  07EC               	addwf	_colScan^(0+128),f
  3096     05B3                     l3439:
  3097     05B3  3003               	movlw	3
  3098     05B4  026C               	subwf	_colScan^(0+128),w
  3099     05B5  1C03               	skipc
  3100     05B6  2DB8               	goto	u3661
  3101     05B7  2DB9               	goto	u3660
  3102     05B8                     u3661:
  3103     05B8  2BC2               	goto	l3331
  3104     05B9                     u3660:
  3105     05B9                     l298:
  3106     05B9  0008               	return
  3107     05BA                     __end_of_read_NumPad:
  3108                           
  3109                           	psect	text2
  3110     174D                     __ptext2:	
  3111 ;; *************** function _eeprom_write *****************
  3112 ;; Defined at:
  3113 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  addr            1    wreg     unsigned char 
  3116 ;;  value           1    0[BANK1 ] unsigned char 
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;  addr            1    2[BANK1 ] unsigned char 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3128 ;;      Params:         0       0       1       0       0
  3129 ;;      Locals:         0       0       1       0       0
  3130 ;;      Temps:          0       0       1       0       0
  3131 ;;      Totals:         0       0       3       0       0
  3132 ;;Total ram usage:        3 bytes
  3133 ;; Hardware stack levels used: 1
  3134 ;; Hardware stack levels required when called: 4
  3135 ;; This function calls:
  3136 ;;		Nothing
  3137 ;; This function is called by:
  3138 ;;		_read_NumPad
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142     174D                     _eeprom_write:	
  3143                           ;psect for function _eeprom_write
  3144                           
  3145                           
  3146                           ;incstack = 0
  3147                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  3148                           ;eeprom_write@addr stored from wreg
  3149     174D  1683               	bsf	3,5	;RP0=1, select bank1
  3150     174E  1303               	bcf	3,6	;RP1=0, select bank1
  3151     174F  00A2               	movwf	eeprom_write@addr^(0+128)
  3152     1750                     l438:	
  3153                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.40\pic\sources
      +                          \c90\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
  3154                           
  3155     1750                     l439:
  3156     1750  1683               	bsf	3,5	;RP0=1, select bank3
  3157     1751  1703               	bsf	3,6	;RP1=1, select bank3
  3158     1752  188C               	btfsc	12,1	;volsfr
  3159     1753  2F55               	goto	u3291
  3160     1754  2F56               	goto	u3290
  3161     1755                     u3291:
  3162     1755  2F50               	goto	l439
  3163     1756                     u3290:
  3164     1756                     l3231:
  3165     1756  1683               	bsf	3,5	;RP0=1, select bank1
  3166     1757  1303               	bcf	3,6	;RP1=0, select bank1
  3167     1758  0822               	movf	eeprom_write@addr^(0+128),w
  3168     1759  1283               	bcf	3,5	;RP0=0, select bank2
  3169     175A  1703               	bsf	3,6	;RP1=1, select bank2
  3170     175B  008D               	movwf	13	;volatile
  3171     175C  1683               	bsf	3,5	;RP0=1, select bank1
  3172     175D  1303               	bcf	3,6	;RP1=0, select bank1
  3173     175E  0820               	movf	eeprom_write@value^(0+128),w
  3174     175F  1283               	bcf	3,5	;RP0=0, select bank2
  3175     1760  1703               	bsf	3,6	;RP1=1, select bank2
  3176     1761  008C               	movwf	12	;volatile
  3177     1762                     l3233:
  3178     1762  303F               	movlw	63
  3179     1763  1683               	bsf	3,5	;RP0=1, select bank1
  3180     1764  1303               	bcf	3,6	;RP1=0, select bank1
  3181     1765  00A1               	movwf	??_eeprom_write^(0+128)
  3182     1766  0821               	movf	??_eeprom_write^(0+128),w
  3183     1767  1683               	bsf	3,5	;RP0=1, select bank3
  3184     1768  1703               	bsf	3,6	;RP1=1, select bank3
  3185     1769  058C               	andwf	12,f	;volsfr
  3186     176A                     l3235:
  3187     176A  1283               	bcf	3,5	;RP0=0, select bank0
  3188     176B  1303               	bcf	3,6	;RP1=0, select bank0
  3189     176C  1003               	bcf	3,0	;volatile
  3190     176D                     l3237:
  3191     176D  1F8B               	btfss	11,7	;volatile
  3192     176E  2F70               	goto	u3301
  3193     176F  2F71               	goto	u3300
  3194     1770                     u3301:
  3195     1770  2F72               	goto	l442
  3196     1771                     u3300:
  3197     1771                     l3239:
  3198     1771  1403               	bsf	3,0	;volatile
  3199     1772                     l442:
  3200     1772  138B               	bcf	11,7	;volatile
  3201     1773  1683               	bsf	3,5	;RP0=1, select bank3
  3202     1774  1703               	bsf	3,6	;RP1=1, select bank3
  3203     1775  150C               	bsf	12,2	;volsfr
  3204     1776                     l3241:
  3205     1776  3055               	movlw	85
  3206     1777  008D               	movwf	13	;volsfr
  3207     1778  30AA               	movlw	170
  3208     1779  008D               	movwf	13	;volsfr
  3209     177A                     l3243:
  3210     177A  148C               	bsf	12,1	;volsfr
  3211     177B                     l3245:
  3212     177B  110C               	bcf	12,2	;volsfr
  3213     177C                     l3247:
  3214     177C  1283               	bcf	3,5	;RP0=0, select bank0
  3215     177D  1303               	bcf	3,6	;RP1=0, select bank0
  3216     177E  1C03               	btfss	3,0	;volatile
  3217     177F  2F81               	goto	u3311
  3218     1780  2F82               	goto	u3310
  3219     1781                     u3311:
  3220     1781  2F83               	goto	l445
  3221     1782                     u3310:
  3222     1782                     l3249:
  3223     1782  178B               	bsf	11,7	;volatile
  3224     1783                     l445:
  3225     1783  0008               	return
  3226     1784                     __end_of_eeprom_write:
  3227                           
  3228                           	psect	text3
  3229     0991                     __ptext3:	
  3230 ;; *************** function _CompareStrings *****************
  3231 ;; Defined at:
  3232 ;;		line 559 in file "main.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;  str1            1    wreg     PTR unsigned char 
  3235 ;;		 -> datoSeriale(17), id_dest(4), 
  3236 ;;  str2            2    7[BANK1 ] PTR unsigned char 
  3237 ;;		 -> datoTastierino(17), PIC_ID(4), 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  str1            1   14[BANK1 ] PTR unsigned char 
  3240 ;;		 -> datoSeriale(17), id_dest(4), 
  3241 ;;  i               1   13[BANK1 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      unsigned char 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3251 ;;      Params:         0       0       2       0       0
  3252 ;;      Locals:         0       0       2       0       0
  3253 ;;      Temps:          0       0       4       0       0
  3254 ;;      Totals:         0       0       8       0       0
  3255 ;;Total ram usage:        8 bytes
  3256 ;; Hardware stack levels used: 1
  3257 ;; Hardware stack levels required when called: 5
  3258 ;; This function calls:
  3259 ;;		_Length
  3260 ;; This function is called by:
  3261 ;;		_main
  3262 ;;		_read_NumPad
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266     0991                     _CompareStrings:	
  3267                           ;psect for function _CompareStrings
  3268                           
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _CompareStrings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3272                           ;CompareStrings@str1 stored from wreg
  3273     0991  1683               	bsf	3,5	;RP0=1, select bank1
  3274     0992  1303               	bcf	3,6	;RP1=0, select bank1
  3275     0993  00AE               	movwf	CompareStrings@str1^(0+128)
  3276     0994                     l3105:
  3277                           
  3278                           ;main.c: 559: char CompareStrings(char *str1, char *str2);main.c: 560: {;main.c: 562:   
      +                            if(Length(str1) != Length(str2))
  3279     0994  082E               	movf	CompareStrings@str1^(0+128),w
  3280     0995  00A0               	movwf	Length@str^(0+128)
  3281     0996  3001               	movlw	1
  3282     0997  00A1               	movwf	(Length@str+1)^(0+128)
  3283     0998  160A  118A  26C4  120A  158A  	fcall	_Length
  3284     099D  1683               	bsf	3,5	;RP0=1, select bank1
  3285     099E  1303               	bcf	3,6	;RP1=0, select bank1
  3286     099F  0820               	movf	?_Length^(0+128),w
  3287     09A0  00A9               	movwf	??_CompareStrings^(0+128)
  3288     09A1  0821               	movf	(?_Length+1)^(0+128),w
  3289     09A2  00AA               	movwf	(??_CompareStrings^(0+128)+1)
  3290     09A3  0827               	movf	CompareStrings@str2^(0+128),w
  3291     09A4  00A0               	movwf	Length@str^(0+128)
  3292     09A5  0828               	movf	(CompareStrings@str2+1)^(0+128),w
  3293     09A6  00A1               	movwf	(Length@str+1)^(0+128)
  3294     09A7  160A  118A  26C4  120A  158A  	fcall	_Length
  3295     09AC  1683               	bsf	3,5	;RP0=1, select bank1
  3296     09AD  1303               	bcf	3,6	;RP1=0, select bank1
  3297     09AE  0821               	movf	(?_Length+1)^(0+128),w
  3298     09AF  062A               	xorwf	(??_CompareStrings+1)^(0+128),w
  3299     09B0  1D03               	skipz
  3300     09B1  29B4               	goto	u3195
  3301     09B2  0820               	movf	?_Length^(0+128),w
  3302     09B3  0629               	xorwf	??_CompareStrings^(0+128),w
  3303     09B4                     u3195:
  3304     09B4  1903               	skipnz
  3305     09B5  29B7               	goto	u3191
  3306     09B6  29B8               	goto	u3190
  3307     09B7                     u3191:
  3308     09B7  29BA               	goto	l3113
  3309     09B8                     u3190:
  3310     09B8                     l3107:
  3311                           
  3312                           ;main.c: 563:         return 0;
  3313     09B8  3000               	movlw	0
  3314     09B9  29E7               	goto	l248
  3315     09BA                     l3113:
  3316                           
  3317                           ;main.c: 565:     {;main.c: 566:         char i = 0;
  3318     09BA  01AD               	clrf	CompareStrings@i^(0+128)
  3319                           
  3320                           ;main.c: 569:         while(str1[i] != '\0')
  3321     09BB  29DB               	goto	l3123
  3322     09BC                     l3115:
  3323                           
  3324                           ;main.c: 570:         {;main.c: 571:             if(str1[i] != str2[i])
  3325     09BC  082D               	movf	CompareStrings@i^(0+128),w
  3326     09BD  0727               	addwf	CompareStrings@str2^(0+128),w
  3327     09BE  00A9               	movwf	??_CompareStrings^(0+128)
  3328     09BF  0828               	movf	(CompareStrings@str2+1)^(0+128),w
  3329     09C0  1803               	skipnc
  3330     09C1  3E01               	addlw	1
  3331     09C2  00AA               	movwf	(??_CompareStrings^(0+128)+1)
  3332     09C3  0829               	movf	??_CompareStrings^(0+128),w
  3333     09C4  0084               	movwf	4
  3334     09C5  1783               	bsf	3,7
  3335     09C6  1C2A               	btfss	(??_CompareStrings+1)^(0+128),0
  3336     09C7  1383               	bcf	3,7
  3337     09C8  0800               	movf	0,w
  3338     09C9  00AB               	movwf	(??_CompareStrings+2)^(0+128)
  3339     09CA  082D               	movf	CompareStrings@i^(0+128),w
  3340     09CB  072E               	addwf	CompareStrings@str1^(0+128),w
  3341     09CC  00AC               	movwf	(??_CompareStrings+3)^(0+128)
  3342     09CD  082C               	movf	(??_CompareStrings+3)^(0+128),w
  3343     09CE  0084               	movwf	4
  3344     09CF  1783               	bsf	3,7	;select IRP bank2
  3345     09D0  0800               	movf	0,w
  3346     09D1  062B               	xorwf	(??_CompareStrings+2)^(0+128),w
  3347     09D2  1903               	skipnz
  3348     09D3  29D5               	goto	u3201
  3349     09D4  29D6               	goto	u3200
  3350     09D5                     u3201:
  3351     09D5  29D7               	goto	l3121
  3352     09D6                     u3200:
  3353     09D6  29B8               	goto	l3107
  3354     09D7                     l3121:
  3355                           
  3356                           ;main.c: 574:             i++;
  3357     09D7  3001               	movlw	1
  3358     09D8  00A9               	movwf	??_CompareStrings^(0+128)
  3359     09D9  0829               	movf	??_CompareStrings^(0+128),w
  3360     09DA  07AD               	addwf	CompareStrings@i^(0+128),f
  3361     09DB                     l3123:
  3362                           
  3363                           ;main.c: 569:         while(str1[i] != '\0')
  3364     09DB  082D               	movf	CompareStrings@i^(0+128),w
  3365     09DC  072E               	addwf	CompareStrings@str1^(0+128),w
  3366     09DD  00A9               	movwf	??_CompareStrings^(0+128)
  3367     09DE  0829               	movf	??_CompareStrings^(0+128),w
  3368     09DF  0084               	movwf	4
  3369     09E0  1783               	bsf	3,7	;select IRP bank2
  3370     09E1  0800               	movf	0,w
  3371     09E2  1D03               	btfss	3,2
  3372     09E3  29E5               	goto	u3211
  3373     09E4  29E6               	goto	u3210
  3374     09E5                     u3211:
  3375     09E5  29BC               	goto	l3115
  3376     09E6                     u3210:
  3377     09E6                     l3125:
  3378                           
  3379                           ;main.c: 577:         return 1;
  3380     09E6  3001               	movlw	1
  3381     09E7                     l248:
  3382     09E7  0008               	return
  3383     09E8                     __end_of_CompareStrings:
  3384                           
  3385                           	psect	text4
  3386     0CB7                     __ptext4:	
  3387 ;; *************** function _init_PIC *****************
  3388 ;; Defined at:
  3389 ;;		line 320 in file "main.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  id              2    9[BANK3 ] int 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3403 ;;      Params:         0       0       0       0       0
  3404 ;;      Locals:         0       0       0       2       0
  3405 ;;      Temps:          0       0       0       2       0
  3406 ;;      Totals:         0       0       0       4       0
  3407 ;;Total ram usage:        4 bytes
  3408 ;; Hardware stack levels used: 1
  3409 ;; Hardware stack levels required when called: 7
  3410 ;; This function calls:
  3411 ;;		_ConvertToString
  3412 ;;		_Fill
  3413 ;;		_UART_init
  3414 ;;		_eeprom_read
  3415 ;;		_init_LCD
  3416 ;;		_init_NumPad
  3417 ;;		_init_Timer0
  3418 ;;		_lcdPrint
  3419 ;;		_lcdSend
  3420 ;; This function is called by:
  3421 ;;		_main
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425     0CB7                     _init_PIC:	
  3426                           ;psect for function _init_PIC
  3427                           
  3428     0CB7                     l3801:	
  3429                           ;incstack = 0
  3430                           ; Regs used in _init_PIC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3431                           
  3432                           
  3433                           ;main.c: 323:     UART_init(115200);
  3434     0CB7  3000               	movlw	0
  3435     0CB8  1683               	bsf	3,5	;RP0=1, select bank1
  3436     0CB9  1303               	bcf	3,6	;RP1=0, select bank1
  3437     0CBA  00DC               	movwf	(UART_init@baudrate+3)^(0+128)
  3438     0CBB  3001               	movlw	1
  3439     0CBC  00DB               	movwf	(UART_init@baudrate+2)^(0+128)
  3440     0CBD  30C2               	movlw	194
  3441     0CBE  00DA               	movwf	(UART_init@baudrate+1)^(0+128)
  3442     0CBF  3000               	movlw	0
  3443     0CC0  00D9               	movwf	UART_init@baudrate^(0+128)
  3444     0CC1  160A  118A  27C0  120A  158A  	fcall	_UART_init
  3445                           
  3446                           ;main.c: 324:     init_LCD();
  3447     0CC6  120A  158A  22FC  120A  158A  	fcall	_init_LCD
  3448                           
  3449                           ;main.c: 325:     init_NumPad();
  3450     0CCB  120A  158A  2002  120A  158A  	fcall	_init_NumPad
  3451                           
  3452                           ;main.c: 326:     init_Timer0();
  3453     0CD0  120A  118A  26E8  120A  158A  	fcall	_init_Timer0
  3454                           
  3455                           ;main.c: 328:     int id = (int)eeprom_read(0);
  3456     0CD5  3000               	movlw	0
  3457     0CD6  160A  118A  2657  120A  158A  	fcall	_eeprom_read
  3458     0CDB  1683               	bsf	3,5	;RP0=1, select bank3
  3459     0CDC  1703               	bsf	3,6	;RP1=1, select bank3
  3460     0CDD  00CC               	movwf	??_init_PIC^(0+384)
  3461     0CDE  01CD               	clrf	(??_init_PIC^(0+384)+1)
  3462     0CDF  084C               	movf	??_init_PIC^(0+384),w
  3463     0CE0  00CE               	movwf	init_PIC@id^(0+384)
  3464     0CE1  084D               	movf	(??_init_PIC+1)^(0+384),w
  3465     0CE2  00CF               	movwf	(init_PIC@id+1)^(0+384)
  3466     0CE3                     l3803:
  3467                           
  3468                           ;main.c: 329:     if(id == 255)
  3469     0CE3  0A4E               	incf	init_PIC@id^(0+384),w
  3470     0CE4  044F               	iorwf	(init_PIC@id+1)^(0+384),w
  3471     0CE5  1D03               	btfss	3,2
  3472     0CE6  2CE8               	goto	u3991
  3473     0CE7  2CE9               	goto	u3990
  3474     0CE8                     u3991:
  3475     0CE8  2D09               	goto	l3811
  3476     0CE9                     u3990:
  3477     0CE9                     l3805:
  3478                           
  3479                           ;main.c: 330:     {;main.c: 331:         lcdPrint("Inser. ID PIC:\0");
  3480     0CE9  3049               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  3481     0CEA  1683               	bsf	3,5	;RP0=1, select bank1
  3482     0CEB  1303               	bcf	3,6	;RP1=0, select bank1
  3483     0CEC  00A4               	movwf	lcdPrint@str^(0+128)
  3484     0CED  3080               	movlw	128
  3485     0CEE  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  3486     0CEF  120A  158A  213B  120A  158A  	fcall	_lcdPrint
  3487     0CF4                     l3807:
  3488                           
  3489                           ;main.c: 332:         lcdSend(0xC0, 0);
  3490     0CF4  1683               	bsf	3,5	;RP0=1, select bank1
  3491     0CF5  1303               	bcf	3,6	;RP1=0, select bank1
  3492     0CF6  01A0               	clrf	lcdSend@tipo^(0+128)
  3493     0CF7  30C0               	movlw	192
  3494     0CF8  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3495     0CFD                     l3809:
  3496                           
  3497                           ;main.c: 333:         lcdPrint("MIN=0,MAX=250\0");
  3498     0CFD  3069               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  3499     0CFE  1683               	bsf	3,5	;RP0=1, select bank1
  3500     0CFF  1303               	bcf	3,6	;RP1=0, select bank1
  3501     0D00  00A4               	movwf	lcdPrint@str^(0+128)
  3502     0D01  3080               	movlw	128
  3503     0D02  00A5               	movwf	(lcdPrint@str+1)^(0+128)
  3504     0D03  120A  158A  213B  120A  158A  	fcall	_lcdPrint
  3505                           
  3506                           ;main.c: 334:     }
  3507     0D08  2D2E               	goto	l175
  3508     0D09                     l3811:
  3509                           
  3510                           ;main.c: 336:     {;main.c: 337:         ConvertToString(id, PIC_ID);
  3511     0D09  084E               	movf	init_PIC@id^(0+384),w
  3512     0D0A  1683               	bsf	3,5	;RP0=1, select bank1
  3513     0D0B  1303               	bcf	3,6	;RP1=0, select bank1
  3514     0D0C  00D9               	movwf	ConvertToString@n^(0+128)
  3515     0D0D  1683               	bsf	3,5	;RP0=1, select bank3
  3516     0D0E  1703               	bsf	3,6	;RP1=1, select bank3
  3517     0D0F  084F               	movf	(init_PIC@id+1)^(0+384),w
  3518     0D10  1683               	bsf	3,5	;RP0=1, select bank1
  3519     0D11  1303               	bcf	3,6	;RP1=0, select bank1
  3520     0D12  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  3521     0D13  3000               	movlw	0
  3522     0D14  1BDA               	btfsc	(ConvertToString@n+1)^(0+128),7
  3523     0D15  30FF               	movlw	255
  3524     0D16  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  3525     0D17  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  3526     0D18  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  3527     0D19  00DD               	movwf	ConvertToString@str^(0+128)
  3528     0D1A  3000               	movlw	0
  3529     0D1B  00DE               	movwf	(ConvertToString@str+1)^(0+128)
  3530     0D1C  120A  118A  25BA  120A  158A  	fcall	_ConvertToString
  3531     0D21                     l3813:
  3532                           
  3533                           ;main.c: 338:         Fill(PIC_ID);
  3534     0D21  3050               	movlw	(low (_PIC_ID| 0))& (0+255)
  3535     0D22  120A  158A  229E  120A  158A  	fcall	_Fill
  3536     0D27                     l3815:
  3537                           
  3538                           ;main.c: 339:         initialize = 0;
  3539     0D27  1683               	bsf	3,5	;RP0=1, select bank1
  3540     0D28  1303               	bcf	3,6	;RP1=0, select bank1
  3541     0D29  01EE               	clrf	_initialize^(0+128)
  3542     0D2A                     l3817:
  3543                           
  3544                           ;main.c: 340:         pr_start = 1;
  3545     0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  3546     0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  3547     0D2C  01CA               	clrf	_pr_start
  3548     0D2D  0ACA               	incf	_pr_start,f
  3549     0D2E                     l175:
  3550     0D2E  0008               	return
  3551     0D2F                     __end_of_init_PIC:
  3552                           
  3553                           	psect	text5
  3554     093B                     __ptext5:	
  3555 ;; *************** function _lcdPrint *****************
  3556 ;; Defined at:
  3557 ;;		line 392 in file "main.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  str             2    4[BANK1 ] PTR unsigned char 
  3560 ;;		 -> STR_17(15), STR_16(16), datoTastierino(17), STR_15(18), 
  3561 ;;		 -> STR_13(16), STR_12(13), STR_11(15), STR_9(12), 
  3562 ;;		 -> STR_8(13), STR_7(18), main@num_rand_s(16), PIC_ID(4), 
  3563 ;;		 -> STR_5(17), STR_4(12), STR_3(10), STR_2(8), 
  3564 ;;		 -> STR_1(11), 
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;  n               2    9[BANK1 ] int 
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3576 ;;      Params:         0       0       2       0       0
  3577 ;;      Locals:         0       0       2       0       0
  3578 ;;      Temps:          0       0       3       0       0
  3579 ;;      Totals:         0       0       7       0       0
  3580 ;;Total ram usage:        7 bytes
  3581 ;; Hardware stack levels used: 1
  3582 ;; Hardware stack levels required when called: 5
  3583 ;; This function calls:
  3584 ;;		_lcdSend
  3585 ;; This function is called by:
  3586 ;;		_main
  3587 ;;		_init_PIC
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591     093B                     _lcdPrint:	
  3592                           ;psect for function _lcdPrint
  3593                           
  3594     093B                     l3067:	
  3595                           ;incstack = 0
  3596                           ; Regs used in _lcdPrint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3597                           
  3598                           
  3599                           ;main.c: 392: void lcdPrint(char *str);main.c: 393: {;main.c: 394:     int n = 0;
  3600     093B  1683               	bsf	3,5	;RP0=1, select bank1
  3601     093C  1303               	bcf	3,6	;RP1=0, select bank1
  3602     093D  01A9               	clrf	lcdPrint@n^(0+128)
  3603     093E  01AA               	clrf	(lcdPrint@n+1)^(0+128)
  3604                           
  3605                           ;main.c: 396:     while(str[n] != '\0')
  3606     093F  296E               	goto	l3073
  3607     0940                     l3069:
  3608                           
  3609                           ;main.c: 397:     {;main.c: 399:         lcdSend(str[n++], 1);
  3610     0940  1683               	bsf	3,5	;RP0=1, select bank1
  3611     0941  1303               	bcf	3,6	;RP1=0, select bank1
  3612     0942  01A0               	clrf	lcdSend@tipo^(0+128)
  3613     0943  0AA0               	incf	lcdSend@tipo^(0+128),f
  3614     0944  0829               	movf	lcdPrint@n^(0+128),w
  3615     0945  0724               	addwf	lcdPrint@str^(0+128),w
  3616     0946  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3617     0947  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3618     0948  00A6               	movwf	??_lcdPrint^(0+128)
  3619     0949  1803               	skipnc
  3620     094A  0AA6               	incf	??_lcdPrint^(0+128),f
  3621     094B  1FA9               	btfss	lcdPrint@n^(0+128),7
  3622     094C  294E               	goto	u3110
  3623     094D  03A6               	decf	??_lcdPrint^(0+128),f
  3624     094E                     u3110:
  3625     094E  1683               	bsf	3,5	;RP0=1, select bank1
  3626     094F  1303               	bcf	3,6	;RP1=0, select bank1
  3627     0950  0826               	movf	??_lcdPrint^(0+128),w
  3628     0951  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3629     0952  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3630     0953  1283               	bcf	3,5	;RP0=0, select bank0
  3631     0954  1303               	bcf	3,6	;RP1=0, select bank0
  3632     0955  00FF               	movwf	btemp+1
  3633     0956  1683               	bsf	3,5	;RP0=1, select bank1
  3634     0957  1303               	bcf	3,6	;RP1=0, select bank1
  3635     0958  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3636     0959  0084               	movwf	4
  3637     095A  1283               	bcf	3,5	;RP0=0, select bank0
  3638     095B  1303               	bcf	3,6	;RP1=0, select bank0
  3639     095C  120A  118A  2700  120A  158A  	fcall	stringtab
  3640     0961  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3641     0966                     l3071:
  3642     0966  3001               	movlw	1
  3643     0967  1683               	bsf	3,5	;RP0=1, select bank1
  3644     0968  1303               	bcf	3,6	;RP1=0, select bank1
  3645     0969  07A9               	addwf	lcdPrint@n^(0+128),f
  3646     096A  1803               	skipnc
  3647     096B  0AAA               	incf	(lcdPrint@n+1)^(0+128),f
  3648     096C  3000               	movlw	0
  3649     096D  07AA               	addwf	(lcdPrint@n+1)^(0+128),f
  3650     096E                     l3073:
  3651                           
  3652                           ;main.c: 396:     while(str[n] != '\0')
  3653     096E  0829               	movf	lcdPrint@n^(0+128),w
  3654     096F  0724               	addwf	lcdPrint@str^(0+128),w
  3655     0970  00A7               	movwf	(??_lcdPrint+1)^(0+128)
  3656     0971  0825               	movf	(lcdPrint@str+1)^(0+128),w
  3657     0972  00A6               	movwf	??_lcdPrint^(0+128)
  3658     0973  1803               	skipnc
  3659     0974  0AA6               	incf	??_lcdPrint^(0+128),f
  3660     0975  1FA9               	btfss	lcdPrint@n^(0+128),7
  3661     0976  2978               	goto	u3120
  3662     0977  03A6               	decf	??_lcdPrint^(0+128),f
  3663     0978                     u3120:
  3664     0978  1683               	bsf	3,5	;RP0=1, select bank1
  3665     0979  1303               	bcf	3,6	;RP1=0, select bank1
  3666     097A  0826               	movf	??_lcdPrint^(0+128),w
  3667     097B  00A8               	movwf	((??_lcdPrint+1)^(0+128)+1)
  3668     097C  0828               	movf	(??_lcdPrint+2)^(0+128),w
  3669     097D  1283               	bcf	3,5	;RP0=0, select bank0
  3670     097E  1303               	bcf	3,6	;RP1=0, select bank0
  3671     097F  00FF               	movwf	btemp+1
  3672     0980  1683               	bsf	3,5	;RP0=1, select bank1
  3673     0981  1303               	bcf	3,6	;RP1=0, select bank1
  3674     0982  0827               	movf	(??_lcdPrint+1)^(0+128),w
  3675     0983  0084               	movwf	4
  3676     0984  1283               	bcf	3,5	;RP0=0, select bank0
  3677     0985  1303               	bcf	3,6	;RP1=0, select bank0
  3678     0986  120A  118A  2700  120A  158A  	fcall	stringtab
  3679     098B  3A00               	xorlw	0
  3680     098C  1D03               	skipz
  3681     098D  298F               	goto	u3131
  3682     098E  2990               	goto	u3130
  3683     098F                     u3131:
  3684     098F  2940               	goto	l3069
  3685     0990                     u3130:
  3686     0990                     l190:
  3687     0990  0008               	return
  3688     0991                     __end_of_lcdPrint:
  3689                           
  3690                           	psect	text6
  3691     06E8                     __ptext6:	
  3692 ;; *************** function _init_Timer0 *****************
  3693 ;; Defined at:
  3694 ;;		line 344 in file "main.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3708 ;;      Params:         0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0
  3710 ;;      Temps:          0       0       1       0       0
  3711 ;;      Totals:         0       0       1       0       0
  3712 ;;Total ram usage:        1 bytes
  3713 ;; Hardware stack levels used: 1
  3714 ;; Hardware stack levels required when called: 4
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_init_PIC
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722     06E8                     _init_Timer0:	
  3723                           ;psect for function _init_Timer0
  3724                           
  3725     06E8                     l3169:	
  3726                           ;incstack = 0
  3727                           ; Regs used in _init_Timer0: [wreg+status,2+status,0]
  3728                           
  3729                           
  3730                           ;main.c: 347:     INTCON |= 0xA0;
  3731     06E8  30A0               	movlw	160
  3732     06E9  1683               	bsf	3,5	;RP0=1, select bank1
  3733     06EA  1303               	bcf	3,6	;RP1=0, select bank1
  3734     06EB  00A0               	movwf	??_init_Timer0^(0+128)
  3735     06EC  0820               	movf	??_init_Timer0^(0+128),w
  3736     06ED  048B               	iorwf	11,f	;volatile
  3737     06EE                     l3171:
  3738                           
  3739                           ;main.c: 348:     OPTION_REG = 0x06;
  3740     06EE  3006               	movlw	6
  3741     06EF  0081               	movwf	1	;volatile
  3742     06F0                     l3173:
  3743                           
  3744                           ;main.c: 349:     TMR0 = 131;
  3745     06F0  3083               	movlw	131
  3746     06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3747     06F2  1303               	bcf	3,6	;RP1=0, select bank0
  3748     06F3  0081               	movwf	1	;volatile
  3749     06F4                     l3175:
  3750                           
  3751                           ;main.c: 351:     milliseconds = 0;
  3752     06F4  3000               	movlw	0
  3753     06F5  00C3               	movwf	_milliseconds+3
  3754     06F6  3000               	movlw	0
  3755     06F7  00C2               	movwf	_milliseconds+2
  3756     06F8  3000               	movlw	0
  3757     06F9  00C1               	movwf	_milliseconds+1
  3758     06FA  3000               	movlw	0
  3759     06FB  00C0               	movwf	_milliseconds
  3760     06FC                     l178:
  3761     06FC  0008               	return
  3762     06FD                     __end_of_init_Timer0:
  3763                           
  3764                           	psect	text7
  3765     0802                     __ptext7:	
  3766 ;; *************** function _init_NumPad *****************
  3767 ;; Defined at:
  3768 ;;		line 608 in file "main.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3782 ;;      Params:         0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0
  3784 ;;      Temps:          0       0       1       0       0
  3785 ;;      Totals:         0       0       1       0       0
  3786 ;;Total ram usage:        1 bytes
  3787 ;; Hardware stack levels used: 1
  3788 ;; Hardware stack levels required when called: 4
  3789 ;; This function calls:
  3790 ;;		Nothing
  3791 ;; This function is called by:
  3792 ;;		_init_PIC
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796     0802                     _init_NumPad:	
  3797                           ;psect for function _init_NumPad
  3798                           
  3799     0802                     l3167:	
  3800                           ;incstack = 0
  3801                           ; Regs used in _init_NumPad: [wreg+status,2+status,0]
  3802                           
  3803                           
  3804                           ;main.c: 611:     TRISD |= 0x0F;
  3805     0802  300F               	movlw	15
  3806     0803  1683               	bsf	3,5	;RP0=1, select bank1
  3807     0804  1303               	bcf	3,6	;RP1=0, select bank1
  3808     0805  00A0               	movwf	??_init_NumPad^(0+128)
  3809     0806  0820               	movf	??_init_NumPad^(0+128),w
  3810     0807  0488               	iorwf	8,f	;volatile
  3811                           
  3812                           ;main.c: 612:     TRISB &= 0xF0;
  3813     0808  30F0               	movlw	240
  3814     0809  00A0               	movwf	??_init_NumPad^(0+128)
  3815     080A  0820               	movf	??_init_NumPad^(0+128),w
  3816     080B  0586               	andwf	6,f	;volatile
  3817     080C                     l265:
  3818     080C  0008               	return
  3819     080D                     __end_of_init_NumPad:
  3820                           
  3821                           	psect	text8
  3822     0AFC                     __ptext8:	
  3823 ;; *************** function _init_LCD *****************
  3824 ;; Defined at:
  3825 ;;		line 354 in file "main.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;		None
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  1    wreg      void 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0, pclath, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3839 ;;      Params:         0       0       0       0       0
  3840 ;;      Locals:         0       0       0       0       0
  3841 ;;      Temps:          0       0       2       0       0
  3842 ;;      Totals:         0       0       2       0       0
  3843 ;;Total ram usage:        2 bytes
  3844 ;; Hardware stack levels used: 1
  3845 ;; Hardware stack levels required when called: 5
  3846 ;; This function calls:
  3847 ;;		_lcdSend
  3848 ;; This function is called by:
  3849 ;;		_init_PIC
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853     0AFC                     _init_LCD:	
  3854                           ;psect for function _init_LCD
  3855                           
  3856     0AFC                     l3145:	
  3857                           ;incstack = 0
  3858                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  3859                           
  3860                           
  3861                           ;main.c: 358:     PORTEbits.RE2 = 0;
  3862     0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  3863     0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  3864     0AFE  1109               	bcf	9,2	;volatile
  3865                           
  3866                           ;main.c: 359:     PORTEbits.RE1 = 0;
  3867     0AFF  1089               	bcf	9,1	;volatile
  3868     0B00                     l3147:
  3869                           
  3870                           ;main.c: 360:     _delay((unsigned long)((20)*(20000000/4000.0)));
  3871     0B00  3082               	movlw	130
  3872     0B01  1683               	bsf	3,5	;RP0=1, select bank1
  3873     0B02  1303               	bcf	3,6	;RP1=0, select bank1
  3874     0B03  00A5               	movwf	(??_init_LCD^(0+128)+1)
  3875     0B04  30DD               	movlw	221
  3876     0B05  00A4               	movwf	??_init_LCD^(0+128)
  3877     0B06                     u4227:
  3878     0B06  0BA4               	decfsz	??_init_LCD^(0+128),f
  3879     0B07  2B06               	goto	u4227
  3880     0B08  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  3881     0B09  2B06               	goto	u4227
  3882     0B0A                     l3149:
  3883                           
  3884                           ;main.c: 361:     PORTEbits.RE1 = 1;
  3885     0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  3886     0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  3887     0B0C  1489               	bsf	9,1	;volatile
  3888     0B0D                     l3151:
  3889                           
  3890                           ;main.c: 363:     lcdSend(0x38, 0);
  3891     0B0D  1683               	bsf	3,5	;RP0=1, select bank1
  3892     0B0E  1303               	bcf	3,6	;RP1=0, select bank1
  3893     0B0F  01A0               	clrf	lcdSend@tipo^(0+128)
  3894     0B10  3038               	movlw	56
  3895     0B11  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3896     0B16                     l3153:
  3897                           
  3898                           ;main.c: 364:     _delay((unsigned long)((5)*(20000000/4000.0)));
  3899     0B16  3021               	movlw	33
  3900     0B17  1683               	bsf	3,5	;RP0=1, select bank1
  3901     0B18  1303               	bcf	3,6	;RP1=0, select bank1
  3902     0B19  00A5               	movwf	(??_init_LCD^(0+128)+1)
  3903     0B1A  3075               	movlw	117
  3904     0B1B  00A4               	movwf	??_init_LCD^(0+128)
  3905     0B1C                     u4237:
  3906     0B1C  0BA4               	decfsz	??_init_LCD^(0+128),f
  3907     0B1D  2B1C               	goto	u4237
  3908     0B1E  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  3909     0B1F  2B1C               	goto	u4237
  3910     0B20  2B21               	nop2
  3911                           
  3912                           ;main.c: 365:     lcdSend(0x38, 0);
  3913     0B21  1683               	bsf	3,5	;RP0=1, select bank1
  3914     0B22  1303               	bcf	3,6	;RP1=0, select bank1
  3915     0B23  01A0               	clrf	lcdSend@tipo^(0+128)
  3916     0B24  3038               	movlw	56
  3917     0B25  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3918     0B2A                     l3155:
  3919                           
  3920                           ;main.c: 366:     _delay((unsigned long)((1)*(20000000/4000.0)));
  3921     0B2A  3007               	movlw	7
  3922     0B2B  1683               	bsf	3,5	;RP0=1, select bank1
  3923     0B2C  1303               	bcf	3,6	;RP1=0, select bank1
  3924     0B2D  00A5               	movwf	(??_init_LCD^(0+128)+1)
  3925     0B2E  307C               	movlw	124
  3926     0B2F  00A4               	movwf	??_init_LCD^(0+128)
  3927     0B30                     u4247:
  3928     0B30  0BA4               	decfsz	??_init_LCD^(0+128),f
  3929     0B31  2B30               	goto	u4247
  3930     0B32  0BA5               	decfsz	(??_init_LCD^(0+128)+1),f
  3931     0B33  2B30               	goto	u4247
  3932     0B34  0000               	nop
  3933     0B35                     l3157:
  3934                           
  3935                           ;main.c: 367:     lcdSend(0x38, 0);
  3936     0B35  1683               	bsf	3,5	;RP0=1, select bank1
  3937     0B36  1303               	bcf	3,6	;RP1=0, select bank1
  3938     0B37  01A0               	clrf	lcdSend@tipo^(0+128)
  3939     0B38  3038               	movlw	56
  3940     0B39  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3941     0B3E                     l3159:
  3942                           
  3943                           ;main.c: 368:     lcdSend(0x08, 0);
  3944     0B3E  1683               	bsf	3,5	;RP0=1, select bank1
  3945     0B3F  1303               	bcf	3,6	;RP1=0, select bank1
  3946     0B40  01A0               	clrf	lcdSend@tipo^(0+128)
  3947     0B41  3008               	movlw	8
  3948     0B42  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3949     0B47                     l3161:
  3950                           
  3951                           ;main.c: 369:     lcdSend(0x0F, 0);
  3952     0B47  1683               	bsf	3,5	;RP0=1, select bank1
  3953     0B48  1303               	bcf	3,6	;RP1=0, select bank1
  3954     0B49  01A0               	clrf	lcdSend@tipo^(0+128)
  3955     0B4A  300F               	movlw	15
  3956     0B4B  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3957     0B50                     l3163:
  3958                           
  3959                           ;main.c: 370:     lcdSend(0x01, 0);
  3960     0B50  1683               	bsf	3,5	;RP0=1, select bank1
  3961     0B51  1303               	bcf	3,6	;RP1=0, select bank1
  3962     0B52  01A0               	clrf	lcdSend@tipo^(0+128)
  3963     0B53  3001               	movlw	1
  3964     0B54  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3965     0B59                     l3165:
  3966                           
  3967                           ;main.c: 372:     lcdSend(0x0C, 0);
  3968     0B59  1683               	bsf	3,5	;RP0=1, select bank1
  3969     0B5A  1303               	bcf	3,6	;RP1=0, select bank1
  3970     0B5B  01A0               	clrf	lcdSend@tipo^(0+128)
  3971     0B5C  300C               	movlw	12
  3972     0B5D  160A  118A  271A  120A  158A  	fcall	_lcdSend
  3973     0B62                     l181:
  3974     0B62  0008               	return
  3975     0B63                     __end_of_init_LCD:
  3976                           
  3977                           	psect	text9
  3978     171A                     __ptext9:	
  3979 ;; *************** function _lcdSend *****************
  3980 ;; Defined at:
  3981 ;;		line 375 in file "main.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  dato            1    wreg     unsigned char 
  3984 ;;  tipo            1    0[BANK1 ] unsigned char 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  dato            1    3[BANK1 ] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  1    wreg      void 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3996 ;;      Params:         0       0       1       0       0
  3997 ;;      Locals:         0       0       1       0       0
  3998 ;;      Temps:          0       0       2       0       0
  3999 ;;      Totals:         0       0       4       0       0
  4000 ;;Total ram usage:        4 bytes
  4001 ;; Hardware stack levels used: 1
  4002 ;; Hardware stack levels required when called: 4
  4003 ;; This function calls:
  4004 ;;		Nothing
  4005 ;; This function is called by:
  4006 ;;		_main
  4007 ;;		_init_PIC
  4008 ;;		_init_LCD
  4009 ;;		_lcdPrint
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013     171A                     _lcdSend:	
  4014                           ;psect for function _lcdSend
  4015                           
  4016                           
  4017                           ;incstack = 0
  4018                           ; Regs used in _lcdSend: [wreg+status,2+status,0]
  4019                           ;lcdSend@dato stored from wreg
  4020     171A  1683               	bsf	3,5	;RP0=1, select bank1
  4021     171B  1303               	bcf	3,6	;RP1=0, select bank1
  4022     171C  00A3               	movwf	lcdSend@dato^(0+128)
  4023     171D                     l2937:
  4024                           
  4025                           ;main.c: 375: void lcdSend(char dato, char tipo);main.c: 376: {;main.c: 379:     TRISD =
      +                           0x00;
  4026     171D  0188               	clrf	8	;volatile
  4027     171E                     l2939:
  4028                           
  4029                           ;main.c: 380:     TRISEbits.TRISE1 = 0;
  4030     171E  1089               	bcf	9,1	;volatile
  4031     171F                     l2941:
  4032                           
  4033                           ;main.c: 381:     TRISEbits.TRISE2 = 0;
  4034     171F  1109               	bcf	9,2	;volatile
  4035     1720                     l2943:
  4036                           
  4037                           ;main.c: 383:     PORTEbits.RE1 = 1;
  4038     1720  1283               	bcf	3,5	;RP0=0, select bank0
  4039     1721  1303               	bcf	3,6	;RP1=0, select bank0
  4040     1722  1489               	bsf	9,1	;volatile
  4041     1723                     l2945:
  4042                           
  4043                           ;main.c: 384:     PORTD = dato;
  4044     1723  1683               	bsf	3,5	;RP0=1, select bank1
  4045     1724  1303               	bcf	3,6	;RP1=0, select bank1
  4046     1725  0823               	movf	lcdSend@dato^(0+128),w
  4047     1726  1283               	bcf	3,5	;RP0=0, select bank0
  4048     1727  1303               	bcf	3,6	;RP1=0, select bank0
  4049     1728  0088               	movwf	8	;volatile
  4050     1729                     l2947:
  4051                           
  4052                           ;main.c: 385:     PORTEbits.RE2 = tipo;
  4053     1729  1683               	bsf	3,5	;RP0=1, select bank1
  4054     172A  1303               	bcf	3,6	;RP1=0, select bank1
  4055     172B  0C20               	rrf	lcdSend@tipo^(0+128),w
  4056     172C  1283               	bcf	3,5	;RP0=0, select bank0
  4057     172D  1303               	bcf	3,6	;RP1=0, select bank0
  4058     172E  1C03               	skipc
  4059     172F  1109               	bcf	9,2	;volatile
  4060     1730  1803               	skipnc
  4061     1731  1509               	bsf	9,2	;volatile
  4062     1732                     l2949:
  4063                           
  4064                           ;main.c: 386:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4065     1732  3014               	movlw	20
  4066     1733  1683               	bsf	3,5	;RP0=1, select bank1
  4067     1734  1303               	bcf	3,6	;RP1=0, select bank1
  4068     1735  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4069     1736  3079               	movlw	121
  4070     1737  00A1               	movwf	??_lcdSend^(0+128)
  4071     1738                     u4257:
  4072     1738  0BA1               	decfsz	??_lcdSend^(0+128),f
  4073     1739  2F38               	goto	u4257
  4074     173A  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4075     173B  2F38               	goto	u4257
  4076     173C                     l2951:
  4077                           
  4078                           ;main.c: 387:     PORTEbits.RE1 = 0;
  4079     173C  1283               	bcf	3,5	;RP0=0, select bank0
  4080     173D  1303               	bcf	3,6	;RP1=0, select bank0
  4081     173E  1089               	bcf	9,1	;volatile
  4082     173F                     l2953:
  4083                           
  4084                           ;main.c: 388:     _delay((unsigned long)((3)*(20000000/4000.0)));
  4085     173F  3014               	movlw	20
  4086     1740  1683               	bsf	3,5	;RP0=1, select bank1
  4087     1741  1303               	bcf	3,6	;RP1=0, select bank1
  4088     1742  00A2               	movwf	(??_lcdSend^(0+128)+1)
  4089     1743  3079               	movlw	121
  4090     1744  00A1               	movwf	??_lcdSend^(0+128)
  4091     1745                     u4267:
  4092     1745  0BA1               	decfsz	??_lcdSend^(0+128),f
  4093     1746  2F45               	goto	u4267
  4094     1747  0BA2               	decfsz	(??_lcdSend^(0+128)+1),f
  4095     1748  2F45               	goto	u4267
  4096     1749                     l2955:
  4097                           
  4098                           ;main.c: 389:     PORTEbits.RE1 = 1;
  4099     1749  1283               	bcf	3,5	;RP0=0, select bank0
  4100     174A  1303               	bcf	3,6	;RP1=0, select bank0
  4101     174B  1489               	bsf	9,1	;volatile
  4102     174C                     l184:
  4103     174C  0008               	return
  4104     174D                     __end_of_lcdSend:
  4105                           
  4106                           	psect	text10
  4107     1657                     __ptext10:	
  4108 ;; *************** function _eeprom_read *****************
  4109 ;; Defined at:
  4110 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  addr            1    wreg     unsigned char 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  addr            1    1[BANK1 ] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      unsigned char 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4124 ;;      Params:         0       0       0       0       0
  4125 ;;      Locals:         0       0       1       0       0
  4126 ;;      Temps:          0       0       1       0       0
  4127 ;;      Totals:         0       0       2       0       0
  4128 ;;Total ram usage:        2 bytes
  4129 ;; Hardware stack levels used: 1
  4130 ;; Hardware stack levels required when called: 4
  4131 ;; This function calls:
  4132 ;;		Nothing
  4133 ;; This function is called by:
  4134 ;;		_init_PIC
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138     1657                     _eeprom_read:	
  4139                           ;psect for function _eeprom_read
  4140                           
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4144                           ;eeprom_read@addr stored from wreg
  4145     1657  1683               	bsf	3,5	;RP0=1, select bank1
  4146     1658  1303               	bcf	3,6	;RP1=0, select bank1
  4147     1659  00A1               	movwf	eeprom_read@addr^(0+128)
  4148     165A                     l419:	
  4149                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 8:  do
  4150                           
  4151     165A  0064               	clrwdt	;# 
  4152     165B  1683               	bsf	3,5	;RP0=1, select bank3
  4153     165C  1703               	bsf	3,6	;RP1=1, select bank3
  4154     165D  188C               	btfsc	12,1	;volsfr
  4155     165E  2E60               	goto	u3231
  4156     165F  2E63               	goto	u3230
  4157     1660                     u3231:
  4158     1660  1683               	bsf	3,5	;RP0=1, select bank1
  4159     1661  1303               	bcf	3,6	;RP1=0, select bank1
  4160     1662  2E5A               	goto	l419
  4161     1663                     u3230:
  4162     1663                     l3177:
  4163                           
  4164                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4165     1663  1683               	bsf	3,5	;RP0=1, select bank1
  4166     1664  1303               	bcf	3,6	;RP1=0, select bank1
  4167     1665  0821               	movf	eeprom_read@addr^(0+128),w
  4168     1666  1283               	bcf	3,5	;RP0=0, select bank2
  4169     1667  1703               	bsf	3,6	;RP1=1, select bank2
  4170     1668  008D               	movwf	13	;volatile
  4171     1669  303F               	movlw	63
  4172     166A  1683               	bsf	3,5	;RP0=1, select bank1
  4173     166B  1303               	bcf	3,6	;RP1=0, select bank1
  4174     166C  00A0               	movwf	??_eeprom_read^(0+128)
  4175     166D  0820               	movf	??_eeprom_read^(0+128),w
  4176     166E  1683               	bsf	3,5	;RP0=1, select bank3
  4177     166F  1703               	bsf	3,6	;RP1=1, select bank3
  4178     1670  058C               	andwf	12,f	;volsfr
  4179     1671  140C               	bsf	12,0	;volsfr
  4180     1672  1283               	bcf	3,5	;RP0=0, select bank2
  4181     1673  1703               	bsf	3,6	;RP1=1, select bank2
  4182     1674  080C               	movf	12,w	;volatile
  4183     1675                     l421:
  4184     1675  0008               	return
  4185     1676                     __end_of_eeprom_read:
  4186                           
  4187                           	psect	text11
  4188     17C0                     __ptext11:	
  4189 ;; *************** function _UART_init *****************
  4190 ;; Defined at:
  4191 ;;		line 748 in file "main.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  baudrate        4   57[BANK1 ] long 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2, status,0, pclath, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4205 ;;      Params:         0       0       4       0       0
  4206 ;;      Locals:         0       0       0       0       0
  4207 ;;      Temps:          0       0       4       0       0
  4208 ;;      Totals:         0       0       8       0       0
  4209 ;;Total ram usage:        8 bytes
  4210 ;; Hardware stack levels used: 1
  4211 ;; Hardware stack levels required when called: 5
  4212 ;; This function calls:
  4213 ;;		___aldiv
  4214 ;; This function is called by:
  4215 ;;		_init_PIC
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219     17C0                     _UART_init:	
  4220                           ;psect for function _UART_init
  4221                           
  4222     17C0                     l3129:	
  4223                           ;incstack = 0
  4224                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  4225                           
  4226                           
  4227                           ;main.c: 748: void UART_init(long int baudrate);main.c: 749: {;main.c: 751:     TRISC &=
      +                           ~0x40;
  4228     17C0  30BF               	movlw	191
  4229     17C1  1683               	bsf	3,5	;RP0=1, select bank1
  4230     17C2  1303               	bcf	3,6	;RP1=0, select bank1
  4231     17C3  00DD               	movwf	??_UART_init^(0+128)
  4232     17C4  085D               	movf	??_UART_init^(0+128),w
  4233     17C5  0587               	andwf	7,f	;volatile
  4234     17C6                     l3131:
  4235                           
  4236                           ;main.c: 752:     TRISC |= 0x80;
  4237     17C6  1787               	bsf	7,7	;volatile
  4238                           
  4239                           ;main.c: 753:     TXSTA |= 0x24;
  4240     17C7  3024               	movlw	36
  4241     17C8  00DD               	movwf	??_UART_init^(0+128)
  4242     17C9  085D               	movf	??_UART_init^(0+128),w
  4243     17CA  0498               	iorwf	24,f	;volatile
  4244     17CB                     l3133:
  4245                           
  4246                           ;main.c: 754:     RCSTA |= 0x80;
  4247     17CB  1283               	bcf	3,5	;RP0=0, select bank0
  4248     17CC  1303               	bcf	3,6	;RP1=0, select bank0
  4249     17CD  1798               	bsf	24,7	;volatile
  4250     17CE                     l3135:
  4251                           
  4252                           ;main.c: 755:     RCSTA |= 0x10;
  4253     17CE  1618               	bsf	24,4	;volatile
  4254     17CF                     l3137:
  4255                           
  4256                           ;main.c: 758:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  4257     17CF  1683               	bsf	3,5	;RP0=1, select bank1
  4258     17D0  1303               	bcf	3,6	;RP1=0, select bank1
  4259     17D1  0859               	movf	UART_init@baudrate^(0+128),w
  4260     17D2  00DD               	movwf	??_UART_init^(0+128)
  4261     17D3  085A               	movf	(UART_init@baudrate+1)^(0+128),w
  4262     17D4  00DE               	movwf	(??_UART_init^(0+128)+1)
  4263     17D5  085B               	movf	(UART_init@baudrate+2)^(0+128),w
  4264     17D6  00DF               	movwf	(??_UART_init^(0+128)+2)
  4265     17D7  085C               	movf	(UART_init@baudrate+3)^(0+128),w
  4266     17D8  00E0               	movwf	(??_UART_init^(0+128)+3)
  4267     17D9  3006               	movlw	6
  4268     17DA                     u3225:
  4269     17DA  1003               	clrc
  4270     17DB  0DDD               	rlf	??_UART_init^(0+128),f
  4271     17DC  0DDE               	rlf	(??_UART_init^(0+128)+1),f
  4272     17DD  0DDF               	rlf	(??_UART_init^(0+128)+2),f
  4273     17DE  0DE0               	rlf	(??_UART_init^(0+128)+3),f
  4274     17DF                     u3220:
  4275     17DF  3EFF               	addlw	-1
  4276     17E0  1D03               	skipz
  4277     17E1  2FDA               	goto	u3225
  4278     17E2  0860               	movf	(??_UART_init+3)^(0+128),w
  4279     17E3  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4280     17E4  085F               	movf	(??_UART_init+2)^(0+128),w
  4281     17E5  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4282     17E6  085E               	movf	(??_UART_init+1)^(0+128),w
  4283     17E7  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4284     17E8  085D               	movf	??_UART_init^(0+128),w
  4285     17E9  00CA               	movwf	___aldiv@divisor^(0+128)
  4286     17EA  3001               	movlw	1
  4287     17EB  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4288     17EC  3031               	movlw	49
  4289     17ED  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4290     17EE  302D               	movlw	45
  4291     17EF  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4292     17F0  3000               	movlw	0
  4293     17F1  00CE               	movwf	___aldiv@dividend^(0+128)
  4294     17F2  120A  158A  2763  160A  118A  	fcall	___aldiv
  4295     17F7  1683               	bsf	3,5	;RP0=1, select bank1
  4296     17F8  1303               	bcf	3,6	;RP1=0, select bank1
  4297     17F9  084A               	movf	?___aldiv^(0+128),w
  4298     17FA  3EFF               	addlw	255
  4299     17FB  0099               	movwf	25	;volatile
  4300     17FC                     l3139:
  4301                           
  4302                           ;main.c: 761:     INTCON |= 0x80;
  4303     17FC  178B               	bsf	11,7	;volatile
  4304     17FD                     l3141:
  4305                           
  4306                           ;main.c: 763:     INTCON |= 0x40;
  4307     17FD  170B               	bsf	11,6	;volatile
  4308     17FE                     l3143:
  4309                           
  4310                           ;main.c: 765:     PIE1 |= 0x20;
  4311     17FE  168C               	bsf	12,5	;volatile
  4312     17FF                     l301:
  4313     17FF  0008               	return
  4314     1800                     __end_of_UART_init:
  4315                           
  4316                           	psect	text12
  4317     0A9E                     __ptext12:	
  4318 ;; *************** function _Fill *****************
  4319 ;; Defined at:
  4320 ;;		line 581 in file "main.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;  id              1    wreg     PTR unsigned char 
  4323 ;;		 -> PIC_ID(4), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  id              1   10[BANK1 ] PTR unsigned char 
  4326 ;;		 -> PIC_ID(4), 
  4327 ;;  length          2    8[BANK1 ] int 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4337 ;;      Params:         0       0       0       0       0
  4338 ;;      Locals:         0       0       3       0       0
  4339 ;;      Temps:          0       0       1       0       0
  4340 ;;      Totals:         0       0       4       0       0
  4341 ;;Total ram usage:        4 bytes
  4342 ;; Hardware stack levels used: 1
  4343 ;; Hardware stack levels required when called: 5
  4344 ;; This function calls:
  4345 ;;		_Length
  4346 ;; This function is called by:
  4347 ;;		_init_PIC
  4348 ;;		_read_NumPad
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352     0A9E                     _Fill:	
  4353                           ;psect for function _Fill
  4354                           
  4355                           
  4356                           ;incstack = 0
  4357                           ; Regs used in _Fill: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4358                           ;Fill@id stored from wreg
  4359     0A9E  1683               	bsf	3,5	;RP0=1, select bank1
  4360     0A9F  1303               	bcf	3,6	;RP1=0, select bank1
  4361     0AA0  00AA               	movwf	Fill@id^(0+128)
  4362     0AA1                     l3181:
  4363                           
  4364                           ;main.c: 581: void Fill(char* id);main.c: 582: {;main.c: 583:     int length = Length(id
      +                          );
  4365     0AA1  082A               	movf	Fill@id^(0+128),w
  4366     0AA2  00A0               	movwf	Length@str^(0+128)
  4367     0AA3  3000               	movlw	0
  4368     0AA4  00A1               	movwf	(Length@str+1)^(0+128)
  4369     0AA5  160A  118A  26C4  120A  158A  	fcall	_Length
  4370     0AAA  1683               	bsf	3,5	;RP0=1, select bank1
  4371     0AAB  1303               	bcf	3,6	;RP1=0, select bank1
  4372     0AAC  0821               	movf	(?_Length+1)^(0+128),w
  4373     0AAD  00A9               	movwf	(Fill@length+1)^(0+128)
  4374     0AAE  0820               	movf	?_Length^(0+128),w
  4375     0AAF  00A8               	movwf	Fill@length^(0+128)
  4376     0AB0                     l3183:
  4377                           
  4378                           ;main.c: 585:     if(length < 3)
  4379     0AB0  0829               	movf	(Fill@length+1)^(0+128),w
  4380     0AB1  3A80               	xorlw	128
  4381     0AB2  00FF               	movwf	btemp+1
  4382     0AB3  3080               	movlw	128
  4383     0AB4  027F               	subwf	btemp+1,w
  4384     0AB5  1D03               	skipz
  4385     0AB6  2AB9               	goto	u3245
  4386     0AB7  3003               	movlw	3
  4387     0AB8  0228               	subwf	Fill@length^(0+128),w
  4388     0AB9                     u3245:
  4389     0AB9  1803               	skipnc
  4390     0ABA  2ABC               	goto	u3241
  4391     0ABB  2ABD               	goto	u3240
  4392     0ABC                     u3241:
  4393     0ABC  2AFB               	goto	l262
  4394     0ABD                     u3240:
  4395     0ABD  2AEC               	goto	l3201
  4396     0ABE                     l3187:
  4397                           
  4398                           ;main.c: 590:                 id[3] = '\0';
  4399     0ABE  082A               	movf	Fill@id^(0+128),w
  4400     0ABF  3E03               	addlw	3
  4401     0AC0  0084               	movwf	4
  4402     0AC1  1383               	bcf	3,7	;select IRP bank0
  4403     0AC2  0180               	clrf	0
  4404                           
  4405                           ;main.c: 591:                 id[2] = id[0];
  4406     0AC3  082A               	movf	Fill@id^(0+128),w
  4407     0AC4  0084               	movwf	4
  4408     0AC5  0800               	movf	0,w
  4409     0AC6  00A7               	movwf	??_Fill^(0+128)
  4410     0AC7  082A               	movf	Fill@id^(0+128),w
  4411     0AC8  3E02               	addlw	2
  4412     0AC9  0084               	movwf	4
  4413     0ACA  0827               	movf	??_Fill^(0+128),w
  4414     0ACB  0080               	movwf	0
  4415     0ACC                     l3189:
  4416                           
  4417                           ;main.c: 592:                 id[1] = '0';
  4418     0ACC  0A2A               	incf	Fill@id^(0+128),w
  4419     0ACD  0084               	movwf	4
  4420     0ACE  3030               	movlw	48
  4421     0ACF  0080               	movwf	0
  4422     0AD0                     l3191:
  4423                           
  4424                           ;main.c: 593:                 id[0] = '0';
  4425     0AD0  082A               	movf	Fill@id^(0+128),w
  4426     0AD1  0084               	movwf	4
  4427     0AD2  3030               	movlw	48
  4428     0AD3  0080               	movwf	0
  4429                           
  4430                           ;main.c: 594:                 break;
  4431     0AD4  2AFB               	goto	l262
  4432     0AD5                     l3193:
  4433                           
  4434                           ;main.c: 596:                 id[3] = '\0';
  4435     0AD5  082A               	movf	Fill@id^(0+128),w
  4436     0AD6  3E03               	addlw	3
  4437     0AD7  0084               	movwf	4
  4438     0AD8  1383               	bcf	3,7	;select IRP bank0
  4439     0AD9  0180               	clrf	0
  4440                           
  4441                           ;main.c: 597:                 id[2] = id[1];
  4442     0ADA  0A2A               	incf	Fill@id^(0+128),w
  4443     0ADB  0084               	movwf	4
  4444     0ADC  0800               	movf	0,w
  4445     0ADD  00A7               	movwf	??_Fill^(0+128)
  4446     0ADE  082A               	movf	Fill@id^(0+128),w
  4447     0ADF  3E02               	addlw	2
  4448     0AE0  0084               	movwf	4
  4449     0AE1  0827               	movf	??_Fill^(0+128),w
  4450     0AE2  0080               	movwf	0
  4451     0AE3                     l3195:
  4452                           
  4453                           ;main.c: 598:                 id[1] = id[0];
  4454     0AE3  082A               	movf	Fill@id^(0+128),w
  4455     0AE4  0084               	movwf	4
  4456     0AE5  0800               	movf	0,w
  4457     0AE6  00A7               	movwf	??_Fill^(0+128)
  4458     0AE7  0A2A               	incf	Fill@id^(0+128),w
  4459     0AE8  0084               	movwf	4
  4460     0AE9  0827               	movf	??_Fill^(0+128),w
  4461     0AEA  0080               	movwf	0
  4462     0AEB  2AD0               	goto	l3191
  4463     0AEC                     l3201:
  4464                           
  4465                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4466                           ; Switch size 1, requested type "simple"
  4467                           ; Number of cases is 1, Range of values is 0 to 0
  4468                           ; switch strategies available:
  4469                           ; Name         Instructions Cycles
  4470                           ; simple_byte            4     3 (average)
  4471                           ; direct_byte           11     8 (fixed)
  4472                           ; jumptable            260     6 (fixed)
  4473                           ;	Chosen strategy is simple_byte
  4474     0AEC  1683               	bsf	3,5	;RP0=1, select bank1
  4475     0AED  1303               	bcf	3,6	;RP1=0, select bank1
  4476     0AEE  0829               	movf	(Fill@length+1)^(0+128),w
  4477     0AEF  3A00               	xorlw	0	; case 0
  4478     0AF0  1903               	skipnz
  4479     0AF1  2AF3               	goto	l4075
  4480     0AF2  2AFB               	goto	l262
  4481     0AF3                     l4075:
  4482                           
  4483                           ; Switch size 1, requested type "simple"
  4484                           ; Number of cases is 2, Range of values is 1 to 2
  4485                           ; switch strategies available:
  4486                           ; Name         Instructions Cycles
  4487                           ; simple_byte            7     4 (average)
  4488                           ; direct_byte           17    11 (fixed)
  4489                           ; jumptable            263     9 (fixed)
  4490                           ;	Chosen strategy is simple_byte
  4491     0AF3  0828               	movf	Fill@length^(0+128),w
  4492     0AF4  3A01               	xorlw	1	; case 1
  4493     0AF5  1903               	skipnz
  4494     0AF6  2ABE               	goto	l3187
  4495     0AF7  3A03               	xorlw	3	; case 2
  4496     0AF8  1903               	skipnz
  4497     0AF9  2AD5               	goto	l3193
  4498     0AFA  2AFB               	goto	l262
  4499     0AFB                     l262:
  4500     0AFB  0008               	return
  4501     0AFC                     __end_of_Fill:
  4502                           
  4503                           	psect	text13
  4504     05BA                     __ptext13:	
  4505 ;; *************** function _ConvertToString *****************
  4506 ;; Defined at:
  4507 ;;		line 414 in file "main.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  n               4   57[BANK1 ] long 
  4510 ;;  str             2   61[BANK1 ] PTR unsigned char 
  4511 ;;		 -> main@num_rand_s(16), PIC_ID(4), 
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  temp            2    0[BANK3 ] int 
  4514 ;;  i               2    4[BANK3 ] int 
  4515 ;;  j               2    2[BANK3 ] int 
  4516 ;;  n_cifre         1    6[BANK3 ] unsigned char 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      void 
  4519 ;; Registers used:
  4520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4526 ;;      Params:         0       0       6       0       0
  4527 ;;      Locals:         0       0       0       7       0
  4528 ;;      Temps:          0       0       3       0       0
  4529 ;;      Totals:         0       0       9       7       0
  4530 ;;Total ram usage:       16 bytes
  4531 ;; Hardware stack levels used: 1
  4532 ;; Hardware stack levels required when called: 6
  4533 ;; This function calls:
  4534 ;;		___aldiv
  4535 ;;		___almod
  4536 ;;		___lmul
  4537 ;;		_pow
  4538 ;; This function is called by:
  4539 ;;		_main
  4540 ;;		_init_PIC
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544     05BA                     _ConvertToString:	
  4545                           ;psect for function _ConvertToString
  4546                           
  4547     05BA                     l3771:	
  4548                           ;incstack = 0
  4549                           ; Regs used in _ConvertToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4550                           
  4551                           
  4552                           ;main.c: 414: void ConvertToString(long n, char* str);main.c: 415: {;main.c: 418:     in
      +                          t i = 0, j = 0;
  4553     05BA  1683               	bsf	3,5	;RP0=1, select bank3
  4554     05BB  1703               	bsf	3,6	;RP1=1, select bank3
  4555     05BC  01C9               	clrf	ConvertToString@i^(0+384)
  4556     05BD  01CA               	clrf	(ConvertToString@i+1)^(0+384)
  4557     05BE  01C7               	clrf	ConvertToString@j^(0+384)
  4558     05BF  01C8               	clrf	(ConvertToString@j+1)^(0+384)
  4559     05C0                     l3773:
  4560                           
  4561                           ;main.c: 419:     if(n < 0)
  4562     05C0  1683               	bsf	3,5	;RP0=1, select bank1
  4563     05C1  1303               	bcf	3,6	;RP1=0, select bank1
  4564     05C2  1FDC               	btfss	(ConvertToString@n+3)^(0+128),7
  4565     05C3  2DC5               	goto	u3941
  4566     05C4  2DC6               	goto	u3940
  4567     05C5                     u3941:
  4568     05C5  2DF4               	goto	l3781
  4569     05C6                     u3940:
  4570     05C6                     l3775:
  4571                           
  4572                           ;main.c: 420:     {;main.c: 421:         i = 1;
  4573     05C6  3001               	movlw	1
  4574     05C7  1683               	bsf	3,5	;RP0=1, select bank3
  4575     05C8  1703               	bsf	3,6	;RP1=1, select bank3
  4576     05C9  00C9               	movwf	ConvertToString@i^(0+384)
  4577     05CA  3000               	movlw	0
  4578     05CB  00CA               	movwf	(ConvertToString@i^(0+384)+1)
  4579     05CC                     l3777:
  4580                           
  4581                           ;main.c: 422:         str[0] = '-';
  4582     05CC  1683               	bsf	3,5	;RP0=1, select bank1
  4583     05CD  1303               	bcf	3,6	;RP1=0, select bank1
  4584     05CE  085D               	movf	ConvertToString@str^(0+128),w
  4585     05CF  0084               	movwf	4
  4586     05D0  1783               	bsf	3,7
  4587     05D1  1C5E               	btfss	(ConvertToString@str+1)^(0+128),0
  4588     05D2  1383               	bcf	3,7
  4589     05D3  302D               	movlw	45
  4590     05D4  0080               	movwf	0
  4591     05D5                     l3779:
  4592                           
  4593                           ;main.c: 423:         n *= -1;
  4594     05D5  30FF               	movlw	255
  4595     05D6  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  4596     05D7  30FF               	movlw	255
  4597     05D8  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  4598     05D9  30FF               	movlw	255
  4599     05DA  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  4600     05DB  30FF               	movlw	255
  4601     05DC  00A0               	movwf	___lmul@multiplier^(0+128)
  4602     05DD  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4603     05DE  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  4604     05DF  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4605     05E0  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  4606     05E1  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4607     05E2  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  4608     05E3  0859               	movf	ConvertToString@n^(0+128),w
  4609     05E4  00A4               	movwf	___lmul@multiplicand^(0+128)
  4610     05E5  120A  158A  20A9  120A  118A  	fcall	___lmul
  4611     05EA  1683               	bsf	3,5	;RP0=1, select bank1
  4612     05EB  1303               	bcf	3,6	;RP1=0, select bank1
  4613     05EC  0823               	movf	(?___lmul+3)^(0+128),w
  4614     05ED  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4615     05EE  0822               	movf	(?___lmul+2)^(0+128),w
  4616     05EF  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4617     05F0  0821               	movf	(?___lmul+1)^(0+128),w
  4618     05F1  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4619     05F2  0820               	movf	?___lmul^(0+128),w
  4620     05F3  00D9               	movwf	ConvertToString@n^(0+128)
  4621     05F4                     l3781:
  4622                           
  4623                           ;main.c: 426:     char n_cifre = 1;
  4624     05F4  1683               	bsf	3,5	;RP0=1, select bank3
  4625     05F5  1703               	bsf	3,6	;RP1=1, select bank3
  4626     05F6  01CB               	clrf	ConvertToString@n_cifre^(0+384)
  4627     05F7  0ACB               	incf	ConvertToString@n_cifre^(0+384),f
  4628                           
  4629                           ;main.c: 428:     while(n / pow(10, n_cifre))
  4630     05F8  2DFF               	goto	l3785
  4631     05F9                     l3783:
  4632                           
  4633                           ;main.c: 429:         n_cifre++;
  4634     05F9  3001               	movlw	1
  4635     05FA  00DF               	movwf	??_ConvertToString^(0+128)
  4636     05FB  085F               	movf	??_ConvertToString^(0+128),w
  4637     05FC  1683               	bsf	3,5	;RP0=1, select bank3
  4638     05FD  1703               	bsf	3,6	;RP1=1, select bank3
  4639     05FE  07CB               	addwf	ConvertToString@n_cifre^(0+384),f
  4640     05FF                     l3785:
  4641                           
  4642                           ;main.c: 428:     while(n / pow(10, n_cifre))
  4643     05FF  084B               	movf	ConvertToString@n_cifre^(0+384),w
  4644     0600  1683               	bsf	3,5	;RP0=1, select bank1
  4645     0601  1303               	bcf	3,6	;RP1=0, select bank1
  4646     0602  00C1               	movwf	pow@exp^(0+128)
  4647     0603  300A               	movlw	10
  4648     0604  160A  118A  2784  120A  118A  	fcall	_pow
  4649     0609  1683               	bsf	3,5	;RP0=1, select bank1
  4650     060A  1303               	bcf	3,6	;RP1=0, select bank1
  4651     060B  0841               	movf	?_pow^(0+128),w
  4652     060C  00CA               	movwf	___aldiv@divisor^(0+128)
  4653     060D  0842               	movf	(?_pow+1)^(0+128),w
  4654     060E  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4655     060F  3000               	movlw	0
  4656     0610  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4657     0611  30FF               	movlw	255
  4658     0612  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4659     0613  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4660     0614  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4661     0615  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4662     0616  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4663     0617  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4664     0618  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4665     0619  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4666     061A  0859               	movf	ConvertToString@n^(0+128),w
  4667     061B  00CE               	movwf	___aldiv@dividend^(0+128)
  4668     061C  120A  158A  2763  120A  118A  	fcall	___aldiv
  4669     0621  1683               	bsf	3,5	;RP0=1, select bank1
  4670     0622  1303               	bcf	3,6	;RP1=0, select bank1
  4671     0623  084D               	movf	(?___aldiv+3)^(0+128),w
  4672     0624  044C               	iorwf	(?___aldiv+2)^(0+128),w
  4673     0625  044B               	iorwf	(?___aldiv+1)^(0+128),w
  4674     0626  044A               	iorwf	?___aldiv^(0+128),w
  4675     0627  1D03               	skipz
  4676     0628  2E2A               	goto	u3951
  4677     0629  2E2B               	goto	u3950
  4678     062A                     u3951:
  4679     062A  2DF9               	goto	l3783
  4680     062B                     u3950:
  4681     062B  2EB8               	goto	l3797
  4682     062C                     l3787:
  4683                           
  4684                           ;main.c: 432:     {;main.c: 433:         int temp = pow(10, (char)(n_cifre - 1 - j));
  4685     062C  1683               	bsf	3,5	;RP0=1, select bank3
  4686     062D  1703               	bsf	3,6	;RP1=1, select bank3
  4687     062E  0847               	movf	ConvertToString@j^(0+384),w
  4688     062F  024B               	subwf	ConvertToString@n_cifre^(0+384),w
  4689     0630  3EFF               	addlw	255
  4690     0631  1683               	bsf	3,5	;RP0=1, select bank1
  4691     0632  1303               	bcf	3,6	;RP1=0, select bank1
  4692     0633  00C1               	movwf	pow@exp^(0+128)
  4693     0634  300A               	movlw	10
  4694     0635  160A  118A  2784  120A  118A  	fcall	_pow
  4695     063A  1683               	bsf	3,5	;RP0=1, select bank1
  4696     063B  1303               	bcf	3,6	;RP1=0, select bank1
  4697     063C  0842               	movf	(?_pow+1)^(0+128),w
  4698     063D  1683               	bsf	3,5	;RP0=1, select bank3
  4699     063E  1703               	bsf	3,6	;RP1=1, select bank3
  4700     063F  00C6               	movwf	(ConvertToString@temp+1)^(0+384)
  4701     0640  1683               	bsf	3,5	;RP0=1, select bank1
  4702     0641  1303               	bcf	3,6	;RP1=0, select bank1
  4703     0642  0841               	movf	?_pow^(0+128),w
  4704     0643  1683               	bsf	3,5	;RP0=1, select bank3
  4705     0644  1703               	bsf	3,6	;RP1=1, select bank3
  4706     0645  00C5               	movwf	ConvertToString@temp^(0+384)
  4707     0646                     l3789:
  4708                           
  4709                           ;main.c: 435:         str[i] = (char)(n/temp) + '0';
  4710     0646  0849               	movf	ConvertToString@i^(0+384),w
  4711     0647  1683               	bsf	3,5	;RP0=1, select bank1
  4712     0648  1303               	bcf	3,6	;RP1=0, select bank1
  4713     0649  075D               	addwf	ConvertToString@str^(0+128),w
  4714     064A  00E0               	movwf	(??_ConvertToString+1)^(0+128)
  4715     064B  085E               	movf	(ConvertToString@str+1)^(0+128),w
  4716     064C  00DF               	movwf	??_ConvertToString^(0+128)
  4717     064D  1803               	skipnc
  4718     064E  0ADF               	incf	??_ConvertToString^(0+128),f
  4719     064F  1683               	bsf	3,5	;RP0=1, select bank3
  4720     0650  1703               	bsf	3,6	;RP1=1, select bank3
  4721     0651  1FC9               	btfss	ConvertToString@i^(0+384),7
  4722     0652  2E56               	goto	u3960
  4723     0653  1683               	bsf	3,5	;RP0=1, select bank1
  4724     0654  1303               	bcf	3,6	;RP1=0, select bank1
  4725     0655  03DF               	decf	??_ConvertToString^(0+128),f
  4726     0656                     u3960:
  4727     0656  1683               	bsf	3,5	;RP0=1, select bank1
  4728     0657  1303               	bcf	3,6	;RP1=0, select bank1
  4729     0658  085F               	movf	??_ConvertToString^(0+128),w
  4730     0659  00E1               	movwf	((??_ConvertToString+1)^(0+128)+1)
  4731     065A  0860               	movf	(??_ConvertToString+1)^(0+128),w
  4732     065B  0084               	movwf	4
  4733     065C  1783               	bsf	3,7
  4734     065D  1C61               	btfss	(??_ConvertToString+2)^(0+128),0
  4735     065E  1383               	bcf	3,7
  4736     065F  1683               	bsf	3,5	;RP0=1, select bank3
  4737     0660  1703               	bsf	3,6	;RP1=1, select bank3
  4738     0661  0845               	movf	ConvertToString@temp^(0+384),w
  4739     0662  1683               	bsf	3,5	;RP0=1, select bank1
  4740     0663  1303               	bcf	3,6	;RP1=0, select bank1
  4741     0664  00CA               	movwf	___aldiv@divisor^(0+128)
  4742     0665  1683               	bsf	3,5	;RP0=1, select bank3
  4743     0666  1703               	bsf	3,6	;RP1=1, select bank3
  4744     0667  0846               	movf	(ConvertToString@temp+1)^(0+384),w
  4745     0668  1683               	bsf	3,5	;RP0=1, select bank1
  4746     0669  1303               	bcf	3,6	;RP1=0, select bank1
  4747     066A  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
  4748     066B  3000               	movlw	0
  4749     066C  1BCB               	btfsc	(___aldiv@divisor+1)^(0+128),7
  4750     066D  30FF               	movlw	255
  4751     066E  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
  4752     066F  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
  4753     0670  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4754     0671  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
  4755     0672  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4756     0673  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
  4757     0674  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4758     0675  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
  4759     0676  0859               	movf	ConvertToString@n^(0+128),w
  4760     0677  00CE               	movwf	___aldiv@dividend^(0+128)
  4761     0678  120A  158A  2763  120A  118A  	fcall	___aldiv
  4762     067D  1683               	bsf	3,5	;RP0=1, select bank1
  4763     067E  1303               	bcf	3,6	;RP1=0, select bank1
  4764     067F  084A               	movf	?___aldiv^(0+128),w
  4765     0680  3E30               	addlw	48
  4766     0681  0080               	movwf	0
  4767     0682                     l3791:
  4768                           
  4769                           ;main.c: 437:         n = n % temp;
  4770     0682  1683               	bsf	3,5	;RP0=1, select bank3
  4771     0683  1703               	bsf	3,6	;RP1=1, select bank3
  4772     0684  0845               	movf	ConvertToString@temp^(0+384),w
  4773     0685  1683               	bsf	3,5	;RP0=1, select bank1
  4774     0686  1303               	bcf	3,6	;RP1=0, select bank1
  4775     0687  00A0               	movwf	___almod@divisor^(0+128)
  4776     0688  1683               	bsf	3,5	;RP0=1, select bank3
  4777     0689  1703               	bsf	3,6	;RP1=1, select bank3
  4778     068A  0846               	movf	(ConvertToString@temp+1)^(0+384),w
  4779     068B  1683               	bsf	3,5	;RP0=1, select bank1
  4780     068C  1303               	bcf	3,6	;RP1=0, select bank1
  4781     068D  00A1               	movwf	(___almod@divisor+1)^(0+128)
  4782     068E  3000               	movlw	0
  4783     068F  1BA1               	btfsc	(___almod@divisor+1)^(0+128),7
  4784     0690  30FF               	movlw	255
  4785     0691  00A2               	movwf	(___almod@divisor+2)^(0+128)
  4786     0692  00A3               	movwf	(___almod@divisor+3)^(0+128)
  4787     0693  085C               	movf	(ConvertToString@n+3)^(0+128),w
  4788     0694  00A7               	movwf	(___almod@dividend+3)^(0+128)
  4789     0695  085B               	movf	(ConvertToString@n+2)^(0+128),w
  4790     0696  00A6               	movwf	(___almod@dividend+2)^(0+128)
  4791     0697  085A               	movf	(ConvertToString@n+1)^(0+128),w
  4792     0698  00A5               	movwf	(___almod@dividend+1)^(0+128)
  4793     0699  0859               	movf	ConvertToString@n^(0+128),w
  4794     069A  00A4               	movwf	___almod@dividend^(0+128)
  4795     069B  120A  158A  25AE  120A  118A  	fcall	___almod
  4796     06A0  1683               	bsf	3,5	;RP0=1, select bank1
  4797     06A1  1303               	bcf	3,6	;RP1=0, select bank1
  4798     06A2  0823               	movf	(?___almod+3)^(0+128),w
  4799     06A3  00DC               	movwf	(ConvertToString@n+3)^(0+128)
  4800     06A4  0822               	movf	(?___almod+2)^(0+128),w
  4801     06A5  00DB               	movwf	(ConvertToString@n+2)^(0+128)
  4802     06A6  0821               	movf	(?___almod+1)^(0+128),w
  4803     06A7  00DA               	movwf	(ConvertToString@n+1)^(0+128)
  4804     06A8  0820               	movf	?___almod^(0+128),w
  4805     06A9  00D9               	movwf	ConvertToString@n^(0+128)
  4806     06AA                     l3793:
  4807                           
  4808                           ;main.c: 438:         i++;
  4809     06AA  3001               	movlw	1
  4810     06AB  1683               	bsf	3,5	;RP0=1, select bank3
  4811     06AC  1703               	bsf	3,6	;RP1=1, select bank3
  4812     06AD  07C9               	addwf	ConvertToString@i^(0+384),f
  4813     06AE  1803               	skipnc
  4814     06AF  0ACA               	incf	(ConvertToString@i+1)^(0+384),f
  4815     06B0  3000               	movlw	0
  4816     06B1  07CA               	addwf	(ConvertToString@i+1)^(0+384),f
  4817     06B2                     l3795:
  4818                           
  4819                           ;main.c: 439:         j++;
  4820     06B2  3001               	movlw	1
  4821     06B3  07C7               	addwf	ConvertToString@j^(0+384),f
  4822     06B4  1803               	skipnc
  4823     06B5  0AC8               	incf	(ConvertToString@j+1)^(0+384),f
  4824     06B6  3000               	movlw	0
  4825     06B7  07C8               	addwf	(ConvertToString@j+1)^(0+384),f
  4826     06B8                     l3797:
  4827                           
  4828                           ;main.c: 431:     while(j < n_cifre)
  4829     06B8  1683               	bsf	3,5	;RP0=1, select bank3
  4830     06B9  1703               	bsf	3,6	;RP1=1, select bank3
  4831     06BA  0848               	movf	(ConvertToString@j+1)^(0+384),w
  4832     06BB  3A80               	xorlw	128
  4833     06BC  1683               	bsf	3,5	;RP0=1, select bank1
  4834     06BD  1303               	bcf	3,6	;RP1=0, select bank1
  4835     06BE  00DF               	movwf	??_ConvertToString^(0+128)
  4836     06BF  3080               	movlw	128
  4837     06C0  025F               	subwf	??_ConvertToString^(0+128),w
  4838     06C1  1D03               	skipz
  4839     06C2  2EC7               	goto	u3975
  4840     06C3  1683               	bsf	3,5	;RP0=1, select bank3
  4841     06C4  1703               	bsf	3,6	;RP1=1, select bank3
  4842     06C5  084B               	movf	ConvertToString@n_cifre^(0+384),w
  4843     06C6  0247               	subwf	ConvertToString@j^(0+384),w
  4844     06C7                     u3975:
  4845     06C7  1C03               	skipc
  4846     06C8  2ECA               	goto	u3971
  4847     06C9  2ECB               	goto	u3970
  4848     06CA                     u3971:
  4849     06CA  2E2C               	goto	l3787
  4850     06CB                     u3970:
  4851     06CB                     l3799:
  4852                           
  4853                           ;main.c: 442:     str[i] = '\0';
  4854     06CB  1683               	bsf	3,5	;RP0=1, select bank3
  4855     06CC  1703               	bsf	3,6	;RP1=1, select bank3
  4856     06CD  0849               	movf	ConvertToString@i^(0+384),w
  4857     06CE  1683               	bsf	3,5	;RP0=1, select bank1
  4858     06CF  1303               	bcf	3,6	;RP1=0, select bank1
  4859     06D0  075D               	addwf	ConvertToString@str^(0+128),w
  4860     06D1  00E0               	movwf	(??_ConvertToString+1)^(0+128)
  4861     06D2  085E               	movf	(ConvertToString@str+1)^(0+128),w
  4862     06D3  00DF               	movwf	??_ConvertToString^(0+128)
  4863     06D4  1803               	skipnc
  4864     06D5  0ADF               	incf	??_ConvertToString^(0+128),f
  4865     06D6  1683               	bsf	3,5	;RP0=1, select bank3
  4866     06D7  1703               	bsf	3,6	;RP1=1, select bank3
  4867     06D8  1FC9               	btfss	ConvertToString@i^(0+384),7
  4868     06D9  2EDD               	goto	u3980
  4869     06DA  1683               	bsf	3,5	;RP0=1, select bank1
  4870     06DB  1303               	bcf	3,6	;RP1=0, select bank1
  4871     06DC  03DF               	decf	??_ConvertToString^(0+128),f
  4872     06DD                     u3980:
  4873     06DD  1683               	bsf	3,5	;RP0=1, select bank1
  4874     06DE  1303               	bcf	3,6	;RP1=0, select bank1
  4875     06DF  085F               	movf	??_ConvertToString^(0+128),w
  4876     06E0  00E1               	movwf	((??_ConvertToString+1)^(0+128)+1)
  4877     06E1  0860               	movf	(??_ConvertToString+1)^(0+128),w
  4878     06E2  0084               	movwf	4
  4879     06E3  1783               	bsf	3,7
  4880     06E4  1C61               	btfss	(??_ConvertToString+2)^(0+128),0
  4881     06E5  1383               	bcf	3,7
  4882     06E6  0180               	clrf	0
  4883     06E7                     l206:
  4884     06E7  0008               	return
  4885     06E8                     __end_of_ConvertToString:
  4886                           
  4887                           	psect	text14
  4888     1784                     __ptext14:	
  4889 ;; *************** function _pow *****************
  4890 ;; Defined at:
  4891 ;;		line 403 in file "main.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  b               1    wreg     unsigned char 
  4894 ;;  exp             1   33[BANK1 ] unsigned char 
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  b               1   37[BANK1 ] unsigned char 
  4897 ;;  i               2   38[BANK1 ] int 
  4898 ;;  n               2   40[BANK1 ] int 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  2   33[BANK1 ] int 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0, pclath, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4908 ;;      Params:         0       0       2       0       0
  4909 ;;      Locals:         0       0       5       0       0
  4910 ;;      Temps:          0       0       2       0       0
  4911 ;;      Totals:         0       0       9       0       0
  4912 ;;Total ram usage:        9 bytes
  4913 ;; Hardware stack levels used: 1
  4914 ;; Hardware stack levels required when called: 5
  4915 ;; This function calls:
  4916 ;;		___wmul
  4917 ;; This function is called by:
  4918 ;;		_ConvertToString
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922     1784                     _pow:	
  4923                           ;psect for function _pow
  4924                           
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _pow: [wreg+status,2+status,0+pclath+cstack]
  4928                           ;pow@b stored from wreg
  4929     1784  1683               	bsf	3,5	;RP0=1, select bank1
  4930     1785  1303               	bcf	3,6	;RP1=0, select bank1
  4931     1786  00C5               	movwf	pow@b^(0+128)
  4932     1787                     l2957:
  4933                           
  4934                           ;main.c: 403: int pow(char b, char exp);main.c: 404: {;main.c: 405:     int n = 1;
  4935     1787  3001               	movlw	1
  4936     1788  00C8               	movwf	pow@n^(0+128)
  4937     1789  3000               	movlw	0
  4938     178A  00C9               	movwf	(pow@n^(0+128)+1)
  4939     178B                     l2959:
  4940                           
  4941                           ;main.c: 406:     for(int i = 0; i < exp; i++)
  4942     178B  01C6               	clrf	pow@i^(0+128)
  4943     178C  01C7               	clrf	(pow@i+1)^(0+128)
  4944     178D  2FAC               	goto	l2965
  4945     178E                     l2961:
  4946                           
  4947                           ;main.c: 407:     {;main.c: 408:         n *= b;
  4948     178E  1683               	bsf	3,5	;RP0=1, select bank1
  4949     178F  1303               	bcf	3,6	;RP1=0, select bank1
  4950     1790  0845               	movf	pow@b^(0+128),w
  4951     1791  00C3               	movwf	??_pow^(0+128)
  4952     1792  01C4               	clrf	(??_pow^(0+128)+1)
  4953     1793  0843               	movf	??_pow^(0+128),w
  4954     1794  00BB               	movwf	___wmul@multiplier^(0+128)
  4955     1795  0844               	movf	(??_pow+1)^(0+128),w
  4956     1796  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  4957     1797  0849               	movf	(pow@n+1)^(0+128),w
  4958     1798  00BE               	movwf	(___wmul@multiplicand+1)^(0+128)
  4959     1799  0848               	movf	pow@n^(0+128),w
  4960     179A  00BD               	movwf	___wmul@multiplicand^(0+128)
  4961     179B  160A  118A  269D  160A  118A  	fcall	___wmul
  4962     17A0  1683               	bsf	3,5	;RP0=1, select bank1
  4963     17A1  1303               	bcf	3,6	;RP1=0, select bank1
  4964     17A2  083C               	movf	(?___wmul+1)^(0+128),w
  4965     17A3  00C9               	movwf	(pow@n+1)^(0+128)
  4966     17A4  083B               	movf	?___wmul^(0+128),w
  4967     17A5  00C8               	movwf	pow@n^(0+128)
  4968     17A6                     l2963:
  4969                           
  4970                           ;main.c: 409:     }
  4971     17A6  3001               	movlw	1
  4972     17A7  07C6               	addwf	pow@i^(0+128),f
  4973     17A8  1803               	skipnc
  4974     17A9  0AC7               	incf	(pow@i+1)^(0+128),f
  4975     17AA  3000               	movlw	0
  4976     17AB  07C7               	addwf	(pow@i+1)^(0+128),f
  4977     17AC                     l2965:
  4978     17AC  0847               	movf	(pow@i+1)^(0+128),w
  4979     17AD  3A80               	xorlw	128
  4980     17AE  00C3               	movwf	??_pow^(0+128)
  4981     17AF  3080               	movlw	128
  4982     17B0  0243               	subwf	??_pow^(0+128),w
  4983     17B1  1D03               	skipz
  4984     17B2  2FB5               	goto	u2845
  4985     17B3  0841               	movf	pow@exp^(0+128),w
  4986     17B4  0246               	subwf	pow@i^(0+128),w
  4987     17B5                     u2845:
  4988     17B5  1C03               	skipc
  4989     17B6  2FB8               	goto	u2841
  4990     17B7  2FB9               	goto	u2840
  4991     17B8                     u2841:
  4992     17B8  2F8E               	goto	l2961
  4993     17B9                     u2840:
  4994     17B9                     l2967:
  4995                           
  4996                           ;main.c: 410:     return n;
  4997     17B9  1683               	bsf	3,5	;RP0=1, select bank1
  4998     17BA  1303               	bcf	3,6	;RP1=0, select bank1
  4999     17BB  0849               	movf	(pow@n+1)^(0+128),w
  5000     17BC  00C2               	movwf	(?_pow+1)^(0+128)
  5001     17BD  0848               	movf	pow@n^(0+128),w
  5002     17BE  00C1               	movwf	?_pow^(0+128)
  5003     17BF                     l196:
  5004     17BF  0008               	return
  5005     17C0                     __end_of_pow:
  5006                           
  5007                           	psect	text15
  5008     0DAE                     __ptext15:	
  5009 ;; *************** function ___almod *****************
  5010 ;; Defined at:
  5011 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\almod.c"
  5012 ;; Parameters:    Size  Location     Type
  5013 ;;  divisor         4    0[BANK1 ] long 
  5014 ;;  dividend        4    4[BANK1 ] long 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  sign            1   10[BANK1 ] unsigned char 
  5017 ;;  counter         1    9[BANK1 ] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  4    0[BANK1 ] long 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2, status,0
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5027 ;;      Params:         0       0       8       0       0
  5028 ;;      Locals:         0       0       2       0       0
  5029 ;;      Temps:          0       0       1       0       0
  5030 ;;      Totals:         0       0      11       0       0
  5031 ;;Total ram usage:       11 bytes
  5032 ;; Hardware stack levels used: 1
  5033 ;; Hardware stack levels required when called: 4
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_ConvertToString
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041     0DAE                     ___almod:	
  5042                           ;psect for function ___almod
  5043                           
  5044     0DAE                     l3035:	
  5045                           ;incstack = 0
  5046                           ; Regs used in ___almod: [wreg+status,2+status,0]
  5047                           
  5048     0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  5049     0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  5050     0DB0  01AA               	clrf	___almod@sign^(0+128)
  5051     0DB1                     l3037:
  5052     0DB1  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  5053     0DB2  2DB4               	goto	u3021
  5054     0DB3  2DB5               	goto	u3020
  5055     0DB4                     u3021:
  5056     0DB4  2DC2               	goto	l527
  5057     0DB5                     u3020:
  5058     0DB5                     l3039:
  5059     0DB5  09A4               	comf	___almod@dividend^(0+128),f
  5060     0DB6  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5061     0DB7  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5062     0DB8  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5063     0DB9  0AA4               	incf	___almod@dividend^(0+128),f
  5064     0DBA  1903               	skipnz
  5065     0DBB  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5066     0DBC  1903               	skipnz
  5067     0DBD  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5068     0DBE  1903               	skipnz
  5069     0DBF  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5070     0DC0  01AA               	clrf	___almod@sign^(0+128)
  5071     0DC1  0AAA               	incf	___almod@sign^(0+128),f
  5072     0DC2                     l527:
  5073     0DC2  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5074     0DC3  2DC5               	goto	u3031
  5075     0DC4  2DC6               	goto	u3030
  5076     0DC5                     u3031:
  5077     0DC5  2DD1               	goto	l3043
  5078     0DC6                     u3030:
  5079     0DC6                     l3041:
  5080     0DC6  09A0               	comf	___almod@divisor^(0+128),f
  5081     0DC7  09A1               	comf	(___almod@divisor+1)^(0+128),f
  5082     0DC8  09A2               	comf	(___almod@divisor+2)^(0+128),f
  5083     0DC9  09A3               	comf	(___almod@divisor+3)^(0+128),f
  5084     0DCA  0AA0               	incf	___almod@divisor^(0+128),f
  5085     0DCB  1903               	skipnz
  5086     0DCC  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  5087     0DCD  1903               	skipnz
  5088     0DCE  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  5089     0DCF  1903               	skipnz
  5090     0DD0  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  5091     0DD1                     l3043:
  5092     0DD1  0823               	movf	(___almod@divisor+3)^(0+128),w
  5093     0DD2  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  5094     0DD3  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  5095     0DD4  0420               	iorwf	___almod@divisor^(0+128),w
  5096     0DD5  1903               	skipnz
  5097     0DD6  2DD8               	goto	u3041
  5098     0DD7  2DD9               	goto	u3040
  5099     0DD8                     u3041:
  5100     0DD8  2E1C               	goto	l3059
  5101     0DD9                     u3040:
  5102     0DD9                     l3045:
  5103     0DD9  01A9               	clrf	___almod@counter^(0+128)
  5104     0DDA  0AA9               	incf	___almod@counter^(0+128),f
  5105     0DDB  2DE9               	goto	l3049
  5106     0DDC                     l3047:
  5107     0DDC  3001               	movlw	1
  5108     0DDD  00A8               	movwf	??___almod^(0+128)
  5109     0DDE                     u3055:
  5110     0DDE  1003               	clrc
  5111     0DDF  0DA0               	rlf	___almod@divisor^(0+128),f
  5112     0DE0  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  5113     0DE1  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  5114     0DE2  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  5115     0DE3  0BA8               	decfsz	??___almod^(0+128),f
  5116     0DE4  2DDE               	goto	u3055
  5117     0DE5  3001               	movlw	1
  5118     0DE6  00A8               	movwf	??___almod^(0+128)
  5119     0DE7  0828               	movf	??___almod^(0+128),w
  5120     0DE8  07A9               	addwf	___almod@counter^(0+128),f
  5121     0DE9                     l3049:
  5122     0DE9  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  5123     0DEA  2DEC               	goto	u3061
  5124     0DEB  2DED               	goto	u3060
  5125     0DEC                     u3061:
  5126     0DEC  2DDC               	goto	l3047
  5127     0DED                     u3060:
  5128     0DED                     l3051:
  5129     0DED  0823               	movf	(___almod@divisor+3)^(0+128),w
  5130     0DEE  0227               	subwf	(___almod@dividend+3)^(0+128),w
  5131     0DEF  1D03               	skipz
  5132     0DF0  2DFB               	goto	u3075
  5133     0DF1  0822               	movf	(___almod@divisor+2)^(0+128),w
  5134     0DF2  0226               	subwf	(___almod@dividend+2)^(0+128),w
  5135     0DF3  1D03               	skipz
  5136     0DF4  2DFB               	goto	u3075
  5137     0DF5  0821               	movf	(___almod@divisor+1)^(0+128),w
  5138     0DF6  0225               	subwf	(___almod@dividend+1)^(0+128),w
  5139     0DF7  1D03               	skipz
  5140     0DF8  2DFB               	goto	u3075
  5141     0DF9  0820               	movf	___almod@divisor^(0+128),w
  5142     0DFA  0224               	subwf	___almod@dividend^(0+128),w
  5143     0DFB                     u3075:
  5144     0DFB  1C03               	skipc
  5145     0DFC  2DFE               	goto	u3071
  5146     0DFD  2DFF               	goto	u3070
  5147     0DFE                     u3071:
  5148     0DFE  2E0D               	goto	l3055
  5149     0DFF                     u3070:
  5150     0DFF                     l3053:
  5151     0DFF  0820               	movf	___almod@divisor^(0+128),w
  5152     0E00  02A4               	subwf	___almod@dividend^(0+128),f
  5153     0E01  0821               	movf	(___almod@divisor+1)^(0+128),w
  5154     0E02  1C03               	skipc
  5155     0E03  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  5156     0E04  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  5157     0E05  0822               	movf	(___almod@divisor+2)^(0+128),w
  5158     0E06  1C03               	skipc
  5159     0E07  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  5160     0E08  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  5161     0E09  0823               	movf	(___almod@divisor+3)^(0+128),w
  5162     0E0A  1C03               	skipc
  5163     0E0B  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  5164     0E0C  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  5165     0E0D                     l3055:
  5166     0E0D  3001               	movlw	1
  5167     0E0E                     u3085:
  5168     0E0E  1003               	clrc
  5169     0E0F  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  5170     0E10  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  5171     0E11  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  5172     0E12  0CA0               	rrf	___almod@divisor^(0+128),f
  5173     0E13  3EFF               	addlw	-1
  5174     0E14  1D03               	skipz
  5175     0E15  2E0E               	goto	u3085
  5176     0E16                     l3057:
  5177     0E16  3001               	movlw	1
  5178     0E17  02A9               	subwf	___almod@counter^(0+128),f
  5179     0E18  1D03               	btfss	3,2
  5180     0E19  2E1B               	goto	u3091
  5181     0E1A  2E1C               	goto	u3090
  5182     0E1B                     u3091:
  5183     0E1B  2DED               	goto	l3051
  5184     0E1C                     u3090:
  5185     0E1C                     l3059:
  5186     0E1C  082A               	movf	___almod@sign^(0+128),w
  5187     0E1D  1903               	btfsc	3,2
  5188     0E1E  2E20               	goto	u3101
  5189     0E1F  2E21               	goto	u3100
  5190     0E20                     u3101:
  5191     0E20  2E2C               	goto	l3063
  5192     0E21                     u3100:
  5193     0E21                     l3061:
  5194     0E21  09A4               	comf	___almod@dividend^(0+128),f
  5195     0E22  09A5               	comf	(___almod@dividend+1)^(0+128),f
  5196     0E23  09A6               	comf	(___almod@dividend+2)^(0+128),f
  5197     0E24  09A7               	comf	(___almod@dividend+3)^(0+128),f
  5198     0E25  0AA4               	incf	___almod@dividend^(0+128),f
  5199     0E26  1903               	skipnz
  5200     0E27  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  5201     0E28  1903               	skipnz
  5202     0E29  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  5203     0E2A  1903               	skipnz
  5204     0E2B  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  5205     0E2C                     l3063:
  5206     0E2C  0827               	movf	(___almod@dividend+3)^(0+128),w
  5207     0E2D  00A3               	movwf	(?___almod+3)^(0+128)
  5208     0E2E  0826               	movf	(___almod@dividend+2)^(0+128),w
  5209     0E2F  00A2               	movwf	(?___almod+2)^(0+128)
  5210     0E30  0825               	movf	(___almod@dividend+1)^(0+128),w
  5211     0E31  00A1               	movwf	(?___almod+1)^(0+128)
  5212     0E32  0824               	movf	___almod@dividend^(0+128),w
  5213     0E33  00A0               	movwf	?___almod^(0+128)
  5214     0E34                     l537:
  5215     0E34  0008               	return
  5216     0E35                     __end_of___almod:
  5217                           
  5218                           	psect	text16
  5219     0F63                     __ptext16:	
  5220 ;; *************** function ___aldiv *****************
  5221 ;; Defined at:
  5222 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  divisor         4   42[BANK1 ] long 
  5225 ;;  dividend        4   46[BANK1 ] long 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  quotient        4   53[BANK1 ] long 
  5228 ;;  sign            1   52[BANK1 ] unsigned char 
  5229 ;;  counter         1   51[BANK1 ] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  4   42[BANK1 ] long 
  5232 ;; Registers used:
  5233 ;;		wreg, status,2, status,0
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5239 ;;      Params:         0       0       8       0       0
  5240 ;;      Locals:         0       0       6       0       0
  5241 ;;      Temps:          0       0       1       0       0
  5242 ;;      Totals:         0       0      15       0       0
  5243 ;;Total ram usage:       15 bytes
  5244 ;; Hardware stack levels used: 1
  5245 ;; Hardware stack levels required when called: 4
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_ConvertToString
  5250 ;;		_UART_init
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254     0F63                     ___aldiv:	
  5255                           ;psect for function ___aldiv
  5256                           
  5257     0F63                     l2995:	
  5258                           ;incstack = 0
  5259                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5260                           
  5261     0F63  1683               	bsf	3,5	;RP0=1, select bank1
  5262     0F64  1303               	bcf	3,6	;RP1=0, select bank1
  5263     0F65  01D4               	clrf	___aldiv@sign^(0+128)
  5264     0F66                     l2997:
  5265     0F66  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5266     0F67  2F69               	goto	u2921
  5267     0F68  2F6A               	goto	u2920
  5268     0F69                     u2921:
  5269     0F69  2F77               	goto	l514
  5270     0F6A                     u2920:
  5271     0F6A                     l2999:
  5272     0F6A  09CA               	comf	___aldiv@divisor^(0+128),f
  5273     0F6B  09CB               	comf	(___aldiv@divisor+1)^(0+128),f
  5274     0F6C  09CC               	comf	(___aldiv@divisor+2)^(0+128),f
  5275     0F6D  09CD               	comf	(___aldiv@divisor+3)^(0+128),f
  5276     0F6E  0ACA               	incf	___aldiv@divisor^(0+128),f
  5277     0F6F  1903               	skipnz
  5278     0F70  0ACB               	incf	(___aldiv@divisor+1)^(0+128),f
  5279     0F71  1903               	skipnz
  5280     0F72  0ACC               	incf	(___aldiv@divisor+2)^(0+128),f
  5281     0F73  1903               	skipnz
  5282     0F74  0ACD               	incf	(___aldiv@divisor+3)^(0+128),f
  5283     0F75  01D4               	clrf	___aldiv@sign^(0+128)
  5284     0F76  0AD4               	incf	___aldiv@sign^(0+128),f
  5285     0F77                     l514:
  5286     0F77  1FD1               	btfss	(___aldiv@dividend+3)^(0+128),7
  5287     0F78  2F7A               	goto	u2931
  5288     0F79  2F7B               	goto	u2930
  5289     0F7A                     u2931:
  5290     0F7A  2F8A               	goto	l3005
  5291     0F7B                     u2930:
  5292     0F7B                     l3001:
  5293     0F7B  09CE               	comf	___aldiv@dividend^(0+128),f
  5294     0F7C  09CF               	comf	(___aldiv@dividend+1)^(0+128),f
  5295     0F7D  09D0               	comf	(___aldiv@dividend+2)^(0+128),f
  5296     0F7E  09D1               	comf	(___aldiv@dividend+3)^(0+128),f
  5297     0F7F  0ACE               	incf	___aldiv@dividend^(0+128),f
  5298     0F80  1903               	skipnz
  5299     0F81  0ACF               	incf	(___aldiv@dividend+1)^(0+128),f
  5300     0F82  1903               	skipnz
  5301     0F83  0AD0               	incf	(___aldiv@dividend+2)^(0+128),f
  5302     0F84  1903               	skipnz
  5303     0F85  0AD1               	incf	(___aldiv@dividend+3)^(0+128),f
  5304     0F86                     l3003:
  5305     0F86  3001               	movlw	1
  5306     0F87  00D2               	movwf	??___aldiv^(0+128)
  5307     0F88  0852               	movf	??___aldiv^(0+128),w
  5308     0F89  06D4               	xorwf	___aldiv@sign^(0+128),f
  5309     0F8A                     l3005:
  5310     0F8A  3000               	movlw	0
  5311     0F8B  00D8               	movwf	(___aldiv@quotient+3)^(0+128)
  5312     0F8C  3000               	movlw	0
  5313     0F8D  00D7               	movwf	(___aldiv@quotient+2)^(0+128)
  5314     0F8E  3000               	movlw	0
  5315     0F8F  00D6               	movwf	(___aldiv@quotient+1)^(0+128)
  5316     0F90  3000               	movlw	0
  5317     0F91  00D5               	movwf	___aldiv@quotient^(0+128)
  5318     0F92                     l3007:
  5319     0F92  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5320     0F93  044C               	iorwf	(___aldiv@divisor+2)^(0+128),w
  5321     0F94  044B               	iorwf	(___aldiv@divisor+1)^(0+128),w
  5322     0F95  044A               	iorwf	___aldiv@divisor^(0+128),w
  5323     0F96  1903               	skipnz
  5324     0F97  2F99               	goto	u2941
  5325     0F98  2F9A               	goto	u2940
  5326     0F99                     u2941:
  5327     0F99  2FE7               	goto	l3027
  5328     0F9A                     u2940:
  5329     0F9A                     l3009:
  5330     0F9A  01D3               	clrf	___aldiv@counter^(0+128)
  5331     0F9B  0AD3               	incf	___aldiv@counter^(0+128),f
  5332     0F9C  2FAA               	goto	l3013
  5333     0F9D                     l3011:
  5334     0F9D  3001               	movlw	1
  5335     0F9E  00D2               	movwf	??___aldiv^(0+128)
  5336     0F9F                     u2955:
  5337     0F9F  1003               	clrc
  5338     0FA0  0DCA               	rlf	___aldiv@divisor^(0+128),f
  5339     0FA1  0DCB               	rlf	(___aldiv@divisor+1)^(0+128),f
  5340     0FA2  0DCC               	rlf	(___aldiv@divisor+2)^(0+128),f
  5341     0FA3  0DCD               	rlf	(___aldiv@divisor+3)^(0+128),f
  5342     0FA4  0BD2               	decfsz	??___aldiv^(0+128),f
  5343     0FA5  2F9F               	goto	u2955
  5344     0FA6  3001               	movlw	1
  5345     0FA7  00D2               	movwf	??___aldiv^(0+128)
  5346     0FA8  0852               	movf	??___aldiv^(0+128),w
  5347     0FA9  07D3               	addwf	___aldiv@counter^(0+128),f
  5348     0FAA                     l3013:
  5349     0FAA  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  5350     0FAB  2FAD               	goto	u2961
  5351     0FAC  2FAE               	goto	u2960
  5352     0FAD                     u2961:
  5353     0FAD  2F9D               	goto	l3011
  5354     0FAE                     u2960:
  5355     0FAE                     l3015:
  5356     0FAE  3001               	movlw	1
  5357     0FAF  00D2               	movwf	??___aldiv^(0+128)
  5358     0FB0                     u2975:
  5359     0FB0  1003               	clrc
  5360     0FB1  0DD5               	rlf	___aldiv@quotient^(0+128),f
  5361     0FB2  0DD6               	rlf	(___aldiv@quotient+1)^(0+128),f
  5362     0FB3  0DD7               	rlf	(___aldiv@quotient+2)^(0+128),f
  5363     0FB4  0DD8               	rlf	(___aldiv@quotient+3)^(0+128),f
  5364     0FB5  0BD2               	decfsz	??___aldiv^(0+128),f
  5365     0FB6  2FB0               	goto	u2975
  5366     0FB7                     l3017:
  5367     0FB7  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5368     0FB8  0251               	subwf	(___aldiv@dividend+3)^(0+128),w
  5369     0FB9  1D03               	skipz
  5370     0FBA  2FC5               	goto	u2985
  5371     0FBB  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5372     0FBC  0250               	subwf	(___aldiv@dividend+2)^(0+128),w
  5373     0FBD  1D03               	skipz
  5374     0FBE  2FC5               	goto	u2985
  5375     0FBF  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5376     0FC0  024F               	subwf	(___aldiv@dividend+1)^(0+128),w
  5377     0FC1  1D03               	skipz
  5378     0FC2  2FC5               	goto	u2985
  5379     0FC3  084A               	movf	___aldiv@divisor^(0+128),w
  5380     0FC4  024E               	subwf	___aldiv@dividend^(0+128),w
  5381     0FC5                     u2985:
  5382     0FC5  1C03               	skipc
  5383     0FC6  2FC8               	goto	u2981
  5384     0FC7  2FC9               	goto	u2980
  5385     0FC8                     u2981:
  5386     0FC8  2FD8               	goto	l3023
  5387     0FC9                     u2980:
  5388     0FC9                     l3019:
  5389     0FC9  084A               	movf	___aldiv@divisor^(0+128),w
  5390     0FCA  02CE               	subwf	___aldiv@dividend^(0+128),f
  5391     0FCB  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  5392     0FCC  1C03               	skipc
  5393     0FCD  0F4B               	incfsz	(___aldiv@divisor+1)^(0+128),w
  5394     0FCE  02CF               	subwf	(___aldiv@dividend+1)^(0+128),f
  5395     0FCF  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  5396     0FD0  1C03               	skipc
  5397     0FD1  0F4C               	incfsz	(___aldiv@divisor+2)^(0+128),w
  5398     0FD2  02D0               	subwf	(___aldiv@dividend+2)^(0+128),f
  5399     0FD3  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  5400     0FD4  1C03               	skipc
  5401     0FD5  0F4D               	incfsz	(___aldiv@divisor+3)^(0+128),w
  5402     0FD6  02D1               	subwf	(___aldiv@dividend+3)^(0+128),f
  5403     0FD7                     l3021:
  5404     0FD7  1455               	bsf	___aldiv@quotient^(0+128),0
  5405     0FD8                     l3023:
  5406     0FD8  3001               	movlw	1
  5407     0FD9                     u2995:
  5408     0FD9  1003               	clrc
  5409     0FDA  0CCD               	rrf	(___aldiv@divisor+3)^(0+128),f
  5410     0FDB  0CCC               	rrf	(___aldiv@divisor+2)^(0+128),f
  5411     0FDC  0CCB               	rrf	(___aldiv@divisor+1)^(0+128),f
  5412     0FDD  0CCA               	rrf	___aldiv@divisor^(0+128),f
  5413     0FDE  3EFF               	addlw	-1
  5414     0FDF  1D03               	skipz
  5415     0FE0  2FD9               	goto	u2995
  5416     0FE1                     l3025:
  5417     0FE1  3001               	movlw	1
  5418     0FE2  02D3               	subwf	___aldiv@counter^(0+128),f
  5419     0FE3  1D03               	btfss	3,2
  5420     0FE4  2FE6               	goto	u3001
  5421     0FE5  2FE7               	goto	u3000
  5422     0FE6                     u3001:
  5423     0FE6  2FAE               	goto	l3015
  5424     0FE7                     u3000:
  5425     0FE7                     l3027:
  5426     0FE7  0854               	movf	___aldiv@sign^(0+128),w
  5427     0FE8  1903               	btfsc	3,2
  5428     0FE9  2FEB               	goto	u3011
  5429     0FEA  2FEC               	goto	u3010
  5430     0FEB                     u3011:
  5431     0FEB  2FF7               	goto	l3031
  5432     0FEC                     u3010:
  5433     0FEC                     l3029:
  5434     0FEC  09D5               	comf	___aldiv@quotient^(0+128),f
  5435     0FED  09D6               	comf	(___aldiv@quotient+1)^(0+128),f
  5436     0FEE  09D7               	comf	(___aldiv@quotient+2)^(0+128),f
  5437     0FEF  09D8               	comf	(___aldiv@quotient+3)^(0+128),f
  5438     0FF0  0AD5               	incf	___aldiv@quotient^(0+128),f
  5439     0FF1  1903               	skipnz
  5440     0FF2  0AD6               	incf	(___aldiv@quotient+1)^(0+128),f
  5441     0FF3  1903               	skipnz
  5442     0FF4  0AD7               	incf	(___aldiv@quotient+2)^(0+128),f
  5443     0FF5  1903               	skipnz
  5444     0FF6  0AD8               	incf	(___aldiv@quotient+3)^(0+128),f
  5445     0FF7                     l3031:
  5446     0FF7  0858               	movf	(___aldiv@quotient+3)^(0+128),w
  5447     0FF8  00CD               	movwf	(?___aldiv+3)^(0+128)
  5448     0FF9  0857               	movf	(___aldiv@quotient+2)^(0+128),w
  5449     0FFA  00CC               	movwf	(?___aldiv+2)^(0+128)
  5450     0FFB  0856               	movf	(___aldiv@quotient+1)^(0+128),w
  5451     0FFC  00CB               	movwf	(?___aldiv+1)^(0+128)
  5452     0FFD  0855               	movf	___aldiv@quotient^(0+128),w
  5453     0FFE  00CA               	movwf	?___aldiv^(0+128)
  5454     0FFF                     l524:
  5455     0FFF  0008               	return
  5456     1000                     __end_of___aldiv:
  5457                           
  5458                           	psect	text17
  5459     0D2F                     __ptext17:	
  5460 ;; *************** function _UART_TxString *****************
  5461 ;; Defined at:
  5462 ;;		line 778 in file "main.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;  str             1    wreg     PTR const unsigned char 
  5465 ;;		 -> packet(15), 
  5466 ;;  is_ACK          1   33[BANK1 ] unsigned char 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  str             1   37[BANK1 ] PTR const unsigned char 
  5469 ;;		 -> packet(15), 
  5470 ;;  n               2   35[BANK1 ] unsigned int 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5480 ;;      Params:         0       0       1       0       0
  5481 ;;      Locals:         0       0       3       0       0
  5482 ;;      Temps:          0       0       1       0       0
  5483 ;;      Totals:         0       0       5       0       0
  5484 ;;Total ram usage:        5 bytes
  5485 ;; Hardware stack levels used: 1
  5486 ;; Hardware stack levels required when called: 6
  5487 ;; This function calls:
  5488 ;;		_UART_TxChar
  5489 ;;		___awmod
  5490 ;;		___wmul
  5491 ;;		_rand
  5492 ;;		_srand
  5493 ;; This function is called by:
  5494 ;;		_main
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498     0D2F                     _UART_TxString:	
  5499                           ;psect for function _UART_TxString
  5500                           
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5504                           ;UART_TxString@str stored from wreg
  5505     0D2F  1683               	bsf	3,5	;RP0=1, select bank1
  5506     0D30  1303               	bcf	3,6	;RP1=0, select bank1
  5507     0D31  00C5               	movwf	UART_TxString@str^(0+128)
  5508     0D32                     l3457:
  5509                           
  5510                           ;main.c: 778: void UART_TxString(const char *str, char is_ACK);main.c: 779: {;main.c: 78
      +                          0:     unsigned int n = 0;
  5511     0D32  01C3               	clrf	UART_TxString@n^(0+128)
  5512     0D33  01C4               	clrf	(UART_TxString@n+1)^(0+128)
  5513                           
  5514                           ;main.c: 782:     while(str[n] != '\0')
  5515     0D34  2D48               	goto	l3463
  5516     0D35                     l3459:
  5517                           
  5518                           ;main.c: 783:     {;main.c: 784:         UART_TxChar(str[n]);
  5519     0D35  0843               	movf	UART_TxString@n^(0+128),w
  5520     0D36  0745               	addwf	UART_TxString@str^(0+128),w
  5521     0D37  00C2               	movwf	??_UART_TxString^(0+128)
  5522     0D38  0842               	movf	??_UART_TxString^(0+128),w
  5523     0D39  0084               	movwf	4
  5524     0D3A  0800               	movf	0,w
  5525     0D3B  120A  118A  27E2  120A  158A  	fcall	_UART_TxChar
  5526     0D40                     l3461:
  5527                           
  5528                           ;main.c: 785:         n++;
  5529     0D40  3001               	movlw	1
  5530     0D41  1683               	bsf	3,5	;RP0=1, select bank1
  5531     0D42  1303               	bcf	3,6	;RP1=0, select bank1
  5532     0D43  07C3               	addwf	UART_TxString@n^(0+128),f
  5533     0D44  1803               	skipnc
  5534     0D45  0AC4               	incf	(UART_TxString@n+1)^(0+128),f
  5535     0D46  3000               	movlw	0
  5536     0D47  07C4               	addwf	(UART_TxString@n+1)^(0+128),f
  5537     0D48                     l3463:
  5538                           
  5539                           ;main.c: 782:     while(str[n] != '\0')
  5540     0D48  0843               	movf	UART_TxString@n^(0+128),w
  5541     0D49  0745               	addwf	UART_TxString@str^(0+128),w
  5542     0D4A  00C2               	movwf	??_UART_TxString^(0+128)
  5543     0D4B  0842               	movf	??_UART_TxString^(0+128),w
  5544     0D4C  0084               	movwf	4
  5545     0D4D  1783               	bsf	3,7	;select IRP bank2
  5546     0D4E  0800               	movf	0,w
  5547     0D4F  1D03               	btfss	3,2
  5548     0D50  2D52               	goto	u3681
  5549     0D51  2D53               	goto	u3680
  5550     0D52                     u3681:
  5551     0D52  2D35               	goto	l3459
  5552     0D53                     u3680:
  5553     0D53                     l3465:
  5554                           
  5555                           ;main.c: 788:     if(is_ACK == 0)
  5556     0D53  0841               	movf	UART_TxString@is_ACK^(0+128),w
  5557     0D54  1D03               	btfss	3,2
  5558     0D55  2D57               	goto	u3691
  5559     0D56  2D58               	goto	u3690
  5560     0D57                     u3691:
  5561     0D57  2DAD               	goto	l314
  5562     0D58                     u3690:
  5563     0D58                     l3467:
  5564                           
  5565                           ;main.c: 789:     {;main.c: 792:         srand(milliseconds);
  5566     0D58  1283               	bcf	3,5	;RP0=0, select bank0
  5567     0D59  1303               	bcf	3,6	;RP1=0, select bank0
  5568     0D5A  0841               	movf	_milliseconds+1,w
  5569     0D5B  1683               	bsf	3,5	;RP0=1, select bank1
  5570     0D5C  1303               	bcf	3,6	;RP1=0, select bank1
  5571     0D5D  00A1               	movwf	(srand@x+1)^(0+128)
  5572     0D5E  1283               	bcf	3,5	;RP0=0, select bank0
  5573     0D5F  1303               	bcf	3,6	;RP1=0, select bank0
  5574     0D60  0840               	movf	_milliseconds,w
  5575     0D61  1683               	bsf	3,5	;RP0=1, select bank1
  5576     0D62  1303               	bcf	3,6	;RP1=0, select bank1
  5577     0D63  00A0               	movwf	srand@x^(0+128)
  5578     0D64  120A  158A  200D  120A  158A  	fcall	_srand
  5579     0D69                     l3469:
  5580                           
  5581                           ;main.c: 793:         milliseconds = 0;
  5582     0D69  3000               	movlw	0
  5583     0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  5584     0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  5585     0D6C  00C3               	movwf	_milliseconds+3
  5586     0D6D  3000               	movlw	0
  5587     0D6E  00C2               	movwf	_milliseconds+2
  5588     0D6F  3000               	movlw	0
  5589     0D70  00C1               	movwf	_milliseconds+1
  5590     0D71  3000               	movlw	0
  5591     0D72  00C0               	movwf	_milliseconds
  5592     0D73                     l3471:
  5593                           
  5594                           ;main.c: 795:         seconds = ((rand()%10)+5) * 250;
  5595     0D73  300A               	movlw	10
  5596     0D74  1683               	bsf	3,5	;RP0=1, select bank1
  5597     0D75  1303               	bcf	3,6	;RP1=0, select bank1
  5598     0D76  00B4               	movwf	___awmod@divisor^(0+128)
  5599     0D77  3000               	movlw	0
  5600     0D78  00B5               	movwf	(___awmod@divisor^(0+128)+1)
  5601     0D79  120A  158A  23D2  120A  158A  	fcall	_rand
  5602     0D7E  1683               	bsf	3,5	;RP0=1, select bank1
  5603     0D7F  1303               	bcf	3,6	;RP1=0, select bank1
  5604     0D80  082E               	movf	(?_rand+1)^(0+128),w
  5605     0D81  00B7               	movwf	(___awmod@dividend+1)^(0+128)
  5606     0D82  082D               	movf	?_rand^(0+128),w
  5607     0D83  00B6               	movwf	___awmod@dividend^(0+128)
  5608     0D84  120A  158A  2243  120A  158A  	fcall	___awmod
  5609     0D89  1683               	bsf	3,5	;RP0=1, select bank1
  5610     0D8A  1303               	bcf	3,6	;RP1=0, select bank1
  5611     0D8B  0834               	movf	?___awmod^(0+128),w
  5612     0D8C  3E05               	addlw	5
  5613     0D8D  00BB               	movwf	___wmul@multiplier^(0+128)
  5614     0D8E  0835               	movf	(?___awmod+1)^(0+128),w
  5615     0D8F  1803               	skipnc
  5616     0D90  3E01               	addlw	1
  5617     0D91  3E00               	addlw	0
  5618     0D92  00BC               	movwf	(___wmul@multiplier+1)^(0+128)
  5619     0D93  30FA               	movlw	250
  5620     0D94  00BD               	movwf	___wmul@multiplicand^(0+128)
  5621     0D95  3000               	movlw	0
  5622     0D96  00BE               	movwf	(___wmul@multiplicand^(0+128)+1)
  5623     0D97  160A  118A  269D  120A  158A  	fcall	___wmul
  5624     0D9C  1683               	bsf	3,5	;RP0=1, select bank1
  5625     0D9D  1303               	bcf	3,6	;RP1=0, select bank1
  5626     0D9E  083B               	movf	?___wmul^(0+128),w
  5627     0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  5628     0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  5629     0DA1  00BC               	movwf	_seconds
  5630     0DA2  1683               	bsf	3,5	;RP0=1, select bank1
  5631     0DA3  1303               	bcf	3,6	;RP1=0, select bank1
  5632     0DA4  083C               	movf	(?___wmul+1)^(0+128),w
  5633     0DA5  1283               	bcf	3,5	;RP0=0, select bank0
  5634     0DA6  1303               	bcf	3,6	;RP1=0, select bank0
  5635     0DA7  00BD               	movwf	_seconds+1
  5636     0DA8  3000               	movlw	0
  5637     0DA9  1BBD               	btfsc	_seconds+1,7
  5638     0DAA  30FF               	movlw	255
  5639     0DAB  00BE               	movwf	_seconds+2
  5640     0DAC  00BF               	movwf	_seconds+3
  5641     0DAD                     l314:
  5642     0DAD  0008               	return
  5643     0DAE                     __end_of_UART_TxString:
  5644                           
  5645                           	psect	text18
  5646     080D                     __ptext18:	
  5647 ;; *************** function _srand *****************
  5648 ;; Defined at:
  5649 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  x               2    0[BANK1 ] unsigned int 
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;		None
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  1    wreg      void 
  5656 ;; Registers used:
  5657 ;;		wreg
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5663 ;;      Params:         0       0       2       0       0
  5664 ;;      Locals:         0       0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0
  5666 ;;      Totals:         0       0       2       0       0
  5667 ;;Total ram usage:        2 bytes
  5668 ;; Hardware stack levels used: 1
  5669 ;; Hardware stack levels required when called: 4
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_read_NumPad
  5674 ;;		_UART_TxString
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678     080D                     _srand:	
  5679                           ;psect for function _srand
  5680                           
  5681     080D                     l3251:	
  5682                           ;incstack = 0
  5683                           ; Regs used in _srand: [wreg]
  5684                           
  5685     080D  1683               	bsf	3,5	;RP0=1, select bank1
  5686     080E  1303               	bcf	3,6	;RP1=0, select bank1
  5687     080F  0820               	movf	srand@x^(0+128),w
  5688     0810  1283               	bcf	3,5	;RP0=0, select bank0
  5689     0811  1303               	bcf	3,6	;RP1=0, select bank0
  5690     0812  00D4               	movwf	_randx
  5691     0813  1683               	bsf	3,5	;RP0=1, select bank1
  5692     0814  1303               	bcf	3,6	;RP1=0, select bank1
  5693     0815  0821               	movf	(srand@x+1)^(0+128),w
  5694     0816  1283               	bcf	3,5	;RP0=0, select bank0
  5695     0817  1303               	bcf	3,6	;RP1=0, select bank0
  5696     0818  00D5               	movwf	_randx+1
  5697     0819  01D6               	clrf	_randx+2
  5698     081A  01D7               	clrf	_randx+3
  5699     081B                     l902:
  5700     081B  0008               	return
  5701     081C                     __end_of_srand:
  5702                           
  5703                           	psect	text19
  5704     0BD2                     __ptext19:	
  5705 ;; *************** function _rand *****************
  5706 ;; Defined at:
  5707 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;		None
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;		None
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  2   13[BANK1 ] int 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, pclath, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5721 ;;      Params:         0       0       2       0       0
  5722 ;;      Locals:         0       0       0       0       0
  5723 ;;      Temps:          0       0       5       0       0
  5724 ;;      Totals:         0       0       7       0       0
  5725 ;;Total ram usage:        7 bytes
  5726 ;; Hardware stack levels used: 1
  5727 ;; Hardware stack levels required when called: 5
  5728 ;; This function calls:
  5729 ;;		___lmul
  5730 ;; This function is called by:
  5731 ;;		_read_NumPad
  5732 ;;		_UART_TxString
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736     0BD2                     _rand:	
  5737                           ;psect for function _rand
  5738                           
  5739     0BD2                     l3253:	
  5740                           ;incstack = 0
  5741                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  5742                           
  5743     0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  5744     0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  5745     0BD4  0857               	movf	_randx+3,w
  5746     0BD5  1683               	bsf	3,5	;RP0=1, select bank1
  5747     0BD6  1303               	bcf	3,6	;RP1=0, select bank1
  5748     0BD7  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  5749     0BD8  1283               	bcf	3,5	;RP0=0, select bank0
  5750     0BD9  1303               	bcf	3,6	;RP1=0, select bank0
  5751     0BDA  0856               	movf	_randx+2,w
  5752     0BDB  1683               	bsf	3,5	;RP0=1, select bank1
  5753     0BDC  1303               	bcf	3,6	;RP1=0, select bank1
  5754     0BDD  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  5755     0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  5756     0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  5757     0BE0  0855               	movf	_randx+1,w
  5758     0BE1  1683               	bsf	3,5	;RP0=1, select bank1
  5759     0BE2  1303               	bcf	3,6	;RP1=0, select bank1
  5760     0BE3  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  5761     0BE4  1283               	bcf	3,5	;RP0=0, select bank0
  5762     0BE5  1303               	bcf	3,6	;RP1=0, select bank0
  5763     0BE6  0854               	movf	_randx,w
  5764     0BE7  1683               	bsf	3,5	;RP0=1, select bank1
  5765     0BE8  1303               	bcf	3,6	;RP1=0, select bank1
  5766     0BE9  00A0               	movwf	___lmul@multiplier^(0+128)
  5767     0BEA  3041               	movlw	65
  5768     0BEB  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  5769     0BEC  30C6               	movlw	198
  5770     0BED  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  5771     0BEE  304E               	movlw	78
  5772     0BEF  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  5773     0BF0  306D               	movlw	109
  5774     0BF1  00A4               	movwf	___lmul@multiplicand^(0+128)
  5775     0BF2  120A  158A  20A9  120A  158A  	fcall	___lmul
  5776     0BF7  1683               	bsf	3,5	;RP0=1, select bank1
  5777     0BF8  1303               	bcf	3,6	;RP1=0, select bank1
  5778     0BF9  0823               	movf	(?___lmul+3)^(0+128),w
  5779     0BFA  1283               	bcf	3,5	;RP0=0, select bank0
  5780     0BFB  1303               	bcf	3,6	;RP1=0, select bank0
  5781     0BFC  00D7               	movwf	_randx+3
  5782     0BFD  1683               	bsf	3,5	;RP0=1, select bank1
  5783     0BFE  1303               	bcf	3,6	;RP1=0, select bank1
  5784     0BFF  0822               	movf	(?___lmul+2)^(0+128),w
  5785     0C00  1283               	bcf	3,5	;RP0=0, select bank0
  5786     0C01  1303               	bcf	3,6	;RP1=0, select bank0
  5787     0C02  00D6               	movwf	_randx+2
  5788     0C03  1683               	bsf	3,5	;RP0=1, select bank1
  5789     0C04  1303               	bcf	3,6	;RP1=0, select bank1
  5790     0C05  0821               	movf	(?___lmul+1)^(0+128),w
  5791     0C06  1283               	bcf	3,5	;RP0=0, select bank0
  5792     0C07  1303               	bcf	3,6	;RP1=0, select bank0
  5793     0C08  00D5               	movwf	_randx+1
  5794     0C09  1683               	bsf	3,5	;RP0=1, select bank1
  5795     0C0A  1303               	bcf	3,6	;RP1=0, select bank1
  5796     0C0B  0820               	movf	?___lmul^(0+128),w
  5797     0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  5798     0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  5799     0C0E  00D4               	movwf	_randx
  5800     0C0F                     l3255:
  5801     0C0F  3039               	movlw	57
  5802     0C10  07D4               	addwf	_randx,f
  5803     0C11  3030               	movlw	48
  5804     0C12  1803               	skipnc
  5805     0C13  3031               	movlw	49
  5806     0C14  07D5               	addwf	_randx+1,f
  5807     0C15  3000               	movlw	0
  5808     0C16  1803               	skipnc
  5809     0C17  3001               	movlw	1
  5810     0C18  07D6               	addwf	_randx+2,f
  5811     0C19  3000               	movlw	0
  5812     0C1A  1803               	skipnc
  5813     0C1B  3001               	movlw	1
  5814     0C1C  07D7               	addwf	_randx+3,f
  5815     0C1D                     l3257:
  5816     0C1D  0854               	movf	_randx,w
  5817     0C1E  1683               	bsf	3,5	;RP0=1, select bank1
  5818     0C1F  1303               	bcf	3,6	;RP1=0, select bank1
  5819     0C20  00AF               	movwf	??_rand^(0+128)
  5820     0C21  1283               	bcf	3,5	;RP0=0, select bank0
  5821     0C22  1303               	bcf	3,6	;RP1=0, select bank0
  5822     0C23  0855               	movf	_randx+1,w
  5823     0C24  1683               	bsf	3,5	;RP0=1, select bank1
  5824     0C25  1303               	bcf	3,6	;RP1=0, select bank1
  5825     0C26  00B0               	movwf	(??_rand^(0+128)+1)
  5826     0C27  1283               	bcf	3,5	;RP0=0, select bank0
  5827     0C28  1303               	bcf	3,6	;RP1=0, select bank0
  5828     0C29  0856               	movf	_randx+2,w
  5829     0C2A  1683               	bsf	3,5	;RP0=1, select bank1
  5830     0C2B  1303               	bcf	3,6	;RP1=0, select bank1
  5831     0C2C  00B1               	movwf	(??_rand^(0+128)+2)
  5832     0C2D  1283               	bcf	3,5	;RP0=0, select bank0
  5833     0C2E  1303               	bcf	3,6	;RP1=0, select bank0
  5834     0C2F  0857               	movf	_randx+3,w
  5835     0C30  1683               	bsf	3,5	;RP0=1, select bank1
  5836     0C31  1303               	bcf	3,6	;RP1=0, select bank1
  5837     0C32  00B2               	movwf	(??_rand^(0+128)+3)
  5838     0C33  3010               	movlw	16
  5839     0C34  00B3               	movwf	(??_rand+4)^(0+128)
  5840     0C35                     u3325:
  5841     0C35  0D32               	rlf	(??_rand^(0+128)+3),w
  5842     0C36  0CB2               	rrf	(??_rand^(0+128)+3),f
  5843     0C37  0CB1               	rrf	(??_rand^(0+128)+2),f
  5844     0C38  0CB0               	rrf	(??_rand^(0+128)+1),f
  5845     0C39  0CAF               	rrf	??_rand^(0+128),f
  5846     0C3A                     u3320:
  5847     0C3A  0BB3               	decfsz	(??_rand+4)^(0+128),f
  5848     0C3B  2C35               	goto	u3325
  5849     0C3C  30FF               	movlw	255
  5850     0C3D  052F               	andwf	??_rand^(0+128),w
  5851     0C3E  00AD               	movwf	?_rand^(0+128)
  5852     0C3F  307F               	movlw	127
  5853     0C40  0530               	andwf	(??_rand+1)^(0+128),w
  5854     0C41  00AE               	movwf	(?_rand+1)^(0+128)
  5855     0C42                     l905:
  5856     0C42  0008               	return
  5857     0C43                     __end_of_rand:
  5858                           
  5859                           	psect	text20
  5860     08A9                     __ptext20:	
  5861 ;; *************** function ___lmul *****************
  5862 ;; Defined at:
  5863 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  multiplier      4    0[BANK1 ] unsigned long 
  5866 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  product         4    9[BANK1 ] unsigned long 
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  4    0[BANK1 ] unsigned long 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2, status,0
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5878 ;;      Params:         0       0       8       0       0
  5879 ;;      Locals:         0       0       4       0       0
  5880 ;;      Temps:          0       0       1       0       0
  5881 ;;      Totals:         0       0      13       0       0
  5882 ;;Total ram usage:       13 bytes
  5883 ;; Hardware stack levels used: 1
  5884 ;; Hardware stack levels required when called: 4
  5885 ;; This function calls:
  5886 ;;		Nothing
  5887 ;; This function is called by:
  5888 ;;		_ConvertToString
  5889 ;;		_rand
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893     08A9                     ___lmul:	
  5894                           ;psect for function ___lmul
  5895                           
  5896     08A9                     l2981:	
  5897                           ;incstack = 0
  5898                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5899                           
  5900     08A9  3000               	movlw	0
  5901     08AA  1683               	bsf	3,5	;RP0=1, select bank1
  5902     08AB  1303               	bcf	3,6	;RP1=0, select bank1
  5903     08AC  00AC               	movwf	(___lmul@product+3)^(0+128)
  5904     08AD  3000               	movlw	0
  5905     08AE  00AB               	movwf	(___lmul@product+2)^(0+128)
  5906     08AF  3000               	movlw	0
  5907     08B0  00AA               	movwf	(___lmul@product+1)^(0+128)
  5908     08B1  3000               	movlw	0
  5909     08B2  00A9               	movwf	___lmul@product^(0+128)
  5910     08B3                     l2983:
  5911     08B3  1C20               	btfss	___lmul@multiplier^(0+128),0
  5912     08B4  28B6               	goto	u2871
  5913     08B5  28B7               	goto	u2870
  5914     08B6                     u2871:
  5915     08B6  28CE               	goto	l2987
  5916     08B7                     u2870:
  5917     08B7                     l2985:
  5918     08B7  0824               	movf	___lmul@multiplicand^(0+128),w
  5919     08B8  07A9               	addwf	___lmul@product^(0+128),f
  5920     08B9  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  5921     08BA  1103               	clrz
  5922     08BB  1803               	skipnc
  5923     08BC  3E01               	addlw	1
  5924     08BD  1903               	skipnz
  5925     08BE  28C0               	goto	u2881
  5926     08BF  07AA               	addwf	(___lmul@product+1)^(0+128),f
  5927     08C0                     u2881:
  5928     08C0  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  5929     08C1  1103               	clrz
  5930     08C2  1803               	skipnc
  5931     08C3  3E01               	addlw	1
  5932     08C4  1903               	skipnz
  5933     08C5  28C7               	goto	u2882
  5934     08C6  07AB               	addwf	(___lmul@product+2)^(0+128),f
  5935     08C7                     u2882:
  5936     08C7  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  5937     08C8  1103               	clrz
  5938     08C9  1803               	skipnc
  5939     08CA  3E01               	addlw	1
  5940     08CB  1903               	skipnz
  5941     08CC  28CE               	goto	u2883
  5942     08CD  07AC               	addwf	(___lmul@product+3)^(0+128),f
  5943     08CE                     u2883:
  5944     08CE                     l2987:
  5945     08CE  3001               	movlw	1
  5946     08CF  00A8               	movwf	??___lmul^(0+128)
  5947     08D0                     u2895:
  5948     08D0  1003               	clrc
  5949     08D1  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  5950     08D2  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  5951     08D3  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  5952     08D4  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  5953     08D5  0BA8               	decfsz	??___lmul^(0+128),f
  5954     08D6  28D0               	goto	u2895
  5955     08D7                     l2989:
  5956     08D7  3001               	movlw	1
  5957     08D8                     u2905:
  5958     08D8  1003               	clrc
  5959     08D9  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  5960     08DA  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  5961     08DB  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  5962     08DC  0CA0               	rrf	___lmul@multiplier^(0+128),f
  5963     08DD  3EFF               	addlw	-1
  5964     08DE  1D03               	skipz
  5965     08DF  28D8               	goto	u2905
  5966     08E0  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  5967     08E1  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  5968     08E2  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  5969     08E3  0420               	iorwf	___lmul@multiplier^(0+128),w
  5970     08E4  1D03               	skipz
  5971     08E5  28E7               	goto	u2911
  5972     08E6  28E8               	goto	u2910
  5973     08E7                     u2911:
  5974     08E7  28B3               	goto	l2983
  5975     08E8                     u2910:
  5976     08E8                     l2991:
  5977     08E8  082C               	movf	(___lmul@product+3)^(0+128),w
  5978     08E9  00A3               	movwf	(?___lmul+3)^(0+128)
  5979     08EA  082B               	movf	(___lmul@product+2)^(0+128),w
  5980     08EB  00A2               	movwf	(?___lmul+2)^(0+128)
  5981     08EC  082A               	movf	(___lmul@product+1)^(0+128),w
  5982     08ED  00A1               	movwf	(?___lmul+1)^(0+128)
  5983     08EE  0829               	movf	___lmul@product^(0+128),w
  5984     08EF  00A0               	movwf	?___lmul^(0+128)
  5985     08F0                     l463:
  5986     08F0  0008               	return
  5987     08F1                     __end_of___lmul:
  5988                           
  5989                           	psect	text21
  5990     169D                     __ptext21:	
  5991 ;; *************** function ___wmul *****************
  5992 ;; Defined at:
  5993 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  multiplier      2   27[BANK1 ] unsigned int 
  5996 ;;  multiplicand    2   29[BANK1 ] unsigned int 
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;  product         2   31[BANK1 ] unsigned int 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  2   27[BANK1 ] unsigned int 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6008 ;;      Params:         0       0       4       0       0
  6009 ;;      Locals:         0       0       2       0       0
  6010 ;;      Temps:          0       0       0       0       0
  6011 ;;      Totals:         0       0       6       0       0
  6012 ;;Total ram usage:        6 bytes
  6013 ;; Hardware stack levels used: 1
  6014 ;; Hardware stack levels required when called: 4
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		_pow
  6019 ;;		_read_NumPad
  6020 ;;		_UART_TxString
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024     169D                     ___wmul:	
  6025                           ;psect for function ___wmul
  6026                           
  6027     169D                     l2923:	
  6028                           ;incstack = 0
  6029                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6030                           
  6031     169D  1683               	bsf	3,5	;RP0=1, select bank1
  6032     169E  1303               	bcf	3,6	;RP1=0, select bank1
  6033     169F  01BF               	clrf	___wmul@product^(0+128)
  6034     16A0  01C0               	clrf	(___wmul@product+1)^(0+128)
  6035     16A1                     l2925:
  6036     16A1  1C3B               	btfss	___wmul@multiplier^(0+128),0
  6037     16A2  2EA4               	goto	u2801
  6038     16A3  2EA5               	goto	u2800
  6039     16A4                     u2801:
  6040     16A4  2EAB               	goto	l449
  6041     16A5                     u2800:
  6042     16A5                     l2927:
  6043     16A5  083D               	movf	___wmul@multiplicand^(0+128),w
  6044     16A6  07BF               	addwf	___wmul@product^(0+128),f
  6045     16A7  1803               	skipnc
  6046     16A8  0AC0               	incf	(___wmul@product+1)^(0+128),f
  6047     16A9  083E               	movf	(___wmul@multiplicand+1)^(0+128),w
  6048     16AA  07C0               	addwf	(___wmul@product+1)^(0+128),f
  6049     16AB                     l449:
  6050     16AB  3001               	movlw	1
  6051     16AC                     u2815:
  6052     16AC  1003               	clrc
  6053     16AD  0DBD               	rlf	___wmul@multiplicand^(0+128),f
  6054     16AE  0DBE               	rlf	(___wmul@multiplicand+1)^(0+128),f
  6055     16AF  3EFF               	addlw	-1
  6056     16B0  1D03               	skipz
  6057     16B1  2EAC               	goto	u2815
  6058     16B2                     l2929:
  6059     16B2  3001               	movlw	1
  6060     16B3                     u2825:
  6061     16B3  1003               	clrc
  6062     16B4  0CBC               	rrf	(___wmul@multiplier+1)^(0+128),f
  6063     16B5  0CBB               	rrf	___wmul@multiplier^(0+128),f
  6064     16B6  3EFF               	addlw	-1
  6065     16B7  1D03               	skipz
  6066     16B8  2EB3               	goto	u2825
  6067     16B9                     l2931:
  6068     16B9  083B               	movf	___wmul@multiplier^(0+128),w
  6069     16BA  043C               	iorwf	(___wmul@multiplier+1)^(0+128),w
  6070     16BB  1D03               	btfss	3,2
  6071     16BC  2EBE               	goto	u2831
  6072     16BD  2EBF               	goto	u2830
  6073     16BE                     u2831:
  6074     16BE  2EA1               	goto	l2925
  6075     16BF                     u2830:
  6076     16BF                     l2933:
  6077     16BF  0840               	movf	(___wmul@product+1)^(0+128),w
  6078     16C0  00BC               	movwf	(?___wmul+1)^(0+128)
  6079     16C1  083F               	movf	___wmul@product^(0+128),w
  6080     16C2  00BB               	movwf	?___wmul^(0+128)
  6081     16C3                     l451:
  6082     16C3  0008               	return
  6083     16C4                     __end_of___wmul:
  6084                           
  6085                           	psect	text22
  6086     0A43                     __ptext22:	
  6087 ;; *************** function ___awmod *****************
  6088 ;; Defined at:
  6089 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  divisor         2   20[BANK1 ] int 
  6092 ;;  dividend        2   22[BANK1 ] int 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  sign            1   26[BANK1 ] unsigned char 
  6095 ;;  counter         1   25[BANK1 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  2   20[BANK1 ] int 
  6098 ;; Registers used:
  6099 ;;		wreg, status,2, status,0
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6105 ;;      Params:         0       0       4       0       0
  6106 ;;      Locals:         0       0       2       0       0
  6107 ;;      Temps:          0       0       1       0       0
  6108 ;;      Totals:         0       0       7       0       0
  6109 ;;Total ram usage:        7 bytes
  6110 ;; Hardware stack levels used: 1
  6111 ;; Hardware stack levels required when called: 4
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_read_NumPad
  6116 ;;		_UART_TxString
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120     0A43                     ___awmod:	
  6121                           ;psect for function ___awmod
  6122                           
  6123     0A43                     l3267:	
  6124                           ;incstack = 0
  6125                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6126                           
  6127     0A43  1683               	bsf	3,5	;RP0=1, select bank1
  6128     0A44  1303               	bcf	3,6	;RP1=0, select bank1
  6129     0A45  01BA               	clrf	___awmod@sign^(0+128)
  6130     0A46                     l3269:
  6131     0A46  1FB7               	btfss	(___awmod@dividend+1)^(0+128),7
  6132     0A47  2A49               	goto	u3341
  6133     0A48  2A4A               	goto	u3340
  6134     0A49                     u3341:
  6135     0A49  2A51               	goto	l3275
  6136     0A4A                     u3340:
  6137     0A4A                     l3271:
  6138     0A4A  09B6               	comf	___awmod@dividend^(0+128),f
  6139     0A4B  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6140     0A4C  0AB6               	incf	___awmod@dividend^(0+128),f
  6141     0A4D  1903               	skipnz
  6142     0A4E  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6143     0A4F                     l3273:
  6144     0A4F  01BA               	clrf	___awmod@sign^(0+128)
  6145     0A50  0ABA               	incf	___awmod@sign^(0+128),f
  6146     0A51                     l3275:
  6147     0A51  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6148     0A52  2A54               	goto	u3351
  6149     0A53  2A55               	goto	u3350
  6150     0A54                     u3351:
  6151     0A54  2A5A               	goto	l3279
  6152     0A55                     u3350:
  6153     0A55                     l3277:
  6154     0A55  09B4               	comf	___awmod@divisor^(0+128),f
  6155     0A56  09B5               	comf	(___awmod@divisor+1)^(0+128),f
  6156     0A57  0AB4               	incf	___awmod@divisor^(0+128),f
  6157     0A58  1903               	skipnz
  6158     0A59  0AB5               	incf	(___awmod@divisor+1)^(0+128),f
  6159     0A5A                     l3279:
  6160     0A5A  0834               	movf	___awmod@divisor^(0+128),w
  6161     0A5B  0435               	iorwf	(___awmod@divisor+1)^(0+128),w
  6162     0A5C  1903               	btfsc	3,2
  6163     0A5D  2A5F               	goto	u3361
  6164     0A5E  2A60               	goto	u3360
  6165     0A5F                     u3361:
  6166     0A5F  2A8F               	goto	l3297
  6167     0A60                     u3360:
  6168     0A60                     l3281:
  6169     0A60  01B9               	clrf	___awmod@counter^(0+128)
  6170     0A61  0AB9               	incf	___awmod@counter^(0+128),f
  6171     0A62  2A6E               	goto	l3287
  6172     0A63                     l3283:
  6173     0A63  3001               	movlw	1
  6174     0A64                     u3375:
  6175     0A64  1003               	clrc
  6176     0A65  0DB4               	rlf	___awmod@divisor^(0+128),f
  6177     0A66  0DB5               	rlf	(___awmod@divisor+1)^(0+128),f
  6178     0A67  3EFF               	addlw	-1
  6179     0A68  1D03               	skipz
  6180     0A69  2A64               	goto	u3375
  6181     0A6A                     l3285:
  6182     0A6A  3001               	movlw	1
  6183     0A6B  00B8               	movwf	??___awmod^(0+128)
  6184     0A6C  0838               	movf	??___awmod^(0+128),w
  6185     0A6D  07B9               	addwf	___awmod@counter^(0+128),f
  6186     0A6E                     l3287:
  6187     0A6E  1FB5               	btfss	(___awmod@divisor+1)^(0+128),7
  6188     0A6F  2A71               	goto	u3381
  6189     0A70  2A72               	goto	u3380
  6190     0A71                     u3381:
  6191     0A71  2A63               	goto	l3283
  6192     0A72                     u3380:
  6193     0A72                     l3289:
  6194     0A72  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6195     0A73  0237               	subwf	(___awmod@dividend+1)^(0+128),w
  6196     0A74  1D03               	skipz
  6197     0A75  2A78               	goto	u3395
  6198     0A76  0834               	movf	___awmod@divisor^(0+128),w
  6199     0A77  0236               	subwf	___awmod@dividend^(0+128),w
  6200     0A78                     u3395:
  6201     0A78  1C03               	skipc
  6202     0A79  2A7B               	goto	u3391
  6203     0A7A  2A7C               	goto	u3390
  6204     0A7B                     u3391:
  6205     0A7B  2A82               	goto	l3293
  6206     0A7C                     u3390:
  6207     0A7C                     l3291:
  6208     0A7C  0834               	movf	___awmod@divisor^(0+128),w
  6209     0A7D  02B6               	subwf	___awmod@dividend^(0+128),f
  6210     0A7E  0835               	movf	(___awmod@divisor+1)^(0+128),w
  6211     0A7F  1C03               	skipc
  6212     0A80  03B7               	decf	(___awmod@dividend+1)^(0+128),f
  6213     0A81  02B7               	subwf	(___awmod@dividend+1)^(0+128),f
  6214     0A82                     l3293:
  6215     0A82  3001               	movlw	1
  6216     0A83                     u3405:
  6217     0A83  1003               	clrc
  6218     0A84  0CB5               	rrf	(___awmod@divisor+1)^(0+128),f
  6219     0A85  0CB4               	rrf	___awmod@divisor^(0+128),f
  6220     0A86  3EFF               	addlw	-1
  6221     0A87  1D03               	skipz
  6222     0A88  2A83               	goto	u3405
  6223     0A89                     l3295:
  6224     0A89  3001               	movlw	1
  6225     0A8A  02B9               	subwf	___awmod@counter^(0+128),f
  6226     0A8B  1D03               	btfss	3,2
  6227     0A8C  2A8E               	goto	u3411
  6228     0A8D  2A8F               	goto	u3410
  6229     0A8E                     u3411:
  6230     0A8E  2A72               	goto	l3289
  6231     0A8F                     u3410:
  6232     0A8F                     l3297:
  6233     0A8F  083A               	movf	___awmod@sign^(0+128),w
  6234     0A90  1903               	btfsc	3,2
  6235     0A91  2A93               	goto	u3421
  6236     0A92  2A94               	goto	u3420
  6237     0A93                     u3421:
  6238     0A93  2A99               	goto	l3301
  6239     0A94                     u3420:
  6240     0A94                     l3299:
  6241     0A94  09B6               	comf	___awmod@dividend^(0+128),f
  6242     0A95  09B7               	comf	(___awmod@dividend+1)^(0+128),f
  6243     0A96  0AB6               	incf	___awmod@dividend^(0+128),f
  6244     0A97  1903               	skipnz
  6245     0A98  0AB7               	incf	(___awmod@dividend+1)^(0+128),f
  6246     0A99                     l3301:
  6247     0A99  0837               	movf	(___awmod@dividend+1)^(0+128),w
  6248     0A9A  00B5               	movwf	(?___awmod+1)^(0+128)
  6249     0A9B  0836               	movf	___awmod@dividend^(0+128),w
  6250     0A9C  00B4               	movwf	?___awmod^(0+128)
  6251     0A9D                     l615:
  6252     0A9D  0008               	return
  6253     0A9E                     __end_of___awmod:
  6254                           
  6255                           	psect	text23
  6256     07E2                     __ptext23:	
  6257 ;; *************** function _UART_TxChar *****************
  6258 ;; Defined at:
  6259 ;;		line 768 in file "main.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  ch              1    wreg     unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  ch              1    1[BANK1 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, status,2, status,0
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6273 ;;      Params:         0       0       0       0       0
  6274 ;;      Locals:         0       0       1       0       0
  6275 ;;      Temps:          0       0       1       0       0
  6276 ;;      Totals:         0       0       2       0       0
  6277 ;;Total ram usage:        2 bytes
  6278 ;; Hardware stack levels used: 1
  6279 ;; Hardware stack levels required when called: 4
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_UART_TxString
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287     07E2                     _UART_TxChar:	
  6288                           ;psect for function _UART_TxChar
  6289                           
  6290                           
  6291                           ;incstack = 0
  6292                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  6293                           ;UART_TxChar@ch stored from wreg
  6294     07E2  1683               	bsf	3,5	;RP0=1, select bank1
  6295     07E3  1303               	bcf	3,6	;RP1=0, select bank1
  6296     07E4  00A1               	movwf	UART_TxChar@ch^(0+128)
  6297     07E5                     l3261:
  6298     07E5                     l304:	
  6299                           ;main.c: 768: void UART_TxChar(char ch);main.c: 769: {;main.c: 771:     while(!(PIR1 & 0
      +                          x10));
  6300                           
  6301     07E5  1283               	bcf	3,5	;RP0=0, select bank0
  6302     07E6  1E0C               	btfss	12,4	;volatile
  6303     07E7  2FE9               	goto	u3331
  6304     07E8  2FEA               	goto	u3330
  6305     07E9                     u3331:
  6306     07E9  2FE5               	goto	l304
  6307     07EA                     u3330:
  6308     07EA                     l3263:
  6309                           
  6310                           ;main.c: 773:     PIR1 &= ~0x10;
  6311     07EA  30EF               	movlw	239
  6312     07EB  1683               	bsf	3,5	;RP0=1, select bank1
  6313     07EC  1303               	bcf	3,6	;RP1=0, select bank1
  6314     07ED  00A0               	movwf	??_UART_TxChar^(0+128)
  6315     07EE  0820               	movf	??_UART_TxChar^(0+128),w
  6316     07EF  1283               	bcf	3,5	;RP0=0, select bank0
  6317     07F0  1303               	bcf	3,6	;RP1=0, select bank0
  6318     07F1  058C               	andwf	12,f	;volatile
  6319     07F2                     l3265:
  6320                           
  6321                           ;main.c: 775:     TXREG = ch;
  6322     07F2  1683               	bsf	3,5	;RP0=1, select bank1
  6323     07F3  1303               	bcf	3,6	;RP1=0, select bank1
  6324     07F4  0821               	movf	UART_TxChar@ch^(0+128),w
  6325     07F5  1283               	bcf	3,5	;RP0=0, select bank0
  6326     07F6  1303               	bcf	3,6	;RP1=0, select bank0
  6327     07F7  0099               	movwf	25	;volatile
  6328     07F8                     l307:
  6329     07F8  0008               	return
  6330     07F9                     __end_of_UART_TxChar:
  6331                           
  6332                           	psect	text24
  6333     0EC8                     __ptext24:	
  6334 ;; *************** function _SplitPacket *****************
  6335 ;; Defined at:
  6336 ;;		line 496 in file "main.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;  pkt             1    wreg     PTR unsigned char 
  6339 ;;		 -> dato(50), 
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;  pkt             1   21[BANK1 ] PTR unsigned char 
  6342 ;;		 -> dato(50), 
  6343 ;;  i               2   22[BANK1 ] int 
  6344 ;;  part            5   12[BANK1 ] unsigned char [5]
  6345 ;;  i_part          2   19[BANK1 ] int 
  6346 ;;  section         2   17[BANK1 ] int 
  6347 ;;  len             2   10[BANK1 ] int 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      void 
  6350 ;; Registers used:
  6351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6357 ;;      Params:         0       0       0       0       0
  6358 ;;      Locals:         0       0      14       0       0
  6359 ;;      Temps:          0       0       3       0       0
  6360 ;;      Totals:         0       0      17       0       0
  6361 ;;Total ram usage:       17 bytes
  6362 ;; Hardware stack levels used: 1
  6363 ;; Hardware stack levels required when called: 5
  6364 ;; This function calls:
  6365 ;;		_Length
  6366 ;;		_strcopy
  6367 ;; This function is called by:
  6368 ;;		_main
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372     0EC8                     _SplitPacket:	
  6373                           ;psect for function _SplitPacket
  6374                           
  6375                           
  6376                           ;incstack = 0
  6377                           ; Regs used in _SplitPacket: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6378                           ;SplitPacket@pkt stored from wreg
  6379     0EC8  1683               	bsf	3,5	;RP0=1, select bank1
  6380     0EC9  1303               	bcf	3,6	;RP1=0, select bank1
  6381     0ECA  00B5               	movwf	SplitPacket@pkt^(0+128)
  6382     0ECB                     l3473:
  6383                           
  6384                           ;main.c: 496: void SplitPacket(char* pkt);main.c: 497: {;main.c: 499:     char part[5];;
      +                          main.c: 502:     int i_part = 0, section = 0, len = Length(pkt);
  6385     0ECB  01B3               	clrf	SplitPacket@i_part^(0+128)
  6386     0ECC  01B4               	clrf	(SplitPacket@i_part+1)^(0+128)
  6387     0ECD  01B1               	clrf	SplitPacket@section^(0+128)
  6388     0ECE  01B2               	clrf	(SplitPacket@section+1)^(0+128)
  6389     0ECF                     l3475:
  6390     0ECF  0835               	movf	SplitPacket@pkt^(0+128),w
  6391     0ED0  00A0               	movwf	Length@str^(0+128)
  6392     0ED1  3001               	movlw	1
  6393     0ED2  00A1               	movwf	(Length@str+1)^(0+128)
  6394     0ED3  160A  118A  26C4  120A  158A  	fcall	_Length
  6395     0ED8  1683               	bsf	3,5	;RP0=1, select bank1
  6396     0ED9  1303               	bcf	3,6	;RP1=0, select bank1
  6397     0EDA  0821               	movf	(?_Length+1)^(0+128),w
  6398     0EDB  00AB               	movwf	(SplitPacket@len+1)^(0+128)
  6399     0EDC  0820               	movf	?_Length^(0+128),w
  6400     0EDD  00AA               	movwf	SplitPacket@len^(0+128)
  6401     0EDE                     l3477:
  6402                           
  6403                           ;main.c: 505:     for(int i = 0; i < len + 1; i++)
  6404     0EDE  01B6               	clrf	SplitPacket@i^(0+128)
  6405     0EDF  01B7               	clrf	(SplitPacket@i+1)^(0+128)
  6406     0EE0  2F4C               	goto	l3507
  6407     0EE1                     l3479:
  6408                           
  6409                           ;main.c: 506:     {;main.c: 508:         if(pkt[i] != '/' && pkt[i] != '\0')
  6410     0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  6411     0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  6412     0EE3  0836               	movf	SplitPacket@i^(0+128),w
  6413     0EE4  0735               	addwf	SplitPacket@pkt^(0+128),w
  6414     0EE5  00A7               	movwf	??_SplitPacket^(0+128)
  6415     0EE6  0827               	movf	??_SplitPacket^(0+128),w
  6416     0EE7  0084               	movwf	4
  6417     0EE8  302F               	movlw	47
  6418     0EE9  1783               	bsf	3,7	;select IRP bank2
  6419     0EEA  0600               	xorwf	0,w
  6420     0EEB  1903               	btfsc	3,2
  6421     0EEC  2EEE               	goto	u3701
  6422     0EED  2EEF               	goto	u3700
  6423     0EEE                     u3701:
  6424     0EEE  2F29               	goto	l3499
  6425     0EEF                     u3700:
  6426     0EEF                     l3481:
  6427     0EEF  0836               	movf	SplitPacket@i^(0+128),w
  6428     0EF0  0735               	addwf	SplitPacket@pkt^(0+128),w
  6429     0EF1  00A7               	movwf	??_SplitPacket^(0+128)
  6430     0EF2  0827               	movf	??_SplitPacket^(0+128),w
  6431     0EF3  0084               	movwf	4
  6432     0EF4  0800               	movf	0,w
  6433     0EF5  1903               	btfsc	3,2
  6434     0EF6  2EF8               	goto	u3711
  6435     0EF7  2EF9               	goto	u3710
  6436     0EF8                     u3711:
  6437     0EF8  2F29               	goto	l3499
  6438     0EF9                     u3710:
  6439     0EF9                     l3483:
  6440                           
  6441                           ;main.c: 509:         {;main.c: 511:             part[i_part] = pkt[i];
  6442     0EF9  0836               	movf	SplitPacket@i^(0+128),w
  6443     0EFA  0735               	addwf	SplitPacket@pkt^(0+128),w
  6444     0EFB  00A7               	movwf	??_SplitPacket^(0+128)
  6445     0EFC  0827               	movf	??_SplitPacket^(0+128),w
  6446     0EFD  0084               	movwf	4
  6447     0EFE  0800               	movf	0,w
  6448     0EFF  00A8               	movwf	(??_SplitPacket+1)^(0+128)
  6449     0F00  0833               	movf	SplitPacket@i_part^(0+128),w
  6450     0F01  3EAC               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6451     0F02  0084               	movwf	4
  6452     0F03  0828               	movf	(??_SplitPacket+1)^(0+128),w
  6453     0F04  1383               	bcf	3,7	;select IRP bank1
  6454     0F05  0080               	movwf	0
  6455     0F06                     l3485:
  6456                           
  6457                           ;main.c: 512:             i_part++;
  6458     0F06  3001               	movlw	1
  6459     0F07  07B3               	addwf	SplitPacket@i_part^(0+128),f
  6460     0F08  1803               	skipnc
  6461     0F09  0AB4               	incf	(SplitPacket@i_part+1)^(0+128),f
  6462     0F0A  3000               	movlw	0
  6463     0F0B  07B4               	addwf	(SplitPacket@i_part+1)^(0+128),f
  6464     0F0C                     l3487:
  6465                           
  6466                           ;main.c: 513:             part[i_part] = '\0';
  6467     0F0C  0833               	movf	SplitPacket@i_part^(0+128),w
  6468     0F0D  3EAC               	addlw	(low (SplitPacket@part| 0))& (0+255)
  6469     0F0E  0084               	movwf	4
  6470     0F0F  0180               	clrf	0
  6471                           
  6472                           ;main.c: 514:         }
  6473     0F10  2F46               	goto	l3505
  6474     0F11                     l3489:
  6475                           
  6476                           ;main.c: 522:                     source = part[0];
  6477     0F11  082C               	movf	SplitPacket@part^(0+128),w
  6478     0F12  00E9               	movwf	_source^(0+128)
  6479                           
  6480                           ;main.c: 523:                     break;
  6481     0F13  2F3C               	goto	l3501
  6482     0F14                     l3491:
  6483                           
  6484                           ;main.c: 525:                     strcopy(id_dest, part);
  6485     0F14  30AC               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6486     0F15  00A0               	movwf	strcopy@source^(0+128)
  6487     0F16  30C1               	movlw	(low (_id_dest| (0+256)))& (0+255)
  6488     0F17  160A  118A  26EC  120A  158A  	fcall	_strcopy
  6489                           
  6490                           ;main.c: 526:                     break;
  6491     0F1C  2F3C               	goto	l3501
  6492     0F1D                     l3493:
  6493                           
  6494                           ;main.c: 528:                     type = part[0];
  6495     0F1D  082C               	movf	SplitPacket@part^(0+128),w
  6496     0F1E  00E8               	movwf	_type^(0+128)
  6497                           
  6498                           ;main.c: 529:                     break;
  6499     0F1F  2F3C               	goto	l3501
  6500     0F20                     l3495:
  6501                           
  6502                           ;main.c: 531:                     strcopy(datoSeriale, part);
  6503     0F20  30AC               	movlw	(low (SplitPacket@part| 0))& (0+255)
  6504     0F21  00A0               	movwf	strcopy@source^(0+128)
  6505     0F22  30A1               	movlw	(low (_datoSeriale| (0+256)))& (0+255)
  6506     0F23  160A  118A  26EC  120A  158A  	fcall	_strcopy
  6507                           
  6508                           ;main.c: 532:                     break;
  6509     0F28  2F3C               	goto	l3501
  6510     0F29                     l3499:
  6511                           
  6512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6513                           ; Switch size 1, requested type "simple"
  6514                           ; Number of cases is 1, Range of values is 0 to 0
  6515                           ; switch strategies available:
  6516                           ; Name         Instructions Cycles
  6517                           ; simple_byte            4     3 (average)
  6518                           ; direct_byte           11     8 (fixed)
  6519                           ; jumptable            260     6 (fixed)
  6520                           ;	Chosen strategy is simple_byte
  6521     0F29  0832               	movf	(SplitPacket@section+1)^(0+128),w
  6522     0F2A  3A00               	xorlw	0	; case 0
  6523     0F2B  1903               	skipnz
  6524     0F2C  2F2E               	goto	l4077
  6525     0F2D  2F3C               	goto	l3501
  6526     0F2E                     l4077:
  6527                           
  6528                           ; Switch size 1, requested type "simple"
  6529                           ; Number of cases is 4, Range of values is 0 to 3
  6530                           ; switch strategies available:
  6531                           ; Name         Instructions Cycles
  6532                           ; simple_byte           13     7 (average)
  6533                           ; direct_byte           20     8 (fixed)
  6534                           ; jumptable            260     6 (fixed)
  6535                           ;	Chosen strategy is simple_byte
  6536     0F2E  0831               	movf	SplitPacket@section^(0+128),w
  6537     0F2F  3A00               	xorlw	0	; case 0
  6538     0F30  1903               	skipnz
  6539     0F31  2F11               	goto	l3489
  6540     0F32  3A01               	xorlw	1	; case 1
  6541     0F33  1903               	skipnz
  6542     0F34  2F14               	goto	l3491
  6543     0F35  3A03               	xorlw	3	; case 2
  6544     0F36  1903               	skipnz
  6545     0F37  2F1D               	goto	l3493
  6546     0F38  3A01               	xorlw	1	; case 3
  6547     0F39  1903               	skipnz
  6548     0F3A  2F20               	goto	l3495
  6549     0F3B  2F3C               	goto	l3501
  6550     0F3C                     l3501:
  6551                           
  6552                           ;main.c: 537:             section++;
  6553     0F3C  3001               	movlw	1
  6554     0F3D  1683               	bsf	3,5	;RP0=1, select bank1
  6555     0F3E  1303               	bcf	3,6	;RP1=0, select bank1
  6556     0F3F  07B1               	addwf	SplitPacket@section^(0+128),f
  6557     0F40  1803               	skipnc
  6558     0F41  0AB2               	incf	(SplitPacket@section+1)^(0+128),f
  6559     0F42  3000               	movlw	0
  6560     0F43  07B2               	addwf	(SplitPacket@section+1)^(0+128),f
  6561     0F44                     l3503:
  6562                           
  6563                           ;main.c: 539:             i_part = 0;
  6564     0F44  01B3               	clrf	SplitPacket@i_part^(0+128)
  6565     0F45  01B4               	clrf	(SplitPacket@i_part+1)^(0+128)
  6566     0F46                     l3505:
  6567                           
  6568                           ;main.c: 541:     }
  6569     0F46  3001               	movlw	1
  6570     0F47  07B6               	addwf	SplitPacket@i^(0+128),f
  6571     0F48  1803               	skipnc
  6572     0F49  0AB7               	incf	(SplitPacket@i+1)^(0+128),f
  6573     0F4A  3000               	movlw	0
  6574     0F4B  07B7               	addwf	(SplitPacket@i+1)^(0+128),f
  6575     0F4C                     l3507:
  6576     0F4C  082A               	movf	SplitPacket@len^(0+128),w
  6577     0F4D  3E01               	addlw	1
  6578     0F4E  00A7               	movwf	??_SplitPacket^(0+128)
  6579     0F4F  082B               	movf	(SplitPacket@len+1)^(0+128),w
  6580     0F50  1803               	skipnc
  6581     0F51  3E01               	addlw	1
  6582     0F52  3E00               	addlw	0
  6583     0F53  00A8               	movwf	(??_SplitPacket+1)^(0+128)
  6584     0F54  0837               	movf	(SplitPacket@i+1)^(0+128),w
  6585     0F55  3A80               	xorlw	128
  6586     0F56  00A9               	movwf	(??_SplitPacket+2)^(0+128)
  6587     0F57  0828               	movf	(??_SplitPacket+1)^(0+128),w
  6588     0F58  3A80               	xorlw	128
  6589     0F59  0229               	subwf	(??_SplitPacket+2)^(0+128),w
  6590     0F5A  1D03               	skipz
  6591     0F5B  2F5E               	goto	u3725
  6592     0F5C  0827               	movf	??_SplitPacket^(0+128),w
  6593     0F5D  0236               	subwf	SplitPacket@i^(0+128),w
  6594     0F5E                     u3725:
  6595     0F5E  1C03               	skipc
  6596     0F5F  2F61               	goto	u3721
  6597     0F60  2F62               	goto	u3720
  6598     0F61                     u3721:
  6599     0F61  2EE1               	goto	l3479
  6600     0F62                     u3720:
  6601     0F62                     l238:
  6602     0F62  0008               	return
  6603     0F63                     __end_of_SplitPacket:
  6604                           
  6605                           	psect	text25
  6606     16EC                     __ptext25:	
  6607 ;; *************** function _strcopy *****************
  6608 ;; Defined at:
  6609 ;;		line 544 in file "main.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;  dest            1    wreg     PTR unsigned char 
  6612 ;;		 -> datoSeriale(17), id_dest(4), 
  6613 ;;  source          1    0[BANK1 ] PTR unsigned char 
  6614 ;;		 -> SplitPacket@part(5), 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  dest            1    4[BANK1 ] PTR unsigned char 
  6617 ;;		 -> datoSeriale(17), id_dest(4), 
  6618 ;;  n               2    5[BANK1 ] int 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      void 
  6621 ;; Registers used:
  6622 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6628 ;;      Params:         0       0       1       0       0
  6629 ;;      Locals:         0       0       3       0       0
  6630 ;;      Temps:          0       0       3       0       0
  6631 ;;      Totals:         0       0       7       0       0
  6632 ;;Total ram usage:        7 bytes
  6633 ;; Hardware stack levels used: 1
  6634 ;; Hardware stack levels required when called: 4
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_SplitPacket
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642     16EC                     _strcopy:	
  6643                           ;psect for function _strcopy
  6644                           
  6645                           
  6646                           ;incstack = 0
  6647                           ; Regs used in _strcopy: [wreg-fsr0h+status,2+status,0]
  6648                           ;strcopy@dest stored from wreg
  6649     16EC  1683               	bsf	3,5	;RP0=1, select bank1
  6650     16ED  1303               	bcf	3,6	;RP1=0, select bank1
  6651     16EE  00A4               	movwf	strcopy@dest^(0+128)
  6652     16EF                     l3221:
  6653                           
  6654                           ;main.c: 544: void strcopy(char* dest, char* source);main.c: 545: {;main.c: 546:     int
      +                           n = 0;
  6655     16EF  01A5               	clrf	strcopy@n^(0+128)
  6656     16F0  01A6               	clrf	(strcopy@n+1)^(0+128)
  6657                           
  6658                           ;main.c: 549:     while(source[n] != '\0')
  6659     16F1  2F07               	goto	l3227
  6660     16F2                     l3223:
  6661                           
  6662                           ;main.c: 550:     {;main.c: 551:         dest[n] = source[n];
  6663     16F2  0825               	movf	strcopy@n^(0+128),w
  6664     16F3  0720               	addwf	strcopy@source^(0+128),w
  6665     16F4  00A1               	movwf	??_strcopy^(0+128)
  6666     16F5  0821               	movf	??_strcopy^(0+128),w
  6667     16F6  0084               	movwf	4
  6668     16F7  0800               	movf	0,w
  6669     16F8  00A2               	movwf	(??_strcopy+1)^(0+128)
  6670     16F9  0825               	movf	strcopy@n^(0+128),w
  6671     16FA  0724               	addwf	strcopy@dest^(0+128),w
  6672     16FB  00A3               	movwf	(??_strcopy+2)^(0+128)
  6673     16FC  0823               	movf	(??_strcopy+2)^(0+128),w
  6674     16FD  0084               	movwf	4
  6675     16FE  0822               	movf	(??_strcopy+1)^(0+128),w
  6676     16FF  1783               	bsf	3,7	;select IRP bank2
  6677     1700  0080               	movwf	0
  6678     1701                     l3225:
  6679                           
  6680                           ;main.c: 552:         n++;
  6681     1701  3001               	movlw	1
  6682     1702  07A5               	addwf	strcopy@n^(0+128),f
  6683     1703  1803               	skipnc
  6684     1704  0AA6               	incf	(strcopy@n+1)^(0+128),f
  6685     1705  3000               	movlw	0
  6686     1706  07A6               	addwf	(strcopy@n+1)^(0+128),f
  6687     1707                     l3227:
  6688                           
  6689                           ;main.c: 549:     while(source[n] != '\0')
  6690     1707  0825               	movf	strcopy@n^(0+128),w
  6691     1708  0720               	addwf	strcopy@source^(0+128),w
  6692     1709  00A1               	movwf	??_strcopy^(0+128)
  6693     170A  0821               	movf	??_strcopy^(0+128),w
  6694     170B  0084               	movwf	4
  6695     170C  1383               	bcf	3,7	;select IRP bank0
  6696     170D  0800               	movf	0,w
  6697     170E  1D03               	btfss	3,2
  6698     170F  2F11               	goto	u3281
  6699     1710  2F12               	goto	u3280
  6700     1711                     u3281:
  6701     1711  2EF2               	goto	l3223
  6702     1712                     u3280:
  6703     1712                     l3229:
  6704                           
  6705                           ;main.c: 556:     dest[n] = '\0';
  6706     1712  0825               	movf	strcopy@n^(0+128),w
  6707     1713  0724               	addwf	strcopy@dest^(0+128),w
  6708     1714  00A1               	movwf	??_strcopy^(0+128)
  6709     1715  0821               	movf	??_strcopy^(0+128),w
  6710     1716  0084               	movwf	4
  6711     1717  1783               	bsf	3,7	;select IRP bank2
  6712     1718  0180               	clrf	0
  6713     1719                     l244:
  6714     1719  0008               	return
  6715     171A                     __end_of_strcopy:
  6716                           
  6717                           	psect	text26
  6718     08F1                     __ptext26:	
  6719 ;; *************** function _ConcatToPacket *****************
  6720 ;; Defined at:
  6721 ;;		line 446 in file "main.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  pkt             1    wreg     PTR unsigned char 
  6724 ;;		 -> packet(15), 
  6725 ;;  str             2   19[BANK1 ] PTR unsigned char 
  6726 ;;		 -> STR_14(4), STR_10(4), STR_6(2), main@num_rand_s(16), 
  6727 ;;		 -> PIC_ID(4), 
  6728 ;;  delim           1   21[BANK1 ] unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  pkt             1   25[BANK1 ] PTR unsigned char 
  6731 ;;		 -> packet(15), 
  6732 ;;  packet_lengt    2   23[BANK1 ] int 
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  1    wreg      void 
  6735 ;; Registers used:
  6736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6742 ;;      Params:         0       0       3       0       0
  6743 ;;      Locals:         0       0       3       0       0
  6744 ;;      Temps:          0       0       1       0       0
  6745 ;;      Totals:         0       0       7       0       0
  6746 ;;Total ram usage:        7 bytes
  6747 ;; Hardware stack levels used: 1
  6748 ;; Hardware stack levels required when called: 6
  6749 ;; This function calls:
  6750 ;;		_strcat
  6751 ;; This function is called by:
  6752 ;;		_main
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756     08F1                     _ConcatToPacket:	
  6757                           ;psect for function _ConcatToPacket
  6758                           
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _ConcatToPacket: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6762                           ;ConcatToPacket@pkt stored from wreg
  6763     08F1  1683               	bsf	3,5	;RP0=1, select bank1
  6764     08F2  1303               	bcf	3,6	;RP1=0, select bank1
  6765     08F3  00B9               	movwf	ConcatToPacket@pkt^(0+128)
  6766     08F4                     l3441:
  6767                           
  6768                           ;main.c: 446: void ConcatToPacket(char* pkt, char* str, char delim);main.c: 447: {;main.
      +                          c: 449:     int packet_length = strcat(pkt, str);
  6769     08F4  0833               	movf	ConcatToPacket@str^(0+128),w
  6770     08F5  00A7               	movwf	strcat@source^(0+128)
  6771     08F6  0834               	movf	(ConcatToPacket@str+1)^(0+128),w
  6772     08F7  00A8               	movwf	(strcat@source+1)^(0+128)
  6773     08F8  0839               	movf	ConcatToPacket@pkt^(0+128),w
  6774     08F9  120A  158A  2443  120A  158A  	fcall	_strcat
  6775     08FE  1683               	bsf	3,5	;RP0=1, select bank1
  6776     08FF  1303               	bcf	3,6	;RP1=0, select bank1
  6777     0900  0828               	movf	(?_strcat+1)^(0+128),w
  6778     0901  00B8               	movwf	(ConcatToPacket@packet_length+1)^(0+128)
  6779     0902  0827               	movf	?_strcat^(0+128),w
  6780     0903  00B7               	movwf	ConcatToPacket@packet_length^(0+128)
  6781     0904                     l3443:
  6782                           
  6783                           ;main.c: 451:     if(delim != ' ')
  6784     0904  3020               	movlw	32
  6785     0905  0635               	xorwf	ConcatToPacket@delim^(0+128),w
  6786     0906  1903               	btfsc	3,2
  6787     0907  2909               	goto	u3671
  6788     0908  290A               	goto	u3670
  6789     0909                     u3671:
  6790     0909  2919               	goto	l3449
  6791     090A                     u3670:
  6792     090A                     l3445:
  6793                           
  6794                           ;main.c: 452:     {;main.c: 454:         pkt[packet_length] = delim;
  6795     090A  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6796     090B  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6797     090C  00B6               	movwf	??_ConcatToPacket^(0+128)
  6798     090D  0836               	movf	??_ConcatToPacket^(0+128),w
  6799     090E  0084               	movwf	4
  6800     090F  0835               	movf	ConcatToPacket@delim^(0+128),w
  6801     0910  1783               	bsf	3,7	;select IRP bank2
  6802     0911  0080               	movwf	0
  6803     0912                     l3447:
  6804                           
  6805                           ;main.c: 455:         packet_length++;
  6806     0912  3001               	movlw	1
  6807     0913  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6808     0914  1803               	skipnc
  6809     0915  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6810     0916  3000               	movlw	0
  6811     0917  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6812                           
  6813                           ;main.c: 456:     }
  6814     0918  2934               	goto	l3455
  6815     0919                     l3449:
  6816                           
  6817                           ;main.c: 459:     {;main.c: 461:         pkt[packet_length] = '\r';
  6818     0919  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6819     091A  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6820     091B  00B6               	movwf	??_ConcatToPacket^(0+128)
  6821     091C  0836               	movf	??_ConcatToPacket^(0+128),w
  6822     091D  0084               	movwf	4
  6823     091E  300D               	movlw	13
  6824     091F  1783               	bsf	3,7	;select IRP bank2
  6825     0920  0080               	movwf	0
  6826     0921                     l3451:
  6827                           
  6828                           ;main.c: 462:         packet_length++;
  6829     0921  3001               	movlw	1
  6830     0922  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6831     0923  1803               	skipnc
  6832     0924  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6833     0925  3000               	movlw	0
  6834     0926  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6835     0927                     l3453:
  6836                           
  6837                           ;main.c: 463:         pkt[packet_length] = '\n';
  6838     0927  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6839     0928  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6840     0929  00B6               	movwf	??_ConcatToPacket^(0+128)
  6841     092A  0836               	movf	??_ConcatToPacket^(0+128),w
  6842     092B  0084               	movwf	4
  6843     092C  300A               	movlw	10
  6844     092D  0080               	movwf	0
  6845                           
  6846                           ;main.c: 464:         packet_length++;
  6847     092E  3001               	movlw	1
  6848     092F  07B7               	addwf	ConcatToPacket@packet_length^(0+128),f
  6849     0930  1803               	skipnc
  6850     0931  0AB8               	incf	(ConcatToPacket@packet_length+1)^(0+128),f
  6851     0932  3000               	movlw	0
  6852     0933  07B8               	addwf	(ConcatToPacket@packet_length+1)^(0+128),f
  6853     0934                     l3455:
  6854                           
  6855                           ;main.c: 467:     pkt[packet_length] = '\0';
  6856     0934  0837               	movf	ConcatToPacket@packet_length^(0+128),w
  6857     0935  0739               	addwf	ConcatToPacket@pkt^(0+128),w
  6858     0936  00B6               	movwf	??_ConcatToPacket^(0+128)
  6859     0937  0836               	movf	??_ConcatToPacket^(0+128),w
  6860     0938  0084               	movwf	4
  6861     0939  0180               	clrf	0
  6862     093A                     l211:
  6863     093A  0008               	return
  6864     093B                     __end_of_ConcatToPacket:
  6865                           
  6866                           	psect	text27
  6867     0C43                     __ptext27:	
  6868 ;; *************** function _strcat *****************
  6869 ;; Defined at:
  6870 ;;		line 479 in file "main.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  dest            1    wreg     PTR unsigned char 
  6873 ;;		 -> packet(15), 
  6874 ;;  source          2    7[BANK1 ] PTR unsigned char 
  6875 ;;		 -> STR_14(4), STR_10(4), STR_6(2), main@num_rand_s(16), 
  6876 ;;		 -> PIC_ID(4), 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  dest            1   14[BANK1 ] PTR unsigned char 
  6879 ;;		 -> packet(15), 
  6880 ;;  length_dest     2   17[BANK1 ] int 
  6881 ;;  n               2   15[BANK1 ] int 
  6882 ;; Return value:  Size  Location     Type
  6883 ;;                  2    7[BANK1 ] int 
  6884 ;; Registers used:
  6885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6891 ;;      Params:         0       0       2       0       0
  6892 ;;      Locals:         0       0       5       0       0
  6893 ;;      Temps:          0       0       5       0       0
  6894 ;;      Totals:         0       0      12       0       0
  6895 ;;Total ram usage:       12 bytes
  6896 ;; Hardware stack levels used: 1
  6897 ;; Hardware stack levels required when called: 5
  6898 ;; This function calls:
  6899 ;;		_Length
  6900 ;; This function is called by:
  6901 ;;		_ConcatToPacket
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905     0C43                     _strcat:	
  6906                           ;psect for function _strcat
  6907                           
  6908                           
  6909                           ;incstack = 0
  6910                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6911                           ;strcat@dest stored from wreg
  6912     0C43  1683               	bsf	3,5	;RP0=1, select bank1
  6913     0C44  1303               	bcf	3,6	;RP1=0, select bank1
  6914     0C45  00AE               	movwf	strcat@dest^(0+128)
  6915     0C46                     l3207:
  6916                           
  6917                           ;main.c: 479: int strcat(char* dest, char* source);main.c: 480: {;main.c: 482:     int n
      +                           = 0, length_dest = Length(dest);
  6918     0C46  01AF               	clrf	strcat@n^(0+128)
  6919     0C47  01B0               	clrf	(strcat@n+1)^(0+128)
  6920     0C48                     l3209:
  6921     0C48  082E               	movf	strcat@dest^(0+128),w
  6922     0C49  00A0               	movwf	Length@str^(0+128)
  6923     0C4A  3001               	movlw	1
  6924     0C4B  00A1               	movwf	(Length@str+1)^(0+128)
  6925     0C4C  160A  118A  26C4  120A  158A  	fcall	_Length
  6926     0C51  1683               	bsf	3,5	;RP0=1, select bank1
  6927     0C52  1303               	bcf	3,6	;RP1=0, select bank1
  6928     0C53  0821               	movf	(?_Length+1)^(0+128),w
  6929     0C54  00B2               	movwf	(strcat@length_dest+1)^(0+128)
  6930     0C55  0820               	movf	?_Length^(0+128),w
  6931     0C56  00B1               	movwf	strcat@length_dest^(0+128)
  6932                           
  6933                           ;main.c: 485:     while(source[n] != '\0')
  6934     0C57  2C8E               	goto	l220
  6935     0C58                     l3211:
  6936                           
  6937                           ;main.c: 486:     {;main.c: 487:         dest[length_dest] = source[n];
  6938     0C58  1683               	bsf	3,5	;RP0=1, select bank1
  6939     0C59  1303               	bcf	3,6	;RP1=0, select bank1
  6940     0C5A  082F               	movf	strcat@n^(0+128),w
  6941     0C5B  0727               	addwf	strcat@source^(0+128),w
  6942     0C5C  00AA               	movwf	(??_strcat+1)^(0+128)
  6943     0C5D  0828               	movf	(strcat@source+1)^(0+128),w
  6944     0C5E  00A9               	movwf	??_strcat^(0+128)
  6945     0C5F  1803               	skipnc
  6946     0C60  0AA9               	incf	??_strcat^(0+128),f
  6947     0C61  1FAF               	btfss	strcat@n^(0+128),7
  6948     0C62  2C64               	goto	u3250
  6949     0C63  03A9               	decf	??_strcat^(0+128),f
  6950     0C64                     u3250:
  6951     0C64  1683               	bsf	3,5	;RP0=1, select bank1
  6952     0C65  1303               	bcf	3,6	;RP1=0, select bank1
  6953     0C66  0829               	movf	??_strcat^(0+128),w
  6954     0C67  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  6955     0C68  082B               	movf	(??_strcat+2)^(0+128),w
  6956     0C69  1283               	bcf	3,5	;RP0=0, select bank0
  6957     0C6A  1303               	bcf	3,6	;RP1=0, select bank0
  6958     0C6B  00FF               	movwf	btemp+1
  6959     0C6C  1683               	bsf	3,5	;RP0=1, select bank1
  6960     0C6D  1303               	bcf	3,6	;RP1=0, select bank1
  6961     0C6E  082A               	movf	(??_strcat+1)^(0+128),w
  6962     0C6F  0084               	movwf	4
  6963     0C70  1283               	bcf	3,5	;RP0=0, select bank0
  6964     0C71  1303               	bcf	3,6	;RP1=0, select bank0
  6965     0C72  120A  118A  2700  120A  158A  	fcall	stringtab
  6966     0C77  1683               	bsf	3,5	;RP0=1, select bank1
  6967     0C78  1303               	bcf	3,6	;RP1=0, select bank1
  6968     0C79  00AC               	movwf	(??_strcat+3)^(0+128)
  6969     0C7A  0831               	movf	strcat@length_dest^(0+128),w
  6970     0C7B  072E               	addwf	strcat@dest^(0+128),w
  6971     0C7C  00AD               	movwf	(??_strcat+4)^(0+128)
  6972     0C7D  082D               	movf	(??_strcat+4)^(0+128),w
  6973     0C7E  0084               	movwf	4
  6974     0C7F  082C               	movf	(??_strcat+3)^(0+128),w
  6975     0C80  1783               	bsf	3,7	;select IRP bank2
  6976     0C81  0080               	movwf	0
  6977     0C82                     l3213:
  6978                           
  6979                           ;main.c: 488:         n++;
  6980     0C82  3001               	movlw	1
  6981     0C83  07AF               	addwf	strcat@n^(0+128),f
  6982     0C84  1803               	skipnc
  6983     0C85  0AB0               	incf	(strcat@n+1)^(0+128),f
  6984     0C86  3000               	movlw	0
  6985     0C87  07B0               	addwf	(strcat@n+1)^(0+128),f
  6986     0C88                     l3215:
  6987                           
  6988                           ;main.c: 489:         length_dest++;
  6989     0C88  3001               	movlw	1
  6990     0C89  07B1               	addwf	strcat@length_dest^(0+128),f
  6991     0C8A  1803               	skipnc
  6992     0C8B  0AB2               	incf	(strcat@length_dest+1)^(0+128),f
  6993     0C8C  3000               	movlw	0
  6994     0C8D  07B2               	addwf	(strcat@length_dest+1)^(0+128),f
  6995     0C8E                     l220:	
  6996                           ;main.c: 490:     }
  6997                           
  6998                           
  6999                           ;main.c: 485:     while(source[n] != '\0')
  7000     0C8E  082F               	movf	strcat@n^(0+128),w
  7001     0C8F  0727               	addwf	strcat@source^(0+128),w
  7002     0C90  00AA               	movwf	(??_strcat+1)^(0+128)
  7003     0C91  0828               	movf	(strcat@source+1)^(0+128),w
  7004     0C92  00A9               	movwf	??_strcat^(0+128)
  7005     0C93  1803               	skipnc
  7006     0C94  0AA9               	incf	??_strcat^(0+128),f
  7007     0C95  1FAF               	btfss	strcat@n^(0+128),7
  7008     0C96  2C98               	goto	u3260
  7009     0C97  03A9               	decf	??_strcat^(0+128),f
  7010     0C98                     u3260:
  7011     0C98  1683               	bsf	3,5	;RP0=1, select bank1
  7012     0C99  1303               	bcf	3,6	;RP1=0, select bank1
  7013     0C9A  0829               	movf	??_strcat^(0+128),w
  7014     0C9B  00AB               	movwf	((??_strcat+1)^(0+128)+1)
  7015     0C9C  082B               	movf	(??_strcat+2)^(0+128),w
  7016     0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  7017     0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  7018     0C9F  00FF               	movwf	btemp+1
  7019     0CA0  1683               	bsf	3,5	;RP0=1, select bank1
  7020     0CA1  1303               	bcf	3,6	;RP1=0, select bank1
  7021     0CA2  082A               	movf	(??_strcat+1)^(0+128),w
  7022     0CA3  0084               	movwf	4
  7023     0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  7024     0CA5  1303               	bcf	3,6	;RP1=0, select bank0
  7025     0CA6  120A  118A  2700  120A  158A  	fcall	stringtab
  7026     0CAB  3A00               	xorlw	0
  7027     0CAC  1D03               	skipz
  7028     0CAD  2CAF               	goto	u3271
  7029     0CAE  2CB0               	goto	u3270
  7030     0CAF                     u3271:
  7031     0CAF  2C58               	goto	l3211
  7032     0CB0                     u3270:
  7033     0CB0                     l3217:
  7034                           
  7035                           ;main.c: 493:     return length_dest;
  7036     0CB0  1683               	bsf	3,5	;RP0=1, select bank1
  7037     0CB1  1303               	bcf	3,6	;RP1=0, select bank1
  7038     0CB2  0832               	movf	(strcat@length_dest+1)^(0+128),w
  7039     0CB3  00A8               	movwf	(?_strcat+1)^(0+128)
  7040     0CB4  0831               	movf	strcat@length_dest^(0+128),w
  7041     0CB5  00A7               	movwf	?_strcat^(0+128)
  7042     0CB6                     l223:
  7043     0CB6  0008               	return
  7044     0CB7                     __end_of_strcat:
  7045                           
  7046                           	psect	text28
  7047     16C4                     __ptext28:	
  7048 ;; *************** function _Length *****************
  7049 ;; Defined at:
  7050 ;;		line 470 in file "main.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  str             2    0[BANK1 ] PTR unsigned char 
  7053 ;;		 -> datoSeriale(17), datoTastierino(17), id_dest(4), dato(50), 
  7054 ;;		 -> packet(15), PIC_ID(4), 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  len             2    5[BANK1 ] int 
  7057 ;; Return value:  Size  Location     Type
  7058 ;;                  2    0[BANK1 ] int 
  7059 ;; Registers used:
  7060 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7066 ;;      Params:         0       0       2       0       0
  7067 ;;      Locals:         0       0       2       0       0
  7068 ;;      Temps:          0       0       3       0       0
  7069 ;;      Totals:         0       0       7       0       0
  7070 ;;Total ram usage:        7 bytes
  7071 ;; Hardware stack levels used: 1
  7072 ;; Hardware stack levels required when called: 4
  7073 ;; This function calls:
  7074 ;;		Nothing
  7075 ;; This function is called by:
  7076 ;;		_strcat
  7077 ;;		_SplitPacket
  7078 ;;		_CompareStrings
  7079 ;;		_Fill
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083     16C4                     _Length:	
  7084                           ;psect for function _Length
  7085                           
  7086     16C4                     l2971:	
  7087                           ;incstack = 0
  7088                           ; Regs used in _Length: [wreg-fsr0h+status,2+status,0]
  7089                           
  7090                           
  7091                           ;main.c: 470: int Length(char *str);main.c: 471: {;main.c: 472:     int len = 0;
  7092     16C4  1683               	bsf	3,5	;RP0=1, select bank1
  7093     16C5  1303               	bcf	3,6	;RP1=0, select bank1
  7094     16C6  01A5               	clrf	Length@len^(0+128)
  7095     16C7  01A6               	clrf	(Length@len+1)^(0+128)
  7096                           
  7097                           ;main.c: 474:     while(str[len] != '\0') { len++; }
  7098     16C8  2ECF               	goto	l2975
  7099     16C9                     l2973:
  7100     16C9  3001               	movlw	1
  7101     16CA  07A5               	addwf	Length@len^(0+128),f
  7102     16CB  1803               	skipnc
  7103     16CC  0AA6               	incf	(Length@len+1)^(0+128),f
  7104     16CD  3000               	movlw	0
  7105     16CE  07A6               	addwf	(Length@len+1)^(0+128),f
  7106     16CF                     l2975:
  7107     16CF  0825               	movf	Length@len^(0+128),w
  7108     16D0  0720               	addwf	Length@str^(0+128),w
  7109     16D1  00A3               	movwf	(??_Length+1)^(0+128)
  7110     16D2  0821               	movf	(Length@str+1)^(0+128),w
  7111     16D3  00A2               	movwf	??_Length^(0+128)
  7112     16D4  1803               	skipnc
  7113     16D5  0AA2               	incf	??_Length^(0+128),f
  7114     16D6  1FA5               	btfss	Length@len^(0+128),7
  7115     16D7  2ED9               	goto	u2850
  7116     16D8  03A2               	decf	??_Length^(0+128),f
  7117     16D9                     u2850:
  7118     16D9  1683               	bsf	3,5	;RP0=1, select bank1
  7119     16DA  1303               	bcf	3,6	;RP1=0, select bank1
  7120     16DB  0822               	movf	??_Length^(0+128),w
  7121     16DC  00A4               	movwf	((??_Length+1)^(0+128)+1)
  7122     16DD  0823               	movf	(??_Length+1)^(0+128),w
  7123     16DE  0084               	movwf	4
  7124     16DF  1783               	bsf	3,7
  7125     16E0  1C24               	btfss	(??_Length+2)^(0+128),0
  7126     16E1  1383               	bcf	3,7
  7127     16E2  0800               	movf	0,w
  7128     16E3  1D03               	btfss	3,2
  7129     16E4  2EE6               	goto	u2861
  7130     16E5  2EE7               	goto	u2860
  7131     16E6                     u2861:
  7132     16E6  2EC9               	goto	l2973
  7133     16E7                     u2860:
  7134     16E7                     l2977:
  7135                           
  7136                           ;main.c: 476:     return len;
  7137     16E7  0826               	movf	(Length@len+1)^(0+128),w
  7138     16E8  00A1               	movwf	(?_Length+1)^(0+128)
  7139     16E9  0825               	movf	Length@len^(0+128),w
  7140     16EA  00A0               	movwf	?_Length^(0+128)
  7141     16EB                     l217:
  7142     16EB  0008               	return
  7143     16EC                     __end_of_Length:
  7144                           
  7145                           	psect	text29
  7146     0E35                     __ptext29:	
  7147 ;; *************** function _IRS *****************
  7148 ;; Defined at:
  7149 ;;		line 799 in file "main.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;		None
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;		None
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      void 
  7156 ;; Registers used:
  7157 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 0/0
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7163 ;;      Params:         0       0       0       0       0
  7164 ;;      Locals:         0       0       0       0       0
  7165 ;;      Temps:          0       4       0       0       0
  7166 ;;      Totals:         0       4       0       0       0
  7167 ;;Total ram usage:        4 bytes
  7168 ;; Hardware stack levels used: 1
  7169 ;; Hardware stack levels required when called: 3
  7170 ;; This function calls:
  7171 ;;		i1_UART_TxString
  7172 ;; This function is called by:
  7173 ;;		Interrupt level 1
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177     0E35                     _IRS:	
  7178                           ;psect for function _IRS
  7179                           
  7180     0E35                     i1l2839:
  7181                           
  7182                           ;main.c: 802:     if(RCIF)
  7183     0E35  1E8C               	btfss	12,5	;volatile
  7184     0E36  2E38               	goto	u274_21
  7185     0E37  2E39               	goto	u274_20
  7186     0E38                     u274_21:
  7187     0E38  2E4A               	goto	i1l2851
  7188     0E39                     u274_20:
  7189     0E39                     i1l2841:
  7190                           
  7191                           ;main.c: 803:     {;main.c: 804:         dato[iS++] = RCREG;
  7192     0E39  084F               	movf	_iS,w
  7193     0E3A  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7194     0E3B  0084               	movwf	4
  7195     0E3C  081A               	movf	26,w	;volatile
  7196     0E3D  1783               	bsf	3,7	;select IRP bank2
  7197     0E3E  0080               	movwf	0
  7198     0E3F                     i1l2843:
  7199     0E3F  3001               	movlw	1
  7200     0E40  00B8               	movwf	??_IRS
  7201     0E41  0838               	movf	??_IRS,w
  7202     0E42  07CF               	addwf	_iS,f
  7203     0E43                     i1l2845:
  7204                           
  7205                           ;main.c: 805:         dato[iS] = '\0';
  7206     0E43  084F               	movf	_iS,w
  7207     0E44  3E10               	addlw	(low (_dato| (0+256)))& (0+255)
  7208     0E45  0084               	movwf	4
  7209     0E46  0180               	clrf	0
  7210     0E47                     i1l2847:
  7211                           
  7212                           ;main.c: 806:         recieved = 1;
  7213     0E47  01CD               	clrf	_recieved
  7214     0E48  0ACD               	incf	_recieved,f
  7215     0E49                     i1l2849:
  7216                           
  7217                           ;main.c: 807:         RCIF = 0;
  7218     0E49  128C               	bcf	12,5	;volatile
  7219     0E4A                     i1l2851:
  7220                           
  7221                           ;main.c: 810:     if(T0IF)
  7222     0E4A  1D0B               	btfss	11,2	;volatile
  7223     0E4B  2E4D               	goto	u275_21
  7224     0E4C  2E4E               	goto	u275_20
  7225     0E4D                     u275_21:
  7226     0E4D  2EBD               	goto	i1l326
  7227     0E4E                     u275_20:
  7228     0E4E                     i1l2853:
  7229                           
  7230                           ;main.c: 811:     {;main.c: 812:         TMR0 = 131;
  7231     0E4E  3083               	movlw	131
  7232     0E4F  0081               	movwf	1	;volatile
  7233                           
  7234                           ;main.c: 813:         milliseconds++;
  7235     0E50  3001               	movlw	1
  7236     0E51  07C0               	addwf	_milliseconds,f
  7237     0E52  3000               	movlw	0
  7238     0E53  1803               	skipnc
  7239     0E54  3001               	movlw	1
  7240     0E55  07C1               	addwf	_milliseconds+1,f
  7241     0E56  3000               	movlw	0
  7242     0E57  1803               	skipnc
  7243     0E58  3001               	movlw	1
  7244     0E59  07C2               	addwf	_milliseconds+2,f
  7245     0E5A  3000               	movlw	0
  7246     0E5B  1803               	skipnc
  7247     0E5C  3001               	movlw	1
  7248     0E5D  07C3               	addwf	_milliseconds+3,f
  7249                           
  7250                           ;main.c: 814:         if(seconds != 0 && milliseconds > seconds)
  7251     0E5E  083F               	movf	_seconds+3,w
  7252     0E5F  043E               	iorwf	_seconds+2,w
  7253     0E60  043D               	iorwf	_seconds+1,w
  7254     0E61  043C               	iorwf	_seconds,w
  7255     0E62  1903               	skipnz
  7256     0E63  2E65               	goto	u276_21
  7257     0E64  2E66               	goto	u276_20
  7258     0E65                     u276_21:
  7259     0E65  2EBC               	goto	i1l2871
  7260     0E66                     u276_20:
  7261     0E66                     i1l2855:
  7262     0E66  0843               	movf	_milliseconds+3,w
  7263     0E67  023F               	subwf	_seconds+3,w
  7264     0E68  1D03               	skipz
  7265     0E69  2E74               	goto	u277_25
  7266     0E6A  0842               	movf	_milliseconds+2,w
  7267     0E6B  023E               	subwf	_seconds+2,w
  7268     0E6C  1D03               	skipz
  7269     0E6D  2E74               	goto	u277_25
  7270     0E6E  0841               	movf	_milliseconds+1,w
  7271     0E6F  023D               	subwf	_seconds+1,w
  7272     0E70  1D03               	skipz
  7273     0E71  2E74               	goto	u277_25
  7274     0E72  0840               	movf	_milliseconds,w
  7275     0E73  023C               	subwf	_seconds,w
  7276     0E74                     u277_25:
  7277     0E74  1803               	skipnc
  7278     0E75  2E77               	goto	u277_21
  7279     0E76  2E78               	goto	u277_20
  7280     0E77                     u277_21:
  7281     0E77  2EBC               	goto	i1l2871
  7282     0E78                     u277_20:
  7283     0E78                     i1l2857:
  7284                           
  7285                           ;main.c: 815:         {;main.c: 817:             if(seconds == 1000)
  7286     0E78  30E8               	movlw	232
  7287     0E79  063C               	xorwf	_seconds,w
  7288     0E7A  3003               	movlw	3
  7289     0E7B  1903               	skipnz
  7290     0E7C  063D               	xorwf	_seconds+1,w
  7291     0E7D  043E               	iorwf	_seconds+2,w
  7292     0E7E  043F               	iorwf	_seconds+3,w
  7293     0E7F  1D03               	btfss	3,2
  7294     0E80  2E82               	goto	u278_21
  7295     0E81  2E83               	goto	u278_20
  7296     0E82                     u278_21:
  7297     0E82  2E90               	goto	i1l2863
  7298     0E83                     u278_20:
  7299     0E83                     i1l2859:
  7300                           
  7301                           ;main.c: 818:             {;main.c: 819:                 pr_start = 1;
  7302     0E83  1283               	bcf	3,5	;RP0=0, select bank0
  7303     0E84  1303               	bcf	3,6	;RP1=0, select bank0
  7304     0E85  01CA               	clrf	_pr_start
  7305     0E86  0ACA               	incf	_pr_start,f
  7306     0E87                     i1l2861:
  7307                           
  7308                           ;main.c: 820:                 seconds = 0;
  7309     0E87  3000               	movlw	0
  7310     0E88  00BF               	movwf	_seconds+3
  7311     0E89  3000               	movlw	0
  7312     0E8A  00BE               	movwf	_seconds+2
  7313     0E8B  3000               	movlw	0
  7314     0E8C  00BD               	movwf	_seconds+1
  7315     0E8D  3000               	movlw	0
  7316     0E8E  00BC               	movwf	_seconds
  7317                           
  7318                           ;main.c: 821:             }
  7319     0E8F  2EBC               	goto	i1l2871
  7320     0E90                     i1l2863:
  7321                           
  7322                           ;main.c: 824:             {;main.c: 826:                 if(num_rand != 0)
  7323     0E90  1683               	bsf	3,5	;RP0=1, select bank1
  7324     0E91  1303               	bcf	3,6	;RP1=0, select bank1
  7325     0E92  0862               	movf	_num_rand^(0+128),w
  7326     0E93  0463               	iorwf	(_num_rand+1)^(0+128),w
  7327     0E94  1903               	btfsc	3,2
  7328     0E95  2E97               	goto	u279_21
  7329     0E96  2E98               	goto	u279_20
  7330     0E97                     u279_21:
  7331     0E97  2EA3               	goto	i1l2867
  7332     0E98                     u279_20:
  7333     0E98                     i1l2865:
  7334                           
  7335                           ;main.c: 827:                     seconds = 0;
  7336     0E98  3000               	movlw	0
  7337     0E99  1283               	bcf	3,5	;RP0=0, select bank0
  7338     0E9A  1303               	bcf	3,6	;RP1=0, select bank0
  7339     0E9B  00BF               	movwf	_seconds+3
  7340     0E9C  3000               	movlw	0
  7341     0E9D  00BE               	movwf	_seconds+2
  7342     0E9E  3000               	movlw	0
  7343     0E9F  00BD               	movwf	_seconds+1
  7344     0EA0  3000               	movlw	0
  7345     0EA1  00BC               	movwf	_seconds
  7346     0EA2  2EB5               	goto	i1l2869
  7347     0EA3                     i1l2867:
  7348                           
  7349                           ;main.c: 830:                 {;main.c: 831:                     seconds = 1000;
  7350     0EA3  3000               	movlw	0
  7351     0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  7352     0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  7353     0EA6  00BF               	movwf	_seconds+3
  7354     0EA7  3000               	movlw	0
  7355     0EA8  00BE               	movwf	_seconds+2
  7356     0EA9  3003               	movlw	3
  7357     0EAA  00BD               	movwf	_seconds+1
  7358     0EAB  30E8               	movlw	232
  7359     0EAC  00BC               	movwf	_seconds
  7360                           
  7361                           ;main.c: 832:                     milliseconds = 0;
  7362     0EAD  3000               	movlw	0
  7363     0EAE  00C3               	movwf	_milliseconds+3
  7364     0EAF  3000               	movlw	0
  7365     0EB0  00C2               	movwf	_milliseconds+2
  7366     0EB1  3000               	movlw	0
  7367     0EB2  00C1               	movwf	_milliseconds+1
  7368     0EB3  3000               	movlw	0
  7369     0EB4  00C0               	movwf	_milliseconds
  7370     0EB5                     i1l2869:
  7371                           
  7372                           ;main.c: 834:                 UART_TxString(packet, 0);
  7373     0EB5  01B3               	clrf	i1UART_TxString@is_ACK
  7374     0EB6  30B2               	movlw	(low (_packet| (0+256)))& (0+255)
  7375     0EB7  120A  158A  2363  120A  158A  	fcall	i1_UART_TxString
  7376     0EBC                     i1l2871:
  7377                           
  7378                           ;main.c: 837:         T0IF = 0;
  7379     0EBC  110B               	bcf	11,2	;volatile
  7380     0EBD                     i1l326:
  7381     0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  7382     0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  7383     0EBF  083B               	movf	??_IRS+3,w
  7384     0EC0  008A               	movwf	10
  7385     0EC1  083A               	movf	??_IRS+2,w
  7386     0EC2  0084               	movwf	4
  7387     0EC3  0E39               	swapf	??_IRS+1,w
  7388     0EC4  0083               	movwf	3
  7389     0EC5  0EFE               	swapf	btemp,f
  7390     0EC6  0E7E               	swapf	btemp,w
  7391     0EC7  0009               	retfie
  7392     0EC8                     __end_of_IRS:
  7393                           
  7394                           	psect	intentry
  7395     0004                     __pintentry:	
  7396                           ;incstack = 0
  7397                           ; Regs used in _IRS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7398                           
  7399     0004                     interrupt_function:
  7400     007E                     saved_w	set	btemp
  7401     0004  00FE               	movwf	btemp
  7402     0005  0E03               	swapf	3,w
  7403     0006  1283               	bcf	3,5	;RP0=0, select bank0
  7404     0007  1303               	bcf	3,6	;RP1=0, select bank0
  7405     0008  00B9               	movwf	??_IRS+1
  7406     0009  0804               	movf	4,w
  7407     000A  00BA               	movwf	??_IRS+2
  7408     000B  080A               	movf	10,w
  7409     000C  00BB               	movwf	??_IRS+3
  7410     000D  120A  158A  2E35   	ljmp	_IRS
  7411                           
  7412                           	psect	text30
  7413     0B63                     __ptext30:	
  7414 ;; *************** function i1_UART_TxString *****************
  7415 ;; Defined at:
  7416 ;;		line 778 in file "main.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  str             1    wreg     PTR const unsigned char 
  7419 ;;		 -> packet(15), 
  7420 ;;  is_ACK          1   19[BANK0 ] unsigned char 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  str             1   21[BANK0 ] PTR const unsigned char 
  7423 ;;		 -> packet(15), 
  7424 ;;  n               2   22[BANK0 ] unsigned int 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7434 ;;      Params:         0       1       0       0       0
  7435 ;;      Locals:         0       3       0       0       0
  7436 ;;      Temps:          0       1       0       0       0
  7437 ;;      Totals:         0       5       0       0       0
  7438 ;;Total ram usage:        5 bytes
  7439 ;; Hardware stack levels used: 1
  7440 ;; Hardware stack levels required when called: 2
  7441 ;; This function calls:
  7442 ;;		i1_UART_TxChar
  7443 ;;		i1___awmod
  7444 ;;		i1___wmul
  7445 ;;		i1_rand
  7446 ;;		i1_srand
  7447 ;; This function is called by:
  7448 ;;		_IRS
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452     0B63                     i1_UART_TxString:	
  7453                           ;psect for function i1_UART_TxString
  7454                           
  7455                           
  7456                           ;incstack = 0
  7457                           ; Regs used in i1_UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7458                           ;i1UART_TxString@str stored from wreg
  7459     0B63  1283               	bcf	3,5	;RP0=0, select bank0
  7460     0B64  1303               	bcf	3,6	;RP1=0, select bank0
  7461     0B65  00B5               	movwf	i1UART_TxString@str
  7462     0B66                     i1l2617:
  7463                           
  7464                           ;main.c: 778: void UART_TxString(const char *str, char is_ACK);main.c: 779: {;main.c: 78
      +                          0:     unsigned int n = 0;
  7465     0B66  01B6               	clrf	i1UART_TxString@n
  7466     0B67  01B7               	clrf	i1UART_TxString@n+1
  7467                           
  7468                           ;main.c: 782:     while(str[n] != '\0')
  7469     0B68  2B7C               	goto	i1l2623
  7470     0B69                     i1l2619:
  7471                           
  7472                           ;main.c: 783:     {;main.c: 784:         UART_TxChar(str[n]);
  7473     0B69  0836               	movf	i1UART_TxString@n,w
  7474     0B6A  0735               	addwf	i1UART_TxString@str,w
  7475     0B6B  00B4               	movwf	??i1_UART_TxString
  7476     0B6C  0834               	movf	??i1_UART_TxString,w
  7477     0B6D  0084               	movwf	4
  7478     0B6E  0800               	movf	0,w
  7479     0B6F  160A  118A  2649  120A  158A  	fcall	i1_UART_TxChar
  7480     0B74                     i1l2621:
  7481                           
  7482                           ;main.c: 785:         n++;
  7483     0B74  3001               	movlw	1
  7484     0B75  1283               	bcf	3,5	;RP0=0, select bank0
  7485     0B76  1303               	bcf	3,6	;RP1=0, select bank0
  7486     0B77  07B6               	addwf	i1UART_TxString@n,f
  7487     0B78  1803               	skipnc
  7488     0B79  0AB7               	incf	i1UART_TxString@n+1,f
  7489     0B7A  3000               	movlw	0
  7490     0B7B  07B7               	addwf	i1UART_TxString@n+1,f
  7491     0B7C                     i1l2623:
  7492                           
  7493                           ;main.c: 782:     while(str[n] != '\0')
  7494     0B7C  0836               	movf	i1UART_TxString@n,w
  7495     0B7D  0735               	addwf	i1UART_TxString@str,w
  7496     0B7E  00B4               	movwf	??i1_UART_TxString
  7497     0B7F  0834               	movf	??i1_UART_TxString,w
  7498     0B80  0084               	movwf	4
  7499     0B81  1783               	bsf	3,7	;select IRP bank2
  7500     0B82  0800               	movf	0,w
  7501     0B83  1D03               	btfss	3,2
  7502     0B84  2B86               	goto	u251_21
  7503     0B85  2B87               	goto	u251_20
  7504     0B86                     u251_21:
  7505     0B86  2B69               	goto	i1l2619
  7506     0B87                     u251_20:
  7507     0B87                     i1l2625:
  7508                           
  7509                           ;main.c: 788:     if(is_ACK == 0)
  7510     0B87  0833               	movf	i1UART_TxString@is_ACK,w
  7511     0B88  1D03               	btfss	3,2
  7512     0B89  2B8B               	goto	u252_21
  7513     0B8A  2B8C               	goto	u252_20
  7514     0B8B                     u252_21:
  7515     0B8B  2BD1               	goto	i1l314
  7516     0B8C                     u252_20:
  7517     0B8C                     i1l2627:
  7518                           
  7519                           ;main.c: 789:     {;main.c: 792:         srand(milliseconds);
  7520     0B8C  0841               	movf	_milliseconds+1,w
  7521     0B8D  00F1               	movwf	i1srand@x+1
  7522     0B8E  0840               	movf	_milliseconds,w
  7523     0B8F  00F0               	movwf	i1srand@x
  7524     0B90  160A  118A  2640  120A  158A  	fcall	i1_srand
  7525     0B95                     i1l2629:
  7526                           
  7527                           ;main.c: 793:         milliseconds = 0;
  7528     0B95  3000               	movlw	0
  7529     0B96  1283               	bcf	3,5	;RP0=0, select bank0
  7530     0B97  1303               	bcf	3,6	;RP1=0, select bank0
  7531     0B98  00C3               	movwf	_milliseconds+3
  7532     0B99  3000               	movlw	0
  7533     0B9A  00C2               	movwf	_milliseconds+2
  7534     0B9B  3000               	movlw	0
  7535     0B9C  00C1               	movwf	_milliseconds+1
  7536     0B9D  3000               	movlw	0
  7537     0B9E  00C0               	movwf	_milliseconds
  7538     0B9F                     i1l2631:
  7539                           
  7540                           ;main.c: 795:         seconds = ((rand()%10)+5) * 250;
  7541     0B9F  300A               	movlw	10
  7542     0BA0  00A7               	movwf	i1___awmod@divisor
  7543     0BA1  3000               	movlw	0
  7544     0BA2  00A8               	movwf	i1___awmod@divisor+1
  7545     0BA3  120A  158A  2062  120A  158A  	fcall	i1_rand
  7546     0BA8  1283               	bcf	3,5	;RP0=0, select bank0
  7547     0BA9  1303               	bcf	3,6	;RP1=0, select bank0
  7548     0BAA  0821               	movf	?i1_rand+1,w
  7549     0BAB  00AA               	movwf	i1___awmod@dividend+1
  7550     0BAC  0820               	movf	?i1_rand,w
  7551     0BAD  00A9               	movwf	i1___awmod@dividend
  7552     0BAE  120A  158A  21E8  120A  158A  	fcall	i1___awmod
  7553     0BB3  1283               	bcf	3,5	;RP0=0, select bank0
  7554     0BB4  1303               	bcf	3,6	;RP1=0, select bank0
  7555     0BB5  0827               	movf	?i1___awmod,w
  7556     0BB6  3E05               	addlw	5
  7557     0BB7  00AD               	movwf	i1___wmul@multiplier
  7558     0BB8  0828               	movf	?i1___awmod+1,w
  7559     0BB9  1803               	skipnc
  7560     0BBA  3E01               	addlw	1
  7561     0BBB  3E00               	addlw	0
  7562     0BBC  00AE               	movwf	i1___wmul@multiplier+1
  7563     0BBD  30FA               	movlw	250
  7564     0BBE  00AF               	movwf	i1___wmul@multiplicand
  7565     0BBF  3000               	movlw	0
  7566     0BC0  00B0               	movwf	i1___wmul@multiplicand+1
  7567     0BC1  160A  118A  2676  120A  158A  	fcall	i1___wmul
  7568     0BC6  1283               	bcf	3,5	;RP0=0, select bank0
  7569     0BC7  1303               	bcf	3,6	;RP1=0, select bank0
  7570     0BC8  082D               	movf	?i1___wmul,w
  7571     0BC9  00BC               	movwf	_seconds
  7572     0BCA  082E               	movf	?i1___wmul+1,w
  7573     0BCB  00BD               	movwf	_seconds+1
  7574     0BCC  3000               	movlw	0
  7575     0BCD  1BBD               	btfsc	_seconds+1,7
  7576     0BCE  30FF               	movlw	255
  7577     0BCF  00BE               	movwf	_seconds+2
  7578     0BD0  00BF               	movwf	_seconds+3
  7579     0BD1                     i1l314:
  7580     0BD1  0008               	return
  7581     0BD2                     __end_ofi1_UART_TxString:
  7582                           
  7583                           	psect	text31
  7584     1640                     __ptext31:	
  7585 ;; *************** function i1_srand *****************
  7586 ;; Defined at:
  7587 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  x               2    0[COMMON] unsigned int 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7601 ;;      Params:         2       0       0       0       0
  7602 ;;      Locals:         0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0
  7604 ;;      Totals:         2       0       0       0       0
  7605 ;;Total ram usage:        2 bytes
  7606 ;; Hardware stack levels used: 1
  7607 ;; This function calls:
  7608 ;;		Nothing
  7609 ;; This function is called by:
  7610 ;;		i1_UART_TxString
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614     1640                     i1_srand:	
  7615                           ;psect for function i1_srand
  7616                           
  7617     1640                     i1l2397:	
  7618                           ;incstack = 0
  7619                           ; Regs used in i1_srand: [wreg]
  7620                           
  7621     1640  0870               	movf	i1srand@x,w
  7622     1641  1283               	bcf	3,5	;RP0=0, select bank0
  7623     1642  1303               	bcf	3,6	;RP1=0, select bank0
  7624     1643  00D4               	movwf	_randx
  7625     1644  0871               	movf	i1srand@x+1,w
  7626     1645  00D5               	movwf	_randx+1
  7627     1646  01D6               	clrf	_randx+2
  7628     1647  01D7               	clrf	_randx+3
  7629     1648                     i1l902:
  7630     1648  0008               	return
  7631     1649                     __end_ofi1_srand:
  7632                           
  7633                           	psect	text32
  7634     0862                     __ptext32:	
  7635 ;; *************** function i1_rand *****************
  7636 ;; Defined at:
  7637 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\rand.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  2    0[BANK0 ] int 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, status,0, pclath, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/0
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7651 ;;      Params:         0       2       0       0       0
  7652 ;;      Locals:         0       0       0       0       0
  7653 ;;      Temps:          0       5       0       0       0
  7654 ;;      Totals:         0       7       0       0       0
  7655 ;;Total ram usage:        7 bytes
  7656 ;; Hardware stack levels used: 1
  7657 ;; Hardware stack levels required when called: 1
  7658 ;; This function calls:
  7659 ;;		i1___lmul
  7660 ;; This function is called by:
  7661 ;;		i1_UART_TxString
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665     0862                     i1_rand:	
  7666                           ;psect for function i1_rand
  7667                           
  7668     0862                     i1l2399:	
  7669                           ;incstack = 0
  7670                           ; Regs used in i1_rand: [wreg+status,2+status,0+pclath+cstack]
  7671                           
  7672     0862  1283               	bcf	3,5	;RP0=0, select bank0
  7673     0863  1303               	bcf	3,6	;RP1=0, select bank0
  7674     0864  0857               	movf	_randx+3,w
  7675     0865  00F3               	movwf	i1___lmul@multiplier+3
  7676     0866  0856               	movf	_randx+2,w
  7677     0867  00F2               	movwf	i1___lmul@multiplier+2
  7678     0868  0855               	movf	_randx+1,w
  7679     0869  00F1               	movwf	i1___lmul@multiplier+1
  7680     086A  0854               	movf	_randx,w
  7681     086B  00F0               	movwf	i1___lmul@multiplier
  7682     086C  3041               	movlw	65
  7683     086D  00F7               	movwf	i1___lmul@multiplicand+3
  7684     086E  30C6               	movlw	198
  7685     086F  00F6               	movwf	i1___lmul@multiplicand+2
  7686     0870  304E               	movlw	78
  7687     0871  00F5               	movwf	i1___lmul@multiplicand+1
  7688     0872  306D               	movlw	109
  7689     0873  00F4               	movwf	i1___lmul@multiplicand
  7690     0874  120A  158A  201C  120A  158A  	fcall	i1___lmul
  7691     0879  0873               	movf	?i1___lmul+3,w
  7692     087A  1283               	bcf	3,5	;RP0=0, select bank0
  7693     087B  1303               	bcf	3,6	;RP1=0, select bank0
  7694     087C  00D7               	movwf	_randx+3
  7695     087D  0872               	movf	?i1___lmul+2,w
  7696     087E  00D6               	movwf	_randx+2
  7697     087F  0871               	movf	?i1___lmul+1,w
  7698     0880  00D5               	movwf	_randx+1
  7699     0881  0870               	movf	?i1___lmul,w
  7700     0882  00D4               	movwf	_randx
  7701     0883                     i1l2401:
  7702     0883  3039               	movlw	57
  7703     0884  07D4               	addwf	_randx,f
  7704     0885  3030               	movlw	48
  7705     0886  1803               	skipnc
  7706     0887  3031               	movlw	49
  7707     0888  07D5               	addwf	_randx+1,f
  7708     0889  3000               	movlw	0
  7709     088A  1803               	skipnc
  7710     088B  3001               	movlw	1
  7711     088C  07D6               	addwf	_randx+2,f
  7712     088D  3000               	movlw	0
  7713     088E  1803               	skipnc
  7714     088F  3001               	movlw	1
  7715     0890  07D7               	addwf	_randx+3,f
  7716     0891                     i1l2403:
  7717     0891  0854               	movf	_randx,w
  7718     0892  00A2               	movwf	??i1_rand
  7719     0893  0855               	movf	_randx+1,w
  7720     0894  00A3               	movwf	??i1_rand+1
  7721     0895  0856               	movf	_randx+2,w
  7722     0896  00A4               	movwf	??i1_rand+2
  7723     0897  0857               	movf	_randx+3,w
  7724     0898  00A5               	movwf	??i1_rand+3
  7725     0899  3010               	movlw	16
  7726     089A  00A6               	movwf	??i1_rand+4
  7727     089B                     u220_25:
  7728     089B  0D25               	rlf	??i1_rand+3,w
  7729     089C  0CA5               	rrf	??i1_rand+3,f
  7730     089D  0CA4               	rrf	??i1_rand+2,f
  7731     089E  0CA3               	rrf	??i1_rand+1,f
  7732     089F  0CA2               	rrf	??i1_rand,f
  7733     08A0                     u220_20:
  7734     08A0  0BA6               	decfsz	??i1_rand+4,f
  7735     08A1  289B               	goto	u220_25
  7736     08A2  30FF               	movlw	255
  7737     08A3  0522               	andwf	??i1_rand,w
  7738     08A4  00A0               	movwf	?i1_rand
  7739     08A5  307F               	movlw	127
  7740     08A6  0523               	andwf	??i1_rand+1,w
  7741     08A7  00A1               	movwf	?i1_rand+1
  7742     08A8                     i1l905:
  7743     08A8  0008               	return
  7744     08A9                     __end_ofi1_rand:
  7745                           
  7746                           	psect	text33
  7747     081C                     __ptext33:	
  7748 ;; *************** function i1___lmul *****************
  7749 ;; Defined at:
  7750 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  7751 ;; Parameters:    Size  Location     Type
  7752 ;;  multiplier      4    0[COMMON] unsigned long 
  7753 ;;  multiplicand    4    4[COMMON] unsigned long 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  product         4    9[COMMON] unsigned long 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  4    0[COMMON] unsigned long 
  7758 ;; Registers used:
  7759 ;;		wreg, status,2, status,0
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7765 ;;      Params:         8       0       0       0       0
  7766 ;;      Locals:         4       0       0       0       0
  7767 ;;      Temps:          1       0       0       0       0
  7768 ;;      Totals:        13       0       0       0       0
  7769 ;;Total ram usage:       13 bytes
  7770 ;; Hardware stack levels used: 1
  7771 ;; This function calls:
  7772 ;;		Nothing
  7773 ;; This function is called by:
  7774 ;;		i1_rand
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778     081C                     i1___lmul:	
  7779                           ;psect for function i1___lmul
  7780                           
  7781     081C                     i1l2087:	
  7782                           ;incstack = 0
  7783                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  7784                           
  7785     081C  3000               	movlw	0
  7786     081D  00FC               	movwf	i1___lmul@product+3
  7787     081E  3000               	movlw	0
  7788     081F  00FB               	movwf	i1___lmul@product+2
  7789     0820  3000               	movlw	0
  7790     0821  00FA               	movwf	i1___lmul@product+1
  7791     0822  3000               	movlw	0
  7792     0823  00F9               	movwf	i1___lmul@product
  7793     0824                     i1l2089:
  7794     0824  1C70               	btfss	i1___lmul@multiplier,0
  7795     0825  2827               	goto	u171_21
  7796     0826  2828               	goto	u171_20
  7797     0827                     u171_21:
  7798     0827  283F               	goto	i1l2093
  7799     0828                     u171_20:
  7800     0828                     i1l2091:
  7801     0828  0874               	movf	i1___lmul@multiplicand,w
  7802     0829  07F9               	addwf	i1___lmul@product,f
  7803     082A  0875               	movf	i1___lmul@multiplicand+1,w
  7804     082B  1103               	clrz
  7805     082C  1803               	skipnc
  7806     082D  3E01               	addlw	1
  7807     082E  1903               	skipnz
  7808     082F  2831               	goto	u172_21
  7809     0830  07FA               	addwf	i1___lmul@product+1,f
  7810     0831                     u172_21:
  7811     0831  0876               	movf	i1___lmul@multiplicand+2,w
  7812     0832  1103               	clrz
  7813     0833  1803               	skipnc
  7814     0834  3E01               	addlw	1
  7815     0835  1903               	skipnz
  7816     0836  2838               	goto	u172_22
  7817     0837  07FB               	addwf	i1___lmul@product+2,f
  7818     0838                     u172_22:
  7819     0838  0877               	movf	i1___lmul@multiplicand+3,w
  7820     0839  1103               	clrz
  7821     083A  1803               	skipnc
  7822     083B  3E01               	addlw	1
  7823     083C  1903               	skipnz
  7824     083D  283F               	goto	u172_23
  7825     083E  07FC               	addwf	i1___lmul@product+3,f
  7826     083F                     u172_23:
  7827     083F                     i1l2093:
  7828     083F  3001               	movlw	1
  7829     0840  00F8               	movwf	??i1___lmul
  7830     0841                     u173_25:
  7831     0841  1003               	clrc
  7832     0842  0DF4               	rlf	i1___lmul@multiplicand,f
  7833     0843  0DF5               	rlf	i1___lmul@multiplicand+1,f
  7834     0844  0DF6               	rlf	i1___lmul@multiplicand+2,f
  7835     0845  0DF7               	rlf	i1___lmul@multiplicand+3,f
  7836     0846  0BF8               	decfsz	??i1___lmul,f
  7837     0847  2841               	goto	u173_25
  7838     0848                     i1l2095:
  7839     0848  3001               	movlw	1
  7840     0849                     u174_25:
  7841     0849  1003               	clrc
  7842     084A  0CF3               	rrf	i1___lmul@multiplier+3,f
  7843     084B  0CF2               	rrf	i1___lmul@multiplier+2,f
  7844     084C  0CF1               	rrf	i1___lmul@multiplier+1,f
  7845     084D  0CF0               	rrf	i1___lmul@multiplier,f
  7846     084E  3EFF               	addlw	-1
  7847     084F  1D03               	skipz
  7848     0850  2849               	goto	u174_25
  7849     0851  0873               	movf	i1___lmul@multiplier+3,w
  7850     0852  0472               	iorwf	i1___lmul@multiplier+2,w
  7851     0853  0471               	iorwf	i1___lmul@multiplier+1,w
  7852     0854  0470               	iorwf	i1___lmul@multiplier,w
  7853     0855  1D03               	skipz
  7854     0856  2858               	goto	u175_21
  7855     0857  2859               	goto	u175_20
  7856     0858                     u175_21:
  7857     0858  2824               	goto	i1l2089
  7858     0859                     u175_20:
  7859     0859                     i1l2097:
  7860     0859  087C               	movf	i1___lmul@product+3,w
  7861     085A  00F3               	movwf	?i1___lmul+3
  7862     085B  087B               	movf	i1___lmul@product+2,w
  7863     085C  00F2               	movwf	?i1___lmul+2
  7864     085D  087A               	movf	i1___lmul@product+1,w
  7865     085E  00F1               	movwf	?i1___lmul+1
  7866     085F  0879               	movf	i1___lmul@product,w
  7867     0860  00F0               	movwf	?i1___lmul
  7868     0861                     i1l463:
  7869     0861  0008               	return
  7870     0862                     __end_ofi1___lmul:
  7871                           
  7872                           	psect	text34
  7873     1676                     __ptext34:	
  7874 ;; *************** function i1___wmul *****************
  7875 ;; Defined at:
  7876 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  multiplier      2   13[BANK0 ] unsigned int 
  7879 ;;  multiplicand    2   15[BANK0 ] unsigned int 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  product         2   17[BANK0 ] unsigned int 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  2   13[BANK0 ] unsigned int 
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7891 ;;      Params:         0       4       0       0       0
  7892 ;;      Locals:         0       2       0       0       0
  7893 ;;      Temps:          0       0       0       0       0
  7894 ;;      Totals:         0       6       0       0       0
  7895 ;;Total ram usage:        6 bytes
  7896 ;; Hardware stack levels used: 1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		i1_UART_TxString
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904     1676                     i1___wmul:	
  7905                           ;psect for function i1___wmul
  7906                           
  7907     1676                     i1l2345:	
  7908                           ;incstack = 0
  7909                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  7910                           
  7911     1676  1283               	bcf	3,5	;RP0=0, select bank0
  7912     1677  1303               	bcf	3,6	;RP1=0, select bank0
  7913     1678  01B1               	clrf	i1___wmul@product
  7914     1679  01B2               	clrf	i1___wmul@product+1
  7915     167A                     i1l2347:
  7916     167A  1C2D               	btfss	i1___wmul@multiplier,0
  7917     167B  2E7D               	goto	u207_21
  7918     167C  2E7E               	goto	u207_20
  7919     167D                     u207_21:
  7920     167D  2E84               	goto	i1l449
  7921     167E                     u207_20:
  7922     167E                     i1l2349:
  7923     167E  082F               	movf	i1___wmul@multiplicand,w
  7924     167F  07B1               	addwf	i1___wmul@product,f
  7925     1680  1803               	skipnc
  7926     1681  0AB2               	incf	i1___wmul@product+1,f
  7927     1682  0830               	movf	i1___wmul@multiplicand+1,w
  7928     1683  07B2               	addwf	i1___wmul@product+1,f
  7929     1684                     i1l449:
  7930     1684  3001               	movlw	1
  7931     1685                     u208_25:
  7932     1685  1003               	clrc
  7933     1686  0DAF               	rlf	i1___wmul@multiplicand,f
  7934     1687  0DB0               	rlf	i1___wmul@multiplicand+1,f
  7935     1688  3EFF               	addlw	-1
  7936     1689  1D03               	skipz
  7937     168A  2E85               	goto	u208_25
  7938     168B                     i1l2351:
  7939     168B  3001               	movlw	1
  7940     168C                     u209_25:
  7941     168C  1003               	clrc
  7942     168D  0CAE               	rrf	i1___wmul@multiplier+1,f
  7943     168E  0CAD               	rrf	i1___wmul@multiplier,f
  7944     168F  3EFF               	addlw	-1
  7945     1690  1D03               	skipz
  7946     1691  2E8C               	goto	u209_25
  7947     1692                     i1l2353:
  7948     1692  082D               	movf	i1___wmul@multiplier,w
  7949     1693  042E               	iorwf	i1___wmul@multiplier+1,w
  7950     1694  1D03               	btfss	3,2
  7951     1695  2E97               	goto	u210_21
  7952     1696  2E98               	goto	u210_20
  7953     1697                     u210_21:
  7954     1697  2E7A               	goto	i1l2347
  7955     1698                     u210_20:
  7956     1698                     i1l2355:
  7957     1698  0832               	movf	i1___wmul@product+1,w
  7958     1699  00AE               	movwf	?i1___wmul+1
  7959     169A  0831               	movf	i1___wmul@product,w
  7960     169B  00AD               	movwf	?i1___wmul
  7961     169C                     i1l451:
  7962     169C  0008               	return
  7963     169D                     __end_ofi1___wmul:
  7964                           
  7965                           	psect	text35
  7966     09E8                     __ptext35:	
  7967 ;; *************** function i1___awmod *****************
  7968 ;; Defined at:
  7969 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  divisor         2    7[BANK0 ] int 
  7972 ;;  dividend        2    9[BANK0 ] int 
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;  sign            1   12[BANK0 ] unsigned char 
  7975 ;;  counter         1   11[BANK0 ] unsigned char 
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  2    7[BANK0 ] int 
  7978 ;; Registers used:
  7979 ;;		wreg, status,2, status,0
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7985 ;;      Params:         0       4       0       0       0
  7986 ;;      Locals:         0       2       0       0       0
  7987 ;;      Temps:          1       0       0       0       0
  7988 ;;      Totals:         1       6       0       0       0
  7989 ;;Total ram usage:        7 bytes
  7990 ;; Hardware stack levels used: 1
  7991 ;; This function calls:
  7992 ;;		Nothing
  7993 ;; This function is called by:
  7994 ;;		i1_UART_TxString
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998     09E8                     i1___awmod:	
  7999                           ;psect for function i1___awmod
  8000                           
  8001     09E8                     i1l2359:	
  8002                           ;incstack = 0
  8003                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  8004                           
  8005     09E8  1283               	bcf	3,5	;RP0=0, select bank0
  8006     09E9  1303               	bcf	3,6	;RP1=0, select bank0
  8007     09EA  01AC               	clrf	i1___awmod@sign
  8008     09EB                     i1l2361:
  8009     09EB  1FAA               	btfss	i1___awmod@dividend+1,7
  8010     09EC  29EE               	goto	u211_21
  8011     09ED  29EF               	goto	u211_20
  8012     09EE                     u211_21:
  8013     09EE  29F6               	goto	i1l2367
  8014     09EF                     u211_20:
  8015     09EF                     i1l2363:
  8016     09EF  09A9               	comf	i1___awmod@dividend,f
  8017     09F0  09AA               	comf	i1___awmod@dividend+1,f
  8018     09F1  0AA9               	incf	i1___awmod@dividend,f
  8019     09F2  1903               	skipnz
  8020     09F3  0AAA               	incf	i1___awmod@dividend+1,f
  8021     09F4                     i1l2365:
  8022     09F4  01AC               	clrf	i1___awmod@sign
  8023     09F5  0AAC               	incf	i1___awmod@sign,f
  8024     09F6                     i1l2367:
  8025     09F6  1FA8               	btfss	i1___awmod@divisor+1,7
  8026     09F7  29F9               	goto	u212_21
  8027     09F8  29FA               	goto	u212_20
  8028     09F9                     u212_21:
  8029     09F9  29FF               	goto	i1l2371
  8030     09FA                     u212_20:
  8031     09FA                     i1l2369:
  8032     09FA  09A7               	comf	i1___awmod@divisor,f
  8033     09FB  09A8               	comf	i1___awmod@divisor+1,f
  8034     09FC  0AA7               	incf	i1___awmod@divisor,f
  8035     09FD  1903               	skipnz
  8036     09FE  0AA8               	incf	i1___awmod@divisor+1,f
  8037     09FF                     i1l2371:
  8038     09FF  0827               	movf	i1___awmod@divisor,w
  8039     0A00  0428               	iorwf	i1___awmod@divisor+1,w
  8040     0A01  1903               	btfsc	3,2
  8041     0A02  2A04               	goto	u213_21
  8042     0A03  2A05               	goto	u213_20
  8043     0A04                     u213_21:
  8044     0A04  2A34               	goto	i1l2389
  8045     0A05                     u213_20:
  8046     0A05                     i1l2373:
  8047     0A05  01AB               	clrf	i1___awmod@counter
  8048     0A06  0AAB               	incf	i1___awmod@counter,f
  8049     0A07  2A13               	goto	i1l2379
  8050     0A08                     i1l2375:
  8051     0A08  3001               	movlw	1
  8052     0A09                     u214_25:
  8053     0A09  1003               	clrc
  8054     0A0A  0DA7               	rlf	i1___awmod@divisor,f
  8055     0A0B  0DA8               	rlf	i1___awmod@divisor+1,f
  8056     0A0C  3EFF               	addlw	-1
  8057     0A0D  1D03               	skipz
  8058     0A0E  2A09               	goto	u214_25
  8059     0A0F                     i1l2377:
  8060     0A0F  3001               	movlw	1
  8061     0A10  00FD               	movwf	??i1___awmod
  8062     0A11  087D               	movf	??i1___awmod,w
  8063     0A12  07AB               	addwf	i1___awmod@counter,f
  8064     0A13                     i1l2379:
  8065     0A13  1FA8               	btfss	i1___awmod@divisor+1,7
  8066     0A14  2A16               	goto	u215_21
  8067     0A15  2A17               	goto	u215_20
  8068     0A16                     u215_21:
  8069     0A16  2A08               	goto	i1l2375
  8070     0A17                     u215_20:
  8071     0A17                     i1l2381:
  8072     0A17  0828               	movf	i1___awmod@divisor+1,w
  8073     0A18  022A               	subwf	i1___awmod@dividend+1,w
  8074     0A19  1D03               	skipz
  8075     0A1A  2A1D               	goto	u216_25
  8076     0A1B  0827               	movf	i1___awmod@divisor,w
  8077     0A1C  0229               	subwf	i1___awmod@dividend,w
  8078     0A1D                     u216_25:
  8079     0A1D  1C03               	skipc
  8080     0A1E  2A20               	goto	u216_21
  8081     0A1F  2A21               	goto	u216_20
  8082     0A20                     u216_21:
  8083     0A20  2A27               	goto	i1l2385
  8084     0A21                     u216_20:
  8085     0A21                     i1l2383:
  8086     0A21  0827               	movf	i1___awmod@divisor,w
  8087     0A22  02A9               	subwf	i1___awmod@dividend,f
  8088     0A23  0828               	movf	i1___awmod@divisor+1,w
  8089     0A24  1C03               	skipc
  8090     0A25  03AA               	decf	i1___awmod@dividend+1,f
  8091     0A26  02AA               	subwf	i1___awmod@dividend+1,f
  8092     0A27                     i1l2385:
  8093     0A27  3001               	movlw	1
  8094     0A28                     u217_25:
  8095     0A28  1003               	clrc
  8096     0A29  0CA8               	rrf	i1___awmod@divisor+1,f
  8097     0A2A  0CA7               	rrf	i1___awmod@divisor,f
  8098     0A2B  3EFF               	addlw	-1
  8099     0A2C  1D03               	skipz
  8100     0A2D  2A28               	goto	u217_25
  8101     0A2E                     i1l2387:
  8102     0A2E  3001               	movlw	1
  8103     0A2F  02AB               	subwf	i1___awmod@counter,f
  8104     0A30  1D03               	btfss	3,2
  8105     0A31  2A33               	goto	u218_21
  8106     0A32  2A34               	goto	u218_20
  8107     0A33                     u218_21:
  8108     0A33  2A17               	goto	i1l2381
  8109     0A34                     u218_20:
  8110     0A34                     i1l2389:
  8111     0A34  082C               	movf	i1___awmod@sign,w
  8112     0A35  1903               	btfsc	3,2
  8113     0A36  2A38               	goto	u219_21
  8114     0A37  2A39               	goto	u219_20
  8115     0A38                     u219_21:
  8116     0A38  2A3E               	goto	i1l2393
  8117     0A39                     u219_20:
  8118     0A39                     i1l2391:
  8119     0A39  09A9               	comf	i1___awmod@dividend,f
  8120     0A3A  09AA               	comf	i1___awmod@dividend+1,f
  8121     0A3B  0AA9               	incf	i1___awmod@dividend,f
  8122     0A3C  1903               	skipnz
  8123     0A3D  0AAA               	incf	i1___awmod@dividend+1,f
  8124     0A3E                     i1l2393:
  8125     0A3E  082A               	movf	i1___awmod@dividend+1,w
  8126     0A3F  00A8               	movwf	?i1___awmod+1
  8127     0A40  0829               	movf	i1___awmod@dividend,w
  8128     0A41  00A7               	movwf	?i1___awmod
  8129     0A42                     i1l615:
  8130     0A42  0008               	return
  8131     0A43                     __end_ofi1___awmod:
  8132                           
  8133                           	psect	text36
  8134     1649                     __ptext36:	
  8135 ;; *************** function i1_UART_TxChar *****************
  8136 ;; Defined at:
  8137 ;;		line 768 in file "main.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  ch              1    wreg     unsigned char 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  ch              1    1[COMMON] unsigned char 
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  1    wreg      void 
  8144 ;; Registers used:
  8145 ;;		wreg, status,2, status,0
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8151 ;;      Params:         0       0       0       0       0
  8152 ;;      Locals:         1       0       0       0       0
  8153 ;;      Temps:          1       0       0       0       0
  8154 ;;      Totals:         2       0       0       0       0
  8155 ;;Total ram usage:        2 bytes
  8156 ;; Hardware stack levels used: 1
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		i1_UART_TxString
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164     1649                     i1_UART_TxChar:	
  8165                           ;psect for function i1_UART_TxChar
  8166                           
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in i1_UART_TxChar: [wreg+status,2+status,0]
  8170                           ;i1UART_TxChar@ch stored from wreg
  8171     1649  00F1               	movwf	i1UART_TxChar@ch
  8172     164A                     i1l2339:
  8173     164A                     i1l304:	
  8174                           ;main.c: 768: void UART_TxChar(char ch);main.c: 769: {;main.c: 771:     while(!(PIR1 & 0
      +                          x10));
  8175                           
  8176     164A  1283               	bcf	3,5	;RP0=0, select bank0
  8177     164B  1303               	bcf	3,6	;RP1=0, select bank0
  8178     164C  1E0C               	btfss	12,4	;volatile
  8179     164D  2E4F               	goto	u206_21
  8180     164E  2E50               	goto	u206_20
  8181     164F                     u206_21:
  8182     164F  2E4A               	goto	i1l304
  8183     1650                     u206_20:
  8184     1650                     i1l2341:
  8185                           
  8186                           ;main.c: 773:     PIR1 &= ~0x10;
  8187     1650  30EF               	movlw	239
  8188     1651  00F0               	movwf	??i1_UART_TxChar
  8189     1652  0870               	movf	??i1_UART_TxChar,w
  8190     1653  058C               	andwf	12,f	;volatile
  8191     1654                     i1l2343:
  8192                           
  8193                           ;main.c: 775:     TXREG = ch;
  8194     1654  0871               	movf	i1UART_TxChar@ch,w
  8195     1655  0099               	movwf	25	;volatile
  8196     1656                     i1l307:
  8197     1656  0008               	return
  8198     1657                     __end_ofi1_UART_TxChar:
  8199     007E                     btemp	set	126	;btemp
  8200     007E                     wtemp0	set	126
  8201                           
  8202                           	psect	idloc
  8203                           
  8204                           ;Config register IDLOC0 @ 0x2000
  8205                           ;	unspecified, using default values
  8206     2000                     	org	8192
  8207     2000  3FFF               	dw	16383
  8208                           
  8209                           ;Config register IDLOC1 @ 0x2001
  8210                           ;	unspecified, using default values
  8211     2001                     	org	8193
  8212     2001  3FFF               	dw	16383
  8213                           
  8214                           ;Config register IDLOC2 @ 0x2002
  8215                           ;	unspecified, using default values
  8216     2002                     	org	8194
  8217     2002  3FFF               	dw	16383
  8218                           
  8219                           ;Config register IDLOC3 @ 0x2003
  8220                           ;	unspecified, using default values
  8221     2003                     	org	8195
  8222     2003  3FFF               	dw	16383
  8223                           
  8224                           	psect	config
  8225                           
  8226                           ;Config register CONFIG @ 0x2007
  8227                           ;	Oscillator Selection bits
  8228                           ;	FOSC = HS, HS oscillator
  8229                           ;	Watchdog Timer Enable bit
  8230                           ;	WDTE = OFF, WDT disabled
  8231                           ;	Power-up Timer Enable bit
  8232                           ;	PWRTE = ON, PWRT enabled
  8233                           ;	Brown-out Reset Enable bit
  8234                           ;	BOREN = ON, BOR enabled
  8235                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  8236                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  8237                           ;	Data EEPROM Memory Code Protection bit
  8238                           ;	CPD = OFF, Data EEPROM code protection off
  8239                           ;	Flash Program Memory Write Enable bits
  8240                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  8241                           ;	In-Circuit Debugger Mode bit
  8242                           ;	DEBUG = 0x1, unprogrammed default
  8243                           ;	Flash Program Memory Code Protection bit
  8244                           ;	CP = OFF, Code protection off
  8245     2007                     	org	8199
  8246     2007  3FF2               	dw	16370

Data Sizes:
    Strings     191
    Constant    19
    Data        7
    BSS         138
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      56
    BANK1            80     66      80
    BANK3            96     27      80
    BANK2            96      0      50

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Fill@id	PTR unsigned char  size(1) Largest target is 4
		 -> PIC_ID(BANK0[4]), 

    CompareStrings@str2	PTR unsigned char  size(2) Largest target is 17
		 -> datoTastierino(BANK3[17]), PIC_ID(BANK0[4]), 

    CompareStrings@str1	PTR unsigned char  size(1) Largest target is 17
		 -> datoSeriale(BANK3[17]), id_dest(BANK3[4]), 

    strcopy@source	PTR unsigned char  size(1) Largest target is 5
		 -> SplitPacket@part(BANK1[5]), 

    strcopy@dest	PTR unsigned char  size(1) Largest target is 17
		 -> datoSeriale(BANK3[17]), id_dest(BANK3[4]), 

    SplitPacket@pkt	PTR unsigned char  size(1) Largest target is 50
		 -> dato(BANK2[50]), 

    strcat@source	PTR unsigned char  size(2) Largest target is 16
		 -> STR_14(CODE[4]), STR_10(CODE[4]), STR_6(CODE[2]), main@num_rand_s(BANK3[16]), 
		 -> PIC_ID(BANK0[4]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    Length@str	PTR unsigned char  size(2) Largest target is 50
		 -> datoSeriale(BANK3[17]), datoTastierino(BANK3[17]), id_dest(BANK3[4]), dato(BANK2[50]), 
		 -> packet(BANK3[15]), PIC_ID(BANK0[4]), 

    ConcatToPacket@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_14(CODE[4]), STR_10(CODE[4]), STR_6(CODE[2]), main@num_rand_s(BANK3[16]), 
		 -> PIC_ID(BANK0[4]), 

    ConcatToPacket@pkt	PTR unsigned char  size(1) Largest target is 15
		 -> packet(BANK3[15]), 

    ConvertToString@str	PTR unsigned char  size(2) Largest target is 16
		 -> main@num_rand_s(BANK3[16]), PIC_ID(BANK0[4]), 

    lcdPrint@str	PTR unsigned char  size(2) Largest target is 18
		 -> STR_17(CODE[15]), STR_16(CODE[16]), datoTastierino(BANK3[17]), STR_15(CODE[18]), 
		 -> STR_13(CODE[16]), STR_12(CODE[13]), STR_11(CODE[15]), STR_9(CODE[12]), 
		 -> STR_8(CODE[13]), STR_7(CODE[18]), main@num_rand_s(BANK3[16]), PIC_ID(BANK0[4]), 
		 -> STR_5(CODE[17]), STR_4(CODE[12]), STR_3(CODE[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IRS in COMMON

    i1_UART_TxString->i1___awmod
    i1_rand->i1___lmul
    i1___wmul->i1___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _IRS in BANK0

    _IRS->i1_UART_TxString
    i1_UART_TxString->i1___wmul
    i1___wmul->i1___awmod
    i1___awmod->i1_rand

Critical Paths under _main in BANK1

    _main->_ConvertToString
    _read_NumPad->___wmul
    _CompareStrings->_Length
    _init_PIC->_ConvertToString
    _lcdPrint->_lcdSend
    _init_LCD->_lcdSend
    _UART_init->___aldiv
    _Fill->_Length
    _ConvertToString->___aldiv
    _pow->___wmul
    ___aldiv->_pow
    _UART_TxString->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _SplitPacket->_Length
    _SplitPacket->_strcopy
    _ConcatToPacket->_strcat
    _strcat->_Length

Critical Paths under _IRS in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_init_PIC
    _init_PIC->_ConvertToString

Critical Paths under _IRS in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IRS in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   39165
                                             11 BANK3     16    16      0
                     _CompareStrings
                     _ConcatToPacket
                    _ConvertToString
                        _SplitPacket
                      _UART_TxString
                           _init_PIC
                           _lcdPrint
                            _lcdSend
                        _read_NumPad
 ---------------------------------------------------------------------------------
 (1) _read_NumPad                                         12    12      0    4312
                                             33 BANK1     12    12      0
                     _CompareStrings
                               _Fill
                            ___awmod
                             ___wmul
                       _eeprom_write
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _eeprom_write                                         3     2      1     152
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (2) _CompareStrings                                       8     6      2     931
                                              7 BANK1      8     6      2
                             _Length
 ---------------------------------------------------------------------------------
 (1) _init_PIC                                             4     4      0   15396
                                              7 BANK3      4     4      0
                    _ConvertToString
                               _Fill
                          _UART_init
                        _eeprom_read
                           _init_LCD
                        _init_NumPad
                        _init_Timer0
                           _lcdPrint
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                             7     5      2    4062
                                              4 BANK1      7     5      2
                            _lcdSend
 ---------------------------------------------------------------------------------
 (2) _init_Timer0                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_NumPad                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_LCD                                             2     2      0    2402
                                              4 BANK1      2     2      0
                            _lcdSend
 ---------------------------------------------------------------------------------
 (1) _lcdSend                                              4     3      1    2402
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            8     4      4    1106
                                             57 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) _Fill                                                 4     4      0     808
                                              7 BANK1      4     4      0
                             _Length
 ---------------------------------------------------------------------------------
 (2) _ConvertToString                                     16    10      6    4495
                                             57 BANK1      9     3      6
                                              0 BANK3      7     7      0
                            ___aldiv
                            ___almod
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                  9     7      2    1203
                                             33 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     613
                                              0 BANK1     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     985
                                             42 BANK1     15     7      8
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_TxString                                        5     4      1    3143
                                             33 BANK1      5     4      1
                        _UART_TxChar
                            ___awmod
                             ___wmul
                               _rand
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     211
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     496
                                             13 BANK1      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     496
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                             27 BANK1      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     793
                                             20 BANK1      7     3      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SplitPacket                                         17    17      0    1441
                                              7 BANK1     17    17      0
                             _Length
                            _strcopy
 ---------------------------------------------------------------------------------
 (2) _strcopy                                              7     6      1     506
                                              0 BANK1      7     6      1
 ---------------------------------------------------------------------------------
 (1) _ConcatToPacket                                       7     4      3    2797
                                             19 BANK1      7     4      3
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                              12    10      2     685
                                              7 BANK1     12    10      2
                             _Length
 ---------------------------------------------------------------------------------
 (3) _Length                                               7     5      2     299
                                              0 BANK1      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IRS                                                  4     4      0     844
                                             24 BANK0      4     4      0
                    i1_UART_TxString
 ---------------------------------------------------------------------------------
 (6) i1_UART_TxString                                      5     4      1     844
                                             19 BANK0      5     4      1
                      i1_UART_TxChar
                          i1___awmod
                           i1___wmul
                             i1_rand
                            i1_srand
 ---------------------------------------------------------------------------------
 (7) i1_srand                                              2     0      2      48
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) i1_rand                                               7     5      2     144
                                              0 BANK0      7     5      2
                           i1___lmul
 ---------------------------------------------------------------------------------
 (8) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (7) i1___wmul                                             6     2      4     144
                                             13 BANK0      6     2      4
                          i1___awmod (ARG)
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1___awmod                                            7     3      4     348
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                             i1_rand (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_UART_TxChar                                        2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CompareStrings
     _Length
   _ConcatToPacket
     _strcat
       _Length
   _ConvertToString
     ___aldiv
       _pow (ARG)
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
     ___almod
     ___lmul
     _pow
   _SplitPacket
     _Length
     _strcopy
   _UART_TxString
     _UART_TxChar
     ___awmod
     ___wmul
     _rand
     _srand
   _init_PIC
     _ConvertToString
     _Fill
       _Length
     _UART_init
       ___aldiv
     _eeprom_read
     _init_LCD
       _lcdSend
     _init_NumPad
     _init_Timer0
     _lcdPrint
       _lcdSend
     _lcdSend
   _lcdPrint
   _lcdSend
   _read_NumPad
     _CompareStrings
     _Fill
     ___awmod
     ___wmul
     _eeprom_write
     _rand
     _srand

 _IRS (ROOT)
   i1_UART_TxString
     i1_UART_TxChar
     i1___awmod
       i1_rand (ARG)
         i1___lmul
     i1___wmul
       i1___awmod (ARG)
       i1_rand (ARG)
     i1_rand
     i1_srand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     1B      50       9       83.3%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      32      11       52.1%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     42      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      38       5       70.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     118      12        0.0%
ABS                  0      0     118       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Jun 30 10:22:44 2023

                          pc 0002             ??_CompareStrings 00A9                           _iS 004F  
                         _iT 00E7                           fsr 0004          ___wmul@multiplicand 00BD  
           i1___wmul@product 0031                          l211 093A                          l220 0C8E  
                        l301 17FF                          l206 06E7                          l223 0CB6  
                        l304 07E5                          l217 16EB                          l314 0DAD  
                        l307 07F8                          l244 1719                          l421 1675  
                        l181 0B62                          l238 0F62                          l262 0AFB  
                        l190 0990                          l175 0D2E                          l184 174C  
                        l248 09E7                          l272 0414                          l265 080C  
                        l514 0F77                          l178 06FC                          l442 1772  
                        l451 16C3                          l419 165A                          l524 0FFF  
                        l196 17BF                          l445 1783                          l438 1750  
                        l278 04AF                          l615 0A9D                          l463 08F0  
                        l527 0DC2                          l439 1750                          l449 16AB  
                        l537 0E34                          l298 05B9                          l902 081B  
                        l905 0C42                          _IRS 0E35           i1UART_TxString@str 0035  
                        _pow 1784                          fsr0 0004                          indf 0000  
               ___awmod@sign 00BA                         ?_IRS 0070                         l3001 0F7B  
                       l3011 0F9D                         l3003 0F86                         l3021 0FD7  
                       l3013 0FAA                         l3005 0F8A                         l3031 0FF7  
                       l3023 0FD8                         l3015 0FAE                         l3007 0F92  
                       l3025 0FE1                         l3017 0FB7                         l3009 0F9A  
                       l3041 0DC6                         l3201 0AEC                         l3121 09D7  
                       l3113 09BA                         l3105 0994                         l4001 034E  
                       l3211 0C58                         l3019 0FC9                         l3027 0FE7  
                       l3051 0DED                         l3043 0DD1                         l3035 0DAE  
                       l3131 17C6                         l3115 09BC                         l3123 09DB  
                       l3107 09B8                         l4011 0371                         l4003 0352  
                       l3213 0C82                         l3221 16EF                         l3301 0A99  
                       l3029 0FEC                         l3061 0E21                         l3053 0DFF  
                       l3045 0DD9                         l3037 0DB1                         l3141 17FD  
                       l3133 17CB                         l3125 09E6                         l4021 039D  
                       l4005 0354                         l4013 037A                         l3215 0C88  
                       l3207 0C46                         l3223 16F2                         l3063 0E2C  
                       l3055 0E0D                         l3047 0DDC                         l3039 0DB5  
                       l3143 17FE                         l3135 17CE                         l3151 0B0D  
                       l3071 0966                         l3231 1756                         l4015 0384  
                       l4023 03B1                         l4007 0355                         l3217 0CB0  
                       l3209 0C48                         l3225 1701                         l3057 0E16  
                       l3049 0DE9                         l3137 17CF                         l3129 17C0  
                       l3161 0B47                         l3153 0B16                         l3145 0AFC  
                       l3073 096E                         l3241 1776                         l3233 1762  
                       l3401 052B                         l4017 038B                         l4009 0363  
                       l3227 1707                         l3251 080D                         l3059 0E1C  
                       l3139 17FC                         l3163 0B50                         l3155 0B2A  
                       l3147 0B00                         l3171 06EE                         l3067 093B  
                       l3243 177A                         l3235 176A                         l3411 054A  
                       l3403 0530                         l3331 03C2                         l3323 03BB  
                       l4019 0392                         l3229 1712                         l3501 0F3C  
                       l3261 07E5                         l3253 0BD2                         l3181 0AA1  
                       l3165 0B59                         l3157 0B35                         l3149 0B0A  
                       l3173 06F0                         l3069 0940                         l3245 177B  
                       l3237 176D                         l3413 0552                         l3405 0532  
                       l3341 03DA                         l3333 03C8                         l3325 03C1  
                       l3503 0F44                         l3263 07EA                         l3271 0A4A  
                       l3255 0C0F                         l3191 0AD0                         l3183 0AB0  
                       l3159 0B3E                         l3167 0802                         l3175 06F4  
                       l3247 177C                         l3239 1771                         l3423 0571  
                       l3407 0538                         l3415 0558                         l3351 041A  
                       l3343 03E9                         l3335 03D7                         l3441 08F4  
                       l3505 0F46                         l3265 07F2                         l3281 0A60  
                       l3273 0A4F                         l3257 0C1D                         l3193 0AD5  
                       l3177 1663                         l3169 06E8                         l3249 1782  
                       l3425 0576                         l3417 055D                         l3409 053D  
                       l3433 059B                         l3361 0431                         l3353 0420  
                       l3345 03F4                         l3451 0921                         l3443 0904  
                       l3507 0F4C                         l3291 0A7C                         l3283 0A63  
                       l3275 0A51                         l3267 0A43                         l4075 0AF3  
                       l3195 0AE3                         l3187 0ABE                         l3435 05A3  
                       l3427 0583                         l3419 056C                         l3371 04A7  
                       l3363 043E                         l3355 0425                         l3347 0405  
                       l3453 0927                         l3445 090A                         l4077 0F2E  
                       l3293 0A82                         l3285 0A6A                         l3277 0A55  
                       l3269 0A46                         l3461 0D40                         l3189 0ACC  
                       l3429 0594                         l3381 04CA                         l3373 04AB  
                       l3365 0444                         l3357 0426                         l3437 05AF  
                       l3349 0412                         l3455 0934                         l3447 0912  
                       l3295 0A89                         l3287 0A6E                         l3279 0A5A  
                       l3471 0D73                         l3463 0D48                         l3439 05B3  
                       l3391 0513                         l3383 04D9                         l3375 04B3  
                       l3367 0490                         l3359 042C                         l3449 0919  
                       l3481 0EEF                         l3473 0ECB                         l3289 0A72  
                       l3297 0A8F                         l3465 0D53                         l3457 0D32  
                       l3801 0CB7                         l3393 051A                         l3385 04FA  
                       l3369 049D                         l3377 04BB                         l3491 0F14  
                       l3483 0EF9                         l3475 0ECF                         l3299 0A94  
                       l2931 16B9                         l2923 169D                         l3467 0D58  
                       l3459 0D35                         l3811 0D09                         l3803 0CE3  
                       l3395 051C                         l3387 04FF                         l3379 04C0  
                       l3493 0F1D                         l3485 0F06                         l3477 0EDE  
                       l2933 16BF                         l2925 16A1                         l3469 0D69  
                       l2941 171F                         l3813 0D21                         l3805 0CE9  
                       l3389 050E                         l3397 0521                         l3901 01CB  
                       l3821 006C                         l3495 0F20                         l3487 0F0C  
                       l3479 0EE1                         l2927 16A5                         l2951 173C  
                       l2943 1720                         l3815 0D27                         l3807 0CF4  
                       l3399 0526                         l3911 01F6                         l3903 01D3  
                       l3831 008F                         l3823 0073                         l3489 0F11  
                       l2929 16B2                         l2961 178E                         l2953 173F  
                       l2945 1723                         l2937 171D                         l3817 0D2A  
                       l3809 0CFD                         l3921 0215                         l3913 0200  
                       l3905 01D9                         l3841 00BF                         l3833 0098  
                       l3825 007C                         l2971 16C4                         l3499 0F29  
                       l2963 17A6                         l3771 05BA                         l2955 1749  
                       l2947 1729                         l2939 171E                         l3931 0247  
                       l3923 0220                         l3915 0204                         l3907 01DA  
                       l3843 00C8                         l3851 00E6                         l3835 00A3  
                       l3827 0087                         l3819 0067                         l2973 16C9  
                       l2981 08A9                         l2965 17AC                         l2957 1787  
                       l3781 05F4                         l3773 05C0                         l2949 1732  
                       l3933 0256                         l3941 0281                         l3925 0229  
                       l3917 020A                         l3909 01E8                         l3861 0114  
                       l3853 00EB                         l3845 00D3                         l3837 00B7  
                       l3829 008A                         l2975 16CF                         l2991 08E8  
                       l2983 08B3                         l2967 17B9                         l2959 178B  
                       l3791 0682                         l3783 05F9                         l3775 05C6  
                       l3951 029E                         l3943 0284                         l3935 025E  
                       l3927 0234                         l3919 020E                         l3871 015F  
                       l3855 00FD                         l3863 0128                         l3847 00DD  
                       l3839 00BA                         l2977 16E7                         l2985 08B7  
                       l3793 06AA                         l3785 05FF                         l3777 05CC  
                       l3961 02B0                         l3953 02A4                         l3937 0264  
                       l3929 023F                         l3945 0285                         l3881 017F  
                       l3873 016A                         l3865 0134                         l3857 0102  
                       l3849 00E5                         l2987 08CE                         l2995 0F63  
                       l3795 06B2                         l3787 062C                         l3779 05D5  
                       l3963 02B2                         l3955 02A7                         l3947 028A  
                       l3971 02D9                         l3939 026F                         l3883 0183  
                       l3875 016E                         l3867 0144                         l3891 019D  
                       l3859 0109                         l2989 08D7                         l2997 0F66  
                       l3789 0646                         l3797 06B8                         l3981 0301  
                       l3973 02E0                         l3965 02B3                         l3957 02AA  
                       l3949 0293                         l3893 01A9                         l3885 0185  
                       l3877 0170                         l3869 014B                         l2999 0F6A  
                       l3799 06CB                         l3991 0331                         l3983 0315  
                       l3975 02E6                         l3967 02C1                         l3959 02AC  
                       l3895 01AE                         l3887 0186                         l3879 0171  
                       l3993 0338                         l3985 0320                         l3977 02ED  
                       l3969 02CF                         l3897 01B4                         l3889 0194  
                       l3995 0343                         l3987 0326                         l3979 02F6  
                       l3899 01BC                         l3997 0347                         l3989 032A  
                       l3999 034D                         ?_pow 00C1                         STR_1 07BB  
                       STR_2 07D0                         STR_3 07C6                         STR_4 07AF  
                       STR_5 0747                         STR_6 07E0                         STR_7 0735  
                       STR_8 0796                         STR_9 07A3                         _T0IF 005A  
                       u3000 0FE7                         u3001 0FE6                         u3010 0FEC  
                       u3011 0FEB                         u3100 0E21                         u3020 0DB5  
                       u3101 0E20                         u3021 0DB4                         u3030 0DC6  
                       u3110 094E                         u3031 0DC5                         u3040 0DD9  
                       u3120 0978                         u3200 09D6                         u4000 0073  
                       u3041 0DD8                         u3201 09D5                         u4001 0072  
                       u3130 0990                         u3210 09E6                         u4010 008F  
                       u3131 098F                         u3211 09E5                         u4011 008E  
                       u3060 0DED                         u3220 17DF                         u3300 1771  
                       u4100 0247                         u4020 00BF                         u3061 0DEC  
                       u3301 1770                         u4101 0246                         u4021 00BE  
                       u3070 0DFF                         u3230 1663                         u3310 1782  
                       u4110 0256                         u4030 00FD                         u3071 0DFE  
                       u3055 0DDE                         u3231 1660                         u3311 1781  
                       u4111 0255                         u4031 00FC                         u3320 0C3A  
                       u3240 0ABD                         u4200 038B                         u4120 025E  
                       u4040 0102                         u3241 0ABC                         u3225 17DA  
                       u4201 038A                         u4121 025D                         u4041 0101  
                       u3250 0C64                         u3330 07EA                         u3410 0A8F  
                       u3090 0E1C                         u4130 0264                         u4050 0144  
                       u3331 07E9                         u3411 0A8E                         u3091 0E1B  
                       u3075 0DFB                         u4131 0263                         u4051 0143  
                       u4035 00F9                         u3260 0C98                         u3420 0A94  
                       u3340 0A4A                         u3500 0431                         u4140 028A  
                       u4060 01AE                         u3421 0A93                         u3405 0A83  
                       u3341 0A49                         u3325 0C35                         u3085 0E0E  
                       u3245 0AB9                         u3501 0430                         u4141 0289  
                       u4061 01AD                         u3270 0CB0                         u3350 0A55  
                       u3190 09B8                         u3510 043E                         u4150 02E0  
                       u4070 01BC                         u3271 0CAF                         u3351 0A54  
                       u3191 09B7                         u3511 043D                         u4151 02DF  
                       u4071 01BB                         u4055 0140                         _PIE1 008C  
                       u3280 1712                         u3360 0A60                         u2800 16A5  
                       u3600 053D                         u3520 049D                         u3440 03E9  
                       u4160 02E6                         u4080 01CB                         u3281 1711  
                       u3361 0A5F                         u2801 16A4                         u3601 053C  
                       u3521 049C                         u4217 03EF                         u3441 03E8  
                       u4161 02E5                         u4081 01CA                         u3290 1756  
                       u3610 054A                         u3530 04C0                         u3450 0405  
                       u4170 02ED                         u4090 01D3                         u4227 0B06  
                       u3195 09B4                         u3291 1755                         u3611 0549  
                       u3531 04BF                         u3515 043A                         u3451 0404  
                       u4171 02EC                         u4091 01D2                         u3700 0EEF  
                       u3380 0A72                         u3620 055D                         u3540 04FF  
                       u4180 0331                         u3701 0EEE                         u3381 0A71  
                       u4237 0B1C                         u3621 055C                         u3541 04FE  
                       u3525 0499                         u4181 0330                         u3710 0EF9  
                       u3390 0A7C                         u2830 16BF                         u2910 08E8  
                       u3630 0576                         u3550 050E                         u3470 0420  
                       u4190 0384                         u3711 0EF8                         u3391 0A7B  
                       u3375 0A64                         u2831 16BE                         u2815 16AC  
                       u2911 08E7                         u4247 0B30                         u3631 0575  
                       u3615 0546                         u3551 050D                         u3471 041F  
                       u4191 0383                         u3720 0F62                         u2920 0F6A  
                       u2840 17B9                         u3640 0583                         u3560 051A  
                       u3480 0425                         u3721 0F61                         u2825 16B3  
                       u2905 08D8                         u2921 0F69                         u2841 17B8  
                       u4257 1738                         u3641 0582                         u3561 0519  
                       u3481 0424                         u3465 040A                         u2850 16D9  
                       u2930 0F7B                         u3650 05AF                         u3570 0526  
                       u3490 042C                         u3395 0A78                         u2931 0F7A  
                       u4267 1745                         u3651 05AE                         u3571 0525  
                       u3491 042B                         u2860 16E7                         u2940 0F9A  
                       u3660 05B9                         u3580 052B                         u2861 16E6  
                       u3725 0F5E                         u2941 0F99                         u2845 17B5  
                       u3661 05B8                         u3645 057F                         u3581 052A  
                       u3670 090A                         u2870 08B7                         u3590 0530  
                       u3671 0909                         u2871 08B6                         u3591 052F  
                       u3680 0D53                         u2960 0FAE                         u2881 08C0  
                       u3681 0D52                         u2961 0FAD                         u2882 08C7  
                       u3690 0D58                         u2883 08CE                         u3691 0D57  
                       u2955 0F9F                         u2980 0FC9                         u3940 05C6  
                       _RCIF 0065                         u2981 0FC8                         u3941 05C5  
                       u3950 062B                         u2895 08D0                         u2975 0FB0  
                       u3951 062A                         u3960 0656                         u2985 0FC5  
                       _PIR1 000C                         u3970 06CB                         u2995 0FD9  
                       u3971 06CA                         u3980 06DD                         u3990 0CE9  
                       u3975 06C7                         u3991 0CE8                         _TMR0 0001  
             ??_eeprom_write 00A1                         _Fill 0A9E                         _fail 004B  
                       _i_id 00E4                         _dato 0110                         _main 0067  
          ConcatToPacket@pkt 00B9                         _keyf 00EA                         _keys 0710  
                       _rand 0BD2            ConcatToPacket@str 00B3                         btemp 007E  
                       _type 00E8                         pow@b 00C5                         pow@i 00C6  
                       pow@n 00C8                         start 0010              __end_ofi1_srand 1649  
                      ??_IRS 0038                        ??_pow 00C3                 ?_init_NumPad 0070  
               ?_init_Timer0 0070                        ?_Fill 0070              __end_of___aldiv 1000  
            __end_of___almod 0E35                        ?_main 0070                        ?_rand 00AD  
                      _EEADR 010D                        STR_10 07DC                        STR_11 0787  
                      STR_12 0796                        STR_13 0768                        STR_14 07D8  
                      STR_15 0723                        STR_16 0758                        STR_17 0778  
            __end_of___awmod 0A9E                 ?_read_NumPad 0070                        i1l304 164A  
                      i1l314 0BD1                        i1l307 1656                        i1l326 0EBD  
                      i1l451 169C                        i1l615 0A42                        i1l463 0861  
                      i1l449 1684                        i1l902 1648                        i1l905 08A8  
                      _RCREG 001A                        _RCSTA 0018                        _SPBRG 0099  
                      _PORTB 0006                        _PORTD 0008                        _TRISB 0086  
                      _TRISC 0087                        _TRISD 0088                        _TXREG 0019  
                      _TXSTA 0098              __end_of_colMask 0723          ___lmul@multiplicand 00A4  
            __end_of_lcdSend 174D               i1___awmod@sign 002C                        _randx 0054  
                      _srand 080D             __end_ofi1___lmul 0862                        pclath 000A  
           __end_ofi1___wmul 169D              __end_of_rowMask 0720                        status 0003  
        i1___wmul@multiplier 002D                        wtemp0 007E              __end_of_strcopy 171A  
           ?i1_UART_TxString 0033                 __end_of_Fill 0AFC              __initialization 0013  
               __end_of_main 03BB                 __end_of_keys 071C                 __end_of_rand 0C43  
        i1___lmul@multiplier 0070                       ??_Fill 00A7                       ??_main 00E2  
                     ??_rand 00AF            strcat@length_dest 00B1                       _EEDATA 010C  
                     _EECON1 018C                       _EECON2 018D                       ?_srand 00A0  
                     i1l2401 0883                       i1l2091 0828                       i1l2403 0891  
                     i1l2341 1650                       i1l2093 083F                       i1l2343 1654  
                     i1l2351 168B                       i1l2095 0848                       i1l2087 081C  
                     i1l2361 09EB                       i1l2353 1692                       i1l2345 1676  
                     i1l2097 0859                       i1l2089 0824                       i1l2339 164A  
                     i1l2371 09FF                       i1l2363 09EF                       i1l2355 1698  
                     i1l2347 167A                       i1l2381 0A17                       i1l2373 0A05  
                     i1l2365 09F4                       i1l2349 167E                       i1l2621 0B74  
                     i1l2391 0A39                       i1l2383 0A21                       i1l2375 0A08  
                     i1l2367 09F6                       i1l2359 09E8                       i1l2631 0B9F  
                     i1l2623 0B7C                       u210_20 1698                       i1l2393 0A3E  
                     i1l2385 0A27                       i1l2377 0A0F                       i1l2369 09FA  
                     u210_21 1697                       i1l2625 0B87                       i1l2617 0B66  
                     i1l2387 0A2E                       i1l2379 0A13                       i1l2627 0B8C  
                     i1l2619 0B69                       i1l2389 0A34                       i1l2397 1640  
                     i1l2629 0B95                       i1l2399 0862                       u211_20 09EF  
                     u211_21 09EE                       i1l2841 0E39                       i1l2843 0E3F  
                     i1l2851 0E4A                       i1l2861 0E87                       i1l2853 0E4E  
                     i1l2845 0E43                       i1l2863 0E90                       i1l2855 0E66  
                     i1l2871 0EBC                       i1l2847 0E47                       i1l2839 0E35  
                     u212_20 09FA                       u220_20 08A0                       u212_21 09F9  
                     i1l2865 0E98                       i1l2857 0E78                       i1l2849 0E49  
                     i1l2867 0EA3                       i1l2859 0E83                       u220_25 089B  
                     i1l2869 0EB5                       u213_20 0A05                       u213_21 0A04  
                     u206_20 1650                       u206_21 164F                       u214_25 0A09  
                     u215_20 0A17                       u207_20 167E                       u215_21 0A16  
                     u207_21 167D                       u216_20 0A21                       u216_21 0A20  
                     u216_25 0A1D                       u208_25 1685                       _INTCON 000B  
                     u217_25 0A28                       u209_25 168C                       u218_20 0A34  
                     u218_21 0A33                       u219_20 0A39                       u171_20 0828  
                     u251_20 0B87                       u219_21 0A38                       u171_21 0827  
                     u251_21 0B86                       u252_20 0B8C                       u172_21 0831  
                     u252_21 0B8B                       u172_22 0838                       u172_23 083F  
                     u173_25 0841                       u174_25 0849                       u175_20 0859  
                     u175_21 0858                       u274_20 0E39                       u274_21 0E38  
                     u275_20 0E4E                       u275_21 0E4D                       u276_20 0E66  
                     u276_21 0E65                       u277_20 0E78                       u277_21 0E77  
                     _PIC_ID 0050                       u277_25 0E74                       u278_20 0E83  
                     u278_21 0E82                       u279_20 0E98                       u279_21 0E97  
                  ??i1_srand 0072                       Fill@id 00AA        i1UART_TxString@is_ACK 0033  
                     i1_rand 0862                 ?_UART_TxChar 0070                       _Length 16C4  
           __end_of_lcdPrint 0991                       ___lmul 08A9                    ??___aldiv 00D2  
                  ??___almod 00A8                       ___wmul 169D            __end_of_UART_init 1800  
                  ??___awmod 00B8          ConcatToPacket@delim 00B5             __end_of_init_LCD 0B63  
           __end_of_init_PIC 0D2F                       _packet 01B2                       _old_iT 004E  
            ___awmod@divisor 00B4         __end_of_eeprom_write 1784              ___awmod@counter 00B9  
                  ??_lcdSend 00A1                       _source 00E9                       _strcat 0C43  
          __end_ofi1___awmod 0A43                       saved_w 007E                       pow@exp 00C1  
                     srand@x 00A0                    ??_strcopy 00A1               _datoTastierino 0190  
    __end_of__initialization 0063              eeprom_read@addr 00A1        __end_of_UART_TxString 0DAE  
              ??_SplitPacket 00A7               __pcstackCOMMON 0070                 __pidataBANK0 07F9  
               __pidataBANK1 07FD                __end_of_srand 081C                    ?i1___lmul 0070  
                  ?i1___wmul 002D            eeprom_write@value 00A0                      ??_srand 00A2  
                 __pbssBANK0 003C                   __pbssBANK1 00E2                   __pbssBANK2 0110  
                 __pbssBANK3 0190                      ?i1_rand 0020                 strcat@source 00A7  
                    ?_Length 00A0                   __pmaintext 0067                      ?___lmul 00A0  
                    ?___wmul 00BB                   __pintentry 0004               ___lmul@product 00A9  
        __end_of_SplitPacket 0F63                   ??i1___lmul 0078                      ?_strcat 00A7  
                 ??i1___wmul 007E                    ?_lcdPrint 00A4       ConvertToString@n_cifre 01CB  
                 __stringtab 0700                    ?_init_LCD 0070                    ?_init_PIC 0070  
                    i1_srand 1640            ??_ConvertToString 00DF                      ___aldiv 0F63  
                    ___almod 0DAE                      ___awmod 0A43                      _colMask 0720  
                 _initialize 00EE                      _colScan 00EC                      _id_dest 01C1  
                    _lcdSend 171A                      __ptext1 03BB                      __ptext2 174D  
                    __ptext3 0991                      __ptext4 0CB7                      __ptext5 093B  
                    __ptext6 06E8                      __ptext7 0802                      __ptext8 0AFC  
                    __ptext9 171A               _ConcatToPacket 08F1                      _compare 00E6  
                    _maxFail 00ED             ___awmod@dividend 00B6             ___aldiv@dividend 00CE  
                    _seconds 003C                   _keypressed 00EF                      _pr_succ 0048  
                    _rowMask 071C                      _rowScan 00EB                      _success 004C  
                 ??_lcdPrint 00A6                      clrloop0 1639                      _strcopy 16EC  
       end_of_initialization 0063               main@num_rand_s 01D0                   ??_init_LCD 00A4  
                 ??_init_PIC 01CC                 _eeprom_write 174D               UART_TxString@n 00C3  
                 _pr_err_max 0049                i1_UART_TxChar 1649                  _SplitPacket 0EC8  
           ___aldiv@quotient 00D5                      strcat@n 00AF        i1___wmul@multiplicand 002F  
     __end_of_ConcatToPacket 093B                    _UART_init 17C0                    _PORTEbits 0009  
                  _TRISEbits 0089                    i1___awmod 09E8                ??_eeprom_read 00A0  
                  Length@len 00A5                    Length@str 00A0               ?i1_UART_TxChar 0070  
             __end_ofi1_rand 08A9               __end_of_Length 16EC               __end_of___lmul 08F1  
             __end_of___wmul 16C4              ?_ConcatToPacket 00B3                   ?_UART_init 00D9  
             __end_of_strcat 0CB7        i1___lmul@multiplicand 0074          start_initialization 0013  
                __end_of_IRS 0EC8                  __end_of_pow 17C0                   ?i1___awmod 0027  
                 init_PIC@id 01CE                     ??i1_rand 0022                     ??_Length 00A2  
            CompareStrings@i 00AD                     ??___lmul 00A8                     ??___wmul 00BF  
        __end_of_eeprom_read 1676                ??_init_NumPad 00A0                  __pdataBANK0 0054  
                __pdataBANK1 00ED                ??_init_Timer0 00A0           i1___awmod@dividend 0029  
              ??_read_NumPad 00C1                     ??_strcat 00A9               _CompareStrings 0991  
                  ___latbits 0002                __pcstackBANK0 0020                __pcstackBANK1 00A0  
              __pcstackBANK3 01C5            ??i1_UART_TxString 0034             i1___lmul@product 0079  
            _ConvertToString 05BA             eeprom_write@addr 00A2                     ?i1_srand 0070  
                _datoSeriale 01A1              ??i1_UART_TxChar 0070                     ?___aldiv 00CA  
                   ?___almod 00A0                     ?___awmod 00B4             ___almod@dividend 00A4  
                  __pstrings 0700                  ??_UART_init 00DD                     ?_lcdSend 00A0  
     __end_of_CompareStrings 09E8          __end_of_init_NumPad 080D          __end_of_init_Timer0 06FD  
              UART_TxChar@ch 00A1                  strcopy@dest 00A4                  ??i1___awmod 007D  
        __end_of_read_NumPad 05BA                     ?_strcopy 00A0              ___aldiv@divisor 00CA  
          interrupt_function 0004              ___aldiv@counter 00D3               ___wmul@product 00BF  
        UART_TxString@is_ACK 00C1                 _milliseconds 0040                    clear_ram0 1638  
                _eeprom_read 1657                ??_UART_TxChar 00A0                _UART_TxString 0D2F  
               ?_SplitPacket 0070                 _old_num_rand 0044             ConvertToString@i 01C9  
           ConvertToString@j 01C7             ConvertToString@n 00D9                    lcdPrint@n 00A9  
                   i1___lmul 081C                  __stringbase 070F            ___wmul@multiplier 00BB  
                   i1___wmul 1676              ?_CompareStrings 00A7             i1UART_TxString@n 0036  
    __end_of_ConvertToString 06E8            ___lmul@multiplier 00A0                     i1srand@x 0070  
         CompareStrings@str1 00AE           CompareStrings@str2 00A7                   _EECON1bits 018C  
             ?_UART_TxString 00C1             ??_ConcatToPacket 00B6            i1___awmod@divisor 0027  
          i1___awmod@counter 002B          __end_of_UART_TxChar 07F9                  _init_NumPad 0802  
                _init_Timer0 06E8           __end_of__stringtab 0710                strcopy@source 00A0  
                _read_NumPad 03BB                   strcat@dest 00AE                     __ptext10 1657  
                   __ptext11 17C0                     __ptext20 08A9                     __ptext12 0A9E  
                   __ptext21 169D                     __ptext13 05BA                     __ptext30 0B63  
                   __ptext22 0A43                     __ptext14 1784                     __ptext31 1640  
                   __ptext23 07E2                     __ptext15 0DAE                     __ptext32 0862  
                   __ptext24 0EC8                     __ptext16 0F63                     __ptext33 081C  
                   __ptext25 16EC                     __ptext17 0D2F                     __ptext34 1676  
                   __ptext26 08F1                     __ptext18 080D                     __ptext35 09E8  
                   __ptext27 0C43                     __ptext19 0BD2                     __ptext36 1649  
                   __ptext28 16C4                     __ptext29 0E35                     _lcdPrint 093B  
           UART_TxString@str 00C5                read_NumPad@id 00CB              ___almod@divisor 00A0  
ConcatToPacket@packet_length 00B7              ___almod@counter 00A9              i1UART_TxChar@ch 0071  
                   _init_LCD 0AFC                     _init_PIC 0CB7                     _old_i_id 0046  
                   _recieved 004D                     _pr_start 004A                     _num_rand 00E2  
            i1_UART_TxString 0B63                   _INTCONbits 000B             ?_ConvertToString 00D9  
                   intlevel1 0000            UART_init@baudrate 00D9              ??_UART_TxString 00C2  
        ConvertToString@temp 01C5           SplitPacket@section 00B1                    stringcode 070A  
                _UART_TxChar 07E2                   Fill@length 00A8                   _OPTION_REG 0081  
          SplitPacket@i_part 00B3                  lcdSend@dato 00A3                  lcdSend@tipo 00A0  
         ConvertToString@str 00DD                     strcopy@n 00A5                     stringdir 070A  
                   stringtab 0700                 ___aldiv@sign 00D4                  lcdPrint@str 00A4  
               ___almod@sign 00AA                ?_eeprom_write 00A0                   _STATUSbits 0003  
               ?_eeprom_read 0070              SplitPacket@part 00AC               SplitPacket@len 00AA  
    __end_ofi1_UART_TxString 0BD2        __end_ofi1_UART_TxChar 1657               SplitPacket@pkt 00B5  
               SplitPacket@i 00B6  
